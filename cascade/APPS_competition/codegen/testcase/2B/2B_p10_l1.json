[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2 3\n''') == '5'\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''\n4\n( 12 3 )\n''') == '36'\nassert solution('''\n6\n( 2 ) ( 3 )\n''') == '5'\nassert solution('''\n6\n( ( 2 3 ) )\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2 3\") == \"5\"\nassert solution(\"8\\n( 2 ( 2 1 ) ) 3\") == \"9\"\nassert solution(\"4\\n( 12 3 )\") == \"36\"\nassert solution(\"6\\n( ( 2 3 ) )\") == \"5\"\nassert solution(\"6\\n( ( ( 2 3 ) ) )\") == \"5\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"4\") == \"5\"\nassert solution(\"6\") == \"5\"\n\n'''"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 ( 2 ( 2 1 ) ) 3') == '9'\nassert solution('4 ( 12 3 )') == '36'\nassert solution('6 ( ( 2 ) )') == '5'\nassert solution('6 ( ( ( 2 3 ) ) )') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '5'\nassert solution(solution.__annotations__) == '5'\nassert solution(''.join(open(snakemake.input[0], 'r').readlines())) == '5'\nassert solution(''.join(open(snakemake.input[1], 'r').readlines())) == '5'\nassert solution(''.join(open(snakemake.input[2], 'r').readlines())) == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"8\") == \"9\"\nassert solution(\"( 2 ) ( 3 )\") == \"5\"\nassert solution(\"( ( 2 3 ) )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution(\"\"\"\n2\n2 3\n\"\"\")) == \"5\"\nassert solution(solution(\"\"\"\n4\n( 12 3 )\n\"\"\")) == \"5\"\nassert solution(solution(\"\"\"\n6\n( ( 2 3 ) )\n\"\"\")) == \"5\"\nassert solution(solution(\"\"\"\n6\n( )\n\"\"\")) == \"0\"\nassert solution(solution(\"\"\"\n1\n2 3\n\"\"\")) == \"6\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == \"5\"\nassert solution('8') == \"9\"\nassert solution('4') == \"5\"\nassert solution('6') == \"5\"\nassert solution('6') == \"5\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n29998\n''') == '5'\n\nassert solution('''\n009990001\n''') == '3'\n\nassert solution('''\n610\n''') == '4'\n\nassert solution('''\n981\n''') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0\n''') == '0'\nassert solution('''\n009990001\n''') == '3'\nassert solution('''\n29998\n''') == '5'\nassert solution('''\n610\n''') == '4'\nassert solution('''\n981\n''') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\""
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == \"seems legit\"\nassert solution('''2\n2017 11 0\n2018 1 1000\n''') == \"tampered odometer\"\nassert solution('''1\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() =='seems legit'\nassert solution('2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') =='seems legit'\nassert solution('2') == 'tampered odometer'\nassert solution('3') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'tampered odometer'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\\\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\n\nassert solution(\"\"\"\\\n3\n2017 4 0\n2017 8 12000\n2018 8 42001\n\"\"\") == \"insufficient service\"\n\nassert solution(\"\"\"\\\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') =='seems legit'\nassert solution('3') =='seems legit'\nassert solution('4') =='seems legit'\nassert solution('5') =='seems legit'\nassert solution('6') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == \"seems legit\"\nassert solution('2') == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n2017 11 0\\n2018 1 1000') == 'insufficient service'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000') == 'tampered odometer'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000') =='seems legit'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n2017 4 0\n2017 8 12000\n2018 8 42000\n2018 8 42000\nSample Output 1:\nseems legit\n\"\"\") == \"seems legit\"\n\nassert solution(\"\"\"\n4\n2017 4 0\n2017 8 12000\n2018 8 42000\n2018 8 42001\nSample Output 2:\ninsufficient service\n\"\"\") == \"insufficient service\"\n\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\nSample Output 3:\ntampered odometer\n\"\"\") == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'tampered odometer'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n0 2 3\\n0 1\\n1') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4') == '2'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '4'\nassert solution('5') == '3'\nassert solution('6') == '2'\n\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n0 2 3\n0 1\n1\n''') == \"3\"\nassert solution('''\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n0 1\nSample Output 4:\n2\n''') == \"2\"\nassert solution('''\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\n''') == \"4\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"3\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"3\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 4\") == \"3\"\nassert solution(\"5 2 3\") == \"2\"\nassert solution(\"6 1 3\") == \"2\"\nassert solution(\"4 1 2 3\") == \"1\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n0 2 3\\n0 1\\n1\\n\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\\n\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\n\") == \"2\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '2'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2\\n0 2 3') == '3'\nassert solution('5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\nassert solution('6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\\nSample Output 4:\n2') == '4'\nassert solution('4\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n2 3\\n0 2 3\\n0 1') == '3'\nassert solution('5 3\\n2 3 4\\n0 1\\n0 1\\n0 1') == '2'\nassert solution('6 1\\n2 3 4\\n1 5\\n0 4\\n0 1 3 5\\n1 3 2 4 5') == '4'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == 'IMPOSSIBLE'\nassert solution('''\n2\nBLUE 1 4000\nRED 4002 10000\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '4'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\nBLUE 1\\nRED 5001\\n\") == \"2\"\nassert solution(\"2\\nBLUE 1\\nRED 5001\\nWHITE 700\\n\") == \"3\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\n\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\n\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n2\nBLUE 1 4000\nRED 4002 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\") == \"IMPOSSIBLE\"\nprint('All test cases passed.')"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nBLUE 1 5000\nRED 5001 10000\nWHITE 7000 10000\n''') == '2'\n\nassert solution('''\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\n\nassert solution('''\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\nBLUE 1 5000\\nRED 5001 10000\") == \"2\"\nassert solution(\"3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\\n\") == \"3\"\nassert solution(\"4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\\n\") == \"4\""
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''PRATTATTATTIC\nGGGGGGGGG''') == \"6\"\nassert solution('''BABBABABBABBA\nGGGGGGGGG''') == \"6\"\nassert solution('''PRIME\nGGGGGGGGG''') == \"5\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"A\") == \"1\"\nassert solution(\"AA\") == \"1\"\nassert solution(\"AAB\") == \"1\"\nassert solution(\"AAAB\") == \"1\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\""
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\""
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '1'\nassert solution('A') == '2'\nassert solution('AAAAAA') == '2'\nassert solution('PRIMER') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"D 2\") == \"0\"\nassert solution(\"D 1\") == \"1\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 1\") == \"1\"\nassert solution(\"D 2\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"D 1\nD 2\nE\nD 3\nD 1\"\"\") == \"0\"\nassert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\"\"\") == \"1\"\nassert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\"\"\") == \"1\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\nSample Output 1:\n0\n\nSample Input 2:\nD 2\nD 1\nE\nD 1\nD 2\nE\nSample Output 2:\n1\n\nSample Input 3:\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\nSample Output 3:\n0\n\nSample Input 4:\nI 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\nSample Output 4:\n1''') == '1'''\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"D 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\nassert solution(\"\"\"I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"I 14 X\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('D 1\\nD 2\\nE\\nD 3\\nD 1\\nE\\n') == '0'\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n') == '1'\n\nassert solution('D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n') == '1'\nassert solution('I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n') == '0'\n\nassert solution('I 14 A\\nI 15 B\\nE\\nI 14 A\\nI 15 B\\nE\\n') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\ne\\nI 1 X\\nD 1\\nE\\nE\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\nSample Input 2:\nD 2\nD 1\nE\nD 1\nD 2\nE\nSample Output 2:\n1''') == '1'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\nSample Output 2:\n0''') == '0'\nassert solution('''I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\nSample Output 4:\n0''') == '0'\nassert solution('''I 14 B\nI 14 A\nE\nI 15 A\nI 15 B\nE\nSample Output 4:\n1''') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '0'\nassert solution('''\nD 1\nE\nD 1\nE\n''') == '0'\nassert solution('''\nD 1\nE\nI 2 X\nI 4 B\nI 4 A\nI 10 B\nI 15 A\nD 1\nD 2\nD 3\nE\n''') == '1'\n\n'''\nFind the largest palindrome product possible by multiplying two 3-digit numbers.\n\nExample 1:\n\nInput: 42\nOutput: 840\n\nExample 2:\n\nInput: 123\nOutput: 810\n\nAssume that:\n\n1 <= N <= 10^9\n\nConstraints:\n\nN <= 10^9\n'''\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"500\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\nprint('All test cases passed')\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 0 1 1 0 0\") == \"1900\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\""
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10\\n1 12\\n1 13\\n') == '2'\nassert solution('2 10\\n1 5\\n1 12\\n') == '2'\nassert solution('2 10\\n1 5\\n4 1\\n') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 10\n1 12\n1 13\n''') == '2'\nassert solution('''\n2 10\n1 5\n1 12\n''') == '2'\nassert solution('''\n2 10\n1 5\n1 4\n''') == '2'\nassert solution('''\n2 10\n1 5\n4 1\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\nassert solution('1 5') == '2'\nassert solution('1 5') == '2'\nassert solution('4 1') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"3 10\") == \"2\"\nassert solution(\"4 10\") == \"1\"\nassert solution(\"5 10\") == \"1\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\nassert solution('3 10') == '2'\nassert solution('4 10') == '2'\nassert solution('5 10') == '2'\n\nprint('All tests passed')\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n1 12\\n1 13') == '2'\nassert solution('2 10\\n1 5\\n4 1') == '2'"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 10\\n1 5\\n1 12\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 4\") == \"2\"\nassert solution(\"2 10\\n1 5\\n4 1\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 10\n1 5\n1 4''') == \"2\"\nassert solution('''2 10\n1 5\n1 4''') == \"2\"\nassert solution('''2 10\n1 5\n4 1''') == \"2\"\nassert solution('''3 10\n1 4\n1 5''') == \"3\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 10\n1 12\n1 13\n''') == '2'\nassert solution('''2 10\n1 5\n1 12\n''') == '2'\nassert solution('''2 10\n1 5\n1 4\n''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 10\n1 5\n1 4''') == \"2\"\nassert solution('''2 10\n1 5\n4 1''') == \"2\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == '28.972609375'\nassert solution('3') == '36.281033496'\nassert solution('4') == '32'\nassert solution('5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"28.970562748\"\nprint(solution())"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.97'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.28'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32.00'\nassert solution('''\n8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32.00'\nprint('All done!')\n'''"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\") == \"28.970562748\"\nassert solution(\"4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8\") == \"36.2842712475\"\nassert solution(\"4\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\") == \"32\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28'\nassert solution('4\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8') == '36.2842712475'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '28'\nassert solution('5') == '36.2842712475'\nassert solution('6') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"IMPOSSIBLE\"\nassert solution(\"1\") == \"28.970562748\"\nassert solution(\"3\") == \"32\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5''') == '28'\nassert solution('''4\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3''') == '36.28'\nassert solution('''8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8''') == '32'\nassert solution('''10\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n10 20 5\n20 20 5\n10 20 5\n20 20 5\n10 20 5\n20 20 5''') == '28'\nassert solution('''4\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3''') == '36.28'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '28'\nassert solution('6') == '32'\nassert solution('8') == '32'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\n\nassert solution() == '1'\n\nassert solution() == '1'\n\nassert solution() == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1 3 9 5\") == \"3\"\nassert solution(\"2 2 6 8\") == \"1\"\nassert solution(\"4 8 9 3\") == \"1\"\nassert solution(\"5 2 7 10\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\nassert solution('''2\n-1 -2 -1 -1\n-1 2 -1 -1\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '-1'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\n\n---\n\n\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u043e\u0447\u0435\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438 \u0442\u043e\u0447\u0435\u043a \u0432 \u043f\u0440\u044f\u043c\u043e\u0439 \u0438 \u043d\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 (\u043f\u043e \u043e\u0431\u0449\u0435\u043c\u0443 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430).\n\n\u0412\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u0432\u0443\u0445 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a. \u0412 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u0432\u0443\u0445 \u0442\u043e\u0447\u0435\u043a \u043d\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b \u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n3\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u043e\u0431\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u0440\u0430\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432\u0441\u0435 \u044d\u0442\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445, \u0442\u043e \u044d\u0442\u0443 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438.\n\n\u0421\u0443\u043c\u043c\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u043e\u0447\u0435\u043a \u043d\u0435 \u043f\u043e\ufffdle\u0437\u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0430 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u043e\u043c\u0443 \u043d\u0438\u0436\u0435. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 (\u043f\u043e \u043e\u0431\u0449\u0435\u043c\u0443 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430).\n\n\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u043e\u0441\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e.\n\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c: O(n) \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0435 \u0441\u043b\u0443\u0436\u0438\u0442 \u0442\u0435\u0441\u0442\u043e\u0432.\n\"\"\""
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 3 9 5') == '3'\nassert solution('3\\n2 2 6 8') == '1'\nassert solution('4\\n8 4 4 10') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1234321') == '94708'\nassert solution('55') == '55'\nassert solution('101') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '0'\nassert solution('10') == '1'\nassert solution('555') == '0'\nassert solution('12321') == '1'\nassert solution('1234321') == '0'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''12321''') == '94708'\nassert solution('''12223''') == '-1'\nassert solution('''33322111''') == '95'\nassert solution('''1232321''') == '95'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\nprint(solution(input()))\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12223') == '95'\nassert solution('1232321') == '95'\nassert solution('1232221') == '95'\nassert solution('1212321') == '94'\nassert solution('12312219') == '-1'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\nassert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 5') == '2'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 5\n''') == '2'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 6\n''') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 0 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 5\n''') == '2'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 6\n''') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 0 0 0 3\"\n) == \"6\"\n\nassert solution(\n    \"1 2 0 0 5\"\n) == \"2\"\n\nassert solution(\n    \"1 2 0 0 4\"\n) == \"4\"\n\nassert solution(\n    \"1 2 0 0 6\"\n) == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '-1'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\"\nassert solution(\"1 2 0 0 5\") == \"2\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n0 0 0 0 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 2 0 0 8\n\"\"\") == \"1\""
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '0'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 6') == '4'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 0 0 0 3\") == '6'\nassert solution(\"1 2 0 0 5\") == '2'\nassert solution(\"1 2 0 0 4\") == '4'\nassert solution(\"1 2 0 0 6\") == '0'\nassert solution(\"4 5 2 3\") == '3'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '7'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0.5 -5.301 3.098\n0.5 8 8\n0.5 -8 8\n1 8 8\n0.5 -8 8''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8\n0.5 -8 8\n1 8 8\n0.5 -8 8''') == '9.21068947 2.56226688'\nassert solution('''0.5 -8 8\n0.5 8 8\n1 8 8\n0.5 -8 8''') == '6.22375968 -0.31921472'\nassert solution('''0.5 -8 8\n0.5 8 8\n1 8 8\n0.5 -8 8''') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"0.5 -5.301 3.098\n\"\"\"\n) == \"-\"1.26167861 3.88425357\"\nassert solution(\n    \"\"\"0.5 8 8\n\"\"\"\n) == \"9.21068947 2.56226688\"\nassert solution(\n    \"\"\"1 8 8\n\"\"\"\n) == \"6.22375968 -0.31921472\"\nassert solution(\n    \"\"\"0.5 -8 8\n\"\"\"\n) == \"-4.36385220 9.46891588\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''0.5 -5.301 3.098''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''1 8 8''') == '6.22375968 -0.31921472'\nassert solution('''0.5 -8 8''') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nprint('all tests passed')\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"2.9449034 -0.1106979\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nassert solution(\"0.5 -8 8\") == \"-4.36385220 9.46891588\"\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '0'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1''') == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1''') == '1'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"1\"\nassert solution(\"4 5\\n1 2\\n2 3\\n3 2\\n2 4\\n3 4\\n\") == \"2\"\nassert solution(\"3 3\\n1 2\\n2 3\\n3 1\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n2 4\n3 4\n4 5\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n1 2\n2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"6 5\") == \"0\"\nassert solution(\"10 10\") == \"3\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 5') == '0'\nassert solution('3 2') == '1'\nassert solution('3 1') == '1'\nassert solution('4 1') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"3 3 1 2\") == \"2\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 0 3') == \"11\"\nassert solution('5 5 0 4') == \"infinity\"\nassert solution('2 1 0 1') == \"2\"\nassert solution('4 5 0 4') == \"infinity\"\nassert solution('3 3 1 2') == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('2 1 0 1') == '2'\nassert solution('3 3 1 2') == 'infinity'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 0 3') == '11'\nassert solution('4 5 0 3') == 'infinity'\nassert solution('4 5 0 4') == 'infinity'\n\n\"\"\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 0 1') == '2'\nassert solution('5 5 0 3') == '11'\nassert solution('3 3 1 2') == '2'\nassert solution('4 4 0 4') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"infinity\"\nassert solution(\"4 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 0 4\n2 3 1\n2 4 3\n''') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == \"11\"\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == \"infinity\"\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1') == \"2\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"3 3 1 2\") == \"2\"\nassert solution(\"2 1 0 1\") == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3\") == \"11\"\nassert solution(\"5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1\") == \"infinity\"\nassert solution(\"3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\n2 0 1\\n2 4 1\") == \"2\"\n\nfrom collections import deque"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 2 1 2 1\\n\"\n    \"2 1 2\\n\"\n    \"2 3 4\\n\"\n) == \"6\"\n\nassert solution(\n    \"3 3 1 1\\n\"\n    \"1 1\\n\"\n    \"2 2 3\\n\"\n) == \"0\"\n\nassert solution(\n    \"3 2 2 3\\n\"\n    \"1 1\\n\"\n    \"2 2 3\\n\"\n) == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\nassert solution(\"3 1 2 3\") == \"12\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('4 3 1 1') == '12'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"4 2 1 2 1\n2 1 2\n2 3 4\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"3 3 1 1\n1 1\n2 2 3\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"3 2 2 3\n1 1\n2 2 3\n\"\"\"\n) == \"18\"\n\nassert solution(\n\"\"\"1 1 1 1\n1 1\n2 2 2\n\"\"\"\n) == \"6\"\n\nassert solution(\n\"\"\"1 1 1 1\n1 1\n2 2 2\n\"\"\"\n) == \"12\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '18'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '0'\nprint(solution('''\n4 2 1 2 1\n2 1 2\n2 3 4\n'''))\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n1000000 1\n''') == '468559'\n\nassert solution(\n'''\n1000000 5\n''') == '49401'\n\nassert solution(\n'''\n1000000 16\n''') == '20'\n\nassert solution(\n'''\n9000000000000000000 62\n''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000000 1') == \"468559\"\nassert solution('1000000 5') == \"49401\"\nassert solution('1000000 16') == \"20\"\nassert solution('9000000000000000000 62') == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"468559\"\n\"\"\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"468559\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1000000 1\nSample Output 1:\n468559\n\nSample Input 2:\n1000000 5\nSample Output 2:\n49401\n\nSample Input 3:\n1000000 16\nSample Output 3:\n20\n\nSample Input 4:\n9000000000000000000 62\nSample Output 4:\n1''') == '468559'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"468559\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == output\nprint(f\"The answer is {solution(input)}\")\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000000 1') == '468559', \"Wrong\"\nassert solution('1000000 5') == '49401', \"Wrong\"\nassert solution('1000000 16') == '20', \"Wrong\"\nassert solution('9000000000000000000 62') == '1', \"Wrong\""
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\""
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\""
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n4 6 8''') == '5'\nassert solution('''\n7\n2 3 4 5 8 9 10''') == '8'\nassert solution('''\n4\n7 8 9 10''') == '8'\nassert solution('''\n3\n2 3 4''') == '0'\nassert solution('''\n1\n5''') == '0'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n4 7 8') == '3'\nassert solution('3\\n2 3 4 5 8') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '0'\nassert solution('1\\n3') == '3'\nassert solution('3\\n2 3 4 5 8') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n4 7 8\n''') == '3'\nassert solution('''\n3\n4 7 8\n''') == '4'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n''') == '2'\nassert solution('''\n-2\n''') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nassert solution('4444444444444444444444444444444444') == '-1'\nassert solution('0') == '-1'\n\nimport math"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\nassert solution('1234567890') == '35'\nassert solution('18') == '4'\nassert solution('1234') == '3'\nassert solution('0') == '1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\nassert solution(\"6\") == -1\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('d 4\\nabc\\nbca\\ncab\\naca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('b 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\nassert solution('d 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nd 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\nassert solution('''\nf 2\ndea\ncfb\n''') == 'AMBIGUOUS'\n\n'''"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"d 4\") == \"adcb\"\nassert solution(\"c 4\") == \"adcb\"\nassert solution(\"abc\") == \"adcb\"\nassert solution(\"bca\") == \"adcb\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == 'adcb'\nassert solution(s) == 'IMPOSSIBLE'\nassert solution(s) == 'AMBIGUOUS'\n\"\"\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nd 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\nassert solution('''\nf 2\ndea\ncfb\n''') == 'AMBIGUOUS'\n'''\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('d 4\\n' + \n                'cab\\n' + \n                'cda\\n' + \n                'ccc\\n' + \n                'badca\\n',\n                'c 4\\n' + \n                'abc\\n' + \n                'bca\\n' + \n                'cab\\n' + \n                'aca\\n') == 'adcb'\n\n'''\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"d 4\\ncab\\nccc\\nbadca\\n\") == \"adcb\"\nassert solution(\"c 2\\nabc\\nbca\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\\n\") == \"AMBIGUOUS\"\nassert solution(\"f 2\\nabc\\nbcb\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 5 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\nassert solution('''\n50 50 5 5\n''') == '9'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 3 3') == \"9\"\nassert solution('10 20 0 0') == \"10\"\nassert solution('100 20 543 12') == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n4\n5\n10\n15\n20\n''') == '20'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\nassert solution('''\n100 20 543 12\n''') == '164'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 3\n5''') == '5'\nassert solution('''4 4 1\n0 1 0''') == '0'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3 3 3\n3 1 2''') == '9'\nassert solution('''10 20 0 0\n3 1 2''') == '10'\nassert solution('''100 20 543 12\n3 1 2''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3 3 3\n3 5 6''') == '9'\nassert solution('''10 20 0 0\n10 20 0 0''') == '10'\nassert solution('''100 20 543 12\n100 20 543 12''') == '164'\nassert solution('''1 1 1 1\n1 1 1 1''') == '1'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3\") == \"yes\"\nassert solution(\"4 2 3\") == \"no\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 3') == 'no'\nassert solution('3 4 3') == 'yes'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0''') == 'yes'\n\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\nSample Output 3:\nno''') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3') == 'yes'\nassert solution('4 2 3') == 'no'\nassert solution('4 3 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes', 'test 1 fails'\nassert solution('''\n4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no', 'test 2 fails'\nassert solution('''\n3 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\n''') == 'yes', 'test 3 fails'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\nassert solution('''\n4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no'\nassert solution('''\n5 3 1\n-1 0\n1 0\n0 0\n0 1\n0 0\n''') == 'no'\nassert solution('''\n1 1\n0 0\n''') == 'yes'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"3 2 3\") == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"no\"\nassert solution(\"4 2 3\") == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\") == \"no\"\nassert solution(\"3 3 3\") == \"no\"\nassert solution(\"3 1 2\") == \"yes\"\nassert solution(\"4 2 2\") == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2 3\n1 0\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'no'\nassert solution('''\n5 3 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'yes'\nassert solution('''\n10 4 2\n0 1\n1 2\n-1 1\n0 -1\n-1 -1\n-1 -1\n-1 2\n-1 -2\n2 -1\n2 1\n2 1\n''') == 'no'\nassert solution('''\n10 4 2\n0 1\n1 0\n-1 0\n0 -1\n-1 1 -2\n-1 -1 2\n-1 2\n-1 -2\n2 -1\n2 1\n2 1\n''') == 'yes'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('123456789') == '1'\nassert solution('1234567890') == '2'\nassert solution('12345678901') == '3'\nassert solution('1234567890123') == '4'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"123456789\") == \"1\"\nassert solution(\"1234567890\") == \"2\"\nassert solution(\"1234567890123456789012345678901234567890\") == \"5\"\nassert solution(\"1234567890123456789012345678901234567890\" * 10000) == \"200\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5') == ''\nassert solution('15') == '1'\nassert solution('123456789') == '1'\nassert solution('1234567890') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n12121131221\n''') == \"7\"\nassert solution('''\n652526\n''') == \"4\"\nassert solution('''\n123456789\n''') == \"1\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 4') == '24'\nassert solution('6 8') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\"\nprint(solution())\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\nassert solution('''\n1 1\n3\n3\n''') == '0'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == \"0\"\nassert solution(sample_input_2) == \"24\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n\"\"\") == \"24\"\nassert solution(\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\") == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\nSample Output 2:\n24\n\"\"\"\n) == \"24\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n') == '1 4'\nassert solution('5\\n1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('4\\n2 1 4 3\\n') == '-1'\nassert solution('5\\n2 1 4 3\\n') == '-1'\n\nprint(solution(input()))\n\nclass Solution:\n    def lis(self, a):\n        n = len(a)\n        dp = [0] * n\n        max_len = 0\n        for i in range(n):\n            curr_max = 0\n            for j in range(i):\n                if a[j] < a[i] and dp[j] + 1 > curr_max:\n                    curr_max = dp[j] + 1\n            dp[i] = curr_max\n            max_len = max(max_len, dp[i])\n\n        return max_len\n\nn = int(input())\nl = list(map(int, input().split()))\nprint(Solution().lis(l))"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '4\\n'\n    '1 3 2 4'\n) == '1 4'\n\nassert solution(\n    '5\\n'\n    '1 2 3 4 5'\n) == '1 2 3 4 5'\n\nassert solution(\n    '4\\n'\n    '1 3 2 4'\n) == '1 4'\n\"\"\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '1 4'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 2 1') == '1 2 3'\nassert solution('4 3 2 1') == '-1'\nassert solution('5 3 2 1') == '1 2 3'"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n2 1 4 3\n''') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1 4\"\n\n\"\"\"\n\nn = int(input())\nsequence = sorted(list(map(int, input().split())))\nprint(\"-1\" if len(sequence)==0 else\"\\n\".join([str(i) for i in sequence]))"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '1 4'"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1 3 2 4\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"\n4\n2 1 4 3\n\"\"\") == \"2 1 4 3\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 3 2\n''') == '1 2 3'\nassert solution('''5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''4\n1 2 3 4\n''') == '-1'\nprint('all tests passed')"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"2\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"6\\n\") == \"3\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 8') == '8'\nassert solution('3 3') == '1'\nassert solution('2 6') == '5'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 8\n...\n...\n...\nSample Output 1:\n8\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3 3\n.#.\n.#.\nSample Output 2:\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 6\n.#####\n.#.\n.#####\nSample Output 3:\n5\n\"\"\") == \"5\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 8\n..#..#..\n.######.\n.######.\n..#..#..''') == \"8\"\nassert solution('''3 3\n...\n.#.\n...\nSample Output 3:\n1\n\nSample Input 4:\n2 7\n.#####\n#####.\nSample Output 4:\n1\n\nSample Input 5:\n3 5\n#####\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 3') == '1'\nassert solution('3 3') == '1'\nassert solution('4 3') == '1'\nassert solution('5 3') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n.#####\\n#####.\\n') == \"1\"\nassert solution('5 5\\n...#.\\n#.##.\\n##.#.\\n#####.\\n##.##\\n##.#.\\n') == \"5\"\n\n---\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == \"1\"\nassert solution('2 3') == \"1\"\nassert solution('4 4') == \"1\"\nassert solution('5 5') == \"1\"\nassert solution('6 6') == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t1) == '4'\nassert solution(t2) == '2'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n...\n...\n...\n.###.\n.###.\n.###.\n''') == '1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nprint('All tests passed!')"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nprint(solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n'''))\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == \"6\"\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == \"13\"\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == \"-1\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1''') == '6'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6', \"Should be 6\"\n\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13', \"Should be 13\"\n\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1', \"Should be -1\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 5') == '6'\nassert solution('3 3 3') == '13'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\\n3 1 1\\n1 3 2\\n3 2 3\") == \"13\"\nassert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n\") == \"19 12 2 18 5 5\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == \"6\"\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == \"13\"\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == \"-1\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\n\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\n\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 5') == '6'\nassert solution('3 3 3') == '13'\nassert solution('3 2 2') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('4 4 4') == '-1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4\nSample Output 2:\n1 5\n''') == '1 5'\nassert solution('''10\n5\n3\n3\n2\n1\n2\n1\n2\n3\n4\nSample Output 3:\n1 4''') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 1\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n3\n3\n3\n3\n''') == '1 5'\n\nassert solution('''\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n3\n3\n3\n3\n3\n1\n2\n3\n4\nSample Output 3:\n1 5\n''') == '1 4'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\nassert solution('''\n4\n1\n5\n3\n6\n1\n2\n3\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n3\n3\n3\n3\n1\n2\n3''') == '1 5'\n\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4''') == '3 2'\n\nassert solution('''4\n3\n3\n3\n3\n1\n2\n3''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1 1\"\nassert solution(\"5\") == \"1 1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 0\\n3 1\\n3 2\\n3 3\") == \"1\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\\n\") == \"5\""
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('5') == '2'\nassert solution('5') == '3'\nassert solution('5') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '5'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '4'\nassert solution('''\n6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\n''') == '5'\nassert solution('''\n10\n10 5 8 10 1\n1 2 3 4 5 6 7 8 9 10\n3 4 5 6 7 8 9 10 11 12\n2 3 5 6 7 8 9 10 11 12\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\nSample Output 3:\n5\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4''') == '1'\nassert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4''') == '5'\nassert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4''') == '3'\nassert solution('''6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\nSample Output 3:\n5\n''') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 0\n1 2\n1 3\n1 4\n''') == '1'\nassert solution('''\n5\n1 0\n2 2\n3 1\n4 2\n5 1\n''') == '5'\nassert solution('''\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n\"\"\") == \"5\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4\\n1 2 2\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"4\\n3\\n4\\n5\\n6\"\nassert solution(\n    \"5\\n1 2 2\\n1 3 1\\n2 4 3\\n3 5 2\\n4 6 3\\n5 7 2\\n6 8 1\\nSample Output 2\") == \"5\\n1\\n2\\n3\\n6\\n7\"\nassert solution(\n    \"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\nSample Output 3\") == \"5\\n1\\n2\\n3\\n6\\n7\\n8\"\nassert solution(\n    \"1\\n1 2 2\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\") == \"0\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3') == '4\\n3\\n4\\n5\\n6'\nassert solution('6\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1') == '0\\n'\nassert solution('9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2') == '5\\n1\\n2\\n3\\n6\\n7\\n'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 2\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2') == '4'\nassert solution('10\\n1 2 2\\n1 3 1\\n2 4 3\\n3 5 2\\n5 6 2\\n6 7 2\\n6 8 2\\n7 9 2\\n8 9 2') == '0'\nassert solution('10\\n1 2 2\\n1 3 1\\n2 4 3\\n3 5 2\\n5 6 3\\n6 7 2\\n6 8 2\\n7 8 1\\n8 9 2') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n6\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'\nassert solution('''\n9\n1 2 2\n1 3 1\n2 3 2\n2 4 1\n3 5 2\n3 7 1\n4 8 1\n5 9 2\n''') == '6'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 2 2\n1 3 1\n2 3 1\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '4'\nassert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n7 8 1\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4\\n3\\n4\\n5\\n6\\n'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'\nassert solution('8') == '4'\nassert solution('9') == '0'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"2 1\") == \"6\"\nassert solution(\"1 2\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n1 1\nR10 V1 V2 V1 E\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2\nR10 V1 V2 V1 E\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 1\nR10 V1 V2 V1 E\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 1\nR10 V1 V2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\nassert solution('''\n1 3\nV1 V2 V1 V1 V2\nR1 V3 V1 V1 V2 E\n''') == '29'\nassert solution('''\n2 1\nR10 V1 V2 V1 E\n''') == '10'\nassert solution('''\n2 2\nR10 V1 V2 E\n''') == '20'\n'''\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '6'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '7'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '11'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '10'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\nV1 V2 V1 V1 V2''') == '5'\n\nassert solution('''2 1\nR10 V1 V2 V1 E''') == '6'\n\nassert solution('''2 1\nV1 V2 V1 V1 V2''') == '5'\n\nassert solution('''1 2\nV1 V2 V1 V1 V2''') == '5'\n\nassert solution('''2 1\nR10 V1 V2 V1 E''') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(t1) == \"5\"\nassert solution(t2) == \"6\"\nassert solution(t3) == \"8\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\nV1 V2 V1 V1 V2\") == \"5\"\nassert solution(\"2 1\\nV1 V2 V1 V1 V2\") == \"6\"\nassert solution(\"2 1\\nR10 V1 V2 V1 E\") == \"30\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '27'\nassert solution('2') == 'impossible'"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_1) == \"38\"\nassert solution(input_2) == \"impossible\"\nassert solution(input_3) == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '8'\nassert solution('4 11') == 'impossible'"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"10 11\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 13\") == \"impossible\"\nassert solution(\"10 12\") == \"12\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == 'impossible'\nassert solution('1 2') == 'impossible'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n80\n''') == '2222'\nassert solution('''10\n24\n''') == '38'\nassert solution('''9\n216\n''') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\nassert solution('100000000') == '1079365328287'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == \"466.662\"\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == \"10.00005\"\nassert solution('''1 1 1 0\n2 2 0.25 8\n''') == \"2.0\"\nassert solution('''0 1 1 0\n2 2 0.25 8\n''') == \"2.0\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('20 60 2 1') == '466.662'\nassert solution('5 15 0.33333 30') == '10.00005'\nassert solution('22 60 0.66666 70') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('3 4 1 0') == '2.0'"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\nassert solution(\"\"\"\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"2.0\"\nassert solution(\"\"\"\n3 4 1 0\n0 2 0.25 8\n\"\"\") == \"2.0\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nassert solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 1 0') == '10.00005'\nassert solution('3 4 1 0') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 15 0.3333\n1 3 0.25 8\n2 4 0.66667 15\n1 2\nSample Output 1:\n10.00005\n\nSample Input 2:\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\nSample Output 2:\n10.00005\n\nSample Input 3:\n3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0''') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662', 'test #1 fail'\nassert solution('''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005', 'test #2 fail'\nassert solution('''3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0\n''') == '2.00005', 'test #3 fail'"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 20 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\nassert solution(\"\"\"3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0\n\"\"\") == \"2.0\"\nassert solution(\"\"\"\"\"\") == \"\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0.00000000000000\"\nassert solution(\"2\") == \"0.00000000000000\"\nassert solution(\"3\") == \"1.00000000000000\"\nassert solution(\"4\") == \"10.0000000000000\"\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''blue\npink 1.0\nred 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution(\n    '''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1.5\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1.0\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\nassert solution(\"5\") == \"0.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0.000000000000000'\nassert solution('4') == '10.000000000000000'\nassert solution('5') == '1.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n'''\n) == '1.500000000000000'\nassert solution(\n'''\n2\nblue red 1.0\nred pink 1.5\n'''\n) == '0.000000000000000'\nassert solution(\n'''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n'''\n) == '10.000000000000000'"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n\nfrom fractions import Fraction\nfrom math import factorial"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n\"\"\") == \"1.500000000000000\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"6 1 1 1 0\\n\"\n    \"2 3 1 5 3 2\\n\"\n    \"2 1 2\\n\"\n    \"3 3 4 5\\n\"\n    \"1 6\\n\"\n) == \"180\"\n\nassert solution(\n    \"3 2 2 1 1\\n\"\n    \"2 3 2\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 1\\n\"\n    \"2 3\\n\"\n) == \"22\""
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 5 5 2 2 5') == '12'\nassert solution('5 6 5 5 2 2 5') == '10'\nassert solution('3 3 5 5 4 2 2 5') == '11'\nassert solution('3 2 2 1 1 1 2') == '2'\nassert solution('3 1 2') == 'too many'\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 1 1 1 0\\n2 3 1 5 3 2\\n2 1 2\\n3 3 4 5\\n1 6\") == \"180\"\nassert solution(\"3 2 2 1 1\\n2 3 2\\n1 1\\n1 2\\n1 2\\n1 3\\n1 1\\n2 3\\n\") == \"22\"\nassert solution(\"3 1 1 1 1\\n5 5 5\\n3 1 2 3\\n3 1 2 3\\n3 1 2 3\\n2 1\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 2 1 1\") == \"22\"\nassert solution(\"6 1 1 1 0\") == \"180\"\nassert solution(\"3 2 1 1 1\") == \"0\""
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '0'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 3:\n0\n''') == 'too many'\n'''\n\nimport math\n\nr = int(input())\ns, m, d, n, mn = map(int, input().split())\nb = list(map(int, input().split()))"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\nassert solution('''\n5 2\n5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 4:\ntoo many\n''') == 'too many'\nassert solution('''\n''') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22''') == '0'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 1 0\") == \"180\"\nassert solution(\"2 3 1 5 3 2\") == \"22\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"3 3 4 5\") == \"0\"\nassert solution(\"1 6\") == \"too many\""
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2\\n...\\n.#.') == '17 17'\nassert solution('5 3 2\\n...\\n.##') == '-1 -1'\nassert solution('6 4 4\\n.....\\n##...\\n....#\\n......\\n#####') == '7 7'\nassert solution('6 5 4\\n....\\n.##\\n...#\\n....\\n#.#') == '17 17'\n\nprint('All test cases passed!')"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '17 17'\nassert solution('6 8 5') == '20 20'\nassert solution('10 5 5') == '17 17'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7 5\\n...#...#\\n#..#...#\\n#..#####\\n#.......') == '20 20'\nassert solution('5 7 5\\n...#...#\\n#..#...#\\n#..#####\\n#.......') == '17 17'\nassert solution('5 7 5\\n...#...#\\n#..#...#\\n#..#####\\n#.......') == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '17 17'\nassert solution('3 3 2') == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '17 17'\nassert solution('3 3 2') == '-1 -1'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 8 5\") == \"20 20\"\nassert solution(\"6 8 5\") == \"17 17\"\nassert solution(\"3 3 2\") == \"17 17\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '17 17'\nassert solution('3 3 2') == '-1 -1'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"10\") == \"100\"\nassert solution(\"8\") == \"90\""
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'impossible'\nassert solution('10') == '310'\nassert solution('2') == '300'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"310\"\nassert solution(\"7\\n3\\n2 40 65\\n2 100 150\\n2 300 320\") == \"impossible\"\nassert solution(\"1\\n3\\n1 2 3\") == \"impossible\"\nassert solution(\"1\\n3\\n2 3\") == \"impossible\"\nassert solution(\"1\\n1\\n1\") == \"impossible\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''371\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''310\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\nassert solution('''90\n3\n2 20 35\n2 88 200\n''') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"100\") == \"1\"\nassert solution(\"100010\") == \"101\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"impossible\""
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n') == '300'\nassert solution('2\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''10\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '300'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"impossible\""
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1\n3\n2 40 65\n2 100 150\n2 300 320\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n4\n3\n2 40 65\n2 100 150\n2 300 320\n\"\"\"\n) == \"100\"\nassert solution(\n\"\"\"\n10\n3\n2 40 65\n2 100 150\n2 300 320\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n10\n2\n1 3\n2 1\n1 2\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"......\") == \"cannot fold\"\nassert solution(\"#.....\") == \"can fold\"\nassert solution(\"..##..\") == \"can fold\"\nassert solution(\"...#..\") == \"can fold\"\nassert solution(\"......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"......\\n......\\n######\\n......\\n......\\n......\") == \"cannot fold\"\nassert solution(\"......\\n#.....\\n######\\n#.....\\n......\\n......\") == \"can fold\"\nassert solution(\"..##..\\n...#..\\n..##..\\n...#..\\n......\\n......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('......') == \"can fold\"\nassert solution('#.....') == \"can fold\"\nassert solution('..##..') == \"can fold\"\nassert solution('...#..') == \"can fold\"\nassert solution('......') == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('......\\n...#..\\n..##..\\n...#..\\n......') == 'can fold'\nassert solution('......\\n...#..\\n..##..\\n...#..\\n......') == 'cannot fold'\nassert solution('#.....\\n#.....\\n######\\n#.....\\n......') == 'cannot fold'"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"......#...\") == 'cannot fold'\nassert solution(\"#..#.#..#.\") == 'can fold'"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"..##..\\n...#..\\n..##..\\n...#..\\n......\\n......\") == \"can fold\"\nassert solution(\"#..#..\\n#..#..\\n#..#..\\n#..#..\\n..##..\\n..##..\") == \"cannot fold\"\nassert solution(\"..#.#..\\n#.#.#..\\n.#.#..#\\n.###.#\\n.....\\n#.##..\\n#.##..\") == \"cannot fold\"\nassert solution(\".#.#...#\\n#######\\n##.##.#\\n##...##\\n##...##\\n######\\n#.#.#.#\\n.#.##.#\\n##...##\\n##...##\\n\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"..##..\\n#...#.\\n###...\\n##.#.#\\n.....#\\n.##.#.\\n#..#.#\") == \"can fold\"\nassert solution(\"......\\n...##.\\n....#.\\n#...#.\\n......\\n....#.\\n...##.\\n......\") == \"can fold\"\nassert solution(\"..##.\\n#..#.\\n.##..\\n...##\\n...##\\n...##\\n......\") == \"cannot fold\"\nassert solution(\"...##\\n##..#\\n..###\\n..#..\\n##.##\\n......\\n......\") == \"cannot fold\"\nassert solution(\"..##..\\n#...#.\\n###...\\n##.#.#\\n.....#\\n.##.#.\\n#..#.#\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''....\n.##.\n...#\n##...\n....''') == 'cannot fold'\nassert solution('''....\n.##.\n...#\n##.#\n....''') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('.#.##.##.##.#.##.#.##.#.##.##.#') == 'can fold'\nassert solution('.###.###.###.###.###.###.###.###.###') == 'cannot fold'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\nabcefgabc\n    '''\n    ) == 'abc'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"aaab\") == \"a\"\nassert solution(\"aaabb\") == \"a\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nprint(\"Almost done! But run test_solutions.py to check your work.\")\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('aaaa') == 'aaa'\nassert solution('abcbabcba') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'aaa'\nprint(solution(input()))"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"aaa\"\nassert solution(input()) == \"abcba\"\nassert solution(input()) == \"abc\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nabcefgabc\n''') == 'abc'\nassert solution('''\nabcbabcba\n''') == 'abcba'\nassert solution('''\naaaa\n''') == 'aaa'\nprint('All Tests Passed')\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\\\nabcefgabc\nabcbabcba\naaaa''') == 'abcba'\nassert solution('''\\\nabcefgabc\nabcbabcba\naaaaa''') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\nprint(solution(input()))\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 4\\n2 5') == '4'\nassert solution('3\\n1 4\\n2 10005\\n0 15') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 4\n2 5\n0 15\n''') == '6'\n\nassert solution('''\n2\n1 4\n2 5\n''') == '4'\n\nassert solution('''\n3\n1 4\n2 10\n0 15\n''') == '4'\n\nassert solution('''\n2\n1 2\n3 7\n''') == '1'\n\nassert solution('''\n2\n1 2\n3 7\n''') == '0'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 4\n2 5\n''') == '4'\n\nassert solution('''\n3\n1 4\n2 10\n0 15\n''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\nassert solution('1') == '2'\nassert solution('2') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4') == '4'\nassert solution('2 5') == '6'\nassert solution('3 1 4') == '4'\nassert solution('3 1 10005') == '4'\nassert solution('2 10005') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 4\n2 5\n0 15''') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 4\n2 5\n''') == '4'\nassert solution('''3\n1 4\n2 10\n0 15\n''') == '6'\nassert solution('''4\n1 4\n2 10005\n0 15\n''') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '0'\nassert solution('7') == '2'\nassert solution('7') == '0'\n\n\"\"\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''3\n7 7 7\n''') == '3'\nassert solution('''5\n1 2 3 2 1\n''') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '3'\nassert solution('''\n5\n1 2 3 2 1\n''') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n') == '1'\nassert solution('4\\n2 1 1 1\\n') == '0'\nassert solution('5\\n1 2 3 2 1\\n') == '3'\nassert solution('6\\n1 2 3 1 3 1\\n') == '0'\nassert solution('7\\n1 2 3 4 5 6\\n') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"7\\n2 3 4 4 8 12 24\") == \"1\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\"\nassert solution(\"10\\n5 8 2 5 2 3 7 5 4 9 6\") == \"12\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 4 4 8 12 24') == '2'\nassert solution('3 7 7 7') == '3'\nassert solution('5 1 2 3 2 1') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\\n\") == \"2\"\nassert solution(\"3\\n7 7 7\\n\") == \"3\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '3'\nassert solution('''\n5\n1 2 3 2 1\n''') == '0'\nassert solution('''\n10\n11 16 19 36 8 19 7 17 19 36 2 1\n''') == '0'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 5 4\n.S.F.\n.MFMG\n''') == '3'\nassert solution('''2 1 1\n.S\n''') == '1'\nassert solution('''1 2 1\n.S\n''') == '1'\nassert solution('''3 2 10\n.S.\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 4 3\n.S.\n.F.\n.G.\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 5 4\n.S.\n.MF.\n.G.\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 5 4\nS#.F.\n.MFMG\n''') == '3'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('2 2 10\\nS#\\n#G\\n') == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == input()\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"3\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''1 2 1\nGS\n''') == '1'\nassert solution('''2 2 10\nS#\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\nS..\\n.#.\\n.G.#\\nLDLDLLDR') == '1'\nassert solution('3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR') == '1'\nassert solution('3 7\\n...\\n.G.##S.\\n.......\\nLDLDLLDR') == '2'\nprint('Congratulations!')\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n.S.#.\n.#.#.\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\nassert solution('3 7\\n.......\\n.G.##S.\\n.......\\nLDLDLLDR') == '1'\nassert solution('3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR') == '2'\nassert solution('5 4\\n.S...\\n...G\\n##...\\n..S#\\n.G...\\n.....\\n####\\n.G...\\n.....\\n') == '1'\nassert solution('6 4\\n.S...\\n...G\\n##...\\n..S#\\n.G...\\n.....\\n####\\n.G...\\n.....\\n') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\nS..') == '1'\nassert solution('2 7\\nS.G..\\n...#\\n.###\\nS.G.#\\n.###') == '1'\nassert solution('3 7\\nS.G..\\n...#\\n.###\\nS#G#\\n...#\\n#S#G\\n...#\\nS.G..\\nS###') == '2'\nassert solution('3 7\\nS.G..\\n...#\\n.###\\nS.G.#\\n.###') == '2'\nassert solution('5 7\\nG..#\\n.S.#\\n...#\\n...##\\n.##.#\\n...#.\\n#.S.G\\n...#.\\n.S...\\n.G.S.') == '1'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\nassert solution('3 7\\n.......\\n.G.##S.\\n.......\\nLDLDLLDR') == '2'\nassert solution('3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR') == '1'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\nSSD\\nRRRDD') == '1'\nassert solution('3 3\\nSSD\\nRRRDD') == '1'\nassert solution('3 7\\n.......\\n.G.##S\\n.......\\nLDLDLLDR') == '2'\nassert solution('3 7\\n.......\\n.G.##S\\n.......\\nRRRDD') == '1'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nS..\\n.#.\\n..G\") == \"1\"\nassert solution(\"3 7\\n.......\\n.G.#.S.\\n.......\\nLDLDLLDR\") == \"1\"\nassert solution(\"3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR\") == \"2\""
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('#.#...S..#..G#S#...#..#') == '1'\nassert solution('S...###.G###.###..######..G###.###.###') == '1'\nassert solution('...#.##.##.##..##.##.##..##.##.##..##.##.##.##.##.##.##.##.##.##') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\nS..\\n#.G\\n') == '1'\nassert solution('3 7\\n...\\n...\\nLDLDLLDR\\n') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(samples[0]) == '1'\nassert solution(samples[1]) == '1'\nassert solution(samples[2]) == '2'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n999999 0 1000\n999900 950 451\n987654 123 13222\nSample Output 1:\n1000200 799\n''') == '1000200 799'\nassert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\nSample Output 2:\nuncertain\n''') == 'uncertain'\nassert solution('''\n2\n100 0 100\n0 200 199\nSample Output 3:\nimpossible\n''') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sorted(stdin.split(\"\\n\"))) == \"1000200 799\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n999999 0 1000\\n999900 950 451\\n987654 123 13222') == '1000200 799'\nprint(solution(input()))\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\nassert solution('''\n2\n100 0 101\n0 200 199\n''') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\\n') == '1000200 799'\nassert solution('2\\n100 0 101\\n0 200 199\\n') == 'uncertain'\nassert solution('2\\n0 0 100\\n0 200 199\\n') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 101\n0 200 199\n\"\"\") == \"uncertain\"\nassert solution(\"\"\"\n0\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 0\\n10 10') == '0 0'\nassert solution('2\\n100 0\\n10 10') == '10 0'\nassert solution('2\\n100 0\\n100 10') == '10 0'\nassert solution('3\\n999999 0\\n1000\\n123 13222') == '1000\\n799'\nassert solution('3\\n999999 0\\n1000\\n123 13222') == '1000\\n799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\n\nassert solution(\"\"\"\n3\n0 100 0\n100 200 199\n987654 123 13222\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2\n100 0 101\n0 200 199\n\"\"\") == \"uncertain\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 100\n0 200 199\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n4 7\n9 8\n''') == '2', 'First'\nassert solution('''\n2\n4 7\n9 8\n''') == '1', 'Second'\nassert solution('''\n2\n4 8\n9 7\n''') =='syntax error', 'Third'"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1\n4\n8\n''') == \"1 2 3 4\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"syntax error\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"syntax error\"\nassert solution(\"6\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\\n1\\n\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4 7\\n9 8\") == \"2\\n1\"\nassert solution(\"2\\n4 7\\n14 17\\n19 18\") == \"1\\n2\"\nassert solution(\"2\\n4 7\\n14 17\\n19 18\\n\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n4 7\\n9 8') == '2'\nassert solution('2\\n4 7\\n14 17\\n19 18') == '1'\nassert solution('2\\n4 7\\n9 7\\n14 17\\n19 18') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n4 7\n9 8\n''') == '2'\nassert solution('''\n3\n2 4\n1 5\n6 7\n''') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4 7\") == \"2 1\"\nassert solution(\"4 7 9 8\") == \"2 1\"\nassert solution(\"4 7 9 8 14 17 19 18\") == \"2 1\"\nassert solution(\"2 4\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '1'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n\"\"\") == \"1\"\nassert solution(\"\"\"\n85 55 _ 99 51 _ _ _ _ _\n_ _ _ _ _ _ _ 85 63 153\n\"\"\") == \"1\"\nassert solution(\"\"\"\n160 _ _ 136 _ _ _ _ _ 170\n_ _ _ _ _ _ _ 145 _ _ _\n\"\"\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170') == '8640'\nassert solution('_ _ _ _ _ _ _ 85 63 153') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"_ 85 55 _ 99 51 _ _ _ _\") == \"1\"\nassert solution(\"_ 160 _ _ 136 _ _ _ _ 170\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('_ 80 _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n') =='many'\nassert solution('_ 80 _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n') =='many'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ 170\\n_ _ _ _ _ _ _ 85 63 153\\n') == '8640'\nassert solution('_ _ _ _ _ _ _ _ _ _ _') =='many'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _ _\\n') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"many\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81 _\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81 _ _\") == \"1\"\nassert solution(\"_ 90 22 _ 6 _ _ _ 81 _ _ _\") == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ 120 _ _\\n') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ 120 _ _ 144 _ _\\n\") == \"8640\""
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n2 1\n1 5\n3 1\n4 3\n''') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == \"8\"\nassert solution('''\n10\n1 2\n2 3\n2 4\n1 5\n3 6\n2 7\n7 8\n5 9\n5 10\n''') == \"24\"\nassert solution('''\n5\n2 1\n1 3\n2 4\n1 5\n''') == \"1\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\nprint(solution(input()))\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1\\n1 5\\n3 1\\n4 3') == '8'\nassert solution('10\\n2 1\\n1 5\\n3 1\\n4 3\\n5 6\\n7 8\\n5 9\\n5 10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('5') == '8'\nassert solution('3 1') == '1'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n5\n2 1\n1 5\n3 1\n4 3\nSample Input 4:\n10\n5 1\n1 5\n2 3\n2 4\n1 6\n3 7\n2 7\n7 8\n5 9\n5 10\nSample Output 4:\n16\n\"\"\"\n) == \"16\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 1') == '1'\nassert solution('5 1') == '8'\nassert solution('10 1') == '24'\nprint('All tests passed.')"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\nSample Output 3:\n8\n''') == '8'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"4\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nsecretmessage\nboot\n''') == 'boot'\nassert solution('''\ntreetreetreetree\nwood\n''') == '3'\nassert solution('''\noranges\napples\n''') == '0'\nassert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\naa\nab\nac\nad\nae\naf\nag\nah\nai\naj\nak\nal\nam\nan\nao\nap\naq\nar\nas\nat\nau\nav\naw\nax\nay\naz\nba\nbb\nbc\nbd\nbe\nbf\nbg\nbh\nbi\nbj\nbk\nbl\nbm\nbn\nbo\nbp\nbq\nbr\nbs\nbt\nbu\nbv\nbw\nbx\nby\nbz\nca\ncb\ncc\ncd\nce\ncf\ncg\nch\nci\ncj\nck\ncl\ncm\ncn\nco\ncp\ncq\ncr\ncs\nct\ncu\ncv\ncw\ncx\ncy\ncz\nda\ndb\ndc\ndd\nde\ndf\ndg\ndh\ndi\ndj\ndk\ndl\ndm\ndn\ndo\ndp\ndq\ndr\nds\ndt\ndu\ndv\ndw\ndx\ndy\ndz\nea\neb\nec\ned\nee\nef\neg\neh\nei\nej\nek\nel\nem\nen\nep\neq\ner\nes\net\neu\nev\new\nex\ney\nez\nfa\nfb\nfc\nfd\nfe\nff\nfg\nfh\nfi\nfj\nfk\nfl\nfm\nfn\nfo\nfp\nfq\nfr\nfs\nft\nfu\nfv\nfw\nfx\nfy\nfz\nga\ngb\ngc\ngd\nge\ngf\ngg\ngh\ngi\ngj\ngk\ngl\ngm\ngn\ngo\ngp\ngq\ngr\ngs\ngt\ngu\ngv\ngw\ngx\ngy\ngz\nha\nhb\nhc\nhd\nhe\nhf\nhg\nhh\nhi\nhj\nhk\nhl\nhm\nhn\nho\nhp\nhq\nhr\nhs\nht\nhu\nhv\nhw\nhx\nhy\nhz\nja\njb\njc\njd\nje\njf\njg\njh\nji\njj\njk\njl\njm\njn\njo\njp\njq\njr\njs\njt\nju\njv\njw\njx\njy\njz\nka\nkb\nkc\nkd\nke\nkf\nkg\nkh\nki\nkj\nkk\nkl\nkm\nkn\nko\nkp\nkq\nkr\nks\nkt\nku\nkv\nkw\nkx\nky\nkz\nla\nlb\nlc\nld\nle\nlf\nlg\nlh\nli\nlj\nlk\nll\nlo\nlp\nlq\nlr\nls\nlt\nlu\nlv\nlw\nlx\nly\nlz\nma\nmb\nmc\nmd\nme\nmf\nmg\nmh\nmi\nmj\nmk\nml\nmm\nmn\nmo\nmp\nmq\nmr\nms\nmt\nmu\nmv\nmw\nmx\nmy\nmz\nna\nnb\nnc\nnd\nne\nnf\nng\nnh\nni\nnj\nnk\nnl\nnm\nnn\nno\nnp\nnq\nnr\nns\nnt\nnu\nnv\nnw\nnx\nny\nnz\noa\nob\noc\nod\noe\nof\nog\noh\noi\noj\nok\nol\nom\non\nop\noq\nor\nos\not\nou\nov\now\nox\noy\noz\npa\npb\npc\npd\npe\npf\npg\nph\npi\npj\npk\npl\npm\npn\npo\npp\npq\npr\nps\npt\npu\npv\npw\npx\npy\npz\nqa\nqb\nqc\nqd\nqe\nqf\nqg\nqh\nqi\nqj\nqk\nql\nqm\nqn\nqo\nqp\nqq\nqq\nqr\nqs\nqt\nqu\nqv\nqw\nqx\nqy\nqz\nra\nrb\nrc\nrd\nre\nrf\nrg\nrh\nri\nrj\nrk\nrl\nrm\nrn\nro\nrp\nrq\nrr\nrs\nrt\nru\nrv\nrw\nrx\nry\nrz\nsa\nsb\nsc\nsd\nse\nsf\nsg\nsh\nsi\nsj\nsk\nsl\nsm\nsn\nso\nsp\nsq\nsr\nss\nst\nsu\nsv\nsw\nsx\nsy\nsz\nta\ntb\ntc\ntd\nte\ntf\ntg\nth\nti\ntj\ntk\ntl\ntm\ntn\nto\ntp\ntq\ntr\nts\ntt\ntu\ntv\ntw\ntx\nty\ntz\nua\nub\nuc\nud\nue\nuf\nug\nuh\nui\nuj\nuk\nul\num\nun\nuo\nup\nur\nus\nut\nuu\nuv\nuz\nva\nvb\nvc\nvd\nve\nvf\nvg\nvh\nvi\nvj\nvk\nvl\nvm\nvn\nvo\nvp\nvq\nvr\nvs\nvt\nvu\nvv\nvw\nvx\nvy\nvz\nwa\nwb\nwc\nwd\nwe\nwf\nwg\nwh\nwi\nwj\nwk\nwl\nwm\nwn\nwo\nwp\nwq\nwr\nws\nwt\nwu\nwv\nww\nwx\nwy\nwz\nya\nyb\nyc\nyd\nye\nyf\nyg\nyh\nyi\nyj\nyk\nyl\nym\nyn\nyo\nyp\nyq\nyr\nys\nyt\nyu\nyv\nyw\nyx\nyy\nyz\nza\nzb\nzc\nzd\nze\nzf\nzg\nzh\nzi\nzj\nzk\nzl\nzm\nzn\nzo\nzp\nzq\nzr\nzs\nzt\nzu\nzv\nzw\nzx\nzy\nzz\n'''.split())"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('oranges') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n5''') == ''\nassert solution('''1\na\n''') == 'a'\nassert solution('''6\n5''') == '5'\nassert solution('''7\n*\n''') == '*'\nassert solution('''8\na\n''') == '*'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1234') == '123'\nassert solution('aA') == 'a'\nassert solution('kA') == 'k'\nassert solution('kB') == 'b'\nassert solution('mM') =='m'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"0\"\nassert solution(\"apples\") == \"0\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nsecretmessage\nboot\n''') == 'essa'\n\nassert solution('''\ntreetreetreetree\nwood\n''') == '3'\n\nassert solution('''\noranges\napples\n''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"secretmessage\") == \"essa\"\nassert solution(\"treetreetreetree\") == \"3\"\nassert solution(\"oranges\") == \"0\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('oranges') == '0'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1', \"First\"\nassert solution('2') == '2', \"Second\"\nassert solution('3') == '4', \"Third\"\nassert solution('4') == '4', \"Fourth\"\nassert solution('5') == '5', \"Fifth\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '4'\nassert solution('10') == '2'\nassert solution('500') == '1'\nassert solution('8') == '1'\n\n\"\"\""
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('<>^<^') == '2'\nassert solution('#.##') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('5') == '2'\nassert solution('5') == '2'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n>^<^') == '2'\nassert solution('6\\n<.^<') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == '1'\nassert solution(\"4\") == '4'\nassert solution(\"<<<\") == '1'\nassert solution(\"v<^>\") == '2'\nassert solution(\"####\") == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\", solution(\"5\")\nassert solution(\"10\") == \"4\", solution(\"10\")\nassert solution(\"10\") == \"4\", solution(\"10\")\nassert solution(\"10\") == \"4\", solution(\"10\")\nassert solution(\"10\") == \"4\", solution(\"10\")"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('<<<') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '4'\nassert solution('6') == '2'\nassert solution('5') == '4'\nassert solution('5') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"11\""
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n'\n    '3 0 0 2 9 2 3 0\\n'\n    '1 6 1 4 6 3 -1 -2'\n) == '3'\nassert solution(\n    '3\\n'\n    '4 0 0 10 10 1 15 0\\n'\n    '3 5 50 55 8 1 -16 2\\n'\n    '3 10 7 10 4 1 8 -1'\n) == '6'\nassert solution(\n    '2\\n'\n    '7 0 0 20 10 3 0 10\\n'\n    '10 1 0 2 5 2 2 7\\n'\n) == '11'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2 3 0 2 9 2 3 0') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0') == '6'\nassert solution('2\\n3 5 50 55 8 1 -16 2') == '6'\nassert solution('3\\n10 7 10 4 1 8 -1') == '11'\nassert solution('1\\n2 3 0 2 9 2 3 0') == '3'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2 4 2 5 4 1\n3 5 5 2 3\n''') == '7'\nassert solution('''\n4\n2 1 2 3\n1 4 1 2\n''') == '7'\nassert solution('''\n3\n2 5 2 5\n4 3 2 5\n4 4 4 5\n''') == '9'\nassert solution('''\n2\n1 6 1 4\n1 6 1 4\n''') == '5'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '10'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n5\n0 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n2 10 3 10 7 1 0 8\n5 8 1 2 5 8 -1 4\n''') == '11'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nprint('Tests finished.')\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"3\"\nassert solution(\"2 3 0 2 9 2 3 0\") == \"3\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\nprint(solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0'))"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0''') == \"168.7916512460\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n''') == \"163.5274740179\"\nassert solution('''0.0 1.0 4.0 1.0\n1\n0.0 0.0 4.0 0.0\n''') == \"3.7320508076\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\""
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == '168.7916512460', \"Wrong\"\nassert solution(\"60.0 0.0 50.0 170.0\") == '163.5274740179', \"Wrong\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('40.0 0.0 0.0 0.0') == '163.5274740179'\nassert solution('5.0 20.0 5.0 170.0') == '163.5274740179'\nassert solution('95.0 0.0 95.0 80.0') == '163.5274740179'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\") == \"163.5274740179\"\nassert solution(\"0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0\") == \"3.7320508076\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == \"168.7916512460\", f\"actual: {solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''')} expected: 168.7916512460\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == \"163.5274740179\", f\"actual: {solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''')} expected: 163.5274740179\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == \"163.5274740179\", f\"actual: {solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''')} expected: 163.5274740179\"\nassert solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == \"163.5274740179\", f\"actual: {solution('''60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''')} expected: 163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"0.0 1.0 4.0 1.0\") == \"3.7320508076\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n\"\"\") == \"168.7916512460\"\nassert solution(\"\"\"\n60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 100.0\n\"\"\") == \"163.5274740179\"\nassert solution(\"\"\"\n60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n\"\"\") == \"168.7916512460\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 1 2\n''') == 'canterlot'\n'''\n<stdin>: 1\n
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('1 2 1') == 'IMPOSSIBLE'\n\"\"\"\n\nstdin = '5 3 5'"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([6, 5, 3]) == \"rarity\"\nassert solution([9, 8, 1]) == \"canterlot\"\nassert solution([5, 3, 5]) == \"madam\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n10 5 3\n''') == 'canterlot'\nassert solution('''\n6\n8 1\n''') == 'rarity'\nassert solution('''\n9\n8 1\n''') =='madam'\nassert solution('''\n5\n3 5\n''') =='madam'\nassert solution('''\n5\n5 3\n''') == 'canterlot'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5 3') =='madam'\nassert solution('9 8 1') == 'canterlot'\nassert solution('6 5 3') == 'rarity'\nassert solution('6 8 1') == 'IMPOSSIBLE'\n\n'''"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 5\") == \"madam\"\nassert solution(\"9 8 1\") == \"canterlot\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 5\nchaos''') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 5') =='madam'\nassert solution('6 5 3') == 'rarity'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!."
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!. \") == \"International\\ncontest- motivation high Programmers have fun! \"\n\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!.\\n\") == \"International contest- motivation high Programmers have fun!.\\n\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''Blue Ridge mountain road.\nLeaves, glowing in autumn sun,\nfall in Virginia.''') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('''Who would know if we had too few syllables?\n''') == 'Who would know if we had too few syllables?\\n'\nassert solution('''International contest- motivation high Programmers have fun!.\n''') == 'International contest- motivation high Programmers have fun!.\\n'\nassert solution('''5\nSyllable\nHia\n-\n''') == '5\\nSyllable\\nHia\\n-\\n'\nassert solution('''7\nSyllable\nCae\n-\n''') == '7\\nSyllable\\nCae\\n-\\n'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International\\ncontest- motivation high\\nProgrammers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- \\nmotivation high Programmers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest-\\nmotion high\\nProgrammers have fun!.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''Blue Ridge mountain road. Leaves, glowing in autumn sun,\nfall in Virginia.\n\nWHO KNOWS IF WE HAVE TOO FEW SYLLABLES?'''') == \"Blue Ridge mountain road. Leaves, glowing in autumn sun,\nfall in Virginia.\n\nassert solution('''WHO KNOWS IF WE HAVE TOO FEW SYLLABLES?\n\nInternational contest- motivation high Programmers have fun!.\n''') == \"International contest- motivation high Programmers have fun!."
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Thore is awesome'\nassert solution('2') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Thore'\nassert solution('2') == 'ThoreH'\nassert solution('3') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'\nprint(solution('''\n2\nThoreHusfeldt\nJohanSannemo\n'''))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"ThoreH\"\nassert solution(\"3\") == \"Thore is awesome\"\nassert solution(\"4\") == \"Thore sucks\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\nThoreHusfeldt\nJohanSannemo\n''') == 'Thore sucks'\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\nassert solution('''\n2\nThoreHusfeldt\nJohanSannemo\n''') == 'Thore is awesome'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\nThoreTiemann\nThoreHusfeldt\n\"\"\") == \"Thore is awesome\"\nassert solution(\"\"\"\nThoreHusfeldt\nJohanSannemo\n\"\"\") == \"Thore sucks\""
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"Thore sucks\"\nassert solution(input) == \"Thore is awesome\""
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'ThoreH'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == \"Thore sucks\"\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldter\n''') == \"ThoreHusfeldt\"\nassert solution('''\n2\nThoreHusfeldter\nThoreHusfeldt\n''') == \"Thore sucks\"\n''')"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreH'\nassert solution('''\n2\nThoreHusfeldter\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\nassert solution('''\n2\nThoreHusfeldter\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\n''')\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"L*R\") == \"6\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"*\") == \"1\"\nassert solution(\"**\") == \"33\"\nassert solution(\"**\") == \"6\"\nassert solution(\"**L\") == \"30\"\nassert solution(\"LR\") == \"5\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"L*R\") == \"6\"\nassert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''L*R\nR*R\nR*L\n*L\nL*L\nL*R\nL*R\nL*L\n*L\nL*R\nL*R\n*R\nL*R\nL*L\nR*R\nR*R\n*R\nR*R\nR*R\nR*L\nR*R\nR*L\nL*R\nR*R\nR*L\nR*R\nR*L\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nL*R\nL*R\nL*R\nR*L\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*L\nR*R\nR*L\nL*R\nR*R\nR*R\nL*R\nR*L\nR*R\nL*R\nR*L\nR*R\nR*L\nR*R\nL*R\nL*L\nR*R\nL*L\nR*L\nL*R\nR*R\nR*R\nR*R\nR*R\nL*R\nL*R\nR*R\nL*R\nR*R\nR*R\nL*R\nL*L\nR*L\nR*R\nR*R\nR*L\nR*R\nR*L\nR*L\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*L\nR*R\nR*L\nL*L\nR*R\nR*L\nR*R\nL*L\nR*R\nR*L\nR*R\nR*L\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\nassert solution(\"*\") == \"0\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\nassert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'\nassert solution('''\nmoo not foo\n''') == 'yes'\n''')"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\nassert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'yes'\nassert solution('''\nmoo not foo\n''') == 'wait what?'\nassert solution('''\na\n''') == 'wait what?'\nassert solution('''\nb\n''') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\nlukas is smart\\n') == 'wait what?'\nassert solution('2\\nherp is derp\\nherp is derp\\n') == 'yes'"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"herp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\nherp is herp\\nherp is herp\\nherp is herp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples[0]) == \"yes\"\nassert solution(samples[1]) == \"wait what\"\nassert solution(samples[2]) == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n\"\n    \"herp is derp\\n\"\n    \"derp is herp\\n\"\n    \"herp is herp\\n\"\n    \"derp is derp\\n\"\n) == \"yes\"\n\nassert solution(\n    \"3\\n\"\n    \"oskar not lukas\\n\"\n    \"oskar is poptart\\n\"\n    \"lukas is smart\\n\"\n) == \"wait what?\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\noskar is poptart\nlukas is smart\n''') == 'wait what?'\nassert solution('''\n2\noskar not lukas\noskar not lukas\n''') == 'yes'\n'''\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'yes', \"Wrong answer\"\nassert solution('2') == 'wait what?', \"Wrong answer\"\nassert solution('3') == 'yes', \"Wrong answer\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\lukas is smart\\n') == 'wait what?'\nassert solution('2\\nherp is derp\\nherp is derp\\n') == 'yes'\nprint('all tests passed')"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\nassert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'\nassert solution('''\nlukas is smart\noskar is poptart\noskar not lukas\n''') == 'wait what?'\nassert solution('''\noskar is poptart\nlukas is smart\noskar not lukas\n''') == 'wait what?'\nassert solution('''\nmoo is smart\nlukas is smart\noskar is poptart\noskar not lukas\n''') == 'wait what?'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA\") == \"4 4\"\nassert solution(\"3\\nACMA\\nACM\\nACA\\nAMA\\n\") == \"impossible\""
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\nAAAAAA\nCCCC\nCCC''') == \"1 4\"\n\nassert solution('''1\nAA''') == \"impossible\"\n\nassert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\nSample Output 4:\n1 4\nMM\nA\nAA\nACA\nACMAA''') == \"1 4\"\n\nassert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\nSample Output 5:\n2 1\nACMAA\nA\nSample Output 6:\n1 4\nMM\nA\nAA\nACA\nACMAA''') == \"impossible\"\n\nassert solution('''5\nAAAAAA\nCCCC\nCCC\nAAAAA\nAA\nA\nSample Output 7:\nimpossible\n''') == \"impossible\"\n\n\nimport sys\nimport os"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nA') == '1 4\\nACMAA\\nACA\\nACMAA\\n'\nassert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA') == '1 4\\nMM\\nA\\nACMAA\\nACA\\nACMAA\\n'\nassert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA') == 'impossible'\nassert solution('1\\nA') == 'impossible'\nassert solution('1\\nA') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\nA\nB\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3\nAA\nAC\n\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2\nA\nB\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1 4\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"1\") == \"1 4\"\nprint(solution(input()))"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"A\"\nassert solution(\"2\") == \"AC\"\nassert solution(\"3\") == \"AM\"\nassert solution(\"4\") == \"AM\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1 4'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"impossible\""
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nAACCMMAA\") == \"1 4\"\nassert solution(\"3\\nACMA\\nACM\\nACA\") == \"impossible\"\nassert solution(\"1\\nAM\\nMA\") == \"impossible\"\nassert solution(\"1\\nAM\\nAM\") == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1 4'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 20 3') == '3.95'\nassert solution('2 4 1') == '3.95'\nassert solution('20 0.5 10') == '101.75'\nassert solution('80 0.5 2') == '81.40'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''\n2 4 1\n1 0.5 5\n''') == '3'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746'\nassert solution('''\n101 1 0.5\n''') == '1'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '6.00000'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '4.0'\nassert solution('1 2 3 4 5') == '9.0'\nassert solution('1 2 3 4 5 6') == '12.0'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"100 111 5\") == \"124\"\nassert solution(\"2 4 1\") == \"3\"\nassert solution(\"10 20 3\") == \"18.908950746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(stdin) == '18.9'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''\n2 4 1\n1 0.5 5\nSample Output 2:\n3\n''') == '18.9029850746'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\nSample Output 3:\n18.9029850746\n''') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3''') == \"18.9029850746\"\nassert solution('''20 10 3\n5 0.3 8\n6 0.8 3\n8 0.9 3''') == \"20.25\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == '124'\nassert solution(sample_input_2) == '3'\nassert solution(sample_input_3) == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n5 0.3 8\\n6 0.8 3') == '18.9029850746'\nassert solution('2\\n4 1\\n1 0.5 5\\n2 0.5 2\\n3 0.5 2\\n4 0.5 2\\n5 0.5 2') == '3'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"2 1 2\"\nassert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"22\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\""
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == None\nassert solution('') == None\nassert solution(' ') == None\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\nimport sys\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"4 3 4 2\"\nassert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"5 22\") == \"4 3 4 2\""
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n') == '2 1 2'\nassert solution('5 4\\n') == '1 2 3'\nassert solution('2 3\\n') == '1'\nassert solution('10 8\\n') == '1 1 2 2 2 3 3 4 4 4 5 5 5 6 6 7 7 7 8 8 9 9'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n''') == '2 1 2'\nassert solution('''4\n1 2 3 4\n''') == '3 1 2'\nassert solution('''5\n1 2 3 4 5\n''') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == '0'\nassert solution('3') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '0'\nassert solution('7 6') == '2'\nassert solution('10 6') == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\nassert solution('''\n7 5\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 5\") == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\n\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\n\nassert solution('''7 5\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 3:\n0\n\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\n\nassert solution('''\n7 6\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 2:\n2\n''') == '0'\n\nassert solution('''\n7 5\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\nassert solution(\"0 20\") == \"28.26445910\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.00000000'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\nassert solution('0 20\\n1.00 0.10') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000', '20'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265', '-10 10'\nprint('All tests passed!')"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"20 0\\n1.00 0.10\\n\"\n) == \"20.00000000\"\nassert solution(\n    \"-10 10\\n10.00 1.00\\n\"\n) == \"3.14159265\"\nprint(solution(\n    \"0 20\\n1.00 0.10\\n\"\n))\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 0\n1.00 0.10''') == \"20.00000000\"\nassert solution('''-10 10\n10.00 1.00''') == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 0') == '20'\nassert solution('1.00 0.10') == '20.00000000'\nassert solution('-10 10') == '3.14159265'"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('20 0\\n1.00 0.10') == '20.00000000'\nassert solution('-10 10\\n10.00 1.00') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\nassert solution(\"0 20\") == \"28.26445910\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\nprint(solution(input()))\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n2 100\n1 100\n4 70\n3 70\n2 80\n\"\"\") == \"170\"\nprint(solution(input()))\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 100\n4 70''') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''\n5\n2 100\n1 100\n4 70\n3 70\n2 80\n''') == '150'\nassert solution('''\n6\n1 100\n4 70\n3 70\n2 80\n5 100\n5 80\n''') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''3\n2 120\n3 50\n2 80\n''') == '150'\nprint('All test cases passed!')"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 100\n1 100\n4 70\n3 70\n2 80''') == '150'\nassert solution('''4\n2 100\n1 100\n4 70\n3 70\n2 80''') == '170'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 100 1 100') == '170'\nassert solution('3 3 70') == '150'\nassert solution('4 4 70') == '170'\nassert solution('5 5 5') == '160'\nassert solution('3 5 30') == '240'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '170'\nassert solution('4') == '170'"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n100\n1 100\n4 70\n3 70\n''') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 4\\n\") == \"2\"\nassert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n\") == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n\"\"\") == '2'\nassert solution(\"\"\"\n20 10\n8 7\n16 15\n18 17\n19 20\n11 12\n13 14\n14 15\n17 18\n14 20\n19 21\n21 17\n20 15\n19 13\n18 13\n17 11\n14 9\n13 12\n13 11\n14 12\n\"\"\") == '12'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\nassert solution('5 5\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '5'\nassert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '4'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '5'\nassert solution('''3\n4\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '4'\nprint('All tests passed!')"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.5', f'Your result {solution(\"1\")} did not match expected result'\nassert solution('1 2') == '0.868', f'Your result {solution(\"1 2\")} did not match expected result'\nassert solution('8') == '0.1555555555555556', f'Your result {solution(\"8\")} did not match expected result'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0.0446429\"\nassert solution(\"1\") == \"0.0446429\"\nassert solution(\"3\") == \"0.0386429\"\nassert solution(\"10\") == \"0.03776429\"\nassert solution(\"100000000\") == \"1.0000000000\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1\n0\n2 1 2\n1 0\n1 0\n''') == '0.5', f'''\nSample Input {solution.__doc__}\nSample Output {solution.__doc__}\n'''"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0.5', solution('5')\nassert solution('8') == '0.5', solution('8')\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.5'\nassert solution('4') == '0.77'\nassert solution('5') == '0.0'\nassert solution('7') == '0.345679'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n''') == '0.0446429'\nassert solution('''\n4\n2\n2 0 1\n1 2\n1 0\n1 0\n''') == '0.0446429'\nassert solution('''\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n0\\n2 1 2\") == \"0.5\"\nassert solution(\"8\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7\\n1 0\\n2 0 2\\n1 0\\n1 0\\n1 0\\n1 0\\n1 0\") == \"0.0446429\"\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4 3 1 1\"\nassert solution(\"6\") == \"3 1 1 1\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 2 3\n1 2\n1 2\n\"\"\") == \"\"\"3\n1 6 1\n2 5 2\n3 4 3\n\"\"\".strip()\n\nassert solution(\"\"\"\n5\n1 2 3 2 1\n\"\"\") == \"\"\"3\n1 6 1\n2 5 2\n3 4 3\n\"\"\".strip()\n\nassert solution(\"\"\"\n5\n1 2 1 2 3\n\"\"\") == \"\"\"IMPOSSIBLE\"\"\".strip()\n\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"\"\"1\n2 5 2\n\"\"\".strip()\n\nassert solution(\"\"\"\n2\n1 3\n\"\"\") == \"\"\"1\n2 5 2\n\"\"\".strip()\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 1 2''') == \"3\"\nassert solution('''6\n1 2 3 3 2 1''') == \"3\"\nassert solution('''1\n1 2''') == \"2\"\nassert solution('''1\n1 2 3''') == \"2\"\nassert solution('''6\n1 2 3 3 2 1''') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1 6 1'\nassert solution('4') == '2 5 2'\nassert solution('5') == '3 4 3'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 3 2 1\") == \"3\"\nassert solution(\"4\\n1 2 1 2\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 3 2 1\") == \"3\"\nassert solution(\"5 1 1 2 2\") == \"1 6 1\"\nassert solution(\"4 2 4 4 4 4 2 2 4\") == \"4 3 3 3 3 2 3 2 2 3 3 3\"\nassert solution(\"12 2 1 2 4 2 2 4 2 2 1 3 3 2 2 2 1 3 3\") == \"1 12 1 13 13 1 3 1 1 5 5 1 13 1 12\""
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 1 2\n''') == '3\\n1 6 1\\n2 5 2\\n3 4 3\\n'\nassert solution('''\n4 1 1 2\n''') == '2\\n1 4 1\\n2 5 2\\n3 6 3\\n'\nassert solution('''\n1\n2\n1\n''') == 'IMPOSSIBLE\\n'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 3 2') == '3\\n1 6 1'\n\"\"\""
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(example_input_00) == example_output_00\nassert solution(example_input_01) == example_output_01\nassert solution(example_input_02) == example_output_02\nassert solution(example_input_03) == example_output_03\nassert solution(example_input_04) == example_output_04\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"3\\n1 6 1\"\nassert solution(\"6\\n1 2 3 3 2 1\") == \"3\\n1 6 1\""
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\nassert solution('''\n3\n1 2\n1 100\n1 1\n''') == '1 2 100'\n''')\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 100') == '1 100'\nassert solution('1 1') == '1 1'\nprint('\"Run\" is the word to type to begin!')\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n10 20\n2 28\n''') == '10 20 28'\nassert solution('''\n1\n1\n''') == '1'\n'''\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2\n1 100\n1 1''') == '1 2 100'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\"\nassert solution(\"3\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '1 100'\nassert solution('4') == '1 1'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n1 100\\n1 1\\n') == '1 2 100\\n'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2\\n1 100') == '1 2 100'\nassert solution('3\\n1 2\\n1 100\\n1 1') == '1 2 100 1'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'\n'''"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"23\"\nassert solution(\"3\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nAB1 1\\nAC2 1\\nBC2 1\\n') == '2600'\nassert solution('2\\nAB 1 1\\nAC 2 1\\n') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\nassert solution('2') == '23'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2600\"\nassert solution(stdin + \"\\n\" + stdin + \"\\n\" + stdin + \"\\n\" + stdin) == \"506\""
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\nassert solution('1') == ''"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"2600\"\nassert solution(\"3\") == \"506\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0\") == '2600'\nassert solution(\"3\") == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0\\n') == '2600'\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '506'\nassert solution('4\\n') == '0'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('())') == 'possible'\nassert solution('()()') == 'possible'\nassert solution('(()())()') == 'possible'\nassert solution('(()())(())') == 'impossible'\nassert solution(')(') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"possible\", \"Easy\"\nassert solution(\"()))\") == \"possible\", \"Medium\"\nassert solution(\"))(\"))\") == \"impossible\", \"Hard\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()))\" ) == \"possible\"\nassert solution(\"))((\" ) == \"impossible\"\nassert solution(\"((((())))))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"()))((((())))))\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'possible'\nassert solution('()))') == 'impossible'\nassert solution(')))(') == 'possible'\nassert solution('((()))') == 'impossible'\nassert solution('(()))())') == 'possible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\"))\") == \"impossible\"\nassert solution(\"))()\") == \"impossible\"\nassert solution(\")()())\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n()))\n''') == 'possible', \"You failed the 'possible' test!\"\n\nassert solution('''\n)))(\n''') == 'impossible', \"You failed the 'impossible' test!\"\n\nassert solution('''\n(())\n''') == 'possible', \"You failed the 'possible' test!\"\n\nassert solution('''\n(()))\n''') == 'impossible', \"You failed the 'impossible' test!\"\n\nassert solution('''\n(((())()))\n''') == 'impossible', \"You failed the 'impossible' test!\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\"))()\") == \"impossible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('()))') == 'possible'\nassert solution('()))(') == 'impossible'\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"())\") == \"possible\"\nassert solution(\"()\") == \"possible\"\nassert solution(\"(((())))\") == \"possible\"\nassert solution(\"(()()(()))\") == \"possible\"\nassert solution(\"((((((()))))))\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n1 3000 3000\n1 2000 3000\n2 2000 5000\n2 2000 6000\n2 2000 7000\n2 2000 8000\n2 2000 9000\n2 2000 9500\n2 2000 9800\n2 2000 9900\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800\n2 2000 9500\n2 2000 9800"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\") == \"1800\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 2\\n') == 'impossible'\nassert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400') == '1800'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\nassert solution('''\n3 3\n1 1800 900 900\n1 1800 900 900\n1 1800 900 900\n''') == 'impossible'\n\nassert solution('''\n2 5\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n''') == 'impossible'\nassert solution('''\n2 4\n1 1800 900 900\n1 1800 900 900\n1 1800 900 900\n1 1800 900 900\n1 1800 900 900\n''') == 'impossible'\n\nassert solution('''\n2 4\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 0 0 0\n''') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1800'\nassert solution('2 2') == 'impossible'\n\n\"\"\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n900 1000\\n1500 1200') == '1200'\nassert solution('1 2\\n1 1800 9000 1800\\n1 1900 9200 1600\\n1 2200 9400 1400') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\"\n\n'''\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1800'\nassert solution('2 2') == 'impossible'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'A1-B2 A2-C2 B2-C1'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n3\nA1-B1 A2-C2 B2-C1''') == 'A1-B1 A2-C2 B2-C1'\nassert solution('''2 3\n1\nA1-C1 A2-B2''') == 'A1-C1 A2-B2 A2-B2'\n\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == 'A1-B1 A2-C2 B2-C1'\nassert solution(\"3 2\") == 'A1-B1 A2-B2 A3-C3 B3-C3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\nA1-B2 B1-A2 A3-B3\nA2-B3 B2-A3 A1-B1\nA3-B1 B3-A1 A2-B2\nA1-C1 A2-B1 B1-C2\nA1-B2 A2-C1 B2-C2\nA1-C2 A2-B2 B1-C1\nA1-B3 A2-C1 B1-C2\nA1-C3 A2-B1 B1-C2\nA2-C2 A3-B1 B1-C1\nA2-B3 A3-B1 B1-C2\nA3-C1 A3-B2 B2-C1\nA3-B2 A3-C1 B2-C2\nA3-C2 A3-B1 B2-C1\nA2-C1 A2-B1 B1-C2\nA2-B2 A2-C1 B1-C2\nA2-C2 A2-B2 B1-C1\nA3-C1 A3-B1 B1-C2\nA3-B2 A3-C1 B1-C2\nA1-B2 A2-C1 B2-C2\nA1-C1 A2-B1 B1-C2\nA1-B3 A2-C1 B1-C2\nA1-C2 A2-B1 B2-C1\nA1-B1 A2-C1 B1-C2\nA1-C3 A2-B1 B1-C2\nA1-B2 A2-C1 B2-C2\nA2-C2 A3-B1 B1-C1\nA2-B3 A3-B1 B1-C2\nA3-C1 A3-B2 B2-C1\nA3-B2 A3-C1 B2-C2\nA3-C2 A3-B1 B1-C2''') == 'A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C1\\nA2-C2 A3-B1 B1-C1\\nA2-B3 A3-B1 B1-C2\\nA3-C1 A3-B2 B2-C1\\nA3-B2 A3-C1 B2-C2\\nA3-C2 A3-B1 B1-C2\\nA1-C2 A2-B2 B2-C1\\nA1-B3 A2-C1 B1-C2\\nA1-C3 A2-B1 B1-C2\\nA2-C1 A2-B1 B1-C2\\nA2-B3 A2-C1 B1-C2\\nA3-C1 A3-B2 B2-C1\\nA3-B2 A3-C1 B2-C2\\nA3-C2 A3-B1 B1-C2\\nA1-B2 A2-C1 B2-C2\\nA1-C1 A2-B1 B1-C2\\nA1-B3 A2-C1 B1-C2\\nA1-C2 A2-B1 B2-C1\\nA1-B1 A2-C1 B1-C2\\nA1-C3 A2-B1 B1-C2\\nA2-C2 A3-B1 B1-C1\\nA2-B3 A3-B1 B1-C2\\nA3-C1 A3-B2 B2-C1\\nA3-B2 A3-C1 B2-C2\\nA3-C2 A3-B1 B1-C2\\nA2-C1 A2-B1 B1-C2\\nA2-B2 A2-C1 B2-C2\\nA2-C2 A2-B2 B1-C1\\nA3-C1 A3-B1 B1-C2\\nA3-B2 A3-B1 B1-C2\\nA1-B2 A2-C1 B2-C2\\nA1-C3 A2-B1 B1-C2\\nA1-B3 A2-C1 B1-C2\\nA1-C2 A2-B1 B1-C2\\nA1-B1 A2-C1 B1-C2\\nA1-C3 A2-B1 B1-C2\\nA2-C1 A2-B1 B1-C2\\nA2-B3 A2-C1 B1-C2\\nA3-C1 A3-B1 B1-C2\\nA3-B2 A3-C1 B1-C2\\nA3-C2 A3-B1 B2-C1\\nA3-B3 A3-C1 B1-C2\\nA1-B2 A2-C1 B2-C2\\nA1-C1 A2-B1 B1-C2\\nA1-B3 A2-C1 B1-C2\\nA1-C2 A2-B1 B2-C1\\nA1-B1 A2-C1 B1-C2\\nA1-C3 A2-B1 B1-C2\\nA2-C2 A3-B1 B1-C1\\nA2-B3 A3-B1 B1-C2\\nA3-C1 A3-B2 B2-C1\\nA3-B2 A3-C1 B2-C2\\nA3-C2 A3-B1 B1-C2'''"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"3 3\") == \"A1-B1 A2-C2 B2-C1 A3-B3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n.X\n.X\n''') == '7'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n..\\n..') == '7'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX\\n') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '7\\n'\nassert solution('4 4\\nX.XX\\nX..X\\n..X.\\n..XX\\n') == '9\\n'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\n\n--------------------------------------------\nSOLUTION"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n.\\n.\\n') == '7'\nassert solution('4 4\\nXXX\\nX..\\n..X\\n..XX') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\nXX.XX\nXX..X\n..XX.\n..XX.''') == '7'\nassert solution('''4 4\nXX.XX\nX..X\n..X.\n..XX\nSample Output 3:\n9"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '2 2\\n'\n    '.X.\\n'\n    '..X\\n'\n    '..X.\\n'\n) == '7'\nassert solution(\n    '4 4\\n'\n    'X.X\\n'\n    'XX.\\n'\n    '..X.\\n'\n    '..XX\\n'\n) == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n..\n..\n''') == '7'\nassert solution('''\n4 4\nX.XX\nX..X\n..X.\n..XX\n''') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    2 2\n    .\n    .\n    ''') == '7'\n''')"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 2 2 2\n2 3 4 5\n3 0 1 2\n1 1 2 3\n1 3 3 2\n2 1 2 0\n''') == '-1'\nassert solution('''\n2\n3 3 2 2\n1 1 1 1\n''') == '600'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3 2 2 100\n1 1 1 1 500\n\"\"\") == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 2 2 100\n1 1 1 1 500''') == '600'\nassert solution('''2 0 2 1 100\n6 0 8 1 1''') == '100'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '600'\nassert solution('4\\n10 10 2 2 10\\n3 3 2 1 2') == '1000'\nassert solution('4\\n0 1 2 2 3\\n0 1 2 1 3') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''2\n2 0 2 1 100\n6 0 8 1 1\n''') == '100'\nassert solution('''3\n3 3 2 2 100\n1 1 1 1 500\n''') == '-1'\nassert solution('''0\n0 0 2 2 100\n1 1 1 1 500\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1 0 2 1 100\") == \"500\"\nassert solution(\"2\\n2 0 2 1 100\") == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"600\"\nassert solution(\"2 3 2 2 100\") == \"600\"\nassert solution(\"2 0 2 1 100\") == \"100\""
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"600\"\nassert solution(\"2\") == \"100\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '600'\nassert solution('3 3 2 2 100') == '600'\nassert solution('2 0 2 1 100') == '100'\nassert solution('6 0 8 1 1') == '100'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''\n1\n5 5 4 0 4\n''') == '4'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\\n\"\n    \"3\\n\"\n    ) == \"3\"\nassert solution(\n    \"1\\n\"\n    \"1234567890\"\n    ) == \"1234567890\"\nassert solution(\n    \"1\\n\"\n    \"0\"\n    ) == \"0\"\nassert solution(\n    \"2\\n\"\n    \"11\"\n    ) == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n11\n''') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"100\") == \"99\"\nassert solution(\"101\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('361') == '3'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(samples[0]) == \"2\"\nassert solution(samples[1]) == \"0\"\nassert solution(samples[2]) == \"3\"\nassert solution(samples[3]) == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n361\n''') == '3'\n\nassert solution('''\n2\n11\n''') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('361') == '3'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '3'\nassert solution('361') == '3'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"10\"\nassert solution(\"3 10\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"cancel road trip\""
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"10\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5\\n') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5\\n') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10') == '10'\nassert solution('2 100') == '100'\nassert solution('1 10') == 'cancel road trip'\nassert solution('11 5') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"10\""
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"10\"\nassert solution(\"2 100\") == \"cancel road trip\"\nassert solution(\"1 10\") == \"10\"\nassert solution(\"11 5\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 10\n2 100\n1 10\n11 5\n''') == '10'\nassert solution('''\n2 10\n2 100\n1 10\n13 5\n''') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 10, 2, 100, 1, 10, 11, 5, ]), 'cancel road trip'\nassert solution([3, 10, 2, 100, 1, 10, 11, 5, ]), '10'\nassert solution([3, 10, 2, 100, 1, 10, 11, 5, ]), 'cancel road trip'\n\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 7') == '1 7 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\n\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7\\n2 2\\n3 8\\n2 7\\n2 4\\n3 8\") == \"0 7 8 11 15 16 19\"\n\nimport random\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''3 3\n1 3\n5 9\n6 1''') == '0 1 5 9'\n\n\"\"\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 9\\n2 8\\n1 1\\n3 4\\n5 100') == '1 8 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nprint('All tests passed!')\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '1', \"Wrong Answer (High)\"\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '4', \"Wrong Answer (Medium)\"\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n0 3\n3 0\n''') == '3', \"Wrong Answer (High)\"\nassert solution('''\n1 10 3\n-10000 100000 1\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3', \"Wrong Answer (Medium)\"\nassert solution('''\n1 5 3\n-10000 100000 1\n0 0 1\n3 3\n-3 3\n3 -3\n0 3\n3 0\n''') == '4', \"Wrong Answer (High)\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3 3\") == \"1\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 3 0 0\") == \"3\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 3 2\") == \"3\"\n\n\"\"\"\nimport math\n\nn, m, r = map(int, input().split())\nvillage_list = []\nminion_list = []\nfor i in range(n):\n    village_list.append(list(map(int, input().split())))\n\nfor i in range(m):\n    minion_list.append(list(map(int, input().split())))\n\nvillage_list.sort()\nminion_list.sort(key=lambda minion_list: (minion_list[0], minion_list[1]))\n\ncount = 0\ncurrent_max = 0\n\nwhile count < m and current_max < r:\n    for village in village_list:\n        for minion in minion_list:\n            dx = abs(village[0]-minion[0])\n            dy = abs(village[1]-minion[1])\n            r = math.sqrt(dx ** 2 + dy ** 2)\n            if r <= village[2]:\n                break\n        else:\n            continue\n        break\n    else:\n        count += 1\n        current_max = 0\n        village_list.sort()\n        minion_list.sort(key=lambda minion_list: (minion_list[0], minion_list[1]))\n\nprint(count)\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 -3\n0 3\n0 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 -3\n3 0\n0 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\""
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n''') == '1', 'First'\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\nSample Output 2:\n3\n''') == '3', 'Second'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0') == '1'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 0') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == '1'\nassert solution('''1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == '3'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == \"1\"\nprint(solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n'''))\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 3\\n0 0 1\\n3 3') == '1'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3') == '2'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n0 3') == '3'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n0 3\\n0 0') == '4'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n0 3\\n-4 4') == '0'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4\\n2\\n2\\n0\\n0'\nassert solution('5 100000\\n1\\n1\\n1\\n1\\n1') == '4\\n2\\n2\\n0\\n0'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 4 4 2 2 0\"\nassert solution(\"5 10000\\n1\\n1\\n10\\n1\\n9\") == \"4 4 2 2 0\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10000') == '4'\nassert solution('5 9') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10000') == '4'\nassert solution('5 9') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1\n''') == '4'\nassert solution('''5 9\n1\n1\n10\n1\n9\n''') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 10000\n1\n1\n1\n1\n1\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n5 9\n1\n1\n10\n1\n9\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5 10000\") == \"4\"\nassert solution(\"5 9\") == \"2\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10000\\n1\") == \"4\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10000\\n1') == '4'\nassert solution('5 9\\n1\\n10\\n1') == '2'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 10000\\n1\\n1\\n1\\n1\\n1\") == \"4\\n4\\n2\\n2\\n0\"\nassert solution(\"5 9\\n1\\n1\\n10\\n1\\n9\") == \"2\\n0\\n0\\n2\\n0\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nne\n''') == 'NE'\nassert solution('''\n4\nkava\n''') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'NE', '1st Test'\nassert solution('4') == 'DA', '2nd Test'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'NE', 'test 1 failed'\nassert solution('4') == 'DA', 'test 2 failed'"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"NE\", \"Should be 'NE'\"\nassert solution(\"4\") == \"DA\", \"Should be 'DA'\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'NE'\nassert solution('2') == 'DA'\nassert solution('3') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"NE\", \"First\"\nassert solution(\"4\") == \"DA\", \"Second\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 4 4\"\n    \"1 2\"\n    \"1 3\"\n    \"2 4\"\n    \"3 4\"\n    \"1 1 4\"\n    \"2 1 4\"\n    \"1 1 3\"\n    \"2 2 3 2\"\n) == \"2\"\n\nassert solution(\n    \"8 10 4\"\n    \"1 2\"\n    \"2 3\"\n    \"1 3\"\n    \"3 6\"\n    \"6 8\"\n    \"2 4\"\n    \"2 5\"\n    \"4 7\"\n    \"5 7\"\n    \"7 8\"\n    \"2 3 4 5 6\"\n    \"2 2 6 8\"\n    \"1 1 6\"\n    \"1 1 8\"\n) == \"3\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\") == \"3\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '2', 'test_1'\nassert solution('''10 20 4\n1 2\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '3', 'test_2'\nassert solution('''8 10 4\n1 2\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1', 'test_3'"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"8 10 4\") == \"3\"\nassert solution(\"3 10 5\") == \"0\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 4') == '2'\nassert solution('8 10 4') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 4') == '2'\nassert solution('8 10 4') == '0'\nassert solution('10 10 4') == '3'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\nassert solution(stdin='''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 4') == '2'\nassert solution('8 10 4') == '3'\nassert solution('3 2 1') == '0'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"8 10 4\") == \"3\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '2'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n'''\n) == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1'\n\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n3 2 2\n''') == '1'\nassert solution('''\n5 4\n1 0 0 0 1 1 0\n1 0 0 1 0 1 1\n1 0 0 0 1 1 1\n1 0 1 0 1 1 1\n1 1 0 1 1 1 1\n1 1 0 1 1 1 1\n''') == '4'\nassert solution('''\n5 6\n0 0 1 0 1 1 1\n0 1 0 1 1 1 1\n0 1 1 0 1 1 1\n1 0 1 1 1 1 1\n1 0 0 1 1 1 1\n1 0 1 1 1 1 1\n''') == '4'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\\n') == '2'\nassert solution('5 5\\n0 1\\n1 1\\n0 0\\n1 0\\n0 1\\n2 1 1\\n4 1 1\\n') == '3'\nassert solution('10 10\\n0 1\\n1 1\\n0 0\\n1 0\\n0 1\\n2 1 1\\n4 1 1\\n') == '8'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2'\nassert solution('''\n3 4\n1 1 1\n1 2 1\n0 0 1\n2 3 1\n3 2 1\n''') == '1'\nprint('all test cases passed')"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"1\"\n\nstdin = \"\"\"\n4 5\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == \"40.500000000\"\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == \"49.000000000\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 15') == '40.500000000'\nassert solution('3 15') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n2\\n') == '4.000000000'\nassert solution('1\\n1\\n3\\n') == '4.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2 15\\n\"\n    \"D 4 10 1\\n\"\n    \"C 6 1\"\n) == \"40.5\"\nprint(solution(\n    \"3 15\\n\"\n    \"D 4 10 1\\n\"\n    \"C 6 1\\n\"\n    \"C 9 3\"\n))\n\"\"\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 15\nD 4 10 1\nC 6 1\nC 9 3''') == \"40.500000000\"\nassert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3''') == \"49.000000000\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == \"40.500000000\"\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == \"49.000000000\"\nassert solution('''\n5 10\nD 1 1 1 1 1\nC 2 1\nC 3 2\nC 4 2\nC 5 2\n''') == \"101\"\nassert solution('''\n10 20\nD 1 1 1 1 1 1 1 1 1 1 1\nC 2 2\nC 3 2\nC 4 2\nC 5 2\nC 6 2\nC 7 2\nC 8 2\nC 9 2\nC 10 2\n''') == \"20200\""
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\nassert solution('5 1\\nD 4 10 1\\nC 6 1\\nC 9 3') == 'Infinite'\nassert solution('5 1\\nD 4 10 1\\nC 8 3\\nC 9 3') == 'Infinite'\nassert solution('4 1\\nD 4 10 1\\nC 6 1\\nC 9 3') == 'Infinite'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\nD 4 10 1\\nC 6 1\\n') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3\\n') == '49.000000000'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution('3\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\nassert solution('5\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\nassert solution('10\\n') == 'fail'\nassert solution('1\\n') == '1'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\n\"\n                \"a 2 10 3\\n\"\n                \"b 1 6\\n\"\n                \"c 2 1 5\\n\"\n                \"d 1 9\\n\"\n                \"e 1 4\\n\"\n                \"f 1 2\\n\"\n                \"g 2 6 8\\n\"\n                \"h 0\\n\"\n                \"i 1 3\\n\"\n                \"j 1 7\\n\") == \"fail\"\nassert solution(\"10\\n\"\n                \"a 2 10 3\\n\"\n                \"a 1 6\\n\"\n                \"c 2 1 5\\n\"\n                \"d 1 9\\n\"\n                \"e 1 4\\n\"\n                \"f 1 2\\n\"\n                \"g 2 6 8\\n\"\n                \"h 0\\n\"\n                \"i 1 3\\n\"\n                \"j 1 7\\n\") == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'fail'\nassert solution('3\\n2 3\\n1 2\\n3 1') == '3 4 5 2 1 6'\nassert solution('9\\n3 2 1\\n3 3 4\\n3 5\\n5 3 6\\n7 6\\n3 3 1\\n5 5 2\\n7 7\\n2 2 1') == '3 4 5 2 1 6 7 3 1 5 6 7'\nassert solution('8\\n1 1 2\\n2 1 1\\n1 3\\n3 1\\n1 1 2\\n2 2\\n1 2') == '1 1 1 2 2 1 1 1 1'\nassert solution('9\\n2 2 5\\n1 5 6\\n1 3\\n3 1\\n1 2\\n2 3\\n2 3\\n2 1') == '2 2 3 1 3 2'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\nk 1 2\") == \"fail\""
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == \"5 4 9 3 1 10 7 6 2\"\nassert solution('10') == \"fail\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\\n') == 'fail'\nassert solution('0\\n') == 'fail'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0:00\") == \"3\"\nassert solution(\"0:00\") == \"3\"\nassert solution(\"1:00\") == \"2\"\nassert solution(\"1:00\") == \"2\"\nassert solution(\"1:59\") == \"2\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('00:00\\n00:00') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"00:08\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('00:00') == '3'\nassert solution('00:01') == '1'\nassert solution('00:02') == '0'\nassert solution('00:03') == '0'\nassert solution('00:04') == '1'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"00:00\") == \"1\"\nassert solution(\"00:08\") == \"1\"\n\nassert solution(\"01:01\") == \"1\"\nassert solution(\"00:00\") == \"2\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('00:00\\n01:01') == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:00\") == \"3\""
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\nassert solution(\"00:08\") == \"3\"\nassert solution(\"00:00\") == \"2\""
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('(((())))') == '4,8:8,8:','sample test case 1'\nassert solution('((((())))))') == '4,4:','sample test case 2'\nassert solution('(((()())((())))))') == '4,4:8,8:8,8:','sample test case 3'"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('(())') == '4,8:8,8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('((()))') == '4,4:\n\nassert solution('((()))') == '4,4:'\n\nassert solution('((((((()))))))') == '4,4:4,4:4,4,4:4,4,4:4,4,4:\n\nassert solution('((((((()))))))') == '4,4:4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n(())\n''') == ''\nassert solution('''\n(())\n''') == '4,4:'\nassert solution('''\n()\n''') == '4,4:'\nassert solution('''\n()(())\n''') == '4,8:8,8:8,8:'\nassert solution('''\n(())\n(()))\n''') == '4,8:8,8:8,8:8,8:8:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(open(\"input_test_1.txt\")), \"Input - ():\\n---->4,8:8,8:!\"\nassert solution(open(\"input_test_2.txt\")), \"Input - ():\\n---->4,4:!\"\n\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''(((()())(())\n      (((()())))(()))\n      (((()(((()()(())))(((()(()(()()))))\n      (((((((((((()))))))))))))))))''') == '4,8:8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8:8,8,8"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(testcase_1) == testcase_1_answer\nassert solution(testcase_2) == testcase_2_answer\nassert solution(testcase_3) == testcase_3_answer\n\"\"\"\n\ntestcase_1 = \"(()(()))()((()))()()(()(()))\"\ntestcase_2 = \"()(()(()))\"\ntestcase_3 = \"(()(()))()\"\n\ntestcase_1_answer = \"4,8:8,8:4,4:8\"\ntestcase_2_answer = \"4,4:4,4:8\"\ntestcase_3_answer = \"4,8:4,8:8\""
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('(())(())()((()))') == '4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('()') == '4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('(())') == '4,4:'\nassert solution('(()())') == '4,4:4,8:8,8:'\nassert solution
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nprint(solution('''\n1 1\n26 02 03 03 2\n'''))\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n''') == \"5\"\nassert solution('''1 1\n26 02 03 03 2\n''') == \"185\"\nassert solution('''\n2 1\n28 05 16 17\n''') == \"-1\"\nassert solution('''\n2 1\n28 05 16 17\n''') == \"10\"\nassert solution('''\n2 1\n26 03 14 17\n''') == \"-1\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\n\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n26 02 03 03 1\") == \"5\"\nassert solution(\"1 1\\n26 02 03 03 2\") == \"185\"\nassert solution(\"3 3\\n0 0 0 0 0\") == \"-1\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''1 1\n26 02 03 03 2\n''') == '185'\nprint(solution('''1 1\n26 02 03 03 1\n26 02 03 03 1\n26 02 03 03 1\n26 02 03 03 1\n26 02 03 03 1\n'''))\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n26 02 03 03 1\n\"\"\") == \"5\"\nprint(solution(\"\"\"\n1 1\n26 02 03 03 2\n\"\"\") == \"-1\")\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '5', \"First\"\nassert solution('1 1') == '-1', \"Second\"\nassert solution('2 2') == '58', \"Third\""
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"5\", 'Sample Test 1'\nassert solution(\"1 1\") == \"-1\", 'Sample Test 2'\nassert solution(\"1 1\") == \"185\", 'Sample Test 3'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\nprint('Tests passed')\n'''"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\n\nassert solution('''4 2\n3 4 1 2\n''') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4\\n3 4 1 2') == '2 3 4 1'\nassert solution('1\\n5\\n4 5 5 5') == '5 1 4 2 3'\nassert solution('2\\n1\\n1 2 1') == '1 2'\nassert solution('2\\n1\\n1 2') == '1 2'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1'\nassert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '2 3 4 1'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3\n3 2 1\n''') == '2 3 1'\n\nassert solution('''\n4\n3 4 1 2\n''') == '2 3 4 1'\n\nassert solution('''\n5\n3 4 5 6 1 2\n''') == '3 4 5 6 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 3 4 1'\n\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1374 2\") == \"7413\"\nassert solution(\"210 1\") == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('15 12') == '1512', \"Wrong\"\nassert solution('201 1') == '2010', \"Wrong\"\nassert solution('1374 2') == '7413', \"Wrong\"\nprint('\"Run\" is good. \"Check\" is better.')\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"201\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n7''') == '75'\nassert solution('''13\n4''') == '135'\nassert solution('''8\n1\n''') == '81'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1002\n3\n''') == '1012'\nassert solution('''\n1002\n7\n''') == '1202'\nassert solution('''\n1002\n15\n''') == '2202'\nassert solution('''\n1002\n7\n''') == '12022'\n\nimport math\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1234\") == \"1243\"\nassert solution(\"12345\") == \"123445\"\nassert solution(\"123456\") == \"1234567\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 5') == '15'\nassert solution('5 7') == '17'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1374 2\n''') == '7413'\nassert solution('''\n210 1\n''') == '201'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0.666666666666667'\nprint(solution(input()))\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n0 0\n0 1\n1 1\n1 0\n''') == '0.666666666666667', 'first'\nassert solution('''3\n0 0\n1 1\n2 0\n''') == '0.733333333333333','second'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 1\n1 1\n1 0\n\"\"\") == \"0.666666666666667\"\nassert solution(\"\"\"\n4\n0 0\n0 1\n1 1\n1 0\n\"\"\") == \"0.733333333333333\"\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 0\n1 1\n''') == '0.666666666666667'\nprint('Tests passed!')"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n0 0\n1 1\n2 0\n\"\"\") == \"0.666666666666667\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.666666666666667\"\nassert solution(\"5\\n0 0\\n0 1\\n1 1\\n1 0\") == \"0.733333333333333\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.500000004749745'\nassert solution('2') == '1.41421356237309'\nassert solution('1') == '2.2360679775269'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('4') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0.1\"\nassert solution(\"2\") == \"0.6\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0.733333333333333'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 0 4\n1 2 2\n1 3 4\n''') == '9'\nassert solution('''\n4 4\n1 3 6\n2 3 6\n3 1 6\n''') == '18'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\") == \"9\"\nassert solution(\"2 3 100\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\nassert solution('''\n2 3 2\n10 1 10\n10 1 10\n''') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\nassert solution('2 3 1') == '2'\nassert solution('2 3 100000') == '4'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 4\n10 1 3\n0 1 20\n10 1 10''') == '9'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\nassert solution('2 10 1 10') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 4\") == \"9\"\nassert solution(\"2 3 100\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 4\n10 1 3\n0 1 20\n10 1 10''') == '9'\nassert solution('''3 3 100\n10 1 10\n0 1 10\n10 1 10''') == '21'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"9 2 7 -\") == \"4\"\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\\\n5 5 4 3 -\n1 1 1 2\n2 2 2 1\n3 3 3 2\n4 4 4 3\n5 5 4 3\n''') == '4'\nassert solution('''\\\n8 2 7 -\n1 1 1 2\n1 2 2 1\n1 3 3 2\n1 4 4 3\n1 5 5 4\n2 6 6 1\n3 7 7 2\n4 8 8 2\n5 9 9 1\n6 10 10 2\n7 11 11 2\n8 12 12 1\n9 13 13 2\n10 14 14 1\n11 15 15 2\n12 16 16 2\n13 17 17 1\n14 18 18 2\n15 19 19 1\n16 20 20 2\n17 21 21 2\n18 22 22 1\n19 23 23 2\n20 24 24 1\n21 25 25 2\n22 26 26 2\n23 27 27 1\n24 28 28 2\n25 29 29 1\n26 30 30 2\n27 31 31 1\n28 32 32 1\n29 33 33 2\n30 34 34 1\n''') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 2 3 -\") == \"1\"\nassert solution(\"8\\n2 2 4 -\") == \"1\"\nassert solution(\"7\\n3 3 1 -\") == \"5\"\nassert solution(\"7\\n4 4 1 -\") == \"1\"\nassert solution(\"7\\n5 5 1 -\") == \"6\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\nassert solution('1 1 1 2') == '1'\nassert solution('1 2 2 4') == '3'\nassert solution('2 3 5 1 2 4') == '2'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 7 -') == '2'\nassert solution('3 2 7 -') == '3'\nassert solution('4 2 7 -') == '1'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2') == '2'\nassert solution('9 2 7 -\\n1 1 1 2') == '4'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == '2'\nassert solution('''\n8 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''\n8 2 7 -\n1 1 1 2\n''') == '4'\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 3 1 1 3 -\") == \"4\"\nassert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"6 3 3 -\") == \"8\"\nassert solution(\"9 2 7 -\") == \"4\"\nassert solution(\"12 3 7 -\") == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 2 7 -\n1 1 1 2\n''') == '2'\n\nassert solution('''9 2 7 -\n1 1 1 2\n''') == '4'\n\nassert solution('''7 3 9 1 -\n1 1 1 2\n1 1 1 1\nSample Input 3:\n8 2 7 -\n3 6 2 1\nSample Output 3:\n3\n\nSample Input 4:\n8 2 7 -\n1 1 1 2\n1 2 3 4\nSample Output 4:\n4\n\nSample Input 5:\n8 2 7 -\n3 6 2 1\nSample Output 5:\n5\n\nSample Input 6:\n8 2 7 -\n3 6 2 1\nSample Output 6:\n8\n\nSample Input 7:\n8 2 7 -\n3 6 2 1\nSample Output 7:\n7\n\nSample Input 8:\n8 2 7 -\n3 6 2 1\nSample Output 8:\n0\n\nSample Input 9:\n8 2 7 -\n3 6 2 1\nSample Output 9:\n0\n''') == '8'\n\nassert solution('''7 3 9 1 -\n1 1 1 2\n1 2 3 4\nSample Input 10:\n8 2 7 -\n1 1 1 2\n1 2 3 4\nSample Output 10:\n0\n''') == '0'\n\nassert solution('''7 3 9 1 -\n1 1 1 2\n1 2 3 4\nSample Input 11:\n8 2 7 -\n1 1 1 2\n1 2 3 4\nSample Output 11:\n0\n''') == '0'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '3'\nassert solution('4 4') == '2'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 5') == '3'\nassert solution('2 3 5') == '4'\nassert solution('3 4 5') == '3'\nassert solution('1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\nassert solution('''\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 1\n1 2\n1 3\n2 2\n2 3\n3 3\n3 4\n3 5\n4 4\n4 5\n5 5\n''') == '5'\nassert solution('''\n2\n1 1\n2 2\n''') == '1'\nprint('Solution:')\nprint(solution(input))\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n2 1\n''') == '6', solution.__doc__\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n2 1\\n') == '6'\nassert solution('3 4\\n2 3 1\\n') == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == '6'\nassert solution('2 3') == '12'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"6\"\nprint(solution())\nprint(solution())\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"5 3 4 1 2\") == \"1\""
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10\n3 4 5 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n3 4 5 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution(stdin_fixture) == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n3 4 5 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n3 4 5 1 2\n''') == '1'\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n''') == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"5\\n3 4 5 1 2\") == \"1\"\nprint(\"You're doing a great job! Let's see how you did...\")\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n3 3\n1 3 1\n2 1 2\n1 1 1\n''') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '4'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 2\n1 4 10\n5 2 6\n11 1 3\"\"\") == \"9\"\nassert solution(\"\"\"2 2\n1 3 1\n2 1 2\"\"\") == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10 20 20 10') == '0'\nassert solution('4 3\\n5 6 7 1 2\\n1 3 2 4 5') == '6'\nassert solution('9 4\\n11 12 13 14 15\\n1 2 3 4 5 6\\n7 8 9 10 11 12\\n13 14 15 16 17 18\\n19 20 21 22 23 24') == '29'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 3 1') == '0'\nassert solution('2 3 1') == '0'\nassert solution('2 4 1') == '1'\nassert solution('3 3 1') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9', 'Should handle simple case'\n\nassert solution('''3 3\n1 2 10\n5 2 3\n11 1 3\n''') == '4', 'Should handle all possible cases'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1 2\\n1 1') == '0'\nassert solution('2 2\\n2 1\\n2 2') == '0'\nassert solution('3 3\\n1 4 1\\n1 5 1\\n1 6 1') == '6'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 3\n1 4 10\n5 2 6\n11 1 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 2\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"1 4 10\\n\"\n    \"5 2 6\\n\"\n    \"11 1 3\\n\"\n) == \"9\"\nassert solution(\n    \"2 2\\n\"\n    \"1 1 1\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\") == \"4\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\nassert solution('''\n4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n2 1 3 4\n1 2\n1 3\n3 4\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\nassert solution('''4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '3'\nassert solution('''4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '2'\nassert solution('''4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '1'\nassert solution('''4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '0'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 3 4\\n1 2') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n1 3\\n2 3\\n') == '6'\nprint('\"solution\" returns the number of sets of jokes that can be seen with the given constraints.')\nprint('\"solution\" should return the number of sets of jokes that can be seen.')\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\") == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\nassert solution('4\\n4 4 5 6\\n1 2\\n1 3\\n2 4\\n3 4') == '3'\nassert solution('4\\n4 5 6 7\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n6 7') == '4'\nassert solution('4\\n4 5 6 7\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n6 7\\n7 8') == '0'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 3\\n1 2') == '3\\n', solution('3\\n1 1 3\\n1 2')\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '18'\nassert solution('3') == '265'\nprint(solution(input()))"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"18\"\nassert solution(\"3\") == \"265\""
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"18\"\nassert solution(\"3\") == \"265\"\nassert solution(\"5\") == \"25\"\nassert solution(\"1 10\") == \"18\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '18'\nassert solution('3') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18', 'Wrong!'\n\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265', 'Wrong!'\n\nassert solution('''\n3\n1 10\n5 8\n''') == '25', 'Wrong!'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10\\n5 8') == '18'\nassert solution('2 5\\n1 10') == '8'\nassert solution('3 7\\n17 144\\n121 121\\n89 98') == '265'\nassert solution('4 10\\n1 10\\n1 10\\n5 8') == '10'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\nassert solution('''\n1\n0\n''') == '0'\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10\\n5 8') == '18'\nassert solution('2 10\\n1 10\\n5 8') == '265'\nassert solution('3 10\\n17 144\\n121 121\\n89 98') == '265'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1.0\"\nassert solution(\"5 4\") == \"1.5\"\nassert solution(\"4 3\") == \"0.5\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '12.50000000'\nassert solution('''\n5 4\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '0.50000000'\nassert solution('''\n5 4\n1 1\n1 2\n1 3\n1 4\n''') == '0.50000000'\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n''') == '0.50000000'\nassert solution('''\n5 4\n1 2\n2 1\n3 1\n4 4\n''') == '2.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4\\n') == '0.50000000'\nassert solution('1 2\\n3 4\\n5 6\\n') == '12.50000000'\nassert solution('3 2\\n1 1\\n4 3\\n') == '0.33333333'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"3 3\n0 0\n1 1\n2 1\n1 0\n\"\"\") == \"0.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '0.50000000'\nassert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\nassert solution('10 0') == '10.00000000'"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"0.5\"\nassert solution(\"5 5\") == \"12.5\""
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"0.50000000\"\nassert solution(\"5 5\") == \"12.50000000\"\nassert solution(\"3 3\") == \"0.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.50000000\"\nassert solution(\"1000000\\n0.9\\n8\\n6\\n0\\n2\\n7.5\\n7.5\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n5.1\\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\n0 1') == '2'\nassert solution('4 0 4\\n0 2\\n0 1\\n2 1\\n2 3') == '1'\n\nassert solution('2 5 4\\n1 0\\n1 2\\n2 1\\n3 0') == '2'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n3 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution(\n'''\n4 0 4\n0 2\n0 1\n2 1\n2 3\n''') == '1'\n'''\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n0 1\\n1 2\\n2 3\\n1') == '2'\nassert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1') == '1'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 1 3\n0 1\n1 2\n2 3\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1 3\n0 1\n1 2\n2 3\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 1 3\\n0 1\\n1 2\\n2 3\\n1\"\n) == \"2\"\nassert solution(\n    \"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\"\n) == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\nassert solution('0 2') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1') == '2'\nassert solution('4 0 4\\n0 2\\n0 1\\n2 1\\n2 3') == '1'\nprint('\"Run\" is now complete!')\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1\\n') == '6'\nassert solution('2 2 2\\n') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 7 4''') == '8'\nassert solution('''1 2 1''') == '6'\nassert solution('''5 7 4''') == '30'\n\n'''\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"5 4 3\") == \"15\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 2\") == \"12\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1\\n') == '6'\nassert solution('2 2 2\\n') == '30'\nassert solution('2 2 1\\n') == '6'\nassert solution('2 1 2\\n') == '30'\nassert solution('1 2\\n') == '6'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '6'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'impossible'\nassert solution('2') == '2021 2020 2020'\nassert solution
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n2\n1 9999999\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\\\n3\n2020 2020 2020\n\"\"\") == \"2021 2020 2020\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2020 2020 2020\nSample Input 1:\n2\n1 9999999\nSample Output 1:\nimpossible\n''') == 'impossible'\n\nassert solution('''3\n2020 2020 2020\nSample Input 2:\n2\n1 9999999\nSample Output 2:\n1 9999999\n''') == '1 9999999'\n\nassert solution('''3\n2020 2020 2020\nSample Input 3:\n2\n10 8\nSample Output 3:\n10 9\n''') == '10 9'\n\nassert solution('''3\n2020 2020 2020\nSample Input 4:\n2\n9 8\nSample Output 4:\n9 9\n''') == '9 9'\n\nassert solution('''3\n2020 2020 2020\nSample Input 5:\n2\n20 1\nSample Output 5:\nimpossible\n''') == 'impossible'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"impossible\"\nassert solution(\"2\\n1234\\n\") == \"impossible\"\nassert solution(\"5\\n1\\n123456789\\n\") == \"impossible\"\nassert solution(\"3\\n123\\n45678\\n\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2020 2020 2020 2020 2020\n''') == '2021 2020 2020 2020 2020'\nassert solution('''\n5\n2020 2020 2020 2020 2020\n''') == '2021 2020 2020 2020 2020'\nassert solution('''\n5\n2020 2020 2020 2020 2020\n''') == '2021 2020 2020 2020 2020'\nassert solution('''\n4\n2020 2020 2020 2020\n''') == '2021 2020 2020 2020 2020'\nassert solution('''\n4\n2020 2020 2020 2020\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n2020 2020 2020\"\n) == \"2021 2020 2020\"\nassert solution(\n    \"2\\n1 9999999\"\n) == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2021 2020 2020'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"impossible\"\nassert solution('2') == \"impossible\"\nassert solution('1') == \"2021 2020 2020\"\nprint(\"Congratulations! Your solution is correct.\")\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2021 2020 2020'\nassert solution('2') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('6') == 'impossible'\nassert solution('7') == 'impossible'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n30 70\n''') == '11'\nassert solution('''\n66 69\n''') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\n80\") == \"1\"\nassert solution(\"20\\n100\") == \"1\"\nassert solution(\"30\\n70\") == \"11\"\nassert solution(\"30\\n70\") == \"1\"\nassert solution(\"30\\n70\") == \"2\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('10 11 12 13 14 15 16 17 18 19 20') == '2'\nassert solution('100 101 102 103 104 105 106 107 108 109 110') == '1'\nassert solution('101 110 111 112 113 114 115 116 117 118 119') == '2'\nassert solution
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"100\") == \"10\"\nassert solution(\"1000\") == \"11\"\nassert solution(\"99999\") == \"1\"\nassert solution(\"3999\") == \"10\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 4 5 1 2 2 6') == '1'\nassert solution('1 2 3 4 5 1 2 2 6') == '2'\nassert solution('1 3 4 5 1 2 2 6 7') == '3'\nassert solution('1 3 4 5 1 2 2 6 7 8') == '2'\nassert solution('1 3 4 5 1 2 2 6 7 8 9') == '3'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '3'\nassert solution('5\\n100\\n6\\n') == '2'\nassert solution('1\\n2\\n3\\n') == '0'\nassert solution('1\\n5\\n8\\n') == '1'\nassert solution('1\\n2\\n1\\n') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 15\n90\n30 70\n''') == '1'\n\nassert solution('''11\n3 5\n4 6\n5 7\n''') == '0'\n\nassert solution('''20 15\n90\n30 70\n''') == '1'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\nassert solution('0 0') == '0'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''30 70\n66 69\n''') == '11'\n\nassert solution('''4 2\n8 7\n''') == '2'\n\nassert solution('''3 9\n8 7\n''') == '1'\n\nassert solution('''0 4\n0 6\n''') == '1'\n\nassert solution('''0 0\n1 1\n''') == '0'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(t1) == \"3\"\nassert solution(t2) == \"5\"\nassert solution(t3) == \"4\"\nassert solution(t4) == \"begin repairs\"\nassert solution(t5) == \"begin repairs\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '2 2 0\\n>@\\n>~\\n'\n) == '2'\nassert solution(\n    '3 5 1\\n>>@<<\\n>~#~<\\n'\n) == '4'\nassert solution(\n    '5 5 1\\n>@\\n>>@<\\n>~#~<\\n>~#~<\\n>#~<\\n>#~<\\n'\n) == '5'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\\n\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\\n\") == \"4\"\nassert solution(\"9 10 10\\n>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~#~<\\n>#>\\n>>>@<<\\n>~"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n>>>>~\n''') == '4'\nassert solution('''\n5 5 2\n>@@@<<<\n>~#~<>\n>@<\n>@\n''') == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nprint('SUCCESS')"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nprint('\u2705')\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''143175=120''') == '14+31+75=120'\nassert solution('''5025=30''') == '5+025=30'\nassert solution('''143175=121''') == '14+31+76=121'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nprint('Congratulations! All test cases passed.')\n'''\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1\\n2\\n4') == '1 2'\nassert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n1\\n5') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7\n1\n2\n3\n4\n5\n6\n7\n8\n''') == '-1'\nassert solution('''\n7\n1\n2\n3\n4\n5\n6\n7\n8\n''') == '1 2'\nassert solution('''\n7\n1\n2\n3\n4\n5\n6\n7\n8\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 3 4 5\\n3 4 2 1 5\\n5 2 4 3 1\") == \"1 2\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\") == \"-1\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n1\\n1\\n1\\n1\") == \"-1\"\nassert solution(\"8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"8\\n\"\n    \"1\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"1\\n\"\n    \"5\\n\"\n    \"2\\n\"\n    \"4\\n\"\n) == \"1 2\"\nassert solution(\n    \"8\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"1\\n\"\n) == \"-1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n8\n1\n2\n3\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '-1'\nassert solution('''\n8\n1\n2\n3\n4\n1\n5\n6\n7\n''') == '4 -1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n1\\n4') == '1 4'\nassert solution('8\\n1\\n3\\n2\\n4\\n5\\n6\\n7') == '1 7'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\n\nassert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\nSample Output 3:\n-1\n\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 2\"\nassert solution(\"\"\"4\n1\n3\n2\n4\n1\n5\n2\n4\n\"\"\") == \"-1\"\nassert solution(\"\"\"3\n1\n2\n3\n\"\"\") == \"1 2\"\nassert solution(\"\"\"3\n1\n2\n3\n4\n\"\"\") == \"1 2\"\nassert solution(\"\"\"2\n1\n2\n3\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1\n2\n3\n4''') == '1 2', 'Your function should return the lexicographically smallest integer pair'\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7\n1''') == '1 2', 'Your function should return the lexicographically smallest integer pair'\nassert solution('''8\n1\n2\n3\n4\n5\n6\n7\n1''') == '-1', 'Your function should return the lexicographically smallest integer pair'\nprint('Assertion test passed')\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"\") == \"0\"\nassert solution(\"101\") == \"2\"\nassert solution(\"11101\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''11010''') == '1'\nassert solution('''11000''') == '0'\nassert solution('''11010''') == '0'\nassert solution('''10011''') == '1'\nassert solution('''10010''') == '1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('01') == '1'\nassert solution('11') == '2'\nassert solution('1110') == '3'\nassert solution('1110101') == '4'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0\n0\n1\n0\n1\n0\n0\n0\n0\n1\n1\n0\n0\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n0\n1\n1\n1\n1\n0\n1\n0\n1\n1\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1101\n10\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n''') == '0'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2''') == '1'\nassert solution('''3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\nSample Input 3:\n4 2\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\nSample Output 3:\n0\n1\n2\n''') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n''') == '0'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1\\n0\\n2'\nassert solution('5 4') == '4\\n1\\n0\\n3\\n0\\n3'\nassert solution('10 10') == '10\\n10\\n'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 3 1') == '1'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"3 3\") == \"2\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\\n2 3\\n3 1\\n') == '1\\n0\\n2\\n'\nassert solution('5 6\\n1 1 4 3 1 1 1\\n2 2 2 1\\n3 1 4 2 1 2 3\\n3 3 2 2 1 1 3\\n4 4 3 3\\n') == '3\\n0\\n1\\n'\nassert solution('4 4\\n1 3 5 2 3\\n4 2 5\\n1 3\\n3 1\\n') == '3\\n2\\n1\\n'\nassert solution('1 5\\n1 1\\n2 3\\n3 4\\n5 5\\n6 5\\n') == '4\\n1\\n0\\n'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\n\nassert solution('''\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n''') == '0'\n\nassert solution('''\n2 1\n1 2\n2 3\n''') == '2'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n1 2 3''') == '2.666666'\n\nassert solution('''4 1\n1 2 3 4\n1 2 3''') == '4.000000'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"4.000000\", \"Wrong!\"\nassert solution(\"4 1\") == \"4.000000\", \"Wrong!\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '4.000000'\nassert solution('4 2 3 4') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\"\nassert solution(\"4 3\") == \"3.333333\"\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nsum = 0\ncount = 0\nresult = 0\nfor i in range(n):\n    if count >= k:\n        result = sum / k\n        break\n    sum += a[i]\n    count += 1\n\nprint(result)\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '4.5'\nassert solution('4 2') == '3.666666'\nassert solution('5 5') == '4.5'\nprint('PASSED')\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1.5'\nassert solution('4 1') == '4.0'\nassert solution('4 2') == '3.0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1') == \"4.000000\"\nassert solution('4 2') == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 3 4\") == \"4.000000\"\nassert solution(\"3 1\\n4 3 4 3\") == \"3.666666\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n\"\"\") == \"0.625\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0.750\"\nassert solution(\"4 5 5 2.0 2.0 0.0 0.0 1.0 1.0 0.0 2.0\") == \"0.625\"\nassert solution(\"1 2 5 2.0 2.0 1.0 0.0 1.0 1.0 0.0 2.0\") == \"0.000\"\nprint('TA passed all tests')\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"1 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.750\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.625\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0''') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('4 2 5 5') == '0.750'\nassert solution('4 3 5 5') == '1.750'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 3\n1\n2\n3\"\"\") == \"0.625\"\nassert solution(\"\"\"\n2 2 5 5\n2\n2\n2\n3\"\"\") == \"0.750\"\nassert solution(\"\"\"\n3 3 3\n1\n2\n3\"\"\") == \"1.500\"\nassert solution(\"\"\"\n3 3 5\n1\n2\n3\"\"\") == \"1.500\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 4') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '36'\nassert solution('3 5') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == '37'\nassert solution('3 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == '37'\nassert solution('4 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == '37'\nassert solution('5 5\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == '0'\nassert solution('6 6\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0') == '0'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '37'\nassert solution('2 2') == '3'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r'''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\nassert solution(r'''\n2 2\n1 2 3\n3 4 5\n''') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 4') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"1 2 4\\n\"\n    \"0 3 6\\n\"\n    \"4 0 3\\n\") == \"2\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0''') == '37'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"10\\n14\\n18\\n\"\nassert solution(\"4 4\") == \"1\\n4\\n9\\n16\\n\"\nassert solution(\"5 10\") == \"15\\n20\\n25\\n30\\n35\\n40\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n1234\n1 4\n1 4\nSample Input 3:\n6 6\n2 2 2 2 2 2\nSample Output 3:\n3\n6\n9\n12\n18\n27\nSample Input 4:\n5 5\n1234\n1 1\n1 1\n1 1\n1 1\nSample Output 4:\n10\n22\n33\n44\n55\nSample Input 5:\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\nSample Output 5:\n1\n4\n9\n16\nSample Input 6:\n4 4\n1234\n1 4\n1 4\n1 4\n1 4\nSample Output 6:\n10\n14\n18\n20\n24\n\"\"\"\n) == \"1234\\n16\\n18\\n20\\n24\\n\":\n    print(\"All test cases passed\")\n\nassert solution(\"\"\"\n3 3\n1234\n1 4\n1 4\nSample Input 7:\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\nSample Output 7:\n10\n22\n33\n44\n55\nSample Input 8:\n6 6\n2 2 2 2 2 2\nSample Output 8:\n3\n6\n9\n12\n18\n27\nSample Input 9:\n5 5\n1234\n1 1\n1 1\n1 1\n1 1\nSample Output 9:\n10\n22\n33\n44\n55\n\"\"\"\n) == \"1234\\n22\\n33\\n44\\n55\\n\":\n    print(\"All test cases passed\")\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\\n4\\n9\\n\"\nassert solution(\"4\") == \"10\\n14\\n18\\n\""
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"16\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n1234\n1 4\n1 4\n1 4\n''') == '10'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"16\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"10\\n14\\n18\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10'\nassert solution('4\\n1234\\n1 4\\n1 4\\n1 4\\n') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 4\") == \"6\"\nassert solution(\"1 4 3\") == \"9\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4') == '10'\nassert solution('4 4') == '9'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\") == \"1\"\nprint(\"check complete\")\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\") == \"1\"\nassert solution(\"5 2 4\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\nassert solution('''4 3\n1 3\n2 3\n3 4\n4 5''') == '2'\nprint('all tests passed')\n\n'''\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == \"2\"\nassert solution('''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4 2 3\\n1 3') == '2'\nassert solution('2\\n5 2 4\\n1 3\\n3 4') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 2 3\n1 3\n2 3\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 2 6\n1 2\n2 3\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n51 53\n51 54\n51 55\n51 56\n50 57\n49 58\n48 59\n47 60\n46 61\n45 62\n44 63\n43 64\n42 65\n42 66\n42 67\n42 68\n42 69\n42 70\n42 71\n42 72\n42 73\n42 74\n42 75\n42 76\n41 77\n40 78\n39 79\n38 80\n37 81\n36 82\n35 83\n34 84\n33 85\n32 86\n32 87\n31 88\n30 89\n29 90\n28 91\n27 92\n26 93\n25 94\n24 95\n24 96\n23 97\n22 98\n22 99\n22 100\n22 101\n22 102\n22 103\n22 104\n22 105\n21 106\n20 107\n19 108\n18 109\n18 110\n17 111\n16 112\n15 113\n14 114\n13 115\n12 116\n11 117\n10 118\n8 119\n7 120\n6 121\n5 122\n4 123\n4 124\n3 125\n2 126\n2 127\n1 128\n0 129\n0 130\n0 131\n0 132\n0 133\n0 134\n0 135\n0 136\n0 137\n0 138\n0 139\n0 140\n0 141\n0 142\n0 143\n0 144\n0 145\n0 146\n0 147\n0 148\n0 149\n0 150\n0 151\n0 152\n0 153\n0 154\n0 155\n0 156\n0 157\n0 158\n0 159\n0 160\n0 161\n0 162\n0 163\n0 164\n0 165\n0 166\n0 167\n0 168\n0 169\n0 170\n0 171\n0 172\n0 173\n0 174\n0 175\n0 176\n0 177\n0 178\n0 179\n0 180\n0 181\n0 182\n0 183\n0 184\n0 185\n0 186\n0 187\n0 188\n0 189\n0 190\n0 191\n0 192\n0 193\n0 194\n0 195\n0 196\n0 197\n0 198\n0 199\n0 200\n0 201\n0 202\n0 203\n0 204\n0 205\n0 206\n0 207\n0 208\n0 209\n0 210\n0 211\n0 212\n0 213\n0 214\n0 215\n0 216\n0 217\n0 218\n0 219\n0 220\n0 221\n0 222\n0 223\n0 224\n0 225\n0 226\n0 227\n0 228\n0 229\n0 230\n0 231\n0 232\n0 233\n0 234\n0 235\n0 236\n0 237\n0 238\n0 239\n0 240\n0 241\n0 242\n0 243\n0 244\n0 245\n0 246\n0 247\n0 248\n0 249\n0 250\n0 251\n0 252\n0 253\n0 254\n0 255\n0 256\n0 257\n0 258\n0 259\n0 260\n0 261\n0 262\n0 263\n0 264\n0 265\n0 266\n0 267\n0 268\n0 269\n0 270\n0 271\n0 272\n0 273\n0 274\n0 275\n0 276\n0 277\n0 278\n0 279\n0 280\n0 281\n0 282\n0 283\n0 284\n0 285\n0 286\n0 287\n0 288\n0 289\n0 290\n0 291\n0 292\n0 293\n0 294\n0 295\n0 296\n0 297\n0 298\n0 299\n0 300\n0 301\n0 302\n0 303\n0 304\n0 305\n0 306\n0 307\n0 308\n0 309"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution(\"3 2 2\") == '1'\nassert solution(\"5 2 4\") == '1'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'yes'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"no\"\nassert solution(\"100000\") == \"yes\"\nassert solution(\"9996 0 9997 0 0 1\") == \"yes\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n9999 0 10000 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9999 0 9999 0 0 1\\n\") == \"no\"\nassert solution(\"2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9999 0 9999 0 0 1\\n\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'yes'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'\nprint(solution(input()))\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2') == 'no'\nassert solution('3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0 10000\\nSample Output 2:') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'no'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('4 3') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'YES'\nassert solution('''4 4\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n''') == 'YES'\n\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\nSample Output 3:\nNO\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 3\n1 2\n2 3\n1 3\n\"\"\"\n) == \"YES\"\nassert solution(\n\"\"\"\n4 3\n1 2\n1 3\n1 4\n\"\"\"\n) == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\n\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n1 2\n2 3\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 3\n1 2\n1 3\n1 4\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    3 3\n    0 > 1\n    1 = 2\n    0 = 2\n    \"\"\"\n    ) == \"consistent\"\n    assert solution(\n    \"\"\"\n    5 5\n    0 = 1\n    1 = 2\n    3 = 4\n    0 > 3\n    1 > 4\n    \"\"\"\n    ) == \"inconsistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"inconsistent\"\nassert solution(\"5 5\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"inconsistent\"\nassert solution(\"2 2\") == \"inconsistent\"\nassert solution(\"3 3\") == \"consistent\"\nassert solution(\"10 10\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    5 5\n    0 = 1\n    1 = 2\n    3 = 4\n    0 > 3\n    1 > 4\n\"\"\") == \"inconsistent\"\nassert solution(\"\"\"\n    4 4\n    0 = 1\n    1 = 2\n    2 = 3\n    0 > 2\n    1 > 3\n\"\"\") == \"inconsistent\"\nassert solution(\"\"\"\n    8 8\n    0 = 1\n    1 = 2\n    2 = 3\n    4 = 5\n    5 = 6\n    6 = 7\n    0 > 4\n    1 > 5\n    2 > 6\n\"\"\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'inconsistent'\nassert solution('1\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\nassert solution('3\\n0 > 1\\n1 = 2\\n0 = 2') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'\nassert solution('1 3') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n=\n=\n''') == 'inconsistent'\nassert solution('''5 5\n0 > 3\n1 > 4\n3 = 4\n0 = 1\n1 = 2\n''') == 'consistent'\nassert solution('''5 5\n=\n0 >\n1 >\n3 =\n0 = 1\n1 = 2\n''') == 'inconsistent'\nassert solution('''3 3\n0 >\n1 =\n0 =\n1 >\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n0 > 1\n1 = 2\n0 = 2\n\"\"\") == \"inconsistent\"\nassert solution(\"\"\"\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n\"\"\") == \"consistent\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.57079633\"\nassert solution(\"5\") == \"0.785398163397448\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\nassert solution('1\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nprint('all tests passed')\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n-1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '0.002883'\nassert solution('3\\n1 0 0\\n2 1 0\\n0 0 0\\n1 0 1\\n') == '0.2668'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n\"\"\") == \"1.57079633\"\n\nassert solution(\"\"\"\n1\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n\"\"\") == \"0.0\"\n\nassert solution(\"\"\"\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n\"\"\") == \"41938.65135885\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1.57079633\"\nassert solution(\"8\") == \"41938.65135885\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == \"1.57079633\"\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\") == \"41938.65135885\"\nassert solution('4\\n0 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == \"1.57079633\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11\\nabc') == '3'\nassert solution('18\\ntrutrutiktiktappop') == '4'\n\n'''\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('11') == '2'\nassert solution('18') == '4'\nprint('all tests are passed!')\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n' + stdin) == '2'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n12\nsabcabcfabc\n''') == '4'\nassert solution('''\n12\ntrutrutiktiktappop\n''') == '4'\nassert solution('''\n10\nlklkskkklkskk\n''') == '4'\nassert solution('''\n11\nababcdefghij\n''') == '1'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"11\\nsabcabcfabc\"\n) == \"3\", \"Wrong!\"\n\nassert solution(\n    \"18\\ntrutrutiktiktappop\"\n) == \"4\", \"Wrong!\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('11') == '3'\nassert solution('18') == '4'"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nab') == 'ab'\nassert solution('3\\nabc') == 'abc'\nassert solution('3\\nac') == 'ac'\nassert solution('3\\nabcd') == 'abcd'\nassert solution('3\\nabcd') == 'abcd'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n3 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n10\n5 1 6 3 2 4 7 8 9 10\n4 6 5 1 3 2 7 8 9 10\n\"\"\") == \"10\"\nassert solution(\"\"\"\n100\n100 4 5 2 1 3 6 7 8 9 10\n100 4 5 2 1 3 6 7 8 9 10\n\"\"\") == \"101\"\nassert solution(\"\"\"\n10\n5 1 6 3 2 4 7 8 9 10\n4 6 5 1 3 2 7 8 9 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"1\"\n) == \"huge\"\nassert solution(\n    \"4\"\n) == \"huge\"\nassert solution(\n    \"8\"\n) == \"huge\"\nassert solution(\n    \"12\"\n) == \"huge\"\nassert solution(\n    \"16\"\n) == \"huge\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2\\n') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\\n') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\\n') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == 'huge'\nassert solution('4') == '3'\nassert solution('5') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\n2 3 1\n3 1 2\n''') == '2'\nassert solution('''\n3\n3 1 2\n3 1 2\n''') == '2'\nassert solution('''\n5\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '2'\n    '3 1 2'\n    '4 6 5 1 3 2'\n    ) == '2'\nassert solution(\n    '6'\n    '5 1 6 3 2 4'\n    '4 6 5 1 3 2'\n    ) == '5'\nassert solution(\n    '7'\n    '5 1 6 3 2 4'\n    '6 4 5 1 3 2'\n    ) == 'huge'\nassert solution(\n    '10'\n    '2 3 1'\n    '3 1 2'\n    ) == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'huge'\nassert solution('2') == 'huge'\nassert solution('3') == 'huge'\nassert solution('4') == 'huge'\nassert solution('5') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n3 1 2\n3 1 2\n''') == '2'\nassert solution('''\n4\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == '5'\nassert solution('''\n4\n2 3 1\n3 1 2\n''') == 'huge'\nassert solution('''\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == 'huge'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n3 1\n0 10 20\n0 10\n\"\"\"\n) == \"4\"\n\nassert solution(\n    \"\"\"\n6 1\n0 10 20 26 40 50\n0 40\n\"\"\"\n) == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == '4'\nassert solution('6 1') == '9'\nassert solution('5 1') == '5'\nassert solution('6 1') == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1\n0 10 20\n0 10\"\"\") == \"4\"\nassert solution(\"\"\"\n6 1\n0 10 20 26 40 50\n0 40\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'\nassert solution('3 1 1 1 1 1') == '9'\nassert solution('6 1 1 1 1 1') == '12'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '2'\nassert solution('6 1') == '6'\nassert solution('3 1') == '4'\nassert solution('2 2') == '3'\nassert solution('2 1') == '4'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 10 20\n0 10\n0 40\n0 50\n''') == '4'\n\nassert solution('''\n6\n0 10 20 26 40 50\n0 40\n0 50\n0 60\n0 70\n0 80\n''') == '9'\n\nprint(solution('''\n'''))"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '5'\nassert solution('2') == '5'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 1\n0 10\n0 10\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5 1\n0 10 20 50\n0 40\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n6 1\n0 10 20 50 40\n0 30\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n3 1\n0 10 20\n0 30\nSample Output 3:\n12\n\nSample Input 4:\n4 1\n0 10 20\n0 20\n0 30\n0 50\nSample Output 4:\n7\n\nSample Input 5:\n3 1\n0 10 20\n0 10\n0 20\nSample Output 5:\n8\n\nSample Input 6:\n10 1\n1 3 4 5\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\nSample Output 6:\n1\n''') == '12'\n\nassert solution('''5 1\n2 3 4 5\n0 0\n0 0\n0 0\n0 0\n0 0\nSample Output 7:\n9\n''') == '9'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n''') == 'not equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'not equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nconcat(concat([1,2]),concat([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n\"\"\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n\"\"\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal''') == 'equal'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"Oh no\"\n\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == \"Oh no\"\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == \"1\"\nassert solution('''\n1 4\n4 3\n1 2 1 2\n2 3 1 2\n''') == \"2\""
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '1'\nassert solution('3 2') == 'Oh no'\nassert solution('1 2 1 2') == '1'\nassert solution('2 3 1 2') == '2'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'\n\nstdin = '''1 3\n3 2\n1 2 1 2\n2 3 1 2\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '1 2\\n'\n    '3 2\\n'\n    '1 2 1 2\\n'\n    '2 3 1 2\\n') == '1'\nassert solution(\n    '1 3\\n'\n    '3 2\\n'\n    '1 2 1 2\\n'\n    '2 3 1 2\\n') == 'Oh no'\nassert solution(\n    '1 4\\n'\n    '4 2\\n'\n    '1 2 1 2\\n'\n    '2 3 1 2\\n') == '1'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == '1'\nassert solution('1 2') == 'Oh no'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n3 2 1 2\n2 3 1 2\n\"\"\") == \"Oh no\"\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 5\n5 3\n1 2 1 2\n2 3 1 2\n\"\"\") == \"2\""
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''1 3\n    3 2\n    1 2 1 2'''\n    ) == '1'\n\nassert solution(\n    '''1 4\n    4 3\n    1 2 1 2\n    2 3 1 2'''\n    ) == 'Oh no'\n\nassert solution(\n    '''\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    1 2\n    "
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'\nassert solution('1 2 1 2') == 'Oh no'\nassert solution('2 3 1 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n3 2\n1 2 1 2\n2 3 1 2''') == '1'\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2''') == '2'\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2''') == 'Oh no'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\n''')\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([4, 4], [\"1 2 2\", \"2 3 1\", \"3 4 1\", \"4 1 2\"]) == \"3\"\nprint(solution([5, 5], [\"1 2 1\", \"2 3 1\", \"2 4 1\", \"2 5 1\", \"4 5 1\"]))"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'\n\nfrom collections import defaultdict"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2''') == '3'\nassert solution('''5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1''') == 'impossible'\nassert solution('''10 10\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n4 6 1\n4 7 1\n4 8 1\n5 9 1\n6 7 1\n6 8 1\n7 8 1\n7 9 1\n8 9 1\n8 10 1\n9 10 1\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\nprint('All tests passed.')\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '$1$-quotation'\nassert solution('2') == '$2$-quotation'\nassert solution('1') == '$1$-quotation'\nassert solution('3') == '$2$-quotation'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2 1 1 1 3''') == \"2\"\nassert solution('''1\n22''') == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 1 1 3\n''') == '2'\nassert solution('''\n1 1 1 1 3\n''') == '1'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n4 5 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n10\n1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010 1010\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n2 1 1 1 3\n\"\"\") == \"4\", \"First\"\n\nassert solution(\"\"\"\n2\n\"\"\") == \"No quotation\", \"Second\"\n\nassert solution(\"\"\"\n5\n10 5 4 2 7 5\n\"\"\") == \"5\", \"Third\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"No quotation\", \"Fourth\"\n\nassert solution(\"\"\"\n1\n\"\"\") == \"No quotation\", \"Fifth\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '2'\nassert solution('0') == '0'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2 1 1 1 3\") == \"2\"\nassert solution(\"1\\n22\") == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('22') == '4'"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2 1 1 1 3\n''') == '4'\nassert solution('''2\n2 1 1 1 3\n''') == '2'\nassert solution('''1\n2\n''') == '2'\nassert solution('''1\n2\n''') == '2'\nassert solution('''8\n1 1 1 1 1 1 1 1\n''') == '8'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2\n1 1 1 1 3\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n1\n22\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n6\n1 2 1 1 1 3\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n4\n22 22 1 1\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n5\n22 1 1 1 3\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '2'\n\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '2'\n\nassert solution('''100\n1 2 3 4 5 6 7 8 9 10''') == '0'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\n\n---\nIn this kata we are looking for a number of different first moves where we can get an advantage, which is that we never loose our chance to win, so we don't waste time on one move, which would prevent us from winning.\n\nThe first move is to find the biggest positive integer. The second move is to find the biggest even integer. The third move is to find the biggest odd integer.\n\nIf the first move is 1, then the second move is 2, the third move is 3, and the third move is 4.\n\nTherefore we know that we have to play a strategy that gets to a certain advantage. Given $X$ positive integers, where $X$ is the number of integers, write a program that finds the first strategy that wins $X$ moves and returns the number of moves.\n\nGiven a list of integers $X$:\n\nSample Input:\n[1, 2, 3, 4]\nSample Output:\n4\n\nSample Input:\n[1, -2, 3, 4]\nSample Output:\n1\n\nSample Input:\n[3, 4, 1, 2]\nSample Output:\n2\n\nSample Input:\n[3, 4, 5, 6]\nSample Output:\n2\n\n---\n\n\"\"\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\\\n3\n3 1 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"3 1 5\") == \"3\"\nassert solution(\"2 3 1 5\") == \"2\"\nassert solution(\"4 1 2 3\") == \"3\"\nassert solution(\"4 1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 1 1\n''') == '3'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 1 5\n''') == '3'\n\nassert solution('''\n4\n1 2 3 4\n''') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '2'\nassert solution('7') == '3'\nassert solution('8') == '4'\nassert solution('9') == '5'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Should be - +d-\"\nassert solution(\"a-b+d-c\") == \"- +d-\", \"Should be - +d-\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('a+b-c') == '- +d-', \"Wrong answer\"\nassert solution('a-b+d-c') == '+ -d-', \"Wrong answer\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('knuth-morris-pratt') == '<any> <empty>'\n\"\"\"\nimport sys\nimport math\n\nstdin = sys.stdin.read()\n\ninput = stdin.split(\"\\n\")"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a+b-c') == '- +d-', \"didn't work\"\nassert solution('a-b+d-c') == '- +d-', \"didn't work\"\nassert solution('knuth-morris-pratt') == '<any> <empty>', \"didn't work\"\nassert solution('knuthmorrispratt') == '<any> <empty>', \"didn't work\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a+b-c') == '- +d-'\nassert solution('a-b+d-c') == '<any> <empty>'\nassert solution('knuth-morris-pratt') == '<any> <empty>'\nprint(\"Congratulations! All test cases passed :)\")\n'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"knuth-morris-pratt\") == \"<any>\"\nprint(solution(\"a+b-c\"))\n\"\"\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a+b-c') == '- +d-', f\"expected '- +d-', but was '{solution('a+b-c')}'\"\nassert solution('a-b+d-c') == '- +d-', f\"expected '- +d-', but was '{solution('a-b+d-c')}'\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('a+b-c') == '- +d-', 'The expected result was' +\\\n    str(solution('a+b-c'))\nassert solution('a-b+d-c') == '- +d-', 'The expected result was' +\\\n    str(solution('a-b+d-c'))\n\n'''\n\nimport collections\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''a+b-c''') == '- +d-', \"TEST ERROR: twop\"\nassert solution('''a-b+d-c''') == '- +d-', \"TEST ERROR: twop\"\nassert solution('''knuth-morris-pratt''') == '<any> <empty>', \"TEST ERROR: twop\"\nassert solution('''knuthmorrispratt''') == '<any> <empty>', \"TEST ERROR: twop\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '<any> <empty>'''\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 2') == '3'\nassert solution('10') == '7'\nassert solution('2 0') == '1'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n0\") == \"0\"\nassert solution(\"3 0\\n2 6 6\\n10\") == \"11\"\n\nfor _ in range(20):\n    print(solution(input()))"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 0') == '2'\nassert solution('3 1') == '3'\nassert solution('3 1') == '2'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1 1\\n0\\n7\\nt 0\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\n') == '0\\n1\\n3\\n2\\n3\\n5\\n3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 1\\n\"\n    \"0\\n\"\n    \"7\\nt 0\") == \"0\"\n\nassert solution(\n    \"3 0\\n\"\n    \"2 6 6\\n\"\n    \"10\\nt 1\\nt 2\\nt 3\\nt 4\\nt 5\\nt 6\\nt 7\\nt 8\\nt 9\\nt 10\") == \"11\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 0\") == \"1\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n\"\"\"\n) == \"11\"\n\nassert solution(\n\"\"\"\n4 1\n0\n2 6 6\n3\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n\"\"\"\n) == \"10\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 3:\n3\n1\n3\n2\n3\n5\n3\n\nSample Input 4:\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 4:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11'\n\nassert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 5:\n0\n1\n3\n2\n3\n5\n3\n\nSample Input 6:\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 6:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11'\n\nassert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 7:\n0\n1\n3\n2\n3\n5\n3\n\nSample Input 8:\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 8:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11'\n\nassert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 9:\n0\n1\n3\n2\n3\n5\n3\n\nSample Input 10:\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 10:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11'\n\nassert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 11:\n0\n1\n3\n2\n3\n5\n3\n\nSample Input 12:\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 12:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"2\"\nassert solution(sample_input_2) == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '2 4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 2') == '2'\nassert solution('5 6') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 8\") == \"2\"\nassert solution(\"5 6\") == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1''') == '2'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2\") == \"1\"\nassert solution(\"5 6\") == \"2 4 6\"\nassert solution(\"8 7 1\") == \"2 4 6\"\nassert solution(\"5 1\") == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 2 1\\n2 3 1\\n3 4 3\\n1 4 3\\n2 5 3\\n1 5 6\") == \"0\\n2 6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6''') == '1 4 5 6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 1') == '4'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '1\\n2\\n3\\n1\\n2\\n3'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n1 3\") == \"1\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\"\nassert solution(\"1\\n1\\n2\") == \"1\"\nassert solution(\"2\\n1\\n2\") == \"2\"\nassert solution(\"6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\""
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '1\\n2\\n3'\nassert solution('1 1') == '1\\n2\\n3'\nassert solution('1 1\\n1 2\\n1 3') == '1\\n2\\n3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4 5 6'\n\nassert solution('''\n1\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '1 2 3 4 5 6'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n''') == '1 2 3'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\") == \"1\\n2\\n3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 1\") == \"2\"\nassert solution(\"6\\n1 1 1 1 1 1\\n1 2 2 2 2\\n1 3 3 3 3\") == \"2\"\nassert solution(\"3\\n1 1\\n1 2\\n1 3\\n2 1\") == \"1\"\nassert solution(\"3\\n1 1\\n2 1\\n1 2\\n2 2\") == \"2\"\nassert solution(\"6\\n1 1 1 1 1 1\\n1 2 2 2 2\\n1 3 3 3 3\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12') == '4'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\nprint(solution(input()))\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == None\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '3'\nassert solution('3 3 1') == '1 2 3'\nassert solution('3 3 1') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '3'\nassert solution('''\n3 2 1\n1 2\n2 3\n2\n''') == ''\nassert solution('''\n3 2 1\n1 3\n2 3\n1\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 2\n2 3\n1\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 2 4') == '2 3'\nprint(solution(input()))\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\n\"\"\"\n\nfrom typing import List\nfrom collections import deque"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1\\n1 3\\n2 3\\n2\\n') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3\\n') == '1 2 3'\nassert solution('10\\n1 10\\n1 1\\n') == '1 1'\nassert solution('4\\n2 1\\n2 2\\n3\\n') == '1 2 3'\nassert solution('5\\n2 2\\n2 1\\n2 1\\n') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('3 2 2') == '2 3'\nassert solution('3 2 3') == '3'\nassert solution('2 3 2') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 1\n1 2\n2 3\n2''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n2''') == '2'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '3'\nprint('All test cases passed')\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2 1\n1 2\n2 3\n2''') == '1 2 3'\nprint(\"Congratulations, your submission is CORRECT!\")\n\nassert solution('''3 2 1\n1 3\n2 3\n3\nSample Output 3:\n2''') == '2'\nprint(\"Congratulations, your submission is CORRECT!\")\n\nassert solution('''5 2 1\n1 3\n2 3\n3 4\n4 5\n5\nSample Output 4:\n1 3 4 5''') == '1 3 4 5'\nprint(\"Congratulations, your submission is CORRECT!\")\n\nassert solution('''6 2 1\n1 3\n2 3\n3 4\n4 5\n5 6\n6\nSample Output 5:\n1 3 4 5''') == '1 3 4 5'\nprint(\"Congratulations, your submission is CORRECT!\")\n\nassert solution('''5 2 1\n1 3\n2 3\n3 4\n4 5\n6\nSample Output 6:\n1 3 4 5''') == '1 3 4 5'\nprint(\"Congratulations, your submission is CORRECT!\")"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 2 3\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39'\nassert solution('''1\n1 0 1 1 1''') == '4'\nassert solution('''2\n4 4 4 4 4''') == '9'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\nassert solution(\"5 1\\n1 0 1 1 1\") == \"4\""
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '9'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"5 3\") == \"39\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n2 4 2 3 4\n''') == '39'\nassert solution('''5 1\n1 0 1 1 1\n''') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '5'\nassert solution('5 1') == '4'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\nxxxxx\nx...x\n...x.\nxx.x''') == '2 2'\nassert solution('''4 5\nx.x.x\nx.x.x\nx.x.x\nx.x.x''') == '3 2'\nprint('You passed all the tests!')\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 1 2'\n'''"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\nxx.\nxxx\n...\nSample Output 2:\n1 1 2\n2 4 3\n''') == '''1 1 2\n2 4 3'''\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 6\") == \"1 1 2\"\nassert solution(\"3 3\") == \"1 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '1 1 2'\nassert solution('5 6') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\nxx.\nxxx\n...''') == '1 1 2'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Input 3:\n3 3\nxx.\nxxx\nxxx\nSample Output 3:\n1 1 3\n2 2 1\n''') == '1 1 4'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Input 4:\n3 3\nxx.\nxxx\nxxxx\nSample Output 4:\n1 2 3\n2 3 1\n''') == '2 4 4'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\nxx.\nxxx\n...\nSample Input 3:\n5 6\nxxxxx\nxxxxx\nxxxxx\nxxxxx\nxxxxx\nxxxxx\nSample Output 3:\n1 1 2\n2 4 3\n3 5 2\n4 6 1\n5 7 2\n''') == '''1 1 2\n2 4 3\n3 5 2\n4 6 1\n5 7 2\n'''"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3\"\n    \"x.x\"\n    \"xxx\"\n) == \"1 1 2\"\nassert solution(\n    \"4 6\"\n    \"x..x\"\n    \"xx.x\"\n    \"xxx\"\n) == \"1 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2 2 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 4'"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1') == '1'\nassert solution('3 1 2') == 'indistinguishable'\nassert solution('3 0 1') == '0'\nassert solution('3 2 0') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n\"\"\") == \"indistinguishable\"\nassert solution(\"\"\"\n3 0 0\n1 1 1\n0 0 0\n0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2 1\n1 1 1\n0 0 0\n0 0 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 1 0\n0 0 0\n0 1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 1 1\n1 1 1\n0 0 0\n0 1 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"indistinguishable\"\nassert solution(\"2 1 2\\n1 1 1\\n0 2 0\\n0 1 0\\n\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''3 1 2\n1 2 1\n0 2 0\n0 1 0''') == '0'\nassert solution(\n'''2 0 1\n1 1 1\n0 0 0''') == '1'\nassert solution(\n'''4 2 3\n2 1 1\n1 2 0\n0 1 0\n1 2 0''') == 'indistinguishable'\nassert solution(\n'''10 2 2\n1 5 4\n2 5 2\n5 5 5\n3 7 5\n6 7 2\n7 8 2\n8 7 3\n9 8 6\n10 8 9\n6 9 4\n5 9 4\n2 10 1\n1 10 1\n10 2 1\n2 10 1\n5 1 2\n3 9 2\n6 1 1\n3 6 3\n2 5 3\n5 2 3\n2 1 1\n3 3 2\n1 3 1\n3 1 2\n1 4 2\n2 1 3\n4 1 2\n4 3 2\n4 2 1\n4 1 3\n4 2 1\n3 5 2\n4 4 2\n2 3 3\n2 5 3\n2 3 4\n2 4 3\n4 1 1\n3 4 1\n2 2 1\n2 4 1\n4 3 2\n1 5 4\n1 1 1\n4 2 3\n3 2 3\n4 1 2\n4 3 2\n4 2 3\n4 1 3\n4 1 2\n4 2 2\n4 2 3\n4 1 2\n4 3 2\n4 1 1\n4 2 3\n4 1 1\n4 1 2\n4 3 3\n4 2 3\n4 1 3\n4 2 3\n4 1 1\n4 1 3\n4 1 2\n4 3 2\n4 1 1\n4 2 1\n4 1 2\n4 3 3\n4 2 1\n4 1 3\n4 2 1\n4 1 2\n4 2 3\n4 2 3\n4 1 2\n4 2 1\n4 1 2\n4 2 3\n4 2 1\n4 1 1\n4 1 2\n4 1 3\n4 2 2\n4 2 1\n4 1 2\n4 3 2\n4 1 2\n4 1 1\n4 2 3\n4 1 1\n4 2 1\n4 1 2\n4 1 3\n4 2 2\n4 2 2\n4 2 3\n4 2 1\n4 1 1\n4 1 3\n4 1 2\n4 2 2\n4 2 2\n4 2 3\n4 2 3\n4 2 3\n4 1 2\n4 1 3\n4 1 1\n4 1 1\n4 2 1\n4 1 3\n4 1 2\n4 1 2\n4 2 3\n4 1 2\n4 1 2\n4 2 1\n4 1 3\n4 1 1\n4 1 3\n4 1 2\n4 1 3\n4 1 1\n4 1 2\n4 1 3\n4 1 2\n4 1 1\n4 1 2\n4 1 3\n4 1 2\n4 1 3\n4 1 1\n4 1 3\n4 1 2\n4 1 3\n4 1 1\n4 1 1\n4 1 3\n4 1 2\n4 2 1\n4 1 1\n4 1 2\n4 1 3\n4 1 2\n4 2 1\n4 1 1\n4 1 2\n4 1 3\n4 2 1\n4 1 1\n4 1 2\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 2\n4 1 3\n4 1 1\n4 1 2\n4 1 1\n4 1 2\n4 1 3\n4 1 1\n4 2 1\n4 1 1\n4 1 2\n4 1 3\n4 2 1\n4 1 2\n4 1 1\n4 1 3\n4 1 2\n4 1 2\n4 1 3\n4 1 2\n4 1 1\n4 1 3\n4 1 1\n4 1 2\n4 1 1\n4 1 2\n4 1 3\n4 1 1\n4 1 1\n4 1 2\n4 1 3\n4 1 2\n4 1 1\n4 1 1\n4 2 3\n4 2 3\n4 2 2\n4 2 2\n4 2 2\n4 2 1\n4 2 1\n4 2 1\n4 2 3\n4 2 3\n4 2 3\n4 2 3\n4 1 3\n4 1 3\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 3\n4 1 1\n4 1 2\n4 1 3\n4 1 1\n4 1 3\n4 1 1\n4 1 3\n4 1 1\n4 1 3\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 2\n4 1 1\n4 1 3\n4 1 2\n4 1 3\n4 1 1\n4 1 3\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 2\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 3\n4 1 1\n4 1 1\n4 1 2\n4 1 3\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 2\n4 1 2\n4 1 1\n4 1 3\n4 1 1\n4 1 1\n4 1 2\n4 1 2\n4 1 2\n4 1 1\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 2\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 1\n4 1 2\n4 1 1\n4 1 1"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 1 2\n1 2 1\n0 2 0\n0 1 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n\"\"\") == \"indistinguishable\"\n\nassert solution(\"\"\"\n1 0 1\n1 1 1\n0 0 0\n0 1 0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 0 1\n0 2 1\n0 1 0\n0 1 0\n\"\"\") == \"0\""
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 1 1') == '0'\nassert solution('0 0 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"indistinguishable\"\nassert solution(\"2 0 1\") == \"0\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0110\n1001''') == '1111'\nassert solution('''0''') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0110\") == \"1111\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '-1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0') == '-1'\n\nR = list(map(int, stdin.split('\\n')[0]))\nC = list(map(int, stdin.split('\\n')[1]))"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0110\\n1001') == '1111\\n0111\\n1110\\n1111', 'Wrong solution!'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"-\"\nassert solution(\"0\") == \"-\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-', solution('1111')\nassert solution('1010101010') == '+0-0-0-0-0-', solution('1010101010')\nassert solution('1010101011') == '+0-0-0-0-1-', solution('1010101011')\nassert solution('10101010110') == '+0-0-0-0-1-0-', solution('10101010110')\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000\n+0000"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('123') == '+12+3-'\nassert solution('0') == '+0+0-'\nassert solution('-123') == '-12+3-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(1) == '+0-'\nassert solution(100) == '+0--'\nassert solution(1000000) == '+--0'\nassert solution(1000500) == '+--00-\nassert solution(11111111) == '+--0-0'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '+1'\nassert solution('1111') == '+0-0-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"+00\"\nassert solution(\"100\") == \"+0\"\nassert solution(\"-1\") == \"-01\"\nassert solution(\"-2147483648\") == \"-0\"\nassert solution(\"-2147483649\") == \"-1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n12\n''') == '+00+-\n\nassert solution('''\n-1\n''') == '-1-0-\n'''\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == \"+0000\", \"Wrong answer\"\nassert solution(\"1111\") == \"+000-\", \"Wrong answer\"\nassert solution(\"13\") == \"+00-1\", \"Wrong answer\"\n\nassert solution(\"00\") == \"+-00\", \"Wrong answer\"\nassert solution(\"10\") == \"+-01\", \"Wrong answer\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '2'\nassert solution('''\n3 4\n3 2\n4 1\n1 2\n''') == '2'\nassert solution('''\n2 2\n2 1\n''') == '1'\nassert solution('''\n8 7 3\n1 2\n1 5\n1 3\n2 4\n2 6\n2 7\n3 4\n3 5\n3 6\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n''') == '7'"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"9\""
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '2'\nassert solution('''\n7 8 1 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n7 8 1 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '7'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n\") == \"9\"\nprint(solution(input))\nassert solution(\n    \"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\"\n) == \"9\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\n\nassert solution('''\n10 10 5 3 2\n1 2\n2 4\n2 3\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n3 4\n1 4\n4 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n''') == '15'\n\nassert solution('''\n10 10 5 3 2\n1 2\n2 4\n2 3\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n3 4\n1 4\n4 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n''') == '18'\n\nassert solution('''\n10 10 5 3 2\n1 2\n2 4\n2 3\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n3 4\n1 4\n4 5\n3 6\n3 7\n4 8\n4 9\n5 10\n6 7\n6 8\n7 9\n7 10\n8 9\n8 10\n9 10\n''') == '16'\n\nassert solution('''\n100 100 100 100 1 1 1 1\n100 100 100 100 1 1 1 1\n100 100 100 100 1 1 1 1\n100 100 100 100 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"7 8 3 2\\n\" +\n    \"1 2\\n\" +\n    \"7 3 4\\n\" +\n    \"5 6\\n\" +\n    \"1 3 2\\n\" +\n    \"1 4 1\\n\" +\n    \"1 5 1\\n\" +\n    \"1 6 6\\n\" +\n    \"2 3 9\\n\" +\n    \"2 4 2\\n\" +\n    \"2 6 4\\n\" +\n    \"7 6 5\\n\"\n) == \"9\"\nassert solution(\n    \"5 1 1 1\\n\" +\n    \"5 2\\n\" +\n    \"1\\n\" +\n    \"1\\n\" +\n    \"1 2 1\\n\" +\n    \"1 4 1\\n\" +\n    \"1 6 1\\n\" +\n    \"1 8 1\\n\" +\n    \"1 9 1\\n\" +\n    \"1 10 1\\n\" +\n    \"1 11 1\\n\" +\n    \"1 12 1\\n\" +\n    \"1 13 1\\n\" +\n    \"1 14 1\\n\" +\n    \"1 15 1\\n\" +\n    \"1 16 1\\n\" +\n    \"1 17 1\\n\" +\n    \"1 18 1\\n\" +\n    \"1 19 1\\n\" +\n    \"1 20 1\\n\" +\n    \"1 21 1\\n\" +\n    \"1 22 1\\n\" +\n    \"1 23 1\\n\" +\n    \"1 24 1\\n\" +\n    \"1 25 1\\n\" +\n    \"1 26 1\\n\" +\n    \"1 27 1\\n\" +\n    \"1 28 1\\n\" +\n    \"1 29 1\\n\" +\n    \"1 30 1\\n\" +\n    \"1 31 1\\n\" +\n    \"1 32 1\\n\" +\n    \"1 33 1\\n\" +\n    \"1 34 1\\n\" +\n    \"1 35 1\\n\" +\n    \"1 36 1\\n\" +\n    \"1 37 1\\n\" +\n    \"1 38 1\\n\" +\n    \"1 39 1\\n\" +\n    \"1 40 1\\n\" +\n    \"1 41 1\\n\" +\n    \"1 42 1\\n\" +\n    \"1 43 1\\n\" +\n    \"1 44 1\\n\" +\n    \"1 45 1\\n\" +\n    \"1 46 1\\n\" +\n    \"1 47 1\\n\" +\n    \"1 48 1\\n\" +\n    \"1 49 1\\n\" +\n    \"1 50 1\\n\" +\n    \"1 51 1\\n\" +\n    \"1 52 1\\n\" +\n    \"1 53 1\\n\" +\n    \"1 54 1\\n\" +\n    \"1 55 1\\n\" +\n    \"1 56 1\\n\" +\n    \"1 57 1\\n\" +\n    \"1 58 1\\n\" +\n    \"1 59 1\\n\" +\n    \"1 60 1\\n\" +\n    \"1 61 1\\n\" +\n    \"1 62 1\\n\" +\n    \"1 63 1\\n\" +\n    \"1 64 1\\n\" +\n    \"1 65 1\\n\" +\n    \"1 66 1\\n\" +\n    \"1 67 1\\n\" +\n    \"1 68 1\\n\" +\n    \"1 69 1\\n\" +\n    \"1 70 1\\n\" +\n    \"1 71 1\\n\" +\n    \"1 72 1\\n\" +\n    \"1 73 1\\n\" +\n    \"1 74 1\\n\" +\n    \"1 75 1\\n\" +\n    \"1 76 1\\n\" +\n    \"1 77 1\\n\" +\n    \"1 78 1\\n\" +\n    \"1 79 1\\n\" +\n    \"1 80 1\\n\" +\n    \"1 81 1\\n\" +\n    \"1 82 1\\n\" +\n    \"1 83 1\\n\" +\n    \"1 84 1\\n\" +\n    \"1 85 1\\n\" +\n    \"1 86 1\\n\" +\n    \"1 87 1\\n\" +\n    \"1 88 1\\n\" +\n    \"1 89 1\\n\" +\n    \"1 90 1\\n\" +\n    \"1 91 1\\n\" +\n    \"1 92 1\\n\" +\n    \"1 93 1\\n\" +\n    \"1 94 1\\n\" +\n    \"1 95 1\\n\" +\n    \"1 96 1\\n\" +\n    \"1 97 1\\n\" +\n    \"1 98 1\\n\" +\n    \"1 99 1\\n\" +\n    \"1 100 1\\n\" +\n    \"1 101 1\\n\" +\n    \"1 102 1\\n\" +\n    \"1 103 1\\n\" +\n    \"1 104 1\\n\" +\n    \"1 105 1\\n\" +\n    \"1 106 1\\n\" +\n    \"1 107 1\\n\" +\n    \"1 108 1\\n\" +\n    \"1 109 1\\n\" +\n    \"1 110 1\\n\" +\n    \"1 111 1\\n\" +\n    \"1 112 1\\n\" +\n    \"1 113 1\\n\" +\n    \"1 114 1\\n\" +\n    \"1 115 1\\n\" +\n    \"1 116 1\\n\" +\n    \"1 117 1\\n\" +\n    \"1 118 1\\n\" +\n    \"1 119 1\\n\" +\n    \"1 120 1\\n\" +\n    \"1 121 1\\n\" +\n    \"1 122"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 8 3 2\") == \"9\"\nassert solution(\"2 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n3 4\n1 1 2 1\n2 2 2 2\n2 3 1 2\n''') == '2'\nassert solution('''\n5 3\n5 7\n7 4\n7 8\n5 5\n5 6\n''') == '8'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"7 8 3 2\\n\"\n    \"1 2\\n\"\n    \"7 3 4\\n\"\n    \"5 6\\n\"\n    \"1 3 2\\n\"\n    \"1 4 1\\n\"\n    \"1 5 1\\n\"\n    \"1 6 6\\n\"\n    \"2 3 9\\n\"\n    \"2 4 2\\n\"\n    \"2 6 4\\n\"\n    \"7 6 5\\n\"\n    \"Sample Output 2: 2\") == \"9\"\n\nstdin = \"\"\"\n12 5 7\n1 2\n2 4\n5 6\n8 8\n3 8\n4 8\n6 7\n8 7\n9 8\n1 5\n1 7\n6 5\n6 7\n8 5\n8 6\n7 5\n7 6\n9 6\n4 5\n4 7\n\"\"\"\nassert solution(stdin) == \"15\""
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3 2 3 3\n3 2\n3 1 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 7 3 2\n1 2\n3 4\n1 5\n1 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n\"\"\") == \"13\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 1\n1 1 R\n01\n''') == '2'\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'\nassert solution('3 3 1 R') == '2'\nassert solution('3 4 2 R') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n\"\"\") == \"2\"\nassert solution(r\"\"\"\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R''') == \"2\"\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 3:\n7\n''') == \"7\"\nassert solution('''3 4 2\n2 2\n1 1 R\n00\n00\n00\nSample Output 4:\n-1\n''') == \"-1\"\nassert solution('''6 5 4\n3 2\n3 2\n4 2\n3 2\n3 2\n4 2\nSample Output 5:\n0\n''') == \"0\"\nassert solution('''6 5 4\n3 2\n3 2\n4 2\n3 2\n3 2\n4 2\nSample Output 6:\n2\n''') == \"2\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2'"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == \"2\", \"Sample test 1 did not pass\"\nassert solution(sample_input_2) == \"7\", \"Sample test 2 did not pass\"\nassert solution(input) == \"15\", \"Real solution did not pass\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == \"2\"\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301''') == \"7\"\nassert solution('''5 7 5\n3 3\n3 3 U\n3 2 R\n2 2\n2 3 R\n1 2 R\n3 2 R\n3 3 R\n3 2 L\n1 2 L\n1 3 L\n1 3 R\n1 2 R\n3 3 L\n3 2 L\n3 2 R\n1 2 R\n1 3 R\n2 3 L\n2 3 R\n3 3 R\n3 3 L\n1 2 R\n2 2 L\n2 2 R\n1 2 R\n2 2 R\n2 2 L\n2 2 R\n1 2 R\n1 3 R\n2 3 R\n1 3 R\n2 3 L\n2 3 R\n3 3 R\n1 3 R\n2 3 R\n2 3 L\n2 3 R\n3 3 L\n1 3 R\n2 3 R\n1 3 R\n1 3 R\n2 3 R\n2 3 L\n2 3 R\n3 3 R\n1 3 R\n3 3 R\n2 3 R\n2 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n2 3 R\n2 3 R\n1 3 R\n2 3 R\n1 3 R\n2 3 R\n1 3 R\n2 3 R\n2 3 L\n2 3 R\n3 3 L\n3 3 R\n3 3 R\n3 3 L\n1 3 L\n1 3 R\n1 3 R\n1 3 R\n2 3 R\n2 3 R\n3 3 R\n2 3 L\n2 3 R\n2 3 R\n2 3 R\n2 3 R\n3 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n2 3 R\n1 3 R\n1 3 R\n2 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n2 3 R\n2 3 R\n2 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R\n1 3 R"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\\n') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\") == \"2\"\n\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\") == \"7\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\nprint(\"YOUR CODE IS CORRECT!\")\nprint(\"If you see this text, it means your code is correct.\")\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\nassert solution('2 2') == '2'\nassert solution('3 2') == '1'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1 2 3') == '2'\nassert solution('5 10 2 2 7 1 7 2 5') == '4'\nassert solution('20 30 2 3 10 2 7 4 5 1 1 9 5 7 2 9 9 6 8 7 5 7 7 4 8 6 2 2 4 9 5 2 5 7') == '46'\nassert solution('4 5 6 7 8 9 1 3 2') == '10'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 2 1 2 3\nSample Input 1:\n8\n1 2 4 1 1 2 5 1\nSample Output 1:\n4\n''') == '2'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 2 1 2 3\") == \"2\"\nassert solution(\"8\\n1 2 4 1 1 2 5 1\") == \"4\"\nassert solution(\"13\\n1 1 1 1 1 1 1 1 1\") == \"7\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == '0', \"invalid test\"\nassert solution('5') == '2', \"invalid test\"\nassert solution('8') == '4', \"invalid test\"\nassert solution('10') == '1', \"invalid test\""
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n') == '1'\nassert solution('2\\n2\\n2\\n') == '2'\nassert solution('3\\n2\\n1\\n') == '1'\nassert solution('4\\n2\\n3\\n') == '1'\nassert solution('5\\n2\\n3\\n') == '1'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\\n1 4\\n\") == \"1\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3,1\"\nassert solution(\"4\\nD 3 1\\nP 2\\nD 5 6\\nP 4\\n\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3,1\"\nassert solution(\"3\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\n\") == \"3,1\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''D 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == \"NE\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"3\\n1\\n\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"1\\n3\\n\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nP 4\\n\") == \"NE\\n\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 4\\n\") == \"1\\n\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 4\\nP 4\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"NE\"\nassert solution(\"\"\"6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == '1'\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '3'\nassert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n') == '3'"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3') == '3\\n1\\nNE'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1\\n1\\n1\\n1\\n1\\n1'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '1\\n1\\n1\\n1\\n1\\n1'\nassert solution('5\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '2\\n1\\n1\\n1\\n1\\n1'\nassert solution('6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4') == '2\\n1\\n1\\n1\\n1\\n1'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 5 6') == '5'\nassert solution('2 2 1 10') == '2'\nassert solution('2 1 5 1') == '4'\nassert solution('3 3 5 6') == '5'\nassert solution('3 3 5 4') == '4'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == \"2\"\nassert solution('''\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == \"5\"\nassert solution('''\n3 2 5 6\n1 1\n1 1 6\n1 2 2\n''') == \"6\"\nassert solution('''\n3 4 5 6\n1 1\n1 2 2\n1 2 4\n1 3 3\n''') == \"10\"\nassert solution('''\n3 4 6 9\n1 1\n1 2 2\n1 2 4\n1 2 3\n''') == \"9\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2''') == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == \"2\""
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('1 2') == '1'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1 10\\n0 0\\n1 4\\n3 2\\n') == '2'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''3 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n3 2 1 10\n0 0\n1 4\n3 2\n    \"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n3 2 1 10\n1 1\n1 1 6\n1 2 2\n    \"\"\"\n) == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 10\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '5'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 2 3\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('5 5 3 3\\n1 1\\n1 1 6\\n1 2 2') == '5'\nassert solution('6 5 1 10\\n1 1\\n1 4\\n1 2 2\\n1 3 3\\n1 5 5') == '6'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n-1.4 0.0 1.4\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n\"\"\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0.0 1.4\\n-1.0 0.0 -1.4\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\nassert solution('12\\n-0.367433 -0.749157 -0.165965\\n0.596985 -0.596985 -0.551611\\n0.315428 -0.315428 -0.305628\\n-0.228956 -0.228956 -0.228956') == '3.9999999999'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000\\n'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2.0000000000'\nassert solution('5') == '2.0000000000'\nassert solution('3') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'\nprint(solution(input()))\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 9 5\n1 100 10\n''') == '1\\n5\\n'''\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 9 5\n1 100 10''') == '1 9'\nassert solution('''1 9 9\n1 100 10''') == '1 9'\nassert solution('''1 9 5\n100 1000 10''') == '9'\nassert solution('''1 9 5\n100 1000 100''') == '100'\nassert solution('''1 9 5\n100 1000 100''') == '1'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 9 5\\n1 100 10\"\n) == \"9\\n19\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"9\\n19\"\n\"\"\""
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 9 5\n''') == '1'\nassert solution('''\n1 100 10\n''') == '9'\n''')\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 5') == '4 4 2 4 4 1 4'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"7\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n1\n1\nSample Input 3:\n5 2\n1 2 1 2 3\nSample Output 3:\n3\n2 2 1\nSample Input 4:\n2 2\n1 2\nSample Output 4:\n1\n''') == '2'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1\n1\n''') == '2'\n\nassert solution('''\n4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1\n1\n1\n''') == '1'\nassert solution('''4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7'\n\nprint(\"All Tests Passed for Problem 'Inspection'\")"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 10, 3, 2]) == \"4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\nassert solution('12 10 3 2') == '12'\n\"\"\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"10 10 5 0\") == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 10, 3, 2]) == \"4\"\nassert solution([10, 10, 5, 0]) == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 10 3 2''') == '4'\nassert solution('''10 10 5 0''') == '10'\nprint(solution('''3 10 4 2'''))"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1 20''') == '10'\nassert solution('''6 100 9294''') == '111'\n\nimport math"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '10'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\nassert solution('3 4 10') == '6'\n\"\"\"\n\nX, A, B = [int(x) for x in stdin.split()]\nallowed_digits = set([int(x) for x in list(stdin.split())[1]])\n\nallowed_digits = list(allowed_digits)\nallowed_digits.sort()\n\nanswer = 0\ncurrent = []\n\nfor i in range(A,B+1):\n    current.append(i)\n    if len(current)!= len(set(current)):\n        current.pop()\n        continue\n    if len(set(current))!= X:\n        current.pop()\n        continue\n    if len(current) == X:\n        answer += 1\n        current.pop()\n\nprint(answer)"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 100 9294\n23689''') == '111'\nassert solution('''2 1 20\n0123456789''') == '10'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1 20\n0123456789\n''') == '10'\nassert solution('''\n6 100 9294\n23689\n''') == '111'\nassert solution('''\n4 7 988\n1\n''') == '8'\nassert solution('''\n4 7 988\n4\n''') == '0'\n'''\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\nassert solution('0') == '0.000000'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.333333'\nassert solution('1 2') == '0.333333'\nassert solution('1 3') == '0.333333'\nassert solution('2 1') == '0.333333'\nassert solution('2 2') == '0.66666666'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 2.666667'\nassert solution('''5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '1.50000 2.666667'\nassert solution('5 2') == '1.50000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666667'\nassert solution('''5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\\n') == '1.500000 2.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.50000 2.50000'\nprint(solution('''\n4 4\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n'''))\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n101010\n111001\n101001\n''') == '3'\nassert solution('''\n4\n10010\n01010\n10101\n01001\n''') == '3'\nassert solution('''\n5\n10010\n01010\n10101\n01001\n101001\n''') == '4'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 6\n101010\n111001\n101001\n''') == '3'\nassert solution('''\n4 5\n10010\n01010\n10101\n01001\n''') == '3'\n\n'''\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3 4\n    101010\n    111001\n    101001\n''') == '3'\nassert solution('''\n    4 5\n    10010\n    01010\n    10101\n    01001\n''') == '3'\nassert solution('''\n    100 100\n    0101\n    1011\n    0.1\n''') == '3'\nassert solution('''\n    5 5\n    0001\n    0001\n    0000\n    0000\n''') == '1'\nassert solution('''\n    3 5\n    100\n    011\n    101\n    001\n''') == '1'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"3\", \"Wrong answer\"\nassert solution(\"4 5\") == \"3\", \"Wrong answer\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n0101\n0110\n0000\n10\n1000\nSample Input 3:\n20\n
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 6\n101010\n111001\n101001''') == '3'\nprint('solution passed!')"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\n'''"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 1\\n1 1\\n1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"2 -1\\n3 1\"\nassert solution(\"4\") == \"3 5\\n3 -1\"\n\"\"\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '-3 -1'\nassert solution('5') == '3 4'\nassert solution('6') == '3 5'\nassert solution('7') == '3 6'\nassert solution('8') == '3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4\\n3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\nassert solution('3 5') == '3 4'\nassert solution('2 4') == '3 -1'\nassert solution('6 -1') == '3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '3 4'\nassert solution('10\\n-1 -1\\n2 1\\n4 2\\n3 3\\n2 2\\n1 -1\\n4 2\\n-1 -1\\n-1 4\\n-1 3\\n') == '-3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"-3 -1\"\nassert solution(\"4\") == \"3 4\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '-3 -1'\nassert solution('5') == '3 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"3 1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\""
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 1 2 4 4') == '1 5.0000000000'"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 20 2 0 0\n0 0\n2 0\n1 1.5\n1 0\n1 0''') == '1 12.715255'\nassert solution('''1 0\n1 0\n1 0''') == '1 0'\nassert solution('''2 0\n2 0\n2 0''') == '2 0'\nassert solution('''4 0\n4 0\n4 0''') == '4 0'\nassert solution('''3 0\n3 0\n3 0''') == '3 0'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n\n'''"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 12.715255\""
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6 5 45 20\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\") == \"1 12.715255\"\n\nassert solution(\"5 6 2 45 0.25\") == \"1 22.96712\""
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 12.715255\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\nSample Output 3:\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n1 2 5\n1 3 2 3\nSample Output 4:\n4\n\"\"\") == \"4\""
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1''') == '8'\n\nassert solution('''6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1''') == '1'\n\nassert solution('''4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '8'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '8', \"Should return 8\"\nassert solution('4') == '1', \"Should return 1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == \"8\"\nassert solution('4') == \"1\"\nassert solution('0') == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == '1', \"Should return the number of ways to place guards on a single line.\"\nassert solution(\"4\\n5 1 7 1\\n1 1 5 1\\n4 0 4 4\\n7 0 3 4\\n\") == '1', \"Should return the number of ways to place guards on a single line.\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\"\"\") == \"8\"\n\nassert solution(\"\"\"4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\"\"\") == \"1\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'impossible'\nassert solution('12') == 'impossible'\nassert solution('20') == 'impossible'\nassert solution('20') == 'impossible'\nassert solution('20') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('6') == 'impossible'\nassert solution('7') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'impossible'\nassert solution('10\\n') == '4 3'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nSample Input 2:\n6\nSample Output 2:\nimpossible\n''') == 'impossible', 'impossible'\n\nassert solution('''\n1\nSample Output 1:\nimpossible\n''') == 'impossible', 'impossible'\n\nassert solution('''\n15\nSample Output 1:\n4 3\n''') == '4 3', 'impossible'\n\nassert solution('''\n25\nSample Output 1:\n7 3\n''') == '7 3', 'impossible'\n\nassert solution('''\n10\nSample Output 2:\n5 2\n''') == '5 2', 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"1\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"1234\") == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().rstrip()\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n3\n10\n20\n30\n''') == '16'\nassert solution('''\n1\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n''') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"26\"\nassert solution(\"6\") == \"42\"\nassert solution(\"8\") == \"33\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3\n4\n1\n4\n''') == '16'\nassert solution('''\n5\n2\n4\n1\n4\n''') == '110'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1\n3\nSample Output 3:\n16\n''') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n4\\n') == '16'\nassert solution('2\\n1\\n2\\n') == '108'\nassert solution('4\\n2\\n4\\n') == '100'\nassert solution('4\\n2\\n4\\n') == '100'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '18'\nassert solution('4') == '12'\nassert solution('10') == '65'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '16'\nassert solution('2') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n4\\n3\\n') == '16'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n4\\n') == '16', solution('1\\n3\\n4\\n')\nassert solution('4\\n2\\n4\\n') == '109', solution('4\\n2\\n4\\n')\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Input 3:\n2 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Output 3:\n5\n1 2 2\n2 4 1\n3 1 0\n2 4 1\n3 1 0\n''') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\nprint('Tests passed')\n\nstdin = '''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n'''\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n\") == \"5\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('5 3') == '1 3 1'\nassert solution('4 3') == '5 3 2'\nassert solution('5 3') == '1 3 1'\nprint('all tests passed')\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\") == \"3\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\""
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('4 3') == '5'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\") == \"1 2\"\nassert solution(\"2 1\\n20 3\\n0 1 1\") == \"impossible\"\nprint(solution(input))"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"2 1\") == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == 'impossible'\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('6 7') == '1 2 3 4 5'\nassert solution('20 3') == '1 2 3 4 5'\nassert solution('10 1 0') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"1 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1''') == '1 2'\nassert solution('''2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 3:\nimpossible''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('6 7') == '1 2 3'\nassert solution('2 1 1') == '1 3'\nassert solution('2 2 1') == '2 1'\nassert solution('2 1 2') == 'impossible'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('2 1') == 'impossible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\n'''\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('10\\n') == '1\\n2\\n'\nassert solution('2020\\n') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('Congratulations, have solved it!')\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1 1'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1 2 1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2 3 2\"\nassert solution(\"7\") == \"3 1 1 4 4 1 4\"\nassert solution(\"1000000\") == \"1000000 1 1\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('10') == '2 5'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('5') == '5 4 3 2 1'\nassert solution('2020') == '2020 1'\nprint('YOUR CODE TAKES', stdin_len_str(stdin), 'CHARS')\nprint('YOUR CODE PRINTS', stdin_str(stdin), 'TO THE CONSOLE')\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '1 2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == \"impossible\"\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == \"unique\"\nassert solution('''\n1\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n1\n0\n1\n''') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"3\") == \"unique\""
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\") == \"impossible\"\nassert solution(\"3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\") == \"unique\""
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\nSample Output 3:\nunique\n''') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"ambiguous\"\nassert solution(\"3\") == \"unique\"\nassert solution(\"1 2\") == \"ambiguous\"\nassert solution(\"1 2 3\") == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'impossible'\n\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'unique'\n\nassert solution('1\\n2\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\\n3\\nchocolate') == 'impossible'\nassert solution('4\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n3\\nchocolate') == 'unique'\nassert solution('5\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n3\\nchocolate') == 'ambiguous'\nassert solution('10\\n1\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n3\\nchocolate') == 'impossible'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 10\") == \"1\"\n\"\"\"\n\nimport itertools\n\nN, K, M = map(int, input().split())\n\nfact = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n\nfor i in range(len(fact)):\n    if fact[i] > K:\n        fact.pop(i)\n        break\n\na = 0\nfor i in fact:\n    a += i * int(pow(N, i - 1)) * int(pow(K, i - 1))\n\nprint(a % 1000000)\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 10') == '1'\nassert solution('1 3 10') == '1'\nassert solution('0 0 10') == '10'\nassert solution('1 1 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 10') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 0 10\n''') == '0'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"....................................................\") == \"3 zoom out\"\nassert solution(\"....................................................\") == \"3 pan\"\n\"\"\"\nfrom typing import List\n\nfrom utils import even_odd_in_range"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n........XXX....XXX....................X.....................\\n.........XXX...XX...........................................\\n............................................................\\n............XX..............................................\\n...........XXX..............................................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '3 zoom out'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n........XXX....XXX....................X.....................\\n.........XXX...XX...........................................\\n............................................................\\n............XX..............................................\\n...........XXX..............................................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '1 pan'\nassert solution('............................................................\\n............................................................\\n...............................................XX...........\\n.....................................XXX......XXXX..........\\n....................................XXXX........X...........\\n........XXX....XXX....................X.....................\\n.........XXX...XX...........................................\\n............................................................\\n............XX..............................................\\n...........XXX..............................................\\n............................................................\\n............................................XX..............\\n...........................................XXXX.............\\n.............................................XX.............\\n............................................................') == '3 zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('....XXXX....') == \"1 pan\"\nassert solution('......XX......') == \"1 pan\"\nassert solution('......XX....X') == \"1 pan\"\nassert solution('...XX......X') == \"1 pan\"\nassert solution('......XXXX..') == \"1 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\".......................\") == \"pan\"\nassert solution(\"....XXXX....................................................\") == \"pan\"\nassert solution(\"....XXXX....................................................\") == \"pan\"\nassert solution(\"....XXXX.......................................XXX..............\") == \"pan\"\nassert solution(\"....XXXX.............................XXX......XXXX..............\") == \"pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Sample Input 1:') == \"1 pan\"\nassert solution('Sample Input 2:') == \"3 zoom out\"\nassert solution('Sample Input 3:') == \"8 pan\"\nassert solution('Sample Input 4:') == \"8 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n......................................................"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"Sample Input 1: \\n\") == \"1 pan\"\nassert solution(\"Sample Input 2: \\n\") == \"3 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0 zoom\"\nassert solution(\"\\n\") == \"0 pan\"\nassert solution(\"\\n\\n\") == \"3 pan\"\nassert solution(\"\\n\\n\\n\") == \"6 pan\"\nassert solution(\"\\n\\n\\n\\n\") == \"0 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Input 3:\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Output 3:\n3 zoom out\n\"\"\") == \"3 zoom out\"\n\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Input 4:\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n........XXX....XXX....................X.....................\n.........XXX...XX...........................................\n............................................................\n............XX..............................................\n...........XXX..............................................\n............................................................\n............................................XX..............\n...........................................XXXX.............\n.............................................XX.............\n............................................................\nSample Output 4:\n2 rotate\n\"\"\") == \"2 rotate\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 20\") == \"apples are great!  \"\nassert solution(\"7 7\") == \"+++++++\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8 20\n oranges are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!\\nfresh apples!\\n'\n\nassert solution('''\n7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') == '''+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n+ oranges are      +\n+ way better!      +\n+ #oranges>"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 20') == 'apples are great!\\n'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 20\n apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == \"apples are great!\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\ncheck out our\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nfresh apples!\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 20\") == \"\"\"\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\ncheck out our      \nfresh apples!      \n\"\"\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 20\\n apples are great!\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == 'apples are great! check out our fresh apples!'\nassert solution('7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == 'check out our fresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 20\napples are great!\n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!\\ncheck out our\\nfresh apples!'\nassert solution('''7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') =='  \\n   '\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10 20\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"8 20\n apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n\"\"\") == \"\"\"apples are great! \n                    \n                    \n                    \n                    \n                    \ncheck out our fresh apples! \n\"\"\", \"Error in sample\"\n\nassert solution(\"\"\"7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n\"\"\") == \"\"\"\n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       \n       "
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 20\n apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!\\ncheck out our fresh apples!'\nassert solution('''\n7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') ==' '\n\n'''\n(Optional) Task 3:\n\nDelete the given string and replace it with a message \"Stripped this string\".\n\nAll code in this task should be executable without importing any additional Python packages.\n'''\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('HH') == \"2.0\"\nassert solution('H?') == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"TT\") == \"1\"\nassert solution(\"TTTT\") == \"1.5\"\nassert solution(\"TTHHT\") == \"1.8\"\nassert solution(\"HTT\") == \"1\"\nassert solution(\"HTTHH\") == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H?\") == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nH?\n''') == '1.5'\n\nassert solution('''\nH?H?H?\n''') == '2.0'\n\nassert solution('''\nHT?H?H?\n''') == '2.0'\n\nassert solution('''\nT?\n''') == '1.5'\n\nassert solution('''\nT?T\n''') == '2.0'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n'''\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''THT\n    HHT\n    TTH''') == '2.0', \"First\"\nassert solution('''HHT\n    TTH\n    HTH''') == '1.5', \"Second\"\nassert solution('''THT\n    HTT\n    ?TT''') == '2.0', \"Third\"\nassert solution('''HHTH\n    HTTH\n    TTHH''') == '1.5', \"Fourth\"\nassert solution('''THTH\n    THTH\n    THTH''') == '0.0', \"Fifth\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'\nassert solution('''\n8\n0111\n0111\n0111\n0111\n0111\n0111\n0111\n''') == '4'\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '1'\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"1\"\nassert solution(\"5\\n01\\n11\\n01\\n11\") == \"3\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n0101\n0101\n0101\n0101\n''') == '1'\nassert solution('''4\n1111\n1111\n1111\n1111\n''') == '6'\nprint('Check complete')"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n11\n11\n11''') == '0'\nassert solution('''3\n00\n11\n00''') == '3'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1111\n1111\n1111\n1111''') == '1'\n\nassert solution('''4\n1111\n1111\n1111\n1111''') == '6'\n\nassert solution('''4\n0111\n0111\n0111\n0111''') == '7'\n\nassert solution('''4\n0111\n0111\n0111\n1111''') == '7'\n\nassert solution('''4\n1111\n1111\n1111\n1111''') == '2'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('7') == '2'\nassert solution('11') == '2'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution('''\n0011\n0001\n0001\n0111\n1111\n0111\n0000\n1111\n0111\n0001\n0011\n0111\n1101\n0001\n0000\n0011\n0111\n0001\n0001\n1111\n1110\n''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1110\n''') == \"1\"\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == \"6\"\nassert solution('''\n5\n1111\n1111\n1111\n1111\n''') == \"9\"\nassert solution('''\n2\n1111\n1111\n''') == \"1\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('2') == '2'\nassert solution('1\\n0') == '1'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''3\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\nassert solution('''2\nh 1 4 1\nv 2 4 2\n''') == '0'\nassert solution('''5\nh 1 4 1\nh 5 4 2\nv 1 4 1\nv 5 4 3\n''') == '2'\nassert solution('''7\nh 1 4 1\nh 5 4 2\nv 1 4 1\nv 5 4 3\nh 10 1 2\nh 11 4 3\nv 1 4 1\nv 5 4 3\n''') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3\n    h 1 4 1\n    v 2 4 2\n    h 10 2 2\n    v 11 2 3\n    ''') == '2'\n\nassert solution('''\n    2\n    h 1 10 1\n    v 5 10 3\n    ''') == '4'\n\nassert solution('''\n    2\n    h 1 10 1\n    v 5 10 3\n    ''') == '0'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\\n') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"2\"\nassert solution(\"4\\nh 1 4 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '2'\nassert solution('4 4 1') == '4'\nassert solution('4 4 4 1') == '4'\nassert solution('4 4 4 4 1') == '4'\nassert solution('4 4 4 4 4 1') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"h 1 4 1\") == \"0\"\nassert solution(\"v 2 4 2\") == \"1\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nh 8 10 2\nv 7 10 3\nh 11 10 1\nv 7 10 3\nh 7 10 1\nh 11 10 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nh 8 10 2\nv 7 10 3\nh 11 10 1\nv 7 10 3\nh 7 10 1\nh 11 10 3\n\"\"\") == \"8\"\nassert solution(\"\"\"\n10\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nh 8 10 2\nv 7 10 3\nh 11 10 1\nv 7 10 3\nh 7 10 1\nh 11 10 3\n\"\"\") == \"10\"\nassert solution(\"\"\"\n5\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nh 8 10 2\nv 7 10 3\nh 11 10 1\nv 7 10 3\nh 7 10 1\nh 11 10 3\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('2 2') == '4'\nassert solution('2 2 2') == '6'\nassert solution('2 3') == '3'\nassert solution('2 3 4') == '6'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '4'\n\nassert solution('''\n2 5\n0 0 0 0 0\n4 5 0 0 0\n0 0 0 0 0\n1 2 3 4 5\n''') == '2'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n1 2 3\n1 2 3\n3 5 4 0\n3 0 4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n0 2 3 4 1\n3 4 5 1 2\n5 6 4 1 0\n3 5 4 1 0\n4 6 5 1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\"\n) == \"2\"\nassert solution(\n    \"3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\"\n) == \"4\""
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '4'\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n'''\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 3 3 4 2') == '2'\nassert solution('8\\n1 2 1 3 1 3 1 2') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 3 4\n''') == '3', 'First'\nassert solution('''\n8\n1 2 1 3 1 3 1 2\n''') == '4', 'Second'\nassert solution('''\n5\n1 2 3 3 4\n''') == '3', 'Third'\n'''"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 2 3 3 4 2\n''') == '2'\nassert solution('''\n8\n1 2 1 3 1 3 1 2\n''') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('3\\n') == '1'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 3 3 4 2\n''') == '2'\nassert solution('''\n8\n1 2 1 3 1 3 1 2\n''') == '4'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6\\n1 2 3 3 4 2\"\n) == \"2\"\nassert solution(\n    \"8\\n1 2 1 3 1 3 1 2\"\n) == \"4\"\nprint('Yay, that was a long one. You did it!')\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\n\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '2'\n\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4\n\nassert solution('''\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == '0\n\nassert solution('''\n3 3 3\n1 1 1\n2 2 2\n1 2 1\n''') == '2\n\nassert solution('''\n4 4 4\n1 1 1\n2 2 2\n1 2 1\n1 3 3\n''') == '2\n\nassert solution('''\n5 5 5\n1 1 1\n2 2 2\n1 2 1\n1 3 3\n1 4 4\n''') == '2"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == '4\\n2'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == 'impossible'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == '1'\nassert solution('5 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"impossible\"\nassert solution([4, 2, 1, 1, 1, 0, 0, 0, 2]) == \"1\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples[0]) == '1'\nassert solution(samples[1]) == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\n\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == 'impossible'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '3'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\") == \"1\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\") == \"1\"\nassert solution(\"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"impossible\"\nassert solution(\"6 5\\n0 0 1 1\\n0 1 0 0\\n0 1 0 0\\n1 1 0 0\\n1 1 1 1\\n1 0 1 0\") == \"2\"\nassert solution(\"10 10\\n0 0 1 1\\n0 1 0 0\\n0 1 0 0\\n0 0 1 1\\n0 0 1 1\\n1 0 1 0\\n1 0 1 0\\n1 0 1 0\\n1 0 1 0\\n1 0 1 0\\n1 0 1 0\\n0 0 1 1\\n0 1 0 0\\n0 0 1 1\\n0 0 1 1\\n0 0 1 1\\n0 0 1 1\\n0 0 1 1\\n1 1 0 0\\n1 1 1 1\\n1 1 1 1\\n1 0 1 0\") == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\nassert solution('''11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(t1) == \"17\"\nassert solution(t2) == \"23\"\nassert solution(t3) == \"34\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4') == '35'\nassert solution('11 3') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"1\"\nassert solution(\"5 3\") == \"9\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"10 3\") == \"12\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 1 2 1\n3\n0 10\n2 6\n7 7\n''') == '18'\nassert solution('''\n5 3\n1 1 2 1\n3\n0 10\n2 6\n7 7\n''') == '8'\nassert solution('''\n1 1 2 1\n3\n0 10\n2 6\n7 7\n''') == '35'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 1 2 1\\n3') == '35\\n18\\n1\\n', 'Wrong output'\nassert solution('10 4\\n1 1 2 1\\n3\\n0 9\\n2 6\\n7 7') == '8\\n2\\n1\\n', 'Wrong output'\nprint('Everything passed!')\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '8'\nassert solution('10 4') == '35'\nassert solution('11 3') == '18'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 4\n1 1 2 1\n3''') == '35'\nassert solution('''11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\nassert solution('''10 5\n6 8 4 1 2 3\n2 5\n1 3\n2 5\n3 7\n4 4\n3 8\n''') == '16'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n\"\"\"\n) == \"35\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 3') == '14'\n\nassert solution('4 3') == '13'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 3 2 4 6'\nassert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 2 4'\nassert solution('''\n5\n5\n4\n3\n2\n1\n''') == '0 1 2 3 4 5'\nassert solution('''\n4\n5\n3\n2\n1\n''') == '0 1 2 3 4'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0\\n1\\n2\\n3\\n4\\n'\nassert solution('2') == '0\\n1\\n3\\n4\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0\\n1\\n2'\nassert solution('4') == '0\\n1\\n3\\n4'\nassert solution('5') == '0\\n1\\n3\\n4\\n5'\nassert solution('6') == '0\\n1\\n2\\n3\\n4\\n5\\n6'\nassert solution('7') == '0\\n1\\n3\\n4\\n5\\n6\\n7'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 3 4 6'\nassert solution('''\n5\n1\n2\n4\n3\n5\n''') == '0 1 2 3 4 6'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\nassert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 4 6'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '0 1 2 3 4'\nassert solution('3') == '0 1 2'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '0'\nassert solution('5') == '0 1 1 2 2 3'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '0 1 3 6'\nassert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 2 4 6'\nassert solution('''\n7\n1\n2\n3\n4\n5\n6\n7\n''') == '0 1 2 3 4 5 6 7'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == '1,2,3'\nassert solution(\"5\") == '1,3,5,2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 2 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n''') == '2 4 1 3'\nassert solution('''4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2 2') == '1 2'\nassert solution('0 0 1 1') == '1 2'\nassert solution('1 2 3 3') == '1 3 2'\nassert solution('2 3 5 3') == '2 4 7 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\nassert solution('1\\n1 1 1 1\\n2\\n3\\n4\\n5') == '4 1 2 3 4'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\"\nprint(\"Solution = %s\" % solution(file))\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2 3 1\"\nassert solution(\"4\") == \"2 4 1 3\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2 4 1 3'\nassert solution('4\\n1 3 2 2') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 4 5\") == \"4 3 2 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\nassert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5''') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == \"Theta wins\"\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\"\n) == \"Theta wins\"\n\nassert solution(\n    \"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\"\n) == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == \"Theta wins\"\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == 'Theta wins'\n\nsample_input_1 = input_string = '23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5'\nsample_input_2 = '89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == 'Theta wins'\nassert solution(input_, debug=True) == 'Theta wins'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n\nassert solution(\"\"\"\n1 3\n1 not charlatan 1\n1 not charlatan 1\n\"\"\") == \"truther\"\nassert solution(\"\"\"\n1 5\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n\"\"\") == \"truther\"\n\nassert solution(\"\"\"\n1 10\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n1 not charlatan 1\n\"\"\") == \"truther\"\n\nimport aoc\n\npuzzle = aoc.Puzzle(day=5, year=2020)\n\npuzzle.answer(solution())\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"truther\"\nassert solution(\"1 1\") == \"truther\"\nassert solution(\"2 1\") == \"truther\"\nassert solution(\"1 1\") == \"truther\"\nassert solution(\"1 2\") == \"truther\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\nassert solution(\"\"\"\n2 1\n1 and fabulist 1 fabulist 2\n\"\"\") == \"fabulist\"\nassert solution(\"\"\"\n1 1\n1 and fabulist 1 and charlatan 1\n\"\"\") == \"fabulist\"\nassert solution(\"\"\"\n1 1\n1 and fabulist 1 and not charlatan 1\n\"\"\") == \"truther\"\n\n\"\"\"\n--- Day 9: Encoding Error ---\n\nYou've just discovered a strange encoding error in your favorite text file on disk.\n\nThe first line of the file contains a single integer,\n the number of characters in the file.\n\nThe second line contains a single character.\n\nThe third line contains $1$ more characters.\n\n...\n\nThe $2^k$th line contains a single character.\n\nWhere $k$ is the position of the character in the file, from the beginning, in some (hopefully funny) order.\n\nThe only way your file is encoded is by a simple shift of all the characters.\n\nTo decode the file, begin with the character at the beginning of the file.\n\nWrite a function that takes in a single character and returns the position of that character in the file.\n\nFor example:\n\n  *  If the character is 'a' and your file starts with \"1113122113\",\n    then your function should return 3.\n  *  If the character is 'b' and your file starts with \"1113122113\",\n    then your function should return 1.\n  *  If the character is 'c' and your file starts with \"1113122113\",\n    then your function should return 5.\n  *  If the character is 'd' and your file starts with \"1113122113\",\n    then your function should return 1.\n\n\"\"\"\n\n\"\"\"\n--- Part Two ---\n\nOnce you decode the file, you need to decode the single-character shift efficiently.\n\nThe first time your code encounters a character it might quickly compute the new position of the character.\n\nThe second time your code encounters a character, it must first determine the new position of the character.\n\nYou can make this computation in O(1) time by keeping track of which positions from the beginning of the file have already been computed.\n\nThe first time a character is encountered its new position is initially unknown.\n\nThe second time a character is encountered its new position is the difference between the position of the previous character and the position of the previous character computed for the first time.\n\nThis can be solved easily using the previous value of the shift as well as the number of shifts needed to make the current position known.\n\nFor example, suppose your shift is 1 and your file starts with \"1113122113\".\n\nThe first time your code encounters a character it must compute the new position, which would be 3.\n\nThe second time your code encounters a character it must now determine the new position, which would be\nthe difference between 3 and 2, or 0.\n\nSo your function would now compute the new position correctly, and then return it as the new position of the\ncharacter.\n\nThe third time your code encounters a character it will first determine the new position of the character, which\nwould be 1.\n\nThe fourth time your code encounters a character it will now determine the new position, which would be\n2 - 3 + 1 = 3.\n\nSo your function would now compute the new position correctly, and then return it as the new position of the\ncharacter.\n\"\"\"\n\n\"\"\"\n--- Part Two ---\n\nIt turns out that you can actually make the file decode in O(N) time using a few trickery.\n\nFirst, it appears that each line contains a character, which can be read in O(1) time.\n\nSecond, it appears that the end of the file is always the end of the line after a character, which can be read in O(1) time.\n\nThird, it appears that every line starts with a space, which can be read in O(1) time.\n\nSo the total length of your file is a constant (just the sum of these lengths) which can be computed in O(1) time.\n\nYou can then decode the entire file in O(N) time.\n\"\"\"\n\n\"\"\"\n--- Part Two ---\n\nYou now have a function that can decode any file. It has the same inputs and outputs as the previous two, but now it has some additional restrictions.\n\nYou cannot start decoding on a line that is empty or contains a newline character.\n\nYou cannot use a newline character, because they are often used to separate fields in a single line.\n\nIt is also possible for the last character in the file to be a newline character.\n\nExample\nInput:\nThe third line of the file is \"x\\ny\\n\" and the fourth line is \"z\\r\\n\".\n\nYour function should return the string \"x\\ny\\nz\" because the last"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"truther\"\nassert solution(input_data=\"1 2\\n1 charlatan 1\\n1 not charlatan 1\") == \"charlatan\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nprint('all tests passed')"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n1 charlatan 1\n1 not charlatan 1\n''') == 'truther'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n1 charlatan 1\n1 not charlatan 1\n2 fabulist 1 fabulist 2\nSample Input 3:\n2 4\n1 and not charlatan 1 not fabulist 1\nSample Output 3:\ntruther\n''') == 'truther'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n-1.00 1.00\n2.00 2.00\n''') == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\\n') == \"4\"\nassert solution('4\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\\nSample Output 2:\n3"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n\"\"\"\n) == \"4\", 'incorrect output'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('2\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '1'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n1.00\n3.00\n4.00\n6.00\n7.00\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('2\\n0.00 1.00\\n2.00 0.00\\n2.00 0.00\\n3.00 1.00\\n3.00 2.00\\n4.00 1.00\\n4.00 1.00') == '5'\nassert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4', 'Should return 4'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 5 2\\n\"\n    \".R.X.\\n\"\n    \".X...\\n\"\n    \"100 100 7 100 8\\n\"\n) == \"16\"\nassert solution(\n    \"2 3 1\\n\"\n    \"X..\\n\"\n    \"?.?\"\n    \"10 1000 1\\n\"\n) == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 5 2\\nR..?.\\n.X...\"\n) == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('2 3 1') == '10'\nassert solution('10 1000 1') == '10'\n\"\"\"\n\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # parse stdin\n        R, C, K = list(map(int, stdin.split()))\n        grid = []\n        for i in range(R):\n            grid.append([])\n            for j in range(C):\n                grid[i].append(stdin[i * C + j])\n        # print(grid)\n\n        # starting with an empty cell\n        start = (R - 1, 0)\n\n        # DFS search\n        res = 0\n        visited = set()\n        while start:\n            r, c = start\n            visited.add(start)\n            if grid[r][c] == 'X':\n                start = None\n            else:\n                # if there is a ball, go one step right or one step left\n                if r + 1 < R:\n                    r_ = r + 1\n                else:\n                    r_ = 0\n                if c + 1 < C:\n                    c_ = c + 1\n                else:\n                    c_ = 0\n                # check if this cell is valid\n                if (r_, c_) not in visited:\n                    # add this cell to the visited set\n                    visited.add((r_, c_))\n                    # update the result\n                    res += int(grid[r_][c_])\n                    # mark the next cell as part of this part\n                    start = (r_, c_)\n                # if the ball can not move right\n                if grid[r_][c] == '.':\n                    if (r_ - 1, c) not in visited:\n                        # mark the next cell as part of this part\n                        visited.add((r_ - 1, c))\n                        # update the result\n                        res += int(grid[r_][c])\n                        start = (r_, c)\n                # if the ball can not move left\n                if grid[r_][c] == '.':\n                    if (r_, c_ + 1) not in visited:\n                        # mark the next cell as part of this part\n                        visited.add((r_, c_ + 1))\n                        # update the result\n                        res += int(grid[r_][c])\n                        start = (r_, c)\n                # if the ball can not move down\n                if grid[r_][c] == '.':\n                    if (r_ + 1, c) not in visited:\n                        # mark the next cell as part of this part\n                        visited.add((r_ + 1, c))\n                        # update the result\n                        res += int(grid[r_][c])\n                        start = (r_, c)\n        return str(res)\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 2') == '16'\nassert solution('3 3 1') == '10'\nassert solution('2 5 2') == '16'\nassert solution('2 3 1') == '10'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 2') == \"16\"\nassert solution('2 3 1') == \"10\"\nassert solution('10 1000 1') == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8') == '16'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\"\nassert solution(\"2 3 1\\nX..\\n.X...\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '10'\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1.414'\nassert solution('1 5 2') == '4.167'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"1.414\"\nassert solution(\"6 11\") == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"1.414\"\nassert solution(\"3 3\") == \"1.414\"\nassert solution(\"6 11\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\nprint('all test cases passed')\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == \"0.1666666666666666666\"\nassert solution(\"2 3\\n0 4\\n1 5 1\\n2 6 1\") == \"1.4\"\nassert solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == \"5.657\"\nassert solution(\"3 3\\n0 4\\n1 5 1\\n2 6 1\") == \"1.4142135623730951\"\nassert solution(\"6 11\\n0 0 1\\n0 1 2\\n1 0 3\\n1 1 4\\n5 5 1\\n20 20 10\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\nassert solution('''\n40 40 10\n
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1.414'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1 1\n''') == '1.0'\nassert solution('''\n3 1 1 1\n''') == '0.433'\nassert solution('''\n4 3 3 3 3\n''') == '2.541'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 1 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"0 0 0 0\") == \"0.0\"\nassert solution(\"1 2 3 4\") == \"2.0\"\nassert solution(\"2 2 2 2\") == \"0.0\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 2 1 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"4 1 1 1 1\") == \"1.0\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1 1 1 1\n3 1 1 1''') == '1.0'\nassert solution('''3 1 1 1\n1 1 1 1''') == '0.433'\nassert solution('''5 5 5 5 5\n5 5 5 5\n5 5 5 5\n5 5 5 5\n5 5 5 5\n5 5 5 5''') == '4.816'\nassert solution('''10 10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n10"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5 1 2 3 2 2') == '1.1'\nassert solution('4 2 1 1 1 1') == '1.1'\nassert solution('5 4 1 1 1 1') == '0.433'\nassert solution('2 3 5 1 2 3') == '0.433'\nassert solution('2 1 1 1') == '0.433'\n\n'''"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5') == '5'\nassert solution('8 10') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\""
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 5') == '5'\nassert solution('8 10') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5') == '5'\nassert solution('10 10') == '10'\nassert solution('100 100') == '100'\nassert solution('25 25') == '25'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\nassert solution('''\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\nassert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\n\nassert solution('''\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\nassert solution('''1 1\n2 2\n3 3''') == '3'\nassert solution('''1 1\n2 2\n3 3''') == '3'\n\ninput = \"\"\"\n3 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n\"\"\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 1 3\n1 3\n2 3''') == '1'\n\nassert solution('''5 4\n1 2 3 4 5\n1 4 2 3\n1 3 2 4\n1 4 3 2\n1 2 3 4''') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nassert solution('5 3') == '4'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n2 1\\n1 2\\n\") == \"1\"\nassert solution(\"3 2\\n2 1 3\\n1 3\\n2 3\\n\") == \"3\""
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '2'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\nprint('Do you see a pattern? Tested.')\n'''\nfrom math import factorial\nn = int(input())\na = list(map(int,input().split()))\nm = int(input())\nb = list(map(int,input().split()))\n\na.sort()\nb.sort(reverse=True)\n\nprint(sum(factorial(a[i]) * factorial(b[i]) for i in range(len(a))))\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 1\n2 1\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1', \"First\"\nassert solution('2 1') == '1', \"Second\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\n2 1\n1 2''') == '1'\nassert solution('''3 2\n2 1 3\n1 3\n2 3''') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\") == \"5\"\nassert solution(\"5 10\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n10 1\") == \"8\"\nassert solution(\"5 10\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n10 1\") == \"8\"\nassert solution(\"5 10\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n10 1\") == \"7\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 3\n1 2\n1 3''') == '-1'\nassert solution('''5\n2 4\n3 5\n1 5\n3 6\n1 6''') == '5'\nassert solution('''10\n2 1\n1 5\n1 1\n3 5\n2 5\n5 1\n3 1\n3 5\n1 5\n1 5''') == '-1'"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\nSample Output 3:\n4\n''') == '4'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '-1'\nassert solution([\n    '5 8',\n    '1 4',\n    '4 5',\n    '1 5',\n    '1 2',\n    '1 3',\n    '2 3',\n    '3 5',\n    '2 5',\n]) == '5'\nassert solution([\n    '6 5',\n    '2 4',\n    '3 5',\n    '1 5',\n    '3 6',\n    '1 6',\n]) == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5', \"Failed sample #1\"\nassert solution('''\n3 3\n1 1\n1 2\n2 2\n''') == '-1', \"Failed sample #2\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '5'\nassert solution(\"2 4\\n1 2\\n1 3\\n2 3\") == '5'\nassert solution(\"6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\") == '6'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\nassert solution([1, 1, 1, 1, 1]) == '-1'\nassert solution([5, 5, 5, 5]) == '4'\nassert solution([6, 5]) == '-1'\nassert solution([6, 5, 5, 5, 5]) == '4'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''\n6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\nassert solution('''\n1 2\n1 2\n1 3\n1 4\n''') == '-1'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '4.00'\nassert solution('6 3') == '9.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1.00'\nassert solution('6 3') == '4.00'\n\nclass Node:\n    def __init__(self, _val, _left=None, _right=None):\n        self.val = _val\n        self.left = _left\n        self.right = _right\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def min_side_len(self, left, right, down, up, node):\n        if not node:\n            return down - up\n        return min(left - node.left, right - node.right, down - node.down, up - node.up)\n\n    def size(self, node):\n        if not node:\n            return 0\n        return 1 + self.size(node.left) + self.size(node.right) + self.size(node.down) + self.size(node.up)\n\n    def solution(self, stdin):\n        _ = stdin.readline().strip()\n        n, k = map(int, stdin.readline().strip().split())\n        _ = stdin.readline().strip()\n        xs, ys = map(int, stdin.readline().strip().split())\n        d = {}\n        nodes = []\n        for _ in range(n):\n            node = Node(xs, ys)\n            nodes.append(node)\n            d[xs, ys] = node\n        for _ in range(n):\n            _ = stdin.readline().strip()\n            xs, ys = map(int, stdin.readline().strip().split())\n        assert nodes[xs - 1].right == ys\n        assert nodes[xs - 1].down == nodes[ys - 1].up\n        # print(nodes[xs - 1].down, nodes[xs - 1].right, nodes[xs - 1].up, nodes[xs - 1].left)\n        # print(nodes[ys - 1].down, nodes[ys - 1].right, nodes[ys - 1].up, nodes[ys - 1].left)\n        res = 1000000000000\n        for _ in range(k):\n            res = min(res, self.min_side_len(\n                nodes[xs - 1].left, nodes[xs - 1].right,\n                nodes[xs - 1].down, nodes[xs - 1].up,\n                d[xs - 1, ys - 1]\n            ) / self.size(d[xs - 1, ys - 1]))\n        print(round(res, 2))"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3\\n2 1') == '2.00'\nassert solution('4 3\\n2 1\\n-5 -1\\n3 1') == '3.50'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"9.00\"\nprint(solution())"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n3 3\n1 2\n3 4\n2 1\n''') == '1.00'\nassert solution('''\n2 2\n1 0\n1 1\n''') == '1.00'\nassert solution('''\n8 10\n1 10\n5 6\n5 4\n4 5\n5 4\n4 3\n3 4\n1 1\n''') == '11.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nassert solution('''\n5 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10.00\"\n\"\"\""
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1\n5 1\n5 5\n''') == '4.00'\nassert solution('''\n3\n1 1\n5 1\n5 5\n''') == '4.00'\nassert solution('''\n8\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1') == '2 1 2 3'\nassert solution('4 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\nPAINT 1 0 1 1 1\\nPAINT 2 1 1 2 2\\nLOAD 1') == '2 1 2 3'\nassert solution('4 3 2\\nPAINT 1 1 1 2 2\\nPAINT 2 1 1 2 2\\nPAINT 3 0 3 3 3\\nPAINT 1 1 1 1 1\\nLOAD 1') == '1 1 1 2 2'\nassert solution('3 3 4\\nPAINT 3 0 0 1 1\\nPAINT 3 0 3 3 3\\nPAINT 1 0 1 1 1\\nPAINT 2 1 1 2 2\\nLOAD 1') == '3 1 1 2 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"2 1 2 3\", \"Wrong answer\"\nassert solution(\"3 3 4\") == \"1 2 1 2\", \"Wrong answer\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 1 2 3'\n\nimport timeit\n\nstdin = '''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n'''\n\nprint(timeit.timeit(lambda: solution(stdin), number=10000))\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSample Output 1:\n2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2'''\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\n\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n1 2 1\\n'\n\nassert solution('''5 3 2\nPAINT 4 0 0 3 2\nPAINT 1 1 1 1 1\nPAINT 1 2 1 1 1\nSAVE\nPAINT 2 1 2 3\nPAINT 3 3 3 3 3\nLOAD 1\n''') == '3 1 1\\n1 2 1 1\\n1 2 1 1\\n1 1 1 1\\n1 2 1 3\\n'\n\nassert solution('''7 7 5\nPAINT 1 2 1 1 2 1 1\nPAINT 1 2 1 1 2 1 1\nPAINT 2 1 2 1 2 1 2\nPAINT 1 4 3 2 1 2 1\nPAINT 1 1 1 1 1 1 1\nPAINT 1 2 1 1 2 1 1\nPAINT 2 1 1 1 2 1 2\nSAVE\nPAINT 2 3 1 1 2 1 2\nPAINT 2 4 1 1 2 1 2\nPAINT 4 1 2 1 2 1 2\nPAINT 2 3 1 1 2 1 2\nPAINT 4 3 2 1 2 1 2\nLOAD 1\n''') == '2 1 2 1 2 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n1 2 1 1 2\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nPAINT 4 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nLOAD 1\nPAINT 4 0 0 1 1\nSAVE\nPAINT 4 1 1 2 2\nSAVE\nPAINT 2 3 3 3\nPAINT 3 3 3 3\nPAINT 4 3 3 3\nPAINT 2 0 0 1 1\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 3 3 3\nPAINT 4 3 3 3 3\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 0 0 1 1\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 0 3 3 3\nPAINT 4 0 0 1 1\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 0 3 3 3\nPAINT 4 0 0 1 1\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 3 3 3\nPAINT 4 0 0 1 1\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 1 1 2 2\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 0 3 3 3\nPAINT 4 0 0 1 1\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 3 3 3\nPAINT 4 0 0 1 1\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 0 3 3 3\nPAINT 4 0 0 1 1\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 3 3 3\nPAINT 4 0 0 1 1\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 0 3 3 3\nPAINT 4 0 0 1 1\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 3 3 3\nPAINT 4 0 0 1 1\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 3 1 1 2 2\nPAINT 4 1 1 2 2\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3 0 3 3 3\nPAINT 2 1 1 2 2\nPAINT 4 1 1 2 2\nSAVE\nPAINT 4 0 0 1 1\nPAINT 3"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n') == '1 1'\nassert solution('3 3 4\\n') == '2 1 2 3'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2'\nassert solution('''5 1 3\nPAINT 1 0 0 4 4\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n1 2 1 2\\n2 1 1 2'\n\nassert solution('''3 3 3\nPAINT 1 2 1\nPAINT 1 2 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1\\n1 2 1\\n1 1 1\\n1 1 1\\n2 1 1 2\\n2 1 1 2'\nassert solution('''5 1 2\nPAINT 1 0 0 1 1\nPAINT 1 0 1 1 1\nSAVE\nPAINT 2 0 0 3 3\nLOAD 1\n''') == '2 1 2\\n1 2 1\\n1 2 1\\n2 1 1 3\\n2 1 1 3\\n2 1 1 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '1 4 2 3', \"Wrong answer\"\n\nassert solution('5 1') == '-1', \"Wrong answer\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n\") == \"1 2 3 5\"\nassert solution(\"3 1\\n\") == \"1 -1 2\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 4 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"1\"\nassert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"1 4 2 3\"\nassert solution(\"3 1 4 5 2\") == \"1 2 3 4\"\nassert solution(\"6 5 4 3 2 1\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1 2 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '1 2 3'\nassert solution('10 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '-1'\n\"\"\"\n\n\n\"\"\" solution \"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 4 2 3\"\nassert solution([3,4,2,1,5]) == \"1 4 2 3 5\"\nassert solution([4,3,4,2,1]) == \"1 4 2 3 4\""
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2 1\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\nassert solution(\"5 5 5 5 5\") == \"1 5 5 5 5\"\nassert solution(\"5 5 4 5\") == \"5 5 4 5\"\nassert solution(\"8 5 2 4 7 5 2 1\") == \"8 5 2 4 7 5 2 1\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('6') == '0'\nassert solution('7') == '0'\n\"\"\""
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4 2\\n2 1\\n1 3\\n') == '1'\nassert solution('2\\n5 0\\n2 6\\n8 6\\n5 7\\n') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 0\n2 6\n8 6\n5 7\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n4 2\n2 1\n1 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3 2') == '1'\nassert solution('2\\n2 2') == '0'\nassert solution('5\\n5 0') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4 2\\n2 1\\n1 3') == '1'\nassert solution('4\\n5 0\\n2 6\\n8 6\\n5 7') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n4 2\n2 1\n1 3\"\"\") == \"1\"\nassert solution(\"\"\"4\n5 0\n2 6\n8 6\n5 7\"\"\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 2\n2 1\n1 3\n''') == '1'\nassert solution('''\n4\n5 0\n2 6\n8 6\n5 7\n''') == '0'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''2 1 0 1\n0 1 1000 100\n''') == '1000 100000'\nprint('All test cases passed.')"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"4 140\"\nassert solution(input()) == \"1000 100000\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 0 3\") == \"2 200\"\nassert solution(\"2 3 0 1\") == \"1 0\"\nprint('All tests passed.')"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 0 3') == \"4 140\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''\n2 2 0 1\n0 1 1000 100\n''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 0 1') == '1000 100'\nassert solution('4 4 0 3') == '4 140'"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n1 10\n1 7\n2 6\n2 3\n1 1\n3 5\n4 8\n4 9\n1 8\n3 7\n3 1\n2 6\n4 9\n4 1\n1 3\n4 7\n1 9\n3 1\n4 6\n5 7\n5 9\n4 2\n4 6\n5 1\n1 2\n3 7\n3 8\n2 5\n5 1\n3 9\n1 1\n3 4\n1 3\n3 5\n1 2\n4 8\n3 1\n4 9\n1 1\n3 6\n1 5\n2 9\n1 7\n2 2\n3 3\n1 3\n2 3\n2 4\n3 2\n4 5\n2 4\n4 7\n1 6\n1 3\n1 9\n1 5\n2 1\n3 4\n3 4\n4 5\n4 5\n5 3\n3 2\n4 6\n3 5\n2 5\n4 8\n4 7\n2 2\n3 8\n3 4\n2 4\n3 7\n3 7\n4 7\n2 7\n2 2\n1 2\n3 4\n2 4\n3 1\n3 4\n3 5\n2 2\n1 2\n4 1\n3 7\n3 5\n3 8\n3 7\n3 9\n1 9\n3 9\n1 3\n1 2\n1 3\n2 8\n2 7\n1 2\n3 3\n3 5\n1 4\n3 5\n3 4\n2 6\n3 2\n3 4\n4 1\n4 7\n1 9\n1 4\n2 6\n2 2\n3 4\n3 4\n3 4\n2 5\n2 6\n4 9\n4 5\n4 1\n3 4\n1 5\n2 5\n4 7\n2 2\n3 7\n3 6\n3 4\n3 7\n1 2\n2 5\n3 7\n2 5\n4 8\n1 3\n3 4\n4 5\n1 3\n3 8\n3 4\n3 5\n3 7\n3 8\n1 4\n1 9\n1 9\n2 6\n2 1\n2 3\n3 4\n1 4\n3 6\n2 4\n1 6\n3 4\n3 4\n1 9\n2 5\n1 3\n1 9\n2 9\n3 4\n2 4\n2 7\n2 3\n3 4\n3 4\n4 2\n2 5\n4 5\n3 5\n4 8\n3 7\n3 6\n4 3\n3 5\n3 7\n4 2\n4 3\n4 7\n4 2\n3 4\n2 5\n1 4\n3 1\n1 4\n2 4\n2 3\n2 3\n3 8\n2 6\n3 4\n3 5\n4 8\n4 5\n3 7\n3 7\n3 8\n2 5\n3 4\n3 4\n1 5\n4 1\n2 9\n3 5\n1 3\n2 6\n1 4\n2 5\n2 4\n2 6\n3 2\n4 6\n3 4\n4 7\n2 5\n4 8\n3 2\n3 4\n4 4\n4 5\n1 3\n2 4\n3 4\n4 2\n2 4\n4 2\n2 3\n2 4\n2 7\n2 4\n2 5\n3 3\n4 5\n3 4\n4 8\n3 4\n1 4\n2 4\n2 7\n3 7\n3 6\n1 2\n3 5\n4 6\n2 5\n2 4\n3 4\n3 4\n3 6\n1 2\n3 5\n3 5\n3 4\n3 7\n3 7\n4 7\n4 6\n4 7\n3 5\n2 5\n4 7\n4 7\n4 7\n3 7\n3 6\n3 7\n3 6\n3 5\n4 5\n1 2\n1 3\n1 5\n2 5\n2 5\n1 4\n2 5\n2 5\n3 2\n2 4\n3 2\n2 5\n1 3\n3 7\n1 9\n1 4\n2 5\n3 4\n2 5\n2 4\n3 5\n2 4\n1 4\n2 8\n1 9\n3 5\n2 5\n3 8\n3 7\n1 4\n1 9\n3 5\n1 3\n2 5\n2 4\n1 3\n1 4\n1 3\n1 4\n1 4\n1 4\n1 4\n1 5\n2 5\n1 3\n2 5\n2 5\n1 5\n2 5\n1 5\n2 5\n1 5\n2 5\n1 5\n1 3\n1 5\n1 3\n2 5\n2 4\n2 5\n2 5\n2 5\n2 5\n2 5\n2 5\n2 5\n2 5\n2 5\n1 2\n3 5\n1 5\n2 5\n2 5\n2 5\n1 6\n1 5\n2 5\n2 5\n2 5\n2 5\n1 7\n1 7\n2 5\n2 5\n1 5\n1 7\n1 5\n1 5\n2 5\n2 5\n1 4\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 2\n2 1\n2 3\n3 4\n3 2\n3 1\n''') == '3'\nassert solution('''\n3\n1 1\n1 1\n1 1\n''') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n1 3\\n1 2\\n2 1') == '2'\nassert solution('1\\n3\\n2 3\\n2 4') == 'impossible'\nassert solution('1\\n3\\n1 2\\n2 3\\n3 1') == '1'\nassert solution('100\\n7\\n1 50\\n50 70\\n70 90\\n90 40\\n20 60\\n60 80\\n80 20\\nSample Output 2:') == '2'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"100 4\") == \"2\"\nassert solution(\"9 9\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '1'\nassert solution('5\\n5\\n4\\n4\\n') == 'impossible'\nassert solution('8\\n8\\n4\\n4\\n') == '3'\nassert solution('1\\n10\\n4\\n4\\n') == 'impossible'\nassert solution('4\\n4\\n4\\n4\\n') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n5 7') == 'impossible'\nassert solution('8\\n5 7') == '4'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5\n1 2\n3 4\n''') == 'impossible', 'First'\nassert solution('''\n3 4\n2 3\n4 5\n''') == '2', 'Second'\n\nassert solution('''\n6 3\n1 5\n3 6\n4 8\n2 7\n5 9\n''') == 'impossible', 'Third'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n5\\n6\\n4\\n3\\n1\\n2\\n4') == '1\\n2\\n4'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8') == 'impossible'"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 3\\n5 5 7\\n3 3 5\\n2 7 6') == 'impossible'\nassert solution('9 3\\n1 2 3\\n5 5 7\\n3 3 5\\n2 7 6\\n4 1 5\\n6 6 7\\n4 6 7 8\\n4 2 8 5\\n7 7 8 2\\n6 6 4 3\\n1 2 4\\n') == '3'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    120\n    ''') == '5'\n\nassert solution('''\n    51090942171709440000\n    ''') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 1 2\n''') == '45', \"Should return 45\"\n\nassert solution('''\n3 3 3\n''') == '10', \"Should return 10\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\n\"\"\"\n\nn, m, k = map(int, input().split())"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\nassert solution('''\n3 3 3\n''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"45\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\""
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\") == \"45\"\nassert solution(\"10 3 2\") == \"10\"\nassert solution(\"10 10 10\") == \"45\"\nassert solution(\"10 1 2\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1 2') == '45', \"Wrong\"\nassert solution('3 3 3') == '10', \"Wrong\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\nprint('All test cases passed.')"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '20'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n1') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == '18'\nassert solution('''\n2\n1 1\n5 9\n10\n''') == '20'\nassert solution('''\n3\n1 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == 'impossible'\nassert solution('''\n3\n1 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3') == '20'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == 'impossible'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n1\\n') == 'impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input_1) == \"18\", \"Should be 18\"\nassert solution(sample_input_2) == \"20\", \"Should be 20\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n\") == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == \"18\"\n\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5') == '20'\nassert solution('0\\n10\\n0\\n9\\n8\\n0\\n10') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '18'\n\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '20'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == \"3\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 5 10\n7 8 2\n''') == '3', \"First\"\nassert solution('''\n2\n1 5 10\n7 8 2\n''') == '11', \"Second\"\n''')\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\nassert solution('1') == '4'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\nassert solution('4') == '13'\nassert solution('5') == '19'\nassert solution('6') == '23'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"11\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n-1 1\n5 5 5\n10 10 10\n''') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"15\"\n\"\"\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"10 20 30 40 50 60 70 80 90 100\") == \"99\"\nassert solution(\"1000 1001 1002 1003\") == \"99\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '0'\nassert solution('3 1') == '2'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1\n110\n011\nSample Output 3:\n2\n\"\"\") == \"2\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1\n110\n011\n''') == '2'\nassert solution('''\n4 2\n1000\n1000\n0000\n0010\n''') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '2'\nassert solution('4 2') == '0'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 2') == '0'\nassert solution('6 4') == '2'\nassert solution('10 5') == '5'\nassert solution('20 5') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '2'\nassert solution('3 2') == '0'\n\n---Input---\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1\n110\n011\n''') == '2'\nassert solution('''4 2\n1000\n1000\n0000\n0010\n''') == '0'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''3\n1 2 3\n3\n2''') == '1'\nassert solution('''4\n1 2 3 4\n3\n2''') == '2'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 3 4') == '2'\nassert solution('3 4 4') == '3'\nassert solution('4 5 4') == '3'\nassert solution('5 6 6') == '4'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3') == '1'\nassert solution('3\\n2') == '5'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n5\n1 2 3\n3\n''') == '1'\nassert solution(\n'''\n3\n1 2 3\n3\n''') == '5'\nassert solution(\n'''\n100\n
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n3\n2\n''') == '1'\n\nassert solution('''3\n1 2 3\n3\n2\n''') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 3 2') == '2'\nassert solution('3 2 1') == '2'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n3\\n2') == '1'\nassert solution('3\\n1 2 3\\n3\\n2') == '5'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == '1'\nassert solution(s2) == '5'\n\nSample Input 3:\n5\n1 2 3 4 5\n3\nSample Output 3:\n1\n\nSample Input 4:\n5\n1 2 3 4 5\n2\nSample Output 4:\n1\n\nSample Input 5:\n5\n1 2 3 4 5\n3\nSample Output 5:\n0\n\nSample Input 6:\n5\n1 2 3 4 5\n3\nSample Output 6:\n1\n\nSample Input 7:\n5\n1 2 3 4 5\n5\nSample Output 7:\n0\n\nSample Input 8:\n5\n1 2 3 4 5\n6\nSample Output 8:\n0\n\nSample Input 9:\n5\n1 2 3 4 5\n7\nSample Output 9:\n1\n\nSample Input 10:\n5\n1 2 3 4 5\n8\nSample Output 10:\n1\n\nSample Input 11:\n5\n1 2 3 4 5\n10\nSample Output 11:\n0\n\nSample Input 12:\n5\n1 2 3 4 5\n15\nSample Output 12:\n0\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\nassert solution('100 100 20') == '0'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 100 20\\n') == '0'\nassert solution('10 10 1\\n') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"19\"\nassert solution(input(\"\")) == \"0\"\nassert solution(input(\"\")) == \"0\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"1 100 20\n\"\"\") == \"0\"\nassert solution(\"\"\"10 10 1\n\"\"\") == \"19\"\nassert solution(\"\"\"3 4 5\n2\n10 10 10\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1\\n1\") == \"0\"\nassert solution(\"1\\n100\\n20\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\nassert solution('10 10 1 10') == '19'\nassert solution('10 10 1 10 10') == '19'\nassert solution('10 10 1 10 10 10') == '19'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'c'\n\nassert solution('''\n7\nclassa classb myfilec execd\nclassa 1\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n''') =='myfilec'\n\nassert solution('''\n10\nclassa classb myfilec execd\nclassa 1\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n''') == 'execd'\n\nassert solution('''\n10\nclassa classb myfilec execd\nclassa 1\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n''') == 'libe'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\na 1\nimport a\nb 2\nimport b\nc 1\nimport c\nd 0\nSample Output 3:\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS\nS"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\n\\nb 2\\nimport d\\n\\nc 1\\nimport c\\n\\nd 0\\n\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\n\\nclassb 1\\nimport execd\\n\\nmyfilec 1\\nimport libe\\n\\nlibe 0\\n\") == \"c\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''10\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'c'\n\nassert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\nSample Output 3:\nSHIP IT\n\n''') == 'SHIP IT'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''10\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"SHIP IT\"\nassert solution(\"1\") == \"SHIP IT\"\nassert solution(\"5\") == \"c\"\nassert solution(\"4\") == \"c\"\nassert solution(\"a\") == \"c\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2,1,4\\nimport,2,3,5,1\\n1,1,3,4') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT'\nassert solution('''\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\n------SOLUTION\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n\"\"\") == \"c\"\n\nassert solution(\"\"\"\n3\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n\"\"\") == \"SHIP IT\"\n\nassert solution(\"\"\"\n5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n\"\"\") == \"classa\"\n\nassert solution(\"\"\"\n4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n\"\"\") == \"d\"\n\nassert solution(\"\"\"\n4\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nlibe 0\n\"\"\") == \"classa\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\") == \"c\"\nprint(solution(input()))\n'''"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''9 10''') == '2'\nprint('solution() is passed all test cases.')\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3+2*x+1\") == \"4\"\nassert solution(\"7+5*x+x\") == \"26\"\nassert solution(\"8+x*(2+x)*(5+x)\") == \"18\"\nassert solution(\"x+2*x*x\") == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('2+3+2') == '4'\nassert solution('0+3+x') == '2'\nassert solution('5+3+x') == '2'\nassert solution('1+x') == '1'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('10+30+x') == '20'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 10\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\n\"\"\"\n\nn,t = (int(i) for i in input().split())\na_times = [int(i) for i in input().split()]\nb_times = [int(i) for i in input().split()]\n\nfor i in range(n):\n    if b_times[i] > a_times[i]:\n        return \"no\"\n\nreturn \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"yes\"\nassert solution(\"2 10\") == \"no\"\nassert solution(\"1 10 2\") == \"yes\"\nassert solution(\"1 10 2 3\") == \"yes\"\nassert solution(\"1 10 2 3 4\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n2 3\n4 5\n5 6\n''') == 'yes'\nassert solution('''\n3\n1 2\n2 3\n4 5\n''') == 'no'\nassert solution('''\n1 2\n2 3\n3 4\n5 6\n6 7\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('4 10\\n0 15\\n5 20\\n0 12\\n3 15\\n4 15') == 'no'\nassert solution('4 10\\n1 15\\n0 20\\n3 15\\n4 15') == 'no'\nassert solution('7 10\\n0 1\\n5 5\\n3 4\\n5 5\\n2 6\\n1 7\\n0 0\\n3 8\\n2 6\\n5 5\\n3 8\\n1 9\\n0 0\\n3 8\\n1 9\\n0 0\\n5 5\\n1 7\\n0 0\\n2 6\\n1 7\\n0 0\\n4 5\\n1 7\\n0 0\\n2 6\\n2 6\\n4 6\\n1 7\\n0 0\\n3 8\\n0 0\\n1 9\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n2 6\\n0 0\\n4 5\\n0 0\\n1 7\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n2 6\\n1 7\\n0 0\\n4 5\\n0 0\\n1 7\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n4 5\\n0 0\\n1 7\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n2 6\\n1 7\\n0 0\\n3 8\\n0 0\\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n0 15\\n5 20\") == \"yes\"\nassert solution(\"2 10\\n1 15\\n0 20\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"10 1\") == \"no\"\nassert solution(\"10 10\") == \"yes\"\nassert solution(\"10 10\") == \"yes\"\nassert solution(\"0 15\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4\\n4\\n4\\n') == '0'\nassert solution('10\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '1'\nprint('SUCCESS')\n\n'''''\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '0'\nassert solution('2 5\\n2\\n0 0\\n4\\n1 1\\n3 3\\n4 4\\n4 3\\n') == '0.25'\nassert solution('3 5\\n3\\n0 0\\n4\\n1 1\\n3 3\\n4 4\\n4 3\\n') == '0.5'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 3') == '0.25'\nassert solution('10 4 4') == '0.25'\nassert solution('100 100 100') == '1.0'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'\nassert solution('4 4 4') == '0'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('3 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '0.5'\nassert solution('5') == '0'\nassert solution('5 5 5') == '0.25'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n4 red\n''') == '0.25'\nassert solution('''4 4 4\n0\n0 green\n0\n1 red\n''') == '1.0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4 4 4\\n4\\n2 green\\n6 yellow\\n10 red\\n14 green\\n4 red\\n') == '0'\nassert solution('3\\n0\\n1 green\\n5 red\\n') == '1.0'\nassert solution('7\\n0\\n1 green\\n5 red\\n4 red\\n3 red\\n') == '0.25'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4 4') == '0.25'\nassert solution('4 4 4') == '0'\nassert solution('4 4 4') == '0'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"3\"\nassert solution(\"5 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"inf\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"3\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '6 7'\n) == '3'\nassert solution(\n    '6 8'\n) == 'inf'\nassert solution(\n    '10 10'\n) == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3'\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4''') == '3'\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3''') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4', \"First\"\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2', \"Second\"\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == \"4\"\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == \"2\"\nassert solution('''\n4 4\n1 2 3 4\n''') == \"4\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('''\n4 4\n1 2 3 4\n''') == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution(\"4 4\\n1 2 3 4\\n\") == \"4\"\nassert solution(\"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\") == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == '4'\nassert solution('12 3') == '2'"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\nprint(\"You're all set!\")"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n''') == '3'\nassert solution('''4\n1 2 3 4\n''') == '4'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '9'\nassert solution('''12\n2 3 4 5 6 7 8 9 10\n''') == '10'\nassert solution('''13\n2 3 4 5 6 7 8 9 10\n''') == '10'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3\n1 2 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3 2\n1 3 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 2\n1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 1\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 10\n9 8 5 2 1 9 2 7 4 6\n\"\"\") == \"8\""
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"no noises\"\n'''"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'noises', \"First\"\nassert solution('''4\nhose\nhoose\noose\nmoose\n''') == 'hoose,moose,oose', \"Second\""
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nhoose\\nhose\\nnoises\\nnoise\\n') == 'NO TYPOS'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nhoose\\noose\\nmose\\n') == 'hoose moose'\nassert solution('5\\nhoose\\nhose\\nnose\\nnoise\\nnoise\\n') == 'hoose noise'"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == 'hoose, noises, noise'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nhoose\\nhose\\nnose\\noises\\noise') == 'hoose\\nnose\\noise'"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'hoose'\nassert solution('4') == 'hoose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == 'NO TYPOS'\nassert solution('5') == 'NO TYPOS'\n\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose'\n\nassert solution('''\n4\nhose\nhoose\noose\nmoose\n''') == 'hoose,moose'\n\nassert solution('''\n3\nhoose\nhose\nnose\n''') == 'hoose,nose,nose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nhoose\nhose\nnose\nnoises\nnoise''') == '''hoose\nnoises\nnoise'''\n\nassert solution('''1\nfoo''') == '''foo'''\n\nassert solution('''1\nfoo\nbar''') == '''foo'''\n\nassert solution('''3\nhoose\nhose\nnose\nnoises\nnoise''') == '''hoose\nnoises'''\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n3\n''') == '2'\n\nassert solution('''\n2 3\n4\n''') == '16'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('2 3') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '0\\n16\\n8'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('2 3') == '5'\nassert solution('4') == '16'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '16'\nassert solution('4') == '0'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"16\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n50 45 45\n25 40 40\n30 50 30\n35 30 20\n15 30 30''') == '73.62494071'\nassert solution('''5\n50 45 45\n25 40 40\n30 50 30\n35 30 20\n15 30 30''') == '3.45774297'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"68.52419365\"\nassert solution(\"1\") == \"44.72135955\""
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"44.72135955\"\nassert solution(\"1\") == \"44.72135955\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n50 45 45') == '44.72135955'\nassert solution('2\\n1 2 1') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\nprint(solution(*(stdin().split())))\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '69.5'\nassert solution('1') == '94.73135956'\nassert solution('100') == '5.324263362'\nassert solution('11') == '7.24135956'\nassert solution('4') == '3.747241359'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '22.6239938'\nassert solution('4') == '32.5426429'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n50 45 45\n''') == '68.52419365'\nassert solution('''2\n100 150 100\n''') == '102.18123491'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 2 3') == '1'\nassert solution('5 4 2 3') == '3'\nassert solution('5 5 1 2') == '1'\nassert solution('3 4 2 3') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 1 5') == '1\\n3\\n2\\n'\nassert solution('3 4 2 3') == '1\\n2\\n0\\n3\\n'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\\n1\\n0\\n1\\n0\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3 1 5\n1 2\n3''') == '1\\n3\\n2\\n'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '0'\nassert solution('5 5 5 4') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 1 5') == '1'\nassert solution('2 2') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 1\\n\") == \"3\"\nassert solution(\"5 3\\n2 2 3 2 2\\n\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 1\\n') == '3'\nassert solution('5 3\\n2 2 3 2 2\\n') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '3'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 5\n1 1\n''') == '3', 'First'\nassert solution('''\n5 3\n2 2 3 2 2\n''') == '2', 'Second'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5\\n1 1') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1\\n') == '3'\nassert solution('5\\n2 2 3 2 2') == '4'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == '3'\nassert solution('5 3') == '2'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 5\n1 1\n''') == '3'\nprint('All tests passed!')\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 1\\n') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\nprint(solution())\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '50'\nassert solution('2') == '25'\nassert solution('1') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 50\\n50 0') == '25'\nassert solution('3\\n100 100\\n50 50\\n50 0') == '50'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('3\\n0 100\\n50 50') == '25'\nassert solution('4\\n5\\n0 50\\n50 0') == '50'\nassert solution('5\\n0 50\\n50 0\\n0 50') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n100 100\n50 50\n''') == '50'\n\nassert solution('''\n10\n0 100\n50 50\n''') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n100 100\n50 50\n''') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n50 50 50 50\n5\n25 25 25 25 25\n''') == '25.000000'\nprint(solution('''\n4\n100 100 100 100\n5\n20 20 20 20 20\n'''))\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n100 100\\n50 50') == '50'\nassert solution('1\\n4 5') == '8.0'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n50\\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 50\\n50 0\\n50\\n25\\n50') == '25'\nassert solution('4\\n0 50\\n50 0\\n50\\n50') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '50\\n'\nassert solution('2\\n') == '50\\n'\nassert solution('2\\n') == '50\\n'\nassert solution('2\\n') == '50\\n'\nassert solution('3\\n') == '75\\n'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n100\\n200') == '160'\nassert solution('3\\n100\\n200\\n2010') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\nassert solution('''\n3\n100\n200\n2010\n''') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n100\\n200') == '160'\nassert solution('2\\n100\\n200') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n2\n100\n200\n'''\n    ) == '160'\nassert solution(\n'''\n2\n100\n100\n'''\n    ) == '100'\nassert solution(\n'''\n3\n100\n200\n2010\n'''\n    ) == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"160\"\nassert solution(\"3\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"250\""
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n2\n100\n200\nSample Output 1:\n160\n\nSample Input 2:\n3\n100\n200\n2010\nSample Output 2:\n250\n    \"\"\") == \"160\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2\n0 1 1\n2 3 1\n3 4 3\n4 0 3\n1 2 3''') == '2'\nassert solution('''7 7\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 5 3\n5 6 3\n6 7 3''') == '0'\nprint(\"All tests passed\")"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 5') == '2'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '2'\nassert solution('4 3\\n0 1 2\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\nassert solution('6 4\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 5 3\\n5 0 3\\n') == '5'\nassert solution('7 7\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 5 3\\n5 6 3\\n6 0 3\\n') == '0'\nassert solution('5 6\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 5 3\\n5 6 3\\n6 0 3\\n') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1\\n') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\nprint('Everything is fine!')"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == \"3\"\nprint(solution(input_data))\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '0'\nassert solution('5 5') == '2'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 2') == '2'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\nassert solution('''\n1 2 1\n2 3 1\n3 4 1\n''') == '0'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '4'\n\ninput: str = '''\n4 3\n0 1 1\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n'''"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1 1\"\nassert solution(\"4 2\") == \"1 2\""
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3\n6 3''') == '1 2 1'\nassert solution('''4 2\n3 3 2 2\n6 3''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2 1\") == \"1 1\"\nassert solution(\"4 3\") == \"2 3\"\n\n\"\"\""
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3\n6 3\n''') == '1 1\\n1 2\\n2 3 4'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 3') == '1 3'\nassert solution('3 2') == '-1'\nassert solution('2 3') == '-1'\nassert solution('3 4') == '1 3 4'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\\n1 2\\n2 3 4\\n'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\\n1 2\\n2 3 4\\n'\n\nassert solution('''\n4 2\n3 3 2 2\n6 3\n''') == '1 2\\n1 3 4\\n'\n\nassert solution('''\n2 2\n1 1\n''') == '2 2\\n'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '1 1 1 1 1'"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1 2\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 2\\n2 3\\n3 4\\n\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '10.0\\n4.0\\n1.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 10\") == \"10.0\"\nassert solution(\"4 3 7\") == \"10.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3 10\n0 0 D\n10 1 L\n''') == '10.0\\n10.0\\n0.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0'\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '4.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 7\") == \"10.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n''') == '10.0\\n10.0\\n0.0\\n'\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '10.0\\n4.0\\n1.0\\n'''\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'\n\"\"\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\") == \"10.0\"\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\") == \"10.0\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\nassert solution(\"\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\""
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\n\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"Impossible\""
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'Impossible'\nassert solution('''') == 'Impossible'\nassert solution('a') == 'a'\nassert solution('be') == 'be'\nassert solution('our') == 'our'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'Impossible'\nprint(solution())\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'IMPOSSIBLE'\nassert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == 'IMPOSSIBLE'\nassert solution('3') == '68.3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join([\n    \"Hamburg Bremen\",\n    \"3\",\n    \"Hamburg Bremen 15 68 10 5\",\n    \"Hamburg Bremen 46 55 50 60\",\n    \"Bremen Frankfurt 14 226 10 120\"])) == \"68.3\"\n\nassert solution('\\n'.join([\n    \"Amsterdam Rotterdam\",\n    \"1\",\n    \"Amsterdam Utrecht 10 22 5 10\"])) == \"IMPOSSIBLE\"\n\nassert solution('\\n'.join([\n    \"Amsterdam Rotterdam\",\n    \"2\",\n    \"Amsterdam Utrecht 10 22 5 10\"])) == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120\\n') == '68.3'\nassert solution('Amsterdam Rotterdam\\n1\\nAmsterdam Utrecht 10 22 5 10\\nSample Output 2:') == 'IMPOSSIBLE'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"Hamburg Bremen\") == \"68.3\", f\"Wrong answer for {__file__}\"\nassert solution(\n    \"Bremen Rotterdam\") == \"IMPOSSIBLE\", f\"Wrong answer for {__file__}\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == 'IMPOSSIBLE'\nassert solution('3') == '68.3'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    Hamburg Bremen\n    3\n    Hamburg Bremen 15 68 10 5\n    Hamburg Bremen 46 55 50 60\n    Bremen Frankfurt 14 226 10 120\n    \"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n    Amsterdam Rotterdam\n    1\n    Amsterdam Utrecht 10 22 5 10\n    \"\"\") == \"68.3\"\n\nassert solution(\"\"\"\n    Hamburg Rotterdam\n    2\n    Hamburg Rotterdam 15 15 5 10\n    Hamburg Rotterdam 46 55 55 50 60\n    \"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n    Hamburg Rotterdam\n    3\n    Hamburg Rotterdam 15 15 5 10\n    Hamburg Rotterdam 46 55 55 50 60\n    \"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n    Hamburg Rotterdam\n    2\n    Hamburg Rotterdam 15 15 5 10\n    Hamburg Rotterdam 46 55 55 50 60\n    \"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == '68.3'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\nassert solution(\"\"\"Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"Amsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"Amsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2.3\") == \"2\"\nassert solution(\"3.3\") == \"2\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'\nassert solution('4') == '6'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"3\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n*-*.*\n|.|.|\n*.*-*''') == '3'\nassert solution('''2\n*.*\n...\n*.*''') == '4'\nassert solution('''3\n*-*.*\n|.|.|\n*.*-*''') == '5'\nassert solution('''10\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n|..|.|\n*.*-*''') == '35'\nassert solution('''5\n*.*\n*.*\n*.*\n*.*\n*.*\n*.*\nSample Output 2:\n35''') == '95'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n*-*.*\\n|.|.|\\n*.*-*\") == \"3\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '5'\nassert solution('''\n*-*.*\n|.|.|\n*.*-*\n|.|.|\n*.*.*\n''') == '4'\nassert solution('''\n*-*.*\n|.|.|\n*.*-*\n.|.|.\n*.*.*\n''') == '4'\n\n'''\nConstraints\n\nThe size of the game grid $2N-1$\n\nThe size of the input is always less than or equal to $4N$\n\nThe input contains four distinct types of cells:\n- \"*\"\n- \"-\"\n- \"|\"\n- \".\"\n'''\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\""
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == \"4\"\n\nassert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == \"5\"\n\nassert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == \"7\"\n\nassert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == \"8\"\n\nassert solution('''\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == \"10\""
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n12210020\\n1111') == 'impossible'\n\"\"\"\nimport sys\nimport os\nsys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../../')\nfrom common import *"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n12210020\n''') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"6\") == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"8\") == \"4\"\nassert solution(\"4\") == \"impossible\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"4\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"1111\") == \"impossible\"\nprint(solution())"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n12210020''') == \"4\"\nassert solution('''5\n1111''') == \"impossible\"\nassert solution('''7\n12210020\n12210020\n12210020\n12210020\n1111''') == \"3\"\nassert solution('''7\n1111\n12210020\n12210020\n12210020\n12210020\n1111''') == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"12210020\") == \"4\"\nassert solution(\"1111\") == \"impossible\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8') == '4'\nassert solution('12210020') == 'impossible'\nassert solution('1111') == 'impossible'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n\nassert solution('''\n3\n0 0 999\n1000 1000 200\n250 250 300\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000 200\n50 50 99\n0 0 1000\n1000 1000"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n''') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n\n'''\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n\") == \"Bill will be bitten.\"\nassert solution(\"5\\n0 0 999\\n1000 1000 200\\n0 1000 999\\n1000 1000 500\\n\") == \"Bill will be bitten.\"\n\"\"\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n'\nassert solution('4') == 'Bill will be bitten.\\n'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.''') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3\\n++xx+x++\\n') == '++xx+o++'\nassert solution('8 3\\nxxxx++\\n') == 'xxoooxx'\nassert solution('8 3\\nxxox++\\n') == 'xxoooxx'\nassert solution('8 3\\nxxoo++\\n') == 'xxoooxx'\nassert solution('8 3\\nxxoo++\\n') == 'xxoooxx'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 3') == 'xxooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5 3\n++xx+x++\n\"\"\"\n) == \"\"\"++xx+o++\"\"\", \"\"\"Should be: ++xx+o++\"\"\"\"\n\nassert solution(\n\"\"\"\n10 5\nx+x++x++x+x++x\n\"\"\"\n) == \"\"\"xxoooxxxoooxxoooxxxooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxoooxxooox"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nprint(solution('''8 3\nxxxxxxxx\n'''))\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"++xx+o++\"\nassert solution(\"8 3\") == \"xxoooooo\"\nassert solution(\"10 3\") == \"xxoooooo\"\nassert solution(\"10 3\") == \"xxoooooo\"\nassert solution(\"5 3\") == \"xxoooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 3\nxxxxxxxx\n''') == 'xxoooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 3') == 'xxooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"8 3\n++xx+x++\"\"\") == \"\"\"++xx+o++\"\"\n\nassert solution(\"\"\"8 3\nxxxxxxxx\"\"\") == \"\"\"xxooo+xo+o+x+xo+xo+x+o+x+xo+x+xo+xo+x+xo+x+xo+x+xo+xo+x+x+xo+x+xo+x+xo+x+xo+x+x+xo+x+xo+x+x+xo+x+x+x+xo+x+x+x+o++\"\"\") == \"\"\"xxooo+xo+o+x+xo+xo+x+o+x+xo+x+xo+xo+x+xo+x+xo+x+xo+x+x+xo+x+x+x+o++\"\"\n\n\"\"\")\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 3\\n++xx+x++\\n\") == \"++xx+o++\"\nassert solution(\"8 3\\nxxxxxxxx\\n\") == \"xxoooooo\"\nassert solution(\"4 2\\n+x+\\n\") == \"xoo\"\nassert solution(\"4 2\\nx+\\n\") == \"xoo\"\nassert solution(\"1 2\\n+x+\\n\") == \"xoo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"xxooo\"\n\nassert solution(\"5 3\") == \"xxxxx\""
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\"\n***\n''') == 'oclock: clock\\nhe: hen the\\ntill: will\\nwhen: hen\\ntill: not till\\nthat clock: clock\\nhe: hen\\nnot till: till\\ntill: not till\\nclock: clock\\nhe: hen\\ntill: it\\nis: it\\ntill: not till\\nhe: hen\\ntill: oclock\\nclock: clock\\nwhen: hen\\ntill: not till\\nhen: hen\\ntill: it\\nhen: hen\\ntill: not till\\nhe: hen\\ntill: not till\\ntill: it\\n'''\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\"''') == 'oclock: clock\\the: hen\\till: will\\twhen: hen\\tnot: till\\tthat: clock\\tis: it\\tin: is\\tstopped: clock\\tit: till\\ttill: will\\tit: not\\t12: oclock\\tis: he\\tclock: oclock\\thens: hen\\then: he\\tnot: hen\\then: it\\then: not\\then: till\\thill: will\\tclock: clock\\the: hen\\ttill: not\\ttill: will\\tclock: not\\tthat: clock\\tclock: stop\\tclock: is\\tclock: not\\tclock: strike\\tclock: not\\tclock: the\\tclock: not\\tclock: until\\ttill: will\\tclock: clock\\then: hen\\ttill: will\\ttill: will\\ttill: clock\\thiss: hen\\tclock: clock\\thiss: it\\tclock: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\thiss: clock\\"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''') == '***'\nassert solution('\"Look for a better word processor!''') == \"the: he'ns it's: in there: athen\"\n\n'''\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('lost is close to lose') == 'close: lose\\nhe: the\\n'\nassert solution('The fox said, \"When?\"') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\ni: is\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:'\nassert solution('The fox said, \"When?\"') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\ni: is\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:'\nassert solution('The fox said, \"When?\"') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\ni: is\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:'\nassert solution('The fox said, \"When?\"') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\ni: is\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:'\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Lost is Close to Lose\") == \"close: lose\\nhe: the\\nin: inc\\ninc: in\\nis: in\\nlose: close lost\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\ntill: will\\nwhen: hen\"\nprint(solution(input()))\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == \"oclock: clock\\the: hen the\\till: will\\nhen: hen when\\tit: is\\n\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nis: it\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == 'clock: oclock\\nhe: hen the\\nhe: he when\\nis: it\\nis: it\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == 'clock: oclock\\nhe: hen the\\nhe: he when\\nis: it\\nis: it\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == 'clock: oclock\\nhe: hen the\\nhe: he when\\nis: it\\nis: it\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == 'clock: oclock\\nhe: hen the\\nhe: he when\\nis: it\\nis: it\\noclock: clock\\ntill: will\\nwhen: hen\\ntill: will\\ndef solution(stdin: str) -> str:\\n    pass\\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"***\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"clock: oclock will: hen the when\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"hen the when: clock: oclock\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"hen the when clock: oclock\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"hen the when clock\""
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\nLost is Close to Lose\n\"\"\") == \"\"\"close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\"\"\".strip()\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nBetter Documents Inc.\u00a0is conducting spell-checker tests.\n\nNow, nearly every word processor includes a spell checker.\n\nBetter Documents Inc.\u00a0is conducting spell-checker tests.\n\nNow, nearly every word processor includes a spell checker.\n\nBADERKILL is a spell-checker that has replaced itself with a true spell checker.\n\nBetter Documents Inc.\u00a0is conducting spell-checker tests.\n\nNow, nearly every word processor includes a spell checker.\n\nBADERKILL is a spell-checker that has replaced itself with a true spell checker.\n\nBetter Documents Inc.\u00a0is conducting spell-checker tests.\n\nNow, nearly every word processor includes a spell checker.\n\n\"\"\") == \"\"\"\nclock: oclock\nhe: hen the\nhe: hen when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\n1 2 3 4 5 6 7 8 9 10') == \"1\"\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 2 3 4 5 6 7 8 9 10\\n') == '1'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == '1'\nprint('PASSED')"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n5 3\n1 2 3 4 5\n1 3 2 5 4\n2 1 3 4 5\n3 1 2 5 4\n4 1 2 3 5\n''') == '2'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n3 8 1 9 4 5 2 7 10 6\n1 3 2 5 4 7 8 9 10 6\n2 1 3 4 5 6 7 8 9 10\n4 1 2 3 5 6 7 8 9 10\n5 1 2 3 4 6 7 8 9 10\n6 1 2 3 4 5 7 8 9 10\n7 1 2 3 4 5 6 8 9 10\n8 1 2 3 4 5 6 7 9 10\n9 1 2 3 4 5 6 7 8 10\n10 1 2 3 4 5 6 7 8 9\n''') == '5'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 3 4 5 6 7 8 9 10') == '1'\nassert solution('2\\n5 4 3 1 8 7 6 9 10') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '1'\nassert solution('10 1 2 3 4 5 6 7 8 9 10') == '2'\nassert solution('3 8 1 9 4 5 2 7 10 6') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 7 3 8 9 4 5 10 6\n''') == '2'\nassert solution('''\n6\n2 4 5 3 8 1 6 9 7\n''') == '2'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 3') == '2'\nassert solution('5\\n3 5 2 4 7') == '4'\n\"\"\""
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n5\n3 2 1 5 7 4\n''') == '1'\nassert solution('''\n50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''') == '2'\n\n---\n\n5\n1 1 2 2 3 3 4 4 5 5 6 5 6\n''')\n\n5\n1 2 3 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n''')"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n3 4 1 2 8 7 6 5 10\n''') == '2'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('123') == '1/3'\nassert solution('5678') == '5/3'\nassert solution('01') == '1'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint(solution(input()))"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"0.142857 1\"\n) == \"1/7\", \"Wrong answer\"\n\nassert solution(\n    \"1.6 1\"\n) == \"5/3\", \"Wrong answer\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0.142857 6''') == '1/7'\nassert solution('''1.6 1''') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('0.142857') == '1/7'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n0 0 2') == '10'\nassert solution('3\\n0 0 0\\n0 0 1\\n0 0 2\\n0 0 3\\n0 0 4\\n0 0 5') == '27'\nassert solution('4\\n0 0 0\\n0 0 1\\n0 0 2\\n0 0 3\\n0 0 4\\n0 0 5\\n0 0 6\\n0 0 7\\n0 0 8\\n0 0 9') == '30'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 0 0') == '6'\nassert solution('2\\n0 0 0\\n0 0 1') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n0 0 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2\n0 0 0\n0 0 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n1\n0 0 0\n''') == '6'\nprint('Tests finished!')\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n0 1 0') == '10'\nassert solution('3\\n0 0 0\\n0 0 1\\n0 1 2') == '7'\nassert solution('4\\n0 0 0\\n0 0 1\\n0 1 2\\n0 2 1') == '12'\nassert solution('5\\n0 0 0\\n0 0 1\\n0 1 2\\n0 2 1\\n0 3 0') == '12'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1', 'First Sample'\n\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1', 'Second Sample'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\\n') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\nassert solution('''\n8\n1 -1 1 -1 -1 -1\n-1 -1 -1 1 1 -1\n-1 -1 1 -1 -1 -1\n1 -1 -1 -1 -1 -1\n-1 1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 1\n-1 1 -1 -1 -1 -1\n-1 -1 -1 -1 1 -1\n1 -1 1 -1 1 -1 -1\n''') == '1'\nassert solution('''\n9\n1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 1\n-1 -1 1 -1 -1 -1\n-1 -1 -1 1 -1 -1\n-1 -1 -1 -1 -1 1\n1 -1 1 -1 -1 -1 -1\n-1 1 -1 -1 -1 -1 -1\n-1 -1 1 -1 -1 -1 -1\n1 -1 -1 -1 -1 -1 -1\n-1 1 1 1 1 1 -1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n-1 2 -1\n2 2\n1 -1 1\n4 -1 4\n''') == '1'\n\nassert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n3 2\n''') == '2'\n\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n\nassert solution('''20\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\n\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('7') == '1'\nassert solution('10') == '1'\nassert solution('15') == '2'\nassert solution('20') == '2'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1001') == \"3\"\nassert solution('1111') == \"1\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''101\n0\n1''') == '3'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\nassert solution('101001') == '4'\nassert solution('11111111') == '1'\nassert solution
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input.readline()) == \"3\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'\nassert solution('''\n5\n2 2 1 1 2\n''') == 'RRLLL'\n\n---Input---\n7\n1 1 1 2 2 1\n\n---Output---\nLLLL\n\n---Input---\n11\n1 1 1 2 2 1 1 1 2 2 1 1 1 1 1 1 1\n\n---Output---\nRRRRRRLL\n\n---Input---\n5\n1 2 2 1 1 1\n\n---Output---\nRRRRLLL\n\n---Input---\n3\n1 1 1\n\n---Output---\nLLL\n\n---Input---\n7\n1 2 1 1 2 2 1\n\n---Output---\nLLRRRLL\n\n---Input---\n5\n1 2 1 1 1 1\n\n---Output---\nLLRRRRLL\n\n---Input---\n3\n1 1 1\n\n---Output---\nLLL\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == 'LLL'\nassert solution('5 1 2 2 1') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2\n3 1\n''') == 'LLRLLL'\nassert solution('''\n4 2\n1 2\n3 1\n''') == 'RLLRLLRLL'\nassert solution('''\n5\n1 2\n3 1\n4 2\n''') == 'RLLRLLRLL'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"LLL\"\nassert solution('5') == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    3\n    1 1 1\n\"\"\") == \"LLL\"\n\nassert solution(\"\"\"\n    5\n    1 2 2 1 2\n\"\"\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1 1\n''') == 'LLL'\nassert solution('''\n5\n1 2 2 1 2\n''') == 'LLRLR'\n'''\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"10 10 10\") == \"600000000000010\"\nassert solution(\"3 3 3\") == \"60000000000003\"\nassert solution(\"6 6 6\") == \"60000000000006\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '25000000000021'\nassert solution('''5 5 7\n1 4 1000000\n2 3 2000000\n3 5 3000000\n4 1 5000000\n5 6 4000000\n6 2 6000000\n''') == '600000000000011'\nassert solution('''2 5 7\n1 4 1000000\n2 3 2000000\n3 5 3000000\n4 1 5000000\n5 6 4000000\n6 2 6000000\n''') == '600000000000011'\nassert solution('''2 2 7\n1 4 1000000\n2 3 2000000\n3 5 3000000\n4 1 5000000\n5 6 4000000\n6 2 6000000\n''') == '600000000000011'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n\"\"\") == \"49000000000070\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'Poor girl'\nprint(solution())\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([7, 7, 10]) == 'Poor girl'\nassert solution([6, 6, 7]) == '49000000000070'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([4,4],[0,1],[1,0],[2,3],[3,2]) == \"2\"\nassert solution([4,4],[0,1],[1,0],[2,3],[3,3]) == \"Yeah!\"\nassert solution([4,4],[0,1],[1,0],[2,3],[3,1]) == \"2\"\nassert solution([4,4],[0,1],[1,0],[2,3],[3,2]) == \"0\"\nassert solution([4,4],[0,1],[1,0],[2,3],[3,2],[3,1]) == \"2\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n0 1\n1 0\n2 3\n3 2\n''') == '2\nassert solution('''10 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n21 23\n21 24\n''') == 'yeah'"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n3\"\nassert solution(\"10 4\") == \"2\\n2\\n0\\n1\\n2\\n3\\n3\\n4\\n4\"\nassert solution(\"20 10\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"2\\n2\\n0\\n1\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n4 2\") == \"2\\n2\\n0\\n1\\n2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"0 3 1 2\"\nassert solution(\"1 2 3 4\") == \"0 2 1 1 2\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\n0 1\\n1 0\\n2 3\\n3 2') == '2'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n0\\n1\\n2\\n\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == 'Yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == \"2\\n3\\n0\\n1\\n2\\n2\"\nassert solution('4 4') == \"Yeah!\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"2\\n2\\n2\"\nassert solution(\"3 3\") == \"0\\n0\\n0\"\nassert solution(\"8 3\") == \"4\\n4\\n4\\n0\\n0\\n0\\n0\"\nassert solution(\"20 3\") == \"9\\n9\\n9\\n8\\n8\\n8\\n8\\n8\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"1 1 2\") == \"POSSIBLE\"\nassert solution(\"1 1\") == \"POSSIBLE\"\nassert solution(\"1 1 1\") == \"POSSIBLE\"\nassert solution(\"1 2\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"POSSIBLE\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2 3\") == \"POSSIBLE\"\nassert solution(\"2\") == \"IMPOSSIBLE\"\nassert solution(\"2 3\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n3 1 2 2\n''') == 'POSSIBLE\\n1 4\\n2 3\\n3 4\\n'''\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\", \"Empty input\"\nassert solution(\"2\") == \"POSSIBLE\", \"Zero degree vertex\"\nassert solution(\"2 1 1\") == \"POSSIBLE\", \"One degree vertex\"\nassert solution(\"3 1 2 3\") == \"POSSIBLE\", \"Degree 1\"\nassert solution(\"3 1 1 1\") == \"IMPOSSIBLE\", \"Two degree vertex\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 2\nSample Input 3:\n4\n1 2 3 4\nSample Output 3:\nIMPOSSIBLE\n\nSample Input 4:\n5\n1 2 1 3\nSample Output 4:\nPOSSIBLE\n1 3\n2 3\n1 4\n3 4''') == 'POSSIBLE\\n1 3\\n2 3\\n1 4\\n3 4'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 2\\n') == 'POSSIBLE\\n1 3\\n2 3\\n'\nassert solution('2\\n1 2\\n') == 'IMPOSSIBLE\\n'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1 2') == 'POSSIBLE\\n1 3\\n2 3'\nassert solution('2\\n1 2') == 'IMPOSSIBLE\\n'\n\n'''"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"POSSIBLE\"\nassert solution(\"1\\n2\") == \"POSSIBLE\"\nassert solution(\"1\\n2\\n3\") == \"IMPOSSIBLE\"\nprint(solution(input()))\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 1 2\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"\n2 1 2\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 2\n1 3\n2 3\n''') == 'POSSIBLE'\nassert solution('''\n1 1 2\n1 2\n''') == 'IMPOSSIBLE'\n'''\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''0 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.5 0.5 0.5'\nassert solution('''-1 0 0\n1 0 0\n0 1 0\n0 0 1''') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.5 0.5 0.5\""
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nprint(solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\"))\nprint(solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\"))\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 0') == '0.5 0.5 0.5'\nassert solution('1 0 0') == '0.5 0.5 0.5'\nassert solution('0 1 0') == '0.5 0.5 0.5'\nassert solution('0 0 1') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"1 0 0\") == \"0.5 0.5 0.5\"\nassert solution(\"0 1 0\") == \"0.5 0.5 0.5\"\nassert solution(\"0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.0 0.0 -0.0\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10\n3 6 2 3 2 2 2 1 5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"5\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n3 6 2 3 2 2 2 1 5 6\\n') == '2\\n3 2 2\\n6 6'\nprint('TESTS PASSED')\n\n\"\"\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '2'\nassert solution('30') == '3'"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3 6 2 3 2 2 2 1 5 6\n3 2 2\n6 6\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 6 2 3 2 2 2 1 5 6') == '2\\n3 2 2 1 5\\n3 2 2'\nassert solution('2\\n2 1\\n3 2') == '0\\n2 1\\n2 1'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 2 2 1 5\n1 5\n6 6''') == '0\nassert solution('''3\n3 2 2 1 5\n3 2 2\n6 6''') == '0\nassert solution('''3\n3 2 2 1 5\n3 2 2\n6 6\n7 7''') == '1\nassert solution('''3\n3 2 2 1 5\n3 2 2\n6 6\n7 7\n8 8''') == '1\nassert solution('''3\n3 2 2 1 5\n3 2 2\n6 6\n7 7\n8 8\n9 9''') == '0\n''')"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n6 2 3 2 2 2 1 5 6\n''') == '2\\n3 2 2\\n6 6\\n'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n17 6 2 3 2 2 2 1 5 6\n3 2 2 1 5\n3 2 2\n6 6\n''') == '2'\nassert solution('''\n10\n3 6 2 3 2 2 2 1 5 6\n3 2 2 1 5\n3 2 2\n6 6\n''') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n6 6 6''') == '0\\n6 6 6'\nassert solution('''3\n17 17 17''') == '2\\n17 17 17'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\") == \"74.6666666667\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == \"IMPOSSIBLE\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\nSample Output 2:') == \"74.6666666667\"\nassert solution('5 1 2\\n1 2 7\\n2 3 8\\n1 3\\n2 3\\nSample Output 2:') == \"74.6666666667\"\nassert solution('5 1 2\\n1 2 7\\n2 3 8\\n1 3\\n2 2\\nSample Output 2:') == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1 2\n1\n3\n2\n3\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n3 2\n1 2 7\n2 3 8\n1\n3 2\n\"\"\"\n) == \"74.6666666667\"\n\nassert solution(\n\"\"\"\n3 2\n1 2 7\n2 3 8\n1\n3 2\n\"\"\"\n) == \"IMPOSSIBLE\"\n\nassert solution(\n\"\"\"\n2 3\n1\n1\n\"\"\"\n) == \"74.6666666667\"\n\nassert solution(\n\"\"\"\n2 2\n1\n1\n\"\"\"\n) == \"IMPOSSIBLE\""
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"74.6666666667\"\nassert solution(\"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n3 2\\n1 2 7\\n2 3 8\\n1\\n3 2') == '74.6666666667'\n\nstdin = \"\"\"\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == 'IMPOSSIBLE'\nassert solution('\\n'.join(['3 2 1', '1 2 7', '2 3 8', '1'])) == '74.6666666667'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\") == \"74.6666666667\"\nassert solution(\"3 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n''') == '74.6666666667'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '2', 'TEST 1'\n\nassert solution('''\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\nSample Output 2:\n0\n''') == '0', 'TEST 2'\n\nassert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\nSample Output 2:\n0\n''') == '0', 'TEST 3'\n\nassert solution('''\n3 3\n3 2\n2 5\n4 5\nSample Output 2:\n2\n''') == '2', 'TEST 4'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '1\\n2\\n1\\n2\\n2'\nassert solution('7 7') == '0\\n1\\n2\\n2\\n2\\n2\\n2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '1'\nassert solution('5 7') == '1'\nassert solution('7 7') == '2'\nassert solution('7 5') == '2'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n') == '0'\nassert solution('7 7\\n') == '1'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"1\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'\nassert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\nSample Input 3:\n3 4\n1 2\n2 3\n3 1\nSample Output 3:\n1\n2\n1\n''') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '1\\n2\\n1\\n2\\n2\\n1'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4') == '2\\n2\\n1\\n2\\n2\\n1\\n'"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4') == '1\\n2\\n1\\n2\\n2\\n1\\n'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\\n1\\n2\\n2\\n1\\n1\\n2\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 10 2\\n0\\n15\\n30\\n45\\n\") == \"10\"\nassert solution(\n    \"4 10 3\\n0\\n15\\n30\\n45\\n\") == \"5\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'\nassert solution('4 10 3') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"10\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 10 2\") == \"10\"\nassert solution(\"4 10 3\") == \"5\"\nassert solution(\"3 10 3\") == \"5\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5'\nassert solution('''5 1 2\n1\n3\n4\n5\n''') == '4'\nassert solution('''5 5 2\n1\n2\n3\n4\n5\n''') == '6'\nassert solution('''4 2 1\n1\n2\n''') == '1'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\nprint(solution(input))\n\"\"\"\n\nn, t, g, *x = list(map(int, input().split()))\n\nxs = [0] + list(x)\n\nxs = sorted(xs)\n\nimport math"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '20'\nassert solution('4') == '13'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1', \"Not quite right\"\nassert solution('4 2') == '2', \"Not quite right\"\nassert solution('4 2 1') == '3', \"Not quite right\"\nassert solution('3 3 3') == '4', \"Not quite right\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'\nassert solution('3 5 2') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\n\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\n\nassert solution('''\n4 3\n50 50 50 50\n25 25 25 25\n25 50 50 50\n''') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1\n100\n200\n''') == '2'\nassert solution('''4\n1\n100\n200\n300\n''') == '1'\nassert solution('''6\n1\n100\n200\n100\n200\n300\n''') == '3'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 2') == '2'\nassert solution('5 2') == '3'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2\n50 50 75\n25 25 25\nSample Input 3:\n4 2\n50 50 50 50\n25 25 25 25\nSample Output 3:\n1\n''') == '2'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''\n3 1\n10 15 50\n''') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"10 2\") == \"10\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n10 100 30\n50 50 50\n25 25 25\nSample Input 3:\n6\n5 0 0 1 10\n2 9 0\n4 20 0\n5 15 0\n7 0 0\nSample Output 3:\n2\n\n''') == '1'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 2\\n50 50 75\\n25 25 25\\n\") == \"1\"\nassert solution(\n    \"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n.LX.\\n.X..\\n...L\\n.X..\\n\") == \"1\"\nassert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\\n\") == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\n.X.X') == '1'\nassert solution('4 4\\n.X.L') == '1'\nassert solution('4 4\\n.X.X') == '1'\nassert solution('4 4\\n.X.X') == '1'\nassert solution('4 4\\n.X.X') == '1'\n\"\"\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n....\n.L..\n''') == '1'\n\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..\n''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n4 4\n.XLX\n.X..\n...L\n.X..\n\"\"\") == \"1\"\nassert solution(\n    \"\"\"\n4 4\n.XLL\n.X..\n...L\n.X..\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n.LX.\n.X..\n....\n.L..''') == '1'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\nLL\nLL\nLL\nLL\nLL''') == '1'\nassert solution('''5 3\nLL.L\nLLL.L\nLL.LL\nLL.LL\nLLLLLLL\nLLLLLLL''') == '1'\nassert solution('''10 3\nLL.LLLL.L.LL.L\nLLLL.LLLLLL.LLLL.L\nLLLLLLLLLLLLLLLLLLLLLL\nLLLL.LLLL.LLLLLLLLLLLLL\nLL.LLLLLLLLLLLLLLLLLLLLLLL\nLLLLLL.LLLLLLLLLLLLLLLLLLLLLL\nLLLL.LLLL.LLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL''') == '0'\nassert solution('''5 4\n.L.X\nLL.X\nXLL\n.X\nX.L\n.L''') == '2'\nassert solution('''10 3\nLL.LLLL.L.LL.L\nLLLL.LLLLLL.LLLL.L\nLLLLLLLLLLLLLLLLLLLLLL\nLLLL.LLLL.LLLLLLLLLLLLL\nLL.LLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL''') == '4'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..''') == '1'\nassert solution('''4 4\n.XLL\n.X..\n...L\n.X..''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..\n''') == '1'\n\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..\n''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4\\n.X..\\n.X..\\n.X..\\n.X..\\n') == '1'\nassert solution('2 4\\n.X.L.\\n.L..\\n.L..\\n.L..\\n') == '2'\nassert solution('4 4\\n.X.X.\\n.X.X.\\n.X.X.\\n.X.X.\\n') == '1'"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\") == \"1\"\nassert solution(\"4 4\\n.LX.\\n.X..\\n...L\\n.X..\\n\") == \"2\""
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\nassert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2 1') == 'detention'\nassert solution('5 2 1') == 'home'\n\n'''"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'home', solution\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == 'detention', solution\nassert solution('''4 2 2\n1 1\n1 1\n1 1\n1 1\n1 1\nSample Output 3:\nhome\n2\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 4:\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 4:\ndetention\n2\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 5:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 5:\nhome\n3\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 6:\n3 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 6:\ndetention\n3\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 7:\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 7:\ndetention\n3\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 8:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 8:\nhome\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 9:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 9:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 10:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 10:\nhome\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 11:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 11:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 12:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 12:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 13:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 13:\nhome\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 14:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 14:\nhome\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 15:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 15:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 16:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 16:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 17:\n3 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 17:\nhome\n2\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 18:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 18:\nhome\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 19:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 19:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 20:\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 20:\nhome\n2\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 21:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 21:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 22:\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 22:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 23:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 23:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 24:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 24:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 25:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 25:\nhome\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 26:\n4 2 2\n1 1\n1 1\n1 1\n1 1\nSample Output 26:\ndetention\n4\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 27:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 27:\nhome\n3\n2 0 1\n2 2 3\n2 2 4\n\nSample Input 28:\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 28:\ndet"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n') == 'detention'\nassert solution('6 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n4 5\\n1 2\\n') == 'detention'\nassert solution('3 3 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n') == 'home'\nassert solution('10 5 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n5 6\\n7 8\\n1 2\\n') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'home'\n\nassert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 3:\ndetention\n5\n2 2 4 3\n3 2\n2 4 0 1\n3 4 1 2\n3 0 1''') == 'detention'\n\nassert solution('''3 1\n1 1\n2 1\n2 1\nSample Output 4:\nhome\n2\n2 0 1''') == 'home'"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == \"detention\"\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 3:\nhome\n2\n2 0 1\n2 2 3\n''') == \"home\""
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 1') == 'home'\nassert solution('4 2 1') == 'home'\nassert solution('4 1 2') == 'detention'\nassert solution('3 3 1') == 'detention'\nassert solution('2 2 2') == 'detention'\n\nstdin = '4 2 1\\n'\\\n        '1 1\\n'\\\n        '2 0 2\\n'\\\n        '2 1 3\\n'\\\n        '2 2 4\\n'\\\n        '1 3'\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\n:param stdin: str\n:return: str\n\"\"\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\""
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'allatral'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == 'alal'\nassert solution(sample_input_2) == 'allatral'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nzzzz\n''') == '-1', '3'\n\nassert solution('''\n\n''') == '-1', '4'\n\nassert solution('''\n\n''') == '-1', '5'\n\nassert solution('''\n\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzzzz\nzz"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.read()\nprint(solution(input()))\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abcd') == 'abdcd'\nassert solution('aab') == 'aba'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tralalal') == 'allatral', \"Wrong!\"\n\nassert solution('zzzz') == '-1', \"Wrong!\""
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('tralalal') == 'allatral', 'First example failed.'\nassert solution('zzzz') == '-1', 'Second example failed.'\nassert solution('abababa') == 'aba', 'Third example failed.'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\n\nassert solution('''3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '5'\nassert solution('6\\n3 2 1 6 4 5\\n') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\nassert solution('3 2 1 6 4 5') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '5'\n\nassert solution('''6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 1 3 1\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '8'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('47') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('23') == '2'\nassert solution('40') == '3'\nassert solution('101') == '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '4'\nassert solution('10') == '5'\nassert solution('18') == '2'\nassert solution('3200') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"523\") == \"2\""
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n47\n''') == '1'\nassert solution('''\n523\n''') == '2'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1''') == '1'\nassert solution('''5\n1''') == '1'\nassert solution('''50\n2''') == '1'\nassert solution('''5\n2''') == '3'\nassert solution('''1000\n10''') == '10'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"47\") == \"1\"\nassert solution(\"523\") == \"2\"\nprint(solution())\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join([\n    '1',\n])) == '1'\n\nassert solution('\\n'.join([\n    '2',\n])) == '2'\n\nassert solution('\\n'.join([\n    '47',\n])) == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''47\n523''') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''47''') == '1'\nassert solution('''523''') == '2'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n0 1 10\n1 2 10\n0 3 10''') == '0 1 15'\nprint(solution('''4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20'''))\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\\n') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('1 2 3') == '1 2 3'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"10 2\") == \"9\"\nassert solution(\"10 3\") == \"1 2\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n0 1 20\n1 0 5''') == '1 0 15'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 5') == '0'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5') == '0'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 4\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\n\nassert solution('''\n3 3\n0 1 2\n1 0 2\n0 0 1\n''') == '2'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1\\n0 1 15\\n'\nassert solution('''\n1\n0 1 10\n1 0 5\n''') == '1\\n0 1 15\\n'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3') == '5'\nassert solution('5 6\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n4 5\\n5 5\\n2 5') == '1'"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2\") == \"3\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"5 5 5 5 5\") == \"5\"\nassert solution(\"5 5 5 5 5 5\") == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '2'\nassert solution('4 3') == '2'\nassert solution('1 2 3 4') == '4'\nassert solution('4 4 4 4 4') == '3'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '1'\nprint('All test cases passed.')"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '3'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == '5'\nassert solution('''4 3\n4 4 8 12\n1 2\n2 3\n3 4\nSample Output 3:\n2\n\nSample Input 4:\n8 3\n4 4 8 12\n1 2\n2 3\n3 4\n5 6\n1 7\n2 8\n3 9\n4 10\n5 11\n6 12\n7 13\n8 14\n9 15\n10 16\n11 17\n12 18\nSample Output 4:\n2\n''') == '2'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 6\") == \"5\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == '5'\nassert solution('''\n4 3\n4 4 8 12\n1 2\n2 3\n3 4\n''') == '1'\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n''') == '0'\nassert solution('''\n4 3\n4 4 8 12\n1 2\n2 3\n3 4\n4 5\n''') == '0'\nassert solution('''\n4 3\n4 4 8 12\n1 2\n2 3\n3 4\n4 5\n1 6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '1'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '4'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0201\") == \"2\"\nassert solution(\"0113\") == \"5\"\nassert solution(\"1322\") == \"24\"\nassert solution(\"1233\") == \"21\"\nassert solution(\"1321\") == \"22\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"020302\") == \"7\"\nassert solution(\"1311\") == \"24\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0102030200') == '6'\nassert solution('110') == '1'\nassert solution('13') == '1'\nassert solution('131') == '1'\nassert solution('11') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"12345\") == \"24\"\nassert solution(\"123456\") == \"17\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2357\") == \"20\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0120\") == \"7\"\nassert solution(\"1311\") == \"24\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('00501') == '1'\nassert solution('1222') == '2'\nassert solution('1311') == '3'\nassert solution('1122') == '4'\nassert solution('1312') == '5'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1410\n''') == '20'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"7\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('030303') == '7'\nassert solution('1212') == '12'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n') == '3 1 3 10'\nassert solution('5 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.#.##.\\n###########.###...#.\\n') == '1 15 5 15'\nassert solution('1 3\\n#...##.\\n...#.#\\n...#.#\\n#.#.#.#\\n...#.#\\n...#.#\\n#.#.#.#\\n#########\\n#########\\n') == '1 1 1 3'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 5 15\") == \"1 15 5 15\"\nassert solution(\"10 10\") == \"4 4\"\nassert solution(\"4 20\") == \"2 2\""
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 10\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.\\n###########.###...#.\\n') == '1 15 5 15'\nassert solution('5 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.\\n###########.###...#.\\n') == '1 15 5 15'\nassert solution('10 20\\n###########.###.\\n##########..##.#.\\n###########.###.\\n###########.#.#.#.\\n###########.###.\\n') == '1 15 5 15'\n\nstdin = open('input.txt').read().strip()\nprint(solution(stdin))\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2 1 3 10\""
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 0.000000') == '16.339203308'\nassert solution('10 0.000001') == '16.339203308'\nassert solution('10 0.00000') == '16.339203308'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 0.10\") == \"16.339203308\"\nassert solution(\"20 0.20\") == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\"\"\"\nfrom decimal import Decimal\nfrom typing import List"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n50 0.125\n''') == '16.339203308'\nassert solution('''\n201 1.000\n''') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '16.339203308'\nassert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 2\n0.5 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n2 2\n0.5 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n2 3\n1 1\n0.5 1\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n4 3\n1 11\n0.4 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n0.3 1\n0.5 1\n0.4 1\n''') == '2'\n\nassert solution('''\n3 4\n0.3 1\n0.4 1\n0.5 1\n''') == '2'\n\nassert solution('''\n7 7\n0.5 1\n0.3 1\n0.3 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n''') == '8'\n\nassert solution('''\n7 9\n0.3 1\n0.5 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n''') == '4'\n\nassert solution('''\n8 9\n0.3 1\n0.5 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n0.2 1\n''') == '6'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0.5 1\\n1 11') == '2'\nassert solution('4 3\\n1 11\\n0.4 1') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\nprint('all tests passed')\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_1) == \"2\"\nassert solution(test_2) == \"3\"\nassert solution(test_3) == \"3\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1.0'\nassert solution('2') == '-1.0'\nassert solution('3') == '0.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"10.5\", \"Simple test\"\n\nassert solution(\"\"\"\n3\n7 1\n3 2\n10 0\n\"\"\") == \"10.5\", \"Simple test\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '10.5'\nassert solution('2') == '-1'\nassert solution('3') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n4\n0 2\n''') == '10.5', 'Wrong Answer'\nassert solution('''\n2\n3\n0 1\n''') == '-1', 'Wrong Answer'\nassert solution('''\n2\n3\n1 0\n''') == '0.5', 'Wrong Answer'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '10.5'\nassert solution('3') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"10.5\""
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '10.5'\nassert solution('3') == '10.5'\nassert solution('3') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n7 1\\n3 2\\n10 0\") == \"10.5\"\nassert solution(\"2\\n4 1\\n0 3\\n\") == \"-1\"\nassert solution(\"4\\n7 1\\n3 2\\n0 3\\n\") == \"10.5\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"10.5\""
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n7 1\n3 2\n10 0''') == '10.5'\nassert solution('''3\n0 3\n5 7\n7 0''') == '-1'\nassert solution('''2\n0 1\n1 2\n2 0''') == '2'\nassert solution('''4\n2 1\n5 3\n4 1\n3 2\n3 1''') == '-1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0.5\\n2 0.5\\n1 0.49\\n') == '2'\nassert solution('5 5 0.5\\n2 0.5\\n1 0.5\\n4 4 0.5\\n5 5 0.49\\n') == '4'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('2 0.501\\n2 0.50\\n1 0.49') == '1'\nassert solution('3 0.501\\n2 0.50\\n1 0.49') == '2'\nassert solution('8 0.501\\n2 0.50\\n1 0.49\\n3 0.49\\n4 0.49\\n5 0.49\\n6 0.49\\n7 0.49\\n8 0.49\\n9 0.49\\n10 0.49') == '8'\nassert solution('10 0.501\\n2 0.50\\n1 0.49\\n3 0.49\\n4 0.49\\n5 0.49\\n6 0.49\\n7 0.49\\n8 0.49\\n9 0.49\\n10 0.49\\n11 0.49\\n12 0.49\\n13 0.49\\n14 0.49\\n15 0.49') == '10'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49\\n') == '1'\nassert solution('1\\n') == '0'\nassert solution('1.00000001\\n') == '0'\nassert solution('1.00000000\\n') == '1'\nassert solution('1\\n') == '0'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1.1\\n1.1 1.1\") == \"1.1\"\nassert solution(\"2 0.5\\n2 0.51\") == \"1.1\"\nassert solution(\"2 0.5\\n2 0.5\") == \"1.1\"\nassert solution(\"10 0.5\\n10 0.51\") == \"1.1\"\nassert solution(\"10 0.5\\n10 0.51\") == \"1.1\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 0.5\n2 0.51\n1 0.49\n''') == '2'\nassert solution('''\n3 0.8\n3 0.01\n2 0.1\n''') == '1'\nassert solution('''\n4 0.2\n4 0.01\n4 0.1\n3 0.2\n''') == '3'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\""
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('1000000.0\\n1000000.0\\n1000000.0') == '1000000.0'\nassert solution('1000000000\\n1000000000\\n1000000000') == '1000000000'\nassert solution('-1000000000\\n-1000000000\\n-1000000000') == '-1000000000'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nassert solution('5\\n3 2 2\\n3 2 3\\n2 3 3') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nassert solution('3\\n2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('2\\n3 0.5\\n2 0.51\\n1 0.49') == '4'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"yes\"\nassert solution(\"10 4 4\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4 2\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\n\nassert solution('''\n10 20 3\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n0 1\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n83 85\n84 86\n85 87\n86 88\n87 89\n88 90\n89 91\n90 92\n91 93\n92 94\n93 95\n94 96\n95 97\n96 98\n97 99\n98 100\n99 101\n100 102\n100 103\n100 104\n99 105\n98 106\n97 107\n96 108\n95 109\n94 110\n93 111\n92 112\n91 113\n90 114\n89 115\n88 116\n87 117\n86 118\n85 119\n84 120\n83 121\n82 122\n81 123\n80 124\n79 125\n78 126\n77 127\n76 128\n75 129\n74 130\n73 131\n72 132\n71 133\n70 134\n69 135\n68 136\n67 137\n66 138\n65 139\n64 140\n63 141\n62 142\n61 143\n60 144\n59 145\n58 146\n57 147\n56 148\n55 149\n54 150\n53 151\n52 152\n51 153\n50 154\n49 155\n48 156\n47 157\n46 158\n45 159\n44 160\n43 161\n42 162\n41 163\n40 164\n39 165\n38 166\n37 167\n36 168\n35 169\n34 170\n33 171\n32 172\n31 173\n30 174\n29 175\n28 176\n27 177\n26 178\n25 179\n24 180\n23 181\n22 182\n21 183\n20 184\n19 185\n18 186\n17 187\n16 188\n15 189\n14 190\n13 191\n12 192\n11 193\n10 194\n9 195\n8 196\n7 197\n6 198\n5 199\n4 200\n3 201\n2 202\n1 203\n''') == 'yes'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"no\""
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 5 3\n2 2 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\nassert solution('''\n6 5 4\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == 'no'\nassert solution('''\n5 5 4\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n4 5 1\n0 1\n1 3\n1 2\n2 3\n''') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 4') == 'yes'\nassert solution('5 5 4') == 'no'\nassert solution('1 1 1 1') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes', \"Coding error\"\nassert solution('''4 5 2\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes', \"Coding error\"\nassert solution('''4 5 2\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'no', \"Coding error\"\nassert solution('''4 5 2\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes', \"Coding error\"\nassert solution('''5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'no', \"Coding error\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 5 2\\n\"\n    \"3 3 3 3\\n\"\n    \"0 1\\n\"\n    \"0 3\\n\"\n    \"1 3\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 2\\n\"\n) == \"yes\"\nassert solution(\n    \"5 4 4\\n\"\n    \"1 1 2 2 2\\n\"\n    \"0 1\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 2\\n\"\n) == \"yes\"\nassert solution(\n    \"6 4 4\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 2\\n\"\n    \"1 3\\n\"\n    \"1 2\\n\"\n) == \"no\"\nassert solution(\n    \"4 5 2\\n\"\n    \"3 3 3 3\\n\"\n    \"0 1\\n\"\n    \"0 3\\n\"\n    \"1 3\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 2\\n\"\n) == \"no\"\nassert solution(\n    \"8 7 8\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 5\\n\"\n    \"5 6\\n\"\n    \"6 7\\n\"\n    \"7 8\\n\"\n) == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\") == \"yes\"\nassert solution(\"4 5 2\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"yes\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"1\\n2\\n3\\n4\\n\"\nassert solution(\"2\") == \"1\\n3\\n4\\n\"\nassert solution(\"3\") == \"2\\n4\\n1\\n\"\nassert solution(\"4\") == \"3\\n1\\n2\\n\"\nassert solution(\"5\") == \"4\\n1\\n2\\n3\\n\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n5\n5\n5\n''') == '2 1 2'\nassert solution('''\n4\n20\n15\n17\n14\n''') == '5 8 2 7'\nassert solution('''\n1\n100\n10\n''') == '10 100'\nassert solution('''\n1\n10\n10\n''') == '10 10'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"4\") == \"5\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n5\n5\n5\n''') == '2 1 2'\nassert solution('''4\n20\n15\n17\n14\n''') == '5 8 2 7'\nassert solution('''5\n20\n15\n17\n14\n''') == '5 8 2 7'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n3\n4\n\"\"\") == \"\"\"\n2\n1\n2\n\n\"\"\", \"\"\"\n5\n8\n2\n7\n\"\"\")"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n5\n5\n5\n''') == '2 1 2 5'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2 1'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n5\n5\n5\n5\n''') == '2\\n1\\n2\\n7\\n'\nassert solution('''5\n5\n5\n5\n5\n''') == '2\\n1\\n2\\n7\\n'\nassert solution('''5\n5\n5\n5\n5\n''') == '2\\n1\\n2\\n7\\n'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\npython\np^ main.py\n^ -n 10\n''') == 'python main.py'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\npython\\njava\\np^ main.py\\n^ -n 10\\n') == 'python\\njava\\npython main.py -n 10'\n\nassert solution('5\\npython\\njava\\np^ main.py\\n^ -n 10\\njava\\n^ ^^^\\n') == 'python\\njava\\njava\\npython main.py -n 10\\njava\\njava'\n\nassert solution('0\\n') == ''\n\nassert solution('1\\n') == 'python'\n\nassert solution('2\\n') == 'python main.py -n 10'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\npython\nmain.py\n^ -n 10\n\"\"\") == \"python main.py -n 10\"\nassert solution(\"\"\"\n5\npython\njava\n^\n^^^\n^^^\n^\n^^\n\"\"\") == \"python java python main.py -n 10\"\nassert solution(\"\"\"\n5\npython\npython\n^\n^^^\n^^^\n^\n^^\n\"\"\") == \"python python main.py -n 10\"\n\nassert solution(\"\"\"\n3\npython\njava\n^\n^\n\"\"\") == \"python main.py -n 10\"\nassert solution(\"\"\"\n3\njava\njava\n^\n^\n\"\"\") == \"java main.py -n 10\""
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\npython\np^ main.py\n^ -n 10\n''') == 'python main.py -n 10'\nassert solution('''\n4\npython\njava\n^\n^^^\n^^^\n''') == 'python main.py -n 10 java main.py -n 10'\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n^^^\n^^^\n''') == 'python main.py -n 10 java main.py -n 10 main.py -n 10'\n''') == 'python main.py -n 10 main.py -n 10 main.py -n 10'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join(['python', 'java', 'c++', 'go'])) == 'python\\njava\\nc++\\ngo'\nassert solution('java\\njava\\npython\\n') == 'java\\njava\\npython\\n'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n$n\npython\np^ main.py\n^ -n 10\n''') == 'python python main.py python main.py -n 10'\n\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n''') == 'python python java python java -n 10'\n\nassert solution('''\n0\npython\n''') == ''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\npython\np^ main.py\n^ -n 10\n\"\"\") == \"python main.py\"\nassert solution(\"\"\"\n2\njava\np^ main.py\n^ -n 10\n\"\"\") == \"java main.py\"\nassert solution(\"\"\"\n3\npython\njava\n^\n^^^\n^^^\n\"\"\") == \"python main.py\"\nassert solution(\"\"\"\n4\npython\njava\n^\n^^^\n^ ^\n\"\"\") == \"java main.py\"\nassert solution(\"\"\"\n5\njava\njava\n^\n^^^\n^ ^\n\"\"\") == \"java main.py\""
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''python\n^ -n 10''') == 'python'\nassert solution('''python\n^ -n 10\np^ main.py''') == 'python python main.py'\nassert solution('''python\n^ -n 10\np^ main.py\n^ -n 10''') == 'python python main.py main.py'\nassert solution('''python\n^ -n 10\np^ main.py\n^ -n 10\np^ main.py''') == 'python python main.py main.py main.py'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\npython\n^\n^^^\n^^^\n^ -n 10\n''') == 'python\\npython main.py\\npython main.py -n 10'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"python\"\nassert solution(\"5\") == \"java\"\nassert solution(\"10\") == \"python python python python python python python\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\", \"First example\"\nassert solution(\"hello\") == \"impossible\", \"Second example\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('makes') == 'impossible'\nassert solution('hello') == 'impossible'\nassert solution('hitehre') == 'impossible'\nassert solution('doesnotexists') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\nassert solution('theoreth') == 'impossible'\nassert solution('pets') == 'impossible'\nassert solution('hitehre') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n\"\"\"\n\nfrom collections import Counter\n\nN = int(input())\nwords = [input() for _ in range(N)]\n\nfor word in words:\n    word = word.lower().replace(' ', '')\n    if not word:\n        continue\n    if Counter(word) == Counter(set(word)):\n        print(word)\n        break\nelse:\n    print('impossible')"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(tihssnetnceemkaesprfecetsesne) == \"this sentence makes perfect sense\", \"First solution\"\nassert solution(hitehre) == \"impossible\", \"Second solution\"\n\n\n---Part 2---\nA keylogger is a software component that records every keystroke of a user and plays them back to the user. For example, if a user presses \"a\", the software is supposed to play \"a\", and if he presses \"A\" the software is supposed to play \"A\".\n\nIf you use a keylogger, you will be unable to reproduce the exact keystrokes. But you can make a sound when you press a key and see the keystroke sound. You can use that to test whether the software is functioning correctly.\n\nIn the second part, you are going to see how to turn a string of numbers into a list of numbers using the built-in Python list function.\n\n-----Input-----\n - One line with a string $s$: the string to parse. It consists of digits and a dash \"-\" between digits.\n - One line with an integer $n$: the number of items in the list.\n - n lines: the items of the list. Items are space separated and must be valid integers.\n\n-----Output-----\nOutput one line with the list of numbers, if it is possible to create it. If it is not possible, output the sentence \u201cimpossible\u201d or \u201cambiguous\u201d, depending on which is the case.\n\n-----Examples-----\nSample Input 1:\n1-2-3-4\n4\n1 -2 -3 -4\nSample Output 1:\n[1, 2, 3, 4]\n\nSample Input 2:\n1-1-1-1-1\n3\n1 -1 -1 -1 -1\nSample Output 2:\nimpossible\nambiguous\n\nSample Input 3:\n1-1-1-1-1\n1\n1 1 1 1 1\nSample Output 3:\n[1, 1, 1, 1, 1]\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == 'this sentence makes perfect sense'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"makes perfect sense\", \"Should be'makes perfect sense'\"\nassert solution(input()) == \"impossible\", \"Should be 'impossible'\"\nassert solution(input()) == \"ambiguous\", \"Should be 'ambiguous'\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hello') == 'impossible'\n\"\"\"\nimport math\nfrom collections import defaultdict\n\ns = input()\nn = int(input())\n\nd = defaultdict(int)\nfor i in range(n):\n    word = input()\n    d[word] += 1\n\ncount = 0\nres = []\nfor i in s:\n    if i.isupper():\n        res.append(i)\n        count += 1\n    else:\n        if i.islower():\n            if d[i] > 0:\n                res.append(i)\n                d[i] -= 1\n                count += 1\n        else:\n            if count == 0:\n                res.append(i)\n                count += 1\n\nfor i in range(count):\n    if res[i].isupper():\n        res[i] = res[i].lower()\n\nprint(\"\".join(res))\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"this sentence makes perfect sense\"\n\"\"\"\n\n#################################################################################\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"4\"\nassert solution(\"3 3\") == \"12\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('1 2 3') == '32'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\""
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nprint(solution(input))\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\"\nassert solution([1, 2]) == \"4\"\nassert solution([2, 2]) == \"16\"\nassert solution([1, 2, 1, 2]) == \"4\"\nassert solution([2, 2, 1, 2]) == \"16\""
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n''') == '4', 'First'\nassert solution('''\n2 2\n''') == '16', 'Second'\nassert solution('''\n3 3\n''') == '64', 'Third'\n''')\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"4\", \"Should return the number of untileable cells\"\n\nassert solution(\"6\") == \"2\", \"Should return the number of untileable cells\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('3') == '1'\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\n''') == '2'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\nab\\ncb\\n') == '4'\nassert solution('4\\nabab\\ncba\\n') == '2'\nassert solution('3\\nab\\nabc\\n') == '4'\n\"\"\"\n\nn = int(input())\nseq = input()\nm = int(input())\npatterns = [input() for _ in range(m)]"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == '6'\nassert solution('6\\n') == '6'\nassert solution('11\\n') == '11'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('50') == '6'\nassert solution('4') == '85'\n\nimport math"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\"\n) == \"6\\n85\\n90\\n95\\n100\\n105\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20') == '5'\nassert solution('20 10') == '10'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4\\n\"\nassert solution(\"1\") == \"3\\n\"\nassert solution(\"5\") == \"5\\n\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"50\") == \"6\"\nassert solution(\"4\") == \"85\"\nassert solution(\"3\") == \"17.071067\"\n\n---"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''30\n2\n10 10\n20 10\n20 20\n''') == '5.071067'\n\nassert solution('''50\n3\n10 10\n80 10\n80 0\n110 0\n''') == '7.071067'\n\nassert solution('''50\n5\n10 10\n80 10\n80 0\n110 0\n''') == '8.071067'\n\nassert solution('''50\n4\n10 10\n80 10\n80 0\n110 0\n''') == '7.071067'\n\nassert solution('''24\n3\n10 10\n20 10\n20 20\n''') == '4.071067'"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"6\"\nassert solution(\"100\") == \"101\"\nassert solution(\"50\") == \"6\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '6'\nassert solution('24') == '4'\nassert solution('10') == '6'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"6\"\nassert solution(input_data=\"10 5 0 10 0 -1\") == \"5\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 11\n10 7\n''') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"yes\"\nassert solution(\"0 1\") == \"no\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7') == 'yes'\nassert solution('20 4') == 'no'\n\nstdin = '12 5'\nprint(solution(stdin))\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"yes\"\n\"\"\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 11\n''') == 'yes'\nassert solution('''\n10 7\n''') == 'no'\n''')\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 11\n10 7\n''') == 'yes'\nassert solution('''10 7\n10 8\n''') == 'no'\nprint(solution('''10 11\n10 7\n'''))\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3\n    3 4\n    2 5\n    1 6\n''') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('''\n    5\n    10 30\n    20 40\n    30 50\n    10 60\n    30 40\n''') == '3\\n10 60\\n30 50\\n30 40\\n10 60\\n30 50'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '''3\n10 60\n30 50\n30 40\n'''"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('8') == '2'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6''') == '3'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 4\") == \"3 4\"\nassert solution(\"2 5\") == \"2 5\"\nassert solution(\"1 6\") == \"1 6\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n3 4\n2 5\n1 6\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'\nassert solution('2\\n1 5\\n3 2\\n4 8') == '2'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"5836\"\nassert solution(\"5 2\") == \"1828\""
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\nassert solution('6 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '8718'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '8718'\nassert solution('6 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '8718'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"5836\"\nassert solution(\"5 2\") == \"1828\""
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836', 'TEST 1'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828', 'TEST 2'\nassert solution('''\n7 5\n2 4 2 4 2 2\n5 6 5 6 5\n2 3 2 3 2\n2 2 3 3\n1 2 3 3 4 5\n2 2 3 4\n1 2 3 4 5 6\n''') == '1698', 'TEST 3'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '50'\nassert solution('2') == 'impossible'\nassert solution('1') == 'impossible'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"50\"\n\nassert solution(\"\"\"\n4\n4 0 0 0\n5 0 0 0\n2 0 0 0\n1 0 0 1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n4\n4 0 0 0\n5 0 0 0\n2 0 0 0\n1 0 0 1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n6\n4 0 0 0\n5 0 0 0\n2 0 0 0\n1 0 0 1\n0 0 0 0\n3 0 0 0\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'impossible'\nassert solution('3') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n5 0 1 2\n3 4 2 3\n0 5 0 5\n6 8 6 6\n7 8 7 7\n''') == '50'\nassert solution('''\n5\n0 0 1 2\n3 4 2 3\n0 5 0 5\n6 8 6 6\n7 8 7 7\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '50'\nassert solution('2') == 'impossible'\nassert solution('3') == '50'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3]) == \"impossible\"\nassert solution([3, 1]) == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n8 100 300 200\n9 100 400 200\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'impossible'\nassert solution('2 3 4 5 1 2 3') == '1'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"50\"\nprint(solution(input()))\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n'''"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '0 0 0 0 1'\n'''"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\n\"\"\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8 3 1\n1 7 8 2 6 4 3 5\n''') == '8'\nassert solution('''\n8 2 1\n1 7 8 2 6 4 3 5\n''') == '3'\nassert solution('''\n9 8 3 1\n5 4 3 2 1 6 7 8\n''') == '10'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\\n\") == \"8\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\\n\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5\n''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5\n''') == '3'\nassert solution('''4 4 4 4 4\n1 1 2 3 4 5\n1 1 2 3 4 5\n1 1 2 3 4 5\n1 1 2 3 4 5\n1 1 2 3 4 5\n''') == '4'\nassert solution('''6 1 1 1 2 3\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n''') == '1'\nassert solution('''5 1 1 1 2 3\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n1 1 1 2 3 4 5\n''') == '2'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 3 1\") == \"4\"\nassert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n2 3 4 1\n''') == '3'\nassert solution('''\n6 3\n2 2 2 4 4 4\n''') == '4'\nassert solution('''\n4 1\n5 3 2 3\n''') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\nprint('Congratulations, solved it!')"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n2 3 4 1\n''') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4\") == \"3\"\nassert solution(\"6\\n2 2 2 4 4 4\") == \"4\"\nprint(solution(*['5\\n1 2 3 4', '6\\n2 2 2 4 4 4']))\nprint(solution(*['5\\n1 2 3 4', '6\\n2 2 2 4 4 4']))\nprint(solution(*['4\\n4', '4', '4', '4', '4', '4', '4']))\nprint(solution(*['6\\n2 2 2 4 4 4', '4', '4', '4', '4', '4', '4']))\nprint(solution(*['4\\n4', '4', '4', '4', '4', '4', '4']))\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4 4\") == \"3\"\nassert solution(\"4 6 7\") == \"5\"\nassert solution(\"8 8 8 8 8 8 8 8 8\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\nassert solution(\"10 10\") == \"8\"\nassert solution(\"8 9\") == \"9\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3') == '4'\nassert solution('4 1') == '1'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('7 4') == '3'\nassert solution('30 2') == '2'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\"\nprint(solution(*map(float, input().split())))\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1.732050') == '1.7320508000000002'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.7320508\"\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 2') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1.732050\n''') == '1.7320508798958'\nassert solution('''\n1 1 3.0\n''') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 2\n1 1 2''') == '1.732050808'\nassert solution('''1 1 5\n1 1 5''') == '1.732050811'\nprint('all tests passed')\n'''\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'\nassert solution('3') == '2.4999999987500003'\nassert solution('4') == '2.4999999987500003'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 4 2') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3 4 2\\n.75\") == \"2.4999999987500003\"\nassert solution(\"2\\n0 100 10\\n0 -100 100\\n.80\") == \"9.999999999000002\"\nprint('all test cases passed')\n\nNote:\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 4 2\\n.75\\n') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80\\n') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\""
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 4 2') == '2.4999999987500003'\nassert solution('2\\n0 100 10') == '9.999999999000002'\nprint('ALL TESTS PASSED')\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n-3 -2 -1\n.75\n\"\"\") == '2.4999999987500003'\nassert solution(\"\"\"\n1\n-1 2 3\n.75\n\"\"\") == '0.7500000000000002'\nassert solution(\"\"\"\n1\n0 1 2\n1\n\"\"\") == '1.0000000000000001'\nassert solution(\"\"\"\n2\n0 1 2\n1\n\"\"\") == '1.5000000000000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n5 4 2\n.75\n4 5 2\n.80\n''') == '9.809999999997812'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.75\n''') == '2.4999999987500003'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0.6999999942228706'\nassert solution('1') == '2.600000000000004'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 3\n2 1 6\n1 1 5 1 2\n2 1 6\nSample Input 3:\n6 5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n2 1 1\nSample Output 3:\n1\n3\n0\n1\n''') == '1'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3') == '0\\n3\\n'\nassert solution('4 5') == '3\\n2\\n1\\n0\\n'"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0\\n1\\n3\\n2\\n1\\n0\\n'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 1 5 1 2\n2 1 6\n2 3 3\n2 4 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 6\n3 4 3\n1 3 1\n1 3 2\n2 1 2\n2 2 2\n1 5 5\n2 4 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n8 7\n1 1 3 1 4 1 5 1\n2 2 2 3 1 2 2\n1 1 2 1 3 2 1\n1 4 5 1 3 2 1\n2 4 1 2 2 1 3\n1 5 5 2 3 3 1\n1 3 2 1 5 4 1\n2 2 1 1 4 1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 6\n1 1 3 1 4 1 5 1\n2 2 2 3 1 2 2\n1 1 2 1 3 2 1\n1 4 5 1 3 2 1\n2 4 1 2 2 1 3\n1 5 5 2 3 3 1\n1 3 2 1 5 4 1\n2 2 1 1 4 1 2\n\"\"\") == \"2\""
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n\nassert solution('''\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\nSample Output 2:\n3\n2\n1\n0\n''') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3\\n1 1 6\\n2 1 6\\n3 1 6\\n4 1 6\\n5 1 6\\n6 3') == '3'\nassert solution('4 5\\n1 1 5 1 2\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n2 5 5\\n2 6 6\\nSample Output 2:') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 6\n1 1 5 1 2\n2 1 6''') == '0\nassert solution('''4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4''') == '3\nassert solution('''6 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\nSample Output 3:\n3\n2\n1\n0''') == '1'''\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"2 1 6\\n\"\n    \"1 1 5 1 2\\n\"\n    \"2 1 6\\n\"\n) == \"0\\n\"\n\nassert solution(\n    \"6 3\\n\"\n    \"1 1 4 3 4\\n\"\n    \"2 1 1\\n\"\n    \"2 2 2\\n\"\n    \"2 3 3\\n\"\n    \"2 4 4\\n\"\n) == \"3\\n\"\n\nassert solution(\n    \"5 5\\n\"\n    \"1 1 5 1 2\\n\"\n    \"2 1 1\\n\"\n    \"2 2 2\\n\"\n    \"2 3 3\\n\"\n    \"2 4 4\\n\"\n    \"2 5 5\\n\"\n    \"3 3\\n\"\n) == \"2\\n\"\n\nassert solution(\n    \"1 1 5 1 2\\n\"\n    \"2 1 1\\n\"\n    \"2 2 2\\n\"\n    \"2 3 3\\n\"\n    \"2 4 4\\n\"\n    \"2 5 5\\n\"\n    \"3 3\\n\"\n) == \"1\\n\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 1 5 1 2\n1 1 5 1 2\n2 1 6\n''') == '3'\nassert solution('''\n4\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\nassert solution('''\n5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '1'\n\nimport sys\nfrom typing import List\nfrom io import StringIO\nimport unittest\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '3'\nassert solution('1 2') == '0'\nassert solution('2 2') == '0'\nassert solution('3 4') == '2'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '0', \"Need to be implemented\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 7 1000000007\nSample Output 2:\n1''') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1000000007') == '4'\nassert solution('1 7 1000000007') == '1'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n'''"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\", 'First'\nassert solution(\"3 2 1000000007\") == \"4\", 'Second'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '0'\nassert solution('2\\n3') == '1'\nassert solution('3\\n4') == '1'\nassert solution('4\\n5') == '1'\nassert solution('5\\n6') == '0'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n''') == '1'\nassert solution('''\n2\n2\n''') == '2'\nassert solution('''\n3\n3\n''') == '3'\nassert solution('''\n10\n10\n''') == '60'\nassert solution('''\n100\n100\n
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 10\\n6\") == \"5\"\nassert solution(\"3 5\\n11\") == \"8\""
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5\\n11') == '8'\nassert solution('5 5\\n11') == '8'\n\n------------------------------------\n\nTest 1:\n\nSample Input:\n1 2\n5\n\nSample Output:\n6\n\nSample Input:\n3 5\n1 2\n\nSample Output:\n1\n\nSample Input:\n5 5\n5 5\n\nSample Output:\n6\n\n------------------------------------\n\nTest 2:\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n2 5\n2 5\n\nSample Output:\n9\n\n------------------------------------\n\nTest 3:\n\nSample Input:\n5 5\n0 0\n\nSample Output:\n7\n\nSample Input:\n2 3\n11\n\nSample Output:\n4\n\nSample Input:\n1 2\n12\n\nSample Output:\n13\n\n------------------------------------\n\nTest 4:\n\nSample Input:\n3 5\n11\n\nSample Output:\n11\n\nSample Input:\n4 5\n15\n\nSample Output:\n17\n\n------------------------------------\n\nTest 5:\n\nSample Input:\n3 3\n11\n\nSample Output:\n12\n\n------------------------------------\n\nTest 6:\n\nSample Input:\n5 5\n4 4\n\nSample Output:\n12\n\nSample Input:\n3 5\n4 4\n\nSample Output:\n6\n\nSample Input:\n7 7\n9 8\n\nSample Output:\n10\n\n------------------------------------\n\nTest 7:\n\nSample Input:\n4 4\n4 4\n\nSample Output:\n10\n\nSample Input:\n4 2\n5 4\n\nSample Output:\n7\n\nSample Input:\n2 2\n2 2\n\nSample Output:\n2\n\nSample Input:\n3 5\n5 5\n\nSample Output:\n8\n\nSample Input:\n3 3\n4 3\n\nSample Output:\n8\n\nSample Input:\n5 5\n4 4\n\nSample Output:\n9\n\n------------------------------------\n\nTest 8:\n\nSample Input:\n4 4\n4 4\n\nSample Output:\n10\n\nSample Input:\n4 2\n5 4\n\nSample Output:\n8\n\nSample Input:\n2 2\n2 2\n\nSample Output:\n2\n\nSample Input:\n3 5\n5 5\n\nSample Output:\n8\n\nSample Input:\n3 4\n3 4\n\nSample Output:\n9\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n5 5\n0 0\n\nSample Output:\n6\n\nSample Input:\n3 5\n1 2\n\nSample Output:\n4\n\nSample Input:\n5 5\n1 2\n\nSample Output:\n4\n\n------------------------------------\n\nTest 9:\n\nSample Input:\n5 5\n4 5\n\nSample Output:\n6\n\nSample Input:\n5 5\n0 0\n\nSample Output:\n6\n\nSample Input:\n2 2\n2 2\n\nSample Output:\n2\n\nSample Input:\n3 3\n1 2\n\nSample Output:\n1\n\nSample Input:\n3 5\n1 2\n\nSample Output:\n2\n\nSample Input:\n4 5\n5 4\n\nSample Output:\n10\n\nSample Input:\n5 5\n3 3\n\nSample Output:\n8\n\nSample Input:\n3 4\n4 3\n\nSample Output:\n6\n\nSample Input:\n5 5\n4 4\n\nSample Output:\n10\n\nSample Input:\n5 5\n1 2\n\nSample Output:\n4\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n2 2\n3 3\n\nSample Output:\n9\n\nSample Input:\n5 5\n2 2\n\nSample Output:\n6\n\nSample Input:\n3 3\n1 2\n\nSample Output:\n1\n\nSample Input:\n5 5\n1 2\n\nSample Output:\n3\n\nSample Input:\n2 2\n3 3\n\nSample Output:\n8\n\nSample Input:\n3 4\n4 3\n\nSample Output:\n6\n\nSample Input:\n5 5\n4 4\n\nSample Output:\n10\n\nSample Input:\n5 5\n1 2\n\nSample Output:\n8\n\nSample Input:\n3 5\n2 2\n\nSample Output:\n4\n\nSample Input:\n2 3\n1 2\n\nSample Output:\n2\n\nSample Input:\n3 4\n3 4\n\nSample Output:\n6\n\nSample Input:\n3 5\n2 2\n\nSample Output:\n2\n\nSample Input:\n2 5\n5 4\n\nSample Output:\n4\n\nSample Input:\n2 2\n3 3\n\nSample Output:\n6\n\nSample Input:\n3 5\n1 2\n\nSample Output:\n3\n\nSample Input:\n5 5\n4 4\n\nSample Output:\n9\n\nSample Input:\n5 5\n1 2\n\nSample Output:\n4\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n2 2\n2 2\n\nSample Output:\n2\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n5 5\n0 0\n\nSample Output:\n6\n\nSample Input:\n3 5\n1 2\n\nSample Output:\n4\n\nSample Input:\n3 3\n4 4\n\nSample Output:\n2\n\nSample Input:\n5 5\n3 3\n\nSample Output:\n8\n\nSample Input:\n3 4\n4 3\n\nSample Output:\n6\n\nSample Input:\n5 5\n2 2\n\nSample Output:\n6\n\nSample Input:\n3 4\n4 3\n\nSample Output:\n9\n\nSample Input:\n3 5\n5 4\n\nSample Output:\n6\n\nSample Input:\n5 5\n0 0\n\nSample Output:\n6\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n2 2\n2 2\n\nSample Output:\n2\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n2 2\n3 3\n\nSample Output:\n6\n\nSample Input:\n5 5\n1 2\n\nSample Output:\n4\n\nSample Input:\n4 4\n4 4\n\nSample Output:\n10\n\nSample Input:\n5 5\n4 4\n\nSample Output:\n10\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n2 2\n3 3\n\nSample Output:\n8\n\nSample Input:\n2 2\n2 2\n\nSample Output:\n2\n\nSample Input:\n1 1\n10\n\nSample Output:\n10\n\nSample Input:\n4 4\n4 4\n\nSample Output:\n10\n\nSample Input"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\""
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\n2') == '0'\nassert solution('5 5\\n17') == '8'\nassert solution('3 3\\n5') == '4'\nassert solution('100 100\\n101') == '96'\nassert solution('5 5\\n5') == '12'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 10\n6\n''') == '5'\nassert solution('''3 5\n11\n''') == '8'\nprint('all tests passed')"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 3') == '2'\nassert solution('4 5 3') == '3'\nassert solution('1 2 3') == '1'\nassert solution('0 1 1') == '1'\nassert solution('0 3 1') == '1'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 5 3\\n\"\n    \"1 2 3\\n\"\n    \"0 1 1\\n\"\n    \"0 3 1\\n\"\n    \"0 2 1\\n\"\n    \"1 2 1\\n\"\n    \"3 2 1\\n\"\n) == \"2\"\n\nassert solution(\n    \"10 2 7\\n\"\n    \"0 1\\n\"\n    \"0 2\\n\"\n    \"0 3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 4\\n\"\n    \"2 5\\n\"\n    \"3 4\\n\"\n    \"3 5\\n\"\n    \"4 5\\n\"\n    \"4 6\\n\"\n    \"5 7\\n\"\n    \"5 8\\n\"\n    \"6 7\\n\"\n    \"6 8\\n\"\n    \"7 8\\n\"\n    \"7 9\\n\"\n    \"8 9\\n\"\n    \"8 10\\n\"\n) == \"1\"\n\nassert solution(\n    \"30 10 5\\n\"\n    \"0 1 2\\n\"\n    \"0 3 4\\n\"\n    \"0 5 6\\n\"\n    \"1 2 3\\n\"\n    \"1 3 4\\n\"\n    \"1 5 6\\n\"\n    \"2 3 5\\n\"\n    \"2 4 5\\n\"\n    \"2 5 6\\n\"\n    \"3 4 6\\n\"\n    \"3 5 6\\n\"\n    \"4 5 7\\n\"\n    \"4 6 7\\n\"\n    \"4 7 8\\n\"\n    \"4 8 9\\n\"\n    \"5 5 10\\n\"\n    \"5 6 10\\n\"\n    \"5 7 10\\n\"\n    \"5 8 10\\n\"\n    \"5 9 10\\n\"\n    \"6 6 11\\n\"\n    \"6 7 11\\n\"\n    \"6 8 11\\n\"\n    \"6 9 11\\n\"\n    \"6 10 11\\n\"\n    \"7 7 12\\n\"\n    \"7 8 12\\n\"\n    \"7 9 12\\n\"\n    \"7 10 12\\n\"\n    \"8 8 13\\n\"\n    \"8 9 13\\n\"\n    \"8 10 13\\n\"\n    \"8 11 13\\n\"\n    \"9 9 14\\n\"\n    \"9 10 14\\n\"\n    \"9 11 14\\n\"\n    \"9 12 14\\n\"\n    \"10 10 15\\n\"\n    \"10 11 15\\n\"\n    \"10 12 15\\n\"\n    \"10 13 15\\n\"\n    \"11 11 16\\n\"\n    \"11 12 16\\n\"\n    \"11 13 16\\n\"\n    \"11 14 16\\n\"\n    \"12 12 17\\n\"\n    \"12 13 17\\n\"\n    \"12 14 17\\n\"\n    \"12 15 17\\n\"\n    \"13 13 18\\n\"\n    \"13 14 18\\n\"\n    \"13 15 18\\n\"\n    \"13 16 18\\n\"\n    \"14 14 19\\n\"\n    \"14 15 19\\n\"\n    \"14 16 19\\n\"\n    \"14 17 19\\n\"\n    \"15 15 20\\n\"\n    \"15 16 20\\n\"\n    \"15 17 20\\n\"\n    \"15 18 20\\n\"\n    \"16 16 21\\n\"\n    \"16 17 21\\n\"\n    \"16 18 21\\n\"\n    \"16 19 21\\n\"\n    \"17 17 22\\n\"\n    \"17 18 22\\n\"\n    \"17 19 22\\n\"\n    \"17 20 22\\n\"\n    \"18 18 23\\n\"\n    \"18 19 23\\n\"\n    \"18 20 23\\n\"\n    \"18 21 23\\n\"\n    \"19 19 24\\n\"\n    \"19 20 24\\n\"\n    \"19 21 24\\n\"\n    \"19 22 24\\n\"\n    \"20 20 25\\n\"\n    \"20 21 25\\n\"\n    \"20 22 25\\n\"\n    \"20 23 25\\n\"\n    \"21 21 26\\n\"\n    \"21 22 26\\n\"\n    \"21 23 26\\n\"\n    \"21 24 26\\n\"\n    \"22 22 27\\n\"\n    \"22 23 27\\n\"\n    \"22 24 27\\n\"\n    \"22 25 27\\n\"\n    \"23 23 28\\n\"\n    \"23 24 28\\n\"\n    \"23 25 28\\n\"\n    \"23 26 28\\n\"\n    \"24 24 29\\n\"\n    \"24 25 29\\n\"\n    \"24 26 29\\n\"\n    \"24 27 29\\n\"\n    \"25 25 30\\n\"\n    \"25 26 30\\n\"\n    \"25 27 30\\n\"\n    \"25 28 30\\n\"\n    \"26 26 31\\n\"\n    \"26 27 31\\n\"\n    \"26 28 31\\n\"\n    \"26 29 31\\n\"\n    \"27 27 32\\"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5 3\") == \"2\"\nassert solution(\"5 5 3\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"3\"\nassert solution(\"4 5 2\\n1 2 2\\n0 1 1\\n0 3 2\\n1 2 1\\n3 2 1\\n\") == \"3\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"2\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('5 5 3') == '3'\nassert solution('5 5 3') == '3'\n\"\"\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 5 3\\n\"\n    \"1 2 3\\n\"\n    \"0 1 1\\n\"\n    \"0 3 1\\n\"\n    \"0 2 1\\n\"\n    \"1 2 1\\n\"\n    \"3 2 1\\n\"\n    \"# This is a sample test case\"\n    \"\") == \"2\"\n\nprint(solution(\n    \"4 5 3\\n\"\n    \"1 2 3\\n\"\n    \"0 1 1\\n\"\n    \"0 3 1\\n\"\n    \"0 2 1\\n\"\n    \"1 2 1\\n\"\n    \"3 2 1\\n\"\n    \"# This is a sample test case\"\n    \"\")\n)\n\n\"\"\"\n\nN, M, C = (int(i) for i in stdin.split())\n\nclients = []\nfor _ in range(C):\n    clients.append([int(i) for i in stdin.split()])\n\nINF = float('inf')\ndistances = [[INF for _ in range(N)] for _ in range(N)]\n\ndistances[0][0] = 0\n\nfor client in clients:\n    distances[client[0]][client[1]] = client[2]\n\nfor i in range(N):\n    for j in range(N):\n        if distances[i][j] == INF:\n            distances[i][j] = 0"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('4 5 3') == '3'\nassert solution('6 5 3') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 2\n1 2 1\n3 2 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n\"\"\") == \"3\""
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3', 'Should be 3'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3 1\n10\n10\n1 10\n1 10\n1 10\n\"\"\"\n) == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == '3'\nassert solution('4 3') == '3'\nassert solution('4 3') == '3'\nassert solution('4 3') == '3'\nassert solution('4 1') == '4'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n3 2\n10\n10\n1 10\n1 10\n1 10\n''') == '2'\nassert solution('''\n1\n1\n2\n''') == '2'\nassert solution('''\n2\n0\n0\n''') == '0'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n5 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\n\n'''\n\n'''\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\") == \"3\"\nassert solution(\"1 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\") == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\nassert solution('''\n4 3\n1 2\n2 3\n3 4\n''') == '3'\nassert solution('''\n3 1\n2 2\n3 3\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '1'\nassert solution(3) == '5'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '5'\nassert solution('2') == '1'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '0'\nassert solution('7') == '1'\nassert solution('10') == '3'\nassert solution('25') == '8'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\nassert solution('''\n5 5\n0 1 2 5\n0 3 2 5\n0 4 1 2\n0 0 1 2\n0 1 0 1\n0 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n0 11 9\\n1 0 10\\n0 0 0') == '2'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 1, 0, 11, 9, 1, 0, 0, 0, 5, 0, 3, 0, 0, 0]) == \"2\"\nassert solution([4, 3, 0, 19, 0, 0, 2, 0, 0, 0, 0, 0, 0, 5, 0, 3, 0, 0, 0]) == \"3\"\nassert solution([10, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1\n0 11 9\n1 0 10\n0 0 0''') == '2'\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '2'\nassert solution('3 1') == '2'\nassert solution('4 3') == '-1'\nassert solution('4 0') == '0'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"2\") == '2'\nassert solution(\"3\") == '2'\nassert solution(\"4\") == '3'\nassert solution(\"5\") == '5'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\""
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1\\n0 11 9') == '2'\nassert solution('5 2\\n0 0 0 19') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 3') == '-1'\nassert solution('10001 2') == '10101'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == solution_expected_output\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 0 3\") == \"4 2 1\"\nassert solution(\"3 2 0 3\") == \"2 1 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n''') == '3 2 2\\n1 3 1\\n0 1 2\\n1 2 1\\n2 2 1\\n'''\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10''') == '3 4 2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 1 2'\nassert solution('10 1 0 0') == '10 1 2'\nassert solution('10 2 1 0') == '10 1 2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n\"\"\") == \"4 3 5\"\nassert solution(\"\"\"\n1 1 0 1\n0 1 100000\n\"\"\") == \"1 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == '3 5'\nassert solution('''\n2 3\nS.M\nM..\n''') == '2 0'\n'''\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3 5'\nassert solution('2 3') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\nSM\\nM.M') == '3 5'\nassert solution('2 3\\nS.M\\nM..') == '2 0'\nassert solution('3 3\\nS.M.M.S.M.S.M.S.M.S.M.S.S.S.S.S.S.S\\nM.S.M.M.S.M.S.M.S.S.S.M.S.S.S.S.S\\nS.M.M.S.M.S.S.M.S.S.S.M.S.S.S.S\\nS.S.M.S.M.S.S.M.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S.S.S.S.S\\nS.S.S.S.S.S.S.S.S.S.S.S."
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 1\nMSMM\nMMM\n\"\"\") == \"3 5\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\""
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\nSMS') == '3 5'\nassert solution('2 3\\nS.M') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3 5\"\nassert solution(\"2 4\") == \"4 0\"\nassert solution(\"5 3\") == \"0 0\""
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3 5'\nassert solution('2 3') == '2 0'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\nSMS\\nMMS') == '3 5'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(samples[0]) == \"3 5\"\nassert solution(samples[1]) == \"2 0\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('11') == '10'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('6') == '6 b'"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 B\n1 B\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n5\n0 B\n1 B\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 2:\n1\n6 b\n''') == '6 b'\nassert solution('''\n3\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\nassert solution('''\n4"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\nassert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 2:\n1\n6 b\n''') == '3'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 1 a\n1 1 b\n2 2 c\n3 3 d\n4 4 e\n5 5 f\n6 6 g\n7 7 h\n8 8 i\n9 9 j\n10 10 k\n11 11 l\n12 12 m\n13 13 n\n14 14 o\n15 15 p\n''') == '1 c'\n\nassert solution('''\n1 1 a\n2 1 b\n3 3 d\n4 4 e\n5 5 f\n6 6 g\n7 7 h\n8 8 i\n9 9 j\n10 10 k\n11 11 l\n12 12 m\n13 13 n\n14 14 o\n15 15 p\n''') == '1 c'\n\nassert solution('''\n13 0 B\n12 1 T\n4 3 e\n11 2"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2', 'Should return the minimum number of labels that need changing.'\nassert solution('1\\n0 B\\n1 S') == '1', 'Should return the minimum number of labels that need changing.'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\nassert solution('''\n7\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n5 E a\n''') == '2'\nassert solution('''\n15\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n5 E a\n6 G a\n6 T a\n7 E a\n7 S\n10 E a\n10 G b\n1 T a\nSample Output 3:\n5\n6 b\n''') == '5'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\nprint(solution(input()))\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"40\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12\n56789\n''') == '80'\nassert solution('''\n9999999999\n''') == '9999999999'\nassert solution('''\n1312\n0\n
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"40\"\n\nsolution(input())\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nprint(solution(input()))\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1 5\\n'\n    '1 5\\n'\n) == '40'\n\"\"\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nprint(solution(input()))\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"COG\"\nassert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COG\"\nassert solution(\"5\\nCAT\\nDOG\\nCOT\\nBAT\") == \"BAT\"\nassert solution(\"6\\nCAT\\nDOG\\nCOT\\nBAT\\nHUM\\nLAT\") == \"BAT\"\nassert solution(\"12\\nCAT\\nDOG\\nCOT\\nBAT\\nHUM\\nLAT\\nDOG\\nHUM\\nBAT\\nCOT\\nDOG\\nCOT\\nBAT\\nHUM\\nBAT\\nBAT\\nDOG\\nCOT\\nHUM\\nCOT\\nBAT\\nBAT\\nDOG\\nCOT\\nDOG\") == \"COT\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\"2\", \"CAT\", \"DOG\", \"COT\"]) == \"COG\"\nassert solution([\"1\", \"CAT\", \"DOG\", \"COT\"]) == \"0\"\nassert solution([\"0\", \"CAT\", \"DOG\", \"COT\"]) == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\nCAT\nDOG\n''') == 'CAT'\n\nassert solution('''\n3\nCAT\nDOG\nCOT\n''') == 'DOG'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'CAT'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'COG'\nassert solution('2') == '0'\n\n\"\"\""
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\nCAT\nDOG\nCOT\n''') == 'COG'\nassert solution('''\n2\nCAT\nDOG\n''') == '0'\n\n'''\n\nimport re\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"COG\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nCAT\\n\") == \"CAT\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"COG\"\nassert solution(\"3\\nCAT\\nDOG\\nCOT\\n\") == \"COG\"\nassert solution(\"4\\nCAT\\nDOG\\nCOT\\n\") == \"CAT\"\nassert solution(\"5\\nCAT\\nDOG\\nCOT\\n\") == \"DOG\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nA\\nB\\nC\\nD') == 'D'\nassert solution('2\\nA\\nB\\nC\\nD') == 'D'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\nCAT\\nDOG\\nCOT\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\\nCOT\") == \"0\"\nassert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COT\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('10 1') == '9'\nassert solution('5 1') == '8'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '9'\nassert solution('10 1') == '8'\nassert solution('100 3') == '7'\n\nimport sys\n\nn, c = list(map(int, input().split()))"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n1\n''') == '9'\n\nassert solution('''\n2 5\n2\n''') == '7'\n\nassert solution('''\n5 5\n4\n''') == '7'\n\nassert solution('''\n3 4\n1\n''') == '6'\n\nassert solution('''\n4 4\n3\n''') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 3') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 1\n''') == '9', 'TEST 1'\nassert solution('''\n4 3\n''') == '6', 'TEST 2'\n\nassert solution('''\n10 6\n''') == '0', 'TEST 3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 3') == '2'\n\nN, C = map(int, input().split())\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"10 2\") == \"7\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"8 7\") == \"9\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\nassert solution('15 1') == '1'\nassert solution('1 1') == '0'\nassert solution('10 0') == '0'\nprint('OK')\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\nassert solution('2 3\\nH..V') == '-1'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"3\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 5\n..#..\n.V.#.\nV.#.\\\nV.\\#.\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5\n.V.\n.V.\n.V.\n.V.\n.V.''') == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"-1\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"2 5\") == \"1\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n/#.##\\\n.##..#\\\n.#####\\\n.#.##.\\\n.##.##\\\n''') == '3'\n\nassert solution('''\n5 5\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 5\n/V.V.V.\\\n.V.V.V.\n..#..V.\\\n.V.#.V.\n.V.V.V.\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == '3'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"2 5\") == \"-1\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    1\n    2\n    3\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n    1\n    2\n    3\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n    1\n    2\n    3\n    4\n    5\n\"\"\") == \"AMBIGUOUS\"\n\nassert solution(\"\"\"\n    1\n    2\n    3\n    4\n    5\n    6\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"AMBIGUOUS\"\n\nassert solution() == \"AMBIGUOUS\"\n\nassert solution() == \"AMBIGUOUS\"\n\nassert solution() == \"AMBIGUOUS\"\n\nassert solution() == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n7\\nfox jumps over\\nThe lazy dog') == 'AMBIGUOUS', 'Solution is not correct!'\nassert solution('4\\n7\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS', 'Solution is not correct!'\nassert solution('3\\n-1\\n2\\n-1') == 'AMBIGUOUS', 'Solution is not correct!'\nassert solution('3\\n1\\n-1\\n-1') == 'AMBIGUOUS', 'Solution is not correct!'\nassert solution('8\\n1\\n-1\\n-1\\n-1\\n-1\\n1') == 'AMBIGUOUS', 'Solution is not correct!'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nabcdefg\\n') == 'AMBIGUOUS'\nassert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg\\n') == 'AMBIGUOUS'\nassert solution('10\\nabcdefg\\n') == 'AMBIGUOUS'\nassert solution('2\\nabcdefg\\n') == 'AMBIGUOUS'\n\n\"\"\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\njumpl\\nover') == 'AMBIGUOUS'\nassert solution('10\\njumps i\\ne.o.g') == 'AMBIGUOUS'\nassert solution('10\\njumps i\\ne.o.g.') == 'AMBIGUOUS'\nassert solution('10\\njumps i\\ne.o.g.') == 'AMBIGUOUS'\nassert solution('10\\njumps i\\ne.o.g.') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\nn fox jumps ove') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS'\nassert solution('1\\n') == 'AMBIGUOUS'\nassert solution('2\\n0\\n') == 'AMBIGUOUS'\nassert solution('3\\n3\\n4\\n5\\n6\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7\\n'\n    'n fox jumps ove\\n'\n    'uick brown f\\n'\n    'The quick b\\n'\n    'y dog\\n'\n    'rown fox\\n'\n    'mps over the l\\n'\n    'The lazy dog\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == \"AMBIGUOUS\"\nassert solution('''\n3\nrofl \n\n''') == \"rofl\"\nassert solution('''\n1\nabcd\n''') == \"AMBIGUOUS\"\nassert solution('''\n6\nsgtq \n\n''') == \"AMBIGUOUS\"\nassert solution('''\n7\na    b c   d\ne    f\n\n''') == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\n' + input() + '\\n') == 'The quick brown fox jumps over the lazy dog'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('n fox jumps ove\\nuck brown f\\nThe quick b\\ny dog.') == 'The quick brown fox jumps over the lazy dog.'"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+-0+--'\nassert solution('''\n3 2\n1 2 1\n-2 0 2\n''') == '0+-0+--'\nassert solution('''\n3 2\n1 2 1\n0 3 1\n''') == '0--+'\nassert solution('''\n3 2\n1 2 1\n-2 0 2\n''') == '0+--+'\nassert solution('''\n3 2\n1 2 1\n-2 0 2\n''') == '0+--+'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1') == \"--+0-\"\n\nassert solution('1 2\\n-2 -2 4\\nSample Output 2:') == \"0+-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '--+0-', solution('5 6')\nassert solution('3 2') == '0+-', solution('3 2')"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"--+0-\"\nassert solution(\"3 2\") == \"0+-\"\nassert solution(\"4 5 1\") == \"--+0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"--+0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 3\") == \"+-0-\"\nassert solution(\"3 2\\n1 2 1\\n-1 1 2\\n0 1 4\") == \"0+-+\"\nassert solution(\"3 3\\n1 2 1\\n-1 1 2\\n0 1 4\") == \"impossible\"\nassert solution(\"100 1\\n-2 -2\") == \"--+0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"impossible\"\n\"\"\"\n\nn, m = map(int, input().split())\n\nships = []\nfor _ in range(m):\n    ships.append(list(map(int, input().split())))\n\nsolutions = {}\n\nfor ship in ships:\n    start = ship[:2]\n    target = ship[2:]\n\n    if start[0] + start[1] < target[0] + target[1]:\n        solutions[start] = \"impossible\"\n    else:\n        if (start[0] + start[1] - target[0] - target[1]) > n:\n            solutions[start] = \"impossible\"\n        else:\n            if (target[0] + target[1]) > n:\n                solutions[start] = \"impossible\"\n            else:\n                if (start[0] + start[1]) > target[0] and (start[0] + start[1]) > target[1]:\n                    solutions[start] = \"0-\"\n                elif (target[0] + target[1]) > start[0] and (target[0] + target[1]) > start[1]:\n                    solutions[start] = \"+-\"\n                else:\n                    if (start[1] + start[0]) > target[0] and (start[1] + start[0]) > target[1]:\n                        solutions[start] = \"0+\"\n                    else:\n                        if (target[0] + target[1]) > start[0] and (target[0] + target[1]) > start[1]:\n                            solutions[start] = \"0+\"\n                        else:\n                            solutions[start] = \"impossible\"\n\nprint(','.join(solutions[list(solutions.keys())[0]]))\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+--+-0-0-0--+-0+--+-0-0-0--+-0--+--0-0-0-0--+--0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--0-0-0-0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+-0+--+-0-0-0--0--+"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"0+-\"\n\"\"\"\n\nn, m = list(map(int, input().split()))\nships = []\nfor i in range(m):\n    x1, y1, x2, y2 = list(map(int, input().split()))\n    ships.append([x1, y1, x2, y2])"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == \"impossible\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 1\n1 1\n1\n1 1 1\n2 2 2\n''') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 1\n1 1\n1''') == '1'\nassert solution('''2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\nSample Input 3:\n10 7\n10 10\n10 10 10 10 10\n10 10\n10 10\n10 10 10 10 10 10 10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10 10 10 10 10 10 10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 1 1\n1 1\n2 3\n1 1 1\n1 1\n1 1\n2 3\n1 1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '2'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 1\\n1 1\\n1') == '1'\nassert solution('2 2\\n1 2\\n2 3\\n2') == '4'\nassert solution('2 2\\n1 2\\n2 3\\n2') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"2 3 1 5\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB''') == 'YES'\nassert solution('''4 6\nWRRRW\nWRRRW\nWRRRW\nWBBBB\nWRRRW\nWRRRW''') == 'NO'\nassert solution('''4 8\nWRRRG\nWRRRG\nWRRRG\nWBBBB\nWRRRG\nWRRRG\nWRRRG\nWBBBB''') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == 'YES'\nassert solution('4 5') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\nWWRR\nWRRR\nWRRR\n''') == 'YES'\nassert solution('''4 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\nassert solution('''4 4\nWWRR\nWRRR\nWRRR\nWBBBB\n''') == 'NO'\nassert solution('''4 4\nWRRR\nWRRR\nWRRR\nWBBBB\n''') == 'YES'\nassert solution('''4 4\nWRRR\nWRRR\nWRRR\nWBBBB\n''') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\", f\"Your solution does not pass the assertion test. Please check your code again.\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == 'NO'\nassert solution('10 10') == 'YES'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\nWWRR\nWRRR\n''') == \"NO\"\n\nassert solution('''\n4\nWRRR\nWRRR\nWRRR\nWBBBB\n''') == \"YES\"\n\nassert solution('''\n5\nWWRRG\nWRRRG\nWRRRG\nWBBBB\n''') == \"YES\"\n\nassert solution('''\n5\nWWRRG\nWRRRG\nWRRRG\nWBBBB\n''') == \"NO\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3 5\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 3 5\n1\n2\n3\n3\n2\n1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5 1\n1\n2\n3\n2\n1''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1\nSample Output 3:\n2\n\nSample Input 4:\n4 3 5\n1\n2\n3\n4\nSample Output 4:\n1\n''') == '1'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1\nSample Output 3:\n2''') == '2'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3 5\n1\n2\n3\n3\n2''') == '1'\nassert solution('''4 3 5\n1\n2\n3\n3\n2''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1\nSample Output 3:\n3\n''') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\nassert solution(\"7 4 1\") == \"4\"\nassert solution(\"6 4 5\") == \"2\"\n\n--Input\nSample Input 1:\n2 3 2\n1\n2\n3\n4\nSample Output 1:\n1\n\nSample Input 2:\n3 3 5\n2\n4\n4\n3\n4\nSample Output 2:\n2\n\nSample Input 3:\n5 3 5\n1\n2\n2\n3\n3\nSample Output 3:\n1\n\"\"\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 5\n1\n2\n3''') == '1'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3 5\"\n    \"1\"\n    \"2\"\n    \"3\"\n    ) == \"1\"\n\nassert solution(\n    \"6 3 5\"\n    \"1\"\n    \"2\"\n    \"3\"\n    \"3\"\n    \"2\"\n    \"1\"\n    ) == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 5\n1\n2\n3\n3\n2\n1''') == '1'\nassert solution('''6 3 5\n1\n2\n3\n3\n2\n1\n''') == '3'\nprint('All tests passed!')"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3 2'\nassert solution('5') == '12 3'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2\n1 3\n1 4\n2 4\n2 3\n2 4\n3 2\n3 4\n4 4\n''') == '12 3'\n\nassert solution('''\n10\n0 0\n1 0\n1 1\n2 2\n3 0\n4 1\n4 1\n5 2\n6 2\n7 1\n7 2\n8 2\n9 2\n10 2\n''') == '12 2'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3 2\"\nassert solution(\"5\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2\n1 2\n3 3\n''') == '3 2'\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 2\n1 3\n3 3\n\"\"\") == \"3 2\"\nassert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\"\nassert solution(\"\"\"\n5\n1 4\n1 5\n2 5\n3 4\n3 5\n\"\"\") == \"7 5 8 9\"\nassert solution(\"\"\"\n1\n0 2\n1 3\n3 3\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n1\n0 1\n1 3\n3 3\n\"\"\") == \"1 2 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 2\n1 2\n3 3\n''') == '3 2'\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\nassert solution('''\n13\n0 1\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n''') == '13 5'\n\n'''\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2 2'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2'\nassert solution('5') == '12 3'\nassert solution('6') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 2\n1 2\n3 3\n''') == '3 2'\n\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"100\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"100\"\nassert solution(\"3\") == \"00101\"\nassert solution(\"4\") == \"1010101\"\nassert solution(\"5\") == \"0110010001\""
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0\\n0\\n0\\n3\\n0\\n0\\n0\\n\") == \"100\\n000\\n010\\n010\\n\"\nassert solution(\"3\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n\") == \"100\\n011\\n010\\n010\\n\"\nassert solution(\"3\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n\") == \"100\\n011\\n010\\n010\\n\"\nassert solution(\"3\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n\") == \"100\\n011\\n010\\n010\\n\"\nassert solution(\"3\\n0\\n0\\n1\\n0\\n0\\n0\\n1\\n0\\n0\\n\") == \"100\\n011\\n010\\n010\\n\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"100\"\nassert solution(\"3\") == \"100\"\nassert solution(\"4\") == \"0100\"\nassert solution(\"5\") == \"0101\"\nassert solution(\"6\") == \"0110\""
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n0 1 1\n1\n1 1\n0\n1\n0\n''') == '100101010'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '100'\nassert solution('3') == '0110'\nassert solution('3') == '0110'"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '00'\nassert solution('2') == '010'\nassert solution('3') == '0010'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"100\\n000\\n010\\n000\\n001\\n011\\n010\\n001\""
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0\n1 1\n1\n1 1\n1\n1\n\"\"\") == \"\"\"0000\n1001\n0010\n101\n010\"\"\".strip(), \"Solution\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '100'\nassert solution('3') == '0101'\nassert solution('5') == '1001'\nassert solution('6') == '01010'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\nassert solution('''\n8 3\n1 3\n4 6\n7 8\n2 5\n2 3\n5 6\n6 7\n''') == '1'\nassert solution('''\n12 3\n1 3\n4 6\n7 8\n2 5\n2 3\n5 6\n6 7\n''') == '0'\nassert solution('''\n12 4\n1 3\n4 6\n7 8\n2 5\n2 3\n5 6\n6 7\n''') == '0'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\n\nassert solution(\"\"\"\n1 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"4\"\n\nprint(solution())"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n1 1\n1 2\n2 3\n2 3\n''') == '2'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1\n1 2\n2 3\n2 3''') == '2'\nassert solution('''4 1\n1 3\n4 6\n7 8\n2 5''') == '3'\nprint('All tests passed!')"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution('''3 1\n1 2\n2 3\n2 3\n''') == '2'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 2\\n2 3') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n'''"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n1 2\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500 -100 0') == '0'\nassert solution('5 6 500 -100 100') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 400') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '90.00000000'\nassert solution('''5 5 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '126.86989765'\nassert solution('''1 2 5 100\n0 100\n0 100\n100 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == 'Impossible'\nassert solution('''5 7 3\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7''') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"126.86989765\"\nassert solution(\"5 6 500\") == \"Impossible\"\nassert solution(\"5 6 500\") == \"Impossible\"\nassert solution(\"5 6 500\") == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 450\") == \"126.86989765\"\n\"\"\"\n\nfrom math import acos, degrees\n\nn, r, d = map(int, input().split())\n\njunc = {}\nfor _ in range(n):\n    x, y = map(int, input().split())\n    junc[x] = y"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 450') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '126.86989765'\nassert solution('5 6 500') == 'Impossible'\nassert solution('5 6 1000') == 'Impossible'\nassert solution('5 7 1000') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"126.86989765\"\nassert solution(\"5 6 500\") == \"0.00000000\"\nassert solution(\"5 6 500\") == \"Impossible\""
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 400') == '99.99999999'\nassert solution('5 6 3000') == 'Impossible'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '90.00000000'\nassert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '126.86989765'\nassert solution('''5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == 'Impossible'"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''37\n5\n4\n''') == '4\\n8 29\\n9 28\\n11 26\\n15 22\\n'\n\nassert solution('''30014\n''') == '7\\n85 29929\\n88 29926\\n785 29229\\n788 29926\\n7785 22229\\n7788 22226\\n7789 22225\\n'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\n'''\n\n'''"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\"\"\"\nimport unittest"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\nprint('All tests passed!')"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\nassert solution('10') == '1'\nassert solution('100') == '1'\nassert solution('900') == '1'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2.0'\nassert solution('3 3 2') == '2.0'\nassert solution('2 3 1') == '3.5'"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2 1\n''') == '2.5'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 1\n3\n4\n''') == '3.5'\nassert solution('''3 3 2\n3\n4\n''') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2.5'\nassert solution('3 3 2') == '3.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3 1\n''') == '3.5'\nassert solution('''\n3 3 2\n''') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\""
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n\"\"\"\n\nfrom math import sqrt\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(11000)\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '19'\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\nassert solution('15 5 1 5') == '0'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"19\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"1 12\") == \"4\""
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1 5\n2 12\"\"\") == \"4\"\nassert solution(\"\"\"1 12\n2 1\"\"\") == \"1\"\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7') == '3'\nassert solution('1 2 3 4 5 6 7') == '6'\nassert solution('2 3 5 1 4 7 8') == '7'\nassert solution('3 4 5 6 1 2') == '2'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '2'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('1 4') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5\\n') == '4'\nassert solution('1 12\\n') == '4'"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()[:-1]"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n'''"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\"\n\n\nimport sys\nsys.path.insert(0, '..')\nimport utils\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''car\ncocar\ncocara''') == '1'\nassert solution('''ccaa\naac\nbcd''') == '2'\nassert solution('''iit\nit''') == '1'\nassert solution('''iit\nit''') == '1'\nassert solution('''iit\nit''') == '1'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n\"\"\"\n\nfrom collections import defaultdict\n\nalphabet = set(['a', 'e', 'i', 'o', 'u'])"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n'''\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 2 3\n''') == '4'\n\nassert solution('''10\n3 2 4 5 1\n''') == '2'\n\nassert solution('''20\n4 5 6 7 1\n''') == '7'\n\nassert solution('''30\n3 4 4 4 8 1\n''') == '10'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1000000 1 1 1\n''') == '0'\nassert solution('''\n3\n1000000 1 1 1\n''') == '1000000'\nassert solution('''\n3\n100 10 1 2\n''') == '10'\nassert solution('''\n3\n1000000 1 1 1\n''') == '100'\nassert solution('''\n3\n1000000 1 1 1\n''') == '9'\n'''\n3\n1000000 1 1 1\n''') == '9'\n'''\n3\n1000000 1 1 1\n''') == '9'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n1000000 1 1 1\n''') == '1000000'\n'''\n3\n1000000 1 1 1\n''') == '1000000'\n'''\n3\n1000000 1 1 1\n''') == '1000000'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n1000000 1 1 1\n''') == '9'\n'''\n3\n1000000 1 1 1\n''') == '9'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n1000000 1 1 1\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n1000000 1 1 1\n''') == '9'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10 1 2\n''') == '100'\n'''\n3\n100 10"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '8'\nassert solution('1000000 1 1 1 1') == '0'\nassert solution('1000000 1 1 1 1 10000000') == '0'\n'''\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '8'\nassert solution('5') == '0'\nassert solution('6') == '1048576'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '8'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nassert solution('5\\n1000000 1 1 1 1') == '0'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100\") == \"100\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 2 2 1\\n\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\\n\") == \"0\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 128\n''') == 'zyz'\nassert solution('''\n1 193\n''') == '-1'\nassert solution('''\n2 2\n''') == '-1'\nassert solution('''\n2 7\n''') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-\"\n\nassert solution(\"2 3\") == \"abab\"\n\nassert solution(\"2 2\") == \"abab\"\n\nassert solution(\"2 1\") == \"abc\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 650\\n\") == \"zyz\"\nassert solution(\"2 651\\n\") == \"-\"\nassert solution(\"2 20\\n\") == \"-\"\nassert solution(\"20 10\\n\") == \"zyz\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == -1\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\"\nassert solution(\"3 100\") == \"a\"\n\n------Sample test------\nSample Input 1:\n2 97\nSample Output 1:\n-1\n\nSample Input 2:\n2 98\nSample Output 2:\na\n\nSample Input 3:\n3 100\nSample Output 3:\na\n\nSample Input 4:\n3 101\nSample Output 4:\na\n\nSample Input 5:\n2 5\nSample Output 5:\n-1\n\nSample Input 6:\n3 6\nSample Output 6:\na\n\nSample Input 7:\n3 7\nSample Output 7:\na\n\nSample Input 8:\n3 8\nSample Output 8:\na\n\nSample Input 9:\n3 9\nSample Output 9:\na\n\nSample Input 10:\n3 10\nSample Output 10:\n-1\n\nSample Input 11:\n2 100\nSample Output 11:\n-1\n\nSample Input 12:\n2 101\nSample Output 12:\na\n\nSample Input 13:\n2 102\nSample Output 13:\n-1\n\nSample Input 14:\n2 103\nSample Output 14:\na\n\nSample Input 15:\n2 104\nSample Output 15:\n-1\n\nSample Input 16:\n2 105\nSample Output 16:\na\n\nSample Input 17:\n2 106\nSample Output 17:\n-1\n\nSample Input 18:\n2 107\nSample Output 18:\na\n\nSample Input 19:\n2 108\nSample Output 19:\n-1\n\nSample Input 20:\n2 109\nSample Output 20:\na\n\nSample Input 21:\n2 110\nSample Output 21:\n-1\n\nSample Input 22:\n2 111\nSample Output 22:\na\n\nSample Input 23:\n2 112\nSample Output 23:\na\n\nSample Input 24:\n2 113\nSample Output 24:\na\n\nSample Input 25:\n2 114\nSample Output 25:\na\n\nSample Input 26:\n2 115\nSample Output 26:\n-1\n\nSample Input 27:\n2 116\nSample Output 27:\na\n\nSample Input 28:\n2 117\nSample Output 28:\na\n\nSample Input 29:\n2 118\nSample Output 29:\n-1\n\nSample Input 30:\n2 119\nSample Output 30:\na\n\nSample Input 31:\n2 120\nSample Output 31:\n-1\n\nSample Input 32:\n2 121\nSample Output 32:\na\n\nSample Input 33:\n2 122\nSample Output 33:\n-1\n\nSample Input 34:\n2 123\nSample Output 34:\na\n\nSample Input 35:\n2 124\nSample Output 35:\n-1\n\nSample Input 36:\n2 125\nSample Output 36:\na\n\nSample Input 37:\n2 126\nSample Output 37:\na\n\nSample Input 38:\n2 127\nSample Output 38:\na\n\nSample Input 39:\n2 128\nSample Output 39:\na\n\nSample Input 40:\n2 129\nSample Output 40:\n-1\n\nSample Input 41:\n2 130\nSample Output 41:\na\n\nSample Input 42:\n2 131\nSample Output 42:\na\n\nSample Input 43:\n2 132\nSample Output 43:\na\n\nSample Input 44:\n2 133\nSample Output 44:\na\n\nSample Input 45:\n2 134\nSample Output 45:\na\n\nSample Input 46:\n2 135\nSample Output 46:\n-1\n\nSample Input 47:\n2 136\nSample Output 47:\na\n\nSample Input 48:\n2 137\nSample Output 48:\na\n\nSample Input 49:\n2 138\nSample Output 49:\na\n\nSample Input 50:\n2 139\nSample Output 50:\na\n\nSample Input 51:\n2 140\nSample Output 51:\na\n\nSample Input 52:\n2 141\nSample Output 52:\n-1\n\nSample Input 53:\n2 142\nSample Output 53:\na\n\nSample Input 54:\n2 143\nSample Output 54:\na\n\nSample Input 55:\n2 144\nSample Output 55:\na\n\nSample Input 56:\n2 145\nSample Output 56:\na\n\nSample Input 57:\n2 146\nSample Output 57:\na\n\nSample Input 58:\n2 147\nSample Output 58:\n-1\n\nSample Input 59:\n2 148\nSample Output 59:\na\n\nSample Input 60:\n2 149\nSample Output 60:\na\n\nSample Input 61:\n2 150\nSample Output 61:\na\n\nSample Input 62:\n2 151\nSample Output 62:\na\n\nSample Input 63:\n2 152\nSample Output 63:\n-1\n\nSample Input 64:\n2 153\nSample Output 64:\na\n\nSample Input 65:\n2 154\nSample Output 65:\na\n\nSample Input 66:\n2 155\nSample Output 66:\na\n\nSample Input 67:\n2 156\nSample Output 67:\n-1\n\nSample Input 68:\n2 157\nSample Output 68:\na\n\nSample Input 69:\n2 158\nSample Output 69:\n-1\n\nSample Input 70:\n2 159\nSample Output 70:\na\n\nSample Input 71:\n2 160\nSample Output 71:\na\n\nSample Input 72:\n2 161\nSample Output 72:\n-1\n\nSample Input 73:\n2 162\nSample Output 73:\na\n\nSample Input 74:\n2 163\nSample Output 74:\na\n\nSample Input 75:\n2 164\nSample Output 75:\n-1\n\nSample Input 76:\n2 165\nSample Output 76:\na\n\nSample Input 77:\n2 166\nSample Output 77:\n-1\n\nSample Input 78:\n2 167\nSample Output 78:\na\n\nSample Input 79:\n2 168\nSample Output 79:\n-1\n\nSample Input 80:\n2 169\nSample Output 80:\na\n\nSample Input 81:\n2 170\nSample Output 81:\na\n\nSample Input 82:\n2 171\nSample Output 82:\n-1\n\nSample Input 83:\n2 172\nSample Output 83:\na\n\nSample Input 84:\n2 173\nSample Output 84:\na\n\nSample Input 85:\n2 174\nSample Output 85:\na\n\nSample Input 86:\n2 175\nSample Output 86:\na\n\nSample Input 87:\n2 176\nSample Output 87:\n-1\n\nSample Input 88:\n2 177\nSample Output 88:\na\n\nSample Input 89:\n2 178\nSample Output 89:\n-1\n\nSample Input 90:\n2 179\nSample Output 90:\na\n\nSample Input 91:\n2 180\nSample Output 91:\n-1\n\nSample Input 92:\n2 181\nSample Output 92:\na"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1 2\n2 1\n2 2\n''') == '-1'\n\nassert solution('''\n3 3\n2 2\n1 1\n1 1\n1 2\n1 2\n1 3\n1 4\n''') == 'zyz'\n\nassert solution('''\n1 3\n1 3\n1 4\n''') == '-1'\n\nassert solution('''\n2 2\n1 1\n1 1\n''') == '-1'\n\nassert solution('''\n2 3\n2 3\n1 1\n1 1\n1 2\n1 3\n''') == 'zyz'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\"\nassert solution(\"3 1\") == \"-1\"\nassert solution(\"3 2\") == \"zyz\"\nassert solution(\"3 3\") == \"-1\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '4'\nassert solution('2\\n4\\n0 2 0\\n2 1 1\\n4 4 0\\n2 0 0\\n3 3 1\\n2 3 1\\n') == '6'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n10\\n1\\n2\\n2\\n1\\n3\\n1\\n3\") == \"5\\n8\\n\"\n\"\"\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\") == \"4\"\nassert solution(\"10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\") == \"8\"\nprint(solution(input()))\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n''') == '4'\nassert solution('''\n10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1\n''') == '8'"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 10 0\\n10 0 1\\n12 8 1') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '4'\nassert solution('10') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0') == '8'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '4'\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '4'\nassert solution('20') == '8'\nassert solution('10 1 1') == '4'\nassert solution('10 2 1') == '6'\nassert solution('10 3 1') == '4'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 3\\n3 4 5 7\\n1 2 10\\n\") == \"0\"\nassert solution(\"3 5 2\\n1 4 7 9 11\\n2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n3 4 5 7\\n1 2 10\\n\") == '0'\nassert solution(\"2 3\\n3 4 5 7\\n1 2 10\\n\") == '1'\nassert solution(\"1 2 3\\n3 4 5 7\\n1 2 10\\n\") == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\nassert solution('''\n2 4\n1 2\n''') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '-1'\nassert solution(input_string=\"2 4 3\\n3 4 5 7\\n1 2 10\\n\") == '0'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0', 'First'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2', 'Second'\nassert solution('''\n3 5 2\n1 2 10\n3 4 5 7\n2 3\n''') == '0', 'Third'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\nassert solution('''\n3 5 2\n3 4 5 7\n1 2 10\n''') == '-1'\nassert solution('''\n3 5 2\n3 4 5 7\n2 3\n''') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n3 4\n''') == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n3 2\n''') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"-2 -1\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '2'\nassert solution('2 2\\n4 4') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3\"\n) == \"1\"\nassert solution(\n    \"1 2\"\n) == \"2\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"2\"\n) == \"0\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"4\""
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA') == '4'\nassert solution('5\\nMARICA\\nMARTA\\nMARA\\nMARTINA') == '24'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nIVO\\nJOSIPA\\n') == '4'\nassert solution('1\\nIVO\\nJASNA\\n') == '4'\nassert solution('1\\nIVO\\nMARA\\n') == '4'\nassert solution('1\\nMARIC\\nMARTINA\\n') == '4'\nassert solution('1\\nMARICA\\nMARTA\\n') == '4'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\nIVO\nJASNA\nJOSIPA\n''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n''') == '24'\nassert solution('''10\nMALAYA\nBUDDY\nKAITLIN\nJASPEN\nDAVIS\nMARTINA\nDAVID\nHAGEN\nHALLE\n''') == '138'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\") == \"4\\n\", \"3\\nIVO\\nJASNA\\nJOSIPA\"\nassert solution(\"4\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"24\\n\"\nassert solution(\"5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"26\\n\"\nassert solution(\"6\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\") == \"28\\n\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"4\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1', \"wrong answer\"\nassert solution('2') == '0', \"wrong answer\"\nassert solution('3') == '1', \"wrong answer\"\nassert solution('4') == '1', \"wrong answer\"\nassert solution('5') == '2', \"wrong answer\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4', \"Wrong solution\"\n\nSample Input 3:\n3\nMARTHA\nMARTHA\nMARTHA\nSample Output 3:\n1\n\nSample Input 4:\n4\nMARTHA\nMARTA\nMARY\nMARY\nSample Output 4:\n1\n\nSample Input 5:\n5\nMARTHA\nMARTHA\nMARTHA\nMARTHA\nMARY\nMARY\nMARY\nMARY\nSample Output 5:\n4\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 2 3 1\n3 1 5 6\n1 9 4 7''') == '39'\nassert solution('''4\n1 2 3 2\n3 1 5 6\n1 9 4 7\n2 5 3 2''') == '60'\nassert solution('''4\n1 2 3 2\n3 1 5 6\n1 9 4 7\n2 5 3 2''') == '60'"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2 2 3 1\n3 1 5 6\n1 9 4 7\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n2 3 1 4 5\n3 4 1 2 5\n4 5 1 2 3\n5 1 2 3 4\n\"\"\") == \"41\"\nassert solution(\"\"\"\n5\n1 3 5 2 3\n2 2 4 2 3\n3 3 3 3 3\n4 3 1 1 3\n5 5 2 3 3\n\"\"\") == \"37\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n\"\n    \"1 2 3 1\\n\"\n    \"2 3 4 1\\n\"\n    \"3 4 5 1\\n\") == \"39\"\nassert solution(\n    \"3\\n\"\n    \"2 2 3 8\\n\"\n    \"3 1 5 6\\n\"\n    \"1 9 4 7\\n\") == \"63\"\nprint('PASSED!')\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 3 1') == '3'\nassert solution('3 2 3 1') == '3'\nassert solution('3 2 3 2') == '5'\nassert solution('3 2 3 3') == '0'\nassert solution('3 2 3 4') == '6'\n\n'''"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('2 2 3 1') == '3'\nassert solution('3 2 3 1') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 2 3 8\n3 1 5 6\n1 9 4 7''') == '39'\nassert solution('''3\n2 2 3 8\n3 1 5 6\n1 9 4 7''') == '39'\nassert solution('''3\n3 1 1 4\n4 5 2 8\n1 9 7 7''') == '2'\nassert solution('''3\n4 5 1 2\n1 2 8 1\n9 1 1 1''') == '9'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 2 3 1') == '3'\nassert solution('3\\n2 3 4 1') == '39'\nassert solution('3\\n1 5 6 1') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 3\\n3 2\\n') == '3'\nassert solution('1\\n2 2\\n3\\n') == '1'\nassert solution('1\\n2 4\\n3\\n') == '2'\nassert solution('1\\n2 3\\n3\\n') == '1'\nassert solution('2\\n2 3\\n3\\n') == '1'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 1') == '3'\nassert solution('2 2 3 8') == '39'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '9.2696518641'\nassert solution('''\n3\n8 9 3 -14 -14 14 -14 0 20\n10 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '15.2329995729'\nassert solution('''\n1\n8 9 3 -14 -14 14 -14 0 20\n''') == '8.90628006949'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"9.0\"\nprint(solution())\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 3 6 -2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"6.82670373\"\nassert solution(\"2\\n1 0 5 -1 -1 2 5\\n2 0 0 2\") == \"2.2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"5.2696518641\"\nassert solution(\"1\\n8 9 3 -14 -14 14 -14 0 20\") == \"9\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n10 4 -1 -1 1 -1 1 1 -1 1\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9.696518641'\nassert solution('2') == '9.696518641'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''\n1\n8 9 3 -14 -14 14 -14 0 20\n''') == '9'\nassert solution('''\n10\n-12 14 -4 -1 -6 -2 -4 -2 -1 -4 -6 -1 -2 -1 0 0 -4 -3 -6 -2 -4 -6 -4 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1 0 0 -3 -2 -1 -4 -6 -4 -2 -1"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1''') == '5.2696518641'\nprint('Tests passed')\n\"\"\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"3\\n2 0 2\") == \"8\"\nassert solution(\"3\\n4 1 1\") == \"4\"\nassert solution(\"3\\n5 2 3\") == \"24\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3') == '8'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '8'\nassert solution('5') == '4'\nassert solution('6') == '24'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1\\n2 0 2\\n3 1 1') == '1'\nassert solution('3\\n4 1 1\\n5 2 3\\n5 0 3') == '8'\nassert solution('5\\n2 5 5 5 5') == '24'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 0 2\") == \"8\"\nassert solution(\"3 1 1\") == \"4\"\nassert solution(\"4 1 1\") == \"24\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 1 1\n2 0 2\n3 1 1\n''') == '1'\nassert solution('''3\n4 1 1\n5 2 3\n5 0 3\n''') == '8'\nassert solution('''2\n2 1 1\n3 0 2\n''') == '-1'\nassert solution('''3\n2 1 1\n3 1 1\n''') == '4'\nassert solution('''1\n2 1 1\n3 1 1\n''') == '3'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\\n5 2 3\\n5 0 3\") == \"8\"\nassert solution(\"3\\n3 0 1\\n5 1 3\\n5 2 1\") == \"4\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\nassert solution(\"\"\"\n10\n5 1 1\n3 2 3\n7 1 1\n7 0 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 2]) == \"3\"\nassert solution([6, 6]) == \"240\""
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3,2]) == \"3\""
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"6 6\") == \"240\"\nassert solution(\"3 4\") == \"12\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n3\n''') == '3'\nassert solution('''6 6\n240''') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nassert solution('1000000 3') == '1'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2''') == '3'\nassert solution('''6 6''') == '240'\nassert solution('''10 10''') == '928989525227616724900533791578195818997839382592064331478982037760304096371808628887052419165091734357533643370753370746599056066994513892477555767555778680276749786719288719638671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928671963928"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 1\n9 2\n6 2\n4 1\n1 4\n2 3\n3 2\n4 3\n4 4\n4 2\n4 1\n3 4\n2 4\n1 3\n4 3\n1 4\n1 3\n4 1\n2 4\n4 3\n3 4\n2 3\n3 1\n2 4\n2 1\n4 2\n3 4\n3 1\n3 4\n2 2\n3 1\n3 2\n3 4\n2 1\n3 1\n4 3\n1 1\n2 4\n2 3\n1 2\n3 2\n4 1\n2 4\n2 1\n4 1\n2 3\n2 2\n1 4\n3 4\n2 4\n2 1\n4 3\n1 4\n2 1\n3 4\n2 4\n1 2\n4 3\n3 4\n2 1\n3 1\n3 4\n2 4\n4 3\n4 3\n4 1\n2 1\n4 4\n3 1\n3 2\n2 4\n2 2\n3 4\n2 1\n1 2\n4 4\n1 4\n4 1\n3 4\n2 1\n2 4\n4 3\n4 1\n3 4\n4 1\n2 3\n1 1\n3 4\n2 1\n4 3\n1 1\n3 1\n4 2\n3 4\n1 3\n1 2\n3 2\n4 1\n1 4\n4 3\n2 2\n4 3\n3 4\n4 2\n3 2\n3 1\n1 3\n3 1\n2 4\n1 4\n4 4\n4 3\n4 1\n1 2\n3 1\n1 4\n3 2\n2 4\n3 1\n3 2\n1 3\n1 4\n2 3\n1 2\n4 4\n4 4\n3 1\n4 3\n2 1\n1 4\n3 4\n1 2\n4 1\n1 2\n2 4\n3 1\n4 2\n3 2\n4 1\n1 3\n1 2\n2 4\n2 3\n3 2\n1 2\n4 4\n3 1\n2 1\n4 3\n1 4\n4 1\n1 2\n1 1\n1 4\n3 4\n3 2\n3 1\n1 3\n2 4\n2 1\n3 4\n1 4\n4 1\n2 4\n4 3\n4 1\n2 3\n1 1\n1 4\n3 4\n1 2\n4 3\n2 3\n4 3\n1 4\n2 1\n2 4\n2 1\n2 4\n1 1\n4 1\n4 3\n1 4\n3 1\n1 2\n1 4\n1 4\n4 1\n2 3\n1 4\n2 3\n1 4\n3 1\n4 1\n1 2\n2 1\n3 4\n2 4\n3 1\n2 3\n2 4\n3 2\n2 2\n1 3\n3 1\n2 1\n1 3\n4 2\n4 2\n3 1\n2 4\n1 3\n3 2\n3 1\n4 1\n3 2\n4 4\n1 4\n3 1\n3 1\n2 4\n2 4\n1 2\n3 1\n1 4\n4 1\n1 4\n4 3\n1 1\n1 4\n2 4\n2 3\n2 3\n3 4\n1 3\n1 4\n1 4\n1 4\n4 1\n2 1\n1 1\n3 1\n3 1\n2 3\n3 1\n3 2\n1 1\n1 3\n2 3\n1 4\n1 4\n3 1\n1 1\n2 4\n1 1\n1 4\n2 1\n1 4\n2 4\n1 4\n2 3\n3 2\n1 4\n1 4\n4 3\n2 1\n3 4\n2 4\n1 3\n3 1\n1 3\n1 1\n4 3\n2 4\n2 4\n1 2\n1 4\n2 3\n2 4\n1 1\n4 1\n2 3\n2 1\n2 4\n3 2\n2 4\n4 1\n2 3\n2 1\n3 1\n1 3\n2 1\n1 1\n2 1\n1 3\n3 1\n4 4\n3 4\n1 3\n2 4\n3 1\n2 1\n1 1\n1 3\n3 1\n2 1\n1 2\n2 1\n3 1\n2 1\n3 1\n2 4\n1 1\n4 3\n3 1\n2 4\n1 4\n1 1\n3 1\n3 1\n1 3\n1 1\n1 3\n1 1\n1 1\n1 1\n1 4\n1 1\n2 2\n2 2\n3 2\n4 2\n4 1\n1 1\n1 2\n2 1\n1 4\n2 4\n1 4\n1 3\n2 4\n2 3\n1 1\n1 4\n1 4\n1 4\n1 1\n2 4\n1 2\n4 3\n1 3\n4 1\n4 2\n4 1\n4 1\n2 4\n2 2\n1 2\n2 4\n1 1\n1 1\n2 3\n1 1\n1 4\n2 1\n1 3\n2 1\n1 4\n1 2\n1 1\n1 2\n2 1\n2 4\n2 4\n3 1\n3 1\n2 3\n2 1\n3 2\n1 3\n1 2\n3 1\n1 1\n1 2\n1 1\n1 2\n1 2\n1"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '3'\nassert solution('2\\n3\\n4') == '6'\nassert solution('1\\n5\\n6') == '24'\nassert solution('4\\n5\\n6') == '12'\nassert solution('4\\n6\\n5') == '12'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\nprint('You are done!')\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"impossible\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\nassert solution(\"C+B=A\") == \"2+1=3\"\n\n\"\"\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '14'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2 1') == '14'\nassert solution('4 0 1 2 3') == '1'\nassert solution('5 1 1 2 1') == '1'\nassert solution('4 4 3 2 1') == '3'\nassert solution('4 0 1 2 3') == '0'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '14'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0 1 2 3\n''') == '14'\nassert solution('''5\n1 1 2 1 1\n''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '14'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '14'\nassert solution('4 5 2 3 1') == '1'\nassert solution('10 10 10 10 10') == '10'\nassert solution('100 11 12 13 14') == '1'\nassert solution('1000 1001 1002 1003') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 3\\n\") == \"14\"\nassert solution(\"5\\n1 1 2 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n5 5\n1 2 3 0\n0 0 5 6\n0 0 7 8\n0 0 0 10\n0 0 0 11\n''') == '41'\nassert solution('''\n10 5\n0 0 5 6\n0 0 7 8\n0 0 0 10\n0 0 0 11\n0 0 0 12\n0 0 0 13\n0 0 0 14\n0 0 0 15\n0 0 0 16\n0 0 0 17\n0 0 0 18\n0 0 0 19\n''') == '62'\nassert solution('''\n10 5\n1 2 3 0\n0 0 5 6\n0 4 7 8\n0 0 0 10\n0 0 0 11\n0 0 0 12\n0 0 0 13\n0 0 0 14\n0 0 0 15\n0 0 0 16\n0 0 0 17\n0 0 0 18\n0 0 0 19\n''') == '62'\nassert solution('''\n5 5\n1 2 3 0\n0 0 5 6\n0 4 7 8\n0 0 0 10\n0 0 0 11\n0 0 0 12\n0 0 0 13\n0 0 0 14\n0 0 0 15\n0 0 0 16\n0 0 0 17\n0 0 0 18\n0 0 0 19\n''') == '62'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2 3\\n4 5 6') == \"88\"\nassert solution('5 5\\n1 2 3 4\\n5 6 7 8\\n9 10 11 12\\n13 14 15 16\\n17 18 19 20\\n21 22 23 24') == \"84\"\nassert solution('6 6\\n1 2 3 4 5\\n6 7 8 9 10\\n11 12 13 14 15\\n16 17 18 19 20 21\\n21 22 23 24 25 26\\n') == \"68\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n\"\"\") == \"88\"\nassert solution(\"\"\"\n4 4\n1 2 3 0\n0 0 5 6\n0 8 7 8\n7 0 0 10\n\"\"\") == \"-1\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == '88'\nassert solution('''2 5\n0 0 1 2 3 0\n0 0 4 5 6''') == '-1'\nassert solution('''5 5\n0 0 1 2 3 4\n0 5 6 7 8 9\n10 11 12 13 14 15\n16 17 18 19 20 21\n22 23 24 25 26 27''') == '36'\nassert solution('''3 2\n0 0 1\n0 0 0\n0 1 0''') == '0'\nassert solution('''3 2\n0 0 1\n0 0 0\n0 1 0''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '88'\nassert solution('5 5') == '88'\nassert solution('4 4') == '88'\nassert solution('3 3') == '88'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88', \"First\"\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1', \"Second\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"88\"\nassert solution('''\n1 1\n1 2 2\n1 3 3\n''') == \"1\"\nassert solution('''\n10 10\n5 9 8 3 4 7 6 5 2 1\n''') == \"10\"\nassert solution('''\n2 2\n1 1 2\n2 2 3\n''') == \"2\"\nassert solution('''\n6 6\n1 1 2 2 3 2\n1 2 1 2 3 4\n1 3 3 3 3 1\n2 3 2 3 4 1\n3 1 3 2 3 1\n2 2 1 3 3 4\n''') == \"6\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"5 5\\n1 2 3 4 5\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0\\n\") == \"28\"\nassert solution(\"3 3\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"-1\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == '88'\nassert solution('1\\n2\\n0\\n') == '1'\nprint(solution('''\n2\n4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n\n'''))\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0.000\"\nassert solution(\"1\") == \"0.000\"\nassert solution(\"2\") == \"9.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\nassert solution('''\n3\n1 10\n1 10\n1 10\n''') == '10.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n1 1\n''') == '0.000'\n\nassert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\n\nassert solution('''\n3\n1 99999\n99999 99999\n9999 8\n''') == '9999500002.000'\n\nassert solution('''\n4\n1 99999\n99999 99999\n9999 8\n9999 8\n''') == '99999000000000000.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n1 1\n''') == '0.000'\nassert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 1') == '0.000'\nassert solution('2\\n1 99999') == '9999700002.000'\nassert solution('2\\n99999999 9999999') == '10000000000000.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 1') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('1 1') == '0.000'\nassert solution('2') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.000\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n4 1 2 3\n1 2 1\n1 3 5\n1 5 2\n''') == 'Infinity'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '5'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Impossible'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5''') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('6 8 1 6') == 'Impossible'\nassert solution('3 4 1 2') == 'Impossible'\nassert solution('3 4 1 2') == '3'\nassert solution('3 4 1 2') == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n4 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == '3'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\\n1 2\\n\") == \"3\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\\n1 3 6 5 4\\n\") == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\"\n) == \"3\"\nassert solution(\n    \"3 4 1 2\\n1 2 6\\n1 3 2\\n1 2 7\\n2 3 3\\n2\"\n) == \"Infinity\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\nassert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == 'Infinity'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('6 1') == '000'\nassert solution('5 1') == '010'\nassert solution('2 3') == '111'"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n1\") == \"impossible\"\nassert solution(\"3 1\\n1\") == \"000\"\nassert solution(\"4 1\\n1\") == \"001\"\nassert solution(\"5 1\\n1\") == \"011\"\nassert solution(\"6 1\\n1\") == \"010\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 1\n1\"\"\") == \"impossible\"\nassert solution(\"\"\"6 1\n1\"\"\") == \"000\"\nassert solution(\"\"\"6 1\n2\"\"\") == \"impossible\"\nassert solution(\"\"\"6 2\n1\"\"\") == \"111\"\nassert solution(\"\"\"6 3\n1\"\"\") == \"110\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1\n1''') == 'impossible'\nassert solution('''6 1\n1''') == '000'\nassert solution('''3 2\n1 2''') == '001'\nassert solution('''6 2\n1 2''') == '011'\nassert solution('''3 3\n1 2 3''') == '100'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6 1\n1\nSample Input 3:\n10 1\n1\nSample Output 3:\nimpossible\n\nSample Input 4:\n7 1\n1\nSample Output 4:\n000\n001\n011\n010\n110\n111\n101\n100\n\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 1\n1\nSample Output 3:\n000\n001\n011\n010\n110\n111\n101\n100''') == 'impossible'\n\nassert solution('''3 1\n1\nSample Output 4:\n000\n001\n011\n010\n110\n111\n101\n100''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"impossible\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1\\n1') == 'impossible'\nassert solution('3 1\\n1') == '000'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\nassert solution('90') == '10'"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\\n99\\n\") == \"1\"\nassert solution(\"90\\n10\\n\") == \"10\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\n99\") == \"1\"\nassert solution(\"90\\n10\") == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\nassert solution(\"01\") == \"1\"\nassert solution(\"101\") == \"0\"\nassert solution(\"-10\") == \"0\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n99\n''') == '1'\nassert solution('''\n100\n10\n''') == '11'\nassert solution('''\n99\n100\n''') == '10'\nassert solution('''\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"10\\n99\"\n) == \"1\"\nassert solution(\n    \"90\\n10\"\n) == \"10\"\nprint(\"You're done!\")\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"90\") == \"10\"\nassert solution(\"99\") == \"10\"\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\nprint('All tests passed!')\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 3\\n4 1 10\\n2 7 3\\n') == '1'\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\\n') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('5') == '3'\nassert solution('6') == '2'\nassert solution('7') == '5'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '2'\nassert solution('10') == '1'\nassert solution('7') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 3 3\n4 1 10\n2 7 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n\"\"\") == \"1\"\nprint('Congratulations!')"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\n\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n\nassert solution('''5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n\nassert solution('''6\n3 1 3 3\n5 8 7 10\n4 1 2 6\n7 1 8 2\n''') == '2'\n\nassert solution('''7\n3 1 3 3\n5 8 7 10\n4 1 2 6\n7 1 8 2\n1 1 1 1\n''') == '3'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 3') == '2'\nassert solution('4\\n4 1 10\\n3 1 2 6') == '1'\nassert solution('4\\n5 8 7 10\\n3 1 2 6') == '0'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 3\\n4 1 10') == '2'\nassert solution('2\\n3 1 3 3') == '1'\nassert solution('4\\n5 8 7 10') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 3 3\n4 1 10\n2 7 3\n''') == '1'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '5', solution\nassert solution('4 8') == '11', solution\nassert solution('1 9') == '16', solution\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '5'\nassert solution('1 5') == '4'\n'''\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9 3') == '5'\nassert solution('6 1') == '7'\n\"\"\"\nimport itertools\n\nn, q = list(map(int, input().split()))\nstring = list(input())\n\nfor i in range(q):\n    l, r = list(map(int, input().split()))\n    print(len(set(itertools.permutations(string[l-1:r]))))\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1\\nvelvet') == '7'\nassert solution('4 5\\n7 8\\n1 9\\n1 4') == '16'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 3') == '5'\nassert solution('6 1') == '7'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"beginning\") == \"5\"\nassert solution(\"velvet\") == \"7\"\nassert solution(\"shiny gold\") == \"11\"\nassert solution(\"abcab\") == \"12\"\nassert solution(\"one two three\") == \"3\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '7'\n'''\nimport sys"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('beginning') == '5'\nassert solution('velvet') == '7'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    1 2\n    2 3\n    ''') == '3'\n\nassert solution('''\n    4\n    1 2\n    3 1\n    4 2\n    ''') == '6'\n\nassert solution('''\n    6\n    1 2\n    3 1\n    5 4\n    ''') == '7'\n\nassert solution('''\n    4\n    2 5\n    5 3\n    1 2\n    ''') == '9'\n\nassert solution('''\n    7\n    6 1\n    1 5\n    1 2\n    5 3\n    1 4\n    4 6\n    ''') == '16'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '11'\nassert solution('6 1') == '7'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 4\n1 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 4\n1 1\n2 2\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n1 1\n2 2\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 3\n1 23\n2 17\n1 1\n\"\"\") == \"23\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 1\n2 2\n1 1\n''') == '23'\nassert solution('''3 5\n1 4\n2 2\n1 3\n1 5\n''') == '5'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 3\n1 23\n2 17\nSample Output 2:\n23\n\"\"\") == \"23\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    3 4\n    3 1\n    2 2\n    1 1\n    \"\"\") == \"2\"\nassert solution(\n    \"\"\"\n    5 6\n    5 2\n    4 5\n    3 5\n    2 5\n    1 2\n    \"\"\") == \"5\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    5 5\n    3 1\n    2 2\n    1 1\n    \"\"\") == \"23\"\n\nassert solution(\"\"\"\n    10 5\n    3 2\n    1 3\n    2 2\n    4 4\n    1 1\n    3 1\n    2 2\n    \"\"\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\n1 1\n3 2\n2 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5\n1 2\n2 3\n2 4\n1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 6\n1 2\n2 3\n3 4\n4 5\n5 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n10 10\n1 2\n2 3\n3 4\n4 5\n5 5\n6 6\n6 7\n6 8\n6 9\n7 8\n7 9\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == '2'\nassert solution('1 23') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '2'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '2'\nassert solution('10 4') == '9'\nassert solution('100 3') == '99'\nassert solution('10 4') == '1'\nassert solution('10 5') == '0'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n\"\"\") == \"0.0000000000\"\nassert solution(\"\"\"\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n\"\"\") == \"9.476048311178\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '0.0000000000'\nassert solution('6') == '9.476048311178'\n\n\"\"\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '0.0000000000'\nassert solution('6') == '9.476048311178'\nprint('Everything passed')\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\nassert solution('6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0') == '9.476048311178'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '0.0000000000'\n\"\"\"\n\nfrom math import sqrt\nfrom math import pi\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0.0000000000\"\nassert solution(\"4\") == \"0.0000000000\"\nassert solution(\"10\") == \"5.7777777778\"\nassert solution(\"100\") == \"12.499999998\"\nassert solution(\"10000\") == \"0.0000000000\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '0.0000000000'\nassert solution('4') == '0.0000000000'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.0000000000'\nassert solution('7') == '0.0000000000'\n\nimport sys"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '1.0'\nassert solution('4') == '0.9999999999999'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0\n2 0\n2 2''') == '0.0000000000'\n\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0''') == '9.476048311178'\n\nassert solution('''4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3''') == '0.0'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0.0 0\\n-0.2 0\\n0 0.20') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0 0.20') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 0\n1 1\n0 2\n-2 0\n0 -2\n''') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0.0 0\\n-0.2 0\\n0 0.20') == '8.0000000000'\nassert solution('5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('4') == '4.0000000000'\nassert solution('1') == '2.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"0.5\"\nassert solution('5') == \"8.0000000000\"\nassert solution('10') == \"0.00000000000000000000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 0\n1 1\n0 2\n-2 0\n0 -2\n''') == '8.0000000000'\nassert solution('''\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '0.0200000000'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n1 1 1 1\n2 2 2 2\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 1 2 2 2 2 2\n''') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"7 5 3\\n\"\n    \"1 1 9 9 1 6 6 39 9\\n\"\n) == \"2\"\nassert solution(\n    \"10 2 2\\n\"\n    \"1 1 1 1 1 2 2 2 2 2\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1 1 2 2 2 2 2') == '2'\nassert solution('4 4 3') == '2'\nassert solution('10 2 2') == '2'\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3\") == \"1\"\nassert solution(\"7 4 5\") == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10 4 3\n1 1 9 9 1 6 6 39 9\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 3 3\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 5 3\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 4 2\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 2\n2 1 2 1 1''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"9 4 3\") == \"2\"\nassert solution(\"10 2 2\") == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution([int(i) for i in stdin.split(' ')]) == \"2\""
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''8 3 2\n1 1 9 9 1 6 6 39 9\n''') == '1'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 11 4') == '20.000000000'\nassert solution('2 2') == '1.33333333333'\nassert solution('3 3') == '2.5'\nassert solution('2 3') == '2.0'\nassert solution('4 4') == '2.5'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 11 4\\n10 10 10 10') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"3.666666667\"\nassert solution(\"4 11 4\") == \"20.000000000\""
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\nassert solution('1 2 3') == '3.666666667'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 2') == '3.666666667'\nassert solution('5 1 2') == '3.3333333333'\nassert solution('3 3 3') == '9.0'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 1234') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n''') == '2'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\nassert solution('7 42') == '6'\nassert solution('9 5') == '20'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 42\n5 123456789''') == '16317634'\nassert solution('''1 12\n123''') == '42'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 42\n5 123456789''') == \"2\"\nassert solution('''3 42\n1''') == \"1\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 123456789''') == \"16317634\"\nassert solution('''42 123456789''') == \"42\"\nassert solution('''1 123456789''') == \"1\"\nassert solution('''2 123456789''') == \"2\"\nassert solution('''5 1234567890''') == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('1 2 2') == '1'\nassert solution('1 1 1') == '2'\nassert solution('2 2 3') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6''') == '4'\n\nassert solution('''10 10 4 0\n0 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1''') == '12'\n\nassert solution('''30 30 1 0\n0 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1\n1 0 1\n1 1 1''') == '60'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4', 'First'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4', 'Second'\nprint('All test cases passed!')"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n''') == '0'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 1 0 0 2') == '0'\nassert solution('1 2 2') == '1'\nassert solution('1 1 1') == '2'\nassert solution('3 1 1 1 8') == '5'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"2 3 1 1 1 5\") == \"4\"\nassert solution(\"2 3 1 1 6 5\") == \"5\"\nassert solution(\"3 3 1 1 1 2 5\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\"\"\") == \"0\"\nassert solution(\"\"\"3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\"\"\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n\"\"\"\nimport math\n\nN, E, S_X, S_Y, C = [int(x) for x in stdin.split()]"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 10\n5 1\n4 6\n7 9\n''') == '3'\nassert solution('''\n4 1 100\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '2'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\"\nassert solution(\"2 3 4 5\") == \"4\"\nassert solution(\"3 3 4 4\") == \"4\"\nassert solution(\"3 3 4 4 5\") == \"5\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\"\nassert solution(\"5 1 0 0 0\") == \"3\"\nassert solution(\"5 1 100 100 101\") == \"4\"\nassert solution(\"5 1 100 100 100\") == \"5\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 10 10\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('5 1 100 100') == '3'\nassert solution('5 1 100 100') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3'"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n\"\"\") == \"\"\"\n3\n\"\"\".strip()\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '2'\nassert solution('BBBCCCBB') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    ABC\n    ABC\n    ABC\n''') == '2'\n\nassert solution('''\n    ABBBAAAA\n    BBBCCCBB\n    CCCCAAAC\n''') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 3\nassert solution(\"CCCCAAAC\") == 4\nassert solution(\"ABCABCABCABC\") == 2\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ABC') == 2\nassert solution('ABC') == 3\nassert solution('ABC') == -1\nassert solution('ABBBAAAA') == 2\nassert solution('BBBCCCBB') == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABC\\nABC\\nABC\") == \"2\"\nassert solution(\"ABBBAAAA\\nBBBCCCBB\\nCCCCAAAC\\n\") == \"3\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ABC\nABC\nABC''') == '2'\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC''') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nABC\nABC\nABC\n''') == '2'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABC') == 2\nassert solution('ABC') == 3\nassert solution('BBBBAAAA') == 1\nassert solution('BBBCCCBB') == 2\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nABBCCCBB\nBBBCCCBB\nCCCCAAAC\n''') == \"3\"\nassert solution('''\nABC\nABC\nABC\n''') == \"2\"\nassert solution('''\nABABAABA\nBABABABA\nABABAABA\n''') == \"1\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '3'\nassert solution('5') == '3'\n'''\nimport math"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''A\nB\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == '3'\nassert solution('''5\nA\nA\nA\nA\nAAA\n''') == '1'\nassert solution('''5\nA\nA\nA\nA\nAAA\n''') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''A\nB\nAA\nBBB\nAAA''') == '3'\nassert solution('''A\nABA\nBBB\nABABA\nAAAAAB''') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(\"ABABA\") == \"2\"\n\nassert solution(\"ABABAA\") == \"1\"\n\nassert solution(\"ABAB\") == \"1\"\n\nassert solution(\"ABABAA\") == \"1\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nA\\nBBB\\nABABA\\nAAA\\n') == \"3\"\nassert solution('5\\nA\\nBBB\\nABABA\\nAAAAAB\\n') == \"3\"\nassert solution('6\\nA\\nAB\\nABBA\\nAAA\\n') == \"2\"\nassert solution('4\\nAA\\nAB\\nAA\\n') == \"1\"\nassert solution('3\\nAA\\nAB\\n') == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\nAB\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\nA\nAA\nABB\nAAAB\nAAABB\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\nA\nAA\nABB\nAAAB\nAAABB\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\nassert solution('5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB') == '3'\n\"\"\""
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 2 1') == '0.1'\nassert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 10 2 1\n''') == '0.1'\nassert solution('''\n100 10 2 2\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n2\\n1') == '0.1'\nassert solution('100\\n10\\n2\\n1') == '0.1'\n\n--------------------------------------------------\n\n-----Task-----\nReturn the probability that there are exactly p people in the group who are able to get tickets to the show.\n\nThe group is small enough that it is easily possible to generate all of the possibilities with a simple for loop.\n\nConsider the following problem:\n\nGiven a function, f, which takes a float and returns a boolean, define a function, g, which takes a float, and returns a boolean, such that g(f(x)) == g(x).\n\nThe definition of g should be such that:\n\ng(x) = f(g(x)) for all x\ng(x) = False for any x\ng(x) = True for any x that is a float.\n\nFor example, the following function should return False, since g(x) = f(g(x)), for all x."
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 10 2 1') == '0.10000000000000001'\nassert solution('100 10 2 2') == '0.1904761904761905'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 10 2 1') == '0.10000000000000002'\nassert solution('100 10 2 2') == '0.20000000000000001'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3 1\") == \"0.1000000000000001\"\nassert solution(\"10 10 2 2\") == \"0.18181818181818183\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(ABABABcABABAbAbab) == \"4\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '4'\nassert solution('''\nABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '5'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"ABABABcABABAbAbab\"\n) == \"4\"\n\nassert solution(\n    \"ABABABcABABAbAbab\"\n) == \"5\"\n\nassert solution(\n    \"BABABAcABABAbAbab\"\n) == \"4\"\n\nassert solution(\n    \"BABABAcABABAbAbab\"\n) == \"5\"\n\nassert solution(\n
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\"\nassert solution(\"ABABABcABABAbAbab\") == \"3\"\n\"\"\"\n\nfrom collections import deque\n\ns = input()\nn = int(input())\ns = list(s)\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABAbAbAb') == '3'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"4\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 3\\n0\\n0\\n1\\n\"\n) == \"2\"\n\"\"\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 1') == '5'\nassert solution('10 0') == '10'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0\\n1') == '2'\nassert solution('2\\n0\\n1') == '2'\nassert solution('2\\n0\\n2') == '3'\nassert solution('2\\n1\\n2') == '3'\nassert solution('2\\n2\\n2') == '3'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '4', \"Wrong\"\nassert solution('4 2') == '3', \"Wrong\"\nassert solution('5 2') == '2', \"Wrong\"\nassert solution('3 3') == '3', \"Wrong\"\nassert solution('3 1') == '1', \"Wrong\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 6\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n\"\"\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n0\n0\n1\n''') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"10 10\") == \"7\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0\n0\n1\nSample Output:\n2\n''') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '2'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1 0') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('12 4 1 4 5 3 -2') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('12 4 1 4 5 3 -2') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('12 4 1 4 5 3 -2') == '1'\nassert solution('10 1 2 1 8 -6 1') == '0'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 3\n2 5 2\n2 5 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n1 2 3\n2 5 4\n2 1 3\n2 5 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n2 2 5\n1 5 5\n2 2 5\n2 2 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 8 8 8\n12 4 1 4 5 3 -2''') == '1'\n\nassert solution('''4 8 8\n12 4 1 4 5 3 -2''') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 8 8 8\\n12 4 1 4 5 3 -2\") == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1\\n1 4 1 4 5 3 -2 0'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1\\nP0: 22 1 4 2 6 -1 0\\n'\n\"\"\"\n\nn, nx, ny, nz = map(int, input().split())\nm, x, y, z, vx, vy, vz = map(int, input().split())\np = 0\nwhile n!= 0:\n    #if (x, y, z) == (1, 2, 3):\n        #print(x, y, z)\n    #if (x, y, z) == (2, 0, 0):\n    #    print(x, y, z)\n    x += vx\n    y += vy\n    z += vz\n    if x <= -nx or x >= nx or y <= -ny or y >= ny or z <= -nz or z >= nz:\n        p += 1\n        x -= vx\n        y -= vy\n        z -= vz\n    n -= 1\nprint(p)"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 7') == '3'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n3\n''') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\nassert solution('''\n2 4\n1 2\n1 3\n3 2\n''') == '1'\nassert solution('''\n1 3\n3 2\n2 4\n''') == '3'\nassert solution('''\n2 5\n1 3\n1 4\n1 5\n3 4\n2 4\n''') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\") == \"2\\n3\\n4\\n\"\nassert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"2\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1\\n2\\n3\\n4\\n'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 7') == '2'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 7') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 7\") == \"1\"\nassert solution(\"4 7\") == \"3\"\nassert solution(\"3 7\") == \"2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n') == '2\\n'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n') == '2\\n'\nassert solution('3 4\\n1 2 3\\n1 2 3\\n2 2\\n') == '1\\n'\nassert solution('5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n') == '1\\n'\nassert solution('5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n') == '2\\n'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '2'\n\"\"\"\n\nclass Frog:\n    def __init__(self):\n        self.sequence = []\n\n    def get_sequence(self):\n        return self.sequence\n\n    def jump_frog(self, frog_id, jump_id, jump_id_next, jump_id_prev):\n        self.sequence[frog_id-1] = jump_id\n        self.sequence.append(jump_id_next)\n        self.sequence.append(jump_id_prev)\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 5 4 3 2\n1 2 5 4 3 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 2 5 4 3 6\n1 2 5 4 3 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 4 3 2 6') == '1 2 5 4 3 6'\nassert solution('1 2 5 4 3 6') == '1 2 5 4 3 6'\nassert solution('1 1 5 4 3 6') == '1 1 5 4 3 6'\nassert solution('1 1 1 5 4 3 6') == '1 1 1 5 4 3 6'\nassert solution('2 1 1 1 5 4 3 6') == '1 2 5 4 3 6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 5 4 3 2 6\") == \"1 2 5 4 3 6\"\nassert solution(\"1 5 1 4 3 2 6\") == \"1 2 5 1 4 3 6\"\nassert solution(\"2 4 3 1 6 1 5\") == \"2 4 3 1 6 1 5\"\nassert solution(\"6 4 1 2 3 5 6\") == \"6 4 1 2 3 5 6\"\nassert solution(\"6 4 1 2 3 5 6 9\") == \"6 4 1 2 3 5 6 9\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n6\n1 2 5 4 3 6\n1 2 5 4 3 6\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 3 5 4 6\\n1 2 3 5 4 6\\n\") == \"2\"\n\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\\n\") == \"1\"\n\n\"\"\"\n\nn=int(input())\n\nx=[0 for i in range(n)]\ny=[0 for i in range(n)]\n\nfor i in range(n):\n    x[i]=int(input())\n\nfor i in range(n):\n    y[i]=int(input())\n\ns=set(x)\nt=set(y)\n\nprint(s.difference(t).__len__())\n\nprint(x.count(y[0]))\nprint(x.index(y[0]))\n\nprint(t.__len__())\nprint(t.__contains__(y[0]))\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"60\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == '60'\nassert solution('1 3 3') == '-1'\nassert solution('4 4 2') == '-1'\nassert solution('3 3 3') == '-1'\nassert solution('3 3 4') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"60\"\nassert solution(\"2 2 2\") == \"-1\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 5 2\n1 2 1\n3 1 3\n''') == '-1'\nassert solution('''\n3 2 1\n1 4 2\n3 1 3\n''') == '4'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\nassert solution('''\n4 3 2\n1 10 3 20\n1 50 2 50\n2 40 4 40\n3 30 1 40\n''') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n4 20 3 2\n''') == '-1'"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '-1'\nassert solution('5 5 5') == '50'\nassert solution('3 5 5') == '100'\nassert solution('1 3 5') == '-1'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80''') == '60'\n\nassert solution('''3 2 3\n2 100 4\n1 100 1\n3 100 10''') == '-1'\n\nassert solution('''6 5 4\n2 30 50 20 30 20\n3 20 40 40 50 50\n4 20 80 20 50 80\n5 20 90 90 90 90\n6 20 90 90 90 90\n\n6 5 4\n2 100 4\n1 100 1\n3 100 10\n4 100 20\n5 100 50\n6 100 80\n\n6 5 4\n2 100 4\n1 100 1\n3 100 10\n4 100 20\n5 100 50\n6 100 80\n''') == '140'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 0\\nCase #4: 0\\nCase #5: 3\\n'''"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'Case #1: 1'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"Case #1: 1\\nCase #2: 2\\nCase #3: 3\"\n\"\"\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n100 0 0\n0 100 0\n0 0 100\n100 1000 0\n0 1000 0\n100 0 1000\nSample Output 2:\nCase #1: 2\nCase #2: 4\n''') == 'Case #2: 4'\n\nassert solution('''\n3\n0 10000 0\n0 0 10000\n0 0 0\nSample Output 3:\nCase #1: 2\nCase #2: 2\n''') == 'Case #2: 2'\n\nassert solution('''\n4\n0 10000 0\n10000 10000 0\n10000 0 10000\n0 10000 10000\nSample Output 4:\nCase #1: 4\nCase #2: 4\nCase #3: 4\nCase #4: 4\n''') == 'Case #4: 4'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'Case #1: 1'\nassert solution('3') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"Case #1: 1\"\nassert solution(\"2\") == \"Case #2: 2\"\n\"\"\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 10000 0\n0 0 10000\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 1\\n'''"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1', \"Wrong answer\"\nassert solution('+1 2 C 1 O 2') == '2 1 2 2 1', \"Wrong answer\"\nassert solution('-1 1 O 2') == '1 0 2 1', \"Wrong answer\"\nassert solution('-1 3 C 6 H 12 O 6') == '3 0 6 3 0 0 1 1 2', \"Wrong answer\"\nassert solution('0 0') == '0 0', \"Wrong answer\"\n\n'''\n\nstdin = '+1 2 H 2 O 1'\nn = int(stdin.split()[0])\na = stdin.split()[1:]\n\nans = []\nfor i in range(n):\n    ans += a[i].split()\n\na = list(map(int, ans))\n\nsign = lambda x: 1 if x > 0 else -1\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '3 1 1 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '1 1 1 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '1 1 1 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '3 1 1 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nassert solution('''+1 6 H_2 O_2\n+1 6 CO_2\n-1 1 O_2\n-1 3 C_6 H_12 O_6\n0 0''') == '1 1 1 1 1'\nassert solution('''+1 6 H_2 O_2\n+1 6 CO_2\n-1 1 O_2\n-1 3 C_6 H_12 O_6\n0 0''') == '0 0 0 0 0'\nassert solution('''+1 2 H_2 O_2\n+1 2 C 1 O_2\n-1 1 O_2\n-1 3 C_6 H_12 O_6\n0 0''') == '0 0 0 0 0'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 1 O 2\n+1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n+1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n'''\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1\\n'\n\n\"\"\"\n\nimport re\nimport numpy as np"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '12 12 12 3')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '12 12 12 3')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '24 24 24 3')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '24 24 24 3')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '14 14 14 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '12 12 12 3')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '12 12 12 3')\nprint(solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n+1 2 C 1 O 2\n-1 1 O 2\n-1"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0''') == '6 6 6 1'\nassert solution('''-1 4 O O 6\n-1 3 C 6 H 12 O 6\n-1 2 H 2 O 1\n+1 2 C 1 O 2\n0 0''') == '3 3 6 2'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\n\"\"\"\nimport math\n\ntest_cases = \"\"\"\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n\"\"\".strip().splitlines()\n\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1'\nprint(\"\\n--- solution() ---\\n\")\nprint(solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\"))\nprint(\"\\n--- end ---\\n\")\n\n\"\"\"\nRuntime: 24 ms, faster than 96.14% of Python3 online submissions for Balanced Equation.\nMemory Usage: 13.2 MB, less than 97.72% of Python3 online submissions for Balanced Equation.\n\"\"\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == \"19.28\"\nassert solution('4') == \"19.26\"\nassert solution('3') == \"16.12\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83'\nassert solution('''\n6\n10 10\n0 0\n100 0\n100 10\n0 10\n100 10\n0 0\n''') == '20.33'\nassert solution('''\n3\n10 10\n0 0\n10 10\n''') == '10.0'\nassert solution('''\n2\n0 0\n0 0\n''') == '0.0'\nassert solution('''\n1\n1\n''') == '1.0'"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n\") == \"20.83\"\nprint(solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n\"))\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n0 0\n0 20\n0 30\n20 30\n30 50\n50 0\n50 20\n50 30\n30 40\n40 0\n40 20\n40 30\n30 50\n20 50\n20 40\n20 30\n30 40\n30 50\n20 50\n''') == '20.83'\nassert solution('''\n2\n3 5\n2 1\n4 5\n''') == '14.75'\nassert solution('''\n5\n2 1\n3 1\n3 5\n4 5\n4 5\n''') == '16.75'\nassert solution('''\n1\n0 0\n''') == '0.00'\nassert solution('''\n0\n0 0\n0 0\n''') == '0.00'\n'''\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2.00\"\nassert solution(\"4\") == \"2.00\"\nassert solution(\"5\") == \"2.00\"\nassert solution(\"10\") == \"2.00\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n0 0\n0 0\n0 0\n''') == '2.0'\nassert solution('''10\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100 0\n100"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\nassert solution('''1\n0 0\n1 0\n2 0\n3 0\n4 0''') == '4.00'\nassert solution('''2\n-1 -1\n0 1\n1 -1\n-1 -1''') == '1.67'\nassert solution('''3\n0 0\n0 1\n1 0''') == '1.67'\nassert solution('''3\n-1 -1\n1 -1\n-1 -1''') == '2.33'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n\") == '20.83'\nassert solution(\"2\\n3 4\\n1 2\\n2 3\\n3 4\\n1 2\\n\") == '1.5'"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\") == \"20.83\"\nassert solution(\"8\\n2 0\\n3 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"8.69\"\nassert solution(\"5\\n-100 -100\\n100 100\\n-100 100\\n100 -100\\n-100 -100\\n-100 100\\n-100 100\") == \"8.64\""
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('2\\n50 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"2\"\nassert solution(\"2 5\\n4 3\\n3 1\\n1 2\\n1 3\") == \"4\"\nassert solution(\"1 1\\n2 2\\n3 3\") == \"0\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 3\n1 2 5\n7 6 4\n9 8 3\"\"\") == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '49'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n'''\nfrom collections import deque\nr,c = map(int,input().split())\ngrid = []\nfor i in range(r):\n    grid.append(list(map(int,input().split())))\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"49\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 15') == 'CROSSWORD', \"1\"\nassert solution('1 15') == 'CROSSWORD', \"2\"\nassert solution('1 15') == 'CROSSWORD', \"3\"\nassert solution('1 15') == 'CROSSWORD', \"4\"\nassert solution('1 15') == 'CROSSWORD', \"5\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\nHALT\") == \"HALT\"\nassert solution(\"1 1\\nA\") == \"A\"\nassert solution(\"1 2\\nA.B.C\") == \"A.B.C\"\nassert solution(\"2 2\\nA.B.C.D\\nE.F.G\") == \"A.B.C.D\\nE.F.G\"\nassert solution(\"4 4\\n#.#.#.#.#.\\n.###.###.#.\\n##.#.##.#.#\\n###.##.###.\\n#.###.###.#\\n.#.###.###.\\n#.#.#######\\n#.######.###\\n#######.##.#\\n##.##.###.#\\n#####.#####.\\n#.#.#.#####.\\n####.#######\\n#.###.#######\\n#.#####.#####\\n#.###.#######\\n###.###.#####\") == \"###.###.#####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 15') == '##CROSSWORD####'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n##..###.#####\n2\nCROSSWORD\n3\nSOLUTION\n''') == '''\n##CROSSWORD####\n1\nSOLUTION\n'''\nassert solution('''\n##..###.#####\n2\nCROSSWORD\n3\nSOLUTION\n''') == '''\n##CROSSWORD####\n2\nSOLUTION\n'''\nassert solution('''\n##..###.#####\n2\nCROSSWORD\n3\nSOLUTION\n''') == '''\n##CROSSWORD####\n3\nSOLUTION\n'''"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n##.\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 1\n.A...#.#.#\n.####.#.#.\n.###.#.#.#.\n##.#.#.#.#.\n##..#.##..\n###...#.#.\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5\\n1 3 4\\n1 5\\n1\\n2 3\\n3 2\\n5 2\\n2\\n2\\n2\\n2 2\\n3 2\\n2 2\\n1\\n1\\n5 1\\n5 2\\n4 2\\n4 1\\n4\\n3 3\\n3 1\\n1\\n1\\n2 1\\n2 3\\n2\\n3\\n1\\n1\\n3\\n2\\n1\\n2\\n2\\n5 1\\n4 1\\n4\\n1 2\\n3 1\\n2 2\\n3\\n1\\n3\\n3 2\\n1\\n3\\n3 1\\n4\\n3 1\\n2 1\\n1\\n1\\n1\\n1\\n2 1\\n2 3\\n2\\n1\\n1\\n1\\n2 2\\n2 2\\n2\\n1\\n1\\n2 1\\n1\\n2\\n3 1\\n3 1\\n2 2\\n2\\n2\\n1\\n1\\n2 1\\n1\\n1\\n1\\n1\\n1\\n3 2\\n2 2\\n3 2\\n2 1\\n3 1\\n2 1\\n2\\n2\\n2\\n1\\n2\\n2\\n3 1\\n2\\n2\\n1\\n1\\n1\\n2 1\\n3 1\\n2\\n1\\n1\\n2 1\\n2 1\\n2\\n3\\n1\\n1\\n2\\n2\\n3\\n2\\n1\\n1\\n1\\n2 1\\n2 2\\n2\\n2\\n1\\n2\\n2\\n1\\n3\\n2\\n3\\n2\\n2\\n2\\n2\\n2\\n1\\n2\\n2\\n2\\n1\\n2\\n2\\n2\\n2\\n1\\n1\\n2 1\\n1\\n2\\n3 1\\n2 1\\n1\\n1\\n2 1\\n1\\n1\\n2 1\\n2\\n2\\n2\\n2\\n3 1\\n2\\n2\\n2\\n3 1\\n2\\n2\\n2\\n2\\n2\\n3\\n1\\n1\\n1\\n2 1\\n1\\n1\\n1\\n2 1\\n2 1\\n1\\n1\\n1\\n1\\n2 1\\n2 3\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\nassert solution(\"1 2\") == \"##\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n4\n4\n2\n4\n4\n3\n4\n3\n3\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2\n4\n4\n4\n4\n3\n2\n4\n3\n2"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 2\\n1 2 3\\n3 4 5\\n') == '21'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n2 7 6\n9 5 1\n4 3 8''') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"3 1 2\") == \"9\"\nassert solution(\"3 1 2 3\") == \"7\"\nassert solution(\"4 3 8\") == \"6\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n4 5 6\\n7 8 9') == '31'\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(10**9)"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nassert solution('''\n2 3\n5 2 1\n4 5 4\n''') == '27'\nassert solution('''\n1 0\n4 4 4\n''') == '15'\nassert solution('''\n10\n-3 -1 1 -1 3 3 1 2 2 1 -2\n-1\n2\n-1\n0\n0\n''') == '3'\nassert solution('''\n20\n-1 -1 0 1 0 0 0 1 0 1 -1\n-1\n1\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '31'\nassert solution('3 4') == '41'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1') == '31'\nassert solution('3 1\\n5 5 5\\n1 1 1') == '6'\nassert solution('10 2\\n0 0 2\\n7 1 5\\n9 8 3\\n6 7 1\\n8 0 2\\n4 8 6\\n8 6 3\\n5 6 5\\n3 5 2\\n8 5 2') == '25'\n\n'''"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    3 1\n    2 7 6\n    9 5 1\n    4 3 8\n\"\"\") == \"31\"\n\nassert solution(\"\"\"\n    4 1\n    2 7 6\n    9 5 1\n    4 3 8\n\"\"\") == \"25\"\n\nassert solution(\"\"\"\n    3 1\n    2 7 6\n    7 9 4\n    4 3 8\n\"\"\") == \"30\"\n\nassert solution(\"\"\"\n    3 1\n    2 7 6\n    7 9 4\n    4 3 8\n\"\"\") == \"30\"\n\nassert solution(\"\"\"\n    2 1\n    2 7 6\n    7 9 4\n    4 3 8\n\"\"\") == \"18\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\nBBW\\n') == '2'\nassert solution('1 2\\nBBW\\n') == '1'\nassert solution('1 3\\nBBW\\n') == '1'\n\nassert solution('2 1\\nBBW\\n') == '1'\nassert solution('2 2\\nBBW\\n') == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\", \"Two cases\"\nassert solution(\"3 1\") == \"2\", \"One case\"\nassert solution(\"3 2\") == \"3\", \"Two cases\"\nassert solution(\"3 3\") == \"4\", \"Two cases\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\nBWB') == '2'\nassert solution('3 1\\nBBW') == '1'\nassert solution('4 1\\nBWBWBBW') == '1'\nassert solution('5 1\\nBBWWBWBBW') == '2'\nassert solution('6 1\\nBBWWWWWWWW') == '3'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('11') == '2'\nassert solution('11BBW') == '2'\nassert solution('BBWWB') == '1'\nassert solution('BBWWBWWB') == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_0) == sample_output_0\nassert solution(sample_input_1) == sample_output_1\nprint('\"Run\" is good practice!')"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nBBW') == '2'\nassert solution('2\\nBWB') == '1'\nassert solution('3\\nBWB') == '1'\nassert solution('3\\nBBW') == '1'\nassert solution('4\\nBBBBB') == '4'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"10 1\") == \"19\"\nassert solution(\"4 4\") == \"7\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"10 10\") == \"20\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"0.556\"\nassert solution(\"4 5\") == \"0.543\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n3 2 1\n1 2 3\n''') == '0.556'\nassert solution('''5 1\n3 2 1\n1 2 3\n1 3 4\n3 4 1\n2 4 4\nSample Input:\n1\n10\nSample Output:\n0.01\n''') == '0.01'\nassert solution('''100\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('5 5') == '0.246'\nassert solution('1 10') == '0.0015'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '0.556'\nassert solution('5 2') == '0.667'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\nassert solution(\"\"\"\n2 3\n1 2\n3 4\n\"\"\") == \"0.167\"\nassert solution(\"\"\"\n5 3\n3 2 2 2 1\n1 2 2 3 1\n1 2 3 4 1\n\"\"\") == \"0.5555\"\nassert solution(\"\"\"\n1 2\n2 3\n3 4\n\"\"\") == \"0.4444\"\nassert solution(\"\"\"\n4 2\n1 2 1 1\n2 3 1\n3 1 4\n\"\"\") == \"0.3636\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n3 2 1') == '0.556'\nassert solution('2 1\\n1 2 3') == '0.556'\nassert solution('1 1\\n1 2 3') == '0.556'\n\nfrom math import sqrt\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('3 1 2 3') == '0.556'\nassert solution('2 1 2 3') == '0.556'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1\n1 2 3''') == '0.556'\nassert solution('''2 1\n1 2 3\n5 6 7''') == '1.0'\nassert solution('''2 2\n1 1\n1 1''') == '0.5'\nassert solution('''2 2\n1 2\n1 1''') == '0.5'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0.556\"\n\"\"\"\n\nN, L = map(int, input().split())\na = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nmax_a = max(a)\nmax_c = max(c)"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\nassert solution(\"\"\"\n1 3\n2 1 1\n3 2 1\n\"\"\") == \"0.564\"\nassert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.557\"\n\"\"\"\n\n\"\"\"\n\nimport sys\nfrom decimal import Decimal\nfrom functools import reduce\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 3 2') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 3 2') == '3'\n\n'''\n\nimport math"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('0 0 0 0') == '0'\nassert solution('1 1 1 1') == '0'\nassert solution('3 3 3 3') == '3'\nassert solution('1 0 0 0') == '2'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 3 2') == '3'\nassert solution('5 4 3 2') == '4'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\nassert solution(\"7 8 3 2\") == \"1\"\nassert solution(\"1 2 4 5 6 8\") == \"2\"\nassert solution(\"5 1 2 3 1\") == \"3\"\nassert solution(\"1 1 2\") == \"2\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4 3 2') == '3'\nassert solution('5 6 4 3 2') == '6'\nassert solution('5 4 3 2') == '3'\nassert solution('5 6 4 3 2') == '5'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('4 6 4 3') == '4'\nassert solution('2 4 6 3') == '4'\nassert solution('2 2 2 3') == '4'\nassert solution('1 1 2 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\nprint('Solution: ', solution())"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n\"\"\") == \"13\"\nassert solution(\n\"\"\"\n1\n1 3\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n2\n1 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"13\""
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n5\n1 3 6\n2 5 8\n3 3 5\n4 5 6\n5 3 6\n''') == '23'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 3 6\n2 5 8\n3 3 5\n5 3 6''') == '13'\nassert solution('''2 2 6\n4 4 4\n3 2 4\n3 5 6''') == '2'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n5\n5 5 7\n7 5 5\n8 3 6\n6 4 5\n3 2 4\n5 3 6\n''') == '20'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '13'\nassert solution('5') == '21'\nassert solution('6') == '36'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 5') == '10'\nassert solution('2 2 2') == '10'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5.000000 2.123456\") == \"1.500000\"\nassert solution(\"2.000000 0.123456\") == \"0.000000\"\nassert solution(\"5.000000 0.123456\") == \"5.000000\"\nassert solution(\"5.000000 2.123456\") == \"6.141593\"\nassert solution(\"6.141593 2.123456\") == \"5.500000\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10.000000 20.123456\n1\n13.141593 20.123456\n''') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.000000 6.123456') == '3.141593'"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"3.141593\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10.000000 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.1 1.0\\n13.141593 20.123456\\n1\\n9.000000 20.123456\\n1\\n13.141593 20.123456') == \"3.141593\"\nassert solution('1.1 1.0\\n13.141593 20.123456\\n1\\n9.000000 20.123456\\n1\\n13.141593 20.123456') == \"1.1\"\nassert solution('0.1 1.0\\n13.141593 20.123456\\n0\\n9.000000 20.123456\\n0\\n13.141593 20.123456') == \"0.1\"\nassert solution('0.000000 1.0\\n13.141593 20.123456\\n0\\n9.000000 20.123456\\n0\\n13.141593 20.123456') == \"0.000000\"\nassert solution('1.000000 1.0\\n13.141593 20.123456\\n1\\n9.000000 20.123456\\n1\\n13.141593 20.123456') == \"1.000000\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n2\\n3') == '0.3'\nassert solution('5\\n1\\n2\\n4\\n5\\n6\\n7') == '4.2'\nassert solution('4\\n1\\n2\\n3\\n4\\n5') == '6.4'\nassert solution('10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '5.4'\nassert solution('10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == '21.583333'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 2\\n3 4\\n5 6') == '7.600000000000001'\nassert solution('2\\n1 3\\n5 6') == '4.600000000000001'\nassert solution('20\\n1 2 3 4 5 6') == '7.600000000000001'"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10.000000 20.123456\") == \"3.141593\"\nassert solution(\"1\") == \"10.000001\"\nassert solution(\"13.141593 20.123456\") == \"10.000004\"\n\n'''\n\nimport math\nfrom decimal import *\ngetcontext().prec = 20"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"4\") == \"2.13333333333333\"\nassert solution(\"4 4\") == \"2.13333333333333\"\nassert solution(\"6 6\") == \"impossible\"\nassert solution(\"10 10\") == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2.5'"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2.13333333333333'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n\"\n    \"4 4\\n\"\n    \"2\\n\") == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2.13333333333333'\nassert solution('1\\n1\\n1\\n1\\n') == 'impossible'\nassert solution('4\\n4\\n2\\n1\\n') == '2.13333333333333'\nassert solution('5\\n7\\n5\\n2\\n1\\n') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '2.13333333333333'\nassert solution('3') == '3.166666666666667'"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 4\\n2') == '2.13333333333333'\nassert solution('5\\n1 1\\n10') == 'impossible'"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4 4\n2\n''') == \"impossible\", \"You are a bit too lazy to solve this problem yet.\"\nassert solution('''5\n1\n1\n5\n5\n2\n''') == \"2.13333333333333\", \"You are a bit too lazy to solve this problem yet.\"\nassert solution('''6\n2\n2\n2\n1\n2\n1\n''') == \"impossible\", \"You are a bit too lazy to solve this problem yet.\""
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2.0'\nassert solution('4') == '3.0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '18'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3 4 2\n3 5 1\n6 4 3''') == '16'\nassert solution('''5\n5 2 2 3 4\n5 2 4 1 3\n6 4 3 1 4\n7 6 5 2 4\n8 7 6 1 5''') == '22'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('1000000') == '18'\nassert solution('1000001') == '19'\nassert solution('1000010') == '19'\nassert solution('1000011') == '18'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('7') == '18'\nassert solution('10') == '200'\nassert solution('15') == '210'\nassert solution('20') == '280'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '18'\nassert solution('6') == '6'\nassert solution('5') == '0'\nassert solution('1') == '0'\nassert solution('10') == '19'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '30'"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '18'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0'\nassert solution('20') == '20'\nassert solution('123456789') == '20'\nassert solution('1234567890') == '10'\nassert solution('1234567899') == '9'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n35 M\\n0 F\\n43 M\\n30 F\\n\") == \"3\""
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n'''"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n35 M\n0 M\n43 M\n30 F\n''') == '4'\n\nassert solution('''\n35 F\n0 M\n43 M\n30 M\n''') == '3'\n\nassert solution('''\n5 M\n10 F\n10 F\n0 F\n30 F\n''') == '2'\n\nassert solution('''\n7 M\n8 F\n9 F\n0 F\n7 F\n''') == '3'\n\nassert solution('''\n6 M\n0 M\n5 F\n2 F\n3 F\n''') == '4'"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n35 M classicism programming\\n43 M baroque chess') == '3'\n\nassert solution('2\\n0 M baroque skiing\\n0 F baroque chess') == '0'\n\nassert solution('3\\n0 M classicism programming\\n0 M baroque chess\\n0 F baroque skiing') == '1'\n\nassert solution('4\\n0 M classicism programming\\n0 M baroque chess\\n0 M baroque skiing\\n0 F baroque chess') == '1'\n\nassert solution('5\\n0 M classicism programming\\n0 M baroque chess\\n0 M baroque skiing\\n0 F baroque chess') == '2'\n\n\"\"\"\n\nstdin = \"\"\"\n1\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\nSample Output:\n3\n\"\"\""
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n35 M\n0 M\n''') == '1'\nassert solution('''2\n40 F\n0 M\n''') == '2'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer''') == '3'\n''')"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\nassert solution(\"1\\n36 M classical\\n0 F classical\\n43 F classical\\n30 F classical\") == \"0\"\nassert solution(\"2\\n78 F classical\\n0 M classical\\n43 F classical\\n30 M classical\") == \"2\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\"\n) == \"3\"\nassert solution(\n    \"5\\n35 M classicism programming\\n0 F baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n30 M baroque chess\"\n) == \"4\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n') == '2 1\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n') == '2 1'\nassert solution('2\\n2 1\\n2 0\\n3\\n3 2\\n3 4\\n3 5\\n') == '2 1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0\na 1\na 2\na 3\n''') == '2\\n1\\n2'\n\nassert solution('''\n1\na 1\nb 2\nc 2 3\nb 4\n''') == '2\\n1\\n2'\n\nassert solution('''\n2\na 2\na 3\n''') == '2\\n1\\n2'\n\nassert solution('''\n3\na 3\na 2\nb 1\n''') == '2\\n1\\n2'\n\nassert solution('''\n4\na 4\na 2\na 3\n''') == '2\\n1\\n2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2 1'\nassert solution('10') == '2 1'\nassert solution('12') == '2 2'\nassert solution('3') == '3 1'\nassert solution('4') == '3 2'\n\"\"\""
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1 2\\n1 3\\n2\\n4\") == \"1 2\\n1 3\\n2\"\nassert solution(\"2\\n2 2\\n2 3\\n3\") == \"1 2\\n1 2\\n2\\n3\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1\\n2\\n1\\n2\\n2\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '2 1'\n\n\"\"\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''a 0\na 1\nb 2\nc 2 3\nb 4''') == '2\\n1\\n2\\n'\nassert solution('''a 0\na 1\nb 2\nc 2 3\nb 4\na 5''') == '2\\n1\\n2\\n1\\n'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 1\\n\" +\n    \"78 61 88 71\\n\" +\n    \"80 80 90 90\\n\" +\n    \"70 90 80 100\\n\" +\n    \"90 70 0 0\\n\" +\n    \"80 67 0 0\\n\" +\n    \"90 63 0 0\\n\") == \"5\"\n\nassert solution(\n    \"3 2\\n\" +\n    \"78 61 88 71\\n\" +\n    \"80 80 90 90\\n\" +\n    \"70 90 80 100\\n\" +\n    \"90 70 0 0\\n\" +\n    \"80 67 0 0\\n\" +\n    \"90 63 0 0\\n\" +\n    \"70 0 0 0\\n\" +\n    \"0 0 0 0\\n\" +\n    \"0 0 0 0\\n\" +\n    \"0 0 0 0\\n\") == \"6\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == '5'"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1\") == \"5\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '5'\nassert solution('4 2') == '3'\n\"\"\"\n\nn, k = list(map(int, input().strip().split(' ')))\n\narray = []\n\nfor _ in range(n):\n    input_arr = list(map(int, input().strip().split(' ')))\n    array.append(input_arr)\n\nfrags = {}\nsteps = {}\n\nfor i in range(n):\n    frags[i] = array[i][0]\n    steps[i] = array[i][1]\n\nfrags_d = {}\nsteps_d = {}\n\nfor i in range(n):\n    frags_d[i] = frags[i]\n    steps_d[i] = steps[i]\n\nfrags_d = sorted(frags_d.items(), key=lambda x: x[1])\nfrags_d = list(map(lambda x: x[0], frags_d))\n\nsteps_d = sorted(steps_d.items(), key=lambda x: x[1])\nsteps_d = list(map(lambda x: x[0], steps_d))\n\nfrags_d.reverse()\nsteps_d.reverse()\n\nfrags_d = frags_d[:k]\nsteps_d = steps_d[:k]\n\nfrags_d.sort()\nsteps_d.sort()\n\nfrags_d = list(map(lambda x: x+1, frags_d))\nsteps_d = list(map(lambda x: x+1, steps_d))\n\ncount = 0\n\nfor i in range(len(frags_d)):\n    frags_d[i] -= count\n    steps_d[i] -= count\n    count += 1\n\nfrags_d.append(count+1)\nsteps_d.append(count+1)\n\ncount = 1\n\nfor i in range(len(frags_d)-1):\n    if frags_d[i] < frags_d[i+1]:\n        frags_d[i] += count\n        frags_d[i+1] += count\n        steps_d[i] += count\n        steps_d[i+1] += count\n        count += 1\n    elif frags_d[i] == frags_d[i+1]:\n        frags_d[i] += count\n        frags_d[i+1] += count\n        steps_d[i] += count\n        steps_d[i+1] += count\n    else:\n        frags_d[i+1] += count\n        frags_d[i] += count\n        steps_d[i+1] += count\n        steps_d[i] += count\n\nfrags_d = list(map(lambda x: x-count, frags_d))\nsteps_d = list(map(lambda x: x-count, steps_d))\n\nprint(frags_d[0], steps_d[0])\n\nfor i in range(len(frags_d)-1):\n    if frags_d[i] < frags_d[i+1]:\n        frags_d[i] += count\n        frags_d[i+1] += count\n        steps_d[i] += count\n        steps_d[i+1] += count\n    elif frags_d[i] == frags_d[i+1]:\n        frags_d[i] += count\n        frags_d[i+1] += count\n        steps_d[i] += count\n        steps_d[i+1] += count\n    else:\n        frags_d[i+1] += count\n        frags_d[i] += count\n        steps_d[i+1] += count\n        steps_d[i] += count\n\nprint(frags_d[0], steps_d[0])\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n1\n4\n2\n3\n3\n''') == '1'\nassert solution('''5\n3\n4\n1\n2\n3\n''') == '3'\nassert solution('''5\n3\n4\n1\n2\n3\n''') == '3'\nassert solution('''5\n3\n4\n1\n2\n3\n''') == '3'\nassert solution('''5\n3\n4\n1\n2\n3\n''') == '3'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"20 17\") == \"0\"\nassert solution(\"100 100\") == \"0\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"4 5\") == \"4\"\n\n--Explaination--\n\nThe idea is simple:\n\n1) if we have even number of intersections, then we can choose either any road with even length to destroy.\n2) if we have odd number of intersections, then we can choose either any road with odd length to destroy.\n3) if we have even number of intersections, then we can choose either any road with even length to destroy, or any road with odd length to destroy.\n4) if we have odd number of intersections, then we can choose either any road with odd length to destroy, or any road with even length to destroy.\n\nSo, in this case we are choosing one road with even length to destroy and one road with odd length to destroy. So, we have a total of two possible ways of destroying all intersections.\n\n\"\"\""
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"4 5\") == \"4\"\n\nsolution(\"1 1\")\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '4'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '4'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '4'\nassert solution('3 3') == '1'\nassert solution('4 4') == '0'\n'''\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n1 3\n1 4\n2 3\n2 4''') == '2'\n\nassert solution('''4 4\n1 2\n1 3\n1 4\n2 3\n2 4''') == '4'\n\nassert solution('''1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n10 1\n11 1\n12 1\n13 1\n14 1\n15 1\n16 1\n17 1\n18 1\n19 1\n20 1\n21 1\n22 1\n23 1\n24 1\n25 1\n26 1\n27 1\n28 1\n29 1\n30 1\n31 1\n32 1\n33 1\n34 1\n35 1\n36 1\n37 1\n38 1\n39 1\n40 1\n41 1\n42 1\n43 1\n44 1\n45 1\n46 1\n47 1\n48 1\n49 1\n50 1\n51 1\n52 1\n53 1\n54 1\n55 1\n56 1\n57 1\n58 1\n59 1\n60 1\n61 1\n62 1\n63 1\n64 1\n65 1\n66 1\n67 1\n68 1\n69 1\n70 1\n71 1\n72 1\n73 1\n74 1\n75 1\n76 1\n77 1\n78 1\n79 1\n80 1\n81 1\n82 1\n83 1\n84 1\n85 1\n86 1\n87 1\n88 1\n89 1\n90 1\n91 1\n92 1\n93 1\n94 1\n95 1\n96 1\n97 1\n98 1\n99 1\n100 1\n101 1\n102 1\n103 1\n104 1\n105 1\n106 1\n107 1\n108 1\n109 1\n110 1\n111 1\n112 1\n113 1\n114 1\n115 1\n116 1\n117 1\n118 1\n119 1\n120 1\n121 1\n122 1\n123 1\n124 1\n125 1\n126 1\n127 1\n128 1\n129 1\n130 1\n131 1\n132 1\n133 1\n134 1\n135 1\n136 1\n137 1\n138 1\n139 1\n140 1\n141 1\n142 1\n143 1\n144 1\n145 1\n146 1\n147 1\n148 1\n149 1\n150 1\n151 1\n152 1\n153 1\n154 1\n155 1\n156 1\n157 1\n158 1\n159 1\n160 1\n161 1\n162 1\n163 1\n164 1\n165 1\n166 1\n167 1\n168 1\n169 1\n170 1\n171 1\n172 1\n173 1\n174 1\n175 1\n176 1\n177 1\n178 1\n179 1\n180 1\n181 1\n182 1\n183 1\n184 1\n185 1\n186 1\n187 1\n188 1\n189 1\n190 1\n191 1\n192 1\n193 1\n194 1\n195 1\n196 1\n197 1\n198 1\n199 1\n200 1\n201 1\n202 1\n203 1\n204 1\n205 1\n206 1\n207 1\n208 1\n209 1\n210 1\n211 1\n212 1\n213 1\n214 1\n215 1\n216 1\n217 1\n218 1\n219 1\n220 1\n221 1\n222 1\n223 1\n224 1\n225 1\n226 1\n227 1\n228 1\n229 1\n230 1\n231 1\n232 1\n233 1\n234 1\n235 1\n236 1\n237 1\n238 1\n239 1\n240 1\n241 1\n242 1\n243 1\n244 1\n245 1\n246 1\n247 1\n248 1\n249 1\n250 1\n251 1\n252 1\n253 1\n254 1\n255 1\n256 1\n257 1\n258 1\n259 1\n260 1\n261 1\n262 1\n263 1\n264 1\n265 1\n266 1\n267 1\n268 1\n269 1\n270 1\n271 1\n272 1\n273 1\n274 1\n275 1\n276 1\n277 1\n278 1\n279 1\n280 1\n281 1\n282 1\n283 1\n284 1\n285 1\n286 1\n287 1\n288 1\n289 1\n290 1\n291 1\n292 1\n293 1\n294 1\n295 1\n296 1\n297 1\n298 1\n299 1\n300 1\n301 1\n302 1\n303 1\n304 1\n305 1\n306 1\n307 1\n308 1\n309 1\n310 1\n311 1\n312 1\n313 1\n314 1\n315 1\n316 1\n317 1\n318 1\n319 1\n320 1\n321 1\n322 1\n323 1\n324 1\n325 1\n326 1\n327 1\n328 1\n329 1\n330 1\n331 1\n332 1\n333 1\n334 1\n335 1\n336 1\n337 1\n338 1\n339 1\n340 1\n341 1\n342 1\n343 1\n344 1\n345 1\n346 1\n347 1\n348 1\n349 1\n350 1\n351 1\n352 1\n353 1\n354 1\n355 1\n356 1\n357 1\n358 1\n359 1\n360 1\n361 1\n362 1\n363 1\n364 1\n365 1\n366 1\n367 1\n368 1\n369 1\n370 1\n371 1\n372 1\n373 1\n374 1\n375 1\n376 1\n377 1\n378 1\n379 1\n380 1\n381 1\n382 1\n383 1\n384 1\n385 1\n386 1\n387 1\n388 1\n389 1\n390 1\n391 1\n392 1\n393 1\n394 1\n395 1\n396 1\n397 1\n398 1\n399 1\n400 1\n401 1\n402 1\n403 1\n404 1\n405 1\n406 1\n407 1\n408 1\n409 1\n410 1\n411 1\n412 1\n413 1\n414 1\n415 1\n416 1\n417 1\n418 1\n419 1\n420 1\n421 1\n422 1\n423 1\n424 1\n425 1\n426 1\n427 1\n428 1\n429 1\n430 1\n431 1\n432 1\n433 1\n434 1\n435 1\n436 1\n437 1\n438 1\n439 1\n440 1\n441 1\n442 1\n443 1\n444 1\n445 1\n446 1\n447 1\n448 1\n449 1\n450 1\n451 1\n452 1\n453 1\n454 1\n455 1\n456 1\n457 1\n458 1\n459 1\n460 1\n461 1\n462 1\n463 1\n464 1\n465 1\n466 1\n467 1\n468 1\n469 1\n470 1\n471 1\n472 1\n473 1\n474 1\n475 1\n476 1\n477 1\n478 1\n479 1\n480 1\n481 1\n482 1\n483 1\n484 1\n485 1\n486 1\n487 1\n488 1\n489 1\n490 1\n491 1\n492 1\n493 1\n494 1\n495 1\n496 1\n497 1\n498 1\n499 1\n500 1\n501 1\n502 1\n503 1\n504 1\n505 1\n506 1\n507 1\n508 1\n509 1\n510 1\n511 1\n512 1\n513 1\n514 1\n515 1\n516 1\n517 1\n518 1\n519 1\n520 1\n521 1\n522 1\n523 1\n524 1\n525 1\n526 1"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5') == '4'\nassert solution('3 3') == '4'\nassert solution('3 4') == '5'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '0'\nassert solution('4 5') == '4'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\nprint(solution(input))"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '4'\nassert solution('1 3') == '3'\nassert solution('1 4') == '2'\nassert solution('2 3') == '1'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"4\"\nassert solution(\"10 20\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n3 9\\n4 5\\n4 6\\n4 7\\n4 8\\n4 9\\n5 6\\n5 7\\n5 8\\n5 9\\n6 7\\n6 8\\n6 9\\n7 8\\n7 9\\n8 9\\n\") == \"1\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2 3 4'\nassert solution('3\\n1 2\\n2 3\\n3 4') == '3 4 1'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"4\n1 2\n2 3\n3 4\n\"\"\"\n) == \"\"\"2\n3 4\n2 4\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n2 3\\n3 4\\n\") == \"2 3\"\n\"\"\""
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"2\\n3\\n\"\n\"\"\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2 3\"\nassert solution(\"10\\n2 3\\n8 7\\n4 6\\n9 1\\n5 7\\n7 6\\n5 4\\n1 4\\n8 5\\n7 3\\n6 2\\n5 9\\n1 1\\n9 9\\n5 9\\n4 9\\n7 9\\n4 9\\n3 7\\n2 6\\n9 7\\n2 4\\n4 1\\n5 9\\n1 6\\n6 9\\n2 9\\n9 1\\n3 9\\n1 8\\n6 2\\n3 5\\n9 5\\n1 5\\n4 5\\n6 6\\n5 8\\n5 2\\n6 1\\n9 2\\n1 1\\n9 1\\n4 5\\n6 2\\n4 8\\n6 8\\n5 7\\n4 6\\n5 4\\n4 2\\n5 3\\n4 5\\n9 4\\n1 9\\n2 6\\n9 3\\n3 9\\n1 2\\n2 7\\n6 8\\n1 3\\n2 5\\n8 5\\n2 2\\n4 9\\n6 8\\n9 4\\n5 5\\n8 5\\n5 4\\n9 3\\n7 2\\n5 1\\n1 1\\n2 9\\n5 9\\n1 8\\n6 2\\n7 1\\n9 4\\n4 5\\n7 3\\n5 2\\n4 6\\n6 8\\n9 2\\n6 6\\n4 5\\n3 2\\n9 5\\n1 3\\n4 4\\n2 2\\n3 6\\n2 5\\n5 2\\n8 6\\n4 5\\n6 9\\n7 3\\n5 7\\n7 2\\n5 3\\n9 3\\n3 4\\n1 6\\n4 2\\n3 8\\n8 2\\n8 7\\n9 8\\n8 8\\n5 5\\n8 3\\n4 3\\n3 7\\n3 7\\n9 1\\n6 7\\n1 3\\n1 1\\n4 2\\n6 2\\n1 9\\n2 6\\n5 4\\n3 4\\n8 1\\n5 1\\n2 3\\n5 5\\n7 3\\n2 6\\n8 5\\n5 8\\n4 5\\n1 1\\n4 6\\n7 6\\n2 3\\n3 5\\n5 2\\n7 8\\n2 7\\n9 5\\n4 7\\n6 4\\n5 1\\n1 2\\n2 9\\n4 9\\n2 3\\n9 6\\n4 2\\n4 8\\n6 5\\n4 6\\n4 7\\n2 7\\n4 2\\n6 3\\n9 4\\n7 5\\n3 8\\n9 5\\n5 5\\n1 1\\n6 4\\n7 1\\n9 8\\n7 6\\n6 5\\n5 7\\n9 9\\n2 6\\n4 6\\n6 1\\n9 5\\n5 8\\n8 7\\n6 2\\n4 2\\n5 3\\n4 7\\n5 1\\n7 5\\n6 9\\n7 4\\n2 5\\n8 2\\n3 1\\n3 1\\n2 7\\n4 3\\n4 2\\n2 9\\n5 3\\n5 2\\n4 3\\n9 8\\n6 5\\n9 5\\n6 7\\n5 5\\n9 4\\n2 5\\n8 4\\n7 6\\n6 5\\n8 6\\n7 4\\n6 9\\n9 8\\n5 5\\n1 4\\n5 3\\n5 6\\n7 8\\n1 1\\n8 2\\n4 5\\n4 1\\n7 4\\n2 1\\n5 1\\n7 8\\n4 8\\n9 9\\n8 7\\n5 1\\n9 7\\n5 8\\n7 8\\n6 2\\n4 6\\n1 1\\n8 9\\n5 2\\n6 3\\n1 3\\n2 8\\n2 6\\n6 4\\n5 6\\n5 7\\n8 7\\n5 1\\n9 1\\n7 3\\n1 9\\n5 2\\n6 6\\n4 3\\n5 5\\n3 9\\n1 3\\n3 2\\n5 7\\n8 6\\n9 4\\n7 3\\n3 2\\n9 5\\n4 4\\n8 5\\n9 7\\n9 2\\n1 4\\n3 2\\n7 6\\n4 6\\n9 2\\n4 2\\n9 9\\n4 3\\n4 3\\n8 7\\n6 8\\n4 8\\n6 6\\n7 1\\n4 1\\n8 6\\n9 8\\n3 2\\n3 2\\n1 4\\n8 3\\n7 3\\n1 7\\n6 2\\n4 3\\n4 2\\n8 2\\n5 3\\n3 8\\n6 7\\n2 5\\n9 6\\n2 9\\n1 2\\n3 8\\n8 6\\n6 2\\n1 9\\n3 9\\n7 8\\n6 5\\n7 3\\n1 5\\n2 7\\n7 5\\n8 7\\n5 5\\n3 5\\n4 7\\n3 4\\n6 4\\n4 2\\n8 7\\n6 3\\n5 2\\n2 4\\n6 5\\n1 6\\n5 6\\n5 1\\n5 2\\n2 1\\n7 1\\n7 3\\n7 3\\n2 2\\n2 2\\n4 8\\n5 1\\n7 6\\n4 2\\n3 2\\n8 5\\n1 7\\n5 3\\n3 5\\n9 1\\n3 3\\n4 2\\n2 3\\n5 5\\n2 6\\n1 1\\n7 2\\n4 1\\n8 7\\n2 2\\n3 7\\n5 1\\n2 3\\n2 9\\n5 6\\n3 9\\n3 2\\n5 2\\n6 8\\n1 7\\n8 3\\n6 4\\n1 9\\n7 4\\n7 3\\n1 5\\n5 1\\n8 2\\n4 8\\n3 6\\n8 4\\n7 6\\n4 2\\n5 3\\"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2\n2 3\n3 4''') == '3 4 2'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 2\n2 3\n3 4''') == '2 4'''\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 3\"\nassert solution(\"5\") == \"2 4\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2\n2 3\n3 4\n''') == '2 3'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 4'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nprint(solution('''\n3 2\n1 4\n2 2\n3 1\n2 3\n'''))\nprint(solution('''\n3 4\n1 3\n2 2\n3 2\n1 1\n'''))\n\nprint(solution('''\n1 100\n1 1\n'''))"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n\nassert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\n\nassert solution('''4 4\n1 4\n5 2\n3 5\n5 4\n''') == '2'\n\nassert solution('''3 2\n1 2\n2 1\n1 3\n''') == '0'\n\nassert solution('''2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n2\n5\n''') == '5'\n\nassert solution('''\n3\n2\n1\n7\n''') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"7 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3\n2 1\n3 5\n7 2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3\n1 3\n2 1\n3 5\n7 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n1 2\n3 5\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n1 3\n2 1\n3 5\n7 2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n1\n1 2\n2 3\n3 5\n\"\"\") == \"0\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"7 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"5\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n\nassert solution(\n'''\n3 3\n1 2\n2 3\n2 5\n''') == '0'\n\nassert solution(\n'''\n3 4\n1 2\n2 3\n3 1\n''') == '4'\n\nassert solution(\n'''\n3 1\n1 3\n1 4\n3 2\n''') == '0'\n\nassert solution(\n'''\n3 3\n1 3\n2 3\n2 4\n''') == '0'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('1 3') == '1'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('100 2 3') == '1'\nassert solution('100 100 100') == '1'\nassert solution('2 2') == '2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('10 3 5 4') == '8'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\nassert solution('3 5 1\\n1 2\\n2 3\\n2 2\\n1 0\\n1 4\\n2 5\\n4 5\\n5 2\\n2 5\\n2 4\\n0 3\\n1 4\\n0 1\\n') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 3\\n 1 1\\n 2 2\\n 1 3\\n 0 0\\n 0 3\\n 1 4\\n 3 3\\n 3 0\\n') == '2'\nassert solution('2 3\\n 0 1\\n 1 2\\n 1 3\\n 1 4\\n 0 5\\n 1 6\\n 0 7\\n 1 8\\n 2 9\\n 3 10\\n') == '10'\nassert solution('3 2\\n 0 1\\n 1 2\\n 0 3\\n 1 4\\n 1 5\\n 0 6\\n 1 7\\n 0 8\\n 1 9\\n') == '6'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n2 5\n3 5\n3 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 2\n3 1\n4 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 3\n2 2\n3 2\n1 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 3\n3 1\n2 2\n1 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5 5\n5 1\n1 4\n4 3\n5 3\n3 4\n4 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n8 9\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n\"\"\") == \"8\""
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3') == \"2\"\nassert solution('2 5 5') == \"1\"\nassert solution('2 3 4') == \"2\"\nassert solution('1 1') == \"0\"\nassert solution('1 0') == \"1\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('3 2 3') == '4'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n1 3\\n1 2') == 'GHOST'\nassert solution('2 4 5\\n2 4\\n3 1') == 'SAFE'\nassert solution('1 2\\n2 4') == 'SAFE'\nassert solution('2\\n2 3\\n3 4') == 'SAFE'\nassert solution('5\\n5 1\\n1 2') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"GHOST\"\n\nassert solution(\"4 3\\n1 C\\n2 C\\n3 C\\n\") == \"SAFE\"\n\nassert solution(\"4 3\\n1 C\\n2 C\\n3 C\\n4 C\\n\") == \"SAFE\"\n\nassert solution(\"4 3\\n3 C\\n2 C\\n1 C\\n\") == \"GHOST\"\n\nassert solution(\"4 3\\n2 C\\n1 C\\n1 C\\n\") == \"GHOST\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1\n1 2\n1 3\n1 4\n2 1\n2 2\n2 3\n2 4\n3 1\n3 2\n3 3\n3 4\n4 1\n4 2\n4 3\n4 4''') == 'SAFE'\nassert solution('''1 5\n2 5\n3 4\n4 2\n4 5\n5 1\n5 2\n5 3\n5 4\n4 1\n4 2\n4 3\n4 4\n5 1\n5 2\n5 3\n5 4''') == 'GHOST'\nassert solution('''1 9\n2 9\n3 8\n4 7\n4 8\n5 6\n6 5\n6 7\n6 8\n7 5\n7 6\n7 8\n8 5\n8 6\n8 7\n9 1\n9 2\n9 3\n9 4\n''') == 'SAFE'\nassert solution('''1 9\n2 9\n3 8\n4 7\n4 8\n5 6\n6 5\n6 7\n6 8\n7 5\n7 6\n7 8\n8 5\n8 6\n8 7\n9 1\n9 2\n9 3\n9 4\n''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\nCCCC') == 'GHOST'\nassert solution('2 2 3\\nCCCC') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''\n4 3\n3 C\n1 C\n2 C\n''') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"GHOST\"\nassert solution(\"2 2\") == \"SAFE\"\nassert solution(\"4 4\") == \"SAFE\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"GHOST\"\nassert solution(\"10 10\") == \"SAFE\"\nassert solution(\"1 1\") == \"SAFE\"\nassert solution(\"2 2\") == \"SAFE\"\nassert solution(\"3 1\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    C\n    2 C\n    1 C\n    \"\"\") == \"GHOST\"\n\nassert solution(\n    \"\"\"\n    3\n    C\n    2 C\n    1 C\n    \"\"\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n3 C\\n2 C\\n1 C') == 'GHOST'\nassert solution('1\\n2\\n3\\n4\\n4 C\\n2 C\\n1 C') == 'SAFE'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"1\") == \"no fika\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"1.00\"\nassert solution(\"2 1\") == \"2.00\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n\nassert solution(\n'''\n1 4\n0.00 0.00\n''') == \"2\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 3') == 'no fika'\nassert solution('5 5') == '1.5'\n\"\"\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0.00 2.00') == '2'\nassert solution('5\\n0.00 2.00 0.00 2.00 0.00 2.00') == '2'\nassert solution('4\\n0.00 2.00 0.00 2.00 0.00 2.00') == '2'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"2 3\\n0.00 2.01\") == \"no fika\"\nassert solution(\"2 3\\n0.00 2.00\") == \"no fika\"\nassert solution(\"2 3\\n0.00 2.00\") == \"no fika\"\nassert solution(\"2 3\\n0.00 2.01\") == \"2\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"5 3\") == \"4\"\nassert solution(\"10 5\") == \"8\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\nassert solution('1') == '0.1'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3\\n0.00 2.00') == '2'\nassert solution('2 4\\n2.00 4.00') == '1'\nassert solution('1 10\\n0.00 10.00') == '10'\nassert solution('4 1\\n0.00 1.00') == '1'\nassert solution('6 2\\n1.00 2.00') == '1'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\nassert solution([\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',\n    '0.20 0.20',\n    '0.00 2.00',\n    '0.10 0.10',\n    '0.50 0.25',"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '0'\nassert solution('3') == '20'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('1\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '7'\nassert solution('2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '9'\nassert solution('1\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100') == '89'\nassert solution('1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 0\n10 0\n2\n30 0\n15 0\n''') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '10'\nassert solution('10') == '15'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('4\\n0 0\\n10 0\\n0 0\\n30 0\\n15 0') == '6'\nassert solution('5\\n0 0\\n10 0\\n0 0\\n30 0\\n15 0') == '10'\nassert solution('10\\n0 0\\n10 0\\n0 0\\n30 0\\n15 0') == '1'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2') == '10'\nassert solution('2\\n30 0\\n15 0') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('20') == '30'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\nassert solution('20\\n0 0\\n30 0\\n0 0\\n20 0\\n0 0\\n0 0\\n20 0\\n0 0\\n0 0\\n0 0\\n0 0\\n20 0\\n0 0\\n0 0\\n20 0\\n0 0\\n0 0\\n0 0\\n0 0\\n20 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n20 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n20 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '10'\nassert solution('10') == '100'\nassert solution('2') == '10'\nassert solution('30') == '10'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 5\nW 10 0\nW 10 3\nE 17 4\nW 10 3\nE 17 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 10\nW 10 0\nW 10 3\nE 17 4\nW 10 3\nE 17 4\nW 10 3\nE 17 4\nW 10 3\nE 17 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 2\\nW 10 0\\nW 10 3\\nE 17 4\\n\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0\"\nassert solution(\n    \"4 2\\nW 10 0\\nW 10 3\\nE 17 4\\n\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4') == '0'\nprint('all test cases passed')\n\"\"\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\n\nassert solution('''\n2 4\nW 10 0\nE 10 1\nE 10 2\nW 10 3\n''') == '1'\n\nassert solution('''\n2 1\nW 10 0\nE 10 1\n''') == '2'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 3\nW 10 0\nW 10 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 3\nW 10 0\nE 17 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 3\nW 10 0\nE 17 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 3\nW 10 0\nE 17 4\nW 17 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 3\nW 10 0\nE 17 4\nW 17 3\nE 19 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\nassert solution('10 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '1'\nassert solution('5 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '2'\nassert solution('4 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\nassert solution('10 5\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n2 3\nW 10 0\nW 10 3\nE 17 4\n''') == '1'\nassert solution(\n'''\n5 2\nW 20 0\nW 10 3\nW 10 0\nE 17 4\nE 17 4\n''') == '1'\n'''\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\nW 10 1\n''') == '1'\n\nassert solution('''\n8 3\nW 10 0\nW 10 3\nE 17 4\nW 10 2\n''') == '0'\n\nassert solution('''\n1 1\nW 10 1\n''') == '1'\n\nassert solution('''\n3 3\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\n\nassert solution('''\n2 4\nW 10 0\nE 17 4\n''') == '1'"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '0'\nassert solution('10 1\\nW 10 0\\nE 18 3\\nE 17 4\\n') == '1'\nassert solution('10 1\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '2'\n\n'''\n\nimport collections\n\nn = int(input())\nseg = collections.deque()\n\nfor i in range(n):\n    seg.append(input().split())\n\nn = int(input())\n\nfor i in range(n):\n    if seg[i][0] == 'W' and seg[i][1] == '0' and seg[i][2] == '0':\n        if seg[i+1][0] == 'W':\n            print('1')\n        else:\n            print('2')\n    elif seg[i][0] == 'E' and seg[i][1] == '0' and seg[i][2] == '0':\n        if seg[i-1][0] == 'W':\n            print('1')\n        else:\n            print('2')\n    else:\n        print('3')\n\n\n\n'''\nThe second version:\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\n\nassert solution('''\n3 2\n4 2\n1 2\n''') == '4'\n\nassert solution('''\n6 10\n6 9\n6 5\n6 7\n8 9\n9 4\n10 6\n''') == '3'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\n\nassert solution('''\n4\n4 7\n3 3\n4 4\n5 5\n''') == '3'\n\nassert solution('''\n2\n2 5\n1 5\n''') == '1'\n\nassert solution('''\n3\n1 10\n5 5\n''') == '1'\n\nassert solution('''\n8\n0 0\n1 6\n1 3\n2 5\n2 7\n3 10\n''') == '2'"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '3'\nassert solution(input_str_2) == '1'\n\"\"\""
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '2'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n4\n2\n1\n0\n''') == '3'\nassert solution('''\n5\n6\n2\n3\n4\n5\n''') == '4'\nassert solution('''\n10\n11\n7\n8\n3\n9\n2\n5\n4\n1\n0\n''') == '5'\nassert solution('''\n30\n34\n35\n47\n27\n22\n15\n3\n45\n28\n18\n4\n9\n20\n17\n10\n12\n11\n13\n12\n14\n9\n2\n1\n''') == '5'\nassert solution('''\n12\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n''') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '4'\nassert solution('3 4') == '4'\nassert solution('5 13') == '5'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\nassert solution('''\n6\n4\n5 6\n3 4\n5 13\n6 10\n''') == '4'\nassert solution('''\n3\n5 6\n3 4\n5 13\n6 10\n''') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n5 8\n5 6\n3 4\n5 13\n6 10\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\n8\n5 6\n3 4\n5 13\n6 10\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n2\n3 2\n2 4\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n3\n1 2\n1 2\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n1\n1 2\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n3\n2 4\n2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4\n3 3\n2 4\n''') == 'impossible'\nassert solution('''4 5\n6 2\n2 2\n3 3\n''') == 'C A A A A A A'\nassert solution('''4 3\n2 3\n2 2\n''') == 'A A A A'\nassert solution('''4 3\n2 3\n2 1\n''') == 'impossible'\nassert solution('''4 5\n6 2\n2 2\n3 3\n''') == 'C A A A A A A A'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"A B C A B C\"\nassert solution(\"4 4\") == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == 'BAA'\nassert solution('3 5 3') == 'ABC'\nassert solution('2 3 3') == 'AB'\nassert solution('1 5 1') == 'ABBA'\nassert solution('2 2 2') == 'BB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4\n3 2\n1 1\n4 1''') == 'impossible'\nassert solution('''2 2\n2 1\n1 1''') == 'possible'\nassert solution('''2 2\n1 1\n2 1''') == 'possible'\nassert solution('''2 2\n1 1\n2 1''') == 'possible'\nassert solution('''2 2\n2 2\n2 1\n1 1''') == 'possible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 2\\nA 3\\nB 1\\nA\") == \"AB\\nAB\\nAB\\n\"\nassert solution(\"1\\n1 2\\nA 1\\nB 2\\nA\") == \"AB\\nAB\\nAB\\n\"\nassert solution(\"2\\n2 3\\nA 2\\nB 2\\nA\") == \"AB\\nAB\\nAB\\n\"\nassert solution(\"2\\n2 3\\nA 2\\nA 2\\nA\") == \"AB\\nAB\\nAB\\n\"\nassert solution(\"1\\n1 2\\nA 1\\nA 1\\nA\") == \"AB\\nAB\\nAB\\n\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3,2,5,2,5,2]) == \"ABA\"\nassert solution([4,3,3,3,2,4]) == \"BAAAB\"\nassert solution([2,5,4,1,2,4]) == \"ABBAA\"\nassert solution([5,1,5,1,5,1]) == \"AABBAA\"\nassert solution([2,5,1,4,1,4]) == \"ABBBAB\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n10 3 3\n''') == 'A B C'\nassert solution('''3 5\n10 1 2\n''') == 'C A B'\nassert solution('''7 7\n10 3 3\n''') == 'A A A A'\nassert solution('''2 7\n10 1 2\n''') == 'B A'\nassert solution('''5 4\n11 3 2\n''') == 'A A A A A'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n10 3 3\n''') == 'impossible'\nassert solution('''3 4\n10 3 3\n''') == '1B 2C 3A'\nassert solution('''3 6\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '1B 2C 3A'\nassert solution('''2 4\n10 3 3\n''') == 'impossible'\nassert solution('''2 5\n10 3 3\n''') == 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"AAB\"\nassert solution(\"2\") == \"AABBA\"\nassert solution(\"3\") == \"AABBBB\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n    4 4\n    10 3 3\n\"\"\") == \"\"\"\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    A\n    A\n    B\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    A\n    B\n    B\n    B\n    B\n    A\n    A\n    A\n    A\n    A\n    A\n    "
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n\"\"\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nprint(solution(input()))\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n1\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n1\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n1\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n1\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1'\nassert solution('11\\n') == '1'\nassert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == 'ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('11') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('16') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('25') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('30') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == '''BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'''"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"12\\nBEAR\\nHORSE\\nAND\\nFISH\\nCAN\\nSHEAF\") == \"BEAR HORSE AND FISH CAN SHEAF\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    BETWEEN\n    SUBTLE\n    SHADING\n    AND\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n    ''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n    2\n    IN\n    THE\n    END\n    ''') == 'IN THE END'\n\nassert solution('''\n    9\n    SUBTITLE\n    HAS\n    THE\n    END\n    OF\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    ''') == 'SUBTITLE HAS THE END OF THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n    10\n    SUBTITLE\n    HAS\n    THE\n    END\n    OF\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    ''') == 'SUBTITLE HAS THE END OF THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n    4\n    SUBTITLE\n    HAS\n    THE\n    END\n    OF\n    THE\n    ABSENCE\n    OF\n    LIGHT\n    LIES\n    NUANCE\n    IQLUSION\n    ''') == 'SUBTITLE HAS THE END OF THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\OF\\LIGHT\\LIES\\NUANCE\\IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\nassert solution(\"acbacdabca\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '12'\nprint('solution() is working')\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '12'\nassert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abrahellehhelleh') == '12'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '12'\nassert solution('abrahellehhelleh') == '12'\nassert solution('aabbbaaacd') == '0'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abrahellehhelleh') == '12'\nassert solution('a'*10000) == '0'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '12'\nassert solution('abrahellehhelleh') == '12'\nprint('check passed')\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join(['1 1 1 1 1 1 1 1 1 1 1 1 1'])) == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '70'\nassert solution('3\\n1 1 1\\n1 1 1\\n1 1 1\\nSample Input') == '0'\nassert solution('1\\n1\\n1\\n1\\nSample Input') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\nSample Input') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\nSample Input') == '0'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '70'"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"70\"\nassert solution(\"\"\"\n3\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"59\"\nassert solution(\"\"\"\n8\n1 2 3 4 5 6 7 8\n2 3 4 5 6 7 8 1\n3 4 5 6 7 8 1 2\n4 5 6 7 8 1 2 3\n5 6 7 8 1 2 3 4\n6 7 8 1 2 3 4 5\n7 8 1 2 3 4 5 6\n8 1 2 3 4 5 6 7\n\"\"\") == \"113\"\nassert solution(\"\"\"\n7\n1 2 3 4 5 6 7\n2 3 4 5 6 7 1\n3 4 5 6 7 1 2\n4 5 6 7 1 2 3\n5 6 7 1 2 3 4\n6 7 1 2 3 4 5\n7 1 2 3 4 5 6\n\"\"\") == \"114\"\nassert solution(\"\"\"\n1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"54\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n2 1 2 2\n1 1 2\n''') == '5'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1 1 1 1 1 1 1 1 1 1') == '70'\n\"\"\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10\n5\n5\n5\n5\n4\n5\n5\n5\n5\n5\n4\n5\n5\n4\n5\n5\n4\n5\n4\n\"\"\") == \"70\"\nassert solution(\"\"\"\n20\n4\n4\n4\n5\n5\n5\n4\n5\n5\n4\n5\n4\n5\n4\n5\n5\n4\n5\n4\n\"\"\") == \"70\"\nassert solution(\"\"\"\n20\n4\n5\n4\n4\n4\n5\n5\n4\n4\n5\n5\n4\n5\n4\n5\n5\n4\n5\n4\n\"\"\") == \"50\"\nassert solution(\"\"\"\n20\n4\n4\n4\n5\n5\n5\n5\n4\n4\n5\n4\n5\n4\n5\n4\n5\n5\n4\n5\n4\n\"\"\") == \"50\"\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('65') == '70'\nassert solution('2') == '5'\nassert solution('10') == '100'\nassert solution('1') == '1'\nassert solution('8') == '8'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"70\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 5\") == \"7\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4') == '7'\nassert solution('10 50\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4') == '8'\nassert solution('10 100\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4') == '11'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1\n1 2 3 4 5\n2 4\n1 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n4\n4\n8\n7\n''') == '7'\n\nassert solution('''\n5 2\n1 2 3 4 5\n2 4\n1 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n1\n4\n''') == '4'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"7\"\nassert solution(\"10 5\") == \"10\"\nassert solution(\"0 1\") == \"1\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n1 2\\n0 1\\n0 4\\n1 4\\n') == '10'\nassert solution('2\\n10\\n1 2\\n0 1\\n0 4\\n1 4\\n') == '8'\nassert solution('10\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n0\\n1\\n1\\n') == '7'\nassert solution('10\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n0\\n1\\n1\\n') == '6'\nassert solution('10\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n0\\n1\\n1\\n') == '5'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"10 5\\n\"\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n    \"1 2 3 4 5 6 7 8 9\\n\"\n    \"0 1\\n\"\n    \"0 4\\n\"\n    \"1 4\\n\"\n    \"0 1\\n\"\n    \"0 4\"\n) == \"10\\n\"\nassert solution(\n    \"20 30\\n\"\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n    \"1 2 3 4 5 6 7 8 9\\n\"\n    \"0 1\\n\"\n    \"0 4\\n\"\n    \"1 4\\n\"\n    \"0 1\\n\"\n    \"0 4\"\n) == \"20\\n\"\nassert solution(\n    \"20 40\\n\"\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n    \"1 2 3 4 5 6 7 8 9\\n\"\n    \"0 1\\n\"\n    \"0 4\\n\"\n    \"1 4\\n\"\n    \"0 1\\n\"\n    \"0 4\"\n) == \"30\\n\"\nassert solution(\n    \"10 5\\n\"\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n    \"1 2 3 4 5 6 7 8 9\\n\"\n    \"0 1\\n\"\n    \"0 4\\n\"\n    \"1 4\\n\"\n    \"0 1\\n\"\n    \"0 4\"\n) == \"10\\n\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('-2 0') == '1'\nassert solution('0 -1') == '2'\nassert solution('-2 1') == '1'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\nassert solution('''1\n1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 4\\n1 0\\n-2 1\\n-2 1\\n3 -1') == '6'\nassert solution('4 4 3\\n0 1\\n1 0\\n1 1\\n3 0') == '3'\nassert solution('3 3 4\\n0 1\\n1 0\\n1 1\\n3 0') == '1'\nassert solution('3 3 4\\n1 0\\n-2 1\\n-2 1\\n3 0') == '2'"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\") == \"6\"\nassert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"5 4 8\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n4 5\") == \"4\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 7') == '6', \"1st example\"\nassert solution('10 20 10') == '2', \"2nd example\"\nassert solution('10 20 10') == '1', \"3rd example\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\nassert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\nassert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '7'\nassert solution('''\n2 4 5\n0 0\n-2 1\n0 -2\n0 1\n1 -1\n''') == '2'\nassert solution('''\n2 4 5\n0 0\n-2 1\n0 -2\n0 1\n1 -1\n''') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"3 3\\n-1 -2\\n1 2\\n2 1\\n1 2\\n1 1\") == \"4\"\nassert solution(\"5 5\\n-1 -1\\n1 1\\n1 1\\n2 2\\n1 1\\n1 1\\n2 1\\n2 2\\n3 2\\n1 1\") == \"5\"\nassert solution(\"7 7\\n-1 -1\\n1 1\\n1 1\\n1 1\\n2 2\\n1 1\\n1 1\\n2 1\\n2 2\\n3 2\\n1 1\") == \"6\"\nassert solution(\"5 5\\n-1 -1\\n1 1\\n1 1\\n2 2\\n1 1\\n1 1\\n2 1\\n2 2\\n3 2\\n1 1\") == \"5\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\nassert solution('''\n2 4 5\n-2 0\n0 -1\n0 1\n1 0\n1 1\n1 2\n3 -1\n''') == '6'\nassert solution('''\n2 4 5\n-2 0\n0 -1\n0 1\n1 0\n2 1\n2 2\n2 3\n3 -1\n''') == '6'\nassert solution('''\n3 3 3\n-3 -3\n-3 -2\n-3 -1\n-2 -3\n-1 -2\n0 -1\n-1 -1\n0 0\n1 0\n1 1\n2 0\n1 2\n0 3\n''') == '18'\nassert solution('''\n3 3 2\n-3 -3\n-3 -2\n-3 -1\n-2 -3\n-1 -2\n0 -1\n-1 -1\n0 0\n1 0\n1 1\n2 0\n1 2\n0 3\n''') == '8'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('-2 0') == '0'\nassert solution('0 -1') == '1'\nassert solution('1 0') == '2'\nassert solution('2 1') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('1 4 40 3') == '4'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 2') == '3'\nassert solution('2 1 2 3') == '4'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n0.1 2 0.2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n0.1 2 0.2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n0.1 2 0.2\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n0.1 2 0.2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n0.1 2 0.2\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 4 40\n''') == '3'\nassert solution('''\n10 2 2 4\n''') == '2'\nassert solution('''\n10 1 2 4\n''') == '1'\nassert solution('''\n2 5 2 4\n''') == '4'\nassert solution('''\n6 5 4 3\n''') == '1'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('2 1 5 40') == '1'\nassert solution('1 1 5 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 1 2 4 40') == '2'\nassert solution('3 1 1 2 4 40') == '1'\nassert solution('3 1 3 2 4 40') == '2'\nassert solution('3 1 5 2 4 40') == '1'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 4 40') == '3'\n\nassert solution('0.5 1 1 1') == '0.5'\n\nassert solution('1 2 3 4') == '2'\n\nassert solution('0.5 2 3 4') == '2'\n\nassert solution('1 2 3 4 5 6 7 8 9 10') == '5'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 4 40') == '3'\n\n'''\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '4'\nprint(solution(input))\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\nassert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\""
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0''') == '99'\nassert solution('''1 1\n1 2\n3 3\n4 4\n5 5\n''') == '4'\nassert solution('''2 2\n1 2\n2 3\n1 3\n4 4\n3 4\n''') == '3'\nassert solution('''2 2\n1 2\n2 3\n1 3\n4 4\n3 4\n4 5\n5 6\n''') == '4'\nassert solution('''2 2\n1 2\n2 3\n1 3\n4 4\n3 4\n4 5\n5 6\n7 7\n''') == '7'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    10\n    93 82\n    92 76\n    99 62\n    0 70\n    76 0\n    62 90\n    60 68\n    83 78\n    83 73\n    0 70\n    76 0\n    ''') == '99'\nassert solution('''\n    10\n    93 82\n    92 76\n    99 62\n    0 70\n    76 0\n    62 90\n    60 68\n    83 78\n    83 73\n    0 70\n    76 0\n    ''') == '97'\nassert solution('''\n    10\n    93 82\n    92 76\n    99 62\n    0 70\n    76 0\n    62 90\n    60 68\n    83 78\n    83 73\n    0 70\n    76 0\n    ''') == '0'\nassert solution('''\n    10\n    93 82\n    92 76\n    99 62\n    0 70\n    76 0\n    62 90\n    60 68\n    83 78\n    83 73\n    0 70\n    76 0\n    ''') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"99\"\nassert solution(\"\") == \"0\"\nassert solution(\"3 352\") == \"99\"\nassert solution(\"92 76 436\") == \"99\"\nassert solution(\"99 62 -1\") == \"99\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n5 6\n1 3\n4\n''') == '4'\nassert solution('''\n2 1\n0\n''') == '0'\nassert solution('''\n5 8\n8 2\n10\n''') == '10'\nassert solution('''\n5 6\n9 5\n10 6\n''') == '10'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0''') == '99'\nprint('Solution: ', solution('''3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0'''))\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 352') == '99'\nassert solution('2 352') == '0'\nassert solution('1 352') == '0'\nassert solution('2 864') == '0'\nassert solution('3 864') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\"\nassert solution(\"\"\"\n2 4\n9 6\n5 9\n9 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n2 2\n0 1\n0 2\n''') == '1'\nassert solution('''\n2 3\n1 2\n-1 2\n''') == '-1'\n''')\n\n'''\n\nn, t = map(int, input().split())\n\nscav_time = [[0] * n for i in range(n)]\ntask_time = [[0] * n for i in range(n)]\nfor _ in range(n):\n    p, t, d = map(int, input().split())\n    if d == -1:\n        continue\n    for i in range(t, t+d+1):\n        scav_time[i][_] = p\n    task_time[_][p-1] = t"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"2\\n3 4\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3 4\"\nassert solution(\"3 2\") == \"3 2\"\nassert solution(\"3 2 1\") == \"3 1 2\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 3\n3 4\n\"\"\") == \"4 2 3\"\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == \"4 2 3\"\n\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"3 2 1\"\n\nassert solution(\"\"\"\n2\n3\n4\n\"\"\") == \"2 4 3\"\n\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"3 2 1\""
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\nassert solution('1') == '2'\nassert solution('5') == '3'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 4\\n') == '2 3'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n') == '4 6'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n') == '5 9'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 2\\n2 3\\n3 4\\n4"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4\n1 2\n2 3\n3 4\n\"\"\") == \"2 3\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"1\") == \"1 1\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1 1\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"2 2\"\nassert solution(\"3\") == \"3 3\"\nassert solution(\"4\") == \"4 4\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4 2'\nassert solution('10') == '4 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2 3\\n4 2'\nassert solution('9\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101\\n101 102\\n102 103\\n103 104\\n104 105\\n105 106\\n106 107\\n107 108\\n108 109\\n109 110\\n110 111\\n111 112\\n112 113\\n113 114\\n114 115\\n115 116\\n116 117\\n117 118\\n118 119\\n119 120\\n120 121\\n121 122\\n122 123\\n123 124\\n124 125\\n125 126\\n126 127\\n127 128\\n128 129\\n129 130\\n130 131\\n131 132\\n132 133\\n133 134\\n134 135\\n135 136\\n136 137\\n137 138\\n138 139\\n139 140\\n140 141\\n141 142\\n142 143\\n143 144\\n144 145\\n145 146\\n146 147\\n147 148\\n148 149\\n149 150\\n150 151\\n151 152\\n152 153\\n153 154\\n154 155\\n155 156\\n156 157\\n157 158\\n158 159\\n159 160\\n160 161\\n161 162\\n162 163\\n163 164\\n164 165\\n165 166\\n166 167\\n167 168\\n168 169\\n169 170\\n170 171\\n171 172\\n172 173\\n173 174\\n174 175\\n175 176\\n176 177\\n177 178\\n178 179\\n179 180\\n180 181\\n181 182\\n182 183\\n183 184\\n184 185\\n185 186\\n186 187\\n187 188\\n188 189\\n189 190\\n190 191\\n191 192\\n192 193\\n193 194\\n194 195\\n195 196\\n196 197\\n197 198\\n198 199\\n199 200\\n200 201\\n201 202\\n202 203\\n203 204\\n204 205\\n205 206\\n206 207\\n207 208\\n208 209\\n209 210\\n210 211\\n211 212\\n212 213\\n213 214\\n214 215\\n215 216\\n216 217\\n217 218\\n218 219\\n219 220\\n220 221\\n221 222\\n222 223\\n223 224\\n224 225\\n225 226\\n226 227\\n227 228\\n228 229\\n229 230\\n230 231\\n231 232\\n232 233\\n233 234\\n234 235\\n235 236\\n236 237\\n237 238\\n238 239\\n239 240\\n240 241\\n241 242\\n242 243\\n243 244\\n244 245\\n245 246\\n246 247\\n247 248\\n248 249\\n249 250\\n250 251\\n251 252\\n252 253\\n253 254\\n254 255\\n255 256\\n256 257\\n257 258\\n258 259\\n259 260\\n260 261\\n261 262\\n262 263\\n263 264\\n264 265\\n265 266\\n266 267\\n267 268\\n268 269\\n269 270\\n270 271\\n271 272\\n272 273\\n273 274\\n274 275\\n275 276\\n276 277\\n277 278\\n278 279\\n279 280\\n280 281\\n281 282\\n282 283\\n283 284\\n284 285\\n285 286\\n286 287\\n287 288\\n288 289\\n289 290\\n290 291\\n291 292\\n292 293\\n293 294\\n294 295\\n295 296\\n296 297\\n297 298\\n298 299\\n299 300\\n300 301\\n301 302\\n302 303\\n303 304\\n304 305\\n305 306\\n306 307\\n307 308\\n308 309\\n309 310\\n310 311\\n311 312\\n312 313\\n313 314\\n314 315\\n315 316\\n316 317\\n317 318\\n318 319\\n319 320\\n320 321\\n321 322\\n322 323\\n323 324\\n324 325\\n325 326\\n326 327\\n327 328\\n328 329\\n329 330\\n330 331\\n331 332\\n332 333\\n333 334\\n334 335\\n335 336\\n336 337\\n337 338\\n338 339\\n339 340\\n340 341\\n341 342\\n342 343\\n343 344\\n344 345\\n345 346\\n346 347\\n347 348\\n348 349\\n349 350\\n350 351\\n351 352\\n352 353\\n353 354\\n354 355\\n355 356\\n356 357\\n357 358\\n358 359\\n359 360\\n360 361\\n361 362\\n362 363\\n363 364\\n364 365\\n365 366\\n366 367\\n367 368\\n368 369\\n369 370\\n370 371\\n371 372\\n372 373\\n373 374\\n374 375\\n375 376\\n376 377\\n377 378\\n378 379\\n379 380\\n380 381\\n381 382\\n382 383\\n383 384\\n384 385\\n385 386\\n386 387\\n387 388\\n388 389\\n389 390\\n390 391\\n391 392\\n392 393\\n393 394\\n394"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"9.0000\"\nassert solution(\"2\") == \"12.00000\"\nassert solution(\"3\") == \"12.00000\"\nassert solution(\"4\") == \"9.0\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '9.0'\nassert solution('4') == '9.0000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '9.0'\nassert solution() == '12.00000'\nassert solution() == '12.0'\nassert solution() == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '9.0000'\nassert solution('2') == '12.00000'\nassert solution('3') == '12.00000'\nassert solution('4') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '9.0'\nassert solution('2') == '12.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1 1\n2 2''') == '9.0000'\nassert solution('''4\n1 1\n2 2\n3 2\n4 1''') == '12.00000'\nassert solution('''10\n2 1\n3 2\n4 2\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9''') == '27.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 1\n2 2\n3 2\n4 1\n\"\"\") == \"9.0000\"\nassert solution(\"\"\"\n4\n1 1\n2 2\n3 2\n4 1\n\"\"\") == \"12.00000\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1''') == '9.0000'\nassert solution('''2 2''') == '12.00000'\nassert solution('''3 2''') == '12.00000'\nassert solution('''4 1''') == '9.0'\nprint('Almost there!')\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n2 2\") == \"9.0\"\n\na = \"1\"\nb = \"1\"\nassert a == b"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n2\\n2') == '9.0000'\nassert solution('2\\n1\\n2\\n3') == '12.00000'\nassert solution('3\\n1\\n2\\n3') == '12.00000'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'DI Y'\nassert solution('0') == 'DI A'\nassert solution('6') == 'DI X'\nassert solution('4') == 'PL A'\nassert solution('8') == 'PL X'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == 'DI Y'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"DI\"\nassert solution(\"0\") == \"DI\"\nassert solution(\"2\") == \"ST A\"\nassert solution(\"1000000000\") == \"ST A\"\nassert solution(\"01111001\") == \"DI\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == 'DI 5'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n2\n''') == '''\nDI Y\n'''\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'DI A'\nassert solution('10') == 'DI Y'\nassert solution('1000000') == 'DI A'\nassert solution('100000000') == 'DI A'\nassert solution('1000000000000') == 'DI A'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'ST A\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('1000') == 'ST A\\nST X\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('123456789') == 'ST A\\nST X\\nST Y\\nST Z\\nST A\\nST X\\nST Y\\nST Z\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('0') == 'DI\\n'\n\"\"\"\n\nfrom typing import Optional"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"3\") == \"DI\\nDI\\nDI\\nDI\\nST X\\nST Y\\nDI\\n\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"1 6 6\") == \"2\"\nassert solution(\"5 5 6\") == \"2\"\n\n--input\n5 6\n00000000000000 FFFFFFFFFFFFFFFFFF\n0111111111111111 FFFFFFFFFFFFFFFFF\n00000000000000 0000 0000 0000 0000\n00000000000000 0000 0000 0000 0000\n00000000000000 0000 0000 0000 0000\n00000000000000 0000 0000 0000 0000\n00000000000000 0000 0000 0000 0000\n\n--output\n2\n\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 5 6\nFFFF FFFF 0000 0000 0000 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\nassert solution('3 3 7') == '3'\nassert solution('15 9 4') == '10'\nassert solution('18 1 3') == '3'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 10 10') == '11'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('0 0 0 0 0 0') == '1'\nassert solution('1 1 1 1 1 1') == '3'\n\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"1 4 5\") == \"4\""
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(samples_a) == std_out\nassert solution(samples_b) == std_out\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n''') == '2'\nassert solution('''\n1 2 3\n0100 0101 0100\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000 0000\n0000 0000"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000') == '2'\n\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 FFFF') == '1'\nassert solution('1 5') == '3'\nassert solution('1 1 FFFF FFFF') == '1'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\n\n'''"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nS -> aSb\") == \"abaaba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->.\") == \"abaaba\"\nassert solution(\"1\\n\") == \"NONE\"\nassert solution(\"3\\nS -> aSb\\nS -> a\\nS -> b\\nS -> a\\nS -> b\\nS ->.\") == \"a\""
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome''') == 'abaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaaba"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> a\\n') == 'abaaba'\nassert solution('5\\nS -> aSb\\nS -> bSb\\nS -> a\\nS -> b\\nS -> a\\n') == 'ababbba'\nassert solution('5\\nS -> aSb\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'NONE'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'abaaba'\nassert solution() == 'NONE'\nassert solution() == 'abbbbbbbbbbbbbbbbba'\nassert solution() == 'a'"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\nNONE on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\nassert solution('6\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'NONE'\nassert solution('1\\nS -> a\\nS -> a\\n') == 'a'\nassert solution('3\\nS -> aSb\\nS -> b\\nS -> a\\nS -> b\\nS -> c\\nS -> d\\nS -> a\\nS -> d\\n') == 'a'\nassert solution('7\\nS -> aS\\nS -> b\\nS -> a\\nS -> b\\nS -> c\\nS -> d\\nS -> a\\nS -> d\\n') == 'b'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'abaaba'\nassert solution('S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\nassert solution('S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\nassert solution('S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\nassert solution('S -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> a\\nS -> b\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"\"\"abaaba\"\"\".strip()\n\nassert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nS -> c\nS ->\nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"\"\"abaaba\"\"\".strip()\n\nassert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nS -> c\nS -> d\nS -> e\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"\"\"abaaba\nNONE\nNONE\nNONE\nNONE\nNONE\"\"\".strip()\n\nassert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nS -> a\nS -> b\nS -> c\nS -> d\nS -> e\nS ->\nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\"\"\") == \"\"\"abaaba\nNONE\nNONE\nNONE\nNONE\nNONE\nabaaba\"\"\".strip()\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == \"4\"\n\nassert solution('''\n5\n5 0 2\n1 3 7\n2 0\n4\n''') == \"2\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n5 0 2\n1 3 7\n2 0\n4\n''') == '4'\nassert solution('''\n4\n5 0 2\n1 3 7\n2 0\n4\n''') == '3'\nassert solution('''\n1\n1\n1\n''') == '2'\nassert solution('''\n1\n1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\nassert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == \"4\"\n\nprint(solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n'''))\nassert solution('''2\n0 0\n2 0\n''') == \"2\"\nassert solution('''4\n0 0\n1 0\n1 0\n''') == \"4\"\n\nprint(solution('''7\n7 7\n7 0\n7 1\n7 1\n7 2\n6 1\n6 2\n'''))\nassert solution('''4\n0 0\n1 0\n1 1\n''') == \"2\"\nassert solution('''5\n4 4\n0 0\n0 0\n4 4\n''') == \"5\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4'\nprint(solution('''10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10\n10 10 10 10 10 10 10 10 10 10 10'''))\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('5 2 3') == '2'\nassert solution('1 3 7') == '0'\nassert solution('5 2 0') == '4'\nassert solution('5 4 3 2') == '1'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n\nassert solution('''10\n1 4 8 5 7 8 8 8\n2 4 5 4 5 7\n3 4 5 4 5 7\n4 4 5 4 5 7\n5 5 5 5 5 7\n6 5 7 7 7 7\n7 7 7 7 7 7\n8 7 7 7 7 7\n9 7 7 7 7 7\n10 7 7 7 7 7\n''') == '8'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 6 8 6 2 1\n1 1 2 3 4 5\n2 5 4 3 1 6\n3 5 1 6 4 4\n4 5 1 1 3 1\n5 4 3 2 2 1\n''') == \"4\"\n\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n1 6 7 4 5 3 2 1\n4 5 8 3 1 6 2 7\n3 1 7 5 2 8 4 6\n2 6 5 1 8 3 7 4\n4 1 7 8 5 1 6 2\n5 8 2 4 3 1 6 7\n1 8 3 4 6 5 7 2\n''') == \"9\"\n\n'''"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"GO FOR IT\", \"First\"\nassert solution(\"1 2\") == \"SUCCESS\", \"Second\"\nassert solution(\"3 3\") == \"SUCCESS\", \"Third\"\nassert solution(\"10 10\") == \"NO WAY\", \"Fourth\"\nassert solution(\"5 2\") == \"NO WAY\", \"Fifth\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n4 4\") == \"GO FOR IT\"\nassert solution(\"2 3\\n5 5\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == \"GO FOR IT\"\nassert solution('2 3\\n4 4\\nWGWW\\nWSBB\\nWWWW') == \"SUCCESS\"\n\"\"\"\n\nimport math\n\nstdin = input()\n_, a, f = stdin.split(' ')\na, f = int(a), int(f)\n\nlines = []\nfor _ in range(2):\n    line = input()\n    lines.append(line)\n\n_, l, w = lines[0].split(' ')\nl, w = int(l), int(w)\nlava = []\nfor line in lines[1:]:\n    lava.append(line.strip())\n\n_, w, a = lines[1].split(' ')\nw, a = int(w), int(a)"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\") == \"GO FOR IT\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\") == \"NO WAY\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nBBWG\") == \"SUCCESS\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"3 2\") == \"SUCCESS\"\nassert solution(\"4 3\") == \"GO FOR IT\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"10 10\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"SUCCESS\", solution(\"1 1\")\nassert solution(\"2 2\") == \"NO WAY\", solution(\"2 2\")\nassert solution(\"3 3\") == \"SUCCESS\", solution(\"3 3\")\nassert solution(\"4 4\") == \"GO FOR IT\", solution(\"4 4\")\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'GO FOR IT'\nassert solution('4 4') == 'GO FOR IT'\nassert solution('4 4') == 'GO FOR IT'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'GO FOR IT'\nassert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWBWG') == 'SUCCESS'\nassert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWBWG') == 'GO FOR IT'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"7 8\") == \"GO FOR IT\""
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2') == '0'\nassert solution('2 10') == '20'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\\n\") == \"2243\""
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2243'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == \"2243\"\nassert solution('''\n2 1\n1\nSample Input:\n7 10\n900 900 900 900 900 900 900\nSample Output:\n1467\n''') == \"1467\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 900\\n800 700 400 300 200\\n'\n) == '2243'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 0\") == \"0\", \"Even Fibonacci numbers sum to 1\"\nassert solution(\"2 5\") == \"5\", \"Odd Fibonacci numbers sum to 5\"\nassert solution(\"4 4\") == \"9\", \"Even Fibonacci numbers sum to 9\"\nassert solution(\"5 10\") == \"55\", \"Odd Fibonacci numbers sum to 55\""
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('2 2\\n4 3 2\\n3 3\\n2 3\\n') == '2'\nassert solution('1 1\\n1 1\\n') == '0'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 2 3') == '4'\nassert solution('4 2\\n4 4 4 4') == '5'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n900\\n800 700 400 300 200') == '2243'\nassert solution('2\\n900\\n800 700 400 300 200\\n800\\n600 700 400 300 200') == '2243'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''5 5\n1 1 1 1 1\n''') == '5'\nassert solution('''5 5\n1 1 1 1 1\n''') == '5'\nassert solution('''5 5\n1 1 1 1 1\n''') == '5'\nassert solution('''5 5\n1 2 3 4 5\n''') == '5'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes'\nprint('Check passed')\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4\\n? 1 3\\n= 1 8\\n? 1 3') == 'yes'\nassert solution('5 4\\n? 1 3\\n= 1 8\\n? 1 3') == 'no'\nassert solution('5 4\\n? 1 3\\n? 1 3') == 'yes'\nassert solution('5 4\\n? 1 3\\n= 1 8\\n? 1 3') == 'yes'\nassert solution('2 2\\n? 1 3\\n= 1 3\\n= 1 3') == 'yes'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 3\n= 2 8\n? 1 3\n= 3 9\n= 4 10\n= 5 10\n= 6 9\n= 7 9\n? 2 1\n= 3 8\n= 4 8\n= 5 9\n= 6 9\n= 7 9\n= 8 8\n= 9 9\n=10 10\n=11 10\n=12 10\n? 2 3\n= 4 10\n= 5 9\n= 6 9\n= 7 8\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 2 1\n= 4 8\n= 5 9\n= 6 9\n= 7 8\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 3 1\n= 6 9\n= 7 8\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 3 2\n= 4 9\n= 5 8\n= 6 8\n= 7 9\n= 8 9\n= 9 9\n=10 7\n=11 7\n=12 7\n? 3 3\n= 6 9\n= 7 8\n= 8 9\n= 9 9\n=10 7\n=11 7\n=12 7\n? 4 2\n= 1 8\n= 2 8\n= 3 9\n= 4 9\n= 5 10\n= 6 10\n= 7 9\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 5 2\n= 3 8\n= 4 9\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 5 3\n= 1 8\n= 2 8\n= 3 9\n= 4 9\n= 5 10\n= 6 10\n= 7 9\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 6 3\n= 1 9\n= 2 8\n= 3 9\n= 4 9\n= 5 10\n= 6 10\n= 7 8\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 7 2\n= 2 4\n= 3 4\n= 4 9\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 7 3\n= 2 4\n= 3 4\n= 4 9\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 8 2\n= 1 4\n= 2 5\n= 3 5\n= 4 9\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 8 3\n= 1 4\n= 2 5\n= 3 5\n= 4 9\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 10 2\n= 1 5\n= 2 5\n= 3 6\n= 4 6\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 10 3\n= 1 6\n= 2 5\n= 3 5\n= 4 6\n= 5 9\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 11 2\n= 3 4\n= 4 5\n= 5 6\n= 6 8\n= 7 8\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 11 3\n= 4 5\n= 5 6\n= 6 8\n= 7 8\n= 8 9\n= 9 9\n=10 8\n=11 8\n=12 8\n? 12 2\n= 1 5\n= 2 6\n= 3 6\n= 4 8\n= 5 8\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n? 12 3\n= 1 6\n= 2 5\n= 3 5\n= 4 8\n= 5 8\n= 6 9\n= 7 9\n= 8 9\n= 9 9\n=10 9\n=11 9\n=12 9\n''') == 'yes\\no')"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n? 1 3\\n') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n2 3 4\\n3 4 5') == 'no\\nyes\\nno\\nyes\\nno\\nno\\nno\\nno\\n'\nassert solution('1 2 3\\n2 3 4\\n3 4 5\\n1 1 5') == 'yes\\nyes\\nno\\nyes\\n'\nassert solution('4\\n5\\n5\\n5\\n4') == 'no\\nyes\\nno\\nyes\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\") == \"yes\\nyes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\nSample Output:\nyes\nno\nno\nyes\nno\nno\n''') == 'yes\\nno\\nno\\nyes\\nno\\nno\\n'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\") == \"no\"\nassert solution(\"10 4\\n? 1 3\\n= 1 8\\n? 3 3\") == \"yes\"\nassert solution(\"10 4\\n? 1 3\\n= 1 8\\n? 3 3\") == \"yes\""
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n= 1 3\\n? 1 3\\n= 1 8\\n? 1 3\\n') == 'no\\nyes\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3\\n3\\n= 1 2\\n= 2 3\") == \"no\\nyes\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"5 4\\n4 1 9 2\") == \"1\"\nassert solution(\"1 1\\n0\") == \"0\"\nassert solution(\"0\\n1\") == \"0\"\nassert solution(\"1\\n0\") == \"0\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n10 5 4 8 3') == '2'\nassert solution('5 3\\n10 5 4 8 3') == '1'\nassert solution('2 2\\n10 10') == '0'\nassert solution('3 2\\n10 10 8 9') == '0'\nassert solution('5 6\\n10 5 4 8 3') == '2'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n10 5 4 8 3\n''') == '2'\nassert solution('''5 7\n3 4 7 7 1 4 5 1 4 7 2 6 3 7\n''') == '5'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3\\n4 5 6') == '2'\nassert solution('1 2 3 4\\n5 6 7') == '0'\nassert solution('10 5 4 8 3\\n1 2 3 4\\n5 6 7 8') == '2'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '2'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 3\n6\n6 7\n6 5\n6 8\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n3 2\n3 4 2\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n4 1\n1 2 4 3\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n8 1\n1 2 8 6 4 3 5 7\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n12 1\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''5 3\n10 5 4 8 3\n''') == '2', \"4+3\"\nassert solution(\n'''5 3\n10 5 4 8 3\n''') == '1', \"4+3\"\nassert solution(\n'''10 3\n2 5 4 8 3\n''') == '0', \"4+3\"\nassert solution(\n'''10 3\n2 5 4 8 3\n''') == '4', \"4+3\"\nassert solution(\n'''5 3\n10 5 4 8 3\n''') == '3', \"4+3\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('5 5 5 5 5 5\\n1 2 3 4 5') == '5'\nassert solution('5 5 5 5 5 5\\n6 7 8 9 10') == '1'\nassert solution('5 5 5 5 5 5\\n4 6 7 8 9 10') == '4'\nassert solution('5 5 5 5 5 5\\n3 6 7 8 9 10') == '0'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 3\n10 5 4 8 3\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n5 5\n3 8 6 7 4\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n6 5\n3 9 1 5 7 8\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n7 4\n4 8 6 9 1 5 2\n\"\"\"\n) == \"7\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 127\") == '1083', 'First'\nassert solution(\"2 256\") == '5', 'Second'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1''') == '5'\nassert solution('''3 2''') == '7'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 127') == 1083\nassert solution('10 8') == 48\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1083\"\nassert solution(\"2 2\") == \"6\"\n\n\"\"\"\n\n\nfrom sys import stdin\nfrom collections import deque\nfrom collections import defaultdict\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1083'\nassert solution('1 2\\n') == '1111'\nassert solution('100 100\\n') == '1000111'\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 7\") == \"18\"\n\n---Input---\n14 89\n\n---Output---\n350"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\nassert solution('7') == '12'\nassert solution('9') == '41'\nassert solution('11') == '61'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 127') == 1083\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\nassert solution('''5 3\nHow much is 6 times 9? 42\nIs there intelligent life on Earth? Probably\nIs it possible to build a ship without thrust?''') == '0.000000000'\nassert solution('''4 3\nHow much is 6 times 9? 42\nIs it possible to build a ship without thrust?\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n'''\n\nimport re"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1.3333333333'\nassert solution('4 4') == '4.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"2.0000000000\"\n\n\"\"\""
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"2.0\"\nassert solution(\"16 5\") == \"10.0\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '2.0'\nassert solution('10 10') == '1.0'\nassert solution('5 5') == '0.5'\n\n'''\nimport time\nimport sys\nimport math\nimport random"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\nassert solution('5\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0833333333'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''How much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\nassert solution('''How much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\nassert solution('''How much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHow much is 6 times 9? 42\nHow much is 9 times"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n\nSample Input:\n4 2\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nSample Output:\n1.0000000\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"2 2\n    A B\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2\nmonkey 2\nlion 3\npenguin 1\n\"\"\") == 'POSSIBLE'\n\nassert solution(\n\"\"\"\n3\nmonkey 2\nlion 3\npenguin 1\n\"\"\") == 'IMPOSSIBLE'\n\nassert solution(\n\"\"\"\n1\n3 4\nA B 1\nC D 1\n\"\"\") == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"POSSIBLE\"\n\nSample Input:\n6 4\nlion 1 monkey 2 elephant 3 tiger 4 zebra 5 dwarf 6\nelephant 5 zebra 2 elephant 3 elephant 4\nelephant 6\nSample Output:\nIMPOSSIBLE\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\nlion 1 monkey\nmonkey 2 lion\npenguin 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n5 2\npenguin 2 monkey\nmonkey 3 elephant\nelephant 1 elephant\n''') == 'POSSIBLE'\nassert solution('''\n4 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\n''') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 6\\n\"\n    \"monkey 2 lion penguin\\n\"\n    \"lion 3 monkey penguin lion\\n\"\n    \"penguin 1 monkey\\n\"\n) == \"POSSIBLE\"\n\nassert solution(\n    \"1 2 3 4\\n\"\n    \"a b\\n\"\n    \"b a\\n\"\n    \"b a\\n\"\n    \"a a\\n\"\n) == \"IMPOSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'POSSIBLE'\nassert solution('3 3') == 'IMPOSSIBLE'\nassert solution('4 3') == 'FALSE ALARM'\nassert solution('3 1') == 'POSSIBLE'\nassert solution('2 1') == 'FALSE ALARM'\n\n-----Hints-----\nUsing Python, the input is processed as follows:\nimport sys\ninput_lines = sys.stdin.readlines()\n\nThe function solution below uses a custom in-built function that reads lines from the input and performs the following steps:\n\nReads the first line of input, which is the number of distinct enclosures and total number of animals in the zoo.\nReads the next $n$ lines, where each line corresponds to an enclosure, and looks at the animal count in that enclosure.\nIf the number of animals in a particular enclosure is less than the number of animals in the zoo, then the in-question animal is moved to that enclosure.\nReturns the final output.\n\"\"\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\"3 6\", \"monkey 2 lion penguin\", \"lion 3 monkey penguin\", \"penguin 1 monkey\"]) == \"POSSIBLE\"\nassert solution([\"3 7\", \"monkey 1 lion 2 monkey\", \"lion 5 lion\", \"penguin 1 rabbit\", \"lion 3 rabbit\", \"monkey 3 elephant\", \"elephant 2 monkey\", \"rabbit 1 elephant\"]) == \"POSSIBLE\"\nassert solution([\"3 8\", \"monkey 2 elephant 2 lion\", \"lion 3 elephant 2 monkey\", \"elephant 2 rabbit 2 monkey\", \"rabbit 2 elephant 3 lion\"]) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\n''') == 'POSSIBLE'\nassert solution('''\n4 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\nmonkey 5 elephant\nelephant 3 monkey\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100') == \"triple correlation 4(1)4(3)3 found\"\nassert solution('4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2') == \"triple correlation 4(1)4(3)3 found\"\nassert solution('2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8') == \"triple correlation 4(1)4(3)3 found\"\nassert solution('8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == \"triple correlation 4(1)4(3)3 found\"\nassert solution('100 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7') == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"999\") == \"random sequence\"\n\"\"\""
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n6 7 8\n3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 27 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 27 2 4 1 0 0 4 9 1 8 7 5"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('10 20 30 40 50 60 70 80 90 100') == 'triple correlation 7(0)7(5)6(5)7(4)7(3)7(3)7(3)8(2)8(4)8(2)7(1)7(2)7(2)7(1)7(1)7(1)7(1)6(0)5(0)5(4)5(1)5(3)5(3)5(3)5(3)5(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)4(4)"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n''') == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('5') == 'random sequence'\nassert solution('1000000') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == \"triple correlation 4(1)4(3)3 found\"\nassert solution('4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 4 1 2 3 2 6 9 9\\n4 1 2 3 2 6 9 9\\n3 2 6 9 9\\n2 6 9 9\\n1 2 6 9 9\\n0 6 9 9\\n0 3 6 9 9\\n3 2 6 9 9\\n2 5 6 9 9\\n1 3 6 9 9\\n1 6 6 9 9\\n0 6 6 9 9\\n1 5 6 9 9\\n3 5 6 9 9\\n2 3 6 9 9\\n3 2 6 9 9\\n0 3 6 9 9\\n2 3 6 9 9\\n4 4 6 9 9\\n1 2 6 9 9\\n0 2 6 9 9\\n1 2 6 9 9\\n0 0 2 6 9 9\\n1 0 2 6 9 9\\n2 0 2 6 9 9\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 4 1 2 3 2 6 9 9\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 3 3 2 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 3 3 2 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100') == \"triple correlation 4(1)4(3)3\"\nassert solution('10') == \"random sequence\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('0') == 'random sequence'\nassert solution('40') == 'random sequence'\nassert solution('4 4 4 4 4') == 'random sequence'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nassert solution('3 2\\n4.5\\n9\\n0') == '4.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '40.5'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '4.00000000000000'\nassert solution('3 1') == '4.00000000000000'\nassert solution('3 2') == '7.00000000000000'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 1\"\n    ) == \"40.5\"\nassert solution(\n    \"3 1\"\n    ) == \"40\"\nassert solution(\n    \"2 2\"\n    ) == \"50\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('3 2') == '37.5'\nassert solution('3 2') == '37.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"40.5\"\nassert solution(\"5 10\") == \"50.0\"\nassert solution(\"7 9\") == \"11.0\"\nassert solution(\"2 0\") == \"0.5\""
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n40 60') == '40.5'\nassert solution('3 3\\n16 3\\n20 1') == '10.0'\nprint(solution(input()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n39\\n10') == \"40.5\"\nassert solution('3\\n1\\n40\\n10') == \"41.5\"\nassert solution('4\\n1\\n41\\n10') == \"42.0\"\nassert solution('5\\n1\\n41\\n10') == \"42.5\"\nassert solution('6\\n1\\n41\\n10') == \"43.0\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '16'\nassert solution('6 1') == '31'\nassert solution('5 1') == '31'\nassert solution('7 1') == '31.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('1 1') == '1.0'\n\"\"\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 6\") == \"Impossible\"\nassert solution(\"4 6 1 2\") == \"Impossible\"\nassert solution(\"4 6 1 2 3\") == \"1987\"\nassert solution(\"4 6 1 2 3 4\") == \"1987\"\nassert solution(\"4 6 1 2 3 4 5\") == \"1987\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 6\") == \"Impossible\"\nassert solution(\"4 5\") == \"2003\"\nassert solution(\"3 3\") == \"1924\"\nassert solution(\"3 2\") == \"1968\"\n\nstdin = \"\"\"\n3 2\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == 'Impossible'\nassert solution('4 3 3') == '1988'\nassert solution('4 3 1') == '1988'\nassert solution('4 3 1 1 1 1 1 1 1 1') == '2017'\nassert solution('4 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '2018'"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"10\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\\n4 5 1987\") == \"2015\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 6') == '2008'\nassert solution('10 10') == '2011'\nassert solution('7 8') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\\n') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\\n') == 'Impossible'\nassert solution('5 8\\n3 4 1987\\n2 4 1987\\n1 4 1987\\n2 4 1987\\n1 3 1987\\n3 2 1987\\n3 4 1987\\n') == 'Impossible'\nassert solution('5 10\\n1 2 2017\\n1 3 2017\\n2 4 2017\\n3 4 2017\\n4 5 2017\\n5 6 2017\\n6 7 2017\\n7 8 2017\\n') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"2008\"\nprint(solution(input()))\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == 'Impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"3\"\n\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"2\"\n\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"1\"\n\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"impossible\""
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string_1) == \"impossible\"\nassert solution(input_string_2) == \"3\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == \"3\"\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 2 1') == \"impossible\"\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 2 3\\nC 2 1\\nN 1 3') == \"impossible\""
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"impossible\"\nassert solution([4, 0, 1]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\nN 1 4\\nC 1 1\\nN 1 5\\nC 1 1\\nN 1 6\\nC 1 1\\nN 1 7\\nC 1 1\\nN 1 8\\nC 1 1\\nN 1 9\\nC 1 1') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == 'impossible'\nassert solution(\n    '4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 3\\n') == '3'\nassert solution(\n    '5 0 3\\nN 1 2\\nC 1 2\\nN 2 3\\nC 3 4\\n') == '4'\nassert solution(\n    '5 0 1\\nN 1 2\\nC 1 2\\nN 2 3\\nC 3 4\\n') == 'impossible'\nassert solution(\n    '5 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 3\\n') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 0 1') == '3'\nassert solution('4 0 1') == 'impossible'\nassert solution('3 3 1') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\nassert solution('''\n1 1\n''') == 'impossible'\n''')"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"()\") == 0\nassert solution(\"()()\") == 1\nassert solution(\"()()(()\") == 3\nassert solution(\"(((()())())())()\") == 13\nassert solution(\"((((((((())(())))))()())()))(())\") == 37\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"()\"\n    ) == \"0\"\nassert solution(\n    \"()\"\n    ) == \"0\"\nassert solution(\n    \"(())\"\n    ) == \"2\"\nassert solution(\n    \"()()\"\n    ) == \"4\"\nassert solution(\n    \"(()(()))\"\n    ) == \"6\""
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n()\n(())\n''') == 4\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 10\nassert solution(\"()\") == 0\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(()\") == 2\nassert solution(\")()())\") == 7\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('((()))') == '10'\nassert solution
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n()\n(((()\n)()\n))\n''') == 5\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('(()' ) == '0'\nassert solution('()()') == '2'\nassert solution('()()()' ) == '4'\nassert solution('(())()()') == '4'\nassert solution('((()))()()') == '4'\n\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        ans = 0\n        bal = 0\n        l, r = 0, 0\n        while r < len(pieces):\n            # bal + 1: all the bal balanced parentheses\n            # r - 1: left bracket\n            # r + 1: right bracket\n            # ans: longest balanced parentheses\n            bal += 1 if pieces[r] == '(' else -1\n            while bal > 0 and r < len(pieces) and pieces[r] == '(':\n                bal += 1\n                r += 1\n            while bal > 0 and r < len(pieces) and pieces[r] == ')':\n                bal -= 1\n                r += 1\n            ans = max(ans, r - l)\n            l = r\n        return ans\n\n'''\n\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        res = 0\n        max_bal = 0\n        max_idx = 0\n        for idx, val in enumerate(pieces):\n            if val == '(':\n                max_bal += 1\n            else:\n                max_bal -= 1\n            res = max(res, max_bal)\n            if max_bal == 0:\n                max_idx = idx\n        start, end = 0, max_idx\n        while start < end:\n            mid = (start + end) // 2\n            if self.isBalanced(pieces, mid):\n                end = mid\n            else:\n                start = mid + 1\n        return start\n    def isBalanced(self, pieces: str, idx: int) -> bool:\n        if idx < 0 or idx >= len(pieces):\n            return True\n        if pieces[idx] == '(':\n            return self.isBalanced(pieces, idx + 1)\n        else:\n            return self.isBalanced(pieces, idx - 1)\n'''\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        ans = 0\n        bal = 0\n        l, r = 0, 0\n        while r < len(pieces):\n            # bal + 1: all the bal balanced parentheses\n            # r - 1: left bracket\n            # r + 1: right bracket\n            # ans: longest balanced parentheses\n            bal += 1 if pieces[r] == '(' else -1\n            while bal > 0 and r < len(pieces) and pieces[r] == '(':\n                bal += 1\n                r += 1\n            while bal > 0 and r < len(pieces) and pieces[r] == ')':\n                bal -= 1\n                r += 1\n            ans = max(ans, r - l)\n            l = r\n        return ans\n'''\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        ans = 0\n        max_bal = 0\n        max_idx = 0\n        for idx, val in enumerate(pieces):\n            if val == '(':\n                max_bal += 1\n            else:\n                max_bal -= 1\n            ans = max(ans, max_bal)\n            if max_bal == 0:\n                max_idx = idx\n        start, end = 0, max_idx\n        while start < end:\n            mid = (start + end) // 2\n            if self.isBalanced(pieces, mid):\n                end = mid\n            else:\n                start = mid + 1\n        return start\n    def isBalanced(self, pieces: str, idx: int) -> bool:\n        if idx < 0 or idx >= len(pieces):\n            return True\n        if pieces[idx] == '(':\n            return self.isBalanced(pieces, idx + 1)\n        else:\n            return self.isBalanced(pieces, idx - 1)\n'''\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        ans = 0\n        max_bal = 0\n        max_idx = 0\n        for idx, val in enumerate(pieces):\n            if val == '(':\n                max_bal += 1\n            else:\n                max_bal -= 1\n            ans = max(ans, max_bal)\n            if max_bal == 0:\n                max_idx = idx\n        start, end = 0, max_idx\n        while start < end:\n            mid = (start + end) // 2\n            if self.isBalanced(pieces, mid):\n                end = mid\n            else:\n                start = mid + 1\n        return start\n    def isBalanced(self, pieces: str, idx: int) -> bool:\n        if idx < 0 or idx >= len(pieces):\n            return True\n        if pieces[idx] == '(':\n            return self.isBalanced(pieces, idx + 1)\n        else:\n            return self.isBalanced(pieces, idx - 1)\n'''\n\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        ans = 0\n        max_bal = 0\n        max_idx = 0\n        for idx, val in enumerate(pieces):\n            if val == '(':\n                max_bal += 1\n            else:\n                max_bal -= 1\n            ans = max(ans, max_bal)\n            if max_bal == 0:\n                max_idx = idx\n        start, end = 0, max_idx\n        while start < end:\n            mid = (start + end) // 2\n            if self.isBalanced(pieces, mid):\n                end = mid\n            else:\n                start = mid + 1\n        return start\n    def isBalanced(self, pieces: str, idx: int) -> bool:\n        if idx < 0 or idx >= len(pieces):\n            return True\n        if pieces[idx] == '(':\n            return self.isBalanced(pieces, idx + 1)\n        else:\n            return self.isBalanced(pieces, idx - 1)\n'''\n'''\nclass Solution:\n    def longestBalanced(self, pieces: str) -> int:\n        ans = 0\n        max_bal = 0\n        max_idx = 0\n        for idx, val in enumerate(pieces):\n            if val == '(':\n                max_bal += 1\n            else:\n                max_bal -= 1\n            ans = max(ans, max_bal)\n            if max_bal == 0:\n                max_idx = idx\n        start, end = 0, max_idx\n        while start < end"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1\",\n) == \"1\"\n\nassert solution(\n    \"2\",\n) == \"0\"\n\nassert solution(\n    \"3\",\n) == \"0\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '0'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('5\\n377 a\\n455 h\\n181 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '127891'\nassert solution('7\\n377 a\\n455 h\\n181 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '103562'\nassert solution('13\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '0'\nassert solution('15\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '0'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n'''\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '85293', 'Solutions and tests'\nassert solution('37 77 a') == '85293', 'Solutions and tests'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n\") == \"85293\"\nassert solution(\"12\\n1 1\\n2 1\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12\\n13 13\\n14 14\\n15 15\\n16 16\\n17 17\\n18 18\\n19 19\\n20 20\\n21 21\\n22 22\\n23 23\\n24 24\\n25 25\\n26 26\\n27 27\\n28 28\\n29 29\\n30 30\\n31 31\\n32 32\\n33 33\\n34 34\\n35 35\\n36 36\\n37 37\\n38 38\\n39 39\\n40 40\\n41 41\\n42 42\\n43 43\\n44 44\\n45 45\\n46 46\\n47 47\\n48 48\\n49 49\\n50 50\\n51 51\\n52 52\\n53 53\\n54 54\\n55 55\\n56 56\\n57 57\\n58 58\\n59 59\\n60 60\\n61 61\\n62 62\\n63 63\\n64 64\\n65 65\\n66 66\\n67 67\\n68 68\\n69 69\\n70 70\\n71 71\\n72 72\\n73 73\\n74 74\\n75 75\\n76 76\\n77 77\\n78 78\\n79 79\\n80 80\\n81 81\\n82 82\\n83 83\\n84 84\\n85 85\\n86 86\\n87 87\\n88 88\\n89 89\\n90 90\\n91 91\\n92 92\\n93 93\\n94 94\\n95 95\\n96 96\\n97 97\\n98 98\\n99 99\\n100 100\\n101 101\\n102 102\\n103 103\\n104 104\\n105 105\\n106 106\\n107 107\\n108 108\\n109 109\\n110 110\\n111 111\\n112 112\\n113 113\\n114 114\\n115 115\\n116 116\\n117 117\\n118 118\\n119 119\\n120 120\\n121 121\\n122 122\\n123 123\\n124 124\\n125 125\\n126 126\\n127 127\\n128 128\\n129 129\\n130 130\\n131 131\\n132 132\\n133 133\\n134 134\\n135 135\\n136 136\\n137 137\\n138 138\\n139 139\\n140 140\\n141 141\\n142 142\\n143 143\\n144 144\\n145 145\\n146 146\\n147 147\\n148 148\\n149 149\\n150 150\\n151 151\\n152 152\\n153 153\\n154 154\\n155 155\\n156 156\\n157 157\\n158 158\\n159 159\\n160 160\\n161 161\\n162 162\\n163 163\\n164 164\\n165 165\\n166 166\\n167 167\\n168 168\\n169 169\\n170 170\\n171 171\\n172 172\\n173 173\\n174 174\\n175 175\\n176 176\\n177 177\\n178 178\\n179 179\\n180 180\\n181 181\\n182 182\\n183 183\\n184 184\\n185 185\\n186 186\\n187 187\\n188 188\\n189 189\\n190 190\\n191 191\\n192 192\\n193 193\\n194 194\\n195 195\\n196 196\\n197 197\\n198 198\\n199 199\\n200 200\\n201 201\\n202 202"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n377\\na\\n455\\nhuman\\n181\\na\\n213\\na\\n17\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n377 a\n455 h\n180 a\n''') == '85293'\nassert solution('''10\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\nassert solution('''13\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n8 9\n8 7\n9 8\n''') == '85293'\nassert solution('''99\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n8 9\n8 7\n9 8\n9 7\n9 8\n''') == '85293'\nassert solution('''11\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n8 9\n8 7\n9 8\n9 7\n9 8\n''') == '85293'\n'''\n\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n5\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\"\n) == \"85293\"\nassert solution(\n\"\"\"\n3\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\"\n) == \"85293\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n377 h\n455 a\n181 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\"\n          ) == \"85293\"\n\nassert solution(\"\"\"\n4\n377 h\n455 a\n181 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\"\n          ) == \"85293\"\n\n\"\"\"\n--- Part Two ---\n\nAs with the first example, you must use the dispersal device to reduce the gravities of the star systems. However, you must set the device after the gravity is altered. Each line in the input has the form $g\\ d$ where $g$ is the gravity value of that system ($1\\leq g\\leq 1000000$) and $d$ is either \u2018h\u2019 or \u2018a\u2019, designating the system as human or alien (there is at least one system of each type). The device is guaranteed to be part of an alien system, so it is already selected for the problem. The next line is guaranteed to be an integer greater than the value of the previous line. This integer is the number of alien systems that have been selected for the dispersal device. You must use these systems after the device is used.\n\nIf you do so, then they are all eliminated from the star system. If any of them is an alien, then that system is eliminated. If the final result is that all star systems are eliminated, then return the string 'Alien wins'. Otherwise, return the string 'Human wins'.\n\nIf you can\u2019t use the device after all the input is processed, then return the string 'Tie'.\n\n-----Examples-----\nSample Input:\n4\n377 a\n455 h\n181 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\nSample Output:\nAlien wins\n\"\"\"\n\nassert solution(\"\"\"\n4\n377 h\n455 a\n181 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\n  ) == \"Alien wins\"\n\nassert solution(\"\"\"\n4\n377 h\n455 a\n181 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\n  ) == \"Alien wins\"\n\nassert solution(\"\"\"\n4\n377 a\n455 h\n181 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\n  ) == \"Alien wins\""
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('1\\n2\\n1\\n2\\n2') == '1'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '5'\n\n'''\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2\n1 3\n2 3\n1 4\n2 4''') == '5'\nassert solution('''5\n1 2\n1 3\n2 3\n1 4\n2 4''') == '1'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '5'\nassert solution('''\n5 10\n1 2\n1 3\n2 3\n1 4\n2 4\n3 4\n1 5\n2 5\n3 5\n4 5\n''') == '5'\nassert solution('''\n4 20\n1 2\n1 3\n2 3\n1 4\n2 4\n3 4\n1 5\n2 5\n3 5\n4 5\n''') == '10'\nassert solution('''\n10 20\n1 2\n1 3\n2 3\n1 4\n2 4\n3 4\n1 5\n2 5\n3 5\n4 5\n5 6\n1 7\n2 7\n3 7\n4 7\n5 7\n''') == '8'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"2 6\") == \"4\"\nassert solution(\"10 10\") == \"12\"\nassert solution(\"10 20\") == \"11\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '6'\nassert solution('10\\n20\\n10 5\\n20 3\\n30 4\\n10 5\\n20 3\\n30 4') == '10'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4\n1 2\n1 3\n2 3\n''') == '5'\nassert solution('''\n3 6\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n''') == '4'\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n2 4\n''') == '1'\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n''') == '2'\nassert solution('''\n1 10\n1 20\n1 30\n1 40\n1 50\n1 60\n1 70\n1 80\n1 90\n1 100\n1 110\n1 120\n1 130\n1 140\n1 150\n1 160\n1 170\n1 180\n1 190\n1 200\n''') == '3'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 5\n1 2\n1 3\n2 3\n1 4\n2 4''') == '5'\n'''\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\""
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1\\n'\n    '1 cat 1\\n'\n    '1 dog 1\\n'\n    '1 owl 1\\n'\n    '1 bee 1\\n'\n    '1 rose 1\\n'\n    '1 bat 1\\n'\n    '1 octopus 1\\n'\n    '1 crab 1\\n'\n    '1 turtle 1\\n'\n    '1 budgerigar 1\\n'\n    '1 goose 1\\n'\n    '1 bat 1\\n'\n    '1 stork 1\\n'\n    '1 horse 1\\n'\n    '1 rabbit 1\\n'\n    '1 chickadee 1\\n'\n    '1 turtle 1\\n'\n    '1 turtle 1\\n'\n    '1 snake 1\\n'\n    '1 mouse 1\\n'\n    '1 hamster 1\\n'\n    '1 bat 1\\n'\n    '1 caterpillar 1\\n'\n    '1 rabbit 1\\n'\n    '1 chicken 1\\n'\n    '1 rabbit 1\\n'\n    '1 turtle 1\\n'\n    '1 rabbit 1\\n'\n    '1 bat 1\\n'\n    '1 elephant 1\\n'\n    '1 rat 1\\n'\n    '1 turtle 1\\n'\n    '1 bat 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1 rabbit 1\\n'\n    '1"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1000'\nassert solution('2') == '0'\n\"\"\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5100\"\nassert solution_cheat() == \"5100\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\nassert solution('''\n7\n4 trout 7 aardvark 5 cobra\n6 eel 7 jellyfish 5 seal\n6 blue jay 6 bluejay 7 boar\n4 zebra 7 goose 4 duck\n5 bat 4 platypus 6 cheetah\n5 hippo 6 hippo\n6 rabbit 7 rabbit\n4 fox 5 fox\n5 gecko 6 gecko\n4 crab 6 crab\n6 lizard 7 lizard\n4 snake 7 snake\n5 turtle 6 turtle\n4 turtle 6 turtle\n6 goldfish 7 goldfish\n4 turtle 7 turtle\n5 turtle 6 turtle\n6 turtle 7 turtle\n4 turtle 6 turtle\n6 turtle 7 turtle\n5 turtle 6 turtle\n6 turtle 7 turtle\n4 turtle 6 turtle\n6 turtle 7 turtle\n''') == '30900'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat\\n7') == '5100'\nassert solution('4\\n1 mushroom 4 tomato 1 cranberry 2 eggplant 1 basilisk 1 pumpkin 2') == '1250'\nassert solution('1\\n2 eggs 5 chocolate 1') == '2500'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n1 2\\n3 4 5\\n2\\n1\\n2\\n3\\n1\\n4') == '6\\n1'\nassert solution('5\\n0\\n1 2\\n3 4\\n1\\n5\\n0\\n4\\n2\\n3\\n') == '6\\n1'\nassert solution('100000\\n1000000\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1 1\\n100000 1"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '2'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6', 'First'\n\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6', 'Second'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nprint(solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n'''))\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('''\n2\n0\n1\n1\n''') == '-1\\n'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'\nassert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '-1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\"\n) == \"6\"\nprint(solution(\n\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\"\n))\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '-1'\nassert solution('3\\n') == '6'\nassert solution('10\\n') == '1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '6'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4') == '10'\nassert solution('2 5\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '20'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == \"10\"\nassert solution('2 2\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == \"7\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'\nassert solution('''5 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '100'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 5\n1 2 1 2 1\n4\n1 2 R 6\n1 2 O 3\n2 1 O 3\n1 2 R 5\n''') == '10'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\"\nassert solution(\"4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\"\nassert solution(\"4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\"\nassert solution(\"4\\n1 2 R 5\\n\") == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\nassert solution('1\\n2\\n1 2 R\\n1 2 O\\n1 2 R\\n1 2 O\\n1 2 R\\n1 2 O\\n1 2 R\\n') == '0'\nassert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n1 2 R 5\\n1 2 R 6\\n') == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4') == '10'\nassert solution('3\\n1 2 O 3') == '10'\nassert solution('5\\n1 2 1 2 1\\n4') == '10'\nassert solution('3\\n1 2 O 3') == '10'\nassert solution('5\\n1 2 1 2 1\\n4') == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1 3 2'\nassert solution('1 2 1 3') == '1 2 3 1'\nassert solution('5 1 3') == '1 2 3 5'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '2'\nassert solution('3 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 1\\n2 3') == '1'\n\"\"\"\nn, m = map(int, input().split())\na = []\nfor i in range(m):\n    a.append(list(map(int, input().split())))"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '1'\nassert solution('''\n5 2\n0 1\n1 2\n2 3\n2 4\n''') == '2'\nassert solution('''\n8 9\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '8'\nassert solution('''\n10 5\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '9'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n1 3\n''') == '1'\nassert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '3'\nassert solution('''\n4 2\n0 1\n1 2\n''') == '2'\nassert solution('''\n5 3\n0 1\n2 3\n4 5\n0 2\n1 4\n''') == '3'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"6 8\") == \"3\"\nassert solution(\"10 20\") == \"5\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 5') == '1'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n3 2\\n2 3\\n') == '2'\n'''\nimport sys\n\nclass Graph:\n    def __init__(self, num_of_nodes):\n        self.num_of_nodes = num_of_nodes\n        self.graph = [[] for i in range(num_of_nodes)]\n    \n    def addEdge(self, x, y):\n        self.graph[x].append(y)\n        self.graph[y].append(x)\n    \n    def topologicalSortUtil(self, v, visited, stack):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.topologicalSortUtil(i, visited, stack)\n        stack.insert(0, v)\n    \n    def topologicalSort(self):\n        visited = [False]*self.num_of_nodes\n        stack =[]\n        for i in range(self.num_of_nodes):\n            if visited[i] == False:\n                self.topologicalSortUtil(i, visited, stack)\n        return len(stack)\n\nclass Solution:\n    def solve(self, input_string):\n        n, m = map(int, input_string.split())\n        g = Graph(n)\n        for i in range(m):\n            x, y = map(int, input_string.split())\n            g.addEdge(x, y)\n        return g.topologicalSort()"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.0692820507865'\nassert solution('2') == '0.086956521739'\nassert solution('3') == '0.071428571429'\nassert solution('4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == '0.962962962963'\nassert solution(\"12\") == '0.03295081967213'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.6733333333333'\nprint(solution(input()))"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0.962962962963'\n\"\"\"\n\nimport math\n\nn = int(input())\np = n / math.factorial(n)\nprint(p)\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3') == '0.25'\nassert solution('1\\n1') == '0.5'\nassert solution('3\\n3') == '0.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('5') == '0.0'\nprint('PASSED')\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('100') == '1.0'\nassert solution('999') == '1.0'\nassert solution('1000') == '1.0'\nassert solution('1001') == '1.0'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0.33333'\nassert solution('4') == '0.75'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '0.50000'\nassert solution('4\\n') == '0.83333333333333335'\n\nassert solution('13\\n') == '0.07692307692307692'\nassert solution('100\\n') == '0.10000000000000002'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '40000000 0\\n'\nassert solution('100\\n') == '40000000 40000000\\n'\nassert solution('2\\n') == '0 0\\n'\nassert solution('1000\\n') == '0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000\\n'\nassert solution('1') == '0\\n40000000\\n0 40000000\\n'\nassert solution('2') == '0 0\\n40000000 0\\n0 40000000\\n'\nassert solution('3') == '0 0\\n40000000 0\\n0 40000000\\n'\nassert solution('4') == '0 0\\n40000000 0\\n0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0 0'\nassert solution('5') == '0 0 0 0'"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0 0\\n'\nassert solution('4') == '40000000 0\\n'\nassert solution('15') == '0 0\\n40000000 40000000\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n0 40000000\\n40000000 0\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0 0'\nassert solution('2') == '40000000 0'\nassert solution('3') == '0 40000000'\nassert solution('4') == '0 0'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n4\n3\n2\n1\n0\n''') == '0 0\\n40000000 0\\n0 40000000\\n40000000 0\\n40000000 0\\n', 'Wrong!'\nassert solution('''\n5\n3\n2\n1\n4\n''') == '0 40000000\\n40000000 40000000\\n40000000 0\\n0 0\\n', 'Wrong!'\nassert solution('''\n6\n4\n3\n2\n1\n5\n0\n''') == '0 40000000\\n40000000 40000000\\n40000000 0\\n0 40000000\\n0 40000000\\n', 'Wrong!'\nassert solution('''\n20\n99\n98\n97\n96\n95\n94\n93\n92\n91\n90\n89\n88\n87\n86\n85\n84\n83\n82\n81\n80\n79\n78\n77\n76\n75\n74\n73\n72\n71\n70\n69\n68\n67\n66\n65\n64\n63\n62\n61\n60\n59\n58\n57\n56\n55\n54\n53\n52\n51\n50\n49\n48\n47\n46\n45\n44\n43\n42\n41\n40\n39\n38\n37\n36\n35\n34\n33\n32\n31\n30\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n''') == '0 40000000\\n40000000 40000000\\n40000000 0\\n0 40000000\\n0 40000000\\n40000000 0\\n40000000 0\\n0 40000000\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0 40000000\\n40000000 0\\n0"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0 0\\n'\nassert solution('20') == '0 1\\n'\nassert solution('4') == '0 4\\n'\nassert solution('20 20') == '0 4\\n0 0\\n40000000 0\\n'\nassert solution('10 10') == '0 4\\n40000000 4\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1 0\\n0 1'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"5\") == \"0 0\\n0 40000000\\n40000000 40000000\"\nassert solution(\"10\") == \"0 0\\n0 40000000\\n40000000 40000000\\n80000000 40000000\\n0 80000000\\n40000000 80000000\\n80000000 80000000\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0 0'\nassert solution('2') == '40000000 0'\nassert solution('3') == '0 40000000'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3 5 5 2\") == \"2\"\nassert solution(\"-3 3 2 5 1\") == \"impossible\"\nassert solution(\"2 3 4 5\") == \"impossible\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('1 2 5 3') == '3'\nassert solution('2 2 2 2 2') == 'impossible'\nassert solution('2 2 2 2 2') == 'impossible'\n\nSAMPLE INPUT:\n3 5 5 2\nSAMPLE OUTPUT:\n2\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 5 2') == '1'\nassert solution('7 3 5 2') == '3'\nassert solution('1 3 5 2') == 'impossible'\nassert solution('1 2 3 4 5 6 7 8') == 'impossible'\nassert solution('1 2 3 5 8 9 10') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5 5 2''') == '1'\n\nassert solution('''0 0 0 0''') == 'impossible'\n\nassert solution('''3 3 1 1''') == '2'\n\nassert solution('''7 7 7 7''') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5 5 2''') == '1'\nassert solution('''2 5 5 2''') == '2'\nassert solution('''3 5 5 2''') == '2'\nassert solution('''5 5 5 2''') == '2'\nassert solution('''2 5 5 2''') == '1'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 5 2\") == \"1\"\nassert solution(\"9 6 5 3\") == \"2\"\nassert solution(\"2 4 7 6 5 2 3\") == \"3\"\nassert solution(\"4 7 7 6 5 2 3\") == \"2\"\nassert solution(\"4 8 7 6 5 2 3\") == \"3\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"4 4 4 4\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"1 2 5 6\") == \"2\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('5 7 9 5 3 2 4') == '2'\nassert solution('1 2 3 4 5 6 7') == 'impossible'\nassert solution('1 1 1 1 1 1 1 1') == 'impossible'\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 5 2') == '1'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('4 0 1 2 3') == '4'\n\n'''\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('20 3 5 5') == '2'\nassert solution('10 3 5 0') == '10'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 3 5 5') == '2'\n\nassert solution('7 4 1 5') == '4'\n\nassert solution('7 6 1 5') == '3'\n\nassert solution('2 1 0 0') == '0'\n\nassert solution('0 0 0 0') == '0'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([10, 10, 0, 1, 1]) == \"2\"\nassert solution([10, 10, 0, 1, 0]) == \"1\"\nassert solution([10, 10, 0, 1, 0]) == \"1\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n''') == '0'\nassert solution('''1\n0\n0\n0\n''') == '1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('20 10 6 9') == '-2'\nassert solution('20 1 5 6') == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 3 5 5') == '2'\nassert solution('4 3 5 5') == '1'\nassert solution('100 200 300 200') == '1.5'\nassert solution('1 2 3 4 5') == '0'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 2 2\\n0 -1 0\\n0 0 0\\n0 0 0') == '2'\nassert solution('10\\n3 5 1\\n1 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 0 0\\n1 0 0\\n1 0 0\\n1 1 1\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n0 0 0') == '3'\nassert solution('15\\n1 1 1\\n1 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n0 0 0\\n0 0 0\\n1 0 0\\n1 0 0\\n1 0 0\\n0 0 0\\n1 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '3'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([20, 3, 5, 5]) == \"2\"\nassert solution([0, 0, 0]) == \"0\"\nassert solution([0, -10, 0]) == \"0\"\nassert solution([30, 0, 0]) == \"0\"\nassert solution([0, 0, 0]) == \"0\""
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '4'\n\nassert solution('''20 1\n0\n0\n0\n0\nSample Output:\n1\n''') == '1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 3 5 5\\n0 0 0\\n30 0 0\\n0 0 0\\n0 0 0') == \"2\"\n\nassert solution('10 3 5 5\\n-10 0 0\\n30 0 0\\n0 0 0\\n0 0 0') == \"0\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('100000') == '20000'\nassert solution
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('13') == '12 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('54321') == '54310'\nassert solution('1234') == '1235'\nassert solution('1238') == '1239'\nassert solution('1236') == '1237'\nassert solution('1235') == '1236'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13') == '12 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"5\") == \"1 2 3 5\"\nassert solution(\"22\") == \"1 22 3\"\nassert solution(\"99999\") == \"1 99999 99999 99999\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('13') == '12 14'\nassert solution('12') == '12 14'\nassert solution('5') == '12 14'\nassert solution('5') == '12 14'\nassert solution('33') == '12 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('14') == '13'\nassert solution('13') == '14'\nassert solution('10') == '11'\nassert solution('1415') == '1414'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 2') == '1'\nassert solution('1 1 1 2') == '1'\nassert solution('1 1 1 1 2') == '1'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('13') == '14'\nassert solution('1111') == '1112'\nassert solution('1010') == '1020'\nassert solution('111') == '10'\nassert solution('12') == '14'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('1 0 0') == '1'\nassert solution('1 0 1') == '0'\nassert solution('3 0 1') == '1'\nassert solution('3 0 0') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 0 0') == '0'\nassert solution('3\\n1 0 1\\n3 0 0\\n3 0 1\\n3 0 0') == '6'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 1 0\n1 0 1\n3 0 1\n''') == '0'\n\nassert solution('''\n4\n1 0 0\n2 0 1\n0 0 1\n0 0 0\n''') == '4'\n\nassert solution('''\n4\n0 0 0\n1 0 1\n2 0 0\n3 0 1\n''') == '0'\n\nassert solution('''\n5\n1 0 0\n2 0 1\n0 0 1\n0 0 0\n''') == '4'\n\nassert solution('''\n4\n0 0 0\n1 0 1\n2 0 1\n3 0 1\n''') == '0'"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n''') == '0'"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n1\n0 0\n1 0\n''') == '0'\nassert solution('''\n3\n1 0 0\n1 0 1\n1 0 0\n''') == '0'\nassert solution('''\n5\n0 0 1 0\n1 0 1 0\n3 0 1 0\n3 0 0 1\n3 0 1 0\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0'\nassert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '1'\nassert solution('''\n5\n1 1 0\n1 1 1\n3 0 1\n3 0 0\n3 0 1\n''') == '2'\n'''"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('6\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 2') == '0'\nassert solution('7\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 2\\n3 0 3') == '0'\nassert solution('8\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 2\\n3 0 3\\n3 0 4') == '1'\nassert solution('9\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n3 0 2\\n3 0 3\\n3 0 4\\n3 0 5') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('100\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\nassert solution('1000\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('10000\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('100000\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 4\n1 2\n2 3\n4 1\n3 4\n\"\"\") == \"\"\"\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3\n\"\"\", \"\"\"\n6 6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n\"\"\", \"\"\"\n8 8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n4 6\n5 6\n6 7\n6 8\n\"\"\")\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\""
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 3\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3\"\"\") == \"1 1 2 2 1 3\"\n\nassert solution(\"\"\"4 4\n1 2\n1 3\n3 2\n3 4\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"7 7\n1 2\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n\"\"\") == \"1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\""
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 1\n2 2\n1 3\n2 1\n1 2\n2 3\n''') == '1 2\\n1 3\\n2 2\\n2 3\\n'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\"\nassert solution(\"10 10\") == \"3 4\\n1 8\\n4 8\\n7 6\\n5 3\\n2 4\\n1 5\\n3 5\\n1 2\\n2 1\\n5 2\\n6 3\\n2 4\\n1 5\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\\n\"\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 2') == '1 1\\n2 2'\nassert solution('4 2\\n3 2\\n4 2\\n1 3\\n2 1') == '1 1 2 1 2 3\\n2 2 1 1 2 3\\n1 3 2 2 1 1\\n2 1 1 1 2 3\\n1 2 3 2 1 1\\n1 3 2 2 1 1'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\nprint(solution(input()))\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 10, 1]) == '3.33333333'\nassert solution([3, 10, 2]) == '3.33333333'\nassert solution([3, 10, 3]) == '3.33333333'"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10') == '3.33333333'\nassert solution('3 10') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 10, 1]) == \"3.33333333\"\nassert solution([3, 10, 1]) == \"3.33333333\""
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 10, 1]) == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('5 10\\n0 10 1\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.6666666667'\nassert solution('1 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\n\"\"\"\n3 5\n0 3 2\n0 1 3\n0 2 4\n0 3 4\n\"\"\") == \"0.9285714285714286\"\nassert solution(\n\"\"\"\n3 5\n0 4 3\n0 2 1\n0 3 4\n\"\"\") == \"0.9285714285714286\"\nassert solution(\n\"\"\"\n3 5\n0 4 3\n0 2 3\n0 3 4\n\"\"\") == \"0.9285714285714286\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == \"3.33333333\"\nassert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == \"3.33333333\"\nassert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == \"3.33333333\"\nassert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == \"3.33333333\"\nassert solution('''4 1\n0 10 1\n0 10 1\n0 10 1\n''') == \"1.0\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 10\n0 10 1\n0 10 1\n''') == '2.33333333'\nassert solution('''\n3 5\n0 10 1\n0 10 1\n1 10 1\n0 10 1\n''') == '3.33333333'\n'''"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"3.333333333\"\nassert solution(\"3 10\") == \"3.33333333\"\nassert solution(\"4 5\") == \"3.33333333\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"3 2\") == \"2.0\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10') == '3.33333333'\nassert solution('3 10') == '3.33333333'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"100\") == \"11\"\nassert solution(\"1000000\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3 3 2\\n') == '1'\nassert solution('2\\n2 3 1\\n') == '2'\nassert solution('1\\n1 3 1\\n') == '2'\nassert solution('2\\n2 3 2\\n') == '0'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3 3 2\n3 3 2''') == '1'\nassert solution('''3\n3 3 2\n2 2 1\nSample Output:\n0\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 3 2') == '1'\nassert solution('2\\n1 1 1') == '2'\nassert solution('1\\n2 2 3') == '1'\nassert solution('3\\n2 3 3') == '2'\nassert solution('10\\n7 8 9 9') == '1'\n\nn = int(input())\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('3 1 2') == '2'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('2\\n3 3 2') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 4\") == \"2\"\n\nstdin = \"\"\"\n4 4\nabbc\nabbc\nabbb\nabbb\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"1\"\nassert solution(\"b\") == \"2\"\nassert solution(\"aab\") == \"1\"\nassert solution(\"aabb\") == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''abba\na''') == '2'\nassert solution('''2\naba\nabc''') == '1'\nassert solution('''2\nba\na''') == '2'\nassert solution('''3\nabc\nabc\ncba\ncab\nb''') == '3'\nassert solution('''3\nabc\nabc\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\nabba\n''') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 1 2') == '1'\nassert solution('1 1 2 3') == '1'\nassert solution('1 2 1 3') == '3'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '0'\nassert solution('2') == '1'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"3 5\") == \"5\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''aba\naba\naba\naba''') == \"3\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'abba') == '2'\nassert solution(\n    'abca') == '2'\nassert solution(\n    'abac') == '1'\nassert solution(\n    'aaaaa') == '1'\nassert solution(\n    'abccc') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\n\"\"\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '2'\nassert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '0'\n'''"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3'\n\n\"\"\""
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n2 3\n1 2\n2 4\n''') == '4'\nassert solution('''\n2 3\n3 2\n2 3\n2 4\n''') == '4'\nassert solution('''\n2 3\n1 2\n1 3\n2 4\n''') == '4'\nassert solution('''\n2 3\n1 2\n1 3\n2 4\n''') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n3 2\n2 3\n2 4\n''') == '3'\nassert solution('''2\n3 2\n2 3\n2 4\n''') == '2'\nassert solution('''2\n1 2\n2 3\n''') == '2'\nassert solution('''1\n3 2\n2 3\n2 4\n''') == '2'\nassert solution('''10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n''') == '10'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == '3'\nassert solution('7 4\\n5 2\\n6 3\\n2 4\\n4 5\\n5 3\\n5 2') == '6'\nassert solution('7 5\\n7 4\\n5 3\\n4 2\\n4 5\\n5 3\\n6 1') == '7'\nassert solution('1 5\\n1 3\\n2 4\\n4 5\\n5 3\\n5 2') == '1'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '4'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == \"3\"\nassert solution('2') == \"4\"\nassert solution('3') == \"4\"\nassert solution('4') == \"5\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n2 3\\n2 4\\n') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 2\n2 3\n2 4\n''') == '3'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\") == \"1\"\nassert solution(\"3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n4 7\\n5 9\\n8 8\\n6 10\\n7 12\\n10 15\\n8 13\\n9 14\\n\") == \"4\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n0\n1\n2\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n0\n1\n1\n2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n-1\n2\n2\n2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2\n-1\n2\n2\n2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n0\n1\n2\n3\n\"\"\") == \"0\""
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2\n0 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '1'\nassert solution('1000 1') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n4 4\\n4 5\\n4 6\\n4 7\\n4 8\\n4 9\\n5 5\\n5 6\\n5 7\\n5 8\\n5 9\\n6 6\\n6 7\\n6 8\\n6 9\\n7 7\\n7 8\\n7 9\\n8 8\\n8 9\\n9 9\\n') == '2'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(stdin='''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"1 0\") == \"\"\nassert solution(\"2 0\") == \"\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '7'\n\"\"\"\nimport sys"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"7\"\n'''"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n'''"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n''') == '7', 'First'\nassert solution('''\n5\n2\n4\n4\n7\n6\n''') == '5', 'Second'\n'''\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == '7'\nassert solution(\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n    3\n    1 2 3\n    3 2 2\n    5 2 1\n    3 2 1\n    1 2 1\n    1 2 3\n\"\"\") == \"7\"\n\n\"\"\"\n--- Day 9: Encoding Error ---\n\nWith your neighbor happily enjoying their video game, you turn your attention to an open data port on the wall and into the machine.\n\nWhile playing, you find that one of the joystick buttons on the device isn't working!\n\nThe joystick doesn't respond to button presses any more after it is initialized. (It does respond to switch presses.)\n\nIt works in such a way that, while your device is on and your friend's device is off,\nbutton presses will be ignored while your device is on and switch presses will execute as normal.\n\nIt's a miracle that this joystick was built from scratch and you were able to figure out what it was doing.\n\nHowever, the joysticks don't understand what switches mean and what buttons mean.\n\nYou can help your friends by writing a software update for the arcade game JoyStik. The arcade game will be hosted on a continuous network that connects every device (yourself and your friend) to your computer.\n\nIn addition, you need to be able to translate the joystick input into commands that your arcade game can execute. You need to find the values of the joystick axes, track whether the X and Y axis buttons are being pressed, and press the A button to indicate that you want to shoot.\n\nJoyStik comes equipped with two joysticks. The first one is the one that will be connected to your computer and controlled by you, and the second controls the arcade game.\n\nThe two joysticks must be calibrated before you can run the software. There are some joystick calibration exercises you can complete. The first one is fairly easy and involves nothing more than making the arcade game move forward by a single step. The second exercise, called JoyStik Calibration 2, requires that you take control of at least two different axis, neither of which are normally used by the arcade game.\n\nNow, you need to figure out how to use the joystick.\n\nEvery time the arcade game starts, it will send over the value of the joystick axes.\n\nThe arcade game will send 0, 0, 0 to the first joystick when you press the A button and it will send 1, 1, 1, 0, 0, 0 to the second joystick for each of your presses of the A button.\n\nYour program should output the axis values, whether the X or Y axis button is being pressed, and the value sent to the arcade game when you press the A button.\n\nIf the joystick is connected to your computer, the arcade game will always be communicating on the port first (the port selected by the arcade game). Your program should display the joystick values on the screen.\n\nIf the arcade game were being hosted on a network, your program should display the axis values as comma-separated numbers on the network. The order of numbers sent should match the order of the axis names below.\n\nThe joystick is sending data to the arcade game over USB. Your program should display the values of the axes that the arcade game is using on the screen.\n\nSample Input 1:\n\n1, 0, 0,\n1, 0, 1,\n0, 1, 1,\n1, 0, 0,\nSample Output 1:\n\n0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"7\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '7'\nassert solution(\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == '7'\nassert solution(\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3\") == \"7\"\nassert solution(\"5\\n2 1\\n2 1\\n1 2\\n3 1\\n1 1\") == \"7\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\nassert solution(\"5 2\\nlinearalgebra 1\\nlinearalgebra 1\\nlinearalgebra 2\\nlinearalgebra 1\\nlinearalgebra 2\\nlinearalgebra 2\\ncalculus 1\\ncalculus 1\\ncalculus 2\\ncalculus 1\\ncalculus 2\\ncalculus 2\\nhonorsanalysis 1\\nhonorsanalysis 1\\nhonorsanalysis 2\\nhonorsanalysis 2\\nhonorsanalysis 1\\nhonorsanalysis 1\\nhonorsanalysis 2\\nhonorsanalysis 2\") == \"42\"\nassert solution(\"10\\nlinearalgebra 1\\nlinearalgebra 2\\nlinearalgebra 1\\nlinearalgebra 2\\nlinearalgebra 1\\nlinearalgebra 2\\nlinearalgebra 2\\nlinearalgebra 2\\nlinearalgebra 1\\nlinearalgebra 2\\ncalculus 1\\ncalculus 2\\ncalculus 1\\ncalculus 2\\ncalculus 1\\ncalculus 2\\ncalculus 1\\ncalculus 2\\ncalculus 2\\nhonorsanalysis 1\\nhonorsanalysis 1\\nhonorsanalysis 2\\nhonorsanalysis 2\\nhonorsanalysis 1\\nhonorsanalysis 1\\nhonorsanalysis 2\\nhonorsanalysis 2\") == \"42\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '20'\nassert solution('1 2') == '2'\nassert solution('2 1') == '1'\n\nimport itertools\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '20'\nassert solution('10 1') == '10'\nassert solution('10 2') == '15'\nassert solution('20 2') == '15'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"20\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '20'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n\") == \"20\"\nassert solution(\"4 2\\nalgebra 1\\nalgebra 2\\nphysics 1\\nphysics 2\\n\") == \"31\"\nassert solution(\"100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n100 100\\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '20'\nassert solution('5 3') == '20'\nassert solution('5 5') == '5'\nassert solution('10 2') == '10'\nassert solution('10 2') == '10'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''linearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '20'\nassert solution('10') == '10'\n\nSample Input 2:\n5 3\nlinearalgebra 1\nlinearalgebra2 2\ncalculus1 1\ncalculus2 1\ncalculus3 2\ncalculus4 2\ncalculus5 2\ncalculus6 2\ncalculus7 2\ncalculus8 2\ncalculus9 2\ncalculus10 2\ncalculus11 2\ncalculus12 2\ncalculus13 2\ncalculus14 2\ncalculus15 2\ncalculus16 2\ncalculus17 2\ncalculus18 2\ncalculus19 2\ncalculus20 2\nCalculus 21\nCalculus 22\nCalculus 23\nCalculus 24\nCalculus 25\nCalculus 26\nCalculus 27\nCalculus 28\nCalculus 29\nCalculus 30\ncalculus31\ncalculus32\ncalculus33\ncalculus34\ncalculus35\ncalculus36\ncalculus37\ncalculus38\ncalculus39\ncalculus40\ncalculus41\ncalculus42\ncalculus43\ncalculus44\ncalculus45\ncalculus46\ncalculus47\ncalculus48\ncalculus49\ncalculus50\ncalculus51\ncalculus52\ncalculus53\ncalculus54\ncalculus55\ncalculus56\ncalculus57\ncalculus58\ncalculus59\ncalculus60\ncalculus61\ncalculus62\ncalculus63\ncalculus64\ncalculus65\ncalculus66\ncalculus67\ncalculus68\ncalculus69\ncalculus70\ncalculus71\ncalculus72\ncalculus73\ncalculus74\ncalculus75\ncalculus76\ncalculus77\ncalculus78\ncalculus79\ncalculus80\ncalculus81\ncalculus82\ncalculus83\ncalculus84\ncalculus85\ncalculus86\ncalculus87\ncalculus88\ncalculus89\ncalculus90\ncalculus91\ncalculus92\ncalculus93\ncalculus94\ncalculus95\ncalculus96\ncalculus97\ncalculus98\ncalculus99\ncalculus100\ncalculus101\ncalculus102\ncalculus103\ncalculus104\ncalculus105\ncalculus106\ncalculus107\ncalculus108\ncalculus109\ncalculus110\ncalculus111\ncalculus112\ncalculus113\ncalculus114\ncalculus115\ncalculus116\ncalculus117\ncalculus118\ncalculus119\ncalculus120\ncalculus121\ncalculus122\ncalculus123\ncalculus124\ncalculus125\ncalculus126\ncalculus127\ncalculus128\ncalculus129\ncalculus130\ncalculus131\ncalculus132\ncalculus133\ncalculus134\ncalculus135\ncalculus136\ncalculus137\ncalculus138\ncalculus139\ncalculus140\ncalculus141\ncalculus142\ncalculus143\ncalculus144\ncalculus145\ncalculus146\ncalculus147\ncalculus148\ncalculus149\ncalculus150\ncalculus151\ncalculus152\ncalculus153\ncalculus154\ncalculus155\ncalculus156\ncalculus157\ncalculus158\ncalculus159\ncalculus160\ncalculus161\ncalculus162\ncalculus163\ncalculus164\ncalculus165\ncalculus166\ncalculus167\ncalculus168\ncalculus169\ncalculus170\ncalculus171\ncalculus172\ncalculus173\ncalculus174\ncalculus175\ncalculus176\ncalculus177\ncalculus178\ncalculus179\ncalculus180\ncalculus181\ncalculus182\ncalculus183\ncalculus184\ncalculus185\ncalculus186\ncalculus187\ncalculus188\ncalculus189\ncalculus190\ncalculus191\ncalculus192\ncalculus193\ncalculus194\ncalculus195\ncalculus196\ncalculus197\ncalculus198\ncalculus199\ncalculus200\ncalculus201\ncalculus202\ncalculus203\ncalculus204\ncalculus205\ncalculus206\ncalculus207\ncalculus208\ncalculus209\ncalculus210\ncalculus211\ncalculus212\ncalculus213\ncalculus214\ncalculus215\ncalculus216\ncalculus217\ncalculus218\ncalculus219\ncalculus220\ncalculus221\ncalculus222\ncalculus223\ncalculus224\ncalculus225\ncalculus226\ncalculus227\ncalculus228\ncalculus229\ncalculus230\ncalculus231\ncalculus232\ncalculus233\ncalculus234\ncalculus235\ncalculus236\ncalculus237\ncalculus238\ncalculus239\ncalculus240\ncalculus241\ncalculus242\ncalculus243\ncalculus244\ncalculus245\ncalculus246\ncalculus247\ncalculus248\ncalculus249\ncalculus250\ncalculus251\ncalculus252\ncalculus253\ncalculus254\ncalculus255\ncalculus256\ncalculus257\ncalculus258\ncalculus259\ncalculus260\ncalculus261\ncalculus262\ncalculus263\ncalculus264\ncalculus265\ncalculus266\ncalculus267\ncalculus268\ncalculus269\ncalculus270\ncalculus271\ncalculus272\ncalculus273\ncalculus274\ncalculus275\ncalculus276\ncalculus277\ncalculus278\ncalculus279\ncalculus280\ncalculus281\ncalculus282\ncalculus283\ncalculus284\ncalculus285\ncalculus286\ncalculus287\ncalculus288\ncalculus289\ncalculus290\ncalculus291\ncalculus292\ncalculus293\ncalculus294\ncalculus295\ncalculus296\ncalculus297\ncalculus298\ncalculus299\ncalculus300\ncalculus301\ncalculus302\ncalculus303\ncalculus304\ncalculus305\ncalculus306\ncalculus307\ncalculus308\ncalculus309\ncalculus310\ncalculus311\ncalculus312\ncalculus313\ncalculus314\ncalculus315\ncalculus316\ncalculus317\ncalculus318\ncalculus319\ncalculus320\ncalculus321\ncalculus322\ncalculus323\ncalculus324\ncalculus325\ncalculus326\ncalculus327\ncalculus328\ncalculus329\ncalculus330\ncalculus331\ncalculus332\ncalculus333\ncalculus334\ncalculus335\ncalculus336\ncalculus337\ncalculus338\ncalculus339\ncalculus340\ncalculus341\ncalculus342\ncalculus343\ncalculus344\ncalculus345\ncalculus346\ncalculus347\ncalculus348\ncalculus349\ncalculus350\ncalculus351\ncalculus352\ncalculus353\ncalculus354\ncalculus355\ncalculus356\ncalculus357\ncalculus358\ncalculus359\ncalculus360\ncalculus361\ncalculus362\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n') == '20'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 2') == '1'\nassert solution('2 3 4') == '3'\nassert solution('3 4 1') == '4'\nassert solution('4 1 2') == '4'\nassert solution('3 3 3') == '3'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 2 3\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\nassert solution('5 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '7'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3') == '6'\nassert solution('5 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6') == '10'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 2 2\n2 3 4\n3 4 1\n''') == '6'\n\nassert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\nSample Output:\n9\n''') == '10'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n\") == \"6\"\nassert solution(\"1000000000\\n10000000\\n0\\n\") == \"0\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"6\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"2 3 4\") == \"2\"\nassert solution(\"3 4 1\") == \"1\"\nassert solution(\"4 1 2\") == \"1\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 1 2\") == \"0\"\nassert solution(\"1 1 2 3\") == \"0\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\") == \"6\"\nassert solution(\"10 2\\n3 2 1\\n1 1 1\\n2 2 1\\n2 1 2\\n1 1 1\\n1 1 1\\n2 3 1\\n3 3 1\\n1 1 1\\n2 1 2\\n2 1 2\\n1 1 1\\n3 1 2\\n2 1 2\\n2 2 3\\n2 2 3\\n3 3 1\\n3 2 1\\n2 2 1\\n3 1 2\\n2 2 1\\n2 2 1\\n3 1 1\\n3 1 2\\n3 2 2\\n3 2 1\\n3 1 1\\n3 1 1\\n\") == \"10\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\nassert solution('2 3 4') == '3'\nassert solution('4 1 2') == '1'\nassert solution('3 4 1') == '2'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 1 1\n2\n3\n1 2\n2 3 1\n1 1\"\"\") == \"impossible\"\nassert solution(\"\"\"2\n3\n1 2\"\"\") == \"impossible\"\nassert solution(\"\"\"3\n1 2\n1 3\n2 3\"\"\") == \"impossible\"\nassert solution(\"\"\"2\n3\n1 2\n1 3\"\"\") == \"2\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1\") == \"impossible\"\nassert solution(\"3 2 1\") == \"impossible\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"3 2 1\") == \"1\"\nassert solution(\"3 2 2\") == \"2\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3 1 1') == '2'"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2') == 'impossible'\nassert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == 'impossible'\nassert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 2') == '2'\nassert solution('4\\n5\\n5\\n4\\n3\\n') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3 1 1\n1\n2 3 1\n1 1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 1') == 'impossible', 'Should return impossible.'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == '2'\nassert solution('''\n2 2 2\n3\n2\n3\n''') == 'impossible'\nassert solution('''\n3 3 1\n1\n3\n1 2\n2 3 1\n1 1\n''') == 'impossible'\nassert solution('''\n2 2 2\n1\n2\n1\n''') == 'impossible'\n''')\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1') == '2'\nassert solution('8 3 1\\n6\\n6\\n5\\n6\\n5\\n5\\n5\\n5\\n4\\n5\\n4\\n4\\n4\\n4\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\\n') == '2'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n10\n50 50\n100 100\n120 120\n130 130\n140 140\n150 150\n170 170\n180 180\n190 190\n200 200\n210 210\n220 220\n230 230\n240 240\n250 250\n250 750\n\"\"\") == \"500.00\"\nassert solution(r\"\"\"\n10\n50 50\n100 100\n120 120\n130 130\n140 140\n150 150\n170 170\n180 180\n190 190\n200 200\n210 210\n220 220\n230 230\n240 240\n250 250\n250 750\n\"\"\") == \"500.00\"\nassert solution(r\"\"\"\n10\n50 50\n100 100\n120 120\n130 130\n140 140\n150 150\n170 170\n180 180\n190 190\n200 200\n210 210\n220 220\n230 230\n240 240\n250 250\n250 750\n\"\"\") == \"500.00\"\nassert solution(r\"\"\"\n100 100\n100 100\n100 100\n\"\"\") == \"100.00\"\nassert solution(r\"\"\"\n100 100\n100 100\n\"\"\") == \"100.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '600'\nassert solution('5') == '700'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"500.00\"\nassert solution(\"30\") == \"550.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n') == '501.00'\nassert solution('5\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n') == '500.00'\nassert solution('5\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n') == '500.00'\nassert solution('10\\n1 2\\n2 3\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\\n9 8\\n10 9\\n') == '1000.00'\nassert solution('100\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '500.00'\nassert solution('10') == '500.00'\nassert solution('2 0') == '0.00'\n'''\n\n\n'''\n\n\uc815\uc218\uac00 \ub4e4\uc5b4\uc624\uace0 \ub098\uc11c \uc2dc\uc791\n\uc2dc\uc791\uc810\uc744 \ud3ec\ud568\ud55c \ud6c4 \ub098\uba38\uc9c0\ub97c \ube7c\ub0b4\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ub0b4\ub9bc\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\n\n\uc0c1\ud0dc \uac12\uc744 \ub2e4\uc2dc \ud55c\ubc88 \ud655\uc778\ud574\ubcf4\uba74 \ub2e4\uc2dc \ucc98\uc74c\uc5d0 \uc815\uc758\ud558\ub294 \ube44\uc6a9 \uc911 \uac00\uc7a5 \uc791\uc740 \uac12\uc744 \uac16\ub294 \uc0c1\ud0dc\uc758 \ud06c\uae30\ub97c \ud310\ub2e8\n\n\uc120\ud0dd \uc870\uac74\uc758 \uc810\uc218\ub97c \ube44\uad50\ud574\uc57c \ud558\ubbc0\ub85c \uac01 \uac12\uc758 \uc0c1\ud55c\uc744 \ub9d0\ud558\uace0, \ucd5c\uc800\ud558\ud55c\uc744 \ub9d0\ud558\ub294 \uc2dd\uc744 \uc815\uc758\n\uc704\uc5d0 \uc815\uc758\ud55c \uc810\uc218 \ud558\ub098\ud558\ub098 \ub3cc\uba70 \ube44\uad50\ud574\uc57c \ud558\ubbc0\ub85c \uac01\uac01\uc758 \uac12\uc744 \uc815\uc758\ud574\uc57c \ud55c\ub2e4\n\n\uc810\uc218\uac00 \uac19\uc744 \uacbd\uc6b0 \uc0c1\ud55c\uc5d0 \uc791\uc740 \uac12\uc744 \uc81c\uc678\ud558\uace0 \uc81c\uc678\ud55c \ube44\uc6a9\uc744 \uc815\uc758\ud558\uace0, \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc81c\uc678\n\n'''"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '500.00'\nassert solution('4') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n250 250\n250 750''') == '500.00'''\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n2\n250 250\n250 700\n''') == '1000.00'\nassert solution('''\n2\n250 250\n250 600\n''') == '1000.00'\nassert solution('''\n2\n250 250\n250 600\n''') == '1000.00'\nassert solution('''\n10\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100 100\n''') == '4000.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '500.00'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 100 10') == '10'\nassert solution('100 1 10') == '100'\nprint('Yrgac is running a daycare service for dogs. He has $N$ dogs and he would like to take them on a walk. However, before he can walk the dogs, he needs to feed them first.\\nYraglac has $M$ feeding bowls. Because the dogs are very well trained, he can instruct a dog to eat from a specific bowl, but he can\u2019t instruct multiple dogs to eat from the same bowl. A dog is considered to be fed after eating from a single bowl. However, different dogs may have different food preferences, so they may eat from the same bowl at different speeds.\\nAs you know, dogs get impatient if they have to wait for long periods of time. Therefore, Yrgac wants to minimize the total amount of time that dogs spend waiting.')\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '0'\nassert solution('1000000000 700001030 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 5') == '7'\nassert solution('3 2') == '1'\n\nstdin = '3 2'\nstdout = '1'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n4\\n5\\n') == '1'\nassert solution('2\\n3\\n4\\n5\\n') == '0'\nassert solution('5\\n2\\n3\\n4\\n5\\n') == '0'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\nassert solution('5 5\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"2 100 10\") == \"0\"\nassert solution(\"100 1 10\") == \"0\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '0'\nassert solution('10 4') == '12'\nassert solution('100 1 10') == '108'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n2 100 10\\n100 1 10') == '0'\nassert solution('10 20\\n1 1 1\\n2 1 1\\n3 1 1\\n4 1 1\\n5 1 1\\n6 1 1\\n7 1 1\\n8 1 1\\n9 1 1\\n10 1 1\\n') == '0'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3') == '0'\nassert solution('2\\n3 10') == '10'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '2'\nassert solution('''4\n4 3 1 1\n3 2 2 2\n2 3 3 1\n1 3 1 2\n''') == '2'\nassert solution('''4\n5 5 1 1\n5 1 2 2\n1 5 1 2\n1 2 1 1\n''') == '1'\nassert solution('''3\n3 3 3 3\n3 3 3 1\n1 3 3 3\n1 3 3 3\n''') == '0'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\n\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\nSample Input:\n20 30 40\n45 20\n30 30\nSample Output:\n3''') == '3'\n\nassert solution('''20 30 40\n45 20\n30 30\nSample Input:\n20 30 40\n45 20\n30 30\nSample Output:\n2''') == '2'\n\nassert solution('''25 20 20\n25 25\n20 20\nSample Input:\n25 20 20\n25 25\n20 20\nSample Output:\n1''') == '1'\n\nassert solution('''50 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n20 20\nSample Input:\n20 20 20\n20 20\nSample Output:\n2''') == '2'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\n\nimport re\nimport sys\nfrom io import BytesIO, IOBase\nfrom typing import Optional\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n80\\n50\\n3\\n25\\n20\\n50\\n35\\n\") == \"2\"\nassert solution(\n    \"5\\n5\\n5\\n1\\n4\\n5\\n3\\n3\\n2\\n\") == \"1\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 10 2 2') == '1'\nassert solution('5 5 2 2') == '0'\nassert solution('10 10 3 4') == '0'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('80 50 3 2') == '2'\nassert solution('75 5 25 20 50 35') == '5'\nassert solution('50 5 25 35') == '0'\nassert solution('50 5 25 35 50 35') == '0'\n\n'''\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\n\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 20 35\nSample Output:\n3\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n50\\n3\\n2') == '1'\nassert solution('100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\n1\\n100\\n1\\"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '2'"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    '80 50 3 2',\n    '75 5 25 20 50 35',\n    '50 5 25 35',\n    ])) == '2'\n\nassert solution('\\n'.join([\n    '5 3 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0 0 4 1 2',\n    '0"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n2211\n1112\n1112\n1111\n1111''') == \"AAAABBBBCCCCC\"\nassert solution('''10 10\n2221\n1112\n1111\n1111\n1111\n1112\n1111\n1111\n1111\n1111\n1111''') == \"AAAABBBBBBBBBBBBBBBBBBBBBBBB\"\n'''"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'AAAA\\n...A\\n....\\n'\nassert solution('5 5') == 'AAAA\\n...A\\n...A\\n...A\\n....\\n'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n222\\n222') == 'AAAABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n\n3 4\n2211\n1112\n1112\n\n\"\"\") == \"AAAABBBB\"\nassert solution(\"\"\"\n\n3 4\n2211\n2211\n2211\n\n\"\"\") == \"AAAABBBB\"\nassert solution(\"\"\"\n\n3 4\n2211\n2211\n2211\n\n\"\"\") == \"AAAABBBB\"\nassert solution(\"\"\"\n\n3 4\n2211\n2211\n2211\n\n\"\"\") == \"AAAABBBB\"\nassert solution(\"\"\"\n\n3 4\n2211\n2211\n2211\n\n\"\"\") == \"AAAABBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAA'\nassert solution('''\n3 4\n2211\n1112\n1112\n''') == 'BBBB'\nassert solution('''\n1 2\n11\n''') == '1'\nassert solution('''\n1 1\n11\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n2211\\n1112\\n1112\\n\") == \"AAAABBBB\"\nassert solution(\"5 5\\n2211\\n1112\\n1112\\n\") == \"AAAABBBB\"\nassert solution(\"5 5\\n2211\\n2212\\n1111\\n\") == \"AAAABBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n1112\n2211\n''') == 'AAAAB'\nassert solution('''3 3\n11111\n22221\n111211\n''') == 'AAAABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1\n2211\n1111\n1111\n22222''') == 'AAA.A'\nassert solution('''5 2\n2211\n2212\n2212\n2222\n22222\n22222\n22222\n22222\n22222\n22222''') == 'A.A.A.A.A.A.A.A.A.A.A.A.A.A.'\nassert solution('''3 1\n2211\n1111\n1111\n22222''') == 'AAA'\nassert solution('''5 4\n1112\n2222\n1111\n2222\n1111\n22222\n22222\n1111\n22222\n22222\n22222''') == 'BBBB'\nassert solution('''4 2\n1112\n2222\n1111\n2222\n1111\n22222\n22222\n1111\n22222\n22222\n22222''') == 'BBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == \"AAAABBBB\"\nassert solution('''\n2\n1\n1\n1\n1\n1\n1\n1\n''') == \"ABABABAB\"\nassert solution('''\n3\n1\n1\n1\n1\n1\n1\n1\n''') == \"AAAAAABBB\"\nassert solution('''\n3\n1\n1\n1\n1\n1\n1\n1\n1\n''') == \"AAAAABABB\"\nassert solution('''\n4\n1\n1\n1\n1\n1\n1\n1\n1\n''') == \"AABABABAB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\nBBBB\\n...B\\n....\\nCCCC'\nassert solution('3 4\\n1112\\n1112\\n2211') == 'AAAA\\nBBBB\\n...B\\n....\\nCCCC'\nassert solution('2 5\\n1122\\n1112\\n1112\\n2211') == 'AAA\\n...A\\nBBBB\\n...B\\nCCCC'\nassert solution('2 2\\n1 1\\n1 1\\n1 1\\n1 1') == 'AAA\\nAAA\\nAAA\\nAAA\\n'\nassert solution('1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'AAA\\nAAA\\nAAA\\nAAA\\n'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('4 3 1 2 3 2') == '6'\nassert solution('4 3 1 2 1') == '3'\nassert solution('1 4 1 2 1 3') == '8'\nassert solution('2 3 1 2 1') == '5'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '11'\nassert solution('4 3 1 2 1 3') == '9'\n\n\n\nclass Solution:\n    def solve(self, A, R, T):\n        graph = defaultdict(list)\n        for l1, l2 in A:\n            graph[l1].append(l2)\n            graph[l2].append(l1)\n\n        # print(graph)\n        visited = set()\n        \n        q = deque([(R, 0)])\n        visited.add(R)\n        \n        while q:\n            node, time = q.popleft()\n            if node == 1:\n                return time\n            for nei in graph[node]:\n                if nei not in visited:\n                    q.append((nei, time + 1))\n                    visited.add(nei)\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '12'\nassert solution('4 3 1 2 1') == '0'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('3 4 1 2 3 2') == '6'\nassert solution('4 3 1 2 1') == '4'\nassert solution('1 4 1 2 1 3') == '5'\nassert solution('3 3 1 2 1 2') == '6'\n\nprint(solution(input()))"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n7 1 4 3\n2 5 1 2\n5 2 1 3\n1 5 3 4\n3 4 1 5\n2 1 4 5\n1 4 2 5\n4 3 1 5\n5 1 2 4\n\"\"\") == \"15\"\nassert solution(\"\"\"\n6 1 3 3\n4 4 1 2 1\n2 5 1 2\n5 2 1 3\n3 4 1 2\n1 4 2 5\n1 4 3 5\n4 3 1 2\n2 1 4 5\n\"\"\") == \"22\"\nassert solution(\"\"\"\n4 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5 1 3 3\n2 5 1 2\n5 2 1 3\n1 5 3 4\n3 4 1 5\n2 1 4 5\n1 4 2 5\n4 3 1 5\n5 1 2 4\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 3 3\") == \"9\"\nassert solution(\"3 4 1 2 3 2\") == \"13\"\nassert solution(\"4 3 1 2 1\") == \"3\"\n\n\n\u201cCout\u201d and \u201ccin\u201d are defined in terms of the default streams on your computer. So, on a normal terminal, we write \u201cprint()\u201d to print out anything on the screen. However, we can also use the built-in input() function to get user input.\n\nWrite code using the input() function that prompts the user for their name and their age. The input() function pauses your program and waits for user input.\n\n'''\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('4 3 1 2 3 2') == '8'\nassert solution('1 4 1 2 1 3') == '7'\nassert solution('3 4 1 2 1 3') == '8'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '6'\nassert solution('4 3 1 2 1') == '7'\nassert solution('1 4 1 2 1 3') == '7'\nprint(solution(''))\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2 2 8') == \"20.396078\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\") == \"20.396078\"\nassert solution(\"2 2 2 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 3 8\\n0 0 6\\n3 4 7\\n0 8 8\\n6 8 8\\n6 0 6\\n6 4 8\\n3 4\\n1 5\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n\"\"\") == \"20.396078\"\nassert solution(\"\"\"\n3 3 4\n0 0 1\n0 0 1\n0 0 1\n\"\"\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n7 2 2 7\n0 0 7\n4 5 7\n0 7 7\n7 4 7\n0 8 7\n7 8 7\n2 4\n1 5\n''') == '11.303867'\nassert solution('''\n7 4\n0 3\n3 3\n3 4\n3 5\n0 4\n2 4\n1 5\n''') == '11.303867'\n\n'''\n\nans = float('inf')\nwith open('c:\\\\Users\\\\Nellie\\\\Desktop\\\\coding.txt', 'r') as file:\n    lines = file.readlines()\n    for i in range(len(lines)):\n        temp = list(map(float, lines[i].split()))\n        ans = min(ans, temp[0] + temp[1] + temp[2] + temp[3])\nprint(ans)\n\n'''\n\nimport math"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 8') == '20.396078'\nassert solution('10 3 10 10 0') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n6 2 2 8\n3 4 7\n3 0 6\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n6 2 2 8\n3 4 7\n3 0 6\n6 8 8\n6 0 6\n6 4 8\n''') == 'IMPOSSIBLE'\nassert solution('''\n6 2 2 8\n1 1 0\n1 0 0\n3 4 7\n6 8 8\n6 0 6\n6 4 8\n''') == 'IMPOSSIBLE'\n\n-------------------\nA solution to this problem is found in the solutions tab.\n\nThe inputs are separated by a newline. The outputs are single lines.\n\nThe first line is the integer, $n$, denoting the number of hills.\n\nThe second line is the integer, $s$, denoting the number of springs.\n\nThe third line is the integer, $t$, denoting the number of towns.\n\n$\\text{Other Input}$\n\n$\\text{Other Output}$\n\"\"\"\n\nimport math\nfrom collections import deque, defaultdict\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter, mul, add\nfrom functools import reduce, lru_cache\nfrom decimal import Decimal as D\nimport unittest\nimport re\nimport sys"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('3 4 7') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"5 3 9 10\") == \"20.911732\"\nassert solution(\"15 5 8\") == \"20.911732\"\nassert solution(\"7 7 6\") == \"21.0000000\"\nassert solution(\"8 6 4\") == \"21.0000000\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 2 3') == '11.00000'\nassert solution('10 4 2 3') == '10.00000'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('10 3 4') == 'Impossible'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"c\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'b'\nassert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8\\n') == 'c'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'd'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n\"\"\") == \"bcdeeffgghhiiiijjkkllmmnnooppqrrssstttuuvvwwxyyz\"\nassert solution(\"\"\"\nccb\nbcd\nef\n\"\"\") == \"bcd\"\nassert solution(\"\"\"\ngh\nhg\nh\n\"\"\") == \"g\"\nassert solution(\"\"\"\naa\naa\naa\n\"\"\") == \"a\"\nassert solution(\"\"\"\nbcd\nbcd\nbcd\nbcd\nbcd\nbcd\n\"\"\") == \"bcd\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abca') == 'a'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'g'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'z'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"z\"\nassert solution(\"\") == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'e'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1 8') == 'c'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'c'\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'c'\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'a'\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'a'\nassert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"v\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"5\") == \"12\"\nassert solution(\"5\") == \"12\"\nassert solution(\"5\") == \"12\"\nassert solution(\"5\") == \"12\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\n\"\"\") == \"\"\"12\n10\n16\n7\n\"\"\".strip()\n\nassert solution(\"\"\"\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\n\"\"\") == \"\"\"12\n10\n16\n7\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n\"\"\") == \"\"\"6\n4\n5\n6\n\"\"\".strip()"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '12'\nassert solution('5') == '10'\nassert solution('10') == '16'\nassert solution('10') == '7'\nassert solution('11') == '10'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"hobotnica\") == \"12\"\nassert solution(\"robot\") == \"10\"\nassert solution(\"hobi\") == \"16\"\nassert solution(\"hobit\") == \"7\"\nassert solution(\"robi\") == \"10\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"5 1\") == \"10\"\nassert solution(\"10\") == \"16\"\nassert solution(\"10 2\") == \"7\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '5'\nassert solution('8') == '5'\nassert solution('5') == '4'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\") == \"12\"\nassert solution(\"2\\n3\\n4\\n5\") == \"10\"\nassert solution(\"3\\n4\\n5\\n6\") == \"16\"\nassert solution(\"4\\n5\\n6\\n7\") == \"7\"\nassert solution(\"5\\n6\\n7\\n8\") == \"4\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '12'\nassert solution('4') == '7'"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"12\"\nassert solution(\"2\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"10\"\nassert solution(\"3\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"16\"\nassert solution(\"4\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"7\"\nassert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"10\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('6\\nABCD') == 'ABCD'\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('2 4\\nABC XYZ') == 'XYZABC'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('2 3\\nA B C') == 'ABC'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\nassert solution(\"30 4\\n3D3 B JJ QZ2RKQQT3\") == \"XYZZY\"\nassert solution(\"20 6\\nAEILSOSUHSKZUHWJ\") == \"THISISANAMERICKTOMMYOUNGROWN\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nprint(solution('14 4\\nJQ IRKEYFG EXQ'))\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('21 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n\nSample Input:\n20 10\nAEIOUHARICYBVKQJZCXSWORPYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQJXSPDGYIADDFOLLMOPJKEGQMLNXQOPIWOMZUOJNCVKQ"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nassert solution('''\n2 4\nHELLO\n''') == 'HELLO'\n'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12 3\\nABBAA\\n3 5\\nA\\n\") == \"A\"\nassert solution(\"12 4\\nBABA\\n3 5\\nA\\n\") == \"A\"\n\n'''\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.6') == '135'\nassert solution('25') == '5'\nassert solution('16') == '16'\nassert solution('81.8') == '81'\nassert solution('125.9') == '125'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"100.0\") == \"1\"\nassert solution(\"0.5\") == \"1\"\nassert solution(\"0.0\") == \"0\"\nassert solution(\"-1.6\") == \"No solution\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.7') == '135'\nassert solution('2.7') == '270270'\nassert solution('1.2') == '1'\nassert solution('5.1') == '5'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.6') == '135'\n\nassert solution('4.9') == '270270'\n\nassert solution('3.0') == 'No solution'\n\nassert solution('2.4') == '135'\n\nassert solution('0.3') == 'No solution'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.6') == '135'\nassert solution('10.6') == '10270'\nassert solution('56.2') == '5625'\nassert solution('68.2') == '68250'\nassert solution('65.9') == '65269'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.6') == '135'\nassert solution('2.6') == '270'\nassert solution('123.45') == '135135'\nassert solution('1.1234567') == '135135'\nassert solution('1.234') == '135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.6') == '135135'\nassert solution
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2.6\") == \"135\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.6') == '135'\nassert solution('5776') == '76'\nassert solution('5.6') == 'No solution'\n\n\"\"\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1.6') == '135'\nassert solution('2.6') == '270'\nassert solution('123.4') == '135135'\nassert solution('5678.5') == '270270'\nassert solution('1234') == 'No solution'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n\n\"\"\""
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\n\nassert solution('''\n5\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '6'\n\nassert solution('''\n3\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n\nassert solution('''\n7\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '2'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '4'\nassert solution('3\\n0 0\\n3 0\\n5 4\\n6 4\\n9 5\\n10 7\\n11 7\\n12 8\\n13 10\\n') == '3'\nassert solution('4\\n0 0\\n3 1\\n5 4\\n6 4\\n9 5\\n10 7\\n11 7\\n12 8\\n13 10\\n') == '3'\nassert solution('4\\n0 0\\n3 1\\n5 4\\n6 4\\n9 5\\n10 7\\n11 7\\n12 8\\n13 10\\n') == '0'\nassert solution('4\\n0 0\\n3 1\\n5 4\\n6 4\\n9 5\\n10 7\\n11 7\\n12 8\\n13 10\\n') == '2'"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('1\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '0'\nassert solution('5\\n1 2\\n3 4\\n2 3\\n2 4\\n3 4\\n2 4\\n3 4\\n3 4\\n2 4\\n2 4\\n4 2\\n5 4\\n6 5\\n2 4\\n4 4\\n6 5\\n5 2\\n6 5\\n7 7\\n2 5\\n5 2\\n6 5\\n7 7\\n3 5\\n5 3\\n7 7\\n3 5\\n5 3\\n7 7\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n4 5\\n4 6\\n3 5\\n3 6\\n2 5\\n2 6\\n1 6\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '5'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n1 0\n2 3\n3 4\n4 5\n6 7\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n1 0\n1 4\n3 4\n2 6\n2 8\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 0\n1 4\n2 6\n3 4\n4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '4'\nassert solution('6') == '1'\nassert solution('1') == '0'\nassert solution('6') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('5\\n0 1\\n1 2\\n2 3\\n3 4\\n5 4\\n6 5\\n7 6\\n8 7\\n9 8') == '4'\nassert solution('4\\n0 1\\n2 2\\n4 4\\n6 6\\n8 8') == '3'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n\"\"\"\nSample Input:\n5\n1 2\n1 3\n1 4\n1 5\n2 4\n3 4\n3 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\nassert solution(\"5\\n1 3\\n1 2\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('2\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('10\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('100\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('7\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nassert solution('7\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nassert solution('8\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nassert solution('8\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'''\nassert solution('''5\n1 2\n1 3\n1 4\n1 5\n''') == '1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000'''"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n1 3') == '0.000000 0.000000'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.000000 0.000000\\n1.000000 0.000000\\n-1.000000 0.000000\\n0.000000 1.000000\\n0.000000 -1.000000'\n\"\"\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('4') == '-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n-1.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nprint('TESTS PASSED')\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\nprint('TESTS PASSED')\n'''\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\nassert solution(\"4\\n0 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\"\nassert solution(\"6\\n0 1\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n1.0000000 1.0000000\"\nassert solution(\"1\\n1\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\"\nassert solution(\"1\\n2\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n*\n1\n''') == '1'\nassert solution('''\n2\n*\n2\n''') == '2'\nassert solution('''\n3\n*\naa\n''') == '3'\nassert solution('''\n3\n*\na*\n''') == '1'\nassert solution('''\n3\n*\na\n''') == '0'\n'''\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\na*a\") == \"2\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\") == \"1\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\nabb\") == \"0\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\naba\") == \"1\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\nabb\\nbbb\") == \"0\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '2'\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2\\n1\\n1\\n'"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\\n') == '2'\nassert solution('2 1\\n*\\n') == '1'\n\n'''\n\nn, q = map(int, input().split())\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\naa\\n*\\n**\\n*a') == '2'\nassert solution('5\\na\\n*\\n**\\n*a') == '1'\nassert solution('3\\naaa\\nabc\\naba\\na*a') == '2'\nassert solution('3\\na\\na*a') == '1'\nassert solution('3\\nab\\nabc\\naba') == '0'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba') == '2\\n1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\nOX\nOX\n''') == '1'\nassert solution('''4 4\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX\nOXOXOXOXOXOXOX"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\nX\nX\nX\n''') == '1'\n\nassert solution('''\n4 4\nXO\nXO\nXO\nXO\nXO\nXO\nXO\nOX\n''') == '0'\n\nassert solution('''\n4 4\nXO\nXO\nXO\nXO\nXO\nXO\nXO\nOX\nOX\n''') == '1'\n\nassert solution('''\n4 4\nXO\nXO\nXO\nXO\nXO\nXO\nXO\nOX\nOX\n''') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\nXO\\nOX') == '1'\nassert solution('4 4\\nXO\\nOX\\nOX\\nXO') == '0'\nassert solution('4 4\\nXO\\nOX\\nOX\\nOX\\nOO') == '0'\nassert solution('4 4\\nXO\\nOX\\nOX\\nOX\\nXO') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\nassert solution('''\n4 1\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '0'\n\nassert solution('''\n4 3\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\n''') == '1'\n'''\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\nOX\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\nassert solution('4 4\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n') == '0'\nassert solution('3 3\\nXXX\\nXXX\\nXXX\\n') == '1'\nassert solution('5 5\\nXXO\\nXXO\\nXXO\\nXXO\\nXXO\\nXXO\\nXXO\\nXXO\\n') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"0\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 1\nassert solution('4 2') == 1\nassert solution('6 4') == 0\n'''"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nOX\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\"\nassert solution(\"5 5\\nXOX\\nOXX\\nXXO\\nXXO\\nXXO\\nXOO\\nXOO\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\\nXXXX\") == \"0\"\n\n---Input explanation---\nEach test case starts with a line with two space-separated integers $r$ and $c$ ($1\\! \\le \\! r,c\\! \\le \\! 1000$), which are the dimensions of the board.\n\nEach of the next $r$ lines will have exactly $c$ characters, consisting only of capital \u2018O\u2019 (representing a peg that is up), capital \u2018X\u2019 (representing a peg that is down), and no spaces or other characters. This is the starting configuration.\n\nFollowing this, each of the next $r$ lines will have exactly $c$ characters, consisting only of capital \u2018O\u2019 (representing a peg that is up), capital \u2018X\u2019 (representing a peg that is down), and no spaces or other characters. This is the target configuration.\n\n-----\nSample Input:\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\nSample Output:\n1\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 0') == '2'\nassert solution('0 2') == '2'\nassert solution('-2 0') == '2'\nassert solution('0 -2') == '2'\nassert solution('2 0 3') == '7'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2 3\\n4 5\\n6 7\\n') == '16'\nassert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2\\n') == '18'\nassert solution('2\\n2 0\\n-2 0\\n0 -2\\n') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == \"0\"\nassert solution('4') == \"1\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n4\n2 0\n0 2\n-2 0\n0 -2\n\"\"\") == \"16\"\n\nassert solution(\n\"\"\"\n1\n-1\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n3\n3 0\n-1 0\n1 -3\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n4\n-3 0\n0 -3\n0 1\n0 -1\n\"\"\") == \"11\"\n\nassert solution(\n\"\"\"\n3\n1 0\n0 1\n0 -1\n\"\"\") == \"11\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 0') == '16'\nassert solution('1 1') == '3'\nassert solution('4 4') == '14'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 1\n0 2\n-2 0\n0 -2\n1 1\n''') == '18'\n\nassert solution('''5\n1 1\n0 2\n-2 0\n0 -2\n1 1\n''') == '18'\n\nassert solution('''5\n-1 1\n0 2\n-2 0\n0 -2\n1 1\n''') == '16'\n\nassert solution('''5\n0 1\n0 2\n-2 0\n0 -2\n1 1\n''') == '18'\n\nassert solution('''7\n1 1\n0 2\n-2 0\n0 -2\n1 1\n-1 -1\n0 -1\n''') == '18'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '0'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0 0\n-1 0\n0 -1\n\"\"\") == \"1\n\n\"\"\"\nRuntime: 40 ms, faster than 96.75% of Python3 online submissions for Max Sum of 3 Non-Overlapping Subarrays.\nMemory Usage: 14.3 MB, less than 12.26% of Python3 online submissions for Max Sum of 3 Non-Overlapping Subarrays.\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2 3') == '3'\nassert solution('3 10 10 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 100') == '944'\nassert solution('5 8 50') == '856'\nassert solution('10 8 1000') == '9200'\nassert solution('1 8 1') == '1'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '3\\n'\nassert solution('5 3 2') == '4\\n'\nassert solution('8 1 4') == '10\\n'\nassert solution('10 3 2') == '7\\n'\nassert solution('5 2 2') == '5\\n'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 10 50\") == \"80\"\nassert solution(\"2 4 6 8\") == \"120\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 10 50\") == \"80\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n8 8 2 -2') == '80'\nassert solution('4\\n8 8 2 -2') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 10 50\\n8 8 2 -2\") == \"80\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 4') == '3'\nassert solution('4 1 2 5 -1') == '2'\nassert solution('10 5 2 3 -2 1 -10') == '8'\n\n--------------------------------------------------------------\n5. Longest Common Subsequence\n\nConsider a word S1 consisting of only lowercase letters as an example. S2 has the same length as S1 and consists only of lowercase letters.\n\nS1 = abc\nS2 = bcd\n\nThe longest common subsequence of S1 and S2 is cbd. This is an example of a longest common subsequence.\n\nLet S3 be an arbitrary string composed of lowercase letters, and let L = S3.\n\nThe longest common subsequence of L and S2 is cbd.\n\nWe can solve this problem in linear time by using dynamic programming. Consider the following recursive definition:"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 1 2 3 1') == '4'\nassert solution('4 4 2 0 0') == '0'\nassert solution('2 2 4 4 2') == '6'\n\n----Explanation----\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the first comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the fourth comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the third comment is $80$ seconds.\n\nThe time needed to create a fake account and use it to upvote and downvote is $10$ seconds.\n\nThe time needed to report the second comment is $80$ seconds.\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8 2 2') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8 2 2') == '4.000000000'\nassert solution('2\\n1\\n2\\n1\\n2') == '0.50000000000000004'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '4.000000000'\nassert solution('5 9') == '4.000000000'\nassert solution('3') == '2.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n3 4\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '1.800000000000003'\n\nprint('The local tests are done. Click return to continue.')\ninput()\n\nprint('\\033c')\nprint('\\033[2J')\n\n'''"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 8\") == \"3.000000000\"\nassert solution(\"0 0 10 10\") == \"3.000000000\"\nassert solution(\"5 1\") == \"0.000000000\"\nassert solution(\"5 9\") == \"0.000000000\"\nassert solution(\"3\") == \"0.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 8\") == \"3.000000000\"\nassert solution(\"0 0 10 10\") == \"0.000000000\"\nassert solution(\"5 1\") == \"2.000000000\"\nassert solution(\"5 9\") == \"3.000000000\"\nassert solution(\"3\") == \"3.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '2.000000000'"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '9.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '2.0000000000000000'\nassert solution('5 1') == '2.0000000000000000'\nassert solution('5 9') == '1.0111111111111111'\nassert solution('3') == '1.1111111111111111'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n4 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '5.000000000'\n'''\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 1 0 1\") == \"3\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '1'\nassert solution('3 5') == '1'\nassert solution('4 3') == '2'\nassert solution('4 5') == '2'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 3\n0 1 0 0\n1 2\n2 3\n2 4\n\"\"\") == \"1\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"1\", f\"{solution.__name__}({input_string})\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4') == '1'\nassert solution('3 3\\n0 1 0 0\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('1 3\\n0 1 0 0\\n1 2\\n2 3\\n3 4') == '4'\nassert solution('4 4\\n0 1 0 0\\n1 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1'\nassert solution('5 2') == '2'\nassert solution('10 4') == '3'\nassert solution('7 5') == '2'\nassert solution('0 1 0 0') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == \"1\"\nassert solution('2 1 0 0') == \"2\"\nassert solution('5 1 0 0 0') == \"2\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 5') == '3'\n'''"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n9 8\n0 0 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1\n1 1 1 1 0 1 1 1 1\n1 1 1 1 1 0 1 1 1\n1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 0 1\n1 1 1 1 1 1 1 0 1\n1 1 1 1 1 1 1 0 1\n1 1 1 1 1 1 1 0 1\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0 0\\n0 1\\n1 0\") == \"6.283185\"\nassert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n0 2\\n1 2\\n2 2\") == \"0.785398\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('2 3\\n0 1\\n1 0\\n0 1\\n1 2\\n0 2') == '1.5707963267949'\nassert solution('3 3\\n0 0\\n1 1\\n0 2\\n2 0\\n2 2\\n0 1\\n1 1') == '0.7853981633974483'\n\n\"\"\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"6.283185\"\nassert solution(\"2 3\") == \"3.141592653589793\"\n\n\"\"\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"6.283185\"\nassert solution(\"3 1\") == \"3.14159265\"\nassert solution(\"3 3\") == \"0.0\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '6.283185'\nassert solution('''\n5\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '0.95588'\n'''"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n') == '6.283185'\nprint('All tests passed!')"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n\"\"\") == \"6.283185\"\n\"\"\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('4 5') == '103.867188'\nassert solution('5 5') == '158.53846'\n\"\"\"\n\n\nfrom math import atan\nfrom math import sqrt"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1 2 3'\nprint(solution(input()))\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1 2'"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 2 3'\nassert solution('3') == '1 2 3'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1''') == \"1 2 3\"\nassert solution('''5\n1\n1\n1\n2\n1''') == \"1 2 3 4 5\"\nassert solution('''5\n1\n1\n1\n2\n1''') == \"1 2 3 4 5\"\nassert solution('''9\n1\n1\n1\n1\n1\n1\n1\n1\n1''') == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n1 2\n1 3\n2 4\n3 4''') == '1'\nassert solution('''5 4\n1 2\n1 3\n2 4\n3 4\n4 5''') == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('6 4') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"2\") == '1'\nassert solution(\"4\") == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4\n1 2\n1 3\n2 4\n3 4\n4 4\n''') == '2'\n\nassert solution('''\n5 5\n1 2\n1 3\n2 4\n3 4\n4 4\n''') == '3'\n\nassert solution('''\n5 5\n1 2\n1 3\n2 4\n3 4\n4 4\n5 5\n''') == '4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 3\\n2 4\\n3 4') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2\\n2 3\\n3 4\\n1 2\\n1 3\") == \"1 2 3 4\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 3\\n2 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n4 3\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n3 1\n1 2\n1 3\n2 4\n''') == '1 2 3 4'\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n2 3\n''') == '1 2 3 4'\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n2 3\n''') == '1 2 3 4'\nassert solution('''\n5 4\n1 2\n1 3\n1 4\n2 3\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('1 2\\n1 3\\n2 4\\n3 4') == '1 2 3 4'\nassert solution('4\\n0 0\\n4 2\\n2 3\\n2 1\\n3 4') == '1 2 3 4'\nassert solution('4\\n3 4\\n4 1\\n2 3\\n3 2') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '1'\n\nassert solution('5 2') == '1'\n\nassert solution('5 3') == '1'\n\nassert solution('6 5') == '1'\n\nassert solution('4 1') == '2'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"6 3\") == \"2\"\nassert solution(\"6 1\") == \"1\"\nassert solution(\"9 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n1 2\") == \"1\"\nassert solution(\"2 2\\n1 2\") == \"2\"\nassert solution(\"3 3\\n1 2\\n1 3\") == \"1\"\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"6 8\\n1 2\\n1 3\\n2 4\\n3 4\\n5 5\") == \"2\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 2') == '1'\nassert solution('3 2\\n1 2 3\\n3 2') == '2'\nassert solution('4 2\\n1 2 3 4\\n3 2') == '1'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '2 1\\n'\n    '1 2'\n) == '1'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\nassert solution('''\n1 3\n1 3\n''') == '1'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '2'\nassert solution('3 2') == '3'\n\"\"\"\n\nimport collections\nimport itertools\nimport heapq\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n''') == '45'\nassert solution('''4\n''') == '15'\nassert solution('''50\n''') == '1296'\nassert solution('''1000\n''') == '130236250'\nassert solution('''10000\n''') == '8709269038'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n''') == \"45\"\n\"\"\"\n1 <= k <= n <= 50\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '45'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"45\"\nassert solution(\"10\") == \"900\"\nassert solution(\"100\") == \"30000\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n2''') == '45', 'First'\nassert solution('''7\n8''') == '63', 'Second'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INP) == OUT\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == \"45\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '45'\nassert solution('123') == '1079'\nassert solution('12345') == '154775'\nassert solution('123456789') == '892035'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '10'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '45'\nassert solution('10') == '51250000'\nassert solution('100') == '668224687761000'\nassert solution('1000') == '6002705182428000'\nassert solution('10000') == '20566245479516000'\n\"\"\""
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('5 10 20 20') == '3'\nassert solution('2 1 0') == '1'\n'''\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '5'"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 20 20\"\n    ) == \"4\"\nassert solution(\n    \"7 11 9 12 2\"\n    ) == \"2\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2') == '4'\nprint('PASSED')\n\"\"\"\nimport sys\nsys.stdin = open('input.txt', 'r')\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 20 20\n7 11 9 12 2\n''') == '4', 'TEST CASE 1 FAILED'\nassert solution('''5 20 20\n10 1 9 12 2\n''') == '5', 'TEST CASE 2 FAILED'\nassert solution('''5 20 20\n10 10 9 12 2\n''') == '0', 'TEST CASE 3 FAILED'\nassert solution('''10 20 10\n10 1 9 12 2\n''') == '0', 'TEST CASE 4 FAILED'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 20 20') == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '5'\nassert solution('10 20 20') == '1'\nassert solution('15 20 20') == '3'\nassert solution('100 20 20') == '1'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''\n2\n1\n''') == '1'\nassert solution('''\n1\n1\n''') == '0'\n''')\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '3'\n\n'''\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == \"2\"\n\nassert solution('''\n4 3\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == \"3\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '1'\nassert solution('2\\n1\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2\\n1\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '1'\nassert solution('2\\n1\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '1'\nassert solution('2\\n1\\nkenny 1 harrypotter1\\ncharlie 1 harrypotter1\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\n') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''3 2\nlaura 1 harrypotter1\njenny 1 harrypotter1\nkenny 1 harrypotter1\ncharlie 1 harrypotter1\n''') == '3'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\nkenny harrypotter1\\ncharlie harrypotter1\\njenny harrypotter1\\nlaura harrypotter1') == '2'\nassert solution('2 2\\nkenny harrypotter1\\ncharlie harrypotter1\\njenny harrypotter1\\nlaura harrypotter1\\nkenny harrypotter1') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\nkenny\ncharlie''') == '1'\nassert solution('''2 2\nkenny\ncharlie\njenny\nlaura''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n') == '2'\nassert solution('2 2\\nkenny harrypotter1\\ncharlie harrypotter1\\njenny harrypotter1\\nlaura harrypotter1\\n') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n3 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '1'\nassert solution('''\n4 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '0'\nassert solution('''\n5 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"6 6\") == \"3\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0\n1 0\n0\n1 1\n0 1\n0 0\n1 1\n1 0\n0 1\n''') == '1 2'\n''')"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1 2'\nassert solution('01') == '1 1'\nassert solution('011010') == '1 2'\nassert solution('0010010001') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n01\") == \"2 1\"\nassert solution(\"2\\n00\") == \"1 1\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"2 1\"\nassert solution(\"00\") == \"1\"\nassert solution(\"100\") == \"3 2\""
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1 1'\nassert solution('01') == '2 1'\nassert solution('00') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0\\n1') == '1 1'\nassert solution('1\\n1') == '1 2'\nassert solution('1\\n0') == '2 1'\nassert solution('0\\n0') == '2 2'\nassert solution('1\\n0') == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n00\n''') == '''\n2 1\n'''\nassert solution('''\n100\n1110010\n''') == '''\n3 1\n'''\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2 1'\nassert solution('01') == '1 1'\nassert solution('0101') == '1 1'\nassert solution('010101') == '1 3'\nassert solution('01010101') == '1 4'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n01\n''') == '2 1'''\nassert solution('''1\n01\n''') == '1 3'''\nassert solution('''1\n01\n''') == '2 1'''\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4 3'\nassert solution('2') == '2 2'\nassert solution('1') == '1 1'\nassert solution('20') == '4 1'\nassert solution('19') == '1 1'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6\n2 1\n3 4\n2 2\n5 4\n6 5\n3 1\n4 4\n3 2\n4 1\n5 4\n3 1\n\"\"\") == \"4 3\"\n\nassert solution(\"\"\"\n5\n2 1\n3 4\n2 2\n5 4\n3 4\n4 4\n3 1\n4 4\n5 4\n3 4\n4 4\n3 4\n4 4\n\"\"\") == \"5 3\"\n\nassert solution(\"\"\"\n5\n2 1\n3 4\n2 2\n5 4\n3 4\n4 4\n3 4\n4 4\n5 4\n3 4\n4 4\n3 4\n4 4\n\"\"\") == \"5 3\"\n\nassert solution(\"\"\"\n4\n4 1\n4 2\n4 3\n4 4\n\"\"\") == \"4 3\"\n\nassert solution(\"\"\"\n5\n2 1\n3 4\n2 2\n5 4\n3 4\n4 4\n3 4\n4 4\n5 4\n3 4\n4 4\n3 4\n4 4\n\"\"\") == \"5 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n4 1') == '4 3'\nassert solution('2\\n3 2') == '2 3'\nassert solution('1\\n3 2') == '3 2'\nassert solution('1\\n2 2') == '2 2'\nassert solution('3\\n4 1') == '4 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1') == '4 3'\nassert solution('10 1') == '10 3'\nassert solution('12 1') == '12 3'\nassert solution('20 1') == '20 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input:\n2\n1 1\n2 3\nSample Output:\n2 3\n1 1\n\n\"\"\") == \"2 3\\n1 1\"\nassert solution(\"\"\"\n4 1\n21 2\n2 2\n23\n12\nSample Output:\n2 3\n1 1\n\n\"\"\") == \"2 3\\n1 1\"\nassert solution(\"\"\"\n4 1\n1 2\n2 2\n23\n12\nSample Output:\n2 3\n1 1\n\n\"\"\") == \"2 3\\n1 1\"\nassert solution(\"\"\"\n4 1\n1 3\n2 2\n23\n12\nSample Output:\n2 3\n1 1\n\n\"\"\") == \"2 3\\n1 1\"\nassert solution(\"\"\"\n4 1\n1 1\n2 2\n23\n12\nSample Output:\n2 3\n1 1\n\n\"\"\") == \"2 3\\n1 1\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\") == \"2 3\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 2\") == \"2 2\"\n\nstdin = \"\"\"\n3\n4 1\n2 123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n2 3\n2 123\n1012\n2123\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 1\\n2123\\n2 2\\n21\\n10\\n2 2\\n23\\n12\\n') == '4 3\\n2123\\n1012\\n2123\\n1111\\n'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n4 1\\n2123\\n2 2') == '4 3\\n2123\\n1012\\n2123'\nassert solution('5\\n4 1\\n212\\n3234\\n567\\n6\\n7\\n') == '5 7\\n212\\n3234\\n567\\n6\\n7\\n'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '3\\n4 1\\n2 123\\n2 2\\n21\\n10\\n2 2\\n23\\n12'\n) == '4 3\\n2123\\n1012\\n2123'\nassert solution(\n    '5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9'\n) == '1 1\\n23 33\\n9 9'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\ngtk2\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff'\n\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk freetype pango glib2 gtk2 libattr pango xorg-x11 libjpeg libtiff xorg-x11-libs zlib libjpeg atk vim-common vim-X11 pango freetype atk xorg-x11-libs grep freetype pcre'''\n\n'''"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk pango glib2 zlib libjpeg vim-common xorg-x11 pango gtk2 freetype gtk2 pango xorg-x11 pango vim-common pango xorg-x11 pango zlib pango gtk2 freetype gtk2 pango freetype gtk2 pango zlib pango xorg-x11 freetype xorg-x11 pango pango gtk2 xorg-x11 pango pango gtk2 freetype gtk2 pango pango pango xorg-x11 pango pango pango gtk2 pango gtk2 pango pango pango gtk2 pango pango pango pango pango pango gtk2 pango pango pango pango pango pango pango pango pango pango pango pango pango gtk2 pango pango gtk2 pango pango gtk2 pango pango gtk2 pango gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 pango pango pango pango gtk2 pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango pango gtk2 pango pango gtk2 pango pango gtk2 pango pango gtk2 pango pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2 pango gtk2"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr') == 'atk'\nassert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\n\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\npcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n') == 'cannot be ordered'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'atk'\nassert solution() == 'freetype'\nassert solution() == 'glib2'\nassert solution() == 'libattr'\nassert solution() == 'libjpeg'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n16\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nxorg-x11-libs\\nglib2\\nlibjpeg\\nfreetype\\ngtk2\\npango\\nlibattr\\npcre\\nemacs\\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"atk zlib libjpeg pcre gtk2 libattr pango glib2 xorg-x11 vim-X11 freetype\"\nassert solution(\"3\") == \"emacs xorg-x11 lisp zlib atk\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    17\n    libattr\n    vim-X11 vim-common gtk2 libattr\n    vim-common\n    gtk2 libtiff atk pango glib2\n    atk\n    pango xorg-x11-libs freetype glib2\n    glib2\n    zlib\n    libjpeg\n    atk\n    pango\n    xorg-x11-libs grep freetype\n    grep pcre\n    pcre\n    freetype\n    3\n    emacs xorg-x11 lisp\n    xorg-x11\n    lisp emacs\n    0\n    ''') == 'atk pango libattr gtk2 libtiff zlib pango atk pango xorg-x11 freetype pango xorg-x11 atk pango gtk2 pango pango zlib gtk2 freetype vim-common pango xorg-x11 pango xorg-x11 gtk2 pango pango xorg-x11 pango glib2 pango xorg-x11 pango xorg-x11 gtk2 pango pango gtk2 pango glib2 pango gtk2 pango glib2 pango pango xorg-x11 pango pango xorg-x11 gtk2 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango pango gtk2 pango pango gtk2 gtk2 pango gtk2 pango xorg-x11 pango pango gtk2 pango pango gtk2 pango pango xorg-x11 pango pango xorg-x11 pango xorg-x11 pango xorg-x11 pango pango xorg-x11 pango xorg-x11 pango xorg-x11 pango pango xorg-x11 pango xorg-x11 pango xorg-x11 pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango xorg-x11 pango pango gtk2 pango gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 pango gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 pango gtk2 pango gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 gtk2 g"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'emacs atk pango xorg-x11 vim-common gtk2 libattr pango glib2 vim-common xorg-x11 pango gtk2 libjpeg pcre'\nassert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'cannot be ordered'\nassert solution('''\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'freetype libjpeg libtiff libattr gtk2 pango xorg-x11 xorg-x11-libs'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 'atk pango glib2 zlib libjpeg atk'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('32 20') == '16'\nassert solution('32 16') == '10'\nassert solution('1') == '0'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('32 20') == '16'\nassert solution('2310') == '8'\nassert solution('10') == '10'\nassert solution('300') == '20'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"32 20\") == \"16\"\nassert solution(\"8 9\") == \"3\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1.2\") == \"2\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"32 20\") == \"16\"\nassert solution(\"42\") == \"10\"\nassert solution(\"32\") == \"10\"\nassert solution(\"321\") == \"2\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 20') == '16'\nassert solution('32 20') == '16'\nassert solution('10 10') == '16'\nassert solution('32 20') == '16'\nassert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('32 20') == '16'\nassert solution('1000000 10000000') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"32 20\") == \"16\"\nassert solution(\"32 17\") == \"10\"\nassert solution(\"128 11\") == \"1\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4\n....\n...#\n.###\n...#\n.###''') == '13\\n13'\n\nassert solution('''20 4\n.###########.\n.#############\n.#######.###.\n.#####.#####.\n.####.#####.##\n.#####.#####.##\n.######.####.##\n.#######.###.##\n.#####.#####.##\n.####.#####.###\n.#############\n.###########.\n.#############\n.#######.###.\n.#####.#####.##\n.####.#####.##\n.#####.#####.##\n.###########.\n.#############\n.###########.\n.#############\n.#####.#####.##\n.####.#####.##\n.####.#####.##\n.#######.###.##\n.#####.#####.##\n.####.#####.##\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n.#############\n.###########.\n."
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n'\n                '#\\n'\n                '#\\n'\n                '#') == '1'\n\nassert solution('2\\n'\n                '##\\n'\n                '#.') == '2'\n\nassert solution('3\\n'\n                '#.\\n'\n                '##.') == '4'\n\nassert solution('3\\n'\n                '###\\n'\n                '#.#') == '4'\n\nassert solution('3\\n'\n                '####\\n'\n                '#.#.') == '8'"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == '5 13'\nassert solution('2 3') == '4'\nassert solution('4 1') == '4'\nassert solution('5 1') == '6'\nassert solution('5 2') == '6'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"10 10\") == \"11\""
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n.#.#\\n....\\n\") == \"13\\n13\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '5 13', 'Should be 5 13'\nassert solution('1 1 2 2 1') == '1 1 2 2 1', 'Should be 1 1 2 2 1'\nassert solution('3 3 2 4 4 1 1 1') == '3 3 2 4 4 1 1 1', 'Should be 3 3 2 4 4 1 1 1'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\\n....\\n\") == \"5 13\\n\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n....\\n.#.#\") == \"13\"\nassert solution(\"3 4\\n.#.#\\n....\\n\") == \"13\"\nassert solution(\"2 3\\n.\\n#\\n\") == \"3\"\nassert solution(\"3 3\\n.\\n.\\n\") == \"3\"\nassert solution(\"3 3\\n#\\n#\\n\") == \"1\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4\n...\n.##\n...\n''') == '13', solution\n\nassert solution('''\n10 10\n#######\n#######\n#######\n#######\n#######\n#######\n#######\n#######\n#######\n''') == '50', solution\n\nassert solution('''\n10 10\n#######\n#######\n#######\n#######\n#######\n#######\n#######\n#######\n#######\n''') == '50', solution\n\nassert solution('''\n10 10\n######\n######\n######\n######\n######\n######\n######\n######\n######\n''') == '50', solution\n\nassert solution('''\n10 10\n#####\n#####\n#####\n#####\n#####\n#####\n#####\n#####\n#####\n''') == '50', solution"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n'\n                '#.#\\n'\n                '#.#') == '13'\n\nassert solution('1 1\\n'\n                '#\\n') == '1'\n\nassert solution('4 1\\n'\n                '#\\n') == '1'\n\nassert solution('4 5\\n'\n                '#\\n'\n                '...\\n'\n                '#\\n') == '3'\n\nassert solution('8 6\\n'\n                '#\\n'\n                '#\\n'\n                '#\\n'\n                '#\\n'\n                '#\\n'\n                '#\\n'\n                '#\\n') == '3'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3\\n3 1\\n3 1? 0') == '5'\nassert solution('2\\n3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\nassert solution('3\\n2 3\\n3 1\\n3 1? 0') == '5'\nassert solution('3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n3 1 5 1\n2 3 3 1\n3 1 2? 1\n3 1? 0\nSample Input 2:\n2\n3 1 5 1\n3 1? 0\nSample Output 2:\n5\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n5\\n1') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '5'\nassert solution('4 3') == '3'\nassert solution('2 4') == '2'\nassert solution('1 2 4 1') == '3'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\n\"\"\""
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3 3\n    1 2 5 1\n    2 3 3 1\n    3 1? 0\n    ''') == '5'\nassert solution('''\n    3 3\n    1 2 5 1\n    2 3 3 1\n    3 1? 0\n    ''') == '3'\nassert solution('''\n    3 2\n    1 2 5 1\n    2 3? 0\n    3 3 1\n    ''') == '4'\n''')"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 4\n1 2 3 3 2\n3 3 2 3 4\n3 2 4 3 3\n3 1 5 1\n4 5\n\"\"\") == \"5\"\nassert solution(\"\"\"\n7 4\n1 2 4\n3 4 1\n3 4 3\n3 2 2\n2 4 5\n5 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n-1 0\n-1 1\n0 1''') == '3'\nassert solution('''4 4\n-1 -1 0 1\n1 0 -1 1\n-1 1 0 0\n1 1 1 -1''') == '1'\n\nprint(solution(*(line.split() for line in stdin.strip().split('\\n'))))\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1 1\n-1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n-1 0\n-1 1\n0 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 9\n-1 -1\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n100000 100000\n0 -1\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 3\n-1 0\n-1 1\n0 1\n''') == '3'\nassert solution('''\n2\n4 4\n-1 1\n-1 2\n''') == '0'\nassert solution('''\n10\n3 4\n0 1\n1 5\n2 6\n4 7\n6 8\n7 9\n8 10\n9 11\n10 12\n3 13\n12 14\n5 15\n15 16\n4 17\n16 18\n13 19\n13 20\n14 21\n19 22\n18 23\n16 24\n11 25\n10 26\n9 27\n8 28\n7 29\n6 30\n''') == '29'\n\nassert solution('''\n13\n6 7\n8 9\n3 10\n12 11\n5 12\n1 11\n0 12\n4 12\n4 13\n8 14\n9 15\n10 16\n14 17\n16 18\n10 19\n14 20\n4 21\n9 22\n7 23\n6 24\n5 25\n1 26\n2 27\n3 28\n10 29\n5 30\n''') == '30'\n\nassert solution('''\n5\n2 2\n1 4\n0 0\n4 2\n3 3\n5 1\n4 3\n3 1\n2 2\n1 1\n''') == '1'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '3'\nassert solution('''\n4 4\n-1 -1\n-1 0\n-1 1\n0 -1\n''') == '4'\nassert solution('''\n1 2\n-1 0\n''') == '2'\nassert solution('''\n4 5\n-1 -1\n-1 0\n-1 1\n-1 -1\n0 1\n''') == '4'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 3') == '3'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution(r\"0 0\") == \"0\"\nassert solution(r\"3 1 0 1 2 1 1 1\") == \"3\"\nassert solution(r\"3 2 0 1 0 1 0 1\") == \"0\"\nassert solution(r\"1 2 0 1 0 1 0 1\") == \"0\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"3\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n-1 -1') == '0'\nassert solution('2 3\\n0 1\\n0 2\\n0 3\\n1 2\\n1 3') == '3'\n\n'''\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(example_input_1) == '0'\nassert solution(example_input_2) == '3'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"9\") == \"7\"\nassert solution(\"6\") == \"7\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nprint(\"YOUR CODE IS CORRECT!\")"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\nassert solution('1\\n9 9 9 9') == '5'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('5') == '5'\n'''\n\n'''\nExplanation\nLet's take the example from the problem description.\n\nLet's say we have a sequence like $a_1, a_2, a_3$, which has three distinct values.\n\nIf we have $f$, then we have some function which takes on any of the values of $a_i$ and is constant. If we were able to take any value of $a_i$ and see that $f$ does not take on it, then there would be no function that took on any of the values of $a_i$.\n\nIn fact, if we let $a_i$ = 5, then we would only be able to take on the values $1, 3$, so we would not be able to see any of the values of $a_i$ in the function.\n\nBecause $a_i$ = 5, we don't need to take any other values of $a_i$.\n\nIf we have $a_1$ = 4 and $a_2$ = 2, we can take any values of $a_1$ and $a_2$, so we can see any value of $a_3$ and therefore also any value of $a_1$ and $a_2$ in the function.\n\nSo, we can't see any values of $a_1$ or $a_2$ in our function.\n\nIf we had $a_1$ = 2 and $a_2$ = 4, we can take any values of $a_1$ and $a_2$, so we can see any value of $a_3$ and therefore also any value of $a_1$ and $a_2$ in the function.\n\nSo, we can see any values of $a_1$ and $a_2$ in our function.\n\nIf we had $a_1$ = 2 and $a_2$ = 6, we can take any values of $a_1$ and $a_2$, so we can see any value of $a_3$ and therefore also any value of $a_1$ and $a_2$ in the function.\n\nSo, we can see any values of $a_1$ and $a_2$ in our function.\n\nFor all of these cases, we can see that we need to take only two values of $a_1$ and $a_2$, so we can see no other values of $a_1$ or $a_2$.\n\nSo, we have shown that for any sequence of integers $a_ i$ such that $1\\leq a_ i\\leq n\\leq 100$, we can see that there are 6 distinct values of $f$ taken on over the sequence.\n\nSo, the number of distinct values of $f$ taken on over the given sequence is 6.\n'''\n\n\n'''\nAnother example:\n\nLet's see how this is done with a sequence $a_ i$ of length 10.\n\nWe have to take all of the values of $a_ i$ and see if they match up with any of the values of $a_ i + 1$ and $a_ i + 2$. If they match, then we cannot take any of the values of $a_ i$.\n\nIf the values of $a_ i$ and $a_ i + 1$ match, we can take any of the values of $a_ i + 2$ and so on.\n\nIf we can see any of the values of $a_ i$ in our function, then we can't see any of the values of $a_ i + 1$ or $a_ i + 2$.\n\nSo, we need to take only $a_ i + 2$ and $a_ i + 1$ so we can see any value of $a_ i$ in our function.\n\nNow if we had a sequence $a_ i$ of length $n$, then we can see that there are $n - 1$ distinct values of $f$ taken on over the sequence.\n\nSo, the number of distinct values of $f$ taken on over the given sequence is $n - 1$.\n\nHere's how this can be done with Python:"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n9 6 2 4\\n') == '6'\nassert solution('100\\n1 1 1 1 1 1 1 1 1 1\\n') == '11'\nassert solution('3\\n1 2 3\\n') == '0'\nassert solution('6\\n3 1 2 3 4 5\\n') == '0'\nassert solution('15\\n1 1 1 1 1 1 1 1 1 1 1\\n') == '1'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '8'\nassert solution('18') == '4'\nassert solution('28') == '11'\nassert solution('40') == '8'\nassert solution('50') == '4'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\nassert solution('4\\n1 2 3 4') == '5'\nassert solution('100\\n1 2 3 4') == '101'\nassert solution('100\\n1 2 3 4 5') == '100'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '6'\nassert solution('5') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n7 2 1') == '6'\nassert solution('9 6 2 4') == '6'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '1.000000'"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"2.000000\"\nassert solution(\"2 10 1\") == \"2.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"2.000000\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1 3 2') == '2.000000'\nassert solution('3 4 5 8 9') == '8.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '2.50000'\nassert solution('3 5 2') == '2.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 3 2\") == \"2.000000\"\nassert solution(\"1 1 1 1 2\") == \"1.000000\"\nassert solution(\"1 1 1 1 1\") == \"1.000000\"\nassert solution(\"2 2 2\") == \"1.000000\"\nassert solution(\"1 2 1 2\") == \"1.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1 1 3 2\n2 5 1\n''') == '2.000000'\nassert solution('''\n0 1 2 3 4 5\n5 4 3 2 1 0\n''') == '5.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"1.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 3 2') == '2.000000'\nprint(solution(input()))"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 3 2\") == \"2.000000\"\nassert solution(\"1 1 1 3 4\") == \"2.000000\"\n\"\"\"\n\nfrom math import sqrt\nimport sys\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n1 2\\n1 3\\n4') == '96\\n'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n4 5\\n4 6\\n4 7\\n4 8\\n5 6\\n5 7\\n5 8\\n6 7\\n6 8\\n7 8\\n') == '1028\\n'"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '96'\nassert solution('4') == '81'"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1\\n3 2\\n1 4\\n3 2') == '96'\nassert solution('5\\n4 1\\n3 2\\n1 4\\n1 3\\n1 5') == '43'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n2\\n3\\n4\\n1 2\\n2 3\\n4\\n1 3\\n1 4') == '96'\nassert solution('1\\n4\\n2\\n3\\n4\\n1 2\\n3 4') == '48'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1\\n2 3\\n3 4\\n4 1\\n4 3\\n5') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n10 10\n2 3\n5 6\n8 9\n7 7\n9 6\n5 5\n9 5\n1 1\n3 3\n3 3\n4 4\n5 5\n''') == '96'\nassert solution('''\n20\n20 20\n1 2\n1 3\n2 4\n2 5\n2 6\n3 6\n3 7\n4 5\n4 6\n4 7\n5 5\n5 6\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n2 4\n2 5\n2 6\n3 6\n3 7\n4 5\n4 6\n4 7\n5 5\n5 6\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3 3\n3 4\n4 4\n5 5\n5 6\n5 7\n6 6\n6 7\n7 7\n7 8\n7 9\n7 10\n8 9\n8 10\n9 10\n1 2\n1 3\n3"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2\n2 3\n4\n1 2\n1 3\n1 4''') == '96'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n5 2\n10 5\n1 2\n1 3\n1 4\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n21 23\n21 24\n20 25\n20 26\n''') == '96'"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n3\n2 3\n2 4\n1 2\n1 3''') == \"96\"\nassert solution('''3\n3\n2 3\n1 2\n1 3\n1 4''') == \"48\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 0\n0 1\n1 0\n1 1\n''') == '3'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 0\\n0 1\\n1 0\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '3'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('10') == '7'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\n1 0\\n0 1') == '2'"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"3\"\nassert solution(\"1\\n0 0\\n0 1\\n1 1\\n1 1\") == \"3\"\n\nimport sys"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\nassert solution('3\\n0 0\\n0 1\\n1 0\\n2 1\\n') == '1'\nassert solution('3\\n0 0\\n1 1\\n0 0\\n2 1\\n') == '3'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('4') == '9'\n\nstdin = \"\"\"\n3\n2 8\n3 1\n1 4\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n2 8\n3 1\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3\n2 8\n3 1\n1 4\n\"\"\") == \"9\"\nassert solution(\"\"\"\n4\n2 6\n4 1\n1 8\n1 7\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5\n2 5\n3 2\n2 7\n4 2\n1 6\n\"\"\") == \"7\"\nassert solution(\"\"\"\n3\n1 2\n4 5\n2 1\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4\\n') == '10'\nassert solution('4\\n1 1\\n1 3\\n4 1\\n') == '10'\nassert solution('1\\n1\\n') == '1'\n\"\"\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 8\\n3 1\\n1 4') == '10\\n10\\n9'\nassert solution('100\\n2 2\\n1 3\\n0 3') == '10\\n10\\n9'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 8\n3 1\n1 4\n1 5\n3 7\n''') == '10'\nassert solution('''10\n2 8\n3 1\n1 4\n1 5\n3 7\n''') == '9'\nassert solution('''1\n2 8\n3 1\n1 4\n1 5\n3 7\n''') == '10'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n7 8\\n5 6\\n1 4\\n3 5') == '8\\n5\\n8\\n8'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 8\n3 1\n1 4\n''') == '10'\n\nassert solution('''\n5\n4 6\n3 1\n2 4\n''') == '9'\n\nassert solution('''\n10\n1 2\n3 4\n5 6\n7 8\n9 10\n''') == '4'\n\nassert solution('''\n2\n1\n0\n''') == '0'\n\nassert solution('''\n1\n2\n0\n''') == '0'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 8\\n3 1\\n1 4\\n') == '10\\n10\\n9\\n'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 8') == '10'\nassert solution('3 1') == '9'\nassert solution('1 4') == '9'\n'''\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 8\\n3 1\\n1 4\") == \"10\"\nassert solution(\"1\\n1 1\\n2 2\") == \"3\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n##JF#\\n#..#') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"#.J#\\n\"\n    \"#.#\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"IMPOSSIBLE\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n###\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == 'IMPOSSIBLE'\nassert solution('5 4') == '2'\nassert solution('4 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"1\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n####\\n#J#') == 'IMPOSSIBLE'\nassert solution('2 3\\n###\\n#J#') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"3 3\\n.###\\n#.##\\n#.##\") == \"2\"\nprint(solution(input()))\n\"\"\"\n\nR, C = map(int, input().split())\n\nmaze = []\n\nfor _ in range(R):\n    maze.append(list(input()))"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('10 10 10') == '0.5'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"0.3333333333\"\nassert solution(\"2\") == \"0.3333333333\"\nassert solution(\"1 2\") == \"0.3333333333\"\nassert solution(\"2 2\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('2') == '0.166666666667'\nassert solution('1 1') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1 2 2\n2\n1 1\nSample Input 2:\n1 2 5\n1 1\nSample Output 2:\n0.1666666667\n\"\"\"\n    ) == \"0.16666666667\"\nassert solution(\"\"\"1 2 5\n1 1\nSample Input 3:\n3 2 8\n2\n1 1\nSample Output 3:\n0.3333333333\n\"\"\"\n    ) == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n\"\"\"\nimport math"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('2') == '0.0'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\\n2\\n1 1\") == \"0.3333333333\"\nassert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'\nassert solution('100 100 100\\n1\\n1\\n') == '0.99916666666'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 2\n3\n3 3 2\n''') == '0.3333333333'\nassert solution('''\n10 1 10\n10\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '0.166666666667'\nassert solution('''\n5 5 5\n3 5 3 5\n3 3 3 3 3\n''') == '0.0'\nassert solution('''\n10 10 10\n10\n10 10 10\n''') == '0.0'\nassert solution('''\n10 10 10\n10\n10 10 10\n''') == '0.0'\n'''\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('2') == '0.5'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n11101\n110101\n111011\n1100011\n1011011\n1101111\n1110111\n1101001\n1101011\n1101111\n110111\n1110111\n1101111\n1110111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111\n1101111"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"2\"\nassert solution(\"111111\") == \"2\"\nassert solution(\"0110111\") == \"3\"\nassert solution(\"11110101\") == \"2\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n101\n1\n101\n1\n1\n*\n''') == '1023'\nassert solution('''3\n11\n11\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''') == '422'\nassert solution('''3\n0\n0\n1\n1\n1\n0\n0\n''') == '4'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1023\"\n\nSample Input:\n3\n1011\nSample Output:\n1\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1023\"\nassert solution(\"011\") == \"12\"\nassert solution(\"10011\") == \"12\"\nassert solution(\"10101\") == \"2\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0\\n101') == '101'\n\"\"\"\nn = int(input())\np = input()\ncount = 0"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '1024'\nassert solution('11') == '1023'\nassert solution('10') == '1023'\nassert solution('1111111111') == '1024'\nassert solution('01011101110111010101') == '2070'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1*1''') == '23'\nassert solution('''2\n1*1''') == '23'\nassert solution('''2\n111''') == '11111'\nassert solution('''2\n11*1''') == '11111'\nassert solution('''2\n1*1''') == '23'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n111\") == \"1\"\nassert solution(\"101\") == \"1111\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"1*1\") == \"1\"\nassert solution(\"0111100\") == \"11010111\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '6'\n\"\"\"\n\nx, y = map(int, input().split())\n\nfor i in range(3, y + 1):\n    if i == 2:\n        a = x + 1\n        b = x + 2\n        c = 1\n    else:\n        a = x + 1\n        b = x + 2\n        c = (x + 1) * (x + 2)\n    x = a + b\n    y = c + b\n\nprint(x)"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '6'"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 2') == '3'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\n''') == '12'\nassert solution('''\n1 4\n''') == '1'\nassert solution('''\n2 2\n''') == '0'\n\"\"\"\na,b = map(int, input().split())\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('2 2') == '6'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"4 4\") == \"6\"\nassert solution(\"5 5\") == \"6\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '6'\nassert solution('3') == '6'\nassert solution('3 1') == '3'\nassert solution('0 1') == '1'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 1') == '3'\nassert solution('2 3') == '6'\nassert solution('3 1') == '2'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 4') == '10'\nassert solution('5 5') == '8'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n') == '6'\nassert solution('1 1\\n2 2\\n') == '7'\nassert solution('2 5\\n4 4\\n') == '6'\nassert solution('2 9\\n4 9\\n') == '12'\nassert solution('10 10\\n10 10\\n') == '0'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"2000\\n2000\\n2000\\n2000\") == \"Impossible\"\n\nSample Input 2:\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\nSample Output 2:\n1800\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000 2000 7\\n100\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n100\\n480\\n550\\n1000\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\nprint(\"Solution: \", solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n'''))"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n8') == '8'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n8') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n8\\n1000\\n1500\\n1500\\n1400\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n1400\\n1500\\n1500\\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000 2000 7\\n100') == '2930'\nassert solution('1000 2000 7\\n100') == '2930'\nassert solution('1000 2000 7\\n100') == 'Impossible'\nassert solution('1000 2000 7\\n100') == 'Impossible'\nassert solution('1000 2000 7\\n100') == 'Impossible'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n200\\n100\\n300\\n500\\n1000') == '1000'\nassert solution('10\\n100\\n200\\n300\\n400\\n500\\n600\\n700\\n800\\n900\\n100') == '1500'\nassert solution('4\\n500\\n100\\n200\\n400\\n300\\n100\\n500\\n100') == 'impossible'\nassert solution('5\\n1000\\n500\\n100\\n200\\n300\\n100\\n500\\n100') == 'impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1500\n1550\n''') == '2930'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1500\n1550\n1660\n''') == '2930'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1500\n1550\n1660\n1720\n''') == 'Impossible'\n\nassert solution('''\n10 50 200\n100\n500\n600\n700\n800\n900\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n''') == '3000'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n') == '2930'\nassert solution('1000 2000 7\\n1000\\n480\\n500\\n550\\n1000\\n') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"Impossible\""
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == \"2930\"\nassert solution('''\n10000 2000 7\n100\n480\n500\n550\n10000\n1400\n1500\n''') == \"Impossible\"\nprint(\"Solution: %s\" % solution('''\n100\n200\n200\n200\n'''))"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == \"2\"\nassert solution('''\n1 2 3\n0\n0\n1\n''') == \"2\"\nassert solution('''\n1 2 3\n0\n1\n0\n''') == \"1\"\nassert solution('''\n1 2 3\n0\n1\n0\n''') == \"1\"\nassert solution('''\n1 2 3\n0\n0\n1\n''') == \"1\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == '2'\n\"\"\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 2 3\\n0\\n0\\n1'\n) == '2'\n'''\n\ncache_size, object_count, access_count = map(int, input().split())\naccess_list = list(map(int, input().split()))\n\nimport heapq\n\nh = []\n\nfor _ in range(object_count):\n    heapq.heappush(h, int(input()))\n\nfor i in range(access_count):\n    object_to_remove = heapq.heappop(h)\n    heapq.heappush(h, object_to_remove)\n    \n    for _ in range(cache_size):\n        heapq.heappush(h, heapq.heappop(h))\n    \n    print(object_to_remove)\n    \n'''\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2 3\n0\n0\n1\nSample Input 2:\n1 2 3\n2\n0\n1\nSample Output 2:\n0\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 1 3') == '2'\nassert solution('3 1 2') == '1'\nassert solution('2 0 2') == '1'\nassert solution('3 3 0') == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == '2'\n\nassert solution('''\n10\n0\n3\n6\n8\n''') == '6'\n\nassert solution('''\n10\n0\n0\n2\n0\n4\n8\n3\n7\n5\n''') == '5'\n\nassert solution('''\n10\n0\n3\n0\n4\n1\n6\n2\n5\n''') == '6'\n\nassert solution('''\n10\n0\n0\n3\n1\n2\n0\n4\n5\n''') == '0'"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 3\n0\n0\n1\n''') == '2'\nassert solution('''1 2 3\n0\n0\n1\n''') == '3'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1\\n') == \"2\"\nassert solution('3 3 3\\n1 2 2\\n3 1 3\\n1 3 1\\n') == \"2\"\nassert solution('1 5 5\\n0 1 1\\n2 3 2\\n4 6 6\\n4 2 4\\n') == \"4\"\nassert solution('10000 10000 10000 10000\\n10000 10000 10000 10000\\n10000 10000 10000 10000\\n') == \"10000\"\nassert solution('0 0 0 0\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\\n') == \"0\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == '2'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2') == \"10\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n3 1 2\n''') == '26'\n\nassert solution('''7 3\n-2 2 -3\n-5 -1 -2\n-3 -3 -5\n-4 -4 -4\n-3 -2 3\n-1 4 3\n2 3\n''') == '20'\n\nassert solution('''13 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n2 2\n3 4\n3 2\n3 3\n''') == '30'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '10'\nassert solution('5 5') == '30'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '10'\nassert solution('1 1') == '0'\nassert solution('3 3') == '20'"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '10'"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '20'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n'''\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == \"3100\"\nassert solution(\"\"\"\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n\"\"\") == \"3000\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"3100\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, namedtuple\nfrom itertools import permutations\n\n\nclass City:\n    def __init__(self, name):\n        self.name = name\n        self.route = set()\n        self.cost = 0\n        self.parent = None\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n\"\"\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\\n') == '3100'\nassert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\\n') == '3100'\nassert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\\n') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3100'"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '3100'\nassert solution('4 1') == '2'\nassert solution('4 5') == '3100'\nassert solution('2 1') == '2'\nassert solution('3 5') == '2'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3100\""
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"3300\"\nassert solution(\"4 5 500\") == \"25500\"\nassert solution(\"5 7 4\") == \"14600\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n0 1\n0 2\n''') == '1'\n\nassert solution('''\n5 1\n0 1\n1 2\n0 3\n2 4\n4 5\n3 6\n''') == '4'\n\nassert solution('''\n5 3\n0 1\n1 2\n0 3\n2 4\n4 5\n3 6\n''') == '4'\n\nassert solution('''\n10 2\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == '10'\n\nassert solution('''\n12 1\n0 1\n1 2\n0 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n''') == '12'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 1]) == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '0'\nassert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('1 2') == '0'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\nassert solution('''\n    1 2\n    0 1\n    ''') == '0'\nassert solution('''\n    1 2\n    0 1\n    ''') == '0'\n''')\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n0 1\n0 2\n''') == '0'\nassert solution('''\n2 3\n1 1\n1 2\n''') == '1'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1') == '0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n    3 2\n    0 1\n    0 0\n    '''\n) == '0'\nassert solution(\n    '''\n    4 3\n    0 1\n    0 0\n    0 1\n    '''\n) == '2'\nassert solution(\n    '''\n    8 5\n    0 1\n    0 0\n    0 1\n    0 1\n    0 1\n    0 1\n    0 1\n    '''\n) == '4'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([2, 1]) == '0'\nassert solution([1, 1]) == '1'\nassert solution([2, 2]) == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"8 6\") == \"2\"\nassert solution(\"12 5\") == \"3\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"2 10\") == \"0\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"4 0\") == \"0\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 100') == '100'\nassert solution('1 1') == '1'\nassert solution('1 10') == '10'\n\n--------\nThe first sample has a total of $10$ Sheldon numbers that exist in the given range.\n\nThe second sample has a total of $100$ Sheldon numbers that exist in the given range.\n\nThe third sample has a total of $1$ Sheldon number that exists in the given range.\n\nThe fourth sample has a total of $10$ Sheldon numbers that exist in the given range.\n\n--------\n\"\"\"\nimport math"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10') == '10'\nassert solution('2 2') == '2'\n\nYour submission\n\n-----Input-----\nThe input contains one line, with two space separated integers, $X$ and $Y$.\n\n-----Constraints-----\n\n$0 \\leq X \\leq Y < 2^{63}$\n\n-----Output-----\nThe output contains one line, with one number, representing the number of Sheldon numbers that are greater or equal to $X$ and less or equal to $Y$.\n\n-----Sample Output Explanation-----\nIn the first sample, all numbers between $1$ and $10$ are Sheldon Numbers. In the second sample, $73$ is the only Sheldon number in the given range.\n\n>>> solution('1 10')\n10\n>>> solution('2 2')\n2\n>>> solution('1 2')\n1\n>>> solution('5 5')\n0\n>>> solution('7 9')\n1\n>>> solution('7 10')\n0\n>>> solution('4 2')\n0\n>>> solution('1 2')\n1\n>>> solution('2 2')\n1\n>>> solution('6 4')\n1\n>>> solution('1 2')\n1\n>>> solution('2 1')\n1\n>>> solution('1 2')\n1\n>>> solution('2 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 2')\n1\n>>> solution('2 1')\n1\n>>> solution('3 2')\n1\n>>> solution('1 2')\n1\n>>> solution('4 1')\n1\n>>> solution('5 2')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 2')\n1\n>>> solution('3 3')\n1\n>>> solution('2 2')\n1\n>>> solution('1 1')\n1\n>>> solution('2 1')\n1\n>>> solution('3 1')\n1\n>>> solution('4 1')\n1\n>>> solution('5 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('3 1')\n1\n>>> solution('4 1')\n1\n>>> solution('5 1')\n1\n>>> solution('1 1')\n1\n>>> solution('2 2')\n1\n>>> solution('1 1')\n1\n>>> solution('1 2')\n1\n>>> solution('2 2')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 2')\n1\n>>> solution('2 1')\n1\n>>> solution('2 2')\n1\n>>> solution('1 2')\n1\n>>> solution('2 2')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('3 1')\n1\n>>> solution('1 2')\n1\n>>> solution('2 1')\n1\n>>> solution('3 1')\n1\n>>> solution('3 1')\n1\n>>> solution('3 2')\n1\n>>> solution('4 1')\n1\n>>> solution('1 1')\n1\n>>> solution('3 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('2 2')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n>>> solution('1 1')\n1\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1755 1984\") == \"2\"\nassert solution(\"21 42\") == \"1\"\nassert solution(\"73 37\") == \"0\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 3') == '3'\nassert solution('2 10') == '10'\nassert solution('2 9') == '10'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 10') == \"10\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10') == '10'"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '10'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '10'\nassert solution('3 7') == '2'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n') == '0'\nassert solution('20\\n-100 100\\n0 0\\n-200 0\\n0 -100\\n-100 0\\n-100 100\\n100 100\\n-200 100\\n100 -100\\n-100 -100\\n100 -100\\n-100 -200\\n100 -200\\n-100 200\\n0 200\\n-200 200\\n-100 0\\n0 -200\\n200 0\\n-100 200\\n0 200\\n0 0\\n1000 0\\n0 1000\\n1000 1000\\n') == '0'"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\") == '0'\nassert solution(\"2\") == '2'\nassert solution(\"3\") == '4'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"4\",\"0 0\",\"1000 0\",\"0 1000\",\"1000 1000\"]) == \"0\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '0'\n\nassert solution('''\n8\n0 0\n1000 0\n0 1000\n1000 1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n''') == '0'\n\nassert solution('''\n100\n0 0\n1000 0\n0 1000\n1000 1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000 -1000\n0 -1000\n1000"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n-1000 -1000\n1000 -1000\n0 1000\n1000 1000\n0 -1000\nSample Input:\n6\n0 0\n1000 0\n0 1000\n1000 1000\n0 -2000\nSample Output:\n0\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1000 1000\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n0 0\n100 0\n0 100\n100 100\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n6\n0 0\n1000 0\n0 1000\n1000 1000\n0 0\n0 1000\n1000 1000\n0 0\n'''\n) == '0'\n\nassert solution(\n'''\n5\n-100 -100\n-100 0\n-100 100\n100 0\n100 100\n'''\n) == '1'\n\nassert solution(\n'''\n4\n-100 -100\n-100 0\n-100 100\n100 0\n100 100\n'''\n) == '0'\n\nassert solution(\n'''\n2\n0 0\n0 1\n'''\n) == '1'\n\nassert solution(\n'''\n4\n0 0\n0 1\n0 2\n0 3\n'''\n) == '2'"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 0\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '0'\nassert solution('''\n4\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '1'\nassert solution('''\n1\n100\n''') == '0'\nassert solution('''\n1\n50\n''') == '0'\nassert solution('''\n1\n250\n''') == '1'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 0\n100 0\n0 100''') == '0'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\n0 0 0.5') == '0.500000000 1.000000000'\n\"\"\"\n\nn = int(input())\nm = int(input())\n\nP = {}\n\nfor i in range(m):\n    x = input()\n    a, b, p = map(float, x.split())\n    P[(a,b)] = p\n\nfor i in range(n):\n    p = 0\n    for j in range(n):\n        if i!= j:\n            p += P.get((i,j), 0)\n    print(p, end=' ')\nprint()"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.5 0.5'\nassert solution('2 1') == '0.500000000 1.000000000'\nassert solution('3 1') == '0.500000000 1.000000000'\nassert solution('3 2') == '0.500000000 1.000000000'\nassert solution('5 3') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"5 10\\n0 0 0.5 0.25 0.25 0.5 1.0\\n0 1 1.0\\n0.5 1.0\\n0.25 0.75 0.25 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"100 10\\n0 0 0.5 0.25 0.25 0.5 1.0\\n0 1 1.0\\n0.5 1.0\\n0.25 0.75 0.25 0.5\") == \"0.0000000000000001 1.0000000000000001\""
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '0.500000000 1.000000000', 'Wrong solution'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"2 1000\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"2 5\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"2 5\\n0 1 0.5\") == \"0.500000000 1.000000000\""
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 1 0.5\n2 1 0.5\n2 2 0.5\n\"\"\") == \"\"\"\n0.5 0.5 1.0\n\"\"\".strip()\n\nassert solution(\"\"\"\n2\n3 1 0.5\n2 1 0.5\n2 2 0.5\n\"\"\") == \"\"\"\n0.5 0.5 -1.0\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n0 1 0.5\n\"\"\") == \"\"\"\n-1.0\n\"\"\".strip()"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000'\n\nassert solution('''\n2 3\n0 1 0.5\n0 1 0.5\n''') == '0.800000000 0.800000000'\n\nassert solution('''\n2 4\n0 1 0.5 0.5 0.3\n0 1 0.6 0.5 0.4\n''') == '0.400000000 0.800000000'\n\nassert solution('''\n2 5\n0 1 0.5 0.5 0.5 0.3\n0 1 0.5 0.5 0.6 0.4\n''') == '0.400000000 0.800000000'\n\nassert solution('''\n2 10\n0 1 0.5 0.5 0.5 0.5 0.3 0.5 0.6 0.4 0.5 0.3 0.5\n0 1 0.5 0.5 0.5 0.6 0.4 0.5 0.3 0.5 0.3 0.5\n''') == '0.500000000 0.800000000'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000'\nassert solution('3 1\\n0 0 0.5\\n0 1 0.5\\n') == '0.500000000 1.000000000'\nassert solution('2 2\\n0 0 0.5\\n0 1 0.5\\n') == '-1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000'\nassert solution('''\n2 1\n0 1 0.5\n0 2 0.5\n''') == '0.500000000 1.000000000'\nassert solution('''\n2 3\n0 1 1\n0 2 0\n1 0 1\n0 1 0\n''') == '1.0 0.00000000 1.0 1.00000000'\nassert solution('''\n2 3\n0 1 1\n0 2 0\n1 0 1\n0 1 0\n''') == '1.0 1.00000000 1.0 1.00000000'\nassert solution('''\n2 3\n0 1 1\n0 2 0\n1 0 1\n0 1 0\n''') == '1.0 1.00000000 1.0 1.00000000'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\nassert solution('''\n3\n1 1\n4 1\n1 5\n''') == '5'\nassert solution('''\n5\n1 2\n2 2\n3 2\n2 3\n1 5\n''') == '5'\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\n\"\"\""
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10''') == '7'\nassert solution('''5\n1 1\n2 1\n3 2\n4 3\n5 4''') == '5'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '7'\nassert solution('1 1') == '1'\nassert solution('4 1') == '1'\nassert solution('1 5') == '1'\nassert solution('10 10') == '10'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10\") == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '7'\nassert solution('4 1') == '4'\nassert solution('1 5') == '3'\nassert solution('10 10') == '9'\nassert solution('10 8') == '11'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10\n10 10\n10 8\n7 10\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n5\n2 2\n2 2\n2 4\n2 6\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1\n4 1\n1 5\n10 10\n10 8''') == '7'\n\nassert solution('''1\n1\n10 10''') == '10'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nb a\n3-b 5-b\n6-a 2-b\n2\nab\nba\n0\n''') == 'ab'\n\nassert solution('''\nb a\n3-b 5-b\n6-a 2-b\n2\nba\nb a\n0\n''') == 'ba'\n\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\nab\nba\n0\n''') == 'ab'\n\nassert solution('''\nb a\n3-b 5-b\n6-a 2-b\n2\nba\nab\n0\n''') == 'ba'\n\nassert solution('''\nb a\n3-b 5-b\n6-a 2-b\n2\na b\n0\n''') == 'b a'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\na\n2-a\n3-a\n''') == 'a'\nassert solution('''\n2\na\nb\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\nSample Input:\n2\na b\n3-b 5-b\n6-a 2-b\n2\nba\nb\n1\naba\nb\n0\nSample Output:\n9-b\n8-a\n''') == 'b'\nassert solution('''\n1\na\n2-a\n3-a\n''') == 'a'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\\n\") == \"\"\nassert solution(\"2\\na\\n\") == \"9-b\"\nassert solution(\"2\\na\\nb\\n\") == \"8-a\"\nassert solution(\"2\\na\\nb\\na\\n\") == \"8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '9-b'\n\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '8-a'\n\nassert solution('''\n3\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\n\nassert solution('''\n2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '8-a'\n\nassert solution('''\n3\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    2\n    a b\n    3-b 5-b\n    6-a 2-b\n    2\n    aba\n    bba\n    0\n    ''') == '9-b'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\na b') == '9-b'\nassert solution('3-b 5-b\\na 6-b\\na b\\nb-a') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2\\naa\\naba') == '8-a'\nassert solution('1\\n2') == '1'\nassert solution('0\\n') == '0'\nassert solution('2\\naba\\naca\\nacb\\nbac') == '8-a'\nassert solution('1\\n2') == '1'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '9-b'\nassert solution('''\n0\na\n''') == 'a'\nassert solution('''\n1\na\nb\n''') == 'a'\nassert solution('''\n2\na\nb\n''') == 'b'\n''') == '0'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n2') == '9-b'\nassert solution('1\\na') == '5-a'\nassert solution('1\\naba') == '6-a'\nassert solution('0') == '5-b'\nassert solution('1') == '5-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'b'\nassert solution('3') == 'a'\nassert solution('4') == 'b'\nassert solution('5') == 'a'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\necho\n1\nechoecho\n\"\"\") == \"3246R3246\"\nassert solution(\"\"\"\n10\naaszpzit\nbwffpjqec\ncfbqcqstc\ndcthpgdfh\ngfttmtqb\nhzznqbwg\nhcdasawqr\nhzzqrscq\nilrggzfbt\nkpqhdpwfc\nmzjnmhvwc\nnfqzwsmkc\nndwqhdkpc\nngqrdtqdz\npjdsbqlmn\nqwertyuiop\nquzcvbxkx\nrqphcgjxk\nsxzwjzpdq\n\"\"\") == \"\"\"123456R12346789R123467890R12345678901234567890R12345678901234567890\"\"\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\nis\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\necho\n3\nechoecho\n''') == '3246R3246'\n\nassert solution('''\n4\necho\n5\nechoecho\n''') == '5246U5224R5246'\n\nassert solution('''\n5\necho\n6\nechoecho\n''') == '5246U5224R5246'\n\nassert solution('''\n9\nhello\nworld\nhelloworld\nhelloworld\n
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == ''\nassert solution('2') == '23'\nassert solution('3') == '432'\nassert solution('4') == '4321'\nassert solution('5') == '54321'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\nabcdef\n1\nghijkl\n1\nmno\n2\npqrst\n1\nuvwxyz''') == '3246R3246'\nassert solution('''1\n10010\n1\nabcdef\n1\nghijkl\n1\nmno\n2\npqrst\n1\nuvwxyz''') == '1R1R3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0\\n0\\n0\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n') == '1'\nassert solution('1\\n4\\n4\\n4\\n') == '2'\nassert solution('1\\n100\\n100\\n100\\n') == '101'\nassert solution('1\\n10000\\n10000\\n10000\\n') == '10001'"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n1') == '3246'\nassert solution('1\\n2\\n3\\n4') == '3246D1R3246'\nassert solution('1\\n2\\n3\\n1') == '3246U3246'"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'U2'\nassert solution('4') == 'U2'\nassert solution('5') == 'U4'\nassert solution('20') == 'U2'\nassert solution('51') == 'U2'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3246\"\nassert solution(\"1\") == \"3246\"\nassert solution(\"1\") == \"3246\"\nassert solution(\"1\") == \"3246\"\nassert solution(\"1\") == \"3246\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246'\nassert solution('3') == '3246'\nassert solution('4') == '3246'\nassert solution('5') == '3246'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('3 1') == 'NO'\nassert solution('3 4') == 'YES'\nassert solution('5 5') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3\\n'\nassert solution('4 4') == 'YES\\n1 1\\n1 3\\n1 4\\n'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == 'YES'\nassert solution('3 1') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('4 3') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES\\n2 1\\n1 3'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3\\n'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'YES\\n1 2\\n1 3\\n'\nprint(solution('3 1'))\n\n\nInput:\n5 1\nOutput:\nYES\n1 2\n1 3\n1 4\n1 5"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == \"YES\\n1 2\\n1 3\"\nassert solution(\"3 1\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n\") == \"YES\\n1 2\\n1 3\"\n\"\"\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'NO'\nassert solution('5 1') == 'YES'\nassert solution('5 2') == 'YES'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9') == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n300003\\n333333\\n') == '176'\nassert solution('11\\n2\\n5 4\\n2 3\\n3 4\\n4 5\\n2 3\\n3 4\\n4 5\\n2 3\\n3 4\\n4 5\\n') == '243'\nassert solution('11\\n3\\n5 4\\n2 3\\n3 4\\n4 5\\n2 3\\n3 4\\n4 5\\n2 3\\n3 4\\n4 5\\n') == '243'\nassert solution('3\\n2\\n5 4\\n2 3\\n3 4\\n4 5\\n2 3\\n3 4\\n4 5\\n2 3\\n3 4\\n4 5\\n') == '93'\nassert solution('8\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n300003\\n333333\\n') == '80'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '8'\nassert solution('7') == '7'\nassert solution('13') == '17'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == \"0\"\nassert solution('4') == \"0\"\nassert solution('9') == \"0\"\nassert solution('6') == \"0\"\nassert solution('1') == \"0\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n\"\n    \"3 2\\n\"\n    \"15 1\\n\"\n    \"4 3\\n\"\n    \"1 2\"\n) == \"74\"\n\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9') == '176'\nassert solution('1') == '1'\nassert solution('6 6') == '7'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"9\") == \"176\""
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('9') == '176'\nassert solution('1') == '17'\nassert solution('6 6') == '116'\nassert solution('333333') == '330'\nassert solution('300003') == '339'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'\nassert solution('''\n10\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '408'\nassert solution('''\n8\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '393'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == '012'\nassert solution('10') == '10'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('9') == '9'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"012\"\nassert solution(\"123\") == \"012\"\nassert solution(\"479001600\") == \"479001600\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '123'\nassert solution('2') == '12'\nassert solution('123') == '123'\nassert solution('9') == '9'\nassert solution('987654321') == '988'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"12\"\nassert solution(\"120\") == \"120\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"12345\") == \"12345\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"123\") == \"123\"\nassert solution(\"1234\") == \"1234\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"016\""
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"120\") == \"120\"\nassert solution(\"15\") == \"15\"\nassert solution(\"9\") == \"9\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"12345\") == \"123\"\nassert solution(\"123789\") == \"12\"\nassert solution(\"123789\") == \"12\"\nassert solution(\"123789\") == \"12\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1000\") == \"012\"\nassert solution(\"123456789\") == \"012\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12') == '12'\nassert solution('4') == '4'\nassert solution('42') == '42'\nassert solution('1200') == '6'\nassert solution('1234') == '4'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"?\", 'Test 1 Failed'\nassert solution(\"4 1\") == \"480\", 'Test 2 Failed'\nassert solution(\"2 3\") == \"?\", 'Test 3 Failed'\nassert solution(\"5 4\") == \"?\", 'Test 4 Failed'"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"3\n(((\n-1\n8\n1\n((\n-1\n4\n1\n1\n-1\n3\n1\n((\n-1\n5\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n-1\n3\n1\n1\n-1\n4\n1\n1\n1\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 1\n((()\n480\n617\n-570\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(480\n(617\n-570\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(617\n-570\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(617\n-570\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520\n928\n\"\"\") == \"\"\"480\n?\n\"\"\",\n\"\"\"\n4 1\n((()\n(((480\n(597\n-520"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 1\n((())\n480\n617\n-570\n928''') == '480'\n\nassert solution('''4 1\n(((())\n480\n617\n-570\n928\nSample Output:\n480\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1\n((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n((()\n480\n617\n-570\n928\n''') == '480'\nassert solution('''4 1\n((()\n480\n-617\n-570\n928\n''') == '-1057'\nassert solution('''4 1\n((()\n480\n-617\n-570\n928\n''') == '480'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '?', f\"solution did not print '?', but printed: {solution()}\"\n\nSample Input 2:\n3 1\n(())\n375\nSample Output 2:\n375\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '?', solution('3 1')\nassert solution('4 1') == '?', solution('4 1')\nassert solution('5 1') == '?', solution('5 1')\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1\\n((()\\n480\\n') == '480'\n\nassert solution('4 2\\n(((())))\\n480\\n-42') == '480'\n\nassert solution('4 1\\n((())))\\n480\\n-42') == '??'\n\nassert solution('5 2\\n(())((()())))\\n480\\n-42\\n-320') == '-320'\n\nassert solution('4 1\\n((()\\n480\\n') == '480'"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n((()\\n480\\n617\\n-570\\n928\\n\") == \"480\""
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2\\n(((3\\n') == '?', '3 2')\nassert solution('3 2\\n(()\\n') == '?', '3 2')\nassert solution('2\\n(())\\n') == '?', '2')\nassert solution('3\\n())(\\n') == '?', '3')\nassert solution('3\\n())()\\n') == '?', '3')\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '''\n2 4\n5 6\n7 8 9 10 11 12 13\n'''\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(map(str, [[2,2,4],[3,1,3,5],[2,2,4],[3,1,3,6],[2,2,6],[2,4,5],[2,8,9],[2,7,9],[2,7,8],[2,11,13],[2,10,12],[2,11,13],[2,10,12],[2,14,15]]))) == '2 4 5 6 7 8 9 10 11 12 13 14 15'\nprint(solution('\\n'.join(map(str, [[2,2,4],[3,1,3,5],[2,2,4],[3,1,3,6],[2,2,6],[2,4,5],[2,8,9],[2,7,9],[2,7,8],[2,11,13],[2,10,12],[2,11,13],[2,10,12],[2,14,15]]))))\n\n\n\n\n\nimport unittest\nclass TestProgram(unittest.TestCase):\n    def test_case_00(self):\n        self.assertEqual(solution('\\n'.join(map(str, [[2,2,4],[3,1,3,5],[2,2,4],[3,1,3,6],[2,2,6],[2,4,5],[2,8,9],[2,7,9],[2,7,8],[2,11,13],[2,10,12],[2,11,13],[2,10,12],[2,14,15]]))), '2 4 5 6 7 8 9 10 11 12 13 14 15')\n        \n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '2 3 4 5 6 7 8 9 10'\nassert solution('10') == '2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12') == '5 6\\n7 8 9 10 11 12 13'\nassert solution('13\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12') == '5 6'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '5 6\\n7 8 9 10 11 12 13\\n'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 4\") == \"2 4\"\nassert solution(\"3 1 3 5\") == \"3 1 3 5\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\\n\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n') == '1 2 4'\nassert solution('2\\n2\\n4\\n') == 'None'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4 5 6 7 8 9 10 11 12 13'\n\nassert solution('''\n13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4 5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2 4\\n5 6\\n7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"3 3\\n2 1 2\\n4 1 2\\n3 1 2\\n2 1 2\\n2 2 2\\n3 3 3\"\n                 ) == \"8 5 1\"\nassert solution(\"3 2\\n3 1 2\\n2 1 2\\n3 1 2\\n2 1 2\\n3 2 2\\n3 3 3\") == \"7 8 9\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"35 39 36 27 29\"\n\nSample Input:\n3 4\n1 1 3\n1 1 3\n1 3 5\nSample Output:\n1"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 4\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\") == \"\"\"35 39 36 27 29\"\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\""
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n\"\"\"\n) == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\n\n---Input---\n10 6\n3 3 2\n4 1 2\n4 1 1\n3 1 4\n1 1 2\n3 2 2\n1 1 1\n2 1 2\n4 3 2\n3 4 1\n2 1 1\n2 2 1\n1 1 1\n\n---Output---\n12 14 26 28 40 43\n\n---Explanation---\nThe first line contains $N$ and $M$, respectively, $N > 0$ and $M > 0$. The next $M$ lines contain the descriptions of the tunnels, in which each line contains three integers $A_ i$, $B_ i$ ($1\\leq A_ i, B_ i \\leq N$; $A_ i \\neq B_ i$) and $L_ i$ ($1 \\leq L_ i \\leq 10^9$), respectively, denoting that the $i^\\text {th}$ tunnel connects chambers $A_ i$ and $B_ i$, and has a length of $L_ i$ meters.\n\nWe are interested in the danger level of each chamber. The danger level of a chamber can be computed as follows.\n\nIf we assume that every tunnel joins at most one chamber, and the other tunnels connect to only one chamber, then the danger level of the chamber $i$ is the sum of the times, in seconds, required to travel from this chamber to every other chamber, assuming that one always takes the shortest path possible.\n\nFrom these two facts, we can compute the danger level of each chamber as follows:\n\n$$\n    \\begin{cases}\n        \\sum_{j \\neq i} \\frac{\\log_2(L_j)}{10^9 + 7} & \\text{if $L_i$ is at least 1}\\\\\\\\\n        \\max_{j \\neq i} \\sum_{k \\neq j} \\frac{\\log_2(L_k)}{10^9 + 7} & \\text{if $L_i$ is at least 2}\\\\\n        \\max_{j \\neq i} \\sum_{k \\neq j} \\frac{\\log_2(L_k)}{10^9 + 7} & \\text{if $L_i$ is at least 3}\\\\\n    \\end{cases}\n$$\n\nThe danger level of each chamber is then represented as the remainder of the division of the danger level of the first chamber by $10^9 + 7$.\n\nFor example, if the danger level of the first chamber is $23$, then the danger level of the second chamber is $13$.\n\nSo, the third line of the input contains three integers $A_ 1, A_ 2, A_ 3$, which correspond to the danger levels of the chambers $A_ 1$, $A_ 2$, and $A_ 3$, respectively. The danger levels are given in order, so that the $i^{\\text{th}}$ of the three integers corresponds to the danger level of the $i^\\text{th}$ chamber.\n\nTo compute the danger level of each chamber, we can use the above formula and the facts that each chamber must be at least 1 meter from the other chamber and at most 2 meters from the other chamber. Therefore, for each chamber, we can compute the danger level as follows:\n\n$$\n    \\begin{cases}\n        \\max_{j \\neq i} \\sum_{k \\neq j} \\log_2(L_k) & \\text{if $L_i$ is at least 1}\\\\\\\\\n        \\max_{j \\neq i} \\sum_{k \\neq j} \\log_2(L_k) & \\text{if $L_i$ is at least 2}\\\\\n        \\max_{j \\neq i} \\sum_{k \\neq j} \\log_2(L_k) & \\text{if $L_i$ is at least 3}\\\\\n    \\end{cases}\n$$\n\nThe danger level of each chamber is then the remainder of dividing the first danger level by $10^9 + 7$.\n\nFind the danger level of each chamber.\n\"\"\"\n\nimport math"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"10 10\\n1 2 3\\n2 4 5\\n3 6 7\\n5 8 9\\n8 9 10\\n10 2 2\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"18 94 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\"\n\n\"\"\"\nimport sys\nsys.stdin = open(\"input.txt\")\nn,m = list(map(int,input().split()))\nl = []\nfor i in range(m):\n    a,b,c = map(int,input().split())\n    l.append([a-1,b-1,c])"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '672'\nassert solution('1 2') == '3'\n\nassert solution('2 3') == '672'\nassert solution('1 2') == '3'\n\nassert solution('2 3') == '672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n') == '0 672'\nassert solution('1 2\\n') == '0 1'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\n\nassert solution('''\n5 3\n2 4 3 2 1\n''') == '1 612'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 3, 1]) == \"0 672\"\nassert solution([3, 5, 1]) == \"0 672\"\nassert solution([6, 11, 1]) == \"0 672\"\nassert solution([3, 3, 2]) == \"1 9672\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '672'\nassert solution('3 3\\n1 2 1') == '0 672'\nassert solution('5 3\\n2 2 2 4 1') == '0 7128'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n3 2 1') == '672'\nassert solution('2 4\\n4 2 1') == '0'\nassert solution('2 2\\n1 2 1') == '0'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '0 672'\nassert solution('3 2 1') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '0 672'\nassert solution('3 3 1') == '0 3686'\nassert solution('3 3 2') == '0 672'\nassert solution('2 1') == '0 562'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '0 672'\nassert solution('3 3') == '0 672'\nassert solution('1 3') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '672'\nassert solution('''\n5 5\n2 3 5 1\n''') == '12'\nassert solution('''\n1 1\n1 1\n''') == '1'\n\"\"\"\nThe idea is to create a dictionary which will store the count of all possible combinations of elements.\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n\"\"\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\nassert solution(\"10 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n9 20 90\\n8 10 20\\n7 10 30\\n6 10 40\\n5 10 50\\n4 10 60\\n3 10 80\\n2 10 100\") == \"Impossible\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == \"2.500000\"\n\nassert solution('''\n4 5 100\n0 10 10\n1 10 5\n2 10 8\n3 20 35\n2 40 50\n''') == \"Impossible\"\n\nassert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n3 40 50\n''') == \"3.0001000\"\n\nassert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n3 40 50\n''') == \"2.500000\"\n\nassert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n3 40 50\n''') == \"2.500000\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.5000000\"\nassert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n3 50 10\\n2 50 10\\n1 10 5\\n3 50 10\\n4 5 100\") == \"Impossible\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 100') == '2.5000000'\nassert solution('4 5 10') == 'Impossible'\nassert solution('4 5 20') == '3.0'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == \"2.500000\"\nassert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == \"Impossible\"\nassert solution('10 10 10 10\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n0 0 0\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n0 0 0\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n0 0 0\\n1 1 1 1\\n1 1 1 1\\n0 0 0\\n0 0 0\\n1 1 1 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == '2.500000'\nassert solution('''\n10 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == 'Impossible'\nassert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == 'Impossible'\n'''\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '3\\n5 3 4') == '3'\nassert solution(\n    '4\\n1 3 1 2') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 4') == '3'\nassert solution('3\\n5 3 4') == '4'\nassert solution('5\\n3 4') == '4'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\"\nassert solution(\"3\\n4 4 4\") == \"2\"\nassert solution(\"3\\n8 8 8\") == \"4\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '''5 3 4\n5 3 4\n3 3'''\n) == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('6') == '3'\nassert solution('123') == '6'\nassert solution('123 45') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('5 3 4') == '3'\nassert solution('5 5 5 5 5') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '3'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n2\n2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '3'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '2'\nassert solution('3 5 2') == '10'\nassert solution('5 1 5') == '8'\n\n--Python code--\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"5 9 7\") == \"12\"\nassert solution(\"10 11 7\") == \"153\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\\n\") == '2'\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == 2\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 3') == '1'\nassert solution('2 2 1') == '4'\nassert solution('10 10 5') == '19'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '2'\nassert solution('2 5 8') == '31'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1\\n') == '2'\nassert solution('2 2 1\\n') == '2'\nassert solution('2 2 1\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('3 4 4') == '16'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n\n\"\"\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 1''') == '2'\nassert solution('''2 2 2''') == '5'\nassert solution('''3 2 1''') == '3'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nassert solution(\"2 4 6\") == \"14\"\nassert solution(\"10 2 4 6\") == \"6\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 5') == '7', 'SAMPLE TEST CASE FAILED'\nassert solution('2 10 3') == '17', 'SAMPLE TEST CASE FAILED'\n'''\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 7') == '6'\nassert solution('4 10') == '11'\n\nfrom itertools import accumulate, product\nn = int(input())\na = list(map(int, input().split()))\nres = 0\nfor i in range(n):\n    res ^= a[i]\n\nfor i in range(n):\n    res = res ^ a[i]\n    a[i] = 0\nprint(res)\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('3 5') == '7'\nassert solution('5') == '7'\nassert solution('3') == '7'\nassert solution('1') == '7'\n\nYour Task:\nYou are required to complete the function solution() which takes a string as a parameter and returns the largest integer in that subset.\n\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(N)\n'''\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 5\n''') == '7'\n\nassert solution('''\n5\n1 3 5\n''') == '0'\n\nassert solution('''\n12\n1 3 5\n''') == '8'"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 4 5') == '3'\nassert solution('10 100') == '1010'\nassert solution('9 999 999') == '10011'\nassert solution('9 1000') == '10011'\n\n
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3 5\") == \"7\"\nassert solution(\"2 1 3 5\") == \"5\"\nassert solution(\"2 1 2 3 5\") == \"5\"\nassert solution(\"3 3 3 3 3 3\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\n1 2\"\"\") == \"3\"\nassert solution(\"\"\"2\n-1 -2\"\"\") == \"1\"\nassert solution(\"\"\"3\n2\n3\n2\"\"\") == \"1\"\nassert solution(\"\"\"3\n-1\n2\n3\"\"\") == \"3\"\nprint(\"solution() is working.\")"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 3') == '7'\nassert solution('3') == '7'\nassert solution('3 2 1') == '7'\nassert solution('5') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"3\\n2\\n\" +\n\"peter albus 2 cs 1\\n\" +\n\"jane tyson 2 cs 1\") == \"peter albus cs\"\nassert solution(\"2\\n\" +\n\"mary rhinocerous 2 js 1\\n\" +\n\"mike rhinocerous 2 js 2\") == \"mary rhinocerous js\"\nassert solution(\"3\\n\" +\n\"charlie watson 3 js 2\\n\" +\n\"jack watson 3 js 1\\n\" +\n\"kate watson 3 js 2\") == \"charlie watson js\"\nassert solution(\"4\\n\" +\n\"mary rhinocerous 2 js 1\\n\" +\n\"peter albus 2 cs 1\\n\" +\n\"john rhinocerous 2 js 2\") == \"mary rhinocerous js\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"fred jetsons\\njohn jets\\nruth rockets\""
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == \"john jets\"\nassert solution('''\n3\njohn rhinocerous 2 jetsons\nmary rhinocerous 2 jetsons\nruth platypus 1 rockets\n''') == \"ruth platypus 1 rockets\"\nassert solution('''\n2\njohn rhinocerous 2 jetsons\nmary rhinocerous 2 jetsons\n''') == \"Impossible\"\n''')\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"1\") == \"Impossible\"\nassert solution(\"2\") == \"fred jetsons\"\nassert solution(\"3\") == \"john jets\"\nassert solution(\"4\") == \"ruth rockets\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"Impossible.\"\nassert solution(\"1\") == \"john\"\nassert solution(\"2\") == \"ruth\"\nassert solution(\"3\") == \"john\"\nassert solution(\"4\") == \"mary\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\"2\", \"4\", \"fred dinosaur 2 jets jetsons\", \"john rhinocerous 2 jets rockets\", \"mary rhinocerous 2 jetsons rockets\", \"ruth platypus 1 rockets\"]) == \"fred jetsons\"\nassert solution([\"2\", \"4\", \"john rhinocerous 2 jetsons\", \"mary rhinocerous 2 jetsons rockets\", \"ruth platypus 1 rockets\"]) == \"john jets\"\nassert solution([\"2\", \"4\", \"john rhinocerous 2 jetsons\", \"ruth platypus 1 rockets\", \"mary rhinocerous 2 jetsons rockets\"]) == \"john jets\"\nassert solution([\"2\", \"4\", \"ruth platypus 1 rockets\", \"john rhinocerous 2 jetsons\", \"mary rhinocerous 2 jetsons rockets\"]) == \"john jets\"\nassert solution([\"2\", \"4\", \"ruth platypus 1 rockets\", \"mary rhinocerous 2 jetsons\", \"john rhinocerous 2 jetsons\"]) == \"mary jets\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"john\"\nassert solution(\"6\") == \"ruth\""
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rocks\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'fred jetsons\\njohn jets\\nruth rockets\\n'\nassert solution('''3\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2\n''') == 'fred jetsons\\njohn jets\\n'\nassert solution('''4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n''') == 'fred jetsons\\njohn jets\\nmary jets\\nruth rockets\\n'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"Impossible.\"\nassert solution(\"2\") == \"john rhinocerous 2 jetsons rockets\"\nassert solution(\"4\") == \"ruth platypus 1 rockets\"\n\n[1] and []\n[2] and []\n[1, 2] and []\n[1, 1] and []\n[2, 1] and []\n[1, 2, 1] and []\n[1, 2, 2] and []\n[2, 1, 2] and []\n[1, 2, 1, 1] and []\n[1, 2, 1, 2] and []\n[2, 1, 2, 1] and []\n[1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2] and []\n[1, 2, 1, 2, 1, 2] and []\n[1, 2, 1, 2, 2, 1] and []\n[2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 2, 1, 1] and []\n[2, 1, 2, 1, 2, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1] and []\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2] and []\n[2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"Impossible.\"\nassert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"john jets\\nruth rockets\"\nassert solution(\"2\\n6\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rocks\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"john jets\\nmary rhinocerous rockets\\nruth rocks\"\nassert solution(\"2\\n6\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rocks\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"john jets\\nmary rhinocerous rockets\\nruth rocks\"\nassert solution(\"2\\n8\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rocks\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"john jets\\nmary rhinocerous rockets\\nruth rocks\"\n\n\"\"\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 2\\n-1 -2\\n') == '1 2 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"1\\n2\") == \"1 2\"\nassert solution(\"1\\n2 3\") == \"1 2 3\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4 3\\n-10 9\\n-2 3') == '1 2 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\n\nassert solution('''\n4\n5 5\n-10 -5\n-2 -3\n1 1\n''') == '1 1 1'\n\nassert solution('''\n6\n2 1\n-1 -1\n-1 -1\n1 1\n1 1\n1 1\n''') == '1 1 1'\n\nassert solution('''\n5\n1 1\n-2 -2\n-1 -1\n1 1\n1 1\n''') == '1 1 1 1 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n3 3\n-10 9\n-2 3\n''') == '1 2 1'\nassert solution('''\n1\n2\n''') == '2'\nassert solution('''\n2\n1\n''') == '1'\n''')\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\nassert solution('''\n3\n-1 5\n-3 2\n-2 -1\n''') == '1 1 0'\nassert solution('''\n7\n2 5\n-2 -2\n-2 -1\n1 2\n-1 -2\n2 3\n-1 -2\n''') == '4 4 1 1 1 1 1'\nassert solution('''\n10\n-3 9\n-3 -1\n-3 -1\n-1 -3\n-1 -3\n-1 -3\n-1 -3\n-1 -3\n-1 -3\n-1 -3\n''') == '1 2 1 1 2 1 1 2 1 1 2 1 1 2 1 1'\nassert solution('''\n10\n-2 -1\n-2 -1\n-1 -2\n-1 -2\n-1 -2\n-1 -2\n-1 -2\n-1 -2\n-1 -2\n-1 -2\n''') == '3 2 1 1 2 2 1 1 2 1 1'\n'''\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2 1'\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nassert solution('''\n7\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 7 7\n''') == '5.625'\nassert solution('''\n1\n5 1 10\n3 2 3\n5 1 4\n6 10 10\n7 7 7\n''') == '4.0'\nassert solution('''\n7\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 7 7\n4 4 4\n''') == '6.75'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([4, 1, 7, 3, 2, 3, 5, 1, 4, 6, 10, 10]) == \"2.125\"\nassert solution([1, 1, 7, 3, 2, 3, 5, 1, 4, 6, 10, 10]) == \"2.125\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n\"\"\") == \"2.125\"\nassert solution(\"\"\"\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n\"\"\") == \"2.125\"\nassert solution(\"\"\"\n6\n1 2 3\n2 4 5\n3 5 6\n5 8 9\n7 10 11\n9 12 13\n10 13 14\n\"\"\") == \"6.296875\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([4, 1, 7]) == \"2.125\"\nassert solution([3, 2, 3]) == \"2.0\"\nassert solution([5, 1, 4]) == \"1.75\"\nassert solution([6, 10, 10]) == \"1.25\"\nassert solution([1, 1, 7]) == \"0.625\"\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'\nassert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'\nassert solution('3\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'\nassert solution('2\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'\nassert solution('10\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 5') == '2.125'\nassert solution('2 3 3') == '1.667'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'First'\n\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Second'\n\nassert solution('''\n8\n1 1 10\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n2 2 3\n2 3 2\n2 4 2\n3 3 3\n3 4 3\n3 5 3\n4 4 4\n4 5 3\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n''') == '3.0625', 'Third'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.*.c\") == [\"main.c\"]\nassert solution(\"*.*.a\") == [\"a.out\"]\nassert solution(\"*.c\") == []\nassert solution(\"*.b\") == []\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\n\n'''\n\nP = input()\nN = int(input())\nresult = []\nfor i in range(N):\n    tmp = input()\n    if P == \"*\":\n        tmp = ''.join(['.' if '*' in j else j for j in tmp])\n        tmp = tmp.strip('.')\n        if tmp == \"\":\n            result.append(tmp)\n    else:\n        tmp = ''.join(['.' if '*' in j or j.startswith('.') else j for j in tmp])\n        tmp = tmp.strip('.')\n        if tmp == \"\":\n            result.append(tmp)\n\nprint(*result, sep='\\n')\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n\nSample Input:\n*.*\n5\na.b\nb.c\nz.d\ne.f\ng.h\nSample Output:\na.b\nb.c\nz.d\ne.f\ng.h\n\"\"\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\", \"def\", \"solution\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.c\") == [\"main.c\"]\nassert solution(\"*.c\") == [\"main.c\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n'''\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('*.*') == '*.*', 'Test 1'\nassert solution('a.out') == 'a.out', 'Test 2'\nassert solution('yacc') == 'yacc', 'Test 3'\nassert solution('*.') == '*.', 'Test 4'\nassert solution('a.out.') == 'a.out.', 'Test 5'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) =='main.c, a.out'\n\"\"\"\n\nfrom collections import deque\n\n__author__ = 'xue'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\nassert solution('**.c') == ['readme','main.c']\n\"\"\"\nimport sys\nimport os\n\n__author__ = \"bovenson\"\n__email__ = \"sbovenson@gmail.com\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('main.c') =='main.c'\nassert solution('a.out') == 'a.out'\nassert solution('README.md') == 'README.md'\nassert solution('*') == '*'\nassert solution('readme') =='readme'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\nassert solution('0.500000\\n0.500000\\n') == '0.500000'\nassert solution('0.1\\n0.1\\n') == '0.10000000000000001'\nassert solution('0.1\\n0.1\\n') == '0.10000000000000001'\nassert solution('0.1\\n0.1\\n') == '0.10000000000000001'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\nassert solution('0.1\\n0.500000\\n') == '0.5'"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"0.500000\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n0.500000\") == \"0.500000\"\nassert solution(\"5 6\\n0.500000 0.500000 0.500000 0.500000 0.500000 0.500000\") == \"0.500000\"\nassert solution(\"1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5\") == \"1.5\"\nassert solution(\"5 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6 6.6\") == \"6.6\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0.500000'"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0.8333333\\n1.333333\\n0.8333333') == '0.966767'\nassert solution('4\\n0.333\\n0.333\\n0.333\\n0.333') == '1.0'\nassert solution('5\\n0.1\\n0.1\\n0.1\\n0.1\\n0.1') == '0.9'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0') == '0.500000', \"Square brackets ( ) and () should be removed\"\nassert solution('1 1') == '0.500000', \"Two spaces between digits\"\nassert solution('0.5 1') == '0.500000', \"One space between digits\"\nassert solution('0.5') == '0.500000', \"One decimal place after the decimal point\"\nassert solution('0.5 ') == '0.500000', \"One space after the decimal point\""
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0.500000\"\nassert solution(\"2 4\") == \"0.2500\"\nassert solution(\"0.5 0.7\") == \"0.2667\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.500000') == '0.500000'\nassert solution('0.5') == '0.500000'\nassert solution('0.500') == '0.500000'\nassert solution('0.999') == '0.999'\nassert solution('0.123') == '0.123'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n0.500000\") == \"0.500000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\n\"\"\"\n\nx = float(stdin)\n\np = float(input())\n\nx = x - (x * p)\n\nprint(x)"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"12 49.9\") == \"11.9\"\nassert solution(\"29 49.9\") == \"26.9\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"1 98.5\") == \"0.0\"\nassert solution(\"1 98.5\") == \"0.0\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 49.9') == '0.0'\nprint(solution('0 49.9'))\n\n\"\"\"\nimport math\n\nrefund = float(input())\nprobability = float(input())\n\nwinnings = refund * probability\nprofit = math.ceil(winnings * (10 ** -3))\n\nprint(profit)\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 49.9') == '0.0'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 50\n''') == '0.0', 'First'\nassert solution('''\n1 0.0\n''') == '1.0', 'Second'\nassert solution('''\n1 50\n''') == '3.1', 'Third'\nassert solution('''\n1 49.9\n''') == '3.0', 'Fourth'\nassert solution('''\n1 50\n''') == '0.0', 'Fifth'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0') == '0.0'\nassert solution('0 49.9') == '0.0'\nassert solution('0 100.99') == '1.0'\nassert solution('0 50.1') == '0.0'\nassert solution('0 99.9') == '0.0'\n\"\"\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''0 49.9\n0 51.1\n0 71.1\n0 85.9\n0 95.9\n0 100.1\n0 101.9\n0 97.9\n0 97.9''') == '0.0'\n\nassert solution('''0 49.9\n0 50.1\n0 51.1\n0 71.1\n0 85.9\n0 95.9\n0 100.1\n0 101.9\n0 97.9\n0 97.9''') == '-1.0'\n\nassert solution('''0 0.5\n0 50.1\n0 51.1\n0 71.1\n0 85.9\n0 95.9\n0 100.1\n0 101.9\n0 97.9\n0 97.9''') == '-1.0'\n\nassert solution('''0 1.0\n0 50.1\n0 51.1\n0 71.1\n0 85.9\n0 95.9\n0 100.1\n0 101.9\n0 97.9\n0 97.9''') == '1.0'\n\nassert solution('''0 50.1\n0 50.1\n0 51.1\n0 71.1\n0 85.9\n0 95.9\n0 100.1\n0 101.9\n0 97.9\n0 97.9''') == '1.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 49.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"0.0\""
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1 2\\n3 1\\n2 3\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n2 3\n3 1\n4 1\n''') == '''1 2\n2 1\n3 1\n1 3\n'''\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"2 1\\n\"\nassert solution(\"2 3\") == \"3 2\\n\"\nassert solution(\"3 1\") == \"1 3\\n\"\nassert solution(\"4 1\") == \"1 3\\n\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == '''4 1\n2 1\n3 2\n1 3'''\n\nassert solution('''4\n1 2\n2 3\n3 1\n4 1\n5 1''') == '''5 1\n2 1\n3 2\n1 3\n4 1'''\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1\\n2 1\\n3 2\\n1 3'\nassert solution('1\\n2\\n3') == '3 1'\nassert solution('5\\n1 2\\n2 3\\n3 1\\n4 1\\n5 2\\n6 1\\n6 2\\n5 3\\n4 2') == '4 1\\n2 1\\n3 2\\n1 3\\n6 1\\n5 2\\n4 2'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8') == '8 1\\n2 1\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8'\nassert solution('1\\n2\\n3\\n4') == '4 1\\n3 2\\n2 1\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n5 4\n\"\"\") == \"\"\"\n4 1\n2 1\n3 2\n1 3\n\"\"\".strip()\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 1\n4 1\n5 1\n\"\"\") == \"\"\"\n5 1\n2 1\n3 2\n1 3\n\"\"\".strip()\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '1 2\\n2 3\\n3 1\\n4 1'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1 2\n2 3\n3 1\n4 1\n\"\"\") == \"\"\"4 1\n2 1\n3 2\n1 3\"\"\".strip()\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n4 7\n\"\"\") == \"\"\"5 1\n2 3\n3 4\n4 7\n1 5\"\"\".strip()\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"\"\"2 3\"\"\".strip()\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1\\n') == '1 2\\n2 3\\n3 1\\n4 1'\nassert solution('4\\n1 2\\n2 3\\n3 1\\n4 1\\n') == '4 1\\n1 3\\n2 1\\n3 2'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n2 3\n3 1\n4 1\n''') == '4 1\\n2 1\\n3 2\\n1 3\\n', \"Wrong solution\"\nassert solution('''\n1 2\n1 2\n1 2\n''') == '1 2\\n1 2\\n', \"Wrong solution\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 6 3 5 3') == '1'\nassert solution('6 5') == '2'\nassert solution('1 2 5 3 5') == '4'\nassert solution('1 2 5 3 5') == '4'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\nassert solution('''\n10 5\n1 1 2 2 3 3 2 3 2 3 1 1 2 2 3 3 1 1\n''') == '5'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n1 1 2 3 4') == '2'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n2 3 3 3 3') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 6 3 5 3') == '1'\n\n--\nSample Input:\n4 5\n2 1 6 3 5 3\n1 2 5 3 5\n3 4 5 6\n1 2 3\nSample Output:\n2\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\") == \"1\"\nassert solution(\n    \"5 5\\n2 1 2 3 4\\n1 2 5 3 4\") == \"1\"\nassert solution(\n    \"8 5\\n2 1 5 1 3 2 4 2 4\\n1 2 5 2 4\") == \"2\"\nassert solution(\n    \"10 5\\n2 1 3 2 2 3 2 5 5 4 4 5\\n1 2 5 3 2 5\") == \"2\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"forever\"\nassert solution(\"2 1 6 3 5 3\") == \"2\"\nassert solution(\"4 5 7 2 3 5\") == \"1\""
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1\""
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '1'\nassert solution('5 1') == '0'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"0 1 1 2 6\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 10') == '3'\nassert solution('20 4 5 8') == '17'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1 10\n0 1 1 2 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 2 10\n0 0 0 1 2 6\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5 1 10\n0 1 1 2 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 2 10\n0 0 0 1 2 6\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n10 1 10\n0 0 0 1 2 6\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3 2\n0 1 1 2 6\n2 1 1 2 4\n''') == '3'\n\nassert solution('''\n3 5 4\n0 1 1 2 6\n2 1 1 2 4\n''') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 4 5') == '3'\nassert solution('1 2 3 4') == '2'\nassert solution('3 3 3 3') == '3'\nassert solution('3 2 4 1') == '4'\nassert solution('1 10 100') == '103'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 10\n0 1 1 2 6\n''') == '3'"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 1 10\n0 1 1 2 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4 2 5\n0 1 1 2 6\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4 1\n0 1 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 4 1\n0 1 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 5 3\n0 1 1 2 3\n\"\"\") == \"1\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 10\\n0 1 1 2 6\") == \"3\"\nassert solution(\"3 2 10\\n1 2 1 2 6\") == \"3\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 10') == '3'\nassert solution('0 1 1 2 6') == '3'\n\n'''\n\nfrom itertools import product\n\nn, m, s = map(int, input().split())\nstops = list(map(int, input().split()))"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 1 10\n0 1 1 2 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 1 10\n0 1 1 2 6\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 2 10\n1 1 1 2 6\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 100\n99 1\n1 99\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 100\n99 1\n1 99\n\"\"\") == \"1\""
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\nassert solution(\"2 100\\n99 999\\n1 999\\n1 999\\n2 999\\n1 999\\n1 999\\n2 999\") == \"2\\n1 2\\n1 2\"\nassert solution(\"4 100\\n1 1\\n1 2\\n1 3\\n1 4\\n2 2\\n2 3\\n2 4\\n3 3\\n3 4\\n4 4\") == \"2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\"\nassert solution(\"5 100\\n1 9\\n2 8\\n3 7\\n4 6\\n5 5\") == \"5\\n1 5\\n1 5\\n1 5\\n1 5\"\nassert solution(\"6 100\\n1 9\\n2 8\\n3 7\\n4 6\\n5 5\\n6 5\\n6 5\\n6 5\\n6 5\") == \"6\\n1 6\\n1 6\\n1 6\\n1 6\\n1 6\\n1 6\\n1 6\\n1 6\\n1 6\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n7 2\\n1 3\\n2 4') == '3 4\\n1 2\\n2 3\\n3 4'\nassert solution('6 3\\n2 3\\n3 3\\n3 4\\n4 5\\n5 6\\n7 8\\n8 9\\n10 10\\n11 12') == '4 5\\n6 7\\n8 9\\n10 11\\n'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 100\n99 1\n1 99\n''') == '2 1 2'\nassert solution('''\n3 100\n100 10\n100 10\n''') == '3 1 2'\nassert solution('''\n10 100\n5 10\n10 10\n100 10\n10 10\n10 10\n100 10\n10 10\n10 10\n''') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('1') == '1 2'\nassert solution('1 99') == '2'\nassert solution('1 99 1') == '1 2'\nassert solution('1 99 1 2') == '1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2 1 2'\nassert solution('2 500\\n99 999\\n1 2\\n1 2\\n1 2\\n1 2') == '2 2 2'\n\"\"\""
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 100\n99 1\n1 99''') == '2 1 2'\n\nassert solution('''1 1\n0 0''') == '1'\n\nassert solution('''10 1\n1 1\n1 10\n10 1\n5 1\n1 10\n5 5\n10 10\n10 10\n5 1\n10 10\n3 3\n3 3\n3 3\n3 3''') == '3 3 3 3'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 4\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n2 1\n''') == '1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 10\n1 2\n''') == '1 1 2'\nassert solution('''\n3 10\n1 1\n2 4\n4 3\n''') == '3 1 2 3'\nassert solution('''\n100 10\n99 1\n1 99\n''') == '99 1 2'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n0.01') == '0.01'\nassert solution('H\\nT\\n0.001') == '0.001'\nassert solution('H\\nT\\n0.00001') == '0.00001'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nH\nH\n0.8\n\"\"\") == \"0.8\"\nassert solution(\"\"\"\nH\nT\n0.3\n\"\"\") == \"0.3\"\nassert solution(\"\"\"\nH\nT\n0.01\n\"\"\") == \"0.01\"\nassert solution(\"\"\"\nH\nT\n0.999\n\"\"\") == \"0.999\"\nassert solution(\"\"\"\nH\nT\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('H') == 'H'\nassert solution('T') == 'T'\nassert solution('0.5') == '0.5'\nassert solution('1.2') == '0.4'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('H') == 'H', 'Should return H'\nassert solution('T') == 'T', 'Should return T'\nassert solution('0.5') == '0.5', 'Should return 0.5'\n\"\"\"\nimport math"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n0.6') == '0.6'\nassert solution('H\\nT\\n0.7') == '0.7'\nassert solution('H\\nT\\n0.8') == '0.8'\nassert solution('H\\nT\\n0.9') == '0.9'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nprint(solution('H\\nT\\n0.5') == '0.5')"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n0.5') == '0.5'\nassert solution('1\\n1\\n0.5') == '1.0'\nassert solution('H\\nH\\n0.5') == '1.0'\nassert solution('H\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n1.0') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\""
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H\\nH\\n0.5') == '0.5'\nassert solution('T\\nT\\n0.5') == '0.5'\nassert solution('H\\nT\\n0.5') == '0.5'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '6'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '8'\nassert solution('6') == '1 3 5 7 9 11 13 15'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 5 7 9 11 13 15\") == \"8 1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"8 1 3 5 7 9 11 13 15\"\nassert solution(\"15\") == \"3 1 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3]) == '8'\nassert solution([7]) == '1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '7'\nassert solution('100') == '104'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"4 5 7 9 11 13 15\"\nassert solution(\"6\") == \"2 2 3 4 5 6\"\nassert solution(\"7\") == \"1 1 3 4 5 6 7\"\nassert solution(\"8\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '8 1 3 5 7 9 11 13 15'\nassert solution('1') == '8'\nassert solution('1 1 1 1 1 1 1 1 1') == '8 1 3 5 7 9 11 13 15'\nassert solution('1 2 3 4 5 6') == '8 1 3 5 7 9 11 13 15'\nassert solution('1 2 3 4 5 6 7') == '8 1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\nassert solution(\"5\") == \"1 3 5 7 9 11 13 15\"\nassert solution(\"5\") == \"1 3 5 7 9 11 13 15\"\nassert solution(\"100000\") == \"1 3 5 7 9 11 13 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 10050 10051 10052 10053 10054 10055 100"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3'\nassert solution('''\n1 2\n2 3\n3 4\n5 6\n''') == '1'\nassert solution('''\n1 1\n2 3\n3 5\n6 7\n''') == '0'\nassert solution('''\n2 5\n2 2\n1 2\n1 5\n''') == '0'\nassert solution('''\n2 1\n1 3\n3 5\n6 7\n''') == '1'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3\\n1\\n0\\n'\n\nassert solution('''\n2\n1\n2\n''') == '0\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\nprint('All test cases passed.')"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\") == \"3\\n1\\n0\\n\"\nassert solution(r\"\"\"\n10\n1 2 1 3 2 4 2 4 2 5 3 5\n2\n3 4\n1 5\n\"\"\") == \"4\\n1\\n0\\n\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '3'\nassert solution('1 2 3 4 5 1 5') == '1'\nassert solution('1 2 3 4 5 1 5 6 7') == '2'\nassert solution('1 2 3 4 5 1 5 6 7 8 9') == '4'\nassert solution('1 2 3 4 5 1 5 6 7 8 9 10 11 12 13') == '3'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\") == \"3\\n1\\n0\\n\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '3\\n1\\n0\\n'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('2 2') == '0'\nassert solution('3') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3'\nassert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '1'\nassert solution('''\n1\n1\n1\n''') == '0'\nassert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3'\nassert solution('''\n1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n''') == '8'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 1 -2 0\\n') == '0'"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n1 1 -2 0') == '0'\nassert solution('2 1\\n1 1 -2 0') == '1'\nassert solution('3 1\\n1 1 -2 0') == '2'\nassert solution('4 1\\n1 1 -2 0') == '3'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 1\n1 1 -2 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 5\n-1 0 0 -1 0\n-1 0 1 1\n-1 1 0 1\n-1 0 -1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6 1\n-1 0 0 -1 0\n-1 0 1 1\n-1 1 0 1\n-1 0 -1 1\n-1 0 -1 1\n-1 1 1 -1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 1\n1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1\n1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n\"\"\") == \"0\""
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('2 2\\n-2 -1 0 0') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n1 1 -2 0') == '0'\nassert solution('2 1\\n1 1 -2 0\\n-1 -1 -2 1') == '0'\nassert solution('2 1\\n1 1 -2 0\\n-1 -2 -2 1') == '1'\nassert solution('2 1\\n1 1 -2 0\\n-1 -2 -2 1\\n1 1 -2 0') == '0'\nassert solution('2 1\\n1 1 -2 0\\n-1 -2 -2 1\\n1 1 -2 0\\n-1 -2 -2 1') == '2'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2\n1 1 -2 0\n3 1 2 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3\n1 1 -2 0\n1 3 2 1\n3 3 2 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3\n1 1 -2 0\n0 3 2 1\n1 3 2 1\n3 3 2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 -2 0') == '0'\nassert solution('1 2 -3 4') == '3'\n'''"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 -2 0') == '0'\nassert solution('2 1\\n1 1 -2 0') == '1'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 9 10\n4 12 17\n4 18 26''') == \"194\\n4 10 27\\n4 11 28\\n4 12 29\\n4 13 30\"\nprint(solution('''4\n6 7 8\n6 10 12\n6 11 13\n6 12 14\n6 13 15'''))\nassert (solution('''2\n3\n9 10\n9 11''') == \"194\\n9 11\")\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\nassert solution('''\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '1030'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n3\n2 1 7\n1 1 10\n1 1 3\n3 1 2\n\"\"\") == \"194\"\nassert solution(r\"\"\"\n3\n2 1 7\n1 1 10\n1 1 3\n3 1 5\n\"\"\") == \"194\"\nassert solution(r\"\"\"\n3\n2 1 5\n1 1 10\n1 1 3\n3 1 5\n\"\"\") == \"254\"\nassert solution(r\"\"\"\n3\n1 1 10\n1 1 10\n1 1 3\n3 1 5\n\"\"\") == \"194\"\nassert solution(r\"\"\"\n1\n10\n10\n10\n10\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '194'\nassert solution('2') == '2019 10 25'\nassert solution('3') == '2019 10 28'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2019 10 18\\n2019 10 19\\n2020 10 02\\n2020 10 16\\n2020 10 23\\n') == '194\\n2019 10 25\\n2020 10 30'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '181'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '194'\nassert solution('2') == '2018 10 25'\nassert solution('3') == '2020 10 30'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"194\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"194\"\nassert solution(\"3\") == \"194\"\nassert solution(\"4\") == \"194\"\nassert solution(\"5\") == \"194\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10 10 10 10 0\\n1 10 10 5 10 0\\n6 10 10 10 10 0\\n') == 'negative-infinity 0'\nassert solution('5 10 10 10 10 0\\n5 10 10 5 10 0\\n6 10 10 10 10 0\\n') == 'negative-infinity -5'\nassert solution('4 5 3 2 1 2\\n3 4 5 3 2 1\\n4 5 4 4 3 2\\n1 2 3 4 5\\n') == 'negative-infinity -5'"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\n\n\"\"\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"negative-infinity -5\"\nassert solution(\"5 10 10 10 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1 0') == \"0.0\"\nassert solution('1 1 0 1 0') == \"0.0\"\nassert solution('0.5 1 0 1 0') == \"1.0\"\nassert solution('5 1 0 1 0') == \"6.5\"\nassert solution('5 1 1 1 0') == \"6.5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'\nassert solution('10 10 10 10 10 0') == 'negative-infinity -5'"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 2 2\n4 4 1 2\n5 5 1 2\n3 4 0 2\n0 2 -3 2\n''') == \"negative-infinity 0\\n5 14.5\\nnegative-infinity -5\\nnegative-infinity -5\\n\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\""
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 10 10 10 0') == \"negative-infinity 0\"\nassert solution('5 10 10 5 10 0') == \"5 12.5\"\nassert solution('6 10 10 10 10 0') == \"negative-infinity -5\"\n\n[-1]  \n[0.5]  \n[0]  \n[1.5]  \n[2]  \n[2.5]  \n[3]  \n[3.5]  \n[4]  \n[4.5]  \n[5]  \n[5.5]  \n[6]  \n[6.5]  \n[7]  \n[7.5]  \n[8]  \n[8.5]  \n[9]  \n[9.5]  \n[10]  \n[10.5]  \n[11]  \n[11.5]  \n[12]  \n[12.5]  \n[13]  \n[13.5]  \n[14]  \n[14.5]  \n[15]  \n[15.5]  \n[16]  \n[16.5]  \n[17]  \n[17.5]  \n[18]  \n[18.5]  \n[19]  \n[19.5]  \n[20]  \n[20.5]  \n[21]  \n[21.5]  \n[22]  \n[22.5]  \n[23]  \n[23.5]  \n[24]  \n[24.5]  \n[25]  \n[25.5]  \n[26]  \n[26.5]  \n[27]  \n[27.5]  \n[28]  \n[28.5]  \n[29]  \n[29.5]  \n[30]  \n[30.5]  \n[31]  \n[31.5]  \n[32]  \n[32.5]  \n[33]  \n[33.5]  \n[34]  \n[34.5]  \n[35]  \n[35.5]  \n[36]  \n[36.5]  \n[37]  \n[37.5]  \n[38]  \n[38.5]  \n[39]  \n[39.5]  \n[40]  \n[40.5]  \n[41]  \n[41.5]  \n[42]  \n[42.5]  \n[43]  \n[43.5]  \n[44]  \n[44.5]  \n[45]  \n[45.5]  \n[46]  \n[46.5]  \n[47]  \n[47.5]  \n[48]  \n[48.5]  \n[49]  \n[49.5]  \n[50]  \n[50.5]  \n[51]  \n[51.5]  \n[52]  \n[52.5]  \n[53]  \n[53.5]  \n[54]  \n[54.5]  \n[55]  \n[55.5]  \n[56]  \n[56.5]  \n[57]  \n[57.5]  \n[58]  \n[58.5]  \n[59]  \n[59.5]  \n[60]  \n[60.5]  \n[61]  \n[61.5]  \n[62]  \n[62.5]  \n[63]  \n[63.5]  \n[64]  \n[64.5]  \n[65]  \n[65.5]  \n[66]  \n[66.5]  \n[67]  \n[67.5]  \n[68]  \n[68.5]  \n[69]  \n[69.5]  \n[70]  \n[70.5]  \n[71]  \n[71.5]  \n[72]  \n[72.5]  \n[73]  \n[73.5]  \n[74]  \n[74.5]  \n[75]  \n[75.5]  \n[76]  \n[76.5]  \n[77]  \n[77.5]  \n[78]  \n[78.5]  \n[79]  \n[79.5]  \n[80]  \n[80.5]  \n[81]  \n[81.5]  \n[82]  \n[82.5]  \n[83]  \n[83.5]  \n[84]  \n[84.5]  \n[85]  \n[85.5]  \n[86]  \n[86.5]  \n[87]  \n[87.5]  \n[88]  \n[88.5]  \n[89]  \n[89.5]  \n[90]  \n[90.5]  \n[91]  \n[91.5]  \n[92]  \n[92.5]  \n[93]  \n[93.5]  \n[94]  \n[94.5]  \n[95]  \n[95.5]  \n[96]  \n[96.5]  \n[97]  \n[97.5]  \n[98]  \n[98.5]  \n[99]  \n[99.5]  \n[100]  \n[100.5]  \n[101]  \n[101.5]  \n[102]  \n[102.5]  \n[103]  \n[103.5]  \n[104]  \n[104.5]  \n[105]  \n[105.5]  \n[106]  \n[106.5]  \n[107]  \n[107.5]  \n[108]  \n[108.5]  \n[109]  \n[109.5]  \n[110]  \n[110.5]  \n[111]  \n[111.5]  \n[112]  \n[112.5]  \n[113]  \n[113.5]  \n[114]  \n[114.5]  \n[115]  \n[115.5]  \n[116]  \n[116.5]  \n[117]  \n[117.5]  \n[118]  \n[118.5]  \n[119]  \n[119.5]  \n[120]  "
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n\nassert solution('''5\n0 1\n1 0\n1 1\n1 0\n0 0\n''') == 'IMPOSSIBLE'\n\nassert solution('''5\n0 1\n1 0\n1 1\n1 0\n0 0\n''') == '2'"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n'''\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == '2'\nassert solution('6 5\\n101 1000\\n200 1100\\n300 1200\\n400 0\\n500 1300\\n600 1400\\n700 1700\\n400 -10000\\n500 -20000\\n') == 'IMPOSSIBLE'\nassert solution('100 2\\n2 4\\n1 5\\n3 6\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000''') == '2'\n\nassert solution('''6\n100 1000\n200 2000\n300 3000\n400 5000\n100 5000\n50 5000''') == 'IMPOSSIBLE'\n\nassert solution('''10\n100 10\n200 15\n300 20\n400 30\n50 30\n50 20\n60 20\n70 10\n80 5\n100 0''') == '10'\n\nassert solution('''6\n100 3000\n200 1500\n300 1000\n400 100\n50 10000\n75 10000''') == 'IMPOSSIBLE'\n\nassert solution('''12\n100 2200\n200 2200\n300 2000\n400 3000\n50 2500\n100 2500\n50 2000\n50 2000\n50 2000\n50 2000\n50 2000\n50 2000\n50 2000\n50 2000\n50 2000''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '2'\nassert solution('1 1') == 'IMPOSSIBLE'\nassert solution('1 5') == 'IMPOSSIBLE'\nassert solution('2 5') == '2'"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 100, 30000, 200, 20000, 300, 10000, 400, 0, 50, 10000, 75, 20000, 400, -40000]) == '2'\nassert solution([4, 200, 20000, 100, 30000, 50, 10000, 400, -40000]) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0''') == '2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\nrotS 2 1') == '345 2 rotS 2 1'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\\n') == '345 2\\nrotS 2 1\\nnegR 2\\n'\n\n'''\n\nimport sys\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2'\n\nassert solution('''\n2 2\n1 1\n1 1\n''') == '0 0'\n\nassert solution('''\n2 2\n1 1\n10 1\n''') == '10 1'\n\nassert solution('''\n3 3\n1 -2 3\n4 1\n1 -10\n''') == '17 2'\n\nassert solution('''\n2 2\n1 1\n100 1\n''') == '100 1'"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n-8 0\\n11 4\\n') == '345 2'\nassert solution('1 2\\n5 5\\n1 1\\n') == '8 2'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == stdout"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n2 2\n1 1\n\"\"\") == \"0 1\"\n\nassert solution(\"\"\"\n2 1\n2 2\n\"\"\") == \"3 1\"\n\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n3 4\n2 1 -1\n-1\n1 2\n\"\"\") == \"10 1\""
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2'\nprint(solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n'''))\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2'\nassert solution('''1\n-2''') == '1'\nassert solution('''3 4\n1 2 3\n4 5 6\n7 8 9''') == '18 5'\nassert solution('''1\n1''') == '1'\nassert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n3 1 1\n''') == '0.5', 'First'\nassert solution('''\n3 3\n3 2 2\n''') == '2.75', 'Second'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n3 1 1\n''') == '0.5\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"0.5\"\nassert solution(\"1 1 1\") == \"0.5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\n3 1 1\\n') == '0.5'"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"0.5\"\nassert solution(\"3 3 3\") == \"3.0\"\nassert solution(\"1 1\") == \"0.5\"\nassert solution(\"1 0 0\") == \"0.0\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 1 1') == '0.5'\nassert solution('2 1\\n1 1 1') == '1.0'\n\"\"\""
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3 2\n    3 1 1\n    ''') == '0.5'\nassert solution('''\n    3 3\n    3 2 1\n    ''') == '0.0'\nassert solution('''\n    5 4\n    1 1 2 4 1\n    ''') == '5.0'\nassert solution('''\n    5 6\n    1 1 2 3 1 2\n    ''') == '7.0'\nassert solution('''\n    6 7\n    1 1 2 3 1 2 3\n    ''') == '8.0'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 2 3 4') == \"0.5\"\nassert solution('4\\n1 1 1 1') == \"0.25\"\nassert solution('8\\n1 1 1 1 1 1 1 1') == \"0.75\"\nassert solution('7\\n1 1 1 1 1 1 1') == \"1\"\nassert solution('7\\n1 1 1 1 1 1 1 2') == \"1.125\"\n\n'''"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5 2 6 7 3 8 9 8 9'\n'''\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n') == '2 6 7\\n1 5 6\\n3 8 9\\n'\nassert solution('4 8\\n0 0\\n5 1\\n1 2\\n2 5\\n0 0\\n2 0\\n3 1\\n1 1\\n0 2\\n0 0\\n0 1\\n') == '5 3 1\\n'"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10 12\n2 5\n4 7\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n3 6\n1 5\n1 5\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\") == \"2 6 7\\n1 6 7\""
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n4 3\\n2 3\") == \"2 3\\n1 4\\n\", solution(\"1 2\\n4 3\\n2 3\")\nassert solution(\"5 8\\n3 4\\n4 5\\n4 1\\n1 2\\n2 3\\n2 4\\n3 5\\n5 6\\n5 1\\n6 4\\n6 7\\n7 8\\n8 9\\n1 1\\n9 2\\n9 8\\n8 7\\n7 9\\n9 4\\n9 1\\n4 9\\n4 7\\n4 1\\n7 5\\n7 4\\n6 5\\n7 5\\n1 6\\n1 5\\n6 2\\n2 5\\n4 3\\n4 7\\n3 3\\n3 6\\n2 4\\n2 2\\n3 8\\n3 5\\n2 4\\n2 5\\n3 2\\n3 5\\n4 2\\n4 4\") == \"4 8\\n7 2\\n3 7\\n6 5\\n9 9\\n8 8\\n5 5\\n5 6\\n9 1\\n8 4\\n1 4\\n5 7\\n5 1\\n7 8\\n9 4\\n7 7\\n7 4\\n6 5\\n2 1\\n5 4\\n7 5\\n6 5\\n3 3\\n3 4\\n3 4\\n7 4\\n6 2\\n4 8\\n2 7\\n4 2\\n7 2\\n1 2\\n2 5\\n5 4\\n6 2\\n1 4\\n1 7\\n1 7\\n1 6\\n1 1\\n3 8\\n3 4\\n5 4\\n8 6\\n1 4\\n9 9\\n1 4\\n9 3\\n2 6\\n7 5\\n9 4\\n1 4\\n4 8\\n4 2\\n4 4\\n8 4\\n3 6\\n3 7\\n5 2\\n2 4\\n4 2\\n4 5\\n1 2\\n5 3\\n7 4\\n7 4\\n5 6\\n6 4\\n4 3\\n4 3\\n4 1\\n4 3\\n4 4\\n4 5\\n2 8\\n2 6\\n5 3\\n5 5\\n6 2\\n3 5\\n4 6\\n2 3\\n5 3\\n6 3\\n5 4\\n2 8\\n3 6\\n8 6\\n2 4\\n6 3\\n7 2\\n7 4\\n7 4\\n2 6\\n5 1\\n7 2\\n3 2\\n6 4\\n3 4\\n5 3\\n3 4\\n5 6\\n3 8\\n4 6\\n4 5\\n6 5\\n4 2\\n4 5\\n4 5\\n4 4\\n4 4\\n4 5\\n4 5\\n4 4\\n6 6\\n6 6\\n6 2\\n1 3\\n4 2\\n3 7\\n4 3\\n3 8\\n7 8\\n4 1\\n5 8\\n5 1\\n3 4\\n3 7\\n5 6\\n5 1\\n7 4\\n5 5\\n5 2\\n5 5\\n5 2\\n5 5\\n5 4\\n4 8\\n4 6\\n5 1\\n6 5\\n4 5\\n4 4\\n4 2\\n4 2\\n4 4\\n4 1\\n4 2\\n4 4\\n3 8\\n3 5\\n3 7\\n6 4\\n6 3\\n6 4\\n6 7\\n6 7\\n5 8\\n5 2\\n5 7\\n6 4\\n7 4\\n3 4\\n3 4\\n5 2\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5 4\\n5"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n3 8\\n4 9'\nassert solution('9 10\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n3 8\\n4 9'\nprint('All tests passed.')\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n1 2\n2 3\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n4 4\n1 1\n2 2\n3 3\n1 3\n3 3\n\"\"\") == \"1 2 3\"\n\nassert solution(\"\"\"\n8 5\n1 5\n2 6\n3 6\n4 6\n5 7\n6 7\n7 8\n3 5\n\"\"\") == \"1 2 3\"\n\nassert solution(\"\"\"\n8 2\n1 2\n1 3\n3 4\n2 3\n2 4\n4 5\n3 5\n5 6\n\"\"\") == \"1 3\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '2 6 7\\n3 8 9\\n4 5 1'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"\"\"1 4 5\n2 6 7\n3 8 9\n2 8 9\n\"\"\".strip()\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 4 5\\n2 6 7\\n'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '10000'\nassert solution('4500') == '10000'\nassert solution('10000') == '12000'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0'\nassert solution('11 2') == '1'\nassert solution('9000') == '9000'\nassert solution('12000') == '12000'\nassert solution('4500') == '4500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n\nassert solution('''\n1 5\n1\n''') == '1'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '14000'\nassert solution('4500') == '14000'\nassert solution('10000') == '15000'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    4 1\n    17000\n    7000\n    50000\n    ''') == \"13500\"\n\nassert solution('''\n    5 4\n    17000\n    7000\n    50000\n    10000\n    9000\n    12000\n    11000\n    12000\n    ''') == \"13500\"\n\nassert solution('''\n    6 6\n    7000\n    50000\n    10000\n    7000\n    50000\n    7000\n    50000\n    ''') == \"9000\"\n\nassert solution('''\n    10 10\n    25000\n    25000\n    30000\n    25000\n    25000\n    25000\n    25000\n    25000\n    25000\n    ''') == \"9000\"\n\nassert solution('''\n    6 5\n    25000\n    25000\n    25000\n    25000\n    25000\n    25000\n    25000\n    25000\n    25000\n    ''') == \"9000\""
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"13500\""
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 2') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000''') == \"13500\"\nassert solution('''30 50\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n90\n80\n70\n60\n50\n40\n30\n20\n10\n10\n10\n10\n10''') == \"3720\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 4 4 4 4\n\"\"\") == \"\"\"Hot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n\"\"\".replace('\\n', '')\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"Hot_cross_buns!=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\"\nassert solution(\"4 4 4 4 4 4 4 4\") == \"One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________Hot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 16') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n' + \\\n    '____________________Hot_cross_buns!_=\\n' + \\\n    'One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n' + \\\n    'Hot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n' + \\\n    'def solution(stdin: str) -> str:'"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n\"\"\") == \"\"\"\nHot_cross_buns!_=___Hot_cross_buns!_=\n________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot_cross_buns!_=\nHot_cross_buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n\"\"\".strip()\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 4 4 4 4 4 4 4 4') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n\\n\\n1 2 2 2 2 2 2 2 2 4 4 4 4\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4\\nHot cross buns! = Hot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross buns! =\\n\\nHot cross"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 10\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 16') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('5 8') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('5 16') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n_____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('3 2') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'\n\nassert solution('1 5') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('10 2 10') == '50'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 1\n1 2 10\n1 4 6 6\n1 6 10 5''') == '33'\nassert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5''') == '70'\nassert solution('''3 4 3\n1 2 5\n2 3 5\n3 4 2\n2 4 2\n1 5 5''') == '5'\nassert solution('''2 5 2\n1 2 2\n1 4 6\n2 4 4\n2 6 2\n2 5 2''') == '2'\nassert solution('''2 2 2\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n2 4 2\n2 6 2\n2 5 2''') == '2'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 2') == '0'\nassert solution('3 5 4') == '15'\n\"\"\"\n\n\nimport sys\nsys.path.append('..')\n\nfrom utils import *"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\n\nassert solution('5 3 2\\n5 5 6 6\\n3 3 4 6\\n4 5 1 2\\n1 5 4 4') == '46'\n\nassert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\\n1 5 5 5\\n2 9 6 7\\n1 2 3 3') == '55'\n\nassert solution('5 5 5 5\\n5 5 5 5\\n1 2 2 2\\n2 3 3 3\\n3 4 4 4\\n4 5 5 5\\n4 5 5 5\\n5 5 5 5\\n5 5 5 5') == '100'\n\nassert solution('1 2 3\\n3 4 5\\n5 6 7\\n7 8 9\\n9 10 11\\n11 12 13\\n13 14 15\\n15 16 17\\n17 18 19') == '16'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('4 4 6 6') == '0'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 5 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '37'\nassert solution('''\n3 3 2\n5 5 10\n5 6 10 5\n''') == '10'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '33'\nassert solution('2 1 1') == '33'\nassert solution('2 2 1') == '33'\nassert solution('1 1 1') == '33'\nassert solution('3 2 1') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '33'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\nassert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\nassert solution(\"3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33\") == \"33\"\n\nassert solution(\"10 3\\n3 5 8\\n4 9 8\\n3 7 8\\n5 6 3\\n5 5 3\\n6 7 1\\n5 5 1\\n6 7 2\\n5 5 2\\n6 7 3\\n5 5 3\\n6 7 4\") == \"113\"\nassert solution(\"10 2\\n2 4 1\\n2 8 1\\n1 3 1\\n1 8 2\\n2 6 2\\n2 8 3\\n2 10 3\\n2 8 4\\n1 3 4\\n1 4 4\\n1 8 5\\n1 10 5\\n2 6 5\\n2 10 5\\n2 11 5\\n1 8 6\\n1 10 6\\n2 9 5\\n2 11 5\\n2 8 6\\n2 10 6\\n2 11 6\\n1 10 7\\n1 8 7\\n1 6 7\\n2 8 7\\n1 11 7\\n2 9 7\\n2 11 7\\n2 6 7\\n2 10 7\\n2 11 7\\n1 6 8\\n1 10 8\\n2 9 8\\n2 11 8\\n2 6 8\\n2 10 8\\n2 11 8\\n1 10 9\\n1 8 9\\n1 6 9\\n2 8 9\\n1 11 9\\n2 9 9\\n2 11 9\\n2 6 9\\n2 10 9\\n2 11 9\\n1 6 10\\n1 10 10\\n2 9 10\\n2 11 10\\n2 6 10\\n2 10 10\\n2 11 10\\n1 6 11\\n1 10 11\\n2 9 11\\n2 11 11\\n2 6 11\\n2 10 11\\n2 11 11\\n1 10 12\\n1 8 12\\n1 6 12\\n2 8 12\\n1 11 12\\n2 9 12\\n2 11 12\\n2 6 12\\n2 10 12\\n2 11 12\\n1 11 13\\n1 8 13\\n1 6 13\\n2 8 13\\n1 11 13\\n2 9 13\\n2 11 13\\n2 6 13\\n2 10 13\\n2 11 13\\n1 10 14\\n1 8 14\\n1 6 14\\n2 8 14\\n1 11 14\\n2 9 14\\n2 11 14\\n2 6 14\\n2 10 14\\n2 11 14\\n1 11 15\\n1 8 15\\n1 6 15\\n2 8 15\\n1 11 15\\n2 9 15\\n2 11 15\\n2 6 15\\n2 10 15\\n2 11 15\\n1 10 16\\n1 8 16\\n1 6 16\\n2 8 16\\n1 11 16\\n2 9 16\\n2 11 16\\n2 6 16\\n2 10 16\\n2 11 16\\n1 11 17\\n1 8 17\\n1 6 17\\n2 8 17\\n1 11 17\\n2 9 17\\n2 11 17\\n2 6 17\\n2 10 17\\n2 11 17\\n1 11 18\\n1 8 18\\n1 6 18\\n2 8 18\\n1 11 18\\n2 9 18\\n2 11 18\\n2 6 18\\n2 10 18\\n2 11 18\\n1 11 19\\n1 8 19\\n1 6 19\\n2 8 19\\n1 11 19\\n2 9 19\\n2 11 19\\n2 6 19\\n2 10 19\\n2 11 19\\n1 11 20\\n1 8 20\\n1 6 20\\n2 8 20\\n1 11 20\\n2 9 20\\n2 11 20\\n2 6 20\\n2 10 20\\n2 11 20\\n1 11 21\\n1 8 21\\n1 6 21\\n2 8 21\\n1 11 21\\n2 9 21\\n2 11 21\\n2 6 21\\n2 10 21\\n2 11 21\\n1 11 22\\n1 8 22\\n1 6 22\\n2 8 22\\n1 11 22\\n2 9 22\\n2 11 22\\n2 6 22\\n2 10 22\\n2 11 22\\n1 11 23\\n1 8 23\\n1 6 23\\n2 8 23\\n1 11 23\\n2 9 23\\n2 11 23\\n2 6 23\\n2 10 23\\n2 11 23\\n1 11 24\\n1 8 24\\n1 6 24\\n2 8 24\\n1 11 24\\n2 9 24\\n2 11 24\\n2 6 24\\n2 10 24\\n2 11 24\\n1 11 25\\n1 8 25\\n1 6 25\\n2 8 25\\n1 11 25\\n2 9 25\\n2 11 25\\n2 6 25\\n2 10 25\\n2"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n2\n20 30 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n3\n20 30 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n4\n20 30 10\n7 7\n30 0\n\"\"\") == \"405\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3\n20 15 10\n7 7\n30 0\n'''\n    ) == '405'\n\nassert solution(\n'''\n4\n30 20 10 10\n30 20 20\n20 20 30\n30 20 10\n'''\n    ) == '54320'\n\nassert solution(\n'''\n10\n20 10 20 20 20 10\n10 20 10 20 20 20\n10 20 20 10 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n10 20 10 20 20 20\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2\\n'\n    '5\\n'\n    '5 1 1 5\\n'\n    '5 1 2 4\\n'\n    '4\\n'\n    '4 1 1 1\\n'\n    '4 1 2 3\\n'\n    ) == '37'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n5\n10 10 5 5\n3 3\n''') == '8'\nassert solution('''\n1\n2\n1 1\n''') == '2'\n'''\nInput\n'''\n3\n20 15 10\n7 7\n30 0\n10\n20 15 10\n7 7\n30 0\n\n'''\nOutput\n'''\n405\n'''\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO('''\n3\n20 15 10\n7 7\n30 0\n''')\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n20 15 10\n7 7\n30 0\n''') == '405'\n\nassert solution('''2\n8 5\n10 5\n3 2\n6 7\n''') == '17'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n''')\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n20 15 10\\n7 7\\n30 0'\n    ) == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n5 4 6 3 2\n0 1 5\n7 1\n\"\"\") == \"2856\"\n\nassert solution(\"\"\"\n3\n1 2 3\n1 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\n6 6 6 3 1\n1 1 1 1 1\n\"\"\") == \"18\"\n\nassert solution(\"\"\"\n2\n5 3\n0 1\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '405'\nassert solution('12') == '32600'\nassert solution('5') == '35000'\n\n'''"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 15 10\n7 7\n30 0\n''') == '405'\n\nassert solution('''\n1\n5\n0\n''') == '5'\n\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n\nassert solution('''\n1\n5\n0\n''') == '5'\n\nassert solution('''\n4\n20 15 10\n7 7\n30 0\n''') == '405'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 4 7') == '28 4 21 14.0'\n\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '28 4 21 14.0'\nassert solution('4 1 2 3') == '10 3 2 4'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 2 4 7') == '28 4 21 14.0'\nassert solution('2\\n4 1 2') == '6 8 8 8'\nassert solution('3\\n3 4 1') == '6 8 8 8'\nassert solution('4\\n4 3 2') == '6 8 8 8'\nassert solution('5\\n5 3 2') == '6 8 8 8'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 7\\n') == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"28 4 21 14.0\"\n\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"28 4 21 14.0\"\n\nassert solution(\"\"\"\n1\n4\n\"\"\") == \"1 4\"\n\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 4 7\") == \"28 4 21 14.0\"\nassert solution(\"1 2 3 4 5 6\") == \"13 12 3 11 7\"\nassert solution(\"1 2 3 4 5 6 7\") == \"13 12 3 11 7\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"11 13 4 3 5 6 7\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"7 13 4 3 5 6 7 8 9\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '28 4 21 14.0'\nassert solution('4 4 4 4 4') == '28 4 21 14.0'\n\nprint('PASSED')"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    1 2 3\n    \"\"\"\n) == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n1 2 4 7\n\"\"\") == \"28 4 21 14.0\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 3 2\n3 2 1''') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\nassert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'no'\nassert solution('''\n10 3\n1 2 3 4 5 6 7 8 9 10 \n2 3 4 5 6 7 8 9 10 \n3 4 5 6 7 8 9 10 1\n4 5 6 7 8 9 10 1 2\n5 6 7 8 9 10 1 2 3\n6 7 8 9 10 1 2 3 4\n7 8 9 10 1 2 3 4 5\n8 9 10 1 2 3 4 5 6\n9 10 1 2 3 4 5 6 7\n10 1 2 3 4 5 6 7 8\n''') == 'yes'\nassert solution('''\n6 2\n1 2 3 4 5 6\n2 3 4 5 6 7\n3 4 5 6 7 8\n4 5 6 7 8 9\n5 6 7 8 9 10\n6 7 8 9 10 1\n7 8 9 10 1 2\n8 9 10 1 2 3\n9 10 1 2 3 4\n10 1 2 3 4 5\n''') == 'no'\nassert solution('''\n3 3\n1 2 3\n3 4 5\n2 5 6\n''') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 3\n2 3 4\n1 2 3''') == 'yes'\nassert solution('''4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'no'\nassert solution('''5\n1 2 3 4 5\n2 3 4 1 5\n3 4 1 2 5\n4 1 2 3 5\n5 1 2 3 4''') == 'yes'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == 'yes'\nassert solution('4 3 2') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 5 4') == 'yes'\nassert solution('2 4 1 3 2') == 'no'\nassert solution('4 4 4 4 4 4 4 4') == 'yes'\n\n'''\n\nstdin = input()\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\""
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 1 3\\n4 5 1\\n1 2 3\\n3 4 5') == 'yes\\n1 2 3\\n3 4 5\\n2 1 3\\n4 5 1'\nassert solution('5 4\\n1 3 2\\n4 5 1\\n2 5 3\\n3 2 4') == 'no'\nassert solution('5 5\\n1 2 3\\n3 5 4\\n5 1 2\\n3 4 5') == 'no'\nassert solution('8 9\\n7 8 9\\n5 1 2\\n6 3 5\\n8 6 9\\n9 6 5\\n7 5 8\\n5 2 1\\n6 4 3') == 'no'\n\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == 'yes'\nassert solution('3 5 7 1') == 'no'\nassert solution('2 1 3 2') == 'yes'\n\n\"\"\"\n\n\"\"\"\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n\n\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes'\n\nassert solution('''\n3 3\n3 4 2\n4 1 6\n6 5 9\n''') == 'no'\n\nassert solution('''\n4 5\n8 9 5 9\n2 6 2 1\n8 1 3 9\n4 3 1 7\n''') == 'yes'\n\nassert solution('''\n5 5\n8 9 4 2 1\n4 3 7 3\n7 9 3 9\n2 6 8 9\n''') == 'no'\n\nassert solution('''\n7 3\n7 5 3 5\n7 4 4 7\n6 6 3 4\n6 5 5 6\n6 5 3 2\n''') == 'no'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"10.0\"\nassert solution(\"5 2 3\") == \"0.0\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '10'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 -1 2\") == \"1.5\"\nassert solution(\"5\\n10 10 -10 -4 10\") == \"10.0\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n5\n10 10 -10 -4 10\n5 -10\n''') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 2 -8 3\\n') == '10.0'\nassert solution('2\\n10 2 -8 3\\n') == '10.0'\n\"\"\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n10\n10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n5\n-1 -2 -3 -4 -5\n''') == '0.0'\nassert solution('''\n0\n0\n''') == '0.0'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n1\n-10\n''') == '-10.000000000'\nassert solution('''\n2\n5 -5 -5\n''') == '0.000000000'\nassert solution('''\n3\n1 2 3\n''') == '3.000000000'\nassert solution('''\n4\n1 2 3 4\n''') == '4.000000000'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45\\n') == '1'\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        num = list(map(int, stdin.split()))\n        ans = 0\n        c = 1\n        for i in range(1, n):\n            if num[i] % num[i - 1] == 0:\n                c = 1\n            else:\n                c = 0\n                break\n        for i in range(n - 1):\n            if num[i] % num[i + 1] == 0:\n                c = 1\n            else:\n                c = 0\n                break\n        if c == 1:\n            ans = 1\n        return ans % (10 ** 9 + 7)"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1', \"This ain't right\"\nassert solution('3') == '2', \"This ain't right\"\nassert solution('4') == '1', \"This ain't right\"\nassert solution('5') == '3', \"This ain't right\"\nassert solution('10') == '9', \"This ain't right\""
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('30') == '2'\nassert solution('3') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45\\n') == '1'\n\nassert solution('20\\n7\\n15\\n8\\n8\\n') == '3'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"45\") == \"1\""
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45\\n') == '1'\nassert solution('5\\n50\\n40\\n20\\n30\\n') == '2'\nassert solution('5\\n10\\n20\\n15\\n40\\n') == '1'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nprint(solution('4\\n30\\n3\\n2\\n45'))"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\nassert solution('3\\n3\\n5\\n') == '1'\nassert solution('2\\n1\\n5\\n') == '0'\nassert solution('1\\n1\\n1\\n') == '1'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n5\n2\n6''') == '1'\nassert solution('''5\n30\n3\n2\n45''') == '1'\nassert solution('''5\n3\n5\n1\n4''') == '1'\nassert solution('''5\n3\n5\n4\n2''') == '0'"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == '0.000000000 1.360000000'\nassert solution(\"3 4 4\\n3 5 1\\n5 3 1\\n3 4 3\\n3 2 1\\n4 4 5\\n5 4 4\\n4 3 1\\n2 5 2\\n4 2 4\\n2 3 4\\n5 4 5\\n3 4 1\\n4 2 4\\n5 2 5\\n5 1 1\\n2 5 5\\n3 2 3\\n1 5 2\\n1 4 5\\n3 4 1\\n4 2 4\\n4 2 5\\n2 5 3\\n4 4 1\\n5 4 4\\n3 5 2\\n3 2 4\\n4 5 5\\n3 4 5\\n3 5 3\\n4 4 1\\n2 4 5\\n2 5 4\\n5 4 2\\n3 3 3\\n2 5 5\\n2 4 3\\n4 5 5\\n3 1 5\\n4 5 4\\n5 2 3\\n4 3 2\\n4 3 3\\n3 1 3\\n2 5 5\\n5 4 4\\n3 1 3\\n5 2 2\\n4 3 1\\n2 5 5\\n5 3 4\\n3 3 1\\n5 2 3\\n2 3 3\\n2 2 1\\n3 2 2\\n1 5 5\\n4 4 4\\n3 5 3\\n5 2 4\\n3 4 4\\n5 5 5\\n1 1 5\\n2 5 4\\n3 1 4\\n2 5 5\\n5 4 4\\n3 5 3\\n1 5 2\\n3 5 4\\n4 5 2\\n2 2 4\\n2 4 1\\n4 5 3\\n2 3 3\\n3 4 3\\n2 5 4\\n5 5 2\\n3 1 2\\n5 1 4\\n1 3 2\\n2 3 3\\n2 5 5\\n3 4 1\\n2 5 3\\n5 4 3\\n4 2 4\\n3 2 4\\n3 5 2\\n4 4 4\\n5 3 3\\n5 2 4\\n3 4 3\\n5 2 4\\n3 1 3\\n5 4 5\\n4 4 4\\n4 5 5\\n3 4 5\\n4 5 4\\n5 4 5\\n5 5 5\\n4 5 3\\n4 5 3\\n5 2 5\\n5 3 5\\n5 5 5\\n3 3 2\\n2 4 5\\n4 4 5\\n1 4 4\\n5 5 3\\n4 4 4\\n5 5 3\\n3 2 3\\n5 4 4\\n4 4 5\\n2 4 4\\n3 5 3\\n4 4 4\\n4 5 2\\n4 4 5\\n5 4 3\\n2 3 5\\n3 4 4\\n4 4 4\\n5 5 3\\n5 4 4\\n2 4 3\\n4 4 5\\n3 2 4\\n4 1 4\\n5 5 2\\n1 5 5\\n2 4 3\\n5 3 5\\n1 4 5\\n4 4 3\\n2 3 4\\n2 5 3\\n1 3 5\\n4 4 5\\n5 4 5\\n5 5 3\\"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 6 3.0 0.66') == '0.360000000 0.000000000'\nassert solution('2 4 8') == '0.360000000 -0.360000000'\nassert solution('4 6 1') == '0.360000000 0.000000000'\nassert solution('3 6 1') == '0.360000000 0.000000000'\nassert solution('4 5 5') == '0.360000000 0.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n\"\"\"\n) == \"0.000000000 1.360000000\"\nassert solution(\n\"\"\"\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n\"\"\"\n) == \"0.000000000 1.000000000\"\nassert solution(\n\"\"\"\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n\"\"\"\n) == \"0.000000000 -1.000000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 0.66 0.66 0.66 0.66 0.66') == '0.000000000 1.000000000'\nassert solution('6 4 8') == '0.000000000 1.000000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3''') == '0.000000000 1.360000000'\nassert solution('''6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n7 5 4\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 6 3.0 0.66') == '0.000000000 1.360000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\nassert solution('4 5 5') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 1.360000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 1.000000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 -1.000000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 -0.360000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == '0.000000000 0.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.360000000\"\nassert solution(\"2 4 8\") == \"0.000000000 1.000000000\"\nassert solution(\"4 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"3 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"4 5 5\") == \"0.000000000 0.360000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 3.0 0.66') == '0.000000000 1.360000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\nassert solution('4 5 5') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3') == '0.000000000 1.000000000'\nassert solution('6 6 3.0 0.66') == '0.000000000 1.000000000'\nassert solution('1 2 4') == '0.000000000 1.000000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('2 2 4') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\nSample Input:\n5\n0 0\n0 4\n4 4\n0 0\n1 1\n2 2\nSample Output:\n3\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\") == \"4\"\nassert solution(\"5\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n6\\n4\\n5\\n6\\n7\\n8\\n10\\n9\\n12\\n10\\n11\\n14\\n14\\n16\\n17\\n18\\n20\\n20\\n22\\n24\\n25\\n27\\n27\\n28\\n30\\n30\\n32\\n34\\n35\\n37\\n37\\n38\\n40\\n40\\n42\\n44\\n44\\n46\\n49\\n49\\n52\\n54\\n54\\n56\\n58\\n58\\n60\\n62\\n62\\n64\\n65\\n65\\n67\\n68\\n68\\n70\\n70\\n72\\n74\\n74\\n76\\n77\\n77\\n78\\n80\\n80\\n82\\n84\\n84\\n86\\n87\\n87\\n89\\n90\\n90\\n92\\n94\\n94\\n96\\n97\\n97\\n99\\n100\\n100\\n102\\n104\\n104\\n106\\n107\\n107\\n110\\n111\\n111\\n113\\n114\\n114\\n116\\n117\\n117\\n119\\n120\\n120\\n122\\n124\\n124\\n126\\n128\\n128\\n130\\n131\\n131\\n133\\n134\\n134\\n136\\n137\\n137\\n139\\n140\\n140\\n142\\n144\\n144\\n146\\n148\\n148\\n150\\n151\\n151\\n153\\n154\\n154\\n156\\n157\\n157\\n159\\n160\\n160\\n162\\n164\\n164\\n166\\n167\\n167\\n169\\n170\\n170\\n172\\n174\\n174\\n176\\n177\\n177\\n179\\n180\\n180\\n182\\n184\\n184\\n186\\n188\\n188\\n190\\n191\\n191\\n193\\n194\\n194\\n196\\n197\\n197\\n199\\n200\\n200\\n202\\n204\\n204\\n206\\n207\\n207\\n210\\n211\\n211\\n213\\n214\\n214\\n216\\n217\\n217\\n219\\n220\\n220\\n222\\n224\\n224\\n226\\n227\\n227\\n229\\n230\\n230\\n232\\n234\\n234\\n236\\n237\\n237\\n239\\n240\\n240\\n242\\n244\\n244\\n246\\n247\\n247\\n250\\n251\\n251\\n253\\n254\\n254\\n256\\n257\\n257\\n260\\n261\\n261\\n263\\n264\\n264\\n266\\n267\\n267\\n269\\n270\\n270\\n272\\n273\\n273\\n274\\n275\\n275\\n277\\n278\\n278\\n280\\n281\\n281\\n283\\n284\\n284\\n286\\n287\\n287\\n290\\n291\\n291\\n293\\n294\\n294\\n296\\n297\\n297\\n299\\n300\\n300\\n302\\n304\\n304\\n306\\n307\\n307\\n310\\n311\\n311\\n313\\n314\\n314\\n316\\n317\\n317\\n319\\n320\\n320\\n322\\n323\\n323\\n325\\n326\\n326\\n328\\n329\\n329\\n332\\n333\\n333\\n335\\n336\\n336\\n338\\n339\\n339\\n342\\n343\\n343\\n345\\n346\\n346\\n348\\n349\\n349\\n351\\n352\\n352\\n355\\n356\\n356\\n358\\n359\\n359\\n361\\n362\\n362\\n364\\n365\\n365\\n367\\n368\\n368\\n370\\n371\\n371\\n373\\n374\\n374\\n376\\n377\\n377\\n380\\n381\\n381\\n383\\n384\\n384\\n386\\n387\\n387\\n389\\n390\\n390\\n392\\n393\\n393\\n395\\n397\\n397\\n399\\n400\\n400\\n402\\n403\\n403\\n405\\n406\\n406\\n408\\n409\\n409\\n411\\n412\\n412\\n413\\n414\\n414\\n416\\n417\\n417\\n419\\n420\\n420\\n422\\n423\\n423\\n425\\n426\\n426\\n428\\n429\\n429\\n431\\n432\\n432\\n435\\n436\\n436\\n438\\n439\\n439\\n441\\n442\\n442\\n443\\n444\\n444\\n446\\n447\\n447\\n449\\n450\\n450\\n452\\n454\\n454\\n456\\n457\\n457\\n459\\n460\\n460\\n462\\n463\\n463\\n464\\n465\\n465\\n466\\n467\\n467\\n469\\n470\\n470\\n472\\n474\\n474\\n476\\n477\\n477\\n479\\n480\\n480\\n482\\"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''\n4\n-10 8\n4 -4\n3 8\n-5 3\n1 5\n2 3\n''') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\n\nSample Input:\n7\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\nSample Output:\n1\n\nSample Input:\n8\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n1 2\nSample Output:\n1\n\nSample Input:\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n2 2\nSample Output:\n2\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4'\nassert solution('0 0\\n0 3\\n3 3\\n3 0\\n2') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\\n\"\n    \"0 0\\n\"\n    \"0 3\\n\"\n    \"3 3\\n\"\n    \"3 0\\n\"\n    \"2\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '4'\n'''\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\n\nassert solution('''\n5\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n1 2\nSample Output:\n4\n''') == '3'\n\nassert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n1 2\nSample Output:\n3\n''') == '2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 0\n0 1\n0 2\n0 3\n1 4\n2 4\n3 4\n\"\"\") == \"2\\n\" + \"\"\"\n4 1\n4 2\n4 3\n\"\"\".replace(\"\\n\", \"\\n    \")\n\nassert solution(\"\"\"\n6 0\n0 1\n0 2\n1 3\n2 4\n3 5\n4 5\n0 1\n\"\"\") == \"2\\n\" + \"\"\"\n5 1\n5 2\n5 3\n5 4\n\"\"\".replace(\"\\n\", \"\\n    \")\n\nassert solution(\"\"\"\n8 0\n0 1\n0 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 7\n7 8\n\"\"\") == \"3\\n\" + \"\"\"\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n\"\"\".replace(\"\\n\", \"\\n    \")\n\nassert solution(\"\"\"\n10 0\n0 1\n0 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 9\n9 10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 2\n10 3\n\"\"\") == \"4\\n\" + \"\"\"\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n10 11\n11 12\n11 13\n12 14\n12 15\n13 16\n13 17\n14 18\n14 19\n15 20\n15 21\n16 22\n16 23\n17 24\n17 25\n18 26\n18 27\n19 28\n19 29\n20 30\n20 31\n21 32\n21 33\n22 34\n22 35\n23 36\n23 37\n24 38\n24 39\n25 40\n25 41\n26 42\n26 43\n27 44\n27 45\n28 46\n28 47\n29 48\n29 49\n30 50\n30 51\n\"\"\".replace(\"\\n\", \"\\n    \")"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '''\n2\n3 2\n'''\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"4 0\") == \"4\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 0\") == \"2\"\nassert solution(\"5 0\") == \"4\"\nassert solution(\"4 2\") == \"2 1\"\nassert solution(\"3 0\") == \"3\"\n\nINPUT = \"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0') == '2'\nassert solution('4 0') == '2'\nassert solution('4 0') == '2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 0\n0 1\n0 2\n0 3''') == '2\\n3 2\\n3 1\\n'''\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 0\n0 1\n0 2\n0 3\n''') == '2 3 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"2 3 2\"\n\nassert solution(\"\"\"\n5 0\n0 1\n0 2\n0 3\n0 4\n\"\"\") == \"3 4 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0\\n0 1\\n0 2\\n0 3\\n') == '2'\nassert solution('4 0\\n0 1\\n0 2\\n0 3\\n') == '3'\nassert solution('3 0\\n0 1\\n0 3\\n') == '2'\nassert solution('3 0\\n0 2\\n0 1\\n') == '1'\nassert solution('3 0\\n0 2\\n0 3\\n') == '0'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0') == '1'\nassert solution('2 0\\n0 1') == '0 1'\nassert solution('2 0\\n0 1\\n0 2') == '0 1 2'\nassert solution('2 0\\n0 1\\n0 2\\n0 3') == '0 1 2 3'"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n0 0 0\n1 1\n''') == 'ok'\nassert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'crash'\n'''"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''\n0 0 0\n0 1 0\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example_input_1) == \"ok\"\nassert solution(example_input_2) == \"ok\"\nprint('\"\\n\"'.join(solution(input) for input in sample_inputs))\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0\n''') == 'ok'\nassert solution('''1\n0 0 0\n0 0 0\n''') == 'crash'\n'''"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n0 0 0\n0 1.5 0\n0 2 0\n\"\"\") == \"ok\"\n\nassert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"crash\"\n\nassert solution(\"\"\"\n4\n0 0 0\n0 1.5 0\n0 2 0\n0 0 0\n\"\"\") == \"crash\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\nassert solution(\"\"\"\n3\n-1.7 0.1 0.1\n0.1 1.7 0.1\n0.1 0.1 1.7\n\"\"\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 0\n1 2 3\n''') == 'ok'\nassert solution('''\n2 2 0\n0 2 0\n''') == 'ok'\nassert solution('''\n4 3\n-2 3 1 0\n0 0 1 1\n-1 -1 1 1\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input) == \"ok\"\nassert solution(input) == \"crash\"\nprint(solution(input))\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input.split('\\n')) == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'ok'\nassert solution('3') == 'ok'\nassert solution('4') == 'crash'\nassert solution('5') == 'crash'\nassert solution('6') == 'crash'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '1'\n\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '1'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == \"2\"\nassert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == \"3\"\nassert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == \"0\"\nassert solution('10 2\\n1 2\\n2 2\\n3 3\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10') == \"6\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''4 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '4'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '2'\nassert solution('1 2') == '2'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 1') == '1'\nassert solution('5 4') == '4'\nassert solution('5 4') == '3'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\") == \"2\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"20 3\") == \"4\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n3 3\\n0 1\") == \"0 2\\n1 3\"\n\"\"\"\nfrom typing import List\n\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 3 3 3') == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n10 10 10 10\nA B C D E F G\nH I J K L M N O\nP Q R S T U V W X\nY Z AA BB CC DD EE FF\n''') == '5'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n7 5 4 3\nA B C\nD E F\nG H I\nJ K L\nM N O\nP Q R S\nT U V\nX Y Z\n''') == '4'\n'''\n\nimport itertools\n\nn = int(input())\nr = int(input())\nf = int(input())\nt = int(input())\n\nstates = list(map(str, input().split()))\n\nfactory = list(map(str, input().split()))\n\ntransport = []\nfor _ in range(t):\n    line = list(map(str, input().split()))\n    transport.append(line)\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\nassert solution(\"7 3 3 3\") == \"2\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n3\nA A B B\nA A C A\nB A C A\n''') == '2'\nassert solution('''\n7 2 3 1\nB A C\nD E F\n''') == '1'\nassert solution('''\n7 2 3 2\nB A C\nD E F\n''') == '0'\n'''\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('10 10 10 1') == '1'\nassert solution('5 10 10 10 10') == '2'\nassert solution
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('8 1 6 1') == '1'\nassert solution('7 0 0 3') == '3'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\nassert solution('''\n10 5 5 5\nAA AB AC AD\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\nAA BA BB BC BA\n''') == '3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY\\n') == '2 1 3\\n1 2 3\\n'\nassert solution('4\\nNYY\\nYNY\\nYYY\\n') == '3 1 2\\n1 2 3\\n3 1 2\\n'"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nYYY\nNYY\nYNY\n''') == '3 1 2'\nassert solution('''\nYYY\nNYY\nYNY\nYYY\n''') == '4 1 2 3'\nassert solution('''\nYYY\nNYY\nYNY\nYYY\n''') == '1 2 3 4'\nassert solution('''\nYYY\nNYY\nYNY\nYYY\nYYY\n''') == '5 1 2 3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nYYY\\nNYY\\nYNY') == '2 1 2'\nassert solution('5\\nYYY\\nNYY\\nYNY\\nYYY\\nYNN') == '3 1 2 3 3'\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n\nassert Solution().solve('3\\nYYY\\nNYY\\nYNY') == '2 1 2'\nassert Solution().solve('5\\nYYY\\nNYY\\nYNY\\nYYY\\nYNN') == '3 1 2 3 3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    YYY\n    NYY\n    YNY\n''') == '2 1 2'\nassert solution('''\n    YYY\n    NYY\n    YYY\n''') == '3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\nYYY\nNYY\nYNY\n''') == '''1 2 3'''\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nYYY\\nNYY\\nYNY') == '2 1 2'\nassert solution('3\\nYYY\\nNYY\\nYNY') == '3 1 2'\nassert solution('3\\nYYY\\nYYY\\nYNY') == '3 1 2'\nassert solution('3\\nYYY\\nYYY\\nYYY') == '3 1 2'\nassert solution('3\\nYYY\\nYYY\\nYYY') == '3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n') == '1 1 2'\nassert solution('4\\nNYY\\nNYY\\nYNY\\n') == '3 1 2 3'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nYYY\\nNYY\\nYNY\\n\") == \"3\\n1 2 3\\n3 1 2\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '3 3\\n'\n    'x..\\n'\n    '...\\n'\n    '...\\n'\n    '3\\n'\n    '1 3\\n'\n    '1 1\\n'\n    '3 2\\n'\n) == '4\\n0\\n5\\n'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"4\\n0\\n5\\n\"\nassert solution(\"5 7\") == \"6\\n6\\n4\\n3\\n0\\n\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '4\\n0\\n5'\nassert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '4\\n0\\n5'\n'''\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == \"4 0 5\"\nassert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == \"4 0 5\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4\\n0\\n5\\n\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4 0 5\"\n\nassert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"0 4 5\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"\"\"\n4\n0\n5\n\"\"\".strip()\n\nassert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"\"\"\n4\n0\n5\n\"\"\".strip()\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2\\n') == '4\\n0\\n5\\n'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n\"\"\") == \"4 0 5\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0.000 -0.000'\nassert solution('3') == '0.000 -0.000'\nassert solution('4') == '0.000 -0.000'\nassert solution('5') == '0.000 -0.000'\nassert solution('6') == '0.000 -0.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n10 2\\n10 10\\n') == '4.114 -2.842\\n4.922 -1.846\\n6.000 -0.784\\n5.000 3.000'\nassert solution('5\\n5\\n2\\n5\\n4 5\\n') == '1.874 -1.906\\n3.924 -2.005\\n4.922 -1.846\\n4.922 -1.846\\n4.922 -1.846\\n4.922 -1.846\\n4.922 -1.846\\n4.922 -1.846\\n5.000 3.000'\nassert solution('10\\n1\\n1\\n9\\n3 3\\n4 5\\n3 2\\n3 3\\n5 4\\n8 7\\n8 4\\n2 5\\n9 2\\n7 8\\n') == '0.947 -1.382\\n0.856 -1.376\\n0.840 -1.375\\n0.840 -1.375\\n0.840 -1.375\\n0.840 -1.375\\n0.840 -1.375\\n0.840 -1.375\\n0.840 -1.375\\n1.000 3.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '-1.0 0.0'\nassert solution('2') == '3.0 -1.0'\nassert solution('3') == '2.0 -1.0'\nassert solution('4') == '2.0 2.0'\nassert solution('5') == '1.0 2.0'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\n\n\"\"\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4.114 -2.842\"\nassert solution(\"4\") == \"6.297 -0.784\"\nassert solution(\"5\") == \"5.000 3.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n\"\n    \"5\\n\"\n    \"3\\n\"\n    \"4\\n\"\n    \"5 3\\n\"\n) == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\n\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n    \"10\\n\"\n    \"10 1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"1\\n\"\n    \"10\\n\"\n    \"10 0\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"1\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"1\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"4\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"4\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"5\\n\"\n    \"5\\n\"\n    \"10\\n\"\n    \"10 5\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"4\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\""
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n5\n3\n4\n5 3\"\"\") == \"4.114 -2.842\"\n\nassert solution(\"\"\"\n3\n5\n3\n4\n5 3\"\"\") == \"6.297 -0.784\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\"\"\") == \"1.118 2.037\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4.114 -2.842\"\nassert solution(\"10\") == \"6.297 -0.784\"\nassert solution(\"3\") == \"4.114 -2.842\"\nassert solution(\"1\") == \"0.000 0.000\"\nassert solution(\"5\") == \"6.297 -0.784\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == '4.114 -2.842'\n\nassert solution('''\n3\n4\n5\n4\n5 3\n''') == '6.297 -0.784'\n\nassert solution('''\n3\n2\n3\n4\n5 3\n''') == '1.118 2.037'\n\nassert solution('''\n3\n1\n2\n3\n4 5\n''') == '0.000 -0.000'\n\nassert solution('''\n3\n1\n2\n3\n4 5\n''') == '5.000 3.000'"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1.118 2.037'\nassert solution('1') == '1.118 2.037'\nassert solution('2') == '5.000 3.000'"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5') == '3'\nassert solution('2 3 5 7') == '5'\nassert solution('2') == '2'\nassert solution('5') == '5'\nassert solution('6') == '8'\n\n'''\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"6 6\") == \"6\"\nassert solution(\"1\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10 6\n3 3\n4\n7\n3\n8\n6\n4\n3\n5\n5\n10\n\"\"\") == \"13\"\nassert solution(\"\"\"\n3 3\n1\n5\n3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 4\n2 3\n3\n4\n5\n6\n7\n8\n9\n10\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\") == \"14\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4') == '3'\nassert solution('2 5') == '5'\nassert solution('3 3') == '3'\nassert solution('3 5') == '6'\nassert solution('4 5') == '9'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5') == '3'\nassert solution('2 4') == '5'\nassert solution('2 7') == '8'\nassert solution('5 6') == '10'\nassert solution('5 8') == '13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"3\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"6 5\") == \"8\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('10 10') == '13'\nassert solution('5 2') == '5'\nassert solution('10 10') == '13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\\n10\\n13\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\\n10\\n13\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5') == '8'\nassert solution('3 4') == '7'\nassert solution('5 2') == '3'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 2') == '0'\nassert solution('3 1\\n0 1\\n1 2') == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1\\n') == '0'\nassert solution('3 4\\n0 1\\n2 3\\n1 2 3\\n') == '1'\nassert solution('3 2\\n1 2\\n2 3\\n1 2 3') == '1'\nassert solution('3 1\\n1 2\\n2 3\\n1 2 3') == '1'\n\n\"\"\"\n\n\"\"\"\nThis solution actually runs in O(n^2) because it does so by checking every possible path, so we have to calculate every path. This is a very inefficient solution.\n\nBut it might run in O(n^2) because we are checking every possible path, so we can actually print the path in O(n) time. But this is just one wrong solution.\n\nWe are only checking every possible path, so we will have to multiply by 2 to account for the other path to get the total number of moves.\n\"\"\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution('''\n3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n''') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1') == '0'\n\"\"\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n''') == '0'\nassert solution('''\n5 3\n0 1\n1 2\n2 3\n2 4\n1 5\n''') == '1'\nassert solution('''\n10 4\n0 1\n2 3\n3 4\n5 6\n7 8\n9 10\n1 3\n6 7\n8 9\n''') == '1'\n'''"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7 7\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n1 5 1\n1 2 5\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '106\\n107\\n71\\n', \"Wrong\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"106\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\nassert solution('2 2\\n8 1 1 2 1\\n1 1 2 1 1\\n1 1 3 1 2\\n1 1 4 1 3\\n1 1 5 1 4\\n1 1 6 1 5\\n1 1 7 1 6\\n1 1 8 1 7\\n1 1 9 1 8\\n1 1 10 1 9\\n1 2 2 1 10\\n1 2 3 1 9\\n1 2 4 1 8\\n1 2 5 1 7\\n1 2 6 1 6\\n1 2 7 1 5\\n1 2 8 1 4\\n1 2 9 1 3\\n1 2 10 1 2\\n1 3 3 1 1\\n1 3 4 1 2\\n1 3 5 1 3\\n1 3 6 1 4\\n1 3 7 1 5\\n1 3 8 1 6\\n1 3 9 1 7\\n1 3 10 1 8\\n1 4 4 1 1\\n1 4 5 1 2\\n1 4 6 1 3\\n1 4 7 1 4\\n1 4 8 1 5\\n1 4 9 1 6\\n1 4 10 1 7\\n1 5 5 1 1\\n1 5 6 1 2\\n1 5 7 1 3\\n1 5 8 1 4\\n1 5 9 1 5\\n1 5 10 1 6\\n1 6 6 1 1\\n1 6 7 1 2\\n1 6 8 1 3\\n1 6 9 1 4\\n1 6 10 1 5\\n1 7 7 1 1\\n1 7 8 1 2\\n1 7 9 1 3\\n1 7 10 1 4\\n1 8 8 1 1\\n1 8 9 1 2\\n1 8 10 1 3\\n1 9 9 1 1\\n1 9 10 1 2\\n1 10 10 1 3') == '107\\n108\\n108\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"106\\n107\\n71\\n\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"106\"\nassert solution(\n\"\"\"\n2 1\n1 100 C1\n1 100 C1\n\"\"\"\n) == \"106\"\nassert solution(\n\"\"\"\n2 3\n100 2 100 1\n100 3 100 2\n\"\"\"\n) == \"106\"\nassert solution(\n\"\"\"\n3 1\n1 5 C1 L1 C1 U1 C1\n1 100 C1 L1 U1 C1 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"106\"\nassert solution(\n\"\"\"\n3 1\n1 5 C1 L1 C1 U1 C1\n1 100 C1 L1 U1 C1 U1 C1\n70 3 1 C1\n\"\"\"\n) == \"106\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\nSample Input:\n5 3\n50 3 2 L1 C1 L1 C1 U1 L1 U1 L1 C1\n1 4 3 C1\n2 3 2 L1 L1 L1 U1 L1\nSample Output:\n106\n107\n71\n''') == '107'\nassert solution('''\n5 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\nSample Input:\n5 3\n50 2 5 C1 L1 C1 U1 C1\n1 4 3 C1\n2 3 2 L1 L1 L1 U1 L1\nSample Output:\n106\n107\n71\n''') == '107'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '107\\n'\nassert solution('3 1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '107\\n'\nassert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n') == '107\\n'\nassert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '107\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 5 1 3 5 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5 1 1 5"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"106\\n107\\n71\""
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\nassert solution('10 2\\n1 1 5 C1 L1 C100 U1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n71 3 1 C1\\n1 2 5 C2 L1 C1 U1 C1\\n7 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n1 1"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('AA') == '51'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AA') == '51'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AA') == '51'\nassert solution('BB') == '16'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''AA\n    ''') == '51'\n\nassert solution('''AAAA''') == '51'\n\nassert solution('''BBBBB\n    ''') == '42'\n\nassert solution('''LOL\n    ''') == '26'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AA\") == \"1\"\nassert solution(\"AA\") == \"1\"\nassert solution(\"ABABAB\") == \"6\"\nassert solution(\"AAABB\") == \"5\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AA') == '51'"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AA\") == \"AAC\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('ABAB') == '1', \"First\"\nassert solution('ABCD') == '6', \"Second\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AA') == '51'\nassert solution('AA') == '51'\n'''"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AA') == '51'\nassert solution('AA') == '51'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n12 34\n1 2 3 4\n\"\"\") == \"2 1\"\nassert solution(\"\"\"\n3\n2 7\n1 2 3\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2\n1 9\n1 2 3\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n5\n8 2 1 3 4\n7 5 8 9 10\n6 4 7 2 1\n5 7 2 4 3\n4 5 6 7 8\n\"\"\") == \"4 5\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"no ties\"\nassert solution(\"3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\") == \"2 3\"\nassert solution(\"2 4\\n2 3\\n3 4\\n\") == \"no ties\"\nassert solution(\"1 1\\n1 1\") == \"no ties\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\n14 23 39 59 63\n8 17 35 55 61\n15 26 42 53 71\n10 25 31 57 64\n6 20 44 52 68\n''') == '1 2'\n\nassert solution('''\n4\n7 9 12 17\n11 13 14 17\n10 13 14 17\n9 13 14 17\n8 13 14 17\n7 13 14 17\n\n14 13 14 17\n10 13 14 17\n11 13 14 17\n9 13 14 17\n8 13 14 17\n7 13 14 17\n''') == '1 2 3 4'\n\nassert solution('''\n7\n12 12 12 12 12 12 12\n11 11 11 11 11 11 11\n10 10 10 10 10 10 10\n9 9 9 9 9 9 9 9\n8 8 8 8 8 8 8 8\n7 7 7 7 7 7 7 7\n\n12 12 12 12 12 12 12\n11 11 11 11 11 11 11\n10 10 10 10 10 10 10\n9 9 9 9 9 9 9 9\n8 8 8 8 8 8 8 8\n7 7 7 7 7 7 7 7\n\n''') == '2 3'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == \"no ties\"\nassert solution('3') == \"1 2\"\nassert solution('4') == \"2 3\"\nassert solution('5') == \"1 2 3 4\"\nassert solution('6') == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'no ties'\nassert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '2 3'\nassert solution('2\\n6 2 2 2 2 2 2 2 2 2\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1') == '1 2'\nassert solution('20\\n9 9 8 5 9 8 7 8 9 6 8 8 5 3\\n9 8 7 4 3 1 7 8 7 9 5 3 8\\n9 7 8 8 8 8 6 6 7 8 9 4 2\\n9 7 8 7 5 4 3 8 8 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n9 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"4\") == \"1 2\"\nassert solution(\"10\") == \"1 2\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n10 5\n7 9 6\n3 2 4\n1 7 8\n2 9 0\n1 7 4\n5 3 2\n6 9 0\n7 5 6\n''') == '7 5'\nassert solution('''\n5 5\n5 4 1\n3 5 0\n4 6 1\n3 1 1\n4 2 5\n''') == '4 2'\nassert solution('''\n3 1\n3 4\n1 2\n4 2\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n2 4\n2 3\n2 5\n1 2\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n3 3\n2 1 1\n1 3\n3 2\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n4 7\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n2 6\n1 1 1 1 1\n1 2\n\"\"\") == \"1 2\""
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nassert solution('2\\n3 2 1\\n1 2 3\\n3 1 2') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0'\nassert solution('''3\n3 2 1\n2 3 2\n2 3 2''') == '1'\n'''"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n3 2 1\n2 3 1\n1 2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '0'\nassert solution('3\\n2 1\\n1 2\\n1 2 3') == '1'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n2 2 1\n1 2 3\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0'\nassert solution('2') == '1'\nassert solution('3 2 1') == '0'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\\n2\") == '1'\nassert solution(\"1\\n2\\n1\\n2\") == '2'\n\nassert solution(\"1\\n3\\n1\\n2\\n1\\n2\\n3\") == '1'\nassert solution(\"2\\n2\\n1\\n1\\n1\\n2\\n2\") == '2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    3 2 1\n    1 2 3\n    1 2 3\n''') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 1\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3 5 4\n2 4 8''') == '0.171428571429'\nassert solution('''3\n3 5 4\n2 4 8''') == '0.228571428571'\nassert solution('''4\n3 5 4\n2 4 8''') == '0.2'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.4'\nassert solution('2') == '0.2'\nassert solution('3') == '0.171428571429'\nassert solution('4') == '0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n4 4 6\n''') == '0.16666666666667'\nassert solution('''3\n1 2 3\n4 3 2\n5 1 2\n''') == '0.0833333333333'\n\n'''\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0.4\"\nassert solution(\"1 2 3\") == \"0.4\"\nassert solution(\"6 2 3\") == \"0.2\"\nassert solution(\"10 2 3\") == \"0.171428571429\"\nassert solution(\"16 3 4\") == \"0.228571428571\""
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n5 3\\n10 2 3\\n16 3 4') == '0.2'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'\nassert solution('''\n3\n1 2\n2 3\n1 3\n''') == '0.4\\n0.2\\n0.2\\n'"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n') == '0.4\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.2'\nassert solution('6') == '0.5'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0'\nassert solution('10 2 3') == '0.2'\nassert solution('16 3 4') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0'\nassert solution('10 2 3') == '0.2'\nassert solution('16 3 4') == '0.171428571429'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('5\\n5 5 5 5 5') == 'impossible'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1 + 5 = 6'\nassert solution('4') == '3 * 3 = 9'\nassert solution('5') == '4 - 5 = -1'\nassert solution('10') == '1 + 5 = 6'"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4\n''') == '2 * 3 = 9'\nassert solution('''3\n1 2\n2 3\n3 4\n''') == '3 + 3 = 6'\nassert solution('''4\n1 2\n2 3\n3 4\n''') == '3 * 3 = 9'\nassert solution('''2\n1 2\n2 3\n''') == 'Impossible'\n'''"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n'\nassert solution('3\\n5 3\\n1 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n-1 - -6 = 5\\n'\nassert solution('1\\n2 2\\n1 1\\n2 1') == '1 + 1 = 2\\n2 * 2 = 4\\n2 + 2 = 4\\n'\nassert solution('3\\n4 4\\n5 5\\n6 6') == '5 + 5 = 10\\n4 * 4 = 16\\n6 + 6 = 10\\n'\nassert solution('1\\n2 2\\n3 3\\n4 4') == '1 + 1 = 2\\n2 * 2 = 4\\n3 * 3 = 9\\n4 + 4 = 8\\n'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'impossible'\nassert solution('4') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\ninput:\n4\n1 5\n3 3\n4 5\n-1 -6\n\noutput:\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\nSample Input:\n3\n4 5\n2 2\n2 3\n\nSample Output:\nImpossible\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n5\n3\n3\n4\n5\n-1\n-6\n''') == '''1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n'''\n\nassert solution('''\n3\n1 2\n3 2\n2 1\n''') == '''1 + 2 = 3\n3 * 2 = 6\n2 * 1 = 2\n'''\n\nassert solution('''\n4\n2 5\n2 5\n4 3\n4 3\n''') == '''2 + 5 = 7\n2 * 3 = 6\n3 * 2 = 6\n4 * 4 = 16\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n2\n3 5\n3 3\n1 2\nSample Output:\n3 + 3 = 6\n1 * 2 = 2\n'''\n) == '1 + 5 = 6\\n2 * 2 = 4\\n'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1 + 3 = 5\"\n\n\"\"\"\nimport itertools\n\nnum = int(input())\nfor i in itertools.permutations(range(1, num + 1), num):\n    print(i)\n\nprint('impossible')\n\n\"\"\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n\nassert solution(\"5\\n1 5\\n3 3\\n4 5\\n-1 -6\\n\") == \"impossible\"\n\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\\n\") == \"impossible\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n4 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n3 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\\n2 2\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0'\nassert solution('10 20') == '14\\n14\\n14\\n14\\n14\\n14\\n14\\n14\\n14\\n14'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"4\\n1\\n4\\n6\\n0\\n\"\nassert solution(\"2 2\") == \"0\\n0\\n\"\nassert solution(\"1 1\") == \"1\\n1\\n\"\nassert solution(\"10 10\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\\n\"\nassert solution(\"5 1\\n10 10\\n20 20\\n30 30\\n40 40\") == \"0\\n0\\n0\\n0\\n0\\n\""
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0'\nassert solution('1 5') == '0'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"1\\n4\\n6\\n0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '4'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '''0\n1\n4\n6\n0'''\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '4\\n1'\nassert solution('1 2 3') == '0\\n0\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '0 1 4'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '4'\nassert solution('3 3') == '4'\nassert solution('2 3') == '2'\nassert solution('5 8') == '3'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n-1 -1 1\n-1 -1 -1\n-1 -1 -1\n-1 1 1\n1 2 3\n1 2 1\n1 -1 1\n1 1 1''') == \"6\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '1\nassert solution('''\n4\n1 2 3 4\n''') == '1\nassert solution('''\n5\n1 2 3 4 5\n''') == '2\n'''"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 3 4 5') == '4'\nassert solution('1 2 3 4 -1') == '3'\nassert solution('1 2 3 4 5 -1') == '2'\nassert solution('1 2 3 4 5 -1 -1') == '0'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2\\n3 4') == '4'\nassert solution('100000\\n1 2 3 4 5 6 7 8 9') == '1539768750'\nassert solution('5\\n1 2 3 4 5') == '1'\nassert solution('5\\n1 2 3 4 5\\n1 1 1 1 1') == '0'\nassert solution('5\\n1 2 3 4 5\\n1 2 3 4 5') == '3'\n\"\"\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(1) == 4\nassert solution(2) == 2\nassert solution(3) == 3"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('3\\n1 2 3') == '0'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\nassert solution('3\\n2 4 3') == '0'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '8'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '9'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99') == '104'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6\n1 2 3 4 5 6\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 4 3') == '3'\nassert solution('6\\n7 1 2 4 8 9') == '8'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 31 2\n20 60\n50 90\n''') == '4 3'\n\nassert solution('''1 31 3\n10 20\n10 20\n10 20\n''') == '6 1'\n\nassert solution('''1 60 1\n60 60\n60 60\n60 60\n''') == '3 1'\n\nassert solution('''1 60 1\n60 60\n60 60\n60 60\n''') == '3 1'\n\nassert solution('''1 31 2\n20 60\n50 90\n''') == '4 3'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 31 2\\n20 60\\n50 90\") == \"4 3\"\nassert solution(\"2 100 3\\n10 40\\n10 50\") == \"1 2\"\nassert solution(\"2 50 3\\n30 30\\n20 20\") == \"2 0\"\nassert solution(\"3 1000 3\\n0 1000\\n0 1000\\n1 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n0 1000\\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 20 2\n20 60\n50 90\n''') == '3 4'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 31 2\n20 60\n50 90''') == '4 3'''"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1 3\"\nassert solution(\"31 2\") == \"2 1\"\nassert solution(\"20 60\") == \"2 3\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3 3'\nassert solution([5, 10, 10, 50, 40, 40, 20]) == '1 3'\nassert solution([5, 20, 10, 10, 40, 40, 20]) == '2 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 31 2\n20 60\n50 90\n''') == '4 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 31 2\n20 60\n50 90\"\"\") == \"4 3\"\nassert solution(\"\"\"3 11 2\n40 60\n50 90\"\"\") == \"3 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '6 3'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2'\nprint('Test passed')\n\nSample Input:\n1 15 2\n13 20\n30 50\nSample Output:\n1 2\n'''\n\nclass Solution:\n    def solution(self):\n        pass\n\nprint(Solution.solution(Solution, '''1 31 2\n20 60\n50 90\nSample Output:\n4 3\n'''))"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('3 2 1') == '6'\n\"\"\"\nimport sys"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''4 2 2''') == '8'\nassert solution('''2 4 4''') == '7'\nassert solution('''2 1 2''') == '2'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1\n1 1 2''') == \"3\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1 2 5\n3 4\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n3 6 8\n5 4\n\"\"\") == \"7\""
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''10 1 3''') == '11'\n\n'''\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '0', \"Example test\"\nassert solution('2 2 1') == '3', \"Second example test\"\nassert solution('3 3 2') == '6', \"Third example test\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"3\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 1 1\") == \"6\"\nassert solution(\"4 1 1\") == \"8\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 0') == '0'\nassert solution('2 2 2') == '3'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"3 3 3\") == \"6\"\nassert solution(\"5 5 2\") == \"6\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1341\\n2412\\n1200\\n3112\\n2391\\n') == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '3 1'\nassert solution('5 2 4 3') == '4 2'\nassert solution('5 2 5 3') == '4 1'\nassert solution('3') == '1 1 1 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1341 2412 1200 3112 2391\n''') == '1 3'\nassert solution('''\n1\n12\n''') == '2 2'\nassert solution('''\n1\n11\n''') == '1 3'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n1341 2412 1200 3112 2391\n\"\"\") == \"3 1\\n\"\nassert solution(\"\"\"3\n11\n10\n8\n\"\"\") == \"1 2\\n\"\nassert solution(\"\"\"1\n3\n2\n\"\"\") == \"1 1\\n\"\n\"\"\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391\\n') == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1341 2412 1200 3112 2391') == '3 1'\nassert solution('5\\n1341 2412 1200 3112 2391') == '3 2'\nassert solution('20\\n1341 2412 1200 3112 2391') == '2 1'\n\"\"\"\nimport sys\nimport os\n\nsys.path.append(os.path.dirname(__file__) + \"/../src\")\n\nfrom typings import List\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1341 2412 1200 3112 2391\n''') == '3 1'"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1341\\n2412\\n1200\\n3112\\n2391') == '3 1'\nassert solution('3\\n1 1 1 1') == '2 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1341 2412 1200 3112 2391\nSample Input 2:\n1\n1\nSample Output 2:\n0 1\n''') == '1 1'"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\n\n--Challenge: Solve the task using list, set, or dictionary data structures.--\n--\n-----\n\n-----\n\n------\n\n-----\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\nprint('all tests passed')\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"10 20\") == \"6\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"20 10\") == \"0\"\nassert solution(\"10 20 10\") == \"6\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 20') == '6'\nassert solution('5 10') == '10'\nassert solution('3 5') == '4'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([10, 20]) == '6'\nassert solution([3, 5]) == '6'\nassert solution([1, 3, 7]) == '4'\nassert solution([2, 1, 1]) == '2'\nassert solution([2, 3, 2]) == '3'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 20') == '6'\nassert solution('3 5') == '11'\nassert solution('1 3 7') == '4'\nassert solution('2 1 1') == '2'\nassert solution('2 3 2') == '5'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 20\") == \"6\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"2 1 1\") == \"0\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '6'\nassert solution('2 3') == '10'\nassert solution('3 5') == '10'\nassert solution('3 4') == '5'\nassert solution('3 1 1') == '5'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\n'''\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '6'\nassert solution('''\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '10'\nassert solution('''\n3 5\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '3'\nassert solution('''\n3 5\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n''') == '9'\n'''\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n2 ab b\n1 b\n''') == '0 1\\n-1 0'\n\nassert solution('''\n2\n1 ab b\n2 b\n''') == '0 1\\n-1 0'\n\nassert solution('''\n5\nab ac ab ac ab\nac ab ab\nac ab ab\nac ab ab\nab ac ab\n''') == '0 1\\n0 2\\n-1 0\\n0 1\\n-1 0'\n\nassert solution('''\n6\n2 ab ab ab ab\nab ab ab\nac ab ab\nab ab ab\nac ab ab\nab ab ab\n''') == '0 1\\n-1 0\\n0 2\\n-1 0\\n0 1\\n-1 0'\n\nassert solution('''\n8\nab ab ab ab ab\nab ab ab\nab ab ab\nab ab ab\nab ab ab\nab ab ab\nac ab ab\nab ab ab\n''') == '0 1\\n0 2\\n0 1\\n-1 0\\n0 1\\n-1 0\\n0 1\\n-1 0'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 ab b\") == \"1 1\"\nassert solution(\"2 ca b\") == \"0 2\"\n\"\"\"\nfrom collections import deque\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"3 a2 b4 ab b\\n1 b\\n2 c\\n2 c\") == \"-1 0 0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 ab b\n1 b\n\"\"\") == \"0 1\"\nassert solution(\"\"\"\n2 ab a\n1 a\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n1 b\n2 ab\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n3 d\n1 a\n\"\"\") == \"2 2\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\nab b\n1 b\n\"\"\") == \"0 1 \n\"\"\"-1 0\n\"\"\".strip())\n\nassert solution(\"\"\"\n4\na b ab c\n1 b\n\"\"\") == \"0 2 \n\"\"\"-1 0\n\"\"\".strip())\n\nassert solution(\"\"\"\n4\na b a\n1 b\n\"\"\") == \"0 2 \n\"\"\"-1 0\n\"\"\".strip())\n\nassert solution(\"\"\"\n4\na b c a\n1 b\n\"\"\") == \"0 1 \n\"\"\"-1 0\n\"\"\".strip())\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0 1'\nassert solution('3 3') == '-1 -1'\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        num_pos = int(stdin.strip())\n        positions = {i: set() for i in range(1, num_pos + 1)}\n        for i in range(num_pos):\n            line = stdin.strip().split()\n            line = list(map(int, line))\n            for j in range(line[0]):\n                positions[i + 1].add(j + 1)\n        \n        to_solve = list(positions.keys())\n        to_solve.sort()\n        answers = [1] * len(to_solve)\n        def get_num(num):\n            for i,p in enumerate(to_solve):\n                if num >= p:\n                    return i\n            return -1\n        def get_pos(num):\n            for i,p in enumerate(to_solve):\n                if num == p:\n                    return i\n            return -1\n        def get_minimum(pos_set):\n            ans = 10\n            for pos in pos_set:\n                ans = min(ans, answers[get_pos(pos)])\n            return ans\n        \n        for i,p in enumerate(to_solve):\n            answers[i] = get_minimum(positions[p])\n        \n        return '\\n'.join(map(str, answers))"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 ab b\\n1 b\") == \"0 1\"\nassert solution(\"2 ab b\\n1 b\\n\") == \"0 1\"\nassert solution(\"2 ab b\\n1 b\\n2\") == \"0 1\"\nassert solution(\"2 ab b\\n1 b\\n2\\n2\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 ab\n1 b\n2 ab\n''') == '0 1 -1'\n\nassert solution('''\n5 ab a\n1 b\n2 b\n''') == '-1 0 1 1 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"2 ab a\") == \"-1 0\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 1 2\\n2') == '3'\nassert solution('2 4\\n1 1 2\\n2\\n') == '8'\nassert solution('2 4\\n1 1 2\\n1 3 4\\n2') == '0.5'\n\n\"\"\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"1\"\nassert solution(\"2 4\\n1 1 2\\n2\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\\n2\") == \"1\"\nassert solution(\"1 1 2\\n2\") == \"3\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2\\n1 1 2\\n2\") == \"3\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\"\"\") == \"0.3333333333333333333333333\"\nassert solution(\"\"\"\n5\n2 1 2 1 3\n1 3\n2 3\n2 4\n2 5\n\"\"\") == \"0.666667\"\nassert solution(\"\"\"\n3\n2 1\n1 2\n2\n\"\"\") == \"0.25\"\nassert solution(\"\"\"\n10\n2 1 2 1 3 4 5 6 7 8 9 10\n1 3\n2 3\n2 4\n2 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\"\"\") == \"0.333333333333333333333333333\"\nassert solution(\"\"\"\n5\n4 1\n2 3\n2 4\n1 5\n\"\"\") == \"0.333333333333333333333333333\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4\n1 1 2\n2\n1 1 2\n2\n''') == '3', 'Failed test'\n\nassert solution('''\n2 4\n1 1 2\n1 1 2\n2\n''') == '1', 'Failed test'\n\nassert solution('''\n2 4\n1 1 2\n1 1 2\n2\n''') == '3', 'Failed test'\n\nassert solution('''\n2 4\n1 1 2\n1 1 2\n2\n''') == '1', 'Failed test'"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2\n1 1 2\n2''') == '3'\nassert solution('''1 2\n1 1 2\n2''') == '1'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2') == '1'\nassert solution('2') == '3'\nprint('You are passed!')"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n\") == \"1\\n3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n\") == \"1\\n3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7', \"LeetCode\"\nassert solution('''\n3\n5 0 4\n2 4 0\n''') == '7', \"LeetCode\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n5\\n2\\n4\\n0\\n') == '7\\n'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 5 2\\n5 0 4\\n2 4 0\\n') == '7'\nassert solution('5\\n0 1 2 3 4\\n0\\n1\\n2\\n3\\n4\\n') == '3'\nassert solution('5\\n0 1 2 3 4\\n0\\n1\\n2\\n3\\n4\\n') == '4'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0\\n') == '7'\nassert solution('100\\n0 5 2\\n5 0 4\\n2 4 0\\n') == '400'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '8'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 5 2') == '7'\nassert solution('5\\n0 5 2\\n5 4 2\\n2 4 0') == '7'\nassert solution('5\\n0 5 2\\n2 4 0\\n5 4 2') == '7'\n\"\"\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 1 1') == '2'\nassert solution('2 2 2') == '3'\nassert solution('1 1 1') == '2'\nassert solution('1 2 2') == '3'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '5'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nX = stdin.readline().strip()\nk = stdin.readline().strip()\n\nX = int(X)\nk = int(k)"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2147483647') == '2'\nassert solution('1099511627776') == '9'\nassert solution('9') == '1'\nassert solution('15') == '10'\nassert solution('7') == '5'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '8'\nassert solution('-9') == '8'\nassert solution('13') == '13'"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1\") == \"3\"\nassert solution(\"1\") == \"4\"\nassert solution(\"1\") == \"5\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('3') == '3'\nassert solution('5') == '4'\nassert solution('10') == '1'\nassert solution('100') == '4'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9') == '1'\nassert solution('12') == '3'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('11000000') == '8'"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('3') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"12345678901\") == \"48\"\nassert solution(\"0000000000\") == \"48\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\nassert solution(\"x..\") == \"2\"\nassert solution(\"x.x\") == \"2\"\nassert solution(\"x.x.x\") == \"2\"\nassert solution(\"xx.x.x.x.x.x.x.x.x\") == \"1\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3 3\n    x.x.x\n    x.x.x\n    x.x.x\n''') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n.x.\nx.x\nx.x''') == '2'\n\nassert solution('''5 3\n.x.\n.x.\n.x.\n.x.\n.x.\n''') == '1'\n\nassert solution('''10 20\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x."
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n2.2') == '1'\nassert solution('1 1\\n2.2') == '0'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution(\"x.x.x.x\") == \"2\"\nassert solution(\"xx.x.x.x\") == \"1\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 3 2\") == \"9\"\nassert solution(\"4\\n0 0 0\\n2 2 4\\n3 5 0\\n\") == \"-1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\\n\""
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\\n5 6 7\\n3 0 0\") == \"9\"\nassert solution(\"5\\n1 2 3\\n5 6 7\\n3 0 0\") == \"6\"\nassert solution(\"3\\n3 4 2\\n5 2 3\\n4 1 0\\n4 0 0\") == \"-1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\nassert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '6'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\nassert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '-1'"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1'\nassert solution('6\\n0 0 0\\n1 2 3\\n1 3 4\\n2 4 5\\n3 6 7') == '21\\n32'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\nassert solution('6\\n0 0 0\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '-1\\n9\\n6\\n'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '9'\nassert solution('1 2 3') == '-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"\"\"9\"\"\"\nassert solution(\"\"\"\n10\n1 6 2\n2 3 1\n3 0 0\n4 7 1\n5 7 5\n6 7 5\n7 7 7\n8 2 8\n9 2 6\n10 4 8\n\"\"\") == \"\"\"-1\"\"\"\nassert solution(\"\"\"\n0\n0\n\"\"\") == \"\"\"0\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"3\n1 1 40 30 20 10\n2 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"158\"\nassert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"158\"\nassert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"158\"\nassert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"358\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n1 1 100 100 100 10\n\"\"\") == \"6091\"\nassert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"6092\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '104'\nassert solution('3 2 5 8 1 4 2 6') == '104'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"91\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"120\"\nassert solution(\"5\") == \"20\"\n\"\"\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"91\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n5\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n3 1 50 50 10\n\"\"\") == \"1913\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\nassert solution('''\n2\n1 0\n2 0\n''') == '0'\nassert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '4'\nassert solution('''\n2\n1 0\n2 0\n''') == '0'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == \"91\"\n'''\n\nn = int(input())\nd = [[0]*(n+1) for i in range(n+1)]\nfor i in range(n):\n    a,b = map(int,input().split())\n    d[a][b]=1\n\ndp = [[0]*(n+1) for i in range(n+1)]\nfor i in range(1,n+1):\n    for j in range(1,n+1):\n        if d[i][j]==0:\n            continue\n        if i==j:\n            dp[i][j]=d[i][j]\n        else:\n            dp[i][j]=max(dp[i][j-1],dp[i-1][j-1])+d[i][j]\nprint(dp[n][n])\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '91'\nprint('All test cases passed.')\n\n'''\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n') == '91'\nassert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20\\n') == '1010'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    2\n    15 20\n    0\n    1 1\n''') == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n15 20\n0\n1 1\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n2\n15 20\n1\n2\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"15\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '15'\nassert solution('10') == '1'\nassert solution('50') == '4'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n5 5\n0\n1 1\n1 2\n2 2\n3 3\n3 4\n4 4\n5 5\n6 6\n\"\"\") == \"15\"\nassert solution(\"\"\"\n4\n8 8 8\n0\n1 1\n1 1\n1 1\n2 2\n2 2\n3 3\n3 3\n4 4\n4 4\n5 5\n5 5\n5 5\n6 6\n\"\"\") == \"24\"\nassert solution(\"\"\"\n8\n0\n1 1\n1 1\n1 1\n2 2\n2 2\n3 3\n3 3\n4 4\n4 4\n5 5\n5 5\n5 5\n6 6\n\"\"\") == \"9\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"16\"\n\n--- Part Two ---\nAs the CEO of BAAS\u2019 airport security, the company would like to know the minimum time required to complete a certain step. The CEO would like to be able to reduce the time needed to complete a certain step to a smaller time than if the step had no dependencies. As a result, the CEO would like to understand the minimum amount of time that has to be spent to build a certain step.\n\nFor instance, if the step had a dependency on step 2, then the CEO would need to spend at least 2 more minutes to build it.\n\nWrite a function that takes in the number of steps in the build process and returns the minimum amount of time in minutes that needs to be spent to build the step.\n\nThe time spent by the CEO on each step may change in the future, if the CEO wants to improve the speed of building a step. As the CEO must know the exact amount of time required to build a step, it is important to provide a function that returns the minimum time it would take to build a step.\n\nYou can assume that the input will be a single step, i.e. the step that is being built is not complete. Furthermore, you can assume that step 0 has no dependencies on any other step, and you can assume that there are no indirect dependencies.\n\n-----Input-----\nThe first line of the input contains an integer $N$ ($2 \\le N \\le 400$), the number of steps in the build process.\n\nThe next line contains the $N$ integers $a_1, a_2, \\dots, a_ N$ ($1 \\le a_ i \\le 10^5$), the number of seconds each of the $N$ steps takes in the build process.\n\nThe next line contains $N$ lines. The $i$\u2019th of these lines contains an integer $C_ i$ followed by $C_ i$ integers $A_1, \\dots, A_{C_ i}$ ($1 \\le A_ j < i$). The integers $A_ j$ denote what steps the $i$\u2019th step has a dependency on.\n\n-----Output-----\nOutput a single integer \u2013 the minimum amount of time it would take to build the step.\n\n-----Examples-----\nSample Input:\n2\n5\n1 0\n1 2\nSample Output:\n3"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '15'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 375\") == \"375\"\nassert solution(\"2 5 283\") == \"283\"\nassert solution(\"1 4 716\") == \"716\"\nassert solution(\"3 4 98\") == \"98\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 375\") == \"impossible\"\nassert solution(\"5 4\") == \"375\"\nassert solution(\"3 1 375\") == \"375\"\nassert solution(\"5 4\") == \"375\"\nassert solution(\"5 4\") == \"375\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == 'impossible'\nassert solution('1 4 716') == '1000'\nassert solution('3 4 98') == '125'\n\n'''\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 4\\n'\n    '3 1 375\\n'\n    '2 5 283\\n'\n    '1 4 716\\n'\n    '3 4 98\\n') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n1 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 5 2\\n1 4 716\\n3 4 98') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 4, 3, 1, 375, 2, 5, 283, 1, 4, 716, 3, 4, 98, 3, 4]) == \"impossible\"\nassert solution([1, 1, 1, 1, 1]) == \"impossible\"\nassert solution([1, 1, 1]) == \"impossible\"\nassert solution([1, 1, 1, 1]) == \"impossible\"\nassert solution([1, 2, 3, 4, 5]) == \"5\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('5 10\\n1 2 4 2\\n1 2 5 2\\n1 3 5 4\\n1 3 5 2\\n2 4 2 1\\n2 4 1 4\\n1 5 1 4\\n1 5 1 2\\n2 5 2 3\\n1 6 3 5\\n2 6 5 4\\n2 6 5 2\\n3 6 3 5\\n3 6 5 4\\n3 6 5 2\\n4 6 4 5\\n4 6 5 4\\n4 6 5 2\\n5 6 5 2\\n5 6 4 2\\n5 6 2 2\\n6 6 5 2\\n6 6 4 2\\n6 6 2 2\\n6 6 2 2\\n1 6 2 2\\n1 6 2 2') == 'impossible'"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''\n5 3\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == '0'\nassert solution('''\n4 1\n1 5\n5 4\n1 3\n''') == 'impossible'\nassert solution('''\n3 5\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == '375'\nassert solution('''\n3 5\n2 1 375\n1 4 716\n3 4 98\n''') == 'impossible'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == '1.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n''') == '1.000000000'\nassert solution('''\n10\n''') == '1.0'\nassert solution('''\n100\n''') == '2.0'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == \"1\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1.000000000'\nassert solution('2\\n') == '1.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"2.000000000\"\nassert solution('1') == \"1.000000000\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\nassert solution('3') == '3.000000000'\nassert solution('4') == '4.000000000'\nassert solution('5') == '5.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000'"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '0.9999999999'\nassert solution('3') == '0.9999999998'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1.000000000\"\nassert solution(\"2\") == \"1.000000000\"\nassert solution(\"3\") == \"1.000000000\"\nassert solution(\"4\") == \"1.000000000\"\nassert solution(\"5\") == \"1.000000000\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.000000000'\n\"\"\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == '2.000000000'\nassert solution('1 3 2') == '2.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3 10') == '2.000000000'\nassert solution('4 3 1 2') == '1.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5 10\") == \"46.00000000\"\nassert solution(\"1 3 10\") == \"4.00000000\"\nassert solution(\"1 1 1\") == \"0.00000000\"\nassert solution(\"3 3 1\") == \"1.00000000\"\nassert solution(\"3 3 2\") == \"3.00000000\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.000000000\"\nassert solution(\n    \"100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\") == \"115.000000000\"\nassert solution(\n    \"10 3 10\\n20 40 50\\n30 60 80\\n60 100 100\\n75 100 100\\n100 100 100\") == \"58.99999999\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7 20 3\n1 15 1\n1 10 2\n2 20 2\n2 10 2\n4 20 3\n3 20 3\n\"\"\") == \"115.000000000\"\nassert solution(\"\"\"\n8 1 2\n10 0 1\n5 5 5\n1 1 1\n\"\"\") == \"9.9999999999999\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '164.897280769'\nassert solution('40 3 2') == '244.0'\nassert solution('90 10 9') == '175.100000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 3 10\\n15 99 98\\n40 3 2\\n90 10 9\\n') == '115.000000000'\n\n'''"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100 3 10') == \"115.000000000\"\nassert solution('15 99 98') == \"116.000000000\"\nassert solution('40 3 2') == \"116.000000000\"\nassert solution('90 10 9') == \"97.999999998\"\nassert solution('10') == \"1\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '107.500000000'\nassert solution('40 3 2') == '7.8000000000'\nassert solution('90 10 9') == '5.3000000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n100 1 1\n100 1 1.5\n''') == '199.500000'\nassert solution('''\n3\n100 1 1\n100 1 1.5\n100 1 1.5\n''') == '199.500000'\nassert solution('''\n3\n100 1 1\n100 1 1.5\n100 1 1.5\n''') == '198.750000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n100 1 1\n100 1 1.5\n''') == '199.500000'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.5000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\n\n-------------------"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n100 1 1') == '199.500000'\nassert solution('1\\n100 1 1') == '200.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 2\\n1 1 2') == '199.500000'\nassert solution('2\\n1 1\\n1 1') == '199.500000'\nassert solution('1\\n0 1\\n0 1') == '199.500000'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n5 1 1 1 1\\n100 1 1 1') == '199.500000'\nassert solution('5\\n5 0 0 0 0\\n100 0 0 0') == '199.500000'\nassert solution('5\\n5 2 2 2 2\\n100 2 2 2') == '200.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\nassert solution(\"5\\n1 1 1\\n2 2 2\") == \"6.200000\"\n\nsolution(stdin)\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('3\\n100 1 1\\n100 1 1.5\\n100 1 1') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n100 1 1\\n100 1 1.5\") == \"199.500000\"\nassert solution(\"5\\n2 2 2 2 2\\n1 1 1 1 1\") == \"7.805000\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('2 2\\n1 2 3 4 5 6 7 8 9 10 11 12') == '2'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\nassert solution(\"2 5\\n2 6 3 4 5 6 7 8 9 10 11 12\") == \"2\"\n\"\"\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(r\"\"\"\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n1 2 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n1 1 1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n1 1 1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''\n4 5\n1 2 3 4 5 6 7 8 9 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''\n4 5\n1 2 3 4 5 6 7 8 9 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 10\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n100 100\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12''') == '1'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(open(\"test.in\").read().strip()) == \"1\"\nassert solution(open(\"test2.in\").read().strip()) == \"1\"\nassert solution(open(\"test3.in\").read().strip()) == \"4\"\nassert solution(open(\"test4.in\").read().strip()) == \"3\"\nprint(\"You passed all test cases!\")\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == \"1\""
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2\n5\n10\n25\n15''') == '5'\n\nassert solution('''1\n1\n5\n10\n25\n15\n''') == 'Impossible'\n\nassert solution('''12\n1 3\n5\n10\n15\n20\n25''') == '10'\n\nassert solution('''10\n1 3\n10\n10\n10''') == '10'\n\nassert solution('''8\n1 2\n5\n10\n25\n15\n20\n25''') == 'Impossible'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1 1\\n') == 'Impossible', solution\nassert solution('2 2 1 1\\n') == '5', solution\nassert solution('3 3 5 5\\n') == '8', solution\nassert solution('7 10 1 1\\n') == '10', solution"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 1 1') == 'Impossible'\nassert solution('13\\n3 2 1 1') == '5'\nassert solution('13\\n3 2 1 5') == 'Impossible'\nassert solution('15\\n10 2 1 1') == '10'\nassert solution('12\\n9 7 1 3') == '12'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"Impossible\"\nassert solution(\"1\\n2\\n1\\n1\") == \"5\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\nassert solution('1000000\\n1000000\\n100\\n1000') == '999'\nassert solution('1000000\\n1000000\\n1000\\n1000') == '999'\nassert solution('1000000\\n1000000\\n1000\\n10000') == '1000'\nassert solution('1000000\\n1000000\\n10000\\n10000') == '1000'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\nassert solution('13\\n3 2 1 1\\n10 2 1\\n') == 'Impossible'\nassert solution('15\\n3 2 1 1\\n5 2 1\\n') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2 2 5 1') == '3'\nassert solution('1\\n3 4 5 1') == 'Impossible'\n\"\"\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Impossible\"\nassert solution() == \"10\"\n'''"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1 1') == '5'\nassert solution('4 5 1 1') == '5'\nassert solution('7 1 1 1') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3 2 1 1') == 'Impossible'\nassert solution('7\\n5 2 1 1') == '4'\n\nstdin = ''\nfor i in range(int(input())):\n    stdin += f'{input()}\\n'\n\nprint(solution(stdin))\n\"\"\"\n\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.count = 0\n        self.coin = {}\n\n    def coinchange(self, n, count, coins):\n        if n == 0:\n            return count + 1\n        if n < 0:\n            return 0\n        if count > 0:\n            if n in self.coin:\n                return count + self.coin[n]\n            else:\n                for i in coins:\n                    if n >= i:\n                        count = count + 1\n                        self.coin[n] = self.coin.get(n, 0) + self.coinchange(n - i, count, coins)\n                        self.coin[n] = self.coin.get(n, 0)\n                        return self.coin[n]\n        else:\n            return 0\n\n    def solution(self, n):\n        return self.coinchange(n, 0, [25, 10, 5, 1])\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''aabcad\naba\nacd''') == 'yes', solution.__doc__\n\"\"\""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n\"\"\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == 'no'\nassert solution('ab') == 'yes'\nassert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 10') == '5'\nassert solution('3 2') == '2'\nassert solution('3 1 1 6') == '6'\nassert solution('3 4 7 10') == '10'\nassert solution('2 4 3 5') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nassert solution('''5 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n'''"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == '5'\nassert solution('10 5 4\\n5 1 3 2\\n2 2 1 2\\n4 2 6 7\\n2 4 3 5\\n5 4 7 8\\n3 6 9 4\\n7 4 5 6\\n6 8 9 4\\n9 4 2 8\\n6 6 9 5\\n4 5 7 2\\n5 3 8 1\\n') == '13'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 4 same') == '4'\nassert solution('5 2\\n3 5 same') == '0'\nassert solution('6 3\\n3 2 same\\n2 3 different') == '3'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 same\\n3 5 same\\n\") == \"4\"\nassert solution(\"10\\n2 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n\") == \"4\"\nassert solution(\"1000\\n6 6 6 6 6 6 6 6 6 6\\n3 4 4 4 4 4 4 4 4 4\\n3 4 4 4 4 4 4 4 4 4\\n2 2 2 2 2 2 2 2 2 2 2\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1\\n\") == \"9\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n1 2\n1 2\n''') == '3'\nassert solution('''\n1 10\n1 9\n''') == '2'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\nassert solution('5 2\\n2 4 different\\n3 5 different\\n') == '5'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 same') == '1'\nassert solution('1 2 different') == '0'\nassert solution('3 5 same') == '3'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n2 4 same\n3 5 same\n''') == '4', '5 2'\nassert solution('''5 2\n2 4 same\n3 5 same\n''') == '1', '5 2'\n'''\n11\n2 3\n3 1\n'''\n'''\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\nSample Input:\n8 10\n1 2 3 5 4 6 7 8\n10 4\n5 6 6 1 2 4 7 8\nSample Output:\n6\n''') == '6'\nassert solution('''\n5 2\n2 4 same\n3 5 same\nSample Input:\n8 10\n1 2 3 5 4 6 7 8\n10 4\n5 6 6 1 2 4 7 8\nSample Output:\n8\n''') == '8'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n10 5\n1 4 same\n2 6 same\n3 7 same\n4 8 different\n5 9 different\n6 10 different\n7 11 different\n8 12 different\n9 13 different\n10 14 different\n''') == '14'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 4') == '3'\nassert solution('5 4') == '2'\nassert solution('4 5') == '1'\n\"\"\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 4\\n0 1\\n0 2\\n3 4\\n3 5\") == \"3\"\nassert solution(\"1 5\\n0 1\\n0 2\\n3 4\\n2 4\\n\") == \"2\"\nassert solution(\"7 3\\n0 0\\n0 1\\n1 2\\n1 3\\n2 4\\n3 4\\n4 5\\n5 6\") == \"1\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 2\n0 0\n3 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n0 0\n1 0\n3 0\n0 3\n1 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([6, 4], [[0, 1], [0, 2], [3, 4], [3, 5]]) == 3\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n0 1\\n0 2\\n3 4\\n3 5\\n') == '3'\nassert solution('100 99\\n0 1\\n0 2\\n3 4\\n3 5\\n') == '3'\nassert solution('10 9\\n0 1\\n0 2\\n3 4\\n3 5\\n') == '1'\nassert solution('50 50\\n0 1\\n0 2\\n3 4\\n3 5\\n') == '0'\nassert solution('100 99\\n1 2\\n3 4\\n3 5\\n') == '0'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 7\n1 4\n5 9\n6 8\n7 7\n8 6\n9 5\n10 3\n7 4\n1 2\n10 3\n4 4\n1 5\n6 1\n2 6\n5 8\n3 7\n4 8\n9 5\n5 7\n6 9\n3 2\n9 5\n5 7\n7 8\n8 7\n2 4\n4 4\n6 5\n2 7\n7 2\n3 8\n5 1\n1 8\n8 4\n7 2\n9 6\n4 7\n3 8\n6 2\n4 1\n3 6\n2 4\n''') == '7'\n\nassert solution('''\n4 5\n0 1\n0 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n\nassert solution('''\n4 5\n0 1\n1 3\n2 4\n1 2\n3 4\n''') == '2'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([6, 4], [[0, 1], [0, 2], [3, 4], [3, 5]]) == 3\nprint('You passed!', solution('', []))\n\"\"\"\n\nimport itertools\nfrom math import ceil"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n8 8\n0 1\n1 0\n1 4\n3 5\n3 6\n7 5\n7 8\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n10 6\n0 1\n0 2\n1 3\n3 4\n5 6\n5 7\n7 8\n9 8\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n3 6\n7 5\n7 8\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1 1\n2 1\n2 1\n\"\"\") == \"2\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4') == '3'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == \"9.0\\n6.5\\n2.5\\n\"\n\nassert solution(\"10\\n2 3\\n5 5\\n4 1\\n6 1\\n6 6\\nLURD\\n\") == \"11.8\\n9.4\\n\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 1\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '9.0'\nassert solution('10') == '6.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2\n1 1\n3 2\n4 5\n1 1''') == '9.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"9.0\"\nassert solution(\"1 1\") == \"9.0\"\nassert solution(\"4 1\") == \"9.0\"\nassert solution(\"3 5\") == \"2.5\"\nassert solution(\"5 3\") == \"2.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\") == \"9.0\\n6.5\\n2.5\\n\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '9.0\\n6.5\\n2.5\\n'"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3.0'\nassert solution('4') == '3.0'\nassert solution('5') == '8.0'\nassert solution('1000000000') == '1000000000.0'\nassert solution('8') == '12.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"9.0 6.5 2.5\"\nprint(solution())\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR''') == '9.0'"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n2\\n3\") == \"1\"\nassert solution(\"1\\n2\\n3\\n4\") == \"0\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == \"1\"\nassert solution('''\n3 3 2\nR 1 2\nB 2 3\n''') == \"0\"\n'''\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n6 5 3\nB 4 1 2\nR 3 2 4\nB 5 6\nB 2 4 3\nB 4 1\nR 2 3\n''') == '0'\n'''\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n4 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '0'\n'''\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 4 3\nB 1 2\nB 2 3\nR 3 1\nB 1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 4 3\nR 1 2\nR 2 3\nR 3 4\nR 4 5\nB 2 1\nB 5 2\n\"\"\") == \"0\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3 2') == '1'\nassert solution('6 2 3') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n\nassert solution('''\n4 4 2\nB 1 2\nB 2 3\nR 3 1\nR 1 2\n''') == '0'\n\nassert solution('''\n7 7 7\nB 1 2\nB 2 3\nB 4 6\nB 5 7\nR 3 1\nR 4 1\nR 5 2\nR 6 3\nR 7 5\n''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 2\nB 1 2\nB 2 3\nR 3 1''') == '1'\nassert solution('''4 4 2\nB 2 1\nB 2 5\nR 3 1\nR 3 2''') == '0'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\\n5\\n5\\n7\"\nassert solution(\"1\\n1\\n1\\n\") == \"1\\n1\\n1\\n\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 0 5') == '88'\nassert solution('7 0 7') == '5'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n') == '88\\n5\\n5\\n7\\n'\nassert solution('10\\n2 2 2\\n3 2 1\\n9 2 9\\n3 6 4\\n10 2 5\\n5 1 2\\n4 9 6\\n4 4 2\\n6 4 5\\n10 5 10\\n4 3 5\\n8 4 8\\n7 8 1\\n5 4 4\\n7 4 9\\n4 9 7\\n5 9 2\\n2 7 8\\n') == '10\\n2\\n2\\n2\\n3\\n5\\n9\\n10\\n7\\n9\\n10\\n'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '5'\nassert solution('5') == '88'\nassert solution('4') == '5'\nassert solution('5') == '5'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\\n') == '88\\n5\\n5\\n7\\n', \"Third\"\nassert solution('3\\n3 0 0\\n5 0 5\\n7 0 7\\n') == '0\\n5\\n5\\n7\\n', \"First\"\nassert solution('3\\n3 1 2\\n5 1 5\\n7 1 7\\n') == '1\\n6\\n6\\n7\\n', \"Second\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"88\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n5 0 5\n7 0 7\n4\n88''') == '88'\nassert solution('''2\n5 0 5\n7 0 7\n4\n88''') == '88'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"88\"\nassert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\nassert solution('''\n3\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == \"88\"\nassert solution('''\n4\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n''') == \"0\"\nassert solution('''\n4\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n''') == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\nassert solution('''\n1\n10 5 7\n''') == '10'\nassert solution('''\n3\n0 0 0\n0 0 0\n0 0 0\n''') == '0'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2\") == \"4\", \"Should be 4\"\nassert solution(\"3 3 1 2\") == \"-1\", \"Should be -1\"\nassert solution(\"8 9 10 11 12 13 14 15 16 17 18\") == \"-1\", \"Should be -1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1 2') == '-1'\nassert solution('2') == '-1'\nassert solution('1 2 2') == '0'\nassert solution('1 3 1') == '5'\nassert solution('2 3 3') == '0'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 1 2') == '6'\nassert solution('4 4 1 2') == '-1'\nassert solution('3 3 1 2') == '-1'\nassert solution('8 4 3 1 2') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 3 2') == '6'\nassert solution('3 3 1 2') == '-1'"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n1\") == \"1\"\nassert solution(\"2\\n4\\n1 2\\n3 2\\n2\") == \"2\"\nassert solution(\"2\\n3\\n1 2\\n3 2\\n2\") == \"2\"\nassert solution(\"3\\n6\\n2 1\\n1 3\\n1 1\\n1 3\\n1\") == \"4\"\nassert solution(\"4\\n8\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n2 2\\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\nassert solution('''3 2 1 2\n2\n1 3 1\n1 2 3\n''') == '-1'\nassert solution('''3 1 2 3\n1\n1 3 1\n1 2 3\n''') == '6'\nassert solution('''4 5 4 5\n2\n1 3 1\n2 3 1\n3 1 2\n3 2 1\n''') == '-1'\nassert solution('''4 4 4 4\n1\n2 3 1\n3 1 3\n4 1 2\n4 2 3\n''') == '6'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == '-1'\nassert solution('4 4 1 2') == '-1'\nassert solution('7 3 1 2') == '4'\nassert solution('9 3 1 2') == '-1'\nassert solution('30 3 1 2') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2 1 2\"\n) == \"5\"\nassert solution(\n    \"1 2 2 3\"\n) == \"3\"\nassert solution(\n    \"2 3 3 4\"\n) == \"4\"\nassert solution(\n    \"2 2 1 2\"\n) == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\") == \"5\"\nassert solution(\"5 2 2 1\") == \"1\"\nassert solution(\"6 4 2 3\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2 1 2\n1 2\n1 3 1\n2 3 3\n''') == '-1'\nassert solution('''\n5 2 1 2\n1 2\n1 3 1\n2 3 3\n''') == '5'\nassert solution('''\n5 3 1 2\n1 2\n1 3 1\n2 3 3\n''') == '-1'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovnizCC44\"\nprint(solution(\"mirkovC4nizCC44\") == \"mirkovnizCC44\")\n\n-- Input Example --\nMirko likes to play with strings of characters, but this time he has taken it too far \u2013 he put an \u201cexplosion\u201d in the string! An explosion is a series of characters which, if found in the vicinity of fire, explodes and starts a chain reaction.\n\nMirko, being as negligent as he usually is, forgot that his string contained an explosion and placed it near a candlelight. Thus the chain reaction began.\n\nThe chain reaction takes place in the following way:\n - if a string contains explosions, they all explode and a new string is formed by concatenating the pieces without the exploding parts\n - this concatenation could possibly create new explosions\n - the chain reaction repeats while there are explosions in the string\n\nNow Mirko wants to know whether anything will be left after this series of chain reactions. If nothing remains, output \u201cFRULA\u201d (without quotes). If, by any chance, something is left, output the final string remaining after all the reactions.\n\n-----Input-----\nThe first line of input contains Mirko\u2019s string, ($1 \\leq |\\text {Mirko\u2019s string}| \\leq 1\\ 000\\ 000$).\n\nThe second line of input contains the explosion string, ($1 \\leq |\\text {explosion}| \\leq 36$).\n\nBoth Mirko\u2019s string and the explosion string consist of uppercase and lowercase letters of the English alphabet and digits 0, 1, \u2026, 9. The characters in the explosion string are all different.\n\n-----Output-----\nThe first and only line of output must contain the final string remaining after all the reactions as stated in the task.\n\nClarification of the second example: Firstly, the bombs on positions $1$ and $6$ explode. Then we are left with ****1****2ab (where * marks the character that exploded) and when that string is put together, we get 12ab. Sadly, that is an explosion all over again so it disappears.\n\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'\n\"\"\"\n\nstring = input()\nexplosion = input()"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''mirkovC4nizCC44\nC4\n''') =='mirkovniz'\nassert solution('''mirkovC4nizCC44\nCC44\n''') =='mirkovCC44'\nassert solution('''mirkovC4nizCC44\nCC44\n''') =='mirkovCC44'\nassert solution('''mirkovC4nizCC44\nCC44\n''') =='mirkovCC44'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkvniz'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirkovC44nizCC4') =='mirkovniz'\nassert solution('mirkovC44nizCC44') == 'FRULA'\nassert solution('mirkovC44nizCC44') == 'FRULA'\n\n\"\"\"\n\nimport sys\nimport re\nimport collections"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovnizCC44'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirnoviz\"\nassert solution(\"mirko\") == \"FRULA\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'\nassert solution('FSDKMDSKJKDS') == 'FSDKMDSKJKDS'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"32\""
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 65\n45 10\n60 25\n''') == '32'\n\nassert solution('''\n2\n8 10\n12 9\n''') == '12'\n\nassert solution('''\n1\n3 1\n1 2\n''') == '0'\n'''\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '32'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3 65\n45 10\n60 25''') == \"32\"\nassert solution('''5\n3 2\n2 3\n3 1\n1 4\n3 5''') == \"10\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '32'\nassert solution('5') == '54'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"32\""
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"32\"\nprint(solution())"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n5\\n') == '32'\nassert solution('3\\n3\\n3\\n3\\n') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3 65\n45 10\n60 25\nSample Output:\n32''') == '32'\n\nassert solution('''2\n3 6\n5 50\n6 30\nSample Output:\n7\n''') == '7'\n\nassert solution('''4\n4 7\n5 50\n6 30\n7 40\nSample Output:\n8\n''') == '8'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 65\n45 10\n60 25\n''') == '32'\nassert solution('''\n3\n3 10\n45 65\n60 25\n''') == '6'\nassert solution('''\n2\n1\n1\n''') == '0'\nassert solution('''\n3\n1\n2\n''') == '0'\nassert solution('''\n2\n4\n1\n''') == '0'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1 2 0 3 1\\n\"\n) == \"3\"\nassert solution(\n    \"3\\n\"\n    \"0 1 2\\n\"\n    \"0 1\\n\"\n    \"0 1\\n\"\n) == \"2\"\nassert solution(\n    \"3\\n\"\n    \"0 1 2\\n\"\n    \"0 1\\n\"\n    \"0 1\\n\"\n) == \"2\"\nassert solution(\n    \"5\\n\"\n    \"0 1 2 3 4 5 6 7 8 9 10\\n\"\n) == \"11\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('1 2 0 3 1') == '2'\nassert solution('5') == '2'\nassert solution('3') == '1'\nassert solution('5 0 0 0') == '0'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 0 3\n4 5\n''') == '3'\n\nassert solution('''5\n1 2 0 3 1\n6 7\n''') == '2'\n\nassert solution('''5\n1 2 3 4 1\n5 6\n''') == '2'\n\nassert solution('''2\n5\n1 2\n''') == '1'\n\nassert solution('''3\n3\n5 6\n9 8 7\n''') == '1'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 0 3 1\\n') == '2\\n1'\nassert solution('4\\n0 2 4 1\\n') == '3\\n2'\nassert solution('8\\n0 1 0 2 3 4 5 6\\n') == '7\\n3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 0 3 1\") == \"3\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3 2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 0 3 1') == '3\\n2'\nassert solution('10\\n0 9 8 7 6 5 4 3 2 1') == '5\\n2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 1') == '1'\nassert solution('5\\n1 2 3 4 5') == '5'\nassert solution('3\\n4 1 2') == '3'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"1\"\nassert solution(\"1000000000000000\\n1000000000\\n200000000\\n10000000\\n100\\n\" +\n    \"0\\n\" +\n    \"1\\n\" +\n    \"2\\n\" +\n    \"3\\n\" +\n    \"4\\n\" +\n    \"5\\n\" +\n    \"6\\n\" +\n    \"7\\n\" +\n    \"8\\n\" +\n    \"9\\n\" +\n    \"10\\n\" +\n    \"11\\n\" +\n    \"12\\n\" +\n    \"13\\n\" +\n    \"14\\n\" +\n    \"15\\n\" +\n    \"16\\n\" +\n    \"17\\n\" +\n    \"18\\n\" +\n    \"19\\n\" +\n    \"20\\n\" +\n    \"21\\n\" +\n    \"22\\n\" +\n    \"23\\n\" +\n    \"24\\n\" +\n    \"25\\n\" +\n    \"26\\n\" +\n    \"27\\n\" +\n    \"28\\n\" +\n    \"29\\n\" +\n    \"30\\n\" +\n    \"31\\n\" +\n    \"32\\n\" +\n    \"33\\n\" +\n    \"34\\n\" +\n    \"35\\n\" +\n    \"36\\n\" +\n    \"37\\n\" +\n    \"38\\n\" +\n    \"39\\n\" +\n    \"40\\n\" +\n    \"41\\n\" +\n    \"42\\n\" +\n    \"43\\n\" +\n    \"44\\n\" +\n    \"45\\n\" +\n    \"46\\n\" +\n    \"47\\n\" +\n    \"48\\n\" +\n    \"49\\n\" +\n    \"50\\n\" +\n    \"51\\n\" +\n    \"52\\n\" +\n    \"53\\n\" +\n    \"54\\n\" +\n    \"55\\n\" +\n    \"56\\n\" +\n    \"57\\n\" +\n    \"58\\n\" +\n    \"59\\n\" +\n    \"60\\n\" +\n    \"61\\n\" +\n    \"62\\n\" +\n    \"63\\n\" +\n    \"64\\n\" +\n    \"65\\n\" +\n    \"66\\n\" +\n    \"67\\n\" +\n    \"68\\n\" +\n    \"69\\n\" +\n    \"70\\n\" +\n    \"71\\n\" +\n    \"72\\n\" +\n    \"73\\n\" +\n    \"74\\n\" +\n    \"75\\n\" +\n    \"76\\n\" +\n    \"77\\n\" +\n    \"78\\n\" +\n    \"79\\n\" +\n    \"80\\n\" +\n    \"81\\n\" +\n    \"82\\n\" +\n    \"83\\n\" +\n    \"84\\n\" +\n    \"85\\n\" +\n    \"86\\n\" +\n    \"87\\n\" +\n    \"88\\n\" +\n    \"89\\n\" +\n    \"90\\n\" +\n    \"91\\n\" +\n    \"92\\n\" +\n    \"93\\n\" +\n    \"94\\n\" +\n    \"95\\n\" +\n    \"96\\n\" +\n    \"97\\n\" +\n    \"98\\n\" +\n    \"99\\n\" +\n    \"100\\n\" +\n    \"101\\n\" +\n    \"102\\n\" +\n    \"103\\n\" +\n    \"104\\n\" +\n    \"105\\n\" +\n    \"106\\n\" +\n    \"107\\n\" +\n    \"108\\n\" +\n    \"109\\n\" +\n    \"110\\n\" +\n    \"111\\n\" +\n    \"112\\n\" +\n    \"113\\n\" +\n    \"114\\n\" +\n    \"115\\n\" +\n    \"116\\n\" +\n    \"117\\n\" +\n    \"118\\n\" +\n    \"119\\n\" +\n    \"120\\n\" +\n    \"121\\n\" +\n    \"122\\n\" +\n    \"123\\n\" +\n    \"124\\n\" +\n    \"125\\n\" +\n    \"126\\n\" +\n    \"127\\n\" +\n    \"128\\n\" +\n    \"129\\n\" +\n    \"130\\n\" +\n    \"131\\n\" +\n    \"132\\n\" +\n    \"133\\n\" +\n    \"134\\n\" +\n    \"135\\n\" +\n    \"136\\n\" +\n    \"137\\n\" +\n    \"138\\n\" +\n    \"139\\n\" +\n    \"140\\n\" +\n    \"141\\n\" +\n    \"142\\n\" +\n    \"143\\n\" +\n    \"144\\n\" +\n    \"145\\n\" +\n    \"146\\n\" +\n    \"147\\n\" +\n    \"148\\n\" +\n    \"149\\n\" +\n    \"150\\n\" +\n    \"151\\n\" +\n    \"152\\n\" +\n    \"153\\n\" +\n    \"154\\n\" +\n    \"155\\n\" +\n    \"156\\n\" +\n    \"157\\n\" +\n    \"158\\n\" +\n    \"159\\n\" +\n    \"160\\n\" +\n    \"161\\n\" +\n    \"162\\n\" +\n    \"163\\n\" +\n    \"164\\n\" +\n    \"165\\n\" +\n    \"166\\n\" +\n    \"167\\n\" +\n    \"168\\n\" +\n    \"169\\n\" +\n    \"170\\n\" +\n    \"171\\n\" +\n    \"172\\n\" +\n    \"173\\n\" +\n    \"174\\n\" +\n    \"175\\n\" +\n    \"176\\n\" +\n    \"177\\n\" +\n    \"178\\n\" +\n    \"179\\n\" +\n    \"180\\n\" +\n    \"181\\n\" +\n    \"182\\n\" +\n    \"183\\n\" +\n    \"184\\n\" +\n    \"185\\n\" +\n    \"186\\n\" +\n    \"187\\n\" +\n    \"188\\n\" +\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == stdout_\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '2'\nassert solution('''1 1 2\n1 1 3\n2 2 3''') == '4'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4\") == \"3\"\nassert solution(\"5 5 7\") == \"15\"\nassert solution(\"8 8 2\") == \"1\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 1 1\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"3\""
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('2 3 2\\n- 1 2\\n+ 1 3\\n- 1 4') == '1'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 4') == '3'\nassert solution('1 1') == '3'\nassert solution('3 2') == '4'\nassert solution('2 2') == '2'\nassert solution('10 10') == '7'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n10\n10 10\n1 1\n1 2\n2 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"5\"\nassert solution(r\"\"\"\n10\n10 10\n+ 1 1\n+ 1 2\n+ 1 3\n- 1 4\n+ 1 5\n- 1 6\n+ 1 7\n+ 1 8\n- 1 9\n- 1 10\n\"\"\") == \"0\"\nassert solution(r\"\"\"\n10\n10 10\n+ 1 1\n+ 1 2\n+ 1 3\n- 1 4\n+ 1 5\n- 1 6\n+ 1 7\n+ 1 8\n- 1 9\n+ 1 10\n+ 2 11\n- 2 12\n- 3 13\n- 4 14\n- 5 15\n+ 5 16\n+ 5 17\n+ 5 18\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('3 5 3\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n- 1 5\\n- 2 3\\n- 2 4\\n+ 3 4\\n') == '5'\nprint('Tests passed!')\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"5 6 7\\n+ 1 1\\n+ 2 2\\n+ 3 3\\n+ 4 4\\n- 1 2\\n- 3 4\\n+ 5 5\\n- 2 3\") == \"4\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1000000000 1\n1000000000 0\n1000000000 0\"\"\") == \"150000000\"\nassert solution(\"\"\"\n5\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 0\n1000000000 0\"\"\") == \"70000000\"\nassert solution(\"\"\"\n7\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 0\"\"\") == \"70000000\"\nassert solution(\"\"\"\n10\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 1\n1000000000 0\"\"\") == \"100000000\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1000000000 0\\n1000000000 1\\n') == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1000000000 0\n1000000000 1\n1000000000 2\n''') == '500000004'\nassert solution('''\n7\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n1000000000 5\n1000000000 6\n''') == '532571905'\n'''\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1000000000000000 1000000000000000\n''') == '500000004'\nassert solution('''\n2\n1000000000 0\n1000000000 1\nSample Output:\n500000004\n''') == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n''') == '150000000'\n\nassert solution('''\n1000000001\n1000000000 0\n1000000000 1\n1000000000 2\n1000000000 3\n1000000000 4\n''') == '1000000000'\n'''\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2 5 9\n3 7\n3\n1 1\n2 4\n\"\"\") == \"505050\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n4\n3\n2\n''') == \"24000000000\"\n\nassert solution('''\n3\n1\n2\n''') == \"1000000000\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000000000 0') == '500000004'\nassert solution('1000000000 1') == '500000004'\n'''"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.0000'\nassert solution('4') == '0.0000'\nassert solution('1000000000') == '0.0000'\nassert solution('1000000000 1') == '0.0000'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000000000 0') == '500000004'\nassert solution('1000000000 1') == '4'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8') == '12'\nassert solution('10 10') == '10'\nassert solution('10 1') == '9'\nassert solution('1 1') == '1'\nassert solution('10 10 10 10 10') == '99'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '12'"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 8\") == \"12\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"6 3\") == \"1\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 3 13 27\\n3 5 23 24\\n\") == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''\n4 8\n1 2 5 1\n2 4 6 4\n4 7 8 7\n2 3 5 10\n4 1 5 8\n1 3 6 9\n1 5 7 12\n3 5 11 13\n''') == '14'\nassert solution('''\n7 8\n1 2 7 1\n1 3 6 5\n4 5 7 4\n1 6 7 6\n2 4 8 3\n6 5 7 2\n6 4 7 5\n''') == '14'\nassert solution('''\n2 5\n1 3 7 1\n2 4 6 5\n3 4 7 3\n''') == '1'\nassert solution('''\n2 6\n1 2 1 1\n3 4 1 3\n''') == '1'\n'''\nSample Input:\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\nSample Output:\n12\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 8\") == \"12\"\nassert solution(\"4 5 20 21\") == \"10\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"12\"\nassert solution(\"1 2 1 10\") == \"1\"\nassert solution(\"2 4 11 16\") == \"1\"\nassert solution(\"2 1 9 12\") == \"1\"\nassert solution(\"3 5 28 100\") == \"1\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 2') == '6'\nassert solution('5 8') == '10'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"1 2 1 10\\n\"\n    \"2 4 11 16\\n\"\n    \"2 1 9 12\\n\"\n    \"3 5 28 100\\n\"\n    \"1 3 13 27\\n\"\n    \"3 5 23 24\"\n) == \"12\"\nassert solution(\n    \"3 6\\n\"\n    \"1 1 5 2\\n\"\n    \"2 2 4 3\\n\"\n    \"3 4 3 2\"\n) == \"7\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n15 5 3\n12 4 4\n''') == '1'\nassert solution('''\n5\n16 5 3\n12 4 4\n15 5 3\n10 5 3\n13 5 3\n''') == '4'\nassert solution('''\n5\n16 5 3\n12 4 4\n15 5 3\n13 5 3\n10 5 3\n''') == '4'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n15 5 3\") == \"3\"\nassert solution(\"2\\n15 5 3\\n10 3 3\") == \"4\"\nassert solution(\"3\\n15 5 3\\n10 3 3\\n20 10 5\") == \"4\"\n\n\n---\n\nclass Solution:\n    def maxScore(self, n: int, d: int, a: List[List[int]], b: List[List[int]]) -> int:\n        dp = [[0] * (d + 1) for i in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(d + 1):\n                if i == 1:\n                    dp[i][j] = max(j, 0)\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - a[i - 1][0]] + a[i - 1][1])\n                    if j >= a[i - 1][0]:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1][0]] + a[i - 1][1] + a[i - 1][2])\n        return dp[n][d]\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\nassert solution('5 8 5 3\\n11 2 2 3\\n10 4 4 4\\n20 6 6 6\\n5 7 5 7') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n15\\n5\\n3') == '3'\nassert solution('2\\n3\\n12\\n4\\n5') == '2'\nassert solution('3\\n12\\n20\\n10\\n5') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 10 3\n1 2 2\n4 5 4\n2 5 2\n3 6 3''') == \"3\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n3 2 4\\n4 1 5') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\n\nassert solution('2\\n1 5 4\\n2 4 4\\n10 3 3') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\nassert solution('1 3\\n2 1\\n3 4\\n4 4\\n5 4\\n6 4') == '2'\nassert solution('3 2\\n5 2\\n6 2\\n7 2') == '1'\nassert solution('3 7\\n8 2\\n9 2\\n10 2') == '1'\nassert solution('10 2\\n11 2\\n12 2\\n13 2\\n14 2\\n15 2') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('15 5 3') == '3'\nassert solution('12 4 4') == '2'\nassert solution('20 10 5') == '2'\n\nassert solution('8') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n') == '3'\nassert solution('5 12\\n15 4 4\\n12 4 4\\n20 10 5\\n') == '5'\nassert solution('4 5\\n12 4 4\\n15 4 4\\n12 4 4\\n20 10 5\\n') == '4'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 1\\n') == '1\\n'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n1 2') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('3 2') == '2'\nassert solution('1 1 1') == '3'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('1 1') == '2'\nassert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 1\\n') == '1'\nassert solution('5 1\\n2 1\\n1 1\\n2 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n1 1\\n\") == \"1\"\nassert solution(\"1 2\\n2 1\\n\") == \"0\""
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n\nfrom math import gcd\nimport itertools"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''R\nG\nB\nY\n''') == '4'\nassert solution('''RG\nGB\nBY\nYR\n''') == '3'\nassert solution('''RGY\nGYY\nBYB\nYYR\n''') == '4'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('RGGR') == '2'\nassert solution('GBGB') == '3'\nassert solution('BYBY') == '1'\nassert solution('YRYR') == '4'\nprint('You are allowed to use any print or input() function, including lambda functions.')\nprint('We use input() to read input. To see examples of input, use print() instead.')\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"4\"\nassert solution(\"YRYR\") == \"5\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == \"3\"\nassert solution(\"RGRG\\nGBGB\\nBYBY\\nYRYR\") == \"4\"\nassert solution(\"RGRG\\nGBGB\\nGBBY\\nYRYR\") == \"3\"\nassert solution(\"RGRG\\nGBGB\\nBGYB\\nYRYR\") == \"3\"\nassert solution(\"RGRG\\nGBGB\\nBGYB\\nGBRY\") == \"4\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RGGR') == '4'\nassert solution('GBGB') == '2'\nassert solution('BYBY') == '4'\nassert solution('YRYR') == '3'\n\nprint('\"ok\"') if solution('RGGR') == '4' else print('\"NOPE\"')\nprint('\"ok\"') if solution('GBGB') == '2' else print('\"NOPE\"')\nprint('\"ok\"') if solution('BYBY') == '4' else print('\"NOPE\"')\nprint('\"ok\"') if solution('YRYR') == '3' else print('\"NOPE\"')"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''RGGR\nGBGB\nBYBY\nYRYR''') == '3'\nassert solution('''RGRG\nGBGB\nBYBY\nYRYR''') == '4'\nassert solution('''RGRR\nGBGB\nBYBY\nYRYR''') == '4'\n'''\n\nclass Solution:\n    def __init__(self):\n        self.moves = 0\n        self.robot_position = (0, 0)\n        self.robot_direction = 'U'\n    def solve(self, stdin: str) -> str:\n        colors = {'R':'red', 'G': 'green', 'B': 'blue', 'Y': 'yellow'}\n        self.moves = 0\n        self.robot_position = (0, 0)\n        self.robot_direction = 'U'\n        for color in stdin:\n            if color == 'U':\n                self.robot_position = (self.robot_position[0], self.robot_position[1] - 1)\n            elif color == 'R':\n                self.robot_direction = 'R' if self.robot_direction == 'U' else 'L'\n            elif color == 'D':\n                self.robot_position = (self.robot_position[0], self.robot_position[1] + 1)\n            elif color == 'L':\n                self.robot_direction = 'L' if self.robot_direction == 'R' else 'R'\n            else:\n                print('Error')\n                break\n            self.moves += 1\n            if self.robot_position[0] == 0 or self.robot_position[1] == 0:\n                print(f'Stopped at ({self.robot_position[0]}, {self.robot_position[1]})')\n                break\n        return f'{self.moves}'\n\n\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"in_str,expected\", [\n    ('''RGRR\nGBGB\nBYBY\nYRYR''', '4'),\n    ('''RGRG\nGBGB\nBYBY\nYRYR''', '4'),\n    ('''RGGR\nGBGB\nBYBY\nYRYR''', '3'),\n    ('''RGGR\nGBGB\nBYBY\nYRYR''', '3'),\n    ('''RGGR\nGBGB\nBYBY\nYRYR''', '4'),\n    ('''RGGR\nGBGB\nBYBY\nYRYR''', '5'),\n])\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == \"3\"\nassert solution(\"RYG\\nRBY\\nBRY\\nRGY\") == \"5\"\nassert solution(\"RRBB\\nRRBB\\nRRBB\\nRRBB\") == \"14\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == \"3\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"RGR\") == \"1\"\nassert solution(\"GBG\") == \"2\"\nassert solution(\"BYB\") == \"3\"\nassert solution(\"YRY\") == \"4\"\nassert solution(\"RRR\") == \"0\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''R\nG\nB\nY''') == \"1\"\nassert solution('''R\nG\nY\nY''') == \"2\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABBB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'AAAAA'\nassert solution('5 -2 -1 0 1 2') == 'AAAAA'\nassert solution('2 1 0 -1 -2') == 'BBBB'\nassert solution('2 1 0 -1 -2') == 'BBBB'\nassert solution('5') == 'BBBB'\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == \"ABAB\"\n\"\"\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'A'\nassert solution('2') == 'B'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\"\n) == \"AAABBB\"\nassert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\"\n) == \"AAABBB\"\nassert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\"\n) == \"AAABBB\"\nassert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\"\n) == \"AAABBB\"\nassert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\"\n) == \"AAABBB\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\nassert solution('4\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AABAA'\nassert solution('3\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AABAA'\nassert solution('2\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AABAA'\nassert solution('1\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AABAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\nassert solution('3\\n0 -1 1 1') == 'ABBA'\nassert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n0 1 -1 -2 -3\\n3 2 -1 -3 -2') == 'AAABABBAABB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == 'AAAAA'\n\nassert solution('''3\n-2 -1 0 1 2\n2 1 0 -1 -2\n2 1 0 -1 -2''') == 'AABB'\n\nassert solution('''2\n1 0 -1 -2\n2 1 0 -1 -2''') == 'AABA'\n\nassert solution('''1\n0 0 -1 -2\n2 1 0 -1 -2''') == 'AABAA'\n\nassert solution('''1\n-1 -2\n2 1 0 -1 -2''') == 'AAABA'"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == 'AAA'\nassert solution('''10\n1 -1 0 2 3 -1\n-1 -1 0 2 3 4 5 6 7 8 9''') == 'BBBAA'\nassert solution('''10\n0 1 0 1 2 3 -1\n-1 -1 0 2 3 4 5 6 7 8 9''') == 'AAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2') == 'AAAAA'\nassert solution('6\\n-2 -1 0 1 2 1\\n2 1 0 -1 -2 1') == 'BBBBB'\nassert solution('6\\n-2 -1 0 1 2 1\\n2 1 0 -1 -2 1') == 'BBBBB'\nassert solution('6\\n-2 -1 0 1 2 1\\n2 1 0 -1 -2 1') == 'BBBBB'\nassert solution('10\\n-1 1 1 1 1 -1 -1\\n1 0 -1 -1 -1 -1') == 'AAABBBB'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1\\n2 3\\n4 0\\n0 2\\n5 1') == 'IMPOSSIBLE'\nassert solution('4 1\\n2 3\\n4 0\\n0 2\\n3 4') == '1'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\n\"\"\"\nimport math\nimport itertools\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == \"IMPOSSIBLE\"\nassert solution('0 1') == \"1\"\nassert solution('1 1') == \"1\"\nassert solution('2 1') == \"2\"\nassert solution('1 2') == \"1\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6') == 'IMPOSSIBLE'\n\nassert solution('3 2\\n0 0\\n1 1\\n0 2\\n3 3\\n1 1\\n0 0\\n4 4\\n1 0\\n0 1\\n3 3\\n2 2\\n0 2\\n2 3\\n3 3\\n1 3\\n0 1\\n4 3\\n0 3\\n4 4\\n2 2\\n1 4\\n2 3\\n3 3\\n2 3\\n4 4\\n0 0\\n0 1\\n2 2\\n3 3\\n0 3\\n0 1\\n1 0\\n1 2\\n2 2\\n3 3\\n0 1\\n1 4\\n2 2\\n0 2\\n3 1\\n2 1\\n0 1\\n1 2\\n2 2\\n1 2\\n2 1\\n3 3\\n1 0\\n2 2\\n3 3\\n0 2\\n3 3\\n0 0\\n0 1\\n0 2\\n0 2\\n3 2\\n0 3\\n0 3\\n1 3\\n2 3\\n3 3\\n1 1\\n2 1\\n3 2\\n1 1\\n0 2\\n2 2\\n2 3\\n2 3\\n3 2\\n0 3\\n3 3\\n1 2\\n1 2\\n3 2\\n0 3\\n3 3\\n0 0\\n2 1\\n0 1\\n1 2\\n3 2\\n1 3\\n0 2\\n3 3\\n2 2\\n1 2\\n2 2\\n2 2\\n3 3\\n0 3\\n3 3\\n2 3\\n2 3\\n1 2\\n1 2\\n0 3\\n3 3\\n0 3\\n0 3\\n1 3\\n1 2\\n1 3\\n1 3\\n2 2\\n3 1\\n3 2\\n2 3\\n3 3\\n0 0\\n0 1\\n0 1\\n0 2\\n0 2\\n1 3\\n0 3\\n1 2\\n2 2\\n2 3\\n2 3\\n3 2\\n1 2\\n3 2\\n3 2\\n3 3\\n0 3\\n0 3\\n2 3\\n0 1\\n1 2\\n1 3\\n2 2\\n2 2\\n3 1\\n1 3\\n0 2\\n2 3\\n1 3\\n0 3\\n1 3\\n1 3\\n0 2\\n2 3\\n2 2\\n0 2\\n2 3\\n3 3\\n1 1\\n1 2\\n1 3\\n2 2\\n2 2\\n2 2\\n0 3\\n3 3\\n1 3\\n1 3\\n2 2\\n1 3\\n1 3\\n0 3\\n0 3\\n0 3\\n2 3\\n3 2\\n2 3\\n0 1\\n1 2\\n2 2\\n3 3\\n3 3\\n1 3\\n0 3\\n0 3\\n0 3\\n1 2\\n1 2\\n1 2\\n1 3\\n2 2\\n0 2\\n2 3\\n3 2\\n1 2\\n0 3\\n1 3\\n0 3\\n1 3\\n2 2\\n3 2\\n0 3\\n0 2\\n3 3\\n1 1\\n0 3\\n0 2\\n0 2\\n1 3\\n2 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0 3\\n0"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 3\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n6 5\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 4\n2 3\n4 0\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n4 4\n0 2\n2 3\n0 1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n3 4\n0 2\n2 3\n0 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"2\"\nassert solution(\"7 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4\\n2 3\\n4 0\\n0 2\\n6 1\\n') == \"IMPOSSIBLE\"\nassert solution('10 20\\n3 7\\n4 1\\n5 8\\n6 6\\n7 2\\n8 9\\n9 5\\n10 6\\n') == \"7\"\nassert solution('10 10\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'IMPOSSIBLE'"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\naustria\\nprogram\\nautocorrect\\ncomputer\\nprogramming\\nprogram\\ncompetition\\nzyx\\n\") == \"6\\n5\\n4\\n11\\n\"\n\n\n\nSample Input:\n5 1\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\nSample Output:\n6\n5\n4\n2\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3') == '3'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('3 5\\naba\\nab\\nad') == '2\\n0\\n'\nassert solution('1 1\\n') == '0\\n'\nassert solution('1 1\\n') == '0\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '''12\n4\n11\n3\n2\n'''\n\nassert solution('''\n10 10\nautocorrect\nprogram\nautocorrect\nprogramming\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '''4\n2\n2\n5\n6\n4\n'''"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\n') == '12\\n4\\n11\\n3\\n2\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open(\"sample.in\").read()) == \"12\"\nassert solution(open(\"input.in\").read()) == \"11\""
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12\\n4\\n11\\n3\\n2\\n'"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12'\nassert solution('''\n2 2\nab\nbc\n''') == '2'\nassert solution('''\n2 3\nabc\nacc\n''') == '3'\nassert solution('''\n2 2\nabc\n''') == '2'\nassert solution('''\n1 1\naa\n''') == '2'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"12\\n\" * 5\nassert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"4\\n\" * 5\nassert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"11\\n\" * 5\nassert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"3\\n\" * 5\nassert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"2\\n\" * 5\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '6'\nassert solution('7') == 'impossible'\nassert solution('10') == 'impossible'\nassert solution('15') == 'impossible'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n\") == \"1\"\nassert solution(\"5\\n0 1 1 1\\n\") == \"4\"\nassert solution(\"4\\n0 3 4 4\\n\") == \"0\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1\\n\") == \"5\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'impossible'\nassert solution('10') == '5'\nassert solution('3') == 'impossible'\nassert solution('2 3 1') == 'impossible'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\n\nSample Input:\n5\n0 1 1 1 2\nSample Output:\n4\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3 1 2\") == \"3\"\nassert solution(\"3 1 2 3\") == \"3\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0 1 1 0 0\\n') == '3'\nassert solution('1\\n0 1\\n') == '1'\nassert solution('5\\n1 1 1 0 0\\n') == '2'\nassert solution('2\\n0 1\\n0\\n') == '2'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Post In Pre'\n\nSample Input:\nHEIQGOODHEIQGOODHEIQGOOD\nGOODHEIQGOODHEIQGOODHEIQGOOD\nGOODHEIQGOODHEIQGOODHEIQGOOD\nGOODHEIQGOODHEIQGOODHEIQGOOD\nSample Output:\nPre In In In In In In\nIQGOODHEIQGOODHEIQGOODHEIQGOOD\nIQGOODHEIQGOODHEIQGOODHEIQGOOD\nGOODHEIQGOODHEIQGOODHEIQGOOD\nGOODHEIQGOODHEIQGOODHEIQGOOD\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre Post In In\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In\"\nassert solution(\"IADADJDJLJCDBABCDQABBCAJLADQGBJ\") == \"Pre In Post In Pre\"\n\n--Your Task--"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nH\nF\nB\nI\nG\nE\nD\nC\nA\nJ\n''') == 'HFBIGEDCJABIGEDCJFAHIGEDCJBAFH'\nassert solution('''\nH\nF\nB\nI\nG\nE\nD\nC\nA\nJ\n''') == 'HFJCDEGIABIGEDCJABIGEDCJFAHIGEDCJBAFH'\nassert solution('''\nH\nF\nB\nI\nG\nE\nD\nC\nA\nJ\n''') == 'HFBJCDEGIABIGEDCJABIGEDCJFAHIGEDCJBAFH'\n'''\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'In Pre In In'\nassert solution('BIGEDCJFAH') == 'Pre In In In'\nassert solution('CJJBIGEDCJA') == 'In Pre In In'\n\"\"\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre Post In Post In Pre'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre'\n\nWrite 5 lines of code to test the correctness of solution:\n\nAnatoly Cheng McDougal is a typical student in many ways. Whenever possible he tries to cut and paste code instead of writing it from scratch. Unavoidably this approach causes him problems. For example, when he first learned about preorder, inorder and postorder traversals of trees, and was given code for a preorder print of a tree (shown on the left below), he simply cut and pasted the code, then moved the print statement to the correct location and renamed the procedure. However, he forgot to rename the procedure calls inside the code, resulting in the defective inorder print and postorder print code shown below.\n\nvoid prePrint(TNode t)\n{     \n  output(t.value);\n  if (t.left!= null) prePrint(t.left);\n  if (t.right!= null)  prePrint(t.right);\n}\n\nvoid inPrint(TNode t)\n{\n  if (t.left!= null) prePrint(t.left);\n  output(t.value);\n  if (t.right!= null) prePrint(t.right);\n}\n\nvoid postPrint(TNode t)\n{\n  if (t.left!= null) prePrint(t.left);\n  if (t.right!= null) prePrint(t.right);\n  output(t.value);\n}\n\nAt this point, Anatoly did not behave like a typical student. He actually tested his code! However, when the results were not correct, he reverted back to typical student behavior. He panicked and started randomly changing calls in all three procedures, hoping to get things right. Needless to say, the situation became even worse now than when he started.\n\nAnatoly\u2019s professor tested the code on a random tree of characters. When she looked at the output of his three print routines, she correctly guessed what had happened. However, instead of going directly to his code, she decided to try to reconstruct Anatoly\u2019s code just by observing the output. In order to do this, she correctly made the following assumptions:\n - The output statement in each print routine is in the correct location (for example, between the two recursive calls in the inPrint routine).\n - Among the six recursive calls made by the three routines, exactly two calls are to prePrint, exactly two are to inPrint, and exactly two are to postPrint, though potentially in the wrong routines.\n\nSoon the professor realized that reconstructing Anatoly\u2019s code and the test tree from his output was not a simple task and that the result might be ambiguous. You will have to help her find all possible reconstructions of Anatoly\u2019s code. In addition, for each such reconstruction, you are to find the alphabetically first tree (as described in the output section) giving the observed output.\n\n-----Input-----\nThe input consists of a single test case. A test case consists of three strings on three separate lines: the observed output of Anatoly\u2019s prePrint, inPrint and postPrint routines (in that order) on some test tree. Each of these strings consists of $n$ uppercase letters ($4 \\le n \\le 26$), with no repeated letters in any string. The test case is guaranteed to have at least one solution.\n\n-----Output-----\nDisplay all possible reconstructions for the test case, ordered as described in the last paragraph below. The output for each reconstruction consists of two lines and describes the six calls in Anatoly\u2019s routines: first the two (recursive) calls in Anatoly\u2019s prePrint routine, followed by the calls in his inPrint routine, and finally the calls in his postPrint routine. The calls are described by the words Pre, In, and Post, separated by spaces. For example, if Anatoly\u2019s routines were correct, the resulting output of the first part of the reconstruction would be Pre Pre In In Post Post.\n\nThe second line is the correct preorder print of the tree, and the second and third lines contain the correct inorder and postorder prints, respectively. The first tree is the one with the alphabetically first preorder print. If there are multiple"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HFBIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\n\n\"\"\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    BFGJAHIRSDGKLAHE\n    BHFGJHJIADGHRLSKLA\n    JAHGIEHADGMSRBKLC\n    HGEHIRSEBADKLAFI\n    HADGKJEGIREHZYBDA\n    GIEHHABJUDHZYDAI\n    IEHGHABJUDZYBDAI\n    JEDIBIBHJUDHDRA\n    BHIEZRADAJUDHIHD\n    BDRABAJIZZEHJIHD\n    JADEHDRABZAEHJI\n    JADDHDRABAZAZYB\n    JADEHDRABAZEYBZ\n    JADEHDRABAZEBY\n    JADDHDRABAZABY\n    JADEHDRABAZABX\n    JADDHDRABAZYX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYB\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRABAZAYX\n    JADEHDRABAZAYY\n    JADEHDRABAZABY\n    JADEHDRABAZABX\n    JADEHDRA"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nHFBIGEDCJA\nBIGEDCJFAH\nBIGEDCJFAH\n''') == 'Pre In Post In Pre'\nassert solution('''\nFBAGEDCJA\nBIGEDCJFAH\nBIGEDCJFAH\n''') == 'In Pre In In Post'\n'''\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre Pre Post In Post In Post In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Post In Pre In Post In Pre In Post In Post In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Post In Pre In Post In Post In Post In Post In Post In Post In Pre'\n\n--- Part Two ---\n\nAnatoly, having checked your input for correctness, has lost his memory of exactly how the problem was meant to be solved. While not surprised by the result, he still believes that the test tree had to be reconstructed. You now know the exact tree, but what will be the correct preorder print and inorder and postorder prints for the input tree?\n\nYou are given the correct preorder and inorder print of a tree. The preorder and inorder print of a tree can be represented as a string, for example:\n\nPreorder: \"ABCDEFGHI\"\nInorder: \"BEHHIABCDFG\"\n\nWhen you are done solving this problem, look at the first example in the problem set description. This example is very likely to be what your final output will look like.\n\nUsing the correct preorder and inorder print of the tree above, reconstruct the tree and print its preorder and inorder traversals on separate lines (this is the correct output). If there are multiple such trees, print the one with the alphabetically first preorder print."
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n10 0\\n3 1 1') == '10'\nassert solution('4\\n1\\n3 1 0\\n1\\n3 1 1\\n1\\n4 1 0') == '8'\nassert solution('4\\n1\\n3 1 0\\n1\\n3 1 1\\n1\\n4 1 0') == '7'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n10 0\\n3 1 1\\n1\\n4 1 0') == '10'\nassert solution('2\\n4 1 1\\n1\\n5 1 1') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '5'\nassert solution('3') == '4'\nassert solution('4') == '7'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10 0') == '10'\nassert solution('3\\n1 1 1') == '1'\nassert solution('4\\n1 1 0') == '1'\nassert solution('3\\n1 2 2') == '2'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"4\") == \"14\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\nassert solution('''\n4\n10 0\n2 1 1\n2 1 1\n1\n4 1 0\n''') == '12'\nassert solution('''\n4\n10 0\n2 1 1\n1\n4 1 0\n''') == '10'\n'''\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"3\") == \"11\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"11\"\nassert solution(\"20\") == \"40000\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n2') == '10'\nassert solution('3\\n1 1 1') == '1'\nassert solution('1\\n4 1 0') == '1'\nassert solution('3\\n4 1 0') == '4'"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '10'\nassert solution('5') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 100 100') == '10000.00'\nassert solution('30 30 60 60') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'''\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1 0 0 10\n1 10 10\n2\n20 20 20 20\n5 5 5 5 5\n\"\"\") == \"10000.00\"\nassert solution(\"\"\"\n1\n10 10 10 10\n20 20 20 20\n2\n40 40 40 40 40\n5 5 5 5 5 5\n\"\"\") == \"4040.00\""
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('3\\n0 0 100 100\\n30 30 60 60') == '10000.00'\n\"\"\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n1\n0 0 100 100\n''') == '100.00'\n'''\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n0 0 100 100\n10 10 80 80\n''') == '1000000.00'\n\nimport re"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0 100 100\n30 30 60 60\n25 50 25 50\n100 100 100 100\n100 50 50 50\n''') == '10000.00'''\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n0 0 100 100\n30 30 60 60\n\"\"\") == \"10000.00\"\nassert solution(\"\"\"\n10 0 100 100\n0 0 100 100\n100 0 100 100\n100 0 100 100\n\"\"\") == \"20000.00\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\n\nassert solution('''\n1\n2\n3\n4\n''') == '50000.00'\n\nassert solution('''\n20\n0.16 0.17 0.18 0.19\n0.19 0.20 0.21 0.22\n0.22 0.23 0.24 0.25\n0.25 0.26 0.27 0.28\n0.28 0.29 0.30 0.31\n0.31 0.32 0.33 0.34\n0.34 0.35 0.36 0.37\n0.37 0.38 0.39 0.40\n0.40 0.41 0.42 0.43\n0.43 0.44 0.45 0.46\n0.46 0.47 0.48 0.49\n0.49 0.50 0.51 0.52\n0.52 0.53 0.54 0.55\n0.55 0.56 0.57 0.58\n0.58 0.59 0.60 0.61\n0.61 0.62 0.63 0.64\n0.64 0.65 0.66 0.67\n0.67 0.68 0.69 0.70\n0.70 0.71 0.72 0.73\n0.73 0.74 0.75 0.76\n0.76 0.77 0.78 0.79\n0.79 0.80 0.81 0.82\n0.82 0.83 0.84 0.85\n0.85 0.86 0.87 0.88\n0.88 0.89 0.90 0.91\n0.91 0.92 0.93 0.94\n0.94 0.95 0.96 0.97\n0.97 0.98 0.99 0.00\n0.00 0.01 0.02 0.03\n0.03 0.04 0.05 0.06\n0.06 0.07 0.08 0.09\n0.09 0.10 0.11 0.12\n0.12 0.13 0.14 0.15\n0.15 0.16 0.17 0.18\n0.18 0.19 0.20 0.21\n0.21 0.22 0.23 0.24\n0.24 0.25 0.26 0.27\n0.27 0.28 0.29 0.30\n0.30 0.31 0.32 0.33\n0.33 0.34 0.35 0.36\n0.36 0.37 0.38 0.39\n0.39 0.40 0.41 0.42\n0.42 0.43 0.44 0.45\n0.46 0.47 0.48 0.49\n0.49 0.50 0.51 0.52\n0.52 0.53 0.54 0.55\n0.55 0.56 0.57 0.58\n0.58 0.59 0.60 0.61\n0.61 0.62 0.63 0.64\n0.64 0.65 0.66 0.67\n0.67 0.68 0.69 0.70\n0.70 0.71 0.72 0.73\n0.73 0.74 0.75 0.76\n0.76 0.77 0.78 0.79\n0.79 0.80 0.81 0.82\n0.82 0.83 0.84 0.85\n0.85 0.86 0.87 0.88\n0.88 0.89 0.90 0.91\n0.91 0.92 0.93 0.94\n0.94 0.95 0.96 0.97\n0.97 0.98 0.99 0.00\n0.00 0.01 0.02 0.03\n0.03 0.04 0.05 0.06\n0.06 0.07 0.08 0.09\n0.09 0.10 0.11 0.12\n0.12 0.13 0.14 0.15\n0.15 0.16 0.17 0.18\n0.18 0.19 0.20 0.21\n0.21 0.22 0.23 0.24\n0.24 0.25 0.26 0.27\n0.27 0.28 0.29 0.30\n0.30 0.31 0.32 0.33\n0.33 0.34 0.35 0.36\n0.36 0.37 0.38 0.39\n0.39 0.40 0.41 0.42\n0.42 0.43 0.44 0.45\n0.46 0.47 0.48 0.49\n0.49 0.50 0.51 0.52\n0.52 0.53 0.54 0.55\n0.55 0.56 0.57 0.58\n0.58 0.59 0.60 0.61\n0.61 0.62 0.63 0.64\n0.64 0.65 0.66 0.67\n0.67 0.68 0.69 0.70\n0.70 0.71 0.72 0.73\n0.73 0.74 0.75 0.76\n0.76 0.77 0.78 0.79\n0.79 0.80 0.81 0.82\n0.82 0.83 0.84 0.85\n0.85 0.86 0.87 0.88\n0.88 0.89 0.90 0.91\n0.91 0.92 0.93 0.94\n0.94 0.95 0.96 0.97\n0.97 0.98 0.99 0.00\n0.00 0.01 0.02 0.03\n0.03 0.04 0.05 0.06\n0.06 0.07 0.08 0.09\n0.09 0.10 0.11 0.12\n0.12 0.13 0.14 0.15\n0.15 0.16 0.17 0.18\n0.18 0.19 0.20 0.21\n0.21 0.22 0.23 0.24\n0.24 0.25 0.26 0.27\n0.27 0.28 0.29 0.30\n0.30 0.31 0.32 0.33\n0.33 0.34 0.35 0.36\n0.36 0.37 0.38 0.39\n0.39 0.40 0.41 0.42\n0.42 0.43 0.44 0.45\n0.46 0.47 0.48 0.49\n0.49 0.50 0.51 0.52\n0.52 0.53 0.54 0.55\n0.55 0.56 0.57 0.58\n0.58 0.59 0.60 0.61\n0.61 0.62 0.63 0.64\n0.64 0.65 0.66 0.67\n0.67 0.68 0.69 0.70\n0.70 0.71 0.72 0.73\n0.73 0.74 0.75 0.76\n0.76 0.77 0.78 0.79\n0.79 0.80 0.81 0.82\n0.82 0.83 0.84 0.85\n0.85 0.86 0.87 0.88\n0.88 0.89 0.90 0.91\n0.91 0.92 0.93 0.94\n0.94 0.95 0.96 0.97\n0."
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 0 100 100\n30 30 60 60\n1.5 1.5 1.5 1.5\n2 2 2 2 2\n''') == '12000000.00'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == '5'\nprint(solution())\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\nassert solution('''\n4 2\n1 3\n4 5\n2 3\n''') == '6'\nassert solution('''\n5 3\n1 2\n4 5\n2 3\n''') == '3'\nassert solution('''\n10 1\n4 5\n3 2\n1 3\n2 4\n3 5\n3 4\n4 2\n''') == '45'\nassert solution('''\n4 2\n1 3\n4 5\n2 3\n''') == '11'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '5 3'\n    '1 3'\n    '4 5'\n    '2 4'\n    ) == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4') == '5'\nassert solution('5 4\\n1 5\\n2 4\\n3 3\\n5 5\\n5 4\\n6 3\\n7 4') == '6'"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4\\n') == '5'\nassert solution('3 1\\n3 2\\n') == '1'\nassert solution('3 1\\n2 2\\n') == '1'\nassert solution('10 3\\n1 3\\n4 5\\n2 4\\n7 8\\n9 10\\n10 4\\n2 4\\n5 7\\n3 3\\n') == '4'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5\n1 3\n4 5\n2 4\n''') == '5'\n\nassert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '4'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4\\n') == '5'\nassert solution('100000 3\\n1 3\\n4 5\\n2 4\\n') == '50'\nassert solution('50000 3\\n1 3\\n4 5\\n2 4\\n') == '501'\nassert solution('1000000 3\\n1 3\\n4 5\\n2 4\\n') == '5000000'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n4 5\") == \"5\"\nassert solution(\"5 3\\n4 5\") == \"0\"\nassert solution(\"6 5\\n5 4\\n2 4\") == \"1\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 3\\n4 5\\n2 4\") == \"5\"\nprint(solution(\"5 3\\n1 3\\n4 5\\n2 4\"))\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1'\nassert solution('10 2') == '10'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\nassert solution(\"3 5 6\\n4 3 7\\n5 2 4\\n0 0 0\") == \"65\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('5 2 4') == '16'\nassert solution('0 0 0') == '0'"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('1 2 2') == '1'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"4 6 4\") == \"7\"\nassert solution(\"11 13 17\") == \"2095\"\nassert solution(\"7 4 3\") == \"15\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n') == '2095'\nassert solution('11\\n12\\n13\\n') == '2097'\nassert solution('11\\n12\\n13\\n') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n11 13 17\n5 2 4\n0 0 0\n''') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''11 13 17\n5 2 4\n0 0 0''') == '2095'\nassert solution('''11 4 17\n4 5 2\n0 0 0''') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''11 13 17\n5 2 4\n0 0 0''') == '2095'\nassert solution('''41 2 4\n5 2 4\n0 0 0''') == '4079'''\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0\\n') == '2095'\nassert solution('1 2 3\\n2 2 4\\n3 3 5\\n4 4 6\\n5 5 7\\n6 6 8\\n7 7 9\\n8 8 10\\n9 9 11\\n10 10 12\\n') == '1460'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 4\\n') == '2095'\n\nassert solution('11 13 17\\n') == '2095'\n\nassert solution('1 2 2\\n') == '1'"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint(c);\\nprint(`My name is ${b}`);\\nend\") == \"My name is Gon\"\nassert solution(\"var a = `My name is ${a}`;\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint(c);\\nprint(`My name is ${b}`);\\nend\") == \"My name is My name is Gon\"\n\"\"\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == '''\nMy name is Gon\nMy name is Gon\n'''\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n''') == '''\nMy name is Gon\nMy name is Gon\nMy name is Gon\n'''\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n''') == '''\nMy name is Gon\nMy name is Gon\nMy name is Gon\n'''\n\nprint(solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n'''))\n\nprint(solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n'''))"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint(c);\\nprint(`My name is ${b}`);\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint(c);\\nprint(`My name is ${b}`);\\nend.') == 'My name is Gon'\nassert solution('print(`My name is ${a}`);\\nprint(`My name is ${b}`);\\nend.') == 'My name is Gon'\n\"\"\"\n\nimport re"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == \"My name is Gon\""
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n\"\"\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon\\nMy name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"var a = 'Gon';\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint(c);\\nprint(`My name is ${b}`);\\nend.\") == \"My name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"var a = \" + \"\\\"Gon\\\";\" + \"var b = a;\" + \"var c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\n'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n7 8\n10''') == 'fill 2\\ndiscard 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n'''\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n7 8\\n10') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\nassert solution('5\\n16 18 4 4 2') == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 2\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 2\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 2\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ntransfer 2 2\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'fill 2\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('2 3') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('3') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('3 2') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('4') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\\n10\\n20\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\n\"\nassert solution(\"2\\n7 8\\n10\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\n\"\nassert solution(\"2\\n7 8\\n10\\n4\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\n\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n7\n10\n\"\"\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\"\"\", \"invalid move\")\nassert solution(\"\"\"\n1\n7\n10\n\"\"\") == \"impossible\", \"not enough liquid\"\nassert solution(\"\"\"\n2\n10\n10\n\"\"\") == \"impossible\", \"sink full\"\nassert solution(\"\"\"\n2\n7\n10\n\"\"\") == \"invalid move\", \"invalid number\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n10\n18\n\"\"\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\"\nassert solution(\n\"\"\"\n2\n2\n20\n\"\"\") == \"impossible\"\nassert solution(\n\"\"\"\n3\n2\n20\n\"\"\") == \"impossible\"\nassert solution(\n\"\"\"\n3\n2\n3\n\"\"\") == \"impossible\"\nassert solution(\n\"\"\"\n4\n2\n1\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 7 8') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4 1\") == \"5\"\nassert solution(\"5 10 10\") == \"10\"\nassert solution(\"5 4 5\") == \"5\"\nassert solution(\"5 5 10\") == \"5\""
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"10 20 30\") == \"30\"\nassert solution(\"10 20 30 40 50 60 70 80 100\") == \"50\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('2 3 1') == '3'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '0'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5 4 3\\n') == '27'\nassert solution(\n    '3 4 1\\n') == '1'\n'''"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('1 2 4') == '3'\nassert solution('10 10 10') == '10'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('1 1 1') == '1'\nassert solution('10 2 1') == '10'\nassert solution('2 2 2') == '1'\nassert solution('10 3 3') == '10'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('20 10 5') == '25'\nassert solution('10 3 3') == '9'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"27\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 4 3') == '27'\n\n\"\"\""
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1 1') == '3'\nassert solution('6 3 3') == '1'\nassert solution('10 2 4') == '5'\n\"\"\"\n\nimport sys\nimport os\nsys.path.append(os.path.dirname(os.path.abspath(__file__)) +\n                 '/../')\n\nfrom utils import *"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 4 2 1 1 3\") == \"3\"\nassert solution(\"1 4 2 1 2 3\") == \"4\"\nassert solution(\"4 5 3 2 1 2\") == \"3\"\nassert solution(\"2 5 1 2 3\") == \"4\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"-1\"\nassert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"4\"\nassert solution(\"4 3 5\") == \"4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 2\") == \"3\"\nassert solution(\"4 3 5\") == \"3\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1 3 3\") == \"3\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3 5\n2 3 1 2''') == '3'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5\") == \"3\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 5\\n1 2 1 2') == '4'\nassert solution('4 3 5\\n2 3 1 2') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 2 3 4\") == \"-1\"\nassert solution(\"1 2 3 5 4\") == \"3\""
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '4'\n\nassert solution('''\n5 6 7 8\n1 2 3 4 5 6\n2\n5\n5\n4\n3\n2\n1\n1\n0\n5\n''') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3 5\n2 3 1 2\n2''') == '3'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n\"\"\") == \"\"\"\n3\n-1\n4\n\"\"\".strip()\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 3000 1000') == \"533.3333333333\"\nassert solution('100 1000 100') == \"0\"\nassert solution('1000 1000 1000') == \"10\"\nassert solution('1000000 10 2000000') == \"2000000\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1000 3000 1000\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"20 3000 20\"\"\") == \"0.0\"\nassert solution(\"\"\"3 2 4\"\"\") == \"3.0\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('1000000 1000000 1000000') == '3000000.0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1000 3000 1000') == '533.3333333333'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '5.0'\nassert solution('2 2 2') == '1.0'\nassert solution('5 5 2') == '3.0'\nassert solution('10 10 10') == '0.0'\nassert solution('5 5 5') == '2.0'\n\n'''\n\nfrom math import pi"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '1000 3000 1000',\n    '10',\n])) == '533.3333333333', 'First'\nassert solution('\\n'.join([\n    '1000 3000 1000',\n    '100',\n])) == '533.3333333333', 'Second'\nassert solution('\\n'.join([\n    '1000 3000 1000',\n    '1000',\n])) == '533.3333333333', 'Third'\nassert solution('\\n'.join([\n    '1000 3000 1000',\n    '100 1000',\n])) == '533.3333333333', 'Fourth'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('1 1 3') == '0'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('10 10 10') == '12.0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('1000000 1000000 1000') == '1000000.000001000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n10000000 10000000 10000000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n1000000001 1000000001 1000000001\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n1000000001 1000000001 1000000001 1000000001\n\"\"\") == \"533.3333333333\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1\n10 0\n10 10\n10 20\n10 30\n10 40''') == \"14.14\"\n\nassert solution('''5 1\n10 0\n10 10\n10 20\n10 30\n10 40''') == \"15.15\"\n\nassert solution('''5 1\n10 0\n10 10\n10 20\n10 30\n10 40''') == \"15.15\"\n\nassert solution('''5 1\n10 0\n10 10\n10 20\n10 30\n10 40''') == \"14.14\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '14.14'\nassert solution(stdin) == '14.14'\nassert solution() == '14.14'\nassert solution(stdin) == '14.14'\n\nassert solution() == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 0\n10 0\n10 10\n''') == '14.14'\nassert solution('''\n2 1\n0 0\n10 10\n''') == '16.64'\nassert solution('''\n5 1\n0 0\n1 0\n0 1\n1 0\n''') == '9.21'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 3') == '1.00'\nassert solution('2 4\\n5 5') == '1.00'\nassert solution('100 100\\n100 100') == '100.00'\n'''\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 0\n10 0\n10 10''') == '14.14'\nassert solution('''2 0\n0 10\n10 10''') == '10.00'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 0\n5 5\n''') == '0.95'\nassert solution('''\n10 0\n15 10\n''') == '16.72'\nassert solution('''\n10 0\n10 10\n''') == '16.72'\nassert solution('''\n1 0\n1 1\n''') == '2.00'\nassert solution('''\n1 0\n2 2\n''') == '2.00'\n'''\nNotes:\nIn the first example, Spot gets stuck in a cycle of around ten ticks, and the distance between the two tick positions is 2.0. So the answer is 16.72.\n\nIn the second example, Spot gets stuck in a cycle of around one tick, and the distance between the two tick positions is 2.0. So the answer is 16.72.\n\nIn the third example, Spot gets stuck in a cycle of around six ticks, and the distance between the two tick positions is 4.0. So the answer is 16.72.\n\nIn the fourth example, Spot gets stuck in a cycle of around six ticks, and the distance between the two tick positions is 4.0. So the answer is 16.72.\n\nIn the fifth example, Spot gets stuck in a cycle of around ten ticks, and the distance between the two tick positions is 2.0. So the answer is 16.72.\n\nIn the sixth example, Spot gets stuck in a cycle of around ten ticks, and the distance between the two tick positions is 2.0. So the answer is 16.72.\n\nIn the seventh example, Spot gets stuck in a cycle of around six ticks, and the distance between the two tick positions is 4.0. So the answer is 16.72.\n\nIn the eight example, Spot gets stuck in a cycle of around six ticks, and the distance between the two tick positions is 4.0. So the answer is 16.72.\n\nIn the ninth example, Spot gets stuck in a cycle of around ten ticks, and the distance between the two tick positions is 2.0. So the answer is 16.72.\n\nIn the tenth example, Spot gets stuck in a cycle of around six ticks, and the distance between the two tick positions is 4.0. So the answer is 16.72.\n\n'''\n) == '2.00'"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2 0\\n'\n    '10 0\\n'\n    '10 10') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '14.14'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '123457 0'\nassert solution('3 4') == '123456 1'\nassert solution('3 5') == '123457 2'\nassert solution('3 6') == '123456 3'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123457 15221 1800000\\n123456\\n123458\\n123457\\n\"\n) == \"123457 0\\n0 2\\n\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n0 1\\n'\n\nassert solution('''\n2 2\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n''') == '123457 0\\n0 2\\n0 1\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '0 2\\n0 2\\n0 2\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '123457 0'\nassert solution('3 3') == '0 2'\nassert solution('5 3') == '123458 1'\nassert solution('5 3') == '0 2'\nassert solution('2 3') == '123456 0'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n1\n1000000000 999999999\n2\n1000000000 999999999\n3\n1000000000 999999999\n    '''\n) == '1000000000 0 2'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '90'\nassert solution('3 4 5 10 2 5') == '90'\n\"\"\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 4 5\\n1 3 2\\n') == '90'\nassert solution('4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n') == '42'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n5\\n2\\n4\\n5\\n1\\n3') == '90'\nassert solution('5\\n3\\n5\\n2\\n4\\n5\\n1\\n3') == '90'\nassert solution('10\\n3\\n5\\n2\\n4\\n5\\n1\\n3') == '120'\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n1 2\\n3 4') == 90\nassert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n1 2 4 5 3') == 90\nassert solution('1\\n3\\n2 1 2\\n3 4') == 81\n\"\"\"\nimport math\n\nn = int(input())\ncoaches = list(map(int, input().split()))\norders = list(map(int, input().split()))\n\nchaos = 0\nfor idx in range(n):\n    if orders[idx] == 1:\n        chaos += coaches[idx]\n        coaches[idx] = 0\n\ntotal_chaos = 0\nfor idx in range(n):\n    total_chaos += math.ceil(coaches[idx] / 10)\n\nprint(total_chaos * math.ceil(chaos / n))"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n') == \"90\"\nassert solution('1\\n1\\n1\\n1\\n1\\n') == \"1\"\nassert solution('3\\n1 3\\n1\\n1\\n1\\n') == \"0\""
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\\\n5\n3 5 10 2 5\n2 4 5 1 3\\\n\"\"\") == \"90\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 5 10 2 5\\n2 4 5 1 3\") == \"90\"\nassert solution(\"1\\n3 3 3 2 2\\n1 3 3 1 2\") == \"6\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n3 5 10 2 5\n2 4 5 1 3\n\"\"\") == \"90\"\nassert solution(\"\"\"\n5\n3 4 1 3 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4\n2 3 2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n1\n1\n1\n2\n1\n\"\"\") == \"1\"\nassert solution(r\"\"\"\n3\n6\n4\n1\n5\n5\n3\n4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3\\n') == '90'\nassert solution('3\\n4 5 6 8\\n6 2 4\\n') == '24'\nassert solution('2\\n10 20\\n30 20\\n') == '30'\nassert solution('10\\n0 0 0 0 0 0 0\\n') == '0'\nassert solution('0\\n0\\n') == '0'"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution(\n'''\n3\n1 1 1\n0 0 0\n0 0 0\n''') == '3.000000'\nassert solution(\n'''\n1\n3 4 4\n1 5 5\n''') == '1.000000'"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2 6\n0 4 3\n0 8 2''') == '6.000000'\nassert solution('''3\n1 2 6\n0 4 3\n0 8 2\n0 9 5\n5 9 7\n0 8 5''') == '12.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 4\n0 0 2\n1 1 1\n1 1 2\n1 2 1\n1 2 2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4 3\n0 1 2\n1 2 1\n1 2 2\n1 3 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 7\n0 1 3\n1 2 2\n1 3 1\n2 3 2\n3 4 1\n3 5 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n10 20\n0 0 2\n1 1 1\n1 1 2\n1 2 1\n2 2 2\n2 3 1\n3 3 2\n3 4 1\n3 5 2\n4 4 2\n4 5 2\n5 5 1\n5 6 1\n\"\"\") == \"19\"\n\nassert solution(\"\"\"\n9 8\n0 0 3\n1 1 2\n1 1 3\n1 2 1\n2 2 1\n2 3 2\n3 3 1\n3 4 1\n4 4 1\n4 5 1\n\"\"\") == \"10\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n') == '6.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n0 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\n\n## 4 ##"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution('''\n2 3\n1 2\n1 3\n''') == '2.000000'\nassert solution('''\n3\n1 2\n0 4\n0 8\n''') == '4.000000'\nassert solution('''\n1\n0 2\n1 3\n''') == '1.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 6\n0 4 3\n0 8 2\n0 9 5\n4 7 2\n3 6 4\n''') == '6.000000'\nassert solution('''\n1\n0\n''') == '1.000000'\nassert solution('''\n2\n0\n''') == '1.000000'\nassert solution('''\n100\n0\n0\n''') == '100.000000'\n\n'''\nWrite a function that takes a string as input and returns the number of digits in the string.\n\nExample\n\nFor inputString = \"3456789\", the output should be\ncountDigits(inputString) = 9.\n'''\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '6.000000'\nassert solution('3 4') == '2.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1\n.\n0\nSample Output:\n1\n.\n''') == '1.'\n\nassert solution('''\n4\n0 0\n0 0\n1 1\n.\n0\n''') == '1.'\n\nassert solution('''\n2\n0 0\n0 0\n1 2\n.\n0\n''') == '1.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\\n.\\n0\") == \"1.\\n.\\n\"\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 0\n1\n\"\"\") == \"\"\"\n1.\n..\n\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n0 0\\n1.\\n.\\n.\\n.\\n.\\n0 0\\n\") == \"1.\\n.\\n.\\n.\\n.\\n.\\n\"\nassert solution(\"5 3\\n0 0\\n0 0\\n1.\\n.\\n.\\n.\\n.\\n0 0\\n\") == \"1.\\n.\\n.\\n.\\n.\\n.\\n\"\nassert solution(\"5 3\\n0 0\\n0 0\\n0 0\\n1.\\n.\\n.\\n.\\n.\\n0 0\\n\") == \"1.\\n.\\n.\\n.\\n.\\n.\\n\"\nassert solution(\"5 3\\n0 0\\n0 0\\n0 0\\n1.\\n.\\n.\\n.\\n.\\n0 0\\n\") == \"1.\\n.\\n.\\n.\\n.\\n.\\n\"\nassert solution(\"5 3\\n0 0\\n0 0\\n0 0\\n0 0\\n1.\\n.\\n.\\n.\\n.\\n0 0\\n\") == \"1.\\n.\\n.\\n.\\n.\\n.\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1') == '1.\\n..\\n'\nassert solution('2\\n1 2\\n1.\\n0.\\n0.\\n1.\\n0.\\n') == '1.\\n..\\n1\\n1\\n'\nassert solution('2\\n0 0\\n1.\\n2.\\n1.\\n0.\\n') == '1.\\n.\\n1\\n2\\n1\\n'\nassert solution('2\\n1.\\n1.\\n1.\\n1.\\n0\\n') == '1.\\n1.\\n1.\\n1.\\n1\\n1\\n1\\n1\\n'\nassert solution('2\\n0.\\n1.\\n0.\\n0.\\n0\\n') == '1.\\n1.\\n1.\\n1.\\n1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\nSample Output:\n1.\n..\n\"\"\") == \"\"\"\n1.\n..\n\"\"\"[:-1]\n\nassert solution(\"\"\"\n1\n0 0\n0 0\n1.\n.\n.\nSample Output:\n2.\n.\n\"\"\" ) == \"\"\"\n2.\n.\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0.1\\n1.\\n.\\n.\\n.\\n.\\n1.\\n1.\\n\") == \"1.\\n..\\n1.\\n\"\nassert solution(\"10\\n0.1\\n0.1\\n1.\\n.\\n.\\n.\\n1.\\n1.\\n\") == \"1.\\n..\\n1.\\n\"\nassert solution(\"4\\n0.1\\n0.1\\n1.\\n.\\n.\\n.\\n1.\\n1.\\n\") == \"1.\\n..\\n1.\\n\"\nassert solution(\"4\\n0.1\\n0.1\\n1.\\n.\\n.\\n.\\n1.\\n1.\\n\") == \"1.\\n..\\n1.\\n\"\nassert solution(\"1\\n0.1\\n1.\\n.\\n.\\n.\\n.\\n1.\\n1.\\n\") == \"1.\\n..\\n1.\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\") == \"1.\\n..\\n1.\"\nassert solution(\"2\\n0 0\\n0 0\\n1.1\\n0\\n0\\n1.\\n0\\n1\\n0\\n1.1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n0\n2.\n.\n.\n1\nSample Input:\n4\n0 0\n0 0\n1.\n..\n1\nSample Output:\n1.\n..\n.\n.\n.\n1\n''') == '1.\n.\n.\n.\n.\n.\n.\n''')\n\nassert solution('''5\n0 0\n0 0\n1.\n..\n1\nSample Output:\n1.\n..\n.\n.\n.\n.\n.\n''') == '1.\n.\n.\n.\n.\n.\n.\n''')\n\nassert solution('''5\n0 0\n0 0\n1.\n..\n1\nSample Output:\n2.\n..\n.\n.\n.\n.\n.\n''') == '1.\n.\n.\n.\n.\n.\n.\n.\n''')\n\nassert solution('''5\n0 0\n0 0\n1.\n..\n1\nSample Output:\n2.\n..\n.\n.\n.\n.\n.\n''') == '1.\n.\n.\n.\n.\n.\n.\n.\n''')\n\nassert solution('''5\n0 0\n0 0\n1.\n..\n1\nSample Output:\n2.\n..\n.\n.\n.\n.\n.\n''') == '1.\n.\n.\n.\n.\n.\n.\n.\n''')"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2.1.2.1.2.1.2.1.2.1.2.2.2.2.1.1.2.1.2.1.1.2.1.1.1.1.2.1.2.1.1.1.1.2.1.1.1.2.1.1.1.1.2.1.1.1.1.1.1.2.1.1.1.1.1.1.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"2\""
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n\"\"\"\n\nN = int(input())\nwords = []\nfor _ in range(N):\n    words.append(input())\nQ = int(input())\nfor _ in range(Q):\n    R = int(input())\n    if R == 1:\n        print(len(words[0]) - 1)\n    else:\n        s = int(input())\n        print(len(words[s - 1]) - 1)\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\nabc\nabcd\na\nbcd\nabc\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\ndog\ntiger\ncat\nbird\ndog\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1\\n1\\n1'\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1\\n2\\n'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '2'\n\n'''\nSolution:\n\n'''\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'a'\nassert solution('2') == 'a'\nassert solution('3') == 'abc'\n'''\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"1\"\nassert solution(\"bc\") == \"1\"\nassert solution(\"abc\") == \"2\"\n\"\"\"\n\nfrom bisect import bisect_left"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 1 1\n''') == 'YES'\nassert solution('''\n2 3 1 1\n''') == 'NO'\nassert solution('''\n1 1 1 3\n''') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 3 4') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 2 2') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == \"YES\"\nassert solution('2 2 2 2') == \"NO\"\nassert solution('1 1 2 2') == \"YES\"\nassert solution('1 1 2 1') == \"NO\"\nassert solution('1 1 2 2') == \"NO\""
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 3 4') == 'YES'\nassert solution('5 3 1 2') == 'NO'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 1 1') == 'NO'\nassert solution('1 3 1 1') == 'YES'\n\"\"\"\nimport sys"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 2 2 2') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 1\n''') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 1 2 3\") == \"YES\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('3 9\\n-0.0359 0.7342 9.0000\\n-0.0359 0.7342 9.0000\\n-0.0359 0.7342 9.0000') == '9.6144000000'\nassert solution('4 100\\n-0.0000 0.0000 100.0000\\n-0.0000 0.0000 100.0000\\n-0.0000 0.0000 100.0000') == '100.0000'\nassert solution('6 20\\n-0.0000 0.0000 10.0000\\n-0.0000 0.0000 10.0000\\n-0.0000 0.0000 10.0000') == '20.0000'\nassert solution('7 8\\n-0.0000 0.0000 0.0000\\n-0.0000 0.0000 0.0000\\n-0.0000 0.0000 0.0000') == '0.0000'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 96 -0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000') == '80.5696000000'\nprint('All tests passed')"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 96') == \"80.5696000000\"\nassert solution('2 0.0080 1.5417 25.0000') == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000'\nassert solution('''\n4 2\n-0.8247 0.9599 16.0363\n-0.8247 0.9599 16.0363\n-0.8247 0.9599 16.0363\n-0.8247 0.9599 16.0363\n''') == '16.0363'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == \"80.5696\"\n\nassert solution('2 10\\n-10.0 1.0 25.0') == \"10.0\"\n\nassert solution('2 10\\n-10.0 1.0 25.0\\n-0.0080 1.5417 25.0000') == \"80.5696\"\n\nassert solution('4\\n0.2 1.0 0.7') == \"2.2\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\"\nassert solution(\"0.01 0.01 0.01\") == \"0.01\"\nassert solution(\"-0.0080 1.5417 25.0000\") == \"80.5696000000\"\n\"\"\"\n\nimport math\n\nn, t = list(map(int, input().split()))\na = list(map(float, input().split()))\nb = list(map(float, input().split()))\nc = list(map(float, input().split()))\n\nk = 0\nfor i in range(n):\n    k += a[i] * t ** 2 + b[i] * t + c[i]\n\nprint(math.ceil(k / t))"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\"\nassert solution(\"1 0.0080 1.5417 25.0000\") == \"80.5675000000\"\n\nThe input data is always valid, so there is no need for extra checks.\n\n\n'''\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000\\n-0.0080 1.5417 25.0000') == '80.5696'\nassert solution('2 10\\n-1.3 1.7 1.3\\n-1.3 1.7 1.3') == '1.3'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 96\\n-0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('2 3\\n-0.12 0.56 1.0000') == '95.0'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('6 0 0 1 1 2 2 4 0 0 1') == '3'\nassert solution('1 0 0 0 1 0 0 0') == '1'\nassert solution('0 0 0 1 0 0 0 0') == '1'\nassert solution('0 0 0 1 0 0 0 1') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"4 10 0 1 1 1 0 0 1\") == \"4\"\nassert solution(\"6 10 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"5 10 0 1 1 1 1 0 0 1\") == \"3\"\nassert solution(\"2 4 0 1 1 1 1 1 1\") == \"3\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 0 1\n0 0 1\n0 0 1\n''') == '2'\nassert solution('''\n4\n-1000000 0 1\n1000000 -1000000\n1000000 0 1\n1000000 -1000000\n-1000000 0 1\n''') == '2'\nassert solution('''\n5\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n''') == '2'\nassert solution('''\n4\n-1000000 0 1\n1000000 -1000000\n1000000 0 1\n1000000 -1000000\n-1000000 0 1\n''') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1 2 1 1 0 0 0') == '2'\nassert solution('5 -1 -1 -1 -1 -1 -1') == '2'\nassert solution('10 1 1 1 1 1 1 1 1 1') == '7'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0 1 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"0 1 0 1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('3 0 0 1 1 1 0 0 1') == '3'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('5 4 1 2 2 4 3 0 0 1 0') == '3'\nassert solution('10 10 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '2'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\") == \"1400\"\nassert solution(\"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n1300 0 150\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 3') == '1400'\nassert solution('1 1 10') == '0'\nassert solution('1 1 0') == '10'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150\"\n) == \"1400\"\n\nassert solution(\n    \"3 2 2\\n0 0 400\\n1000 0 400\\n2000 0 400\"\n) == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n30000 0 150\n12000 0 150\nSample Output:\n1400\n\"\"\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 3') == '1400'\nassert solution('4 2 3') == '400'\nassert solution('2 1 5') == '1000'\nassert solution('3 3 3') == 'impossible'\nassert solution('3 5 3') == '1000'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == 'impossible'\nassert solution('1 3 2') == '1'\nassert solution('3 5 4') == 'impossible'\nassert solution('5 3 4') == '1'\nassert solution('3 3 3') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\nassert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 5') == \"impossible\"\nassert solution('4 2 3') == \"impossible\"\nassert solution('4 2 0') == \"impossible\"\nassert solution('4 2 0 0') == \"impossible\"\nassert solution('5 5 0 0') == \"impossible\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm\\n\\nstockholm helsinki\\n\\noslo london\\noslo copenhagen\\nstockholm copenhagen\\ncopenhagen berlin\\ncopenhagen amsterdam\\n\\nlondon amsterdam\\nstockholm amsterdam\\n\\nhelsinki berlin\\n\\nstockholm amsterdam\\noslo london\\n\\nstockholm amsterdam') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"15 10\") == \"3907\"\nassert solution(\"15 15\") == \"3907\"\nassert solution(\"15 15\") == \"3907\"\nassert solution(\"15 15\") == \"3907\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''20 10\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\n\nassert solution('''19 10\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '5942'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907':\n    print('Success')\nelse:\n    print('Failed')\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\helsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm\\noslo london\\noslo copenhagen\\nstockholm copenhagen\\ncopenhagen berlin\\ncopenhagen amsterdam\\nhelsinki berlin\\nlondon amsterdam\\nberlin amsterdam\\nlondon dublin\\nreykjavik dublin\\nreykjavik oslo\\nlondon brussels\\nbrussels amsterdam\\nstockholm amsterdam\\noslo london\\n\") == \"3907\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907':\n    print('Success')\nelse:\n    print('Failed')\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 3\") == \"5\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 15\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm 415\\nstockholm helsinki 396\\noslo london 1153\\noslo copenhagen 485\\nstockholm copenhagen 522\\ncopenhagen berlin 354\\ncopenhagen amsterdam 622\\nhelsinki berlin 1107\\nlondon amsterdam 356\\nberlin amsterdam 575\\nlondon dublin 463\\nreykjavik dublin 1498\\nreykjavik oslo 1748\\nlondon brussels 318\\nbrussels amsterdam 173\\nstockholm amsterdam') == '3907'\nassert solution('30 30\\nhobart\\ngothenburg\\nwinsford\\nwoodside\\ngosford\\nintermish\\nengarde\\npenshurst\\nhudson\\nwinsford\\nwestwood\\nwinston-salem\\ngothenburg\\nwoodside\\nintermish\\nintermir\\ngosford\\nintermish\\nhudson\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nwinsford\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\ngosford\\nintermir\\nhudson\\ngosford\\nintermir\\nhudson\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\nintermir\\ninter"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"10 1\") == \"1\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n''') == '3907'\nprint(solution('''\n10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n'''))\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\nassert solution(\"5 6\\n1 2 2 3 4 3\\n1 5\\n1 6\\n2 5\\n2 6\") == \"1\"\nassert solution(\"4 4\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\") == \"1\""
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '2'\nassert solution('''4 7\n1 2 2 3 4 3\n1 2 2 2 3 3\n1 2 2 2 3 2\n1 2 2 2 2 3\n1 2 2 2 2 2\n''') == '1'\nassert solution('''5 8\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '1'\nassert solution('''6 4\n3 1 3 3 1 3\n0 5\n1 6\n3 3\n3 1\n1 1\n1 1\n0 0\n''') == '0'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '1'\nassert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n10 10\\n3 6\\n8 7\\n9 9\\n12 12\\n5 14\\n10 12\\n14 14\\n8 8\\n') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '1'\nassert solution('5 10\\n0 9\\n0 5\\n3 4\\n1 5\\n2 3\\n3 4\\n5 2\\n5 3\\n6 4\\n7 4\\n8 4\\n9 4\\n10 3\\n11 3\\n12 3\\n13 3\\n14 3\\n15 3\\n16 3\\n17 3\\n18 3\\n19 3\\n20 3\\n21 3\\n22 3\\n23 3\\n24 3\\n25 3\\n26 3\\n27 3\\n28 3\\n29 3\\n30 3\\n31 3\\n32 3\\n33 3\\n34 3\\n35 3\\n36 3\\n37 3\\n38 3\\n39 3\\n40 3\\n41 3\\n42 3\\n43 3\\n44 3\\n45 3\\n46 3\\n47 3\\n48 3\\n49 3\\n50 3\\n51 3\\n52 3\\n53 3\\n54 3\\n55 3\\n56 3\\n57 3\\n58 3\\n59 3\\n60 3\\n61 3\\n62 3\\n63 3\\n64 3\\n65 3\\n66 3\\n67 3\\n68 3\\n69 3\\n70 3\\n71 3\\n72 3\\n73 3\\n74 3\\n75 3\\n76 3\\n77 3\\n78 3\\n79 3\\n80 3\\n81 3\\n82 3\\n83 3\\n84 3\\n85 3\\n86 3\\n87 3\\n88 3\\n89 3\\n90 3\\n91 3\\n92 3\\n93 3\\n94 3\\n95 3\\n96 3\\n97 3\\n98 3\\n99 3\\n100 3\\n\\n1\\n2\\n1\\n2\\n2\\n1\\n\\n2\\n2\\n3\\n4\\n2\\n3\\n4\\n1\\n3\\n2\\n1\\n3\\n4\\n3\\n4\\n1\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1''') == \"1\"\nassert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\nSample Input:\n5 5\n10 5 10 3 3 2\n4 1 2 2\n4 1 3\n0 0\n0 1\nSample Output:\n3 1\n3 1\n2 0\n2 1''') == \"2\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4') == '1'\nassert solution('5 3 1 3 4 2') == '3'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"2\"\nassert solution(\"4 3\\n1 1 1 1\\n1 1\\n1 1\\n1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0\\n0\\n1\\n1') == '00010'\nassert solution('3\\n5\\n0\\n1\\n0') == '00010'\nassert solution('4\\n3\\n0\\n1\\n1') == '00001'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n01001\n11100\n10111\n''') == '00010'\nassert solution('''\n4\n10101\n11001\n10011\n''') == '00001'\nassert solution('''\n8\n1010111\n1110011\n1000111\n1100011\n1110001\n1011001\n0001011\n''') == '0001011'\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n01001\\n11100\\n10111\") == \"00010\"\nassert solution(\"5 10\\n1 0 1 0 0 1 1 1\\n1 1 1 0 1 1 0 1\\n0 1 1 0 1 1 0 1\\n1 1 1 1 1 1 1 1\\n1 0 1 0 1 1 1 1\\n0 0 0 1 1 1 1 1\") == \"00011\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1\n1\n0''') == '11010'\n\nassert solution('''5\n1\n1\n0\n1\n0\n0\n1\n0''') == '00010'\n\nassert solution('''3\n1\n0\n0\n0''') == '00100'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\n11100\n01001\n0''') == '00010'\n\nassert solution('''6 5\n01001\n00100\n01000\n11100\n10111\n10011\n''') == '11100'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 5\n01001\n11100\n10111\n''') == '00010'\nassert solution('''\n3 5\n11111\n11100\n10111\n''') == '01001'\nassert solution('''\n3 6\n01001\n11100\n11100\n10111\n11100\n11100\n10111\n''') == '01001'\n\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 5\n01001\n11100\n10111\n\"\"\") == \"00010\"\n\"\"\"\n---Input---\n\nSample Output:\n\"\"\"\n\n\"\"\"\n---Output---\n\n\"\"\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"01001\") == \"00010\"\nassert solution(\"11100\") == \"01100\"\nassert solution(\"10111\") == \"00111\""
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111\\n') == '00010'\nassert solution('3 4\\n01001\\n11100\\n10111\\n') == '00100'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\") == \"01001\"\nassert solution(\"3 3\") == \"01100\"\nassert solution(\"5 5\") == \"01001\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n6 2\n0 4\n6 12\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1\n2 3\n1 5\n3 2\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2 2\\n6 2\\n') == 'possible'\nassert solution('6\\n2 2\\n6 12') == 'impossible'\nassert solution('2\\n2\\n1 2') == 'impossible'\nassert solution('6\\n2\\n2\\n1 2') == 'impossible'\nassert solution('1\\n2\\n2\\n1 2\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'possible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"possible\"\nassert solution('''6 2\n0 4\n6 12\nSample Input:\n1\n1 1\nSample Output:\nimpossible\n''') == \"impossible\"\nassert solution('''\n5\n3\n3 4 5 6\nSample Input:\n1\n1 2\nSample Output:\nimpossible\n''') == \"impossible\"\n'''"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n6 2') == 'possible'\nassert solution('1\\n6 12') == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('2\\n10 10\\n10 0\\n10 10\\n0 10') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('1\\n6 3\\n2 6\\n8 9\\n13 14') == 'impossible'\n\nsolution(\"5\\n0 4\\n2 5\\n1 2\")\n\n'''\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n5\n3\n10\n10\n20\n10\n3\n5\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n6\n3\n9\n3\n8\n10\n2\n1\n4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\n2\n5\n1\n2\n3\n4\n\"\"\") == \"possible\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n0 4\\n6 12\") == \"possible\"\nassert solution(\"1\\n1\\n1 4\\n6 12\") == \"impossible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3\\n4 5\\n') == 'possible'\n\nassert solution('1\\n2 3\\n4 5\\n6 7\\n8 9\\n10 11\\n') == 'impossible'\n\nassert solution('1\\n1 2\\n3 3\\n4 4\\n') == 'impossible'\n\nassert solution('1\\n0 3\\n1 2\\n4 5\\n') == 'possible'\n\nassert solution('1\\n0 2\\n4 5\\n') == 'possible'"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\nassert solution(\"5\\n0 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"3\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n\") == \"2\"\n\n'''\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\nassert solution(\"10\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0 1\\n0 0"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\nassert solution('2\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '1'\nassert solution('3\\n4 0 0\\n0 -1 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == '1'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\n''')"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2'\nassert solution('1000000') == '10'\nassert solution('10') == '5'\nassert solution('0.001') == '2'\n\"\"\""
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\") == \"2\"\nassert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n0 0 1\") == \"2\"\nassert solution(\"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n-5 0 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nS 5!bobby_died\nS 6\nS 7\nS 8\nS 9\nS 10\nS 11\nS 12\nS 13\nS 14\nS 15\nS 16\nS 17\nS 18\nS 19\nS 20\nS 21\nS 22\nS 23\nS 24\nS 25\nS 26\nS 27\nS 28\nS 29\nS 30\nS 31\nS 32\nS 33\nS 34\nS 35\nS 36\nS 37\nS 38\nS 39\nS 40\nS 41\nS 42\nS 43\nS 44\nS 45\nS 46\nS 47\nS 48\nS 49\nS 50\nS 51\nS 52\nS 53\nS 54\nS 55\nS 56\nS 57\nS 58\nS 59\nS 60\nS 61\nS 62\nS 63\nS 64\nS 65\nS 66\nS 67\nS 68\nS 69\nS 70\nS 71\nS 72\nS 73\nS 74\nS 75\nS 76\nS 77\nS 78\nS 79\nS 80\nS 81\nS 82\nS 83\nS 84\nS 85\nS 86\nS 87\nS 88\nS 89\nS 90\nS 91\nS 92\nS 93\nS 94\nS 95\nS 96\nS 97\nS 98\nS 99\nS 100\nS 101\nS 102\nS 103\nS 104\nS 105\nS 106\nS 107\nS 108\nS 109\nS 110\nS 111\nS 112\nS 113\nS 114\nS 115\nS 116\nS 117\nS 118\nS 119\nS 120\nS 121\nS 122\nS 123\nS 124\nS 125\nS 126\nS 127\nS 128\nS 129\nS 130\nS 131\nS 132\nS 133\nS 134\nS 135\nS 136\nS 137\nS 138\nS 139\nS 140\nS 141\nS 142\nS 143\nS 144\nS 145\nS 146\nS 147\nS 148\nS 149\nS 150\nS 151\nS 152\nS 153\nS 154\nS 155\nS 156\nS 157\nS 158\nS 159\nS 160\nS 161\nS 162\nS 163\nS 164\nS 165\nS 166\nS 167\nS 168\nS 169\nS 170\nS 171\nS 172\nS 173\nS 174\nS 175\nS 176\nS 177\nS 178\nS 179\nS 180\nS 181\nS 182\nS 183\nS 184\nS 185\nS 186\nS 187\nS 188\nS 189\nS 190\nS 191\nS 192\nS 193\nS 194\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n\") == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\n\nassert solution('0\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\n\nassert solution('10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''3\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\nE\\nS\\n2\\nE\\nD\") == \"Yes\"\nassert solution(\"10\\nE\\nE\\nE\\nS\\nS\\nD\\nS\\nS\\nS\\nS\\nS\\nD\\nD\\nD\\nD\") == \"Plot Error\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Yes\"\nassert solution(\"1\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\nS 11!bobby_dies\\nS 12!bobby_dies\\nS 13!bobby_dies\\nS 14!bobby_dies\\nS 15!bobby_dies\\nS 16!bobby_dies\\nS 17!bobby_dies\\nS 18!bobby_dies\\nS 19!bobby_dies\\nS 20!bobby_dies\\nS 21!bobby_dies\\nS 22!bobby_dies\\nS 23!bobby_dies\\nS 24!bobby_dies\\nS 25!bobby_dies\\nS 26!bobby_dies\\nS 27!bobby_dies\\nS 28!bobby_dies\\nS 29!bobby_dies\\nS 30!bobby_dies\\nS 31!bobby_dies\\nS 32!bobby_dies\\nS 33!bobby_dies\\nS 34!bobby_dies\\nS 35!bobby_dies\\nS 36!bobby_dies\\nS 37!bobby_dies\\nS 38!bobby_dies\\nS 39!bobby_dies\\nS 40!bobby_dies\\nS 41!bobby_dies\\nS 42!bobby_dies\\nS 43!bobby_dies\\nS 44!bobby_dies\\nS 45!bobby_dies\\nS 46!bobby_dies\\nS 47!bobby_dies\\nS 48!bobby_dies\\nS 49!bobby_dies\\nS 50!bobby_dies\\nS 51!bobby_dies\\nS 52!bobby_dies\\nS 53!bobby_dies\\nS 54!bobby_dies\\nS 55!bobby_dies\\nS 56!bobby_dies\\nS 57!bobby_dies\\nS 58!bobby_dies\\nS 59!bobby_dies\\nS 60!bobby_dies\\nS 61!bobby_dies\\nS 62!bobby_dies\\nS 63!bobby_dies\\nS 64!bobby_dies\\nS 65!bobby_dies\\nS 66!bobby_dies\\nS 67!bobby_dies\\nS 68!bobby_dies\\nS 69!bobby_dies\\nS 70!bobby_dies\\nS 71!bobby_dies\\nS 72!bobby_dies\\nS 73!bobby_dies\\nS 74!bobby_dies\\nS 75!bobby_dies\\nS 76!bobby_dies\\nS 77!bobby_dies\\nS 78!bobby_dies\\nS 79!bobby_dies\\nS 80!bobby_dies\\nS 81!bobby_dies\\nS 82!bobby_dies\\nS 83!bobby_dies\\nS 84!bobby_dies\\nS 85!bobby_dies\\nS 86!bobby_dies\\nS 87!bobby_dies\\nS 88!bobby_dies\\nS 89!bobby_dies\\nS 90!bobby_dies\\nS 91!bobby_dies\\nS 92!bobby_dies\\nS 93!bobby_dies\\nS 94!bobby_dies\\nS 95!bobby_dies\\nS 96!bobby_dies\\nS 97!bobby_dies\\nS 98!bobby_dies\\nS 99!bobby_dies\\nS 100!bobby_dies\\nS 101!bobby_dies\\nS 102!bobby_dies\\nS 103!bobby_dies\\nS 104!bobby"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_str_1) == 'Yes'\nassert solution(input_str_2) == '3 Just A Dream'\nassert solution(input_str_3) == 'Yes'\nassert solution(input_str_4) == '4 Just A Dream'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 1!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 1!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 1!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 0 1 2 3 4 3 1 2 0 0 3\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\"\nassert solution(\"1 5 2 9\") == \"+-------------------------------+\"\nassert solution(\"3 7 5 6\") == \"+-------------------------------+\"\nassert solution(\"9 10 20 30 40\") == \"+-------------------------------+\"\nassert solution(\"2 10 20 30 40\") == \"+-------------------------------+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([24, 5, 8, 7]) == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua\nUt enim ad minim veniam quis nostrud exercitation ullamco laboris\nnisi ut aliquip ex ea commodo consequat Duis aute irure dolor\nin reprehenderit in voluptate velit esse cillum dolore eu fugiat\nnulla pariatur Excepteur sint occaecat cupidatat non proident\nsunt in culpa qui officia deserunt mollit anim id est laborum\n''') == '''+------------------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+-+'''\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"24 5 8 7\") == \"SUBTRACT H FROM L GIVING DENOMINATOR.\\nSUBTRACT 3 FROM H.\\nMULTIPLY F BY H GIVING NUMERATOR.\\nDIVIDE NUMERATOR BY DENOMINATOR GIVING T REMAINDER Left-Over.\\n\"\n\"\"\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 8 7') == '+-----------------+'\nassert solution('5 5 7') == '+-----------------+'\nassert solution('1 1') == '+-----------------+'\nassert solution('5 2 7') == '+-----------------+'\nassert solution('1 2') == '+-----------------+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"\"\"\n+------------------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+-+\n\"\"\".rstrip()\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"24 5 8 7\") == \"    ^        |v|\\n|exercitation ullamco    | ^\\n+------------------------+-+\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat | |\\n|Duis aute irure dolor in | |\\n|reprehenderit in        | |\\n+------------------------+-+\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n3 0 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"possible\"\nassert solution(\"4 5\\n2 1 0 2\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"possible\"\nassert solution(\"3 4\\n4 4 4 4\\n4 4 4 4\\n4 4 4 4\") == \"impossible\"\nassert solution(\"2 4\\n4 4 4 4\\n4 4 4 4\") == \"impossible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([4, 10], ['0 3 2 1', '3 0 1 3', '2 1 0 2', '1 3 2 0']) == 'possible'\nassert solution([4, 20], ['0 3 2 1', '3 0 1 3', '2 1 0 2', '1 3 2 0']) == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2 1') == 'possible'\nassert solution('3 1') == 'impossible'\nassert solution('4 2') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == \"impossible\"\nassert solution(\"4 5\") == \"impossible\"\nassert solution(\"10 10\") == \"impossible\"\n\nTest 2:\n\nSample Input:\n8 5\n0 4 2 1 3 0 4 1\n3 0 1 2 4 3 0 1\n2 4 1 3 0 3 2 0\n4 0 1 3 2 0 1 0\n0 1 4 3 2 0 0 1\n0 2 4 1 3 0 0 1\n1 4 3 2 0 0 1 0\n0 1 4 3 2 0 0 1\nSample Output:\npossible\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n0 3 2 1') == 'impossible'\nassert solution('2 3\\n0 1 2 3') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input) == \"possible\"\nassert solution(input) == \"impossible\""
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 2') == 'impossible'\nassert solution('4 10') == 'possible'\nassert solution('5 6') == 'impossible'\nassert solution('10 10') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"impossible\", solution(\"1\")\nassert solution(\"2\") == \"impossible\", solution(\"2\")\nassert solution(\"3\") == \"impossible\", solution(\"3\")\nassert solution(\"4\") == \"impossible\", solution(\"4\")\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1 1') == '1.00000000'\nassert solution('5 3 1') == '1.9189391'\nassert solution('4 1 2') == '1.8518518'\nassert solution('2 2 2') == '0.25'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\\n1\\n2\") == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    10 5 4\n    1\n    2\n    \"\"\"\n) == \"1.000000000\", \"First\"\n\nassert solution(\n    \"\"\"\n    2 4 2\n    2\n    4\n    \"\"\"\n) == \"2.000000000\", \"Second\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1 1\n1\n2\n''') == '1.00000000'''\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 1\n1\n2\nSample Input 2:\n6 1 1\n1\n2\nSample Output 2:\n1.00000000\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\\n1\") == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n1\\n2\\n') == '1.00000000'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '1.00000000', 'First'\nassert solution('1') == '0.500000000', 'Second'\nassert solution('1 1') == '1.00000000', 'Third'\nassert solution('1 1 1 1 1') == '1.00000000', 'Fourth'\n\n----"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1.00000000\"\n\n---Output---\n\n1.00000000\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1\\n1\\n2') == '1.0'\nassert solution('1 2 1\\n1\\n1') == '1.0'\nassert solution('2 1 1\\n1\\n2') == '2.0'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '2'\nassert solution('4 2 3 1') == '3'\nassert solution('4 3 3 2') == '2'\nassert solution('5 4 3 3 2') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n5 4 3 3 2') == \"2\"\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n3\\n1 3\\n2 3\\n1 5\\n1 8\\n1 9') == \"3\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n4 3 3 2\n2\n2 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4\n4 3 2 1\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4\n4 3 2 1\n1\n\"\"\") == \"1\""
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 3 3 2') == '2'\nassert solution('1 2 3 4 5') == '1'\nassert solution('5 5 4 3 3 2') == '3'\nassert solution('1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"2\\n1\\n3\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"1\\n3\\n\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('3') == '1'\nassert solution('2') == '3'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '1\\n3\\n1\\n3\\n'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '2 1'\nassert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '1 1'\nassert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n\"\"\") == \"1\"\n\"\"\"\nTime Complexity: O(N)\n\"\"\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == \"1\"\nassert solution('3 3') == \"1.5\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 2') == '1'\n\"\"\"\n\nn, m = list(map(int, input().split()))\nneighbours = []\nfor i in range(m):\n    neighbours.append(list(map(int, input().split())))\n\nfrom itertools import combinations\n\npossible_stations = list(combinations(range(n), 2))\n\nfor station in possible_stations:\n    first_station = station[0]\n    second_station = station[1]\n    first_neighbours = list(filter(lambda pair: pair[0] in neighbours[first_station], neighbours))\n    second_neighbours = list(filter(lambda pair: pair[0] in neighbours[second_station], neighbours))\n    \n    if first_station == second_station:\n        continue\n    elif len(first_neighbours)!= 0 and len(second_neighbours)!= 0:\n        first_neighbour = first_neighbours[0]\n        second_neighbour = second_neighbours[0]\n        \n        if first_neighbour[0] == second_neighbour[0] or first_neighbour[1] == second_neighbour[1]:\n            continue\n        else:\n            print('never meet')\n            break\n    else:\n        print('never meet')\n        break\nelse:\n    print('always meet')\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\", \"Test 1\"\nassert solution(\"3 2\") == \"1\", \"Test 2\"\nassert solution(\"3 3\") == \"0\", \"Test 3\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n0 1\\n1 2\\n0 2\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"never meet\"\nassert solution(\"3 2\\n0 1\\n0 2\\n1 2\") == \"never meet\"\nprint(\"YOUR CODE IS CORRECT!\")"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1\\n1 2\") == \"1\"\nassert solution(\"2 2\\n0 1\\n1 2\") == \"never meet\"\nassert solution(\"3 3\\n0 1 1\\n1 2 2\\n0 2 1\") == \"3\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"100 2\") == \"59\"\nassert solution(\"1 100\") == \"59\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2\n2 1\n3 2''') == '1'\nassert solution('''3 2\n2 1\n3 2''') == '1'\nassert solution('''10 2\n2 1\n7 2''') == '7'"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n0 1\n1 2\n0 2\n''') == '1'\nassert solution('''\n3 4\n0 2\n1 1\n0 1\n1 0\n0 0\n''') == '2'\n''')\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2') == '1'\nassert solution('3 3\\n0 1\\n1 3\\n1 0') == '2'\nassert solution('3 3\\n0 1\\n1 3\\n1 0') == '5'\nassert solution('1 2\\n1 3\\n2 3') == '4'\nassert solution('3 3\\n0 1\\n1 2\\n1 0') == '5'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0 1\\n1 2\\n0 2\\n') == '1'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 1 2\n''') == '1'\n\nassert solution('''\n5 4 2\n''') == '9'\n\nassert solution('''\n10 1 2\n''') == '11'\n\nassert solution('''\n9 10 1\n''') == '11'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4 2\n2 2''') == '14500000001'\nassert solution('''5 4 2\n2 2''') == '14500000001'\nassert solution('''5 4 2\n2 2''') == '135'\nassert solution('''1 5 2\n2 2''') == '1'\nassert solution('''4 3 2\n3 2''') == '1'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"5 1 0\") == \"4\"\nassert solution(\"0 1 1\") == \"1\"\nassert solution(\"3 4 2\") == \"7\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4\n3\n''') == '1'\nassert solution('''\n6\n7\n3\n''') == '0'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n5 4 2') == '14500000001'\nassert solution('4\\n3 3 2') == '3749999999999999999'"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"14500000001\"\n\nstdin = \"\"\"\n7 7 1\n3 5 1\n1 2 3\n1 2 4\n1 3 2\n4 3 1\n5 4 2\n\"\"\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('100 3 5') == '710000049'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 5 2\\n') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 4 2\n''') == '14500000001'\nassert solution('''\n5 1 3\n''') == '''Traceback (most recent call last):\n  File \"main.py\", line 3, in <module>\n    assert solution('''\nAssertionError: The probability of evading capture can be uniquely represented as an irreducible fraction p/q.\n\nFor example, the following expression is not irreducible:\nq = 5\np = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2\nq^{-1} = 2"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 4 2\"\"\") == \"14500000001\"\nassert solution(\"\"\"20 4 20\"\"\") == \"1040333501\"\nassert solution(\"\"\"20 10 20\"\"\") == \"1515151515\"\nassert solution(\"\"\"1 1 1\"\"\") == \"1\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4\\n1 4\\n3 7\\n1 6\\n2 6\\n\") == \"0 1 1 2\"\nassert solution(\"5\\n2 2\\n1 3\\n3 3\\n1 2\\n2 5\\n\") == \"0 0 1 1 2\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2\\n'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 4\n3 7\n1 6\n2 6\n''') == '2'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3 4\\n1 6') == '1'\nassert solution('2\\n3 7\\n1 6') == '2'\nassert solution('2\\n3 7\\n1 7') == '3'\nassert solution('2\\n3 7\\n1 6') == '3'\nassert solution('2\\n3 7\\n1 6') == '3'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '0\\n1\\n1\\n2\\n'\nprint(solution('''3\n4\n7\n6\n'''))\nprint(solution('''5\n2\n4\n6\n'''))\nprint(solution('''6\n8\n10\n8\n'''))\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0'\nassert solution('2') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('1 5 1') == '1'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 3\\n2 4\\n3 4\\n') == '1\\n1\\n1\\n'\nassert solution('100000\\n1 3\\n2 4\\n3 4\\n') == '0\\n0\\n0\\n0\\n'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2\\n1 2\\n2 5\\n2 4\\n3 7\\n3 6\\n4 7\\n4 6\\n\"\n) == \"2\\n1\\n1\\n1\\n1\\n\"\nprint(\"Solution: \", solution(\n    \"2\\n1 2\\n2 5\\n2 4\\n3 7\\n3 6\\n4 7\\n4 6\\n\"\n))"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"18100\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"18200\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"12000\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"0\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '3100'\nassert solution('4 3') == '3600'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\\n') == '3100'\nassert solution('5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\\n') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3100\"\nassert solution(\"3 5\") == \"4000\"\nassert solution(\"6 2\") == \"3000\"\nassert solution(\"6 2 2\") == \"500\"\nassert solution(\"4 1\") == \"3000\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100', 'Should work for all samples!'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n\nassert solution('''\n4 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '4500'\n\nassert solution('''\n4 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3000'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '2700'\nassert solution('5 2') == '2700'\nassert solution('4 5') == '4500'\nassert solution('2 1') == '1'\nassert solution('1 4') == '2000'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 8\\n6 5\\n2 5\\n2 9') == \"5.25\"\nassert solution('2 5\\n6 5\\n7 13\\n8 5\\n9 5') == \"7.5\""
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n1 8\n6 5\n2 5\n2 9\n7 13\n''') == '5.25'\n\nassert solution('''\n1 10\n2 5\n5 15\n7 8\n10 11\n12 13\n''') == '6.5'\n\nassert solution('''\n3 1\n1 1\n1 1\n''') == '0.5'\n\nassert solution('''\n4 2\n3 5\n5 9\n8 9\n''') == '3.5'\n\nassert solution('''\n4 2\n4 5\n5 7\n9 10\n''') == '2.5'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 1\\n2 2\\n3 3') == '1.50000000'\nassert solution('4 4\\n1 4\\n2 3\\n2 4\\n3 5\\n3 4') == '1.750000000'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 8\n6 5\n2 5\n2 9\n7 13''') == '5.250000000'\nassert solution('''8 3\n1 8\n8 2\n7 2\n3 4\n4 5\n6 9\n9 8\n12 10\n7 6\n8 8\n''') == '8.0'\nassert solution('''3 2\n1 2\n3 3\n3 4''') == '1.5'\nassert solution('''2 5\n1 2\n3 5\n3 1\n3 4\n4 3\n4 4''') == '2.0'\nassert solution('''3 3\n1 1\n2 1\n1 2\n2 2\n3 2''') == '4.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.250000000'\nassert solution('5 5\\n1 8\\n2 5\\n2 9\\n7 13') == '4.50000000'\nassert solution('10 10\\n1 8\\n1 5\\n2 9\\n4 5\\n4 5\\n5 1\\n3 4\\n6 9\\n7 7\\n8 3\\n7 4\\n4 5\\n7 5\\n8 6\\n6 9\\n9 3\\n8 6\\n5 7\\n8 7\\n7 3\\n7 8\\n6 8\\n4 3\\n4 8\\n2 9\\n6 7\\n3 8\\n6 7\\n9 5\\n9 7\\n3 4\\n6 7\\n2 8\\n4 5\\n2 9\\n1 3\\n6 5\\n2 4\\n6 5\\n6 1\\n8 5\\n4 2\\n4 5\\n3 3\\n9 8\\n3 5\\n7 2\\n4 3\\n6 9\\n5 4\\n3 7\\n2 7\\n3 4\\n7 1\\n9 2\\n1 4\\n4 3\\n6 5\\n7 9\\n7 6\\n1 6\\n5 1\\n8 8\\n7 6\\n2 4\\n5 7\\n5 5\\n7 5\\n9 3\\n9 8\\n5 4\\n9 4\\n3 3\\n7 4\\n4 8\\n5 3\\n2 2\\n1 6\\n2 4\\n6 1\\n8 1\\n4 5\\n8 8\\n8 4\\n6 5\\n6 5\\n5 4\\n5 5\\n6 2\\n4 1\\n3 7\\n7 2\\n5 4\\n8 3\\n2 4\\n3 7\\n9 5\\n2 4\\n4 7\\n8 8\\n7 3\\n6 7\\n8 7\\n9 4\\n6 7\\n3 4\\n9 5\\n8 7\\n9 4\\n8 7\\n4 4\\n4 5\\n6 4\\n8 8\\n6 2\\n9 4\\n6 4\\n4 8\\n5 7\\n4 9\\n4 4\\n2 2\\n5 9\\n6 3\\n4 9\\n1 7\\n1 5\\n1 3\\n4 9\\n1 4\\n4 1\\n2 6\\n2 8\\n3 8\\n9 8\\n6 6\\n7 7\\n5 6\\n3 2\\n4 8\\n7 3\\n6 9\\n4 4\\n4 9\\n7 7\\n4 3\\n5 2\\n2 6\\n4 3\\n8 5\\n5 6\\n8 6\\n6 7\\n2 5\\n8 3\\n8 1\\n6 1\\n4 5\\n1 3\\n8 5\\n5 4\\n1 3\\n9 3\\n3 7\\n5 2\\n6 1\\n1 6\\n7 9\\n7 2\\n3 4\\n8 3\\n8 2\\n2 6\\n2 4\\n4 7\\n1 8\\n4 5\\n5 7\\n4 8\\n8 3\\n5 1\\n5 4\\n4 4\\n4 4\\n6 9\\n4 6\\n4 3\\n6 2\\n3 8\\n2 6\\n4 2\\n2 7\\n4 6\\n2 6\\n2 4\\n9 5\\n7 4\\n5 7\\n3 7\\n2 5\\n6 2\\n8 5\\n6 6\\n6 7\\n6 7\\n9 6\\n1 7\\n2 5\\n8 4\\n6 2\\n4 7\\n9 8\\n7 1\\n3 5\\n4 4\\n5 4\\n3 7\\n4 9\\n1 3\\n1 3\\n2 6\\n7 2\\n9 7\\n7 6\\n1 1\\n1 8\\n2 5\\n7 5\\n2 5\\n4 3\\n3 2\\n6 2\\n8 1\\n1 5\\n2 4\\n3 5\\n8 4\\n6 5\\n7 5\\n6 5\\n7 5\\n1 3\\n8 2\\n9 7\\n6 4\\n3 5\\n5 2\\n2 5\\n5 6\\n6 8\\n1 8\\n3 4\\n8 5\\n8 2\\n3 5\\n4 8\\n8 7\\n5 7\\n7 5\\n6 7\\n2 6\\n8 5\\n5 7\\n3 3\\n9 5\\n9 2\\n9 7\\n3 4\\n8 8\\n3 5\\n6 3\\n4 6\\n3 4\\n1 2\\n3 2\\n8 7\\n2 7\\n2 3\\n2 4\\n4 1\\n4 7\\n5 4\\n7 2\\n6 3\\n5 4\\n2 2\\n5 3\\n7 6\\n8 3\\n2 3\\n9 2\\n1 8\\n7 3\\n1 2\\n2 4\\n2 4\\n5 2\\n6 3\\n4 8\\n5 8\\n5 8\\n5 7\\n5 4\\n3 7\\n7 6\\n6 2\\n8 7\\n8 6\\n4 2\\n2 6\\n4 3\\n8 7\\n3 7\\n5 4\\n7 2\\n2 6\\n8 3\\n6 3\\n2 3\\n5 5\\n8 7\\n7 3\\n8 7\\n5 4\\n7 2\\n5 7\\n5 7\\n7 5\\n6 3\\n8 3\\n5 2\\n8 1\\n4 6\\n1 4\\n5 5\\n3 5\\n2 1\\n6 6\\n6 5\\n8 5\\n1 1\\n3 5\\n3 6\\n8 6\\n6 7\\n8 6\\n5 4\\n9 4\\n6 6\\n2 7\\n5 7\\n4 5\\n8 3\\n1 5\\n3 3\\n6 2\\n7 4\\n6 7\\n6 1\\n8 4\\n6 3\\"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n5\n10\n20\n''') == '5.25'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '5.25'\nassert solution('4 2') == '5.25'"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2\\n3\\n') == \"5.0000000000000004\""
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '5.25'\nassert solution('4 5') == '3.5'\nassert solution('6 5') == '4.5'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '5.25'\nassert solution('4 4') == '4.50'\nassert solution('10 3') == '4.50'\n'''\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"4\""
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 3 1 2 1 1\") == \"7\"\nassert solution(\"1 2 3 1 2 1 1 1\") == \"2\"\nassert solution(\"1 2 3 1 2 1 1 1 1\") == \"3\"\nassert solution(\"1 2 3 1 2 1 1 1 1\") == \"4\"\n\ninput()\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 2 3\\n3 2 1 2\") == \"7\\n2\\n2\\n0\\n4\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"2\\n2\\n1\\n2\\n4\\n2\\n\"\nassert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"2\\n2\\n1\\n2\\n4\\n2\\n\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2 2 2 1\"\nassert solution() == \"0\""
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3') == '7'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 3 1 2\\n2 2 3 1 2\\n3 2 1 2 3\\n4 2 1 2 3\\n5 2 1 2 3') == '7'\nassert solution('7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2\\n2 2 3 1 2\\n3 2 1 2 3\\n4 2 1 2 3\\n5 2 1 2 3') == '5'"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 1 2 1 1\\n5\\n1 3 1 2 3') == '7'\nassert solution('1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 1 2') == '4'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\") == \"2\"\nassert solution(\"6\\n1 2 3 1 2 3 1\\n5\\n1 3 1 2 3\\n1 4 3 1\\n5\\n2 4 2 3\\n2 4 1 1\\n2 5 2 1\") == \"2\"\nassert solution(\"7\\n1 2 3 1 2 1 1\\n5\\n1 3 1 2 3\\n1 2 3 1 2\\n2 2 2 3\\n3 2 1 2\\n4 2 1 2\\n5\\n2 4 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 2 3 1 2 1 1') == '7'\nassert solution('5\\n1 3 1 2 3') == '2'\nassert solution('5\\n1 2 3 1 2 1') == '4'\nassert solution('5\\n2 2 2 3') == '0'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1\n2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n\"\"\"\n) == \"\"\"\n7\n2\n0\n\"\"\"\n\nassert solution(\n\"\"\"\n1\n2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n\"\"\"\n) == \"\"\"\n7\n2\n0\n\"\"\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50') == '32.6405451448'\nassert abs(solution('4\\n40 30 30 40 20 40 50 30 30 50') - 32.6405451448) < 10**-4\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2\\n\") == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '32.6405451448'\nassert abs(solution('4') - 32.6405451448) < 10 ** -4\nassert solution('6') == '65.262106864'\nassert abs(solution('6') - 65.262106864) < 10 ** -4\nassert solution('10') == '58.085422412'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"32.6405451448\"\nassert solution(\"10\") == \"26.9461270824\"\nassert solution(\"20\") == \"40.6196232079\"\n\n\"\"\""
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\nprint(solution('''\n10\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n'''))\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448':\n    print('Correct')\nelse:\n    print('Incorrect')\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1 4 3\n''') == '2 3 4 1'\nassert solution('''\n3 3 1 2 2\n''') == '2 1 3 4 3'\n'''\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 4\n''') == '2 3 1 4'\n\nassert solution('''\n5 4 2 1 3\n''') == '2 1 3 4 5'\n\nassert solution('''\n5 2 3 4 1\n''') == '2 3 4 1 5'\n\nassert solution('''\n5 2 3 4 1\n''') == '1 3 4 2 5'\n\nassert solution('''\n5 4 2 3 1\n''') == '3 1 4 2 5'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n5\n1 1 1 2 2\n\"\"\") == \"1 2 1 3 4\"\nassert solution(\n\"\"\"\n4\n1 1 1 2 2\n\"\"\") == \"1 1 1 2\"\n\"\"\""
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n1 3\n4 1\n''') == '1 3 2'\nprint('All test cases passed...')\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2 1 4 3\nSample Input 2:\n6\n2 2 1 2 4 3\nSample Output 2:\n2 2 1 4 3\n''') == '''2 3 4 1'''\n\nassert solution('''1\n1\nSample Input 3:\n6\n2 2 1 2 4 3\nSample Output 3:\n2 2 1 4 3\n''') == '''2 2 1 4 3'''\n\nassert solution('''2\n4\n2 1 4 3\nSample Input 4:\n1\n1\nSample Output 4:\n1 1 2 3\n''') == '''1 1 2 3'''\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 4 3') == '2 3 1 4'\nassert solution('3 3 1 4') == '3 1 4 2'\nassert solution('10 4 7 8 1') == '1 8 7 4 10'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '2 1 4 3') == '2 3 4 1'\nassert solution(\n    '5 1 3 4 2') == '2 3 1 4 5'\nassert solution(\n    '4 3 1 2') == '1 2 3 4'\nassert solution(\n    '3 3 3 3 3') == '3 3 3 3 3'\nassert solution(\n    '2 0 2') == '2 0 0'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n2 1 4 3\"\n) == \"2 3 4 1\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 1 4 3\n''') == '3 4 1 2'\nprint(\"PASSED\")\nassert solution('''\n5\n1 3 1 4 2\n''') == '3 1 4 2 1'\nprint(\"PASSED\")\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3\\n4\\n3\\n1\\n') == '1 3 2 4'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1''') == '7.656854249492381'\nassert solution('''6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1''') == '7.656854249492381'\nassert solution('''6\n1 2\n2 4\n3 3\n3 2\n2 1''') == '7.656854249492381'\n''')\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n2 4\\n3 3\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '7.656854249492381'\nassert solution('1 2') == '7.656854249492381'\nassert solution('1 3') == '7.656854249492381'\nassert solution('2 4') == '7.656854249492381'\nassert solution('3 3') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"7.656854249492381\"\nassert solution(\"4\") == \"7.656854249492381\"\nassert solution(\"5\") == \"7.656854249492381\"\nassert solution(\"6\") == \"7.656854249492381\"\nassert solution(\"7\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n1\n1\n1\n''') == '1.0000000000000001'\nassert solution('''\n1\n2\n3\n''') == '3.0000000000000014'\nassert solution('''\n1\n2\n2\n1\n3\n2\n''') == '5.000000000000003'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n10\n2 1\n3 4\n5 6\n2 3\n4 1\n1 2\n5 4\n2 6\n3 3\n6 7\n4 3\n7 6\n1 5\n5 2\n2 4\n6 6\n2 5\n3 6\n3 2\n3 5\n4 7\n3 6\n4 6\n2 2\n''') == '4.729762038144441'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1') == '7.656854249492381'\nassert solution('10\\n5\\n2 2\\n3 4\\n3 3\\n4 4\\n5 5\\n5 2\\n5 2') == '7.656854249492381'\nassert solution('5\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2') == '7.656854249492381'\nassert solution('20\\n10\\n6 7\\n8 9\\n10 8\\n10 8\\n10 10\\n10 8\\n10 8\\n8 9\\n6 7\\n5 5\\n4 4\\n4 3\\n4 2\\n3 3\\n2 2') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\nassert solution('2\\n3 3\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"8\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"12\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\nassert solution(\"16\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == '2'\nassert solution(\"7 4 6\\n1 1\\n2 2\\n1 3\\n5 5\\n1 4\\n2 3\\n2 5\\n1 6\\n5 4\\n1 7\\n2 3\\n1 4\\n3 5\\n1 6\\n3 2\\n2 5\\n1 7\\n5 4\\n1 8\\n4 1\\n1 3\\n4 2\\n3 4\\n2 5\\n3 6\\n1 7\\n4 5\\n2 4\\n1 7\\n4 5\\n3 6\\n2 5\\n3 4\\n1 6\\n1 5\\n1 7\\n2 6\\n4 3\\n2 4\\n3 7\\n3 1\\n2 5\\n4 6\\n2 4\\n3 7\\n2 6\\n1 5\\n3 2\\n1 6\\n3 1\\n1 7\\n4 3\\n1 6\\n2 2\\n2 4\\n3 1\\n2 4\\n1 3\\n3 5\\n1 7\\n4 6\\n2 4\\n3 7\\n3 5\\n2 7\\n1 6\\n1 2\\n1 3\\n3 6\\n2 5\\n3 1\\n1 5\\n3 2\\n2 4\\n1 6\\n4 2\\n1 4\\n2 3\\n1 3\\n2 2\\n1 6\\n1 3\\n2 5\\n2 4\\n3 4\\n1 7\\n1 4\\n1 7\\n3 2\\n3 4\\n2 3\\n1 2\\n3 5\\n2 5\\n3 4\\n1 4\\n2 4\\n2 1\\n1 5\\n1 4\\n3 2\\n1 4\\n1 5\\n1 6\\n1 7\\n1 3\\n1 4\\n1 1\\n2 5\\n1 4\\n2 6\\n3 5\\n2 5\\n1 4\\n3 1\\n2 5\\n1 5\\n3 2\\n3 5\\n2 5\\n3 1\\n2 4\\n3 1\\n1 4\\n3 5\\n1 4\\n3 4\\n1 2\\n1 4\\n1 1\\n2 4\\n2 5\\n3 5\\n3 2\\n1 5\\n3 2\\n2 5\\n3 1\\n1 4\\n3 1\\n1 5\\n1 6\\n2 2\\n1 5\\n1 5\\n2 3\\n1 4\\n1 6\\n3 5\\n2 4\\n2 4\\n3 6\\n2 4\\n1 5\\n2 4\\n1 6\\n2 5\\n1 4\\n3 5\\n1 5\\n1 6\\n2 6\\n1 4\\n3 4\\n2 5\\n3 5\\n1 5\\n2 6\\n1 4\\n2 4\\n2 5\\n2 4\\n1 6\\n1 3\\n1 4\\n1 7\\n2 5\\n3 6\\n2 6\\n3 4\\n3 6\\n1 6\\n2 5\\n1 5\\n3 4\\n1 3\\n1 6\\n2 2\\n1 6\\n2 4\\n2 4\\n1 3\\n1 4\\n1 6\\n3 4\\n1 3\\n2 4\\n1 4\\n2 4\\n1 4\\n2 4\\n2 5\\n3 4\\n1 6\\n2 6\\n1 4\\n3 4\\n1 5\\n1 6\\n2 5\\n1 5\\n1 5\\n1 4\\n1 2\\n1 4\\n2 2\\n1 4\\n1 1\\n1 4\\n1 3\\n2 5\\n2 4\\n1 4\\n3 5\\n2 5\\n1 4\\n1 6\\n1 5\\n1 6\\n2 5\\n2 4\\n2 4\\n1 4\\n2 4\\n1 2\\n1 5\\n2 5\\n1 6\\n2 6\\n2 5\\n1 4\\n1 4\\n1 3\\n1 6\\n2 6\\n1 5\\n1 5\\n1 5\\n1 4\\n1 4\\n1 2\\n1 4\\n1 5\\n1 4\\n1 2\\n1 4\\n1 4\\n1 3\\n1 6\\n1 6\\n2 4\\n2 4\\n1 5\\n1 6\\n2 4\\n2 4\\n1 4\\n1 5\\n1 6\\n1 5\\n1 6\\n1 5\\n1 4\\n1 4\\n1 1\\n1 4\\n1 6\\n1 5\\n1 5\\n2 5\\n1 4\\n2 6\\n1 5\\n2 5\\n1 5\\n2 6\\n1 4\\n1 5\\n2 5\\n1 6\\n1 6\\n2 5\\n1 5\\n1 4\\n1 2\\n1 5\\n1 4\\n2 5\\n1 4\\n1 3\\n1 6\\n2 6\\n2 6\\n1 5\\n1 4\\n1 4\\n1 6\\n2 5\\n2 4\\n1 4\\n3 5\\n2 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n2 5\\n1 5\\n1 4\\n3 5\\n2 4\\n1 4\\n2 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 3\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 5\\n1 5\\n1 5\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\nassert solution('''\n2 4 4\n1 2\n2 3\n4 4\n3 3\n''') == '2'\nassert solution('''\n3 3 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '0'\nassert solution('''\n1 1\n1 1\n1 2\n0 0\n0 3\n''') == '1'\nassert solution('''\n1 2\n1 1\n1 2\n1 3\n1 4\n2 3\n2 0\n3 0\n''') == '1'\n'''"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 2\n0 0\n2 3\n1 1\n3 0\n3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 3 4\n0 0\n1 1\n0 2\n3 3\n0 0\n2 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 4 3\n0 0\n2 3\n1 0\n3 1\n0 2\n1 0\n2 2\n3 3\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nprint(solution())\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 5 3\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n2 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 7 2\") == \"3\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n''') == '9'\n\nassert solution('''\n2 4\n''') == '19'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '9'\nassert solution('1000000 1') == '100000000'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1''') == '9'\nassert solution('''1 1''') == '10'\nassert solution('''2 2''') == '7'\nassert solution('''1 1 1''') == '8'\nassert solution('''2 3''') == '8'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '9'\nassert solution('2 5') == '35'\nassert solution('1 10') == '1'"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n4 1\n3\n\"\"\"\n) == \"9\"\nassert solution(\n\"\"\"\n2 1\n1 2\nSample Input:\n3 3\n3\nSample Output:\n2\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"10\"\nassert solution(\"4 7\") == \"10\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '9'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '9'\nassert solution('2 2') == '11'\nassert solution('2 3') == '7'"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"9\""
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '12'\nassert solution() == '13'\nassert solution() == '7'\nassert solution() == '13'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\nassert solution(\"\"\"\n5\n2\n3\n5\n7\n12\n\"\"\") == \"\"\nassert solution(\"\"\"\n3\n2\n1\n2\n3\n5\n7\n\"\"\") == \"\"\nassert solution(\"\"\"\n3\n2\n1\n2\n3\n5\n7\n\"\"\") == \"\"\nassert solution(\"\"\"\n3\n2\n1\n2\n3\n5\n7\n\"\"\") == \"13\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('{2,3,5}') == '12'\nassert solution('{2,3,5,7}') == ''\nassert solution('{3,2,5}') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3') == '12'\nassert solution('5\\n7') == '12'\nassert solution('10\\n2') == '10'\nassert solution('10\\n3') == '10'\nassert solution('20\\n12') == '20'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"3\"\nassert solution(\"12\") == \"4\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n5\\n7\\n12') == '12'\nassert solution('2\\n3\\n5\\n7\\n12') == ''\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"12\"\n\n'''"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n3\\n5\\n7\\n9\\n11\") == \"11\"\nassert solution(\"3\\n4\\n6\\n8\\n10\\n12\") == \"14\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\") == \"None\"\nassert solution(\"2\\n2\\n2\\n2\\n2\\n2\") == \"None\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n7\n8\n9\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n5\\n7\\n12\\n\") == \"12\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n\") == \"\"\nassert solution(\"6\\n2\\n2\\n2\\n2\\n2\\n\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\nSample Output:\n11\n''') == '111'\n\nassert solution('''\n5\n00\n01\n10\n110\n111\nSample Output:\n-1\n''') == '-1'\n\nassert solution('''\n5\n1\n1\n11\n11\n1\nSample Output:\n-1\n''') == '-1'\n\nassert solution('''\n3\n11\n11\nSample Output:\n-1\n''') == '-1'\n\nassert solution('''\n3\n1\n1\nSample Output:\n-1\n''') == '-1'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n00\n01\n10\n110\n111''') == '11'\nassert solution('''5\n00\n01\n10\n110\n111''') == '110'\nassert solution('''5\n01\n00\n10\n110\n111''') == '111'\nassert solution('''5\n10\n00\n10\n100\n110\n111''') == '100'\nassert solution('''5\n10\n00\n10\n100\n110\n111''') == '100'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == '110'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '11'\n\"\"\""
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"111\""
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '110'\nassert solution('5') == '111'\nassert solution('10') == '01'\nassert solution('110') == '00'\nassert solution('111') == '01'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n00\n01\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\n3\n00\n01\n10\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\n5\n00\n01\n10\n110\n111\nSample Output:\n0\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '10'\nassert solution('100') == '10'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"110\", \"Should be 110\"\nassert solution(\"100\") == \"00\", \"Should be 00\"\nassert solution(\"101\") == \"11\", \"Should be 11\"\nassert solution(\"111\") == \"11\", \"Should be 11\"\nassert solution(\"10011\") == \"111\", \"Should be 111\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n00\n01\n10\n''') == '01'\nassert solution('''\n5\n00\n01\n10\n110\n111\nSample Output:\n11\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\", \"Test 1 Failed\"\nassert solution(\"1\") == \"\", \"Test 2 Failed\"\nassert solution(\"2\") == \"\", \"Test 3 Failed\"\nassert solution(\"100\") == \"100\", \"Test 4 Failed\"\nassert solution(\"100 100\") == \"100 100\", \"Test 5 Failed\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '100 250 320'\nassert solution('3') == '100 250 320'\nassert solution('4') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\nassert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n5\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n7\n5\n5 8\n2 6\n5 1\n5 3\n1 1\n3 4\n''') == '8 3 2 1 4 1 2'\n\nprint(solution('''\n5\n5 4\n5 1\n4 1\n1 1\n2 2\n'''))"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 250 320\"\nassert solution(\"\"\"\n2\n2\n3\n4\n4\n1\n1\n2\n1\n1\n1\n\"\"\") == \"4 5\"\nprint(solution(input()))\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '150 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n\") == \"1\\n\"\n\n'''\n\n'''\nclass Stock:\n    def __init__(self,n,d):\n        self.n = n\n        self.d = d\n        \n    def stock_1(self):\n        n = int(input())\n        d = {}\n        for i in range(n):\n            k = int(input())\n            d[i] = []\n            for j in range(k):\n                x, y = map(int, input().split())\n                d[i].append([x,y])\n        \n        print(*[d[i] for i in d])\n        \n    def stock_2(self):\n        n = int(input())\n        d = {}\n        for i in range(n):\n            k = int(input())\n            d[i] = []\n            for j in range(k):\n                x, y = map(int, input().split())\n                d[i].append([x,y])\n        \n        d = sorted(d.items(), key=lambda x:x[0])\n        \n        print(*[d[i][1] for i in d])\n'''\n\nclass Stock:\n    def __init__(self, n, d):\n        self.n = n\n        self.d = d\n        \n    def stock_1(self):\n        n = int(input())\n        d = {}\n        for i in range(n):\n            k = int(input())\n            d[i] = []\n            for j in range(k):\n                x, y = map(int, input().split())\n                d[i].append([x,y])\n        \n        d = sorted(d.items(), key=lambda x:x[0])\n        \n        for k in d:\n            for j in k[1]:\n                print(j[1])\n                \n    def stock_2(self):\n        n = int(input())\n        d = {}\n        for i in range(n):\n            k = int(input())\n            d[i] = []\n            for j in range(k):\n                x, y = map(int, input().split())\n                d[i].append([x,y])\n        \n        d = sorted(d.items(), key=lambda x:x[0])\n        \n        for k in d:\n            for j in k[1]:\n                print(j[1])\n'''\nclass Stock:\n    def __init__(self, n, d):\n        self.n = n\n        self.d = d\n        \n    def stock_1(self):\n        n = int(input())\n        d = {}\n        for i in range(n):\n            k = int(input())\n            d[i] = []\n            for j in range(k):\n                x, y = map(int, input().split())\n                d[i].append([x,y])\n        \n        d = sorted(d.items(), key=lambda x:x[0])\n        \n        for k in d:\n            for j in k[1]:\n                print(j[1])\n                \n    def stock_2(self):\n        n = int(input())\n        d = {}\n        for i in range(n):\n            k = int(input())\n            d[i] = []\n            for j in range(k):\n                x, y = map(int, input().split())\n                d[i].append([x,y])\n        \n        d = sorted(d.items(), key=lambda x:x[0])\n        \n        for k in d:\n            for j in k[1]:\n                print(j[1])\n'''"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n100 10\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\n'''\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '100 250 320'\nassert solution('3') == '100 250 320'\nassert solution('1') == '100'\nassert solution('5') == '100'\nassert solution('100') == '100'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    2\n    20 100\n    100 10\n''') == '100 250 320'\nassert solution('''\n    3\n    20 100\n    100 10\n    1\n    150 50\n    1\n    150 100\n''') == '100 250 320'\nassert solution('''\n    2\n    20 100\n    100 10\n    2\n    150 50\n    1\n    150 100\n''') == '100 250 320'\nassert solution('''\n    2\n    20 100\n    100 10\n''') == '100 250 320'\nassert solution('''\n    5\n    20 100\n    100 10\n    50 200\n    100 5\n    1\n    150 50\n    1\n    150 100\n''') == '100 250 320 500'\n''') == '100 250 320 500'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\nprint(solution(input()))\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"10 100\") == \"3 7 4 6 5 7 2 15 2\"\nassert solution(\"1 100\") == \"9\""
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n') == '1 2'\nassert solution('50 100') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == '4 7 4 6 5 7'\nassert solution('2 3') == '2 4 6'\nassert solution('4 2') == '4 5 6'\nassert solution('100 101') == '100 101'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''50 100''') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10') == '9'\nassert solution('20\\n20') == '9'\nassert solution('50\\n100') == '9'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1850 100''') == '3 7 4 6 5 7 2 15 2'\nassert solution('''90 50''') == '2 2 2 2 2 1 2 2 1 2 2'\nassert solution('''123456 999''') == '0 0 0 1 2 3 4 5 6 7 8 9'\nassert solution('''12 345678 9 12345678''') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '40.0000000000'\nprint(solution('''\n3\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n'''))\nassert solution('1\\n') == '0.000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\") == '40.0000000000'\nassert solution(\"6\\n0 0\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 0\\n\") == '53.5000000000000'\nassert solution(\"10\\n0 0\\n0 5\\n5 4\\n4 3\\n3 2\\n2 1\\n1 0\\n0 -1\\n-1 -2\\n-2 -3\\n-3 -4\\n-4 -5\\n-5 -6\\n-6 -7\\n-7 -8\\n-8 -9\\n-9 -10\\n-10 -11\\n-11 -12\\n-12 -13\\n-13 -14\\n-14 -15\\n-15 -0\") == '14.0000000000000'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    5\n    0 0\n    0 14\n    15 14\n    15 0\n    4\n    8 3\n    4 6\n    7 10\n    11 7\n    ''') == '40.0000000000'\n    assert solution('''\n    5\n    0 0\n    0 14\n    15 14\n    15 0\n    4\n    8 3\n    4 6\n    7 10\n    11 7\n    ''') == '40.0000000000'\n''')"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n5\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"50.0000000000\"\nassert solution(\"\"\"\n1\n0 0\n0 0\n1 1\n\"\"\") == \"2.0000000000\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"40\"\nassert solution(\"2\") == \"42.5\"\nassert solution(\"5\") == \"57.4142135625\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0\\n0\\n14\\n15\\n14\\n0\\n15\\n0\\n') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0000000000'\n\nassert solution('5\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == \"40.0000000000\"\n\"\"\"\n\nstdin = '''5\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n'''\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7') == '40.0000000000'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 1 3') == '1 1 2'\nassert solution('10\\n3 1 2 3 4 5 6 7 8 9 10\\n') == '2 3 3 4'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n1 2 3\n1 3\n1 4\n1 5\n2 4\n2 5\n2 3\n2 4\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution('3\\n2 1 3') == '1'\nassert solution('100\\n4 5 3 1') == '1'\nassert solution('1000\\n3 6 1 2') == '1'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 1 3\") == \"1\"\nassert solution(\"10\\n10 1 5 7 5 1 1 7 5 2\") == \"1 2\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3\\n2 1 3\") == \"1\"\nassert solution(\"2\\n4\\n3 3 2\") == \"1 2\"\nassert solution(\"1\\n4\\n4 3 2\") == \"1 2\"\nassert solution(\"2\\n4\\n3 3 2\") == \"1 2\"\n\nassert solution(\"2\\n3\\n2 2 2\") == \"1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 1 3') == '2\\n1'\nassert solution('3\\n4 1 2') == '3\\n1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2 1 3') == '1\\n1'\nassert solution('2\\n1 2 3') == '2'\nassert solution('3\\n1 2 3') == '2'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 1 3\n3 1 2\n2 1 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2 1 3\") == \"1\\n1\\n\", \"First\"\nassert solution(\"3\\n1 2 3\") == \"1\\n1\\n1\\n\", \"Second\"\nassert solution(\"3\\n1 1 2\") == \"1\\n2\\n\", \"Third\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n20.00 2.00 1.00\n6.00 4.00 1.00\n6.00 8.00 1.00\n15.00 6.00 1.00\n15.00 6.00 0.00\n5.00 9.00 1.00\n5.00 2.00 1.00\n5.00 9.00 1.00\n5.00 5.00 1.00\n7.00 3.00 1.00\n5.00 1.00 2.00\n5.00 6.00 1.00\n5.00 8.00 1.00\n7.00 3.00 1.00\n5.00 9.00 1.00\n15.00 2.00 1.00\n20.00 2.00 1.00\n20.00 2.00 0.00\n''') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 10.00 2.00') == '100 10.00 2.00'\nassert solution('100 100.00 2.00') == '100 100.00 2.00'\nassert solution('100 10.00 2.00') == '100 10.00 2.00'\nassert solution('100 10.00 2.00') == '100 10.00 2.00'\nassert solution('100 10.00 2.00') == '100 10.00 2.00'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.7 2.3') == '199 162'\nassert solution('0.7 1.2') == 'None'\nassert solution('0.7 0.2') == 'None'\nassert solution('0.7 0.2') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nassert solution('0.1') == 'None'\nassert solution('0.1 1.1 2.2') == 'None'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n\nassert solution(\"900.00 1.89 1.09\") == \"None\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"500.0 1.00 0.00\") == \"0 0\"\nassert solution(\"5.00 0.00 1.00\") == \"0 1\"\nassert solution(\"1.00 0.00 5.00\") == \"1 2\"\nassert solution(\"10.00 1.00 3.00\") == \"2 1\"\nassert solution(\"7.00 2.00 1.00\") == \"1 2\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('825.85 1.71 2.38') == '199 162'\nassert solution('760.00 0.00 0.00') == 'None'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n\n-----Input-----\nInput consists of a single line containing $3$ values $p_ t$ $p_1$ $p_2$, where $0 \\leq p_ t \\leq 10000.00$ is the profit for the month and $0 < p_1, p_2 \\leq 100.00$ are the profits Pete makes on a pita ($p_1$) and on a pizza ($p_2$). All values are in dollars and cents.\n\n-----Output-----\nDisplay two integers: the number of pitas sold and the number of pizzas sold so that the total profit equals the value given. If there is more than one combination of pitas and pizzas that give the specified profit, list them all, one combination per line, listing the combination with the smallest number of pitas first, then the combination with the second smallest number of pitas, and so on. If there are no combinations of pizza and pita sales that realize the profit, output none.\n\n-----Examples-----\nSample Input:\n725.85 1.71 2.38\nSample Output:\n199 162\n''') == '199 162'\n\nassert solution('''\n\n-----Input-----\nInput consists of a single line containing $3$ values $p_ t$ $p_1$ $p_2$, where $0 \\leq p_ t \\leq 10000.00$ is the profit for the month and $0 < p_1, p_2 \\leq 100.00$ are the profits Pete makes on a pita ($p_1$) and on a pizza ($p_2$). All values are in dollars and cents.\n\n-----Output-----\nDisplay two integers: the number of pitas sold and the number of pizzas sold so that the total profit equals the value given. If there is more than one combination of pitas and pizzas that give the specified profit, list them all, one combination per line, listing the combination with the smallest number of pitas first, then the combination with the second smallest number of pitas, and so on. If there are no combinations of pizza and pita sales that realize the profit, output none.\n\n-----Examples-----\nSample Input:\n725.85 1.71 2.38\nSample Output:\n199 162\n''') == '199 162'\n\nassert solution('''\n\n-----Input-----\nInput consists of a single line containing $3$ values $p_ t$ $p_1$ $p_2$, where $0 \\leq p_ t \\leq 10000.00$ is the profit for the month and $0 < p_1, p_2 \\leq 100.00$ are the profits Pete makes on a pita ($p_1$) and on a pizza ($p_2$). All values are in dollars and cents.\n\n-----Output-----\nDisplay two integers: the number of pitas sold and the number of pizzas sold so that the total profit equals the value given. If there is more than one combination of pitas and pizzas that give the specified profit, list them all, one combination per line, listing the combination with the smallest number of pitas first, then the combination with the second smallest number of pitas, and so on. If there are no combinations of pizza and pita sales that realize the profit, output none.\n\n-----Examples-----\nSample Input:\n725.85 1.71 2.38\nSample Output:\n199 162\n''') == '199 162'\n\nassert solution('''\n\n-----Input-----\nInput consists of a single line containing $3$ values $p_ t$ $p_1$ $p_2$, where $0 \\leq p_ t \\leq 10000.00$ is the profit for the month and $0 < p_1, p_2 \\leq 100.00$ are the profits Pete makes on a pita ($p_1$) and on a pizza ($p_2$). All values are in dollars and cents.\n\n-----Output-----\nDisplay two integers: the number of pitas sold and the number of pizzas sold so that the total profit equals the value given. If there is more than one combination of pitas and pizzas that give the specified profit, list them all, one combination per line, listing the combination with the smallest number of pitas first, then the combination with the second smallest number of pitas, and so on. If there are no combinations of pizza and pita sales that realize the profit, output none.\n\n-----Examples-----\nSample Input:\n725.85 1.71 2.38\nSample Output:\n199 162\n''') == '199 162'\n\nassert solution('''\n\n-----Input-----\nInput consists of a single line containing $3$ values $p_ t$ $p_1$ $p_2$, where $0 \\leq p_ t \\leq 10000.00$ is the profit for the month and $0 < p_1, p_2 \\leq 100.00$ are the profits Pete makes on a pita ($p_1$) and on a pizza ($p_2$). All values are in dollars and cents.\n\n-----Output-----\nDisplay two integers: the number of pitas sold and the number of pizzas sold so that the total profit equals the value given. If there is more than one combination of pitas and pizzas that give the specified profit, list them all, one combination per line, listing the combination with the smallest number of pitas first, then the combination with the second smallest number of pitas, and so on. If there are no combinations of pizza and pita sales that realize the profit, output none.\n\n-----Examples-----\nSample Input:\n725.85 1.71 2.38\nSample Output:\n199 162\n''') == '199 162'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n725.85 1.71 2.38\n''') == '199 162'\nassert solution('''\n3.80 2.70 1.90\n''') == 'None'\nassert solution('''\n3.80 1.90 2.70\n''') == 'None'\nassert solution('''\n10.80 2.70 3.70\n''') == '198'\nassert solution('''\n8.00 2.50 1.20\n''') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n75.00 1.71 2.38\n90.00 1.71 2.36\n100.00 1.71 2.36\n100.00 1.71 2.35\n100.00 1.71 2.34\n90.00 1.71 2.33\n100.00 1.71 2.32\n100.00 1.71 2.31\n90.00 1.71 2.30\n100.00 1.71 2.29\n75.00 1.71 2.28\n''') == '75 90 99'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\nassert solution('''5 3\n0 0 0\n1 -1 1\n2 2 -2\n3 3 0\n4 -2 0''') == '30'\nassert solution('''10 8\n-1 1 -2\n-1 -2 1\n-1 -2 -2\n-2 -1 -1\n-2 -1 -2\n-1 -2 -2\n-2 -1 -2\n1 1 2\n2 2 3\n3 3 3\n4 2 1\n5 -1 5\n6 -1 -6\n-7 -2 -6\n-7 -4 -5\n-4 -5 -4\n-4 -2 -3\n-3 -1 -2\n5 1 3\n6 1 1\n7 2 2\n8 2 2\n9 3 3\n10 4 2''') == '29'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\\n') == '16'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"16\"\nprint(solution('''5 3\n1 3 2\n2 1 -1\n0 2 3\n2 1 1\n3 3 0'''))\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\nprint('Done!')"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\nassert solution('''\n5 2\n2 1 1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '25'\nassert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '10'\n'''"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"16\"\nassert solution('''3 5\n1 -1 2 1\n2 -1 1 1\n1 -1 -1 2\n3 0 0\n3 0 2''') == \"6\"\nassert solution('''1 2\n0 0\n0 0''') == \"0\"\nassert solution('''2 2\n2 -1\n-1 2''') == \"3\"\nassert solution('''3 4\n2 -1 1\n1 -1 3\n-1 -1 -1\n1 3 -1''') == \"5\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\nassert solution('''5 5\n2 1 -1\n0 0 3\n3 2 1\n3 3 0\n3 1 2\n2 2 3''') == '31'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\nassert solution('''5 4\n1 0 0 0 1\n1 1 0 0 1\n0 0 0 0 1\n0 1 1 0 1\n1 1 0 0 1''') == '12'\nassert solution('''5 4\n1 0 0 0 1\n1 1 0 0 1\n0 0 0 0 1\n0 1 1 0 1\n1 1 0 0 1''') == '12'\nassert solution('''5 4\n1 0 0 0 1\n1 1 0 0 1\n0 0 0 0 1\n0 1 1 0 1\n1 1 0 0 1''') == '8'\nassert solution('''5 2\n0 2 0 0 1\n1 1 1 0 1''') == '2'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\\n\") == \"16\""
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\nassert solution('''\n5 3\n-1 -1 -1\n-1 2 -1\n-1 -1 -1\n-1 2 -1\n-1 -1 -1\n''') == '4'\nassert solution('''\n5 3\n-1 -1 2\n-1 2 -1\n-1 -1 2\n-1 2 -1\n-1 -1 -1\n''') == '0'\nassert solution('''\n5 3\n1 3 2\n2 1 1\n3 3 0\n2 1 1\n3 3 0\n''') == '16'\nassert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\nO 4') == '2 1 4'\n\nassert solution('2\\nO 4\\nE 2') == '4 2'\n\nassert solution('3\\nO 1\\nE 4\\nE 2') == '4 1'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2 1 4'\nassert solution('5') == '2 1 4 3 6'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nO 3\nO 5\nO 6\nO 3\nE 7\nO 7\nE 4\nE 5\nE 4\nE 5\nO 4\n''') == '4 2 5 7'\n'''\n\nn = int(input())"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2 1 4\"\n\nSample Input:\n2\nO 1\nO 2\nO 3\nO 4\nE 5\nE 6\nE 7\nE 8\nE 9\nE 10\nI 11\nI 12\nI 13\nI 14\nI 15\nI 16\nI 17\nI 18\nI 19\nI 20\nI 21\nI 22\nI 23\nI 24\nI 25\nI 26\nI 27\nI 28\nI 29\nI 30\nI 31\nI 32\nI 33\nI 34\nI 35\nI 36\nI 37\nI 38\nI 39\nI 40\nI 41\nI 42\nI 43\nI 44\nI 45\nI 46\nI 47\nI 48\nI 49\nI 50\nI 51\nI 52\nI 53\nI 54\nI 55\nI 56\nI 57\nI 58\nI 59\nI 60\nI 61\nI 62\nI 63\nI 64\nI 65\nI 66\nI 67\nI 68\nI 69\nI 70\nI 71\nI 72\nI 73\nI 74\nI 75\nI 76\nI 77\nI 78\nI 79\nI 80\nI 81\nI 82\nI 83\nI 84\nI 85\nI 86\nI 87\nI 88\nI 89\nI 90\nI 91\nI 92\nI 93\nI 94\nI 95\nI 96\nI 97\nI 98\nI 99\nI 100\nI 101\nI 102\nI 103\nI 104\nI 105\nI 106\nI 107\nI 108\nI 109\nI 110\nI 111\nI 112\nI 113\nI 114\nI 115\nI 116\nI 117\nI 118\nI 119\nI 120\nI 121\nI 122\nI 123\nI 124\nI 125\nI 126\nI 127\nI 128\nI 129\nI 130\nI 131\nI 132\nI 133\nI 134\nI 135\nI 136\nI 137\nI 138\nI 139\nI 140\nI 141\nI 142\nI 143\nI 144\nI 145\nI 146\nI 147\nI 148\nI 149\nI 150\nI 151\nI 152\nI 153\nI 154\nI 155\nI 156\nI 157\nI 158\nI 159\nI 160\nI 161\nI 162\nI 163\nI 164\nI 165\nI 166\nI 167\nI 168\nI 169\nI 170\nI 171\nI 172\nI 173\nI 174\nI 175\nI 176\nI 177\nI 178\nI 179\nI 180\nI 181\nI 182\nI 183\nI 184\nI 185\nI 186\nI 187\nI 188\nI 189\nI 190\nI 191\nI 192\nI 193\nI 194\nI 195\nI 196\nI 197\nI 198\nI 199\nI 200\nI 201\nI 202\nI 203\nI 204\nI 205\nI 206\nI 207\nI 208\nI 209\nI 210\nI 211\nI 212\nI 213\nI 214\nI 215\nI 216\nI 217\nI 218\nI 219\nI 220\nI 221\nI 222\nI 223\nI 224\nI 225\nI 226\nI 227\nI 228\nI 229\nI 230\nI 231\nI 232\nI 233\nI 234\nI 235\nI 236\nI 237\nI 238\nI 239\nI 240\nI 241\nI 242\nI 243\nI 244\nI 245\nI 246\nI 247\nI 248\nI 249\nI 250\nI 251\nI 252\nI 253\nI 254\nI 255\nI 256\nI 257\nI 258\nI 259\nI 260\nI 261\nI 262\nI 263\nI 264\nI 265\nI 266\nI 267\nI 268\nI 269\nI 270\nI 271\nI 272\nI 273\nI 274\nI 275\nI 276\nI 277\nI 278\nI 279\nI 280\nI 281\nI 282\nI 283\nI 284\nI 285\nI 286\nI 287\nI 288\nI 289\nI 290\nI 291\nI 292\nI 293\nI 294\nI 295\nI 296\nI 297\nI 298\nI 299\nI 300\nI 301\nI 302\nI 303\nI 304\nI 305\nI 306\nI 307\nI 308\nI 309\nI 310\nI 311\nI 312\nI 313\nI 314\nI 315\nI 316\nI 317\nI 318\nI 319\nI 320\nI 321\nI 322\nI 323\nI 324\nI 325\nI 326\nI 327\nI 328\nI 329\nI 330\nI 331\nI 332\nI 333\nI 334\nI 335\nI 336\nI 337\nI 338\nI 339\nI 340\nI 341\nI 342\nI 343\nI 344\nI 345\nI 346\nI 347\nI 348\nI 349\nI 350\nI 351\nI 352\nI 353\nI 354\nI 355\nI 356\nI 357\nI 358\nI 359\nI 360\nI 361\nI 362\nI 363\nI 364\nI 365\nI 366\nI 367\nI 368\nI 369\nI 370\nI 371\nI 372\nI 373\nI 374\nI 375\nI 376\nI 377\nI 378\nI 379\nI 380\nI 381\nI 382\nI 383\nI 384\nI 385\nI 386\nI 387\nI 388\nI 389\nI 390\nI 391\nI 392\nI 393\nI 394\nI 395\nI 396\nI 397\nI 398\nI 399\nI 400\nI 401\nI 402\nI 403\nI 404\nI 405\nI 406\nI 407\nI 408\nI 409\nI 410\nI 411\nI 412\nI 413\nI 414\nI 415\nI 416\nI 417\nI 418\nI 419\nI 420\nI 421\nI 422\nI 423\nI 424\nI 425\nI 426\nI 427\nI 428\nI 429\nI 430\nI 431\nI 432\nI 433\nI 434\nI 435\nI 436\nI 437\nI 438\nI 439\nI 440\nI 441\nI 442\nI 443\nI 444\nI 445\nI 446\nI 447\nI 448\nI 449\nI 450\nI 451\nI 452\nI 453\nI 454\nI 455\nI 456\nI 457"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 1 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"O 4\") == \"2 1 4\"\nassert solution(\"E 4\") == \"2 1 4\"\nassert solution(\"I 4\") == \"1 1 1\"\nassert solution(\"O 15\") == \"1 1 1\"\nassert solution(\"E 15\") == \"1 1 1\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\nI 4\nO 3\nE 7\n''') == '2 3 4'\nassert solution('''\n2\nI 4\nO 3\nE 7\n''') == '1 3 4'\nassert solution('''\n1\nO 7\nE 5\nI 4\n''') == '4 5'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''O 2\nE 4\nI 8\nO 6\nI 1\nE 4\nI 7\nE 3\nI 8\nE 6\nI 2\nO 9\nI 5\nE 1\nI 2\nO 5\nI 9\nO 2\nE 4\nI 2\nE 7\nI 8\nE 6\nI 5\nI 4\nI 9\nE 3\nI 7\nI 7\nI 6\nE 5\nE 6\nE 5\nI 1\nI 5\nE 7\nE 4\nE 8\nE 9\nE 3\nI 4\nE 6\nI 6\nE 7\nI 3\nI 5\nI 9\nI 5\nI 7\nE 4\nI 2\nI 7\nI 3\nI 5\nI 5\nE 5\nI 3\nO 3\nI 1\nI 4\nI 6\nO 3\nE 7\nO 8\nO 6\nO 2\nE 5\nE 4\nI 3\nE 5\nI 7\nE 5\nI 2\nI 8\nI 8\nI 3\nO 9\nI 2\nI 6\nO 4\nE 4\nI 9\nE 7\nI 8\nI 2\nO 2\nI 5\nI 8\nO 1\nI 1\nI 8\nO 7\nE 8\nI 5\nI 3\nO 4\nE 9\nO 6\nO 5\nE 5\nI 4\nI 3\nO 1\nI 2\nO 1\nI 6\nO 1\nI 5\nE 5\nO 5\nI 5\nI 3\nE 5\nO 3\nI 7\nI 2\nI 9\nI 8\nI 2\nI 3\nI 7\nI 5\nI 3\nI 4\nI 5\nI 4\nI 6\nI 5\nI 7\nI 9\nI 4\nO 7\nI 2\nI 3\nO 4\nI 8\nI 2\nI 7\nO 3\nI 1\nI 5\nO 3\nI 1\nI 5\nI 5\nI 7\nI 6\nI 4\nI 7\nI 7\nO 5\nI 5\nO 7\nI 4\nI 9\nI 3\nI 2\nI 8\nI 8\nI 6\nI 5\nI 4\nI 9\nI 3\nI 9\nI 3\nO 8\nI 7\nI 7\nI 3\nO 2\nI 3\nI 5\nI 2\nI 3\nI 7\nI 4\nI 6\nI 2\nI 3\nI 3\nO 9\nI 6\nO 2\nI 4\nO 3\nI 4\nI 1\nI 7\nI 5\nI 9\nI 4\nI 4\nI 1\nI 9\nO 2\nO 8\nO 1\nO 2\nI 7\nI 9\nI 4\nO 3\nO 3\nI 8\nO 2\nI 3\nI 8\nI 7\nI 3\nI 6\nI 5\nI 4\nI 3\nI 3\nI 5\nI 5\nI 3\nI 3\nI 5\nI 5\nI 5\nI 3\nI 4\nI 4\nI 6\nI 2\nI 5\nI 7\nI 2\nI 9\nI 8\nI 7\nI 3\nI 5\nI 3\nI 6\nI 2\nI 7\nI 5\nI 5\nI 2\nI 9\nI 4\nI 9\nI 8\nI 4\nI 2\nI 8\nI 2\nI 9\nI 2\nI 4\nI 6\nI 5\nI 5\nI 4\nI 5\nI 7\nI 8\nI 5\nI 3\nI 5\nI 3\nI 8\nI 9\nI 5\nI 3\nI 3\nI 7\nI 8\nI 2\nI 7\nI 7\nI 6\nI 4\nI 9\nI 5\nI 6\nI 7\nI 4\nI 8\nI 9\nI 3\nI 5\nI 5\nI 6\nI 2\nI 5\nI 5\nI 8\nI 2\nI 9\nI 5\nI 3\nI 3\nI 4\nI 8\nI 8\nI 2\nI 9\nI 4\nI 3\nI 8\nI 5\nI 5\nI 5\nI 5\nI 9\nI 5\nI 8\nI 2\nI 6\nI 3\nI 3\nI 5\nI 4\nI 7\nI 5\nI 7\nI 5\nI 3\nI 9\nI 3\nI 8\nI 9\nI 9\nI 3\nI 5\nI 5\nI 7\nI 4\nI 7\nI 5\nI 6\nI 3\nI 5\nI 8\nI 2\nI 4\nI 3\nI 7\nI 5\nI 3\nI 4\nI 4\nI 9\nI 2\nI 3\nI 7\nI 5\nI 4\nI 8\nI 4\nI 5\nI 3\nI 5\nI 8\nI 4\nI 4\nI 8\nI 4\nI 5\nI 4\nI 6\nI 4\nI 5\nI 8\nI 8\nI 2\nI 7\nI 3\nI 4\nI 3\nI 6\nI 9\nI 2\nI 8\nI 5\nI 9\nI 7\nI 3\nI 3\nI 7\nI 6\nI 4\nI 6\nI 8\nI 3\nI 5\nI 4\nI 8\nI 2\nI 4\nI 2\nI 6\nI 3\nI 5\nI 5\nI 4\nI 3\nI 3\nI 5\nI 4\nI 8\nI 8\nI 7\nI 3\nI 5\nI 7\nI 7\nI 5\nI 8\nI 2\nI 8\nI 5\nI 3\nI 9\nI 8\nI 4\nI 3\nI 5\nI 5\nI 3\nI 4\nI 6\nI 5\nI 8\nI 8\nI 5\nI 4\nI 5\nI 8\nI 8\nI 2\nI 3\nI 6\nI 3\nI 8\nI 5\nI 2\nI 8\nI 4\nI 3\nI 8\nI 5\nI 9\nI 5\nI 3\nI 4\nI 5\nI 8\nI 5\nI 4\nI 9\nI 3\nI 5\nI 3\nI 5\nI 7\nI 5\nI 5\nI 4\nI 5\nI 8\nI 4\nI 3\nI 8"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"O 2\") == \"O 1\"\nassert solution(\"O 8\") == \"O 2\"\nassert solution(\"O 17\") == \"O 4\"\nassert solution(\"O 125\") == \"O 3 1 2 5\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('O 4\\n') == '2 1 4'"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n5\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"4\"\n\nassert solution(\"\"\"10 2\n0 1 4\n10 2 6 3\n0 8 10 9\n0 0 0 0\n0 4 2 7\n0 7 0 8\n0 6 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n0 3 0 6\n4 5 6 7 8 9 0\n\"\"\") == \"9\"\n\nassert solution(\"\"\"15 3\n0 1 4\n10 2 6 3\n0 8 10 9\n0 0 0 0\n0 4 2 7\n0 7 0 8\n0 6 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n0 3 0 6\n4 5 6 7 8 9 0\n0 0 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n3 5 6 7 8 9 0\n0 0 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n3 5 6 7 8 9 0\n\"\"\") == \"10\"\n\nassert solution(\"\"\"100 2\n0 1 4\n99 2 6 3\n0 8 10 9\n0 0 0 0\n0 4 2 7\n0 7 0 8\n0 6 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n0 3 0 6\n4 5 6 7 8 9 0\n0 0 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n3 5 6 7 8 9 0\n0 0 0 0\n0 0 3 9\n0 9 0 0\n0 0 0 0\n0 0 4 0\n3 5 6 7 8 9 0\n\"\"\") == \"999\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\\n') == '4'"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\nassert solution('''\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '5'\n'''"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 1 4 5') == '4'\nassert solution('5 5 9 10') == '3'\nassert solution('1 6 4 10') == '2'\nassert solution('2 11 7 14') == '3'"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2 4\n3 2 3\n4 2 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n8\n2 2 4 5 5 4\n2 2 8 1 2\n1 2 3 4 1\n1 2 7 8 2\n4 5 5 8 4\n8 8 8 8 1\n4 4 4 8 8\n7 6 6 8 7\n4 4 5 5 8\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 1 12 4\") == \"3\"\nassert solution(\"5 5 9 10\") == \"4\"\nassert solution(\"1 6 4 10\") == \"1\"\nassert solution(\"2 11 7 14\") == \"2\"\n\nsolution()\n\n--------------------------------------------------------------------------------------------------------------------------------------\n\n-------------------------- Approach 1 (Optimized) --------------------------------------\n\nIn this approach, we can determine the point of the beam by computing the slope of the big circle.\nThe circle's radius is R=|x1-x2| + |y1-y2|\nThe point of the beam is located at the center of the circle and the circle has the same radius.\nThen, the point of the beam is given by:\nx = x1 + (cos(theta) * R)\ny = y1 + (sin(theta) * R)\nFor the big circle theta is the angle of the beam, theta = pi - phi. Here phi is the angle between the x-axis and the shot axis. We can take advantage of the trigonometry to solve for phi:\nphi = pi - atan(R/R_sqrt)\nwhere R = |x1 - x2| + |y1 - y2|\nand R_sqrt = sqrt(R^2 - (x1 - x2)^2 - (y1 - y2)^2)\n\nWe can then solve for the center of the big circle:\nx = R cos(theta)\ny = R sin(theta)\n\n--------"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"2 1 4 5\\n\"\n    \"5 1 12 4\\n\"\n    \"5 5 9 10\\n\"\n    \"1 6 4 10\\n\"\n    \"2 11 7 14\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 4 5') == '4'\nassert solution('5 1 12 4') == '5'\nassert solution('5 5 9 10') == '8'\nassert solution('1 6 4 10') == '9'\nassert solution('2 11 7 14') == '10'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"9.585073\"\nassert solution(\"99 9 999 9999\", -99.99, 99.99, 9999.99) == \"9.585073\"\nassert solution(\"99 9 999 9999\", 99, 99, 9999, 9999) == \"9.585073\"\nassert solution(\"99 9 999 9999\", 99, 99, 9999, 9999, 9999) == \"9.585073\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\nassert solution('99 99 999 9999') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '9.585073'\nprint(solution())"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\n\nSample Input:\n99.99 9999 9999\n99 999 9999 9\n9 99 9 99 9\nSample Output:\n9.585073\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99.99 999.99 9999.99\") == \"9.585073\"\nassert solution(\"9 999.99 9999.99 9999.99\") == \"9.585073\"\n\"\"\"\n\na, b, c = map(float, input().split())\nt1, t2, t3, t4 = map(int, input().split())\nn, k, r, s, l = map(int, input().split())"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"9.585073\"\nassert solution(\"9 99 9 99 9\") == \"9.585073\"\nassert solution(\"9 9 9 9 9\") == \"9.585073\"\nassert solution(\"9 9 9 9 9\") == \"9.585073\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"7.119422\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('9 9 999 9999') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\n\"\"\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 9 999 9999') == '9.585073'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 1 1 2 2') == 'impossible'\nassert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\nprint('Everything passed')"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 10\\n2 10 20 2 24 18 28 10\") == \"12.74 127.83\""
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == 'impossible'\nassert solution('''\n20 30\n1 8 5 4 2 6 8 1\n''') == '10.00 10.00'\nassert solution('''\n20 30\n1 1 1 2 3 3 4 2 1\n''') == 'impossible'"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '12.74 127.83'\n\nSample Input:\n50 60\n2 20 30 2 40 50 60 10\nSample Output:\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10''') == '12.74 127.83'\nassert solution('''30 10\n2 10 20 2 24 18 28 10''') == 'Impossible'\nassert solution('''20 30\n2 10 20 2 24 18 28 10''') == '12.74 127.83'\n''')\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10''') == '12.74 127.83'\n'''\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('30 20') == '20.00 20.00'\nassert solution('20 20') == 'impossible'\nassert solution('30 30') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''\n12 20\n10 10 12 12 12\n''') == 'impossible'\nassert solution('''\n20 20\n1 1 1 1 1\n''') == 'impossible'\nassert solution('''\n3 2\n1 1 2\n''') == '12.74 127.83'\nassert solution('''\n2 2\n1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n100\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n6') == '016'\nassert solution('2\\n6') == '006'\n\n'''"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n110\\n6') == '0116'\nassert solution('2\\n10\\n6') == '1016'\nassert solution('2\\n1\\n2') == '12'\nassert solution('2\\n0\\n0') == '0000'\nassert solution('2\\n1\\n3') == '103'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_str) == \"0116\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0116\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2\\n110\\n6'\n) == '0116'\n\"\"\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0116\"\nassert solution(\"3\\n21\\n2\\n0\") == \"2221\"\nassert solution(\"3\\n0\\n0\\n0\") == \"0\"\nassert solution(\"7\\n1\\n0\\n0\\n0\\n0\\n0\\n0\") == \"11010111\"\nassert solution(\"3\\n0\\n0\\n0\") == \"0\""
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n110\n6\nSample Input:\n1\n01\nSample Output:\n010"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n6') == '16'\nassert solution('2\\n6') == '126'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n110\\n6') == '0116'\nassert solution('12\\n2\\n1\\n0\\n1\\n1') == '0122'\nassert solution('12\\n2\\n1\\n9\\n8\\n9') == '0122'\nassert solution('1\\n0\\n1\\n0\\n1\\n1') == '0122'\nassert solution('1\\n0\\n1\\n1\\n1\\n1') == '0122'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"0 2 4\"\nassert solution(\"10 5\") == \"0 2 5\"\nassert solution(\"30 5\") == \"2 0 0\"\nassert solution(\"10 1\") == \"2\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '0 2'\nassert solution('4 2') == '0 2'\nassert solution('10 2') == '1 2 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 1 2''') == '0 0 0'\nassert solution('''8\n4 4 4''') == '0 2 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 3\n4 4 4''') == '0 2 4'\nassert solution('''10 4\n3 5 6 7''') == '1 5 6 7'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '0 1 2'\nassert solution('8 3') == '0 2 3'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '0 2 4'\nassert solution('8 3') == '0 2 4'\nassert solution('8 0') == '0 0 0'\n'''\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 3\n4 4 4\n''') == '0 2 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 3\n4 4 4''') == '0 2 4'''\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n4 5 2\n6 4 7\n3 6 8''') == \"0 2 4\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 1 2 4') == '2 2 0 3 1'\nassert solution('7 7 1 2 4 4 6') == '0 2 3 4 5 6 0'"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n7\\n2 2 4') == 'impossible'\nassert solution('5\\n6 3\\n5 5 3') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n\"\n    \"7\\n\"\n    \"2 2 4\\n\"\n    \"3 1 3 5\\n\"\n    \"1 2\\n\"\n    \"2 1 5\\n\"\n    \"4 2 6 4 7\\n\"\n    \"2 5 7\\n\"\n    \"2 6 5\\n\"\n) == \"impossible\"\nassert solution(\n    \"5\\n\"\n    \"8\\n\"\n    \"0 1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\"\n    \"1 2 3 4 5 6 7\\n\"\n    \"8 1 2 3 4 5 6 7\\n\""
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5') == 'impossible'\nassert solution('4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5') == 'possible'"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n2\n5\n3 3\n3 2 5\n4 4\n1 2\n2 1 5\n''') == 'impossible'\nassert solution('''\n2\n5\n3 3\n3 2 5\n4 4\n1 2\n2 1 5\n''') == 'impossible'\nassert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3\\n1 2\\n2 1\\n2 2\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"possible\"\nassert solution(\"5\\n16\\n2 4\\n2 1 2\\n2 4\\n2 1 6\\n1 1\\n3 5\\n2 4 5\") == \"impossible\"\nassert solution(\"5\\n17\\n3 4\\n1 2\\n4 2\\n1 1\\n3 4\\n1 5\\n2 4\\n1 2\\n3 5\\n1 2\\n2 4\\n1 1\\n3 5\\n1 1\\n4 2\\n1 1\\n3 5\\n1 1\\n1 2\\n1 3\\n2 4\\n2 4\\n1 1\\n3 5\\n2 1\\n2 4\\n1 2\\n2 4\\n2 4\\n3 4\\n1 1\\n2 3\\n1 3\\n3 3\\n1 5\\n1 5\\n2 5\\n1 1\\n2 5\\n1 1\\n2 5\\n1 3\\n2 5\\n1 3\\n2 5\\n1 4\\n2 5\\n2 4\\n2 5\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\") == \"impossible\"\nassert solution(\"6\\n12\\n3 4\\n4 5\\n5 6\\n5 7\\n7 8\\n8 9\\n10 1 2 3\\n10 4\") == \"impossible\"\nassert solution(\"6\\n12\\n3 4\\n4 5\\n5 6\\n5 7\\n7 8\\n8 9\\n10 1 2 3\\n10 4\") == \"impossible\"\nassert solution(\"3\\n4\\n1 2\\n2 1\\n1 1\\n1 2\\n2 1\\n1 2\\n2 2\") == \"impossible\"\nassert solution(\"3\\n4\\n1 2\\n2 1\\n1 1\\n1 2\\n2 1\\n1 2\\n2 2\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n8\\n1 2 3 4 5 6 7 8\\n1 2 3\\n1 2\\n1 2 3 4 5 6 7 8\\n1 2 3\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\nassert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'possible'\nassert solution('''\n3\n5\n5\n5\n''') == 'impossible'\n''')"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4.00000\"\nassert solution('1\\n1\\n1') == \"1.00000\"\nassert solution('100\\n1000\\n3000\\n') == \"10.00000\""
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\n\nassert solution(\"\"\"\n3\n1 2\n1 1\n1 1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2\n10 0\n2 2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2') == '4.00000'\nassert solution('3\\n0 0\\n0 10\\n2') == 'impossible'\nassert solution('4\\n0 0\\n0 10\\n4') == '4.00000'\nassert solution('5\\n0 0\\n0 10\\n2') == 'impossible'\nassert solution('6\\n0 0\\n0 10\\n2') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1.000000'\nassert solution('1') == 'Impossible'\nassert solution('2') == '0.82857'\n'''\nfrom math import inf\nimport heapq"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n0 0\n0 10\n2\n4 10\n4 0''') == '4.00000'\nassert solution('''2\n1\n0 0\n1 10''') == 'impossible'\nassert solution('''2\n10\n-1 0\n1 10''') == 'impossible'\nassert solution('''2\n-1\n-1 0\n1 10''') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\nassert solution('''\n1\n2\n4\n5\n3\n2\n1\n4\n3\n''') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n0 0\n1 10\n2\n0 10\n3 0\n\"\"\") == \"4.00000\"\nassert solution(\"\"\"\n2\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n0\n3\n\"\"\") == \"impossible\"\n\n\"\"\"\n--- Part Two ---\n\nThe Messenger has now received the package, but she is very slow. To help mitigate the delays, she has entered a system for tracking the places visited by each of the participants. There is a space with two numbers: the first one is the index of the place where the messenger has picked up the package, the second one is the index of the place where the package was delivered. If the number is a negative number, then it means that the place where the messenger has picked up the package was not visited yet. If the number is a positive number, then it means that the place where the package was delivered was not visited yet.\n\nThe Messenger starts its journey by heading to the first place, and she wants to get there first. However, since she is very slow, she may get stuck somewhere and then leave the messenger standing for a while at a place without receiving the package. In other words, if she goes to any place and then stops before delivering the package, she will never get to the last place.\n\nGiven an initial time, $t$, and the two coordinates of each place where the messenger has started, find the shortest time needed to deliver the package.\n\n-----Input-----\nThe input consists of a single test case. The test case contains two lines. The first contains a single number, $t$, the time at which the messenger has arrived at its initial place. The second contains two integers $x_1, y_1$, the coordinates of the initial place, followed by two integers $x_ 2, y_ 2$ representing the coordinates of the final place.\n\nThe initial place is represented by $1$ at the beginning and the final place by $10^5$ at the end. This is followed by a line containing two numbers, $x_1, y_1$ and $x_2, y_2$. The two coordinates are the coordinates of the place where the Messenger started, and the coordinates of the place where the package was delivered.\n\nThe initial place is not at any intersection of the paths, and the time needed for delivery is at least $1$. The final place is not at any intersection of the paths, and the time needed for delivery is at least $1$.\n\n-----Output-----\nDisplay the time needed for delivery. Use an absolute error of at most $10^{-3}$ or a relative error of at most $10^{-5}$. If the package cannot be delivered, display impossible instead.\n\n-----Examples-----\nSample Input:\n2\n5\n5 5\n5 10\n2\n2 3\n4\n4 5\n5 5\nSample Output:\n5.00000\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0 0\\n0 10') == '4.00000'\nassert solution('2\\n4 10\\n4 0') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\nassert solution('''\n3\n0 0\n0 10\n3\n2\n4\n''') == 'impossible'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\nassert solution(\"\"\"\n10\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n10\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\nassert solution(\"\"\"\n5\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4 2\n1 1\n3 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 4 1\n1 1\n3 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 4 1\n1 1\n3 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3 4\n2 1\n1 3\n2 2\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1'\nassert solution('3 3 3\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '0'\nassert solution('3 3 3\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1'\nassert solution('3 3 3\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '0'\nassert solution('3 3 3\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n3 3 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '0'\nassert solution('''\n3 3 5\n1 2\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n3 3 5\n1 2\n1 3\n3 1\n3 3\n2 2\n''') == '0'\nassert solution('''\n3 3 5\n1 2\n1 3\n3 1\n3 3\n2 2\n3 1\n3 3\n2 2\n3 1\n3 3\n2 2\n''') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1\", \"First\"\nassert solution(\"4 4 5\") == \"0\", \"Second\"\nassert solution(\"10 10 5\") == \"1\", \"Third\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\n\nassert solution('''\n3 2 5\n3 2\n1 1\n''') == '0'\n\nassert solution('''\n3 3 5\n1 1\n1 3\n3 1\n''') == '0'\n\nassert solution('''\n3 3 5\n1 1\n3 1\n3 1\n''') == '1'\n\nassert solution('''\n1 1\n1 1\n''') == '1'"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 1\\n1 3\\n2 2') == '1'\nassert solution('1 2 2\\n1 2\\n2 1') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n4 3 5\n1 1\n1 3\n2 2\n1 2\n2 2\nSample Output:\n0\n''') == '0'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n') == '1'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '3 3'\n\nassert solution('10 8') == '0 9'\n\nassert solution('5 1') == '5 5'\n\nassert solution('10 2') == 'impossible'\n\nassert solution('5 2') == '5 5'"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5 3\"\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == '5 3\\n1 0\\n2 4\\n'"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '5 3'\nassert solution('0 1') == '0 1'\nassert solution('0 2') == '0 2'\nassert solution('1 3') == '1 2'\nassert solution('2 3') == '2 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\") == \"3 2\"\nassert solution(\"5 5\") == \"impossible\"\nassert solution(\"5 5\") == \"impossible\""
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '1 0'\nassert solution('5 5') == '1 2'\nassert solution('2 3') == '0 1'\nassert solution('6 3') == '0 1'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n') == '5 3\\n1 0\\n2 4\\n'\nassert solution('20 20\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n') == '20 20\\n1 4\\n0 0\\n2 4\\n'\nassert solution('5 3\\n0 1\\n0 2\\n1 2\\n1 2\\n1 2\\n') == '5 3\\n1 0\\n2 4\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '5 3\\n1 0\\n2 4\\n'\nassert solution('1 2') == 'impossible\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '3 2'\nassert solution('1 2') == '2 3'\nassert solution('5 4') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '3 1\\n3 0\\n3 4\\n'\n\nassert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '3 3\\n1 3\\n3 2\\n'\n\nassert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\"\nassert solution(\"3 3\\n0 0\\n0 1\\n1 0\") == \"1 2\"\nassert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\"\nassert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n1 1\\n2 2\\n3 3\") == \"0\"\nassert solution(\"3 3\\n0 0\\n0 1\\n1 0\\n1 1\\n2 2\\n3 3\") == \"0\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == '2'\nassert solution('4 2') == '2'\nassert solution('4 2') == '2'"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2\\n1 2'\nassert solution('6 2\\n1 2\\n0 0\\n0 1\\n1 0\\n2 2') == '3\\n1 3'\nassert solution('3 1\\n0 0\\n0 1\\n0 2') == '1\\n0 2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n1 2\n2 0\n2 1\n''') == '2 1\n\nassert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '3 1\n\nassert solution('''\n5 1\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n''') == '5 1\n\nassert solution('''\n3 3\n0 0\n0 1\n0 2\n1 0\n1 1\n''') == '3 2\n\nassert solution('''\n4 4\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n''') == '3 3"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 1\n0 2\n2 1''') == '2'\n\n\"\"\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\\n1 2\"\nassert solution([\n    \"2 1\",\n    \"0 0\",\n    \"0 1\",\n    \"1 0\",\n    \"1 1\"\n]) == \"2\\n1 2\"\n\"\"\"\nimport math"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"2 1 2\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"3\"\nassert solution(\"10 1\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 1\n0 0\n0 1\n1 0\n1 1''') == '2'\n\nassert solution('''3 1\n1 0\n2 2\n3 3''') == '1 2 3'\n\nassert solution('''2 1\n1 0\n0 1''') == '1 2'\n\nprint(solution('''3 1\n1 0\n2 2\n3 3'''))\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10 2\n1 3 5 7 9 11 13 15 17 16\n\"\"\") == \"1\"\nassert solution(\"\"\"\n20 2\n5 7 9 11 13 15 17 16 19 28 29 35 37 40\n\"\"\") == \"5\"\nassert solution(\"\"\"\n30 3\n3 5 7 9 11 13 15 17 16 19 28 29 35 37 40\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 3\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n20 3\n5 7 9 11 13 15 17 16 19 28 29 35 37 40\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 2\n1 3 5 7 9 11 13 15 17 16\n\"\"\") == \"1\"\nassert solution(\"\"\"\n15 2\n
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\n'''"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 2') == '1'\nassert solution('10 20') == '5'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"1\""
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 3 5 7 9 11 13 15 17 16') == '1'\nassert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '2'\nprint('You passed the test!')"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''\n10 2\n2 2 2 2 2 2 2 2 2\n''') == '1'\nassert solution('''\n10 2\n1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''\n10 2\n1 1 1 1 1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"10 2\n1 3 5 7 9 11 13 15 17 16\"\"\") == \"1\"\nassert solution(\"\"\"1 2\n3 2 1\"\"\") == \"0\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('3\\n2 3 4 5') == '0'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7 4\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n\"\"\") == \"7 4\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"7 5\\n\"\n    \"ACDBB\\n\"\n    \"5 6\\n\"\n    \"8 9\\n\"\n    \"4 13\\n\"\n    \"1 10\\n\"\n    \"7 4\\n\"\n    \"10 9\\n\"\n    \"3 7\"\n    ) == \"7 4\"\nassert solution(\n    \"6 3\\n\"\n    \"ABAB\\n\"\n    \"3 2\\n\"\n    \"BBAB\\n\"\n    \"1 2\\n\"\n    \"5 2\\n\"\n    \"4 2\\n\"\n    \"1 1\\n\"\n    \"5 1\\n\"\n    \"2 2\\n\"\n    \"5 2\\n\"\n    ) == \"1 1\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == \"7 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7''') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4\\n'\n\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'\nassert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '11 3'\n\n'''"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 5') == '7 4'\n\nimport sys\ninput = lambda: sys.stdin.readline().rstrip()\n\nfrom collections import deque\n\nINF = float('inf')\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    6 5\n    ACDBB\n    5 6\n    8 9\n    4 13\n    1 10\n    7 4\n    10 9\n    3 7\n    ''') == '7 4'\nassert solution('''\n    1000000000 6\n    ACDBB\n    5 6\n    8 9\n    4 13\n    1 10\n    7 4\n    10 9\n    3 7\n    ''') == '7 4'\n''')\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE'\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\""
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nprint(solution(input()))"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \"\n\"\\\"HELLO THERE \\\"\\n30 PRINTLN A\") == \"HELLO THERE 1\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\\n\") == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \"\n\"\\'HELLO THERE\\'; A = 2;\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20;\\n60 PRINTLN \\'DONE\\';\") == \"HELLO THERE 2\\nHELLO THERE 4\\nHELLO THERE 6\\nHELLO THERE 8\\nDONE\"\nprint(solution(\"10 LET A = 1\\n20 PRINT \\'HELLO THERE\\'; A = 2;\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20;\\n60 PRINTLN \\'DONE\\';\"))\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    10\n    LET A = 1\n    20 PRINT \"HELLO THERE \"\n    30 PRINTLN A\n    40 LET A = A + 1\n    50 IF A <= 5 THEN GOTO 20\n    60 PRINTLN \"DONE\"\n    \"\"\") == \"DONE\"\n\n'''\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3 0 1\\n0 1\\n') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('10') == '3'\nassert solution('2') == '2'\nassert solution('20') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 0 1\n0 1\n''') == '3'\nassert solution('''5\n3 0 1\n0 1\n0 2\n''') == '5'\nassert solution('''6\n5 0 1\n0 1\n0 2\n0 3\n0 4\n''') == '4'\n'''\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 1\n0 1\n''') == \"3\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\n\nExplanation:\n\nTask 1:\nTasks 1, 2, 3 are of difficulty 1.\nTask 2:\nTask 2 and 3 are of difficulty 1.\nTask 3:\nTask 1 and 3 are of difficulty 1.\nTask 1, 2:\nTask 2 and 3 are of difficulty 2.\nTask 1, 3:\nTask 2 and 3 are of difficulty 3.\nTask 2, 3:\nTask 1 and 3 are of difficulty 4.\nTotal number of different ways = 2 + 2 + 2 + 4 + 3 + 4 = 13.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 4.\nTask 2, 3:\nTask 1 and 3 are of difficulty 5.\nTotal number of different ways = 2 + 2 + 2 + 5 = 7.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 5.\nTotal number of different ways = 2 + 2 + 5 = 7.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 6.\nTotal number of different ways = 2 + 2 + 5 = 7.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 6.\nTotal number of different ways = 2 + 6 = 8.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 7.\nTotal number of different ways = 2 + 6 = 8.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 7.\nTotal number of different ways = 2 + 6 = 8.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 8.\nTotal number of different ways = 2 + 6 = 8.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 8.\nTotal number of different ways = 2 + 8 = 10.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 9.\nTotal number of different ways = 2 + 8 = 10.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 9.\nTotal number of different ways = 2 + 8 = 10.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 10.\nTotal number of different ways = 2 + 8 = 10.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 10.\nTotal number of different ways = 2 + 10 = 12.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 11.\nTotal number of different ways = 2 + 10 = 12.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 11.\nTotal number of different ways = 2 + 10 = 12.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 12.\nTotal number of different ways = 2 + 10 = 12.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 12.\nTotal number of different ways = 2 + 12 = 14.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 13.\nTotal number of different ways = 2 + 12 = 14.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 13.\nTotal number of different ways = 2 + 12 = 14.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 14.\nTotal number of different ways = 2 + 12 = 14.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 14.\nTotal number of different ways = 2 + 14 = 16.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 15.\nTotal number of different ways = 2 + 14 = 16.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 15.\nTotal number of different ways = 2 + 14 = 16.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 16.\nTotal number of different ways = 2 + 14 = 16.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 16.\nTotal number of different ways = 2 + 16 = 18.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 17.\nTotal number of different ways = 2 + 16 = 18.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 17.\nTotal number of different ways = 2 + 16 = 18.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 18.\nTotal number of different ways = 2 + 16 = 18.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 18.\nTotal number of different ways = 2 + 18 = 20.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 19.\nTotal number of different ways = 2 + 18 = 20.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 19.\nTotal number of different ways = 2 + 18 = 20.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 20.\nTotal number of different ways = 2 + 18 = 20.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 20.\nTotal number of different ways = 2 + 20 = 22.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 21.\nTotal number of different ways = 2 + 20 = 22.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 21.\nTotal number of different ways = 2 + 20 = 22.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 22.\nTotal number of different ways = 2 + 20 = 22.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 22.\nTotal number of different ways = 2 + 22 = 24.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 23.\nTotal number of different ways = 2 + 22 = 24.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 23.\nTotal number of different ways = 2 + 22 = 24.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 24.\nTotal number of different ways = 2 + 22 = 24.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 24.\nTotal number of different ways = 2 + 24 = 26.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 25.\nTotal number of different ways = 2 + 24 = 26.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 25.\nTotal number of different ways = 2 + 24 = 26.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 26.\nTotal number of different ways = 2 + 24 = 26.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 26.\nTotal number of different ways = 2 + 26 = 28.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 27.\nTotal number of different ways = 2 + 26 = 28.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 27.\nTotal number of different ways = 2 + 26 = 28.\n\nTask 2, 3:\nTask 1 and 3 are of difficulty 28.\nTotal number of different ways = 2 + 26 = 28.\n\nTask 1, 2:\nTask 2 and 3 are of difficulty 28.\nTotal number of different ways = 2 + 28 = 30.\n\nTask 1, 3:\nTask 2 and 3 are of difficulty 29.\nTotal number of different ways = 2 + 28 = 30.\n\nTask 2, 3:\nTask"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 0 1\n0 1''') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 0 1') == '3'\nassert solution('3 1 0') == '3'\nassert solution('4 0 1') == '0'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1\n3 0 1\n0 1\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3 0 1\n0 1\n''') == '3'\n\nassert solution('''6\n3 0 1\n0 2\n0 1\n1 2\n''') == '4'\n\nassert solution('''5\n3 0 1\n0 2\n0 1\n1 2\n''') == '3'\n\nassert solution('''10\n3 0 1\n0 2\n0 1\n1 2\n3 0 1\n0 2\n0 1\n1 2\n3 0 1\n0 2\n0 1\n1 2\n''') == '18'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2\n2 5\n2 3\n1 3''') == 'RRRLL'\nassert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'RRLLRLRRRLRRLL'\nassert solution('''1\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'impossible'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2') == 'LLRRRRLL'\nassert solution('5\\n2 5') == 'LLRRRRLL'\nassert solution('5\\n2 3') == 'LLRLR'\nassert solution('5\\n1 3') == 'LLRLR'\nassert solution('5\\n3 5') == 'LLRLR'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"LLRRRRLL\"\nassert solution(\"6\") == \"LLRLLRRRLL\"\nassert solution(\"7\") == \"LRRLLRLLRL\"\nassert solution(\"8\") == \"RRLLRRLRLRLL\"\nassert solution(\"9\") == \"RLLRLLRLRLRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LRLLRRLL'\nassert solution('''\n4\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n4\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LRLLRRLL'\n'''"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n\"\"\"\n) == \"LLRRRRLL\"\nassert solution(\n\"\"\"\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n\"\"\"\n) == \"LLRRRRLL\"\nassert solution(\n\"\"\"\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n\"\"\"\n) == \"impossible\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"LLRRRRLL\"\nassert solution(\"1\") == \"LLRLRLLL\"\nassert solution(\"2\") == \"LLRRRLRL\"\nassert solution(\"3\") == \"LLRRRRLL\"\nassert solution(\"4\") == \"LLRLRLRL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'LLRRRRLL'\nassert solution('''5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3''') == 'LLRLRRLR'\nassert solution('''6\n1 2\n3 5\n2 3\n1 3\n3 4\n2 4\n2 5\n2 6''') == 'RRRRLLLLLLRRRRRRRRRRRRLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRLRRRLRRRRRRRRRRRRRRRRRRRRLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n2 3\n5 1\n4 1\n2 3\n3 1\n3 2\n5 1\n''') == 'LLRLRRRLL'\nassert solution('''\n10\n2 5\n2 4\n4 3\n6 7\n5 1\n3 2\n8 1\n7 4\n8 2\n7 7\n3 5\n3 2\n3 7\n6 7\n7 4\n7 7\n''') == 'RRLLRLLLLRLRLLRRLLRLRRLLRRRLRRRRRRRLRRLRLLRLLRLLRLLRRRLRRLRLRRRRRLLRRLLRRLLRLLRRLLRRLRLRLRLRLLRLLRLRRRLRRLRLRLRRRLLRRLLRRLRRRLRRLRRLRLRLRRLLRRLRLRLRRRRRRLLRLRLRLRLRRRRRRRRRLRLLRLRRRRRLRLLRLRLRLRRRLLRLRLRLRLRLRLLRLLRLLRRRLLRLRRLRLRRLRLRLRLRLRLLLLLLRRLRLRRLRLRLRLRLLLLLLLLRRLRLLRRLLRLLRRLRRRRLLRLRLRRLLRRLLRLRLRLRLRRRLRLRLRLRLRLRRLLRRRLRLRLRLRLRRLRLLRRLLRLLRRRLLRRLRLRLRRLLRLLRLRLRLRLLRRLRRLRRRLRLLRLRLRLRLRLRLLRRRRLLRRRLLRRRLRRLLRLLRLRLRLRRLLRLRLRRRLRRRRRLLRRLRLRLRRRLRLRLRLRRRRLLRLRLRLRLRRRRRLRLRRRRRRRLLRLLRLRLRLRLLRLRLRLRLLRLRLLLLRLRRRLRLRLRLRLRRRLLRLRLLRRRRRRLLRLLRLRLRLRLRLLRLRLRLRLRLLRLRLLRLLRRLRLLRLRLRLRLRLLRLRLRRLRLLRLRRRLLRLLRLRLRLRLLRLRLRLRLRLLRLRLRLRLRLLRLRLRLRLLLLRRLRRRRRLLRLLRLRLRLRLRLLRLRLRLRLRLLRLRLRLRLRLLRLLRRLRLRLRLLRLRLRLRLLLLRLRLRLRLRLLRLRLRLRLLLRLRRLLRRLRLRLRLRLRLLRLRLRLRLRLRLLRLRLRLRLRLRLLRLRLRLRLRLLRLLLRRLLRRLRLRLRLRLLRLRLRLRLRLLRRLRRLRLRLLRLLLRRLLRLLRLRLRLRLRLLRLRLRLRLRLLRLLRRLRRLRLRLRLRLRLLRRLLLRRRRRLRLRLRLRLRLLRRLLLRRRLRLRLRLRLRLRLRLRLLRLRLRLRLRLLRLRLRLRLRLLRLLRRLLRRRRLRLRLRLRLRLLRRLLRRLRLRLRLRLRLRLRLLRLRLRLRLRLLRLRLRLRLRLRLLRLLLRRRRLRLRLRLRLRLLRLRLRLRRRLLRLRLRLRRRLLRLLRLRLRLRLLRRLLLRRRLRLRLRLRLRLRLLRLRLRLRLRLLLRRRLLRRLRLRLRLRLLRLRLRLRLLRLLRRLRLRRRRRLRLRLRLRLRLLRLRLRLRLRLLRRLLLRRRRRRRLRLRLRLRLLRRLRRLRLLRLRLRLRLLRLRLRLRLRRLLLRRRRRRRLRLRLRLRLLRLRLRLRLLLRRLLRRLRLRLRLRLRLRLLRLRLRLRRRLLRLRLRLRRLLRLRLRLRLRLLRLRLRLRRRRLLRLRLRLRLRLLRLLLRRLLLLRRLRLRLRLRLRLLRLRLRLRRLLLRRLLRRLRLRLRLRLRLLRLLRRLRLLLRRRLRLRLRLRLLLLRRLRRRLLRRLRRLRLRLRLRLLLLRRRRLRLLRRRLLRRLLRLRLRRRLRLLRLLRRLRRRRRRLRLRLRLRLRLLLRRLLRRLRRLLRLRLRLRLRLLRLRLLLRRRRLRLRLRRLLLLRLLRRRRRRRLRLRLRLRLRLLLLLLRRLLRRLRLRLRLRLLLLLLRRLRLRLLRLLLLRRRLRLRLRRLRLLRLLRLLLLLLRLLRRLRLRLRLRLLLRRLLRLRRLLLRRRLRLRLRLLRRLRLRRRLLLRRRRRRLRLRLRLRLRLLLLRRLRRLLLLRRLRLRLRLRLLLRRLLLRRLLRRLRLRLRLRLRLLLRRLLRRLRLLRRLRLRLRLLLLLLRLLLRRRRLLRLLRRRRRLLLLRRRLLLLLRRLLRLLRLLRLRLRLRLLRRLRLLRLRLLLRRRRLLLLRRRRRRLRLRLRLLLRRLLLRRRRLLRRRRRRLLRLRLRLRLRLLLRRRLRRRLLLLLRRRRRLLRLLRRLRLLRRLLRLLRLRRRRRRLLLLRLRLRLRLLRRLRLLLRRRRRRRRRRLLRRLRLRLRLRRLLLLLLRLLRRRLLRRLRLRRRRRLLLRLRRRRRRRRLLRRLRLRLRRRLRLRLRLRLLLLLRRLLRLLRRLRLRLRLLLLLRRLLLLLRRRRLLLLRRLLRLLLRLRRRRLLLLLRLRRLLRRLRLLRLRLRLRRRLLLLRLLRLLRRLLRLRRRLLLLLLRLLRRLRLLLLLLRLLRRRLRLRRLRRRLRRLRLLLRRLLRLLLRRRRLLRRLRRLRLRLRRRRLLLLLRRRRRLLRLRLRLRLRLLRLLRRLRLLRLRLRLRLLLRRRRRRLRRLRRLRLRLLLLRLLRLLLLRRRLRLRRLRLRRLRLRRRLRLLRLLRLRRLLRLLRRRRRRRLLLRLRLRLRLRLLLRRRRLLRRRRLRLRLRLRLRLLLLLRRLLRRRRLLLRLRLRLRLRLLLRRLLRLLLLRRLLRLRLRLRLRLRLLLRRLLLLLRRRLRLRLRLR"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\nprint(\"Solution: {}\".format(solution(input())))\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n1001\n1019\n1013\n1003\n1009\n1017\n1001\n1017\n1009\n''') == '1\\n1001\\n'\nassert solution('''\n6\n1001\n1019\n1001\n1019\n1003\n1003\n1009\n''') == '1\\n1001\\n1019\\n'\nassert solution('''\n10\n1001\n1019\n1013\n1003\n1009\n1017\n1001\n1017\n1009\n''') == '0\\n'\nassert solution('''\n5\n1001\n1019\n1013\n1003\n1009\n''') == '1\\n1001\\n'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\nassert solution(\"2\\n1001 1009\\n1017 2011\") == \"2\\n2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('1') == '2'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1019\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n\"\"\") == \"0 3\"\nassert solution(\"\"\"\n5 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n3 4\n\"\"\") == \"0 1 2 3 4\"\nassert solution(\"\"\"\n1 2\n0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 8\n1 1 100\n2 1 100\n3 2 100\n3 3 100\n4 3 100\n5 2 100\n6 5 100\n5 5 100\n\"\"\") == \"1 4 5\"\nassert solution(\"\"\"\n3 1\n1 1 100\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '0 1 2 3', \"Example\"\n\nassert solution('4 4') == '0 3', \"One shortest path\"\n\nassert solution('5 4') == '1 2 3 4 5', \"All stations\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3') == '0 3'\nassert solution('10 10\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n3 4 100\\n4 5 100\\n5 6 100\\n6 7 100\\n7 8 100\\n8 9 100\\n9 10 100\\n') == '0 3'\nassert solution('15 10\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n3 4 100\\n4 5 100\\n5 6 100\\n6 7 100\\n7 8 100\\n8 9 100\\n9 10 100\\n') == '8 9'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n\"\"\") == \"0 3\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0 3'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '2 3'\nassert solution('4\\n4\\n4\\n4') == '4'\nassert solution('5\\n4\\n4\\n4\\n3') == '4 3'\nassert solution('10\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2 3'\nassert solution('2 1') == '2'\nassert solution('1 4') == '4'\nassert solution('3 3') == '1 2'\nassert solution('10 10') == '10 10'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n\"\"\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '0 3'\n\n\"\"\""
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_sample_01) == \"20\"\nassert solution(input_sample_02) == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1.0 10.0\") == \"20\"\nprint(\"Tests Successful\")"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nassert solution('2.0 10.0\\n3 3 0 0\\n2001 1000 100\\n1001 10000 200\\n100 0 0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('3 3 0 0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\"\"\") == \"20\"\n\nassert solution(r\"\"\"2.0 2.0\n1 1 0 0\n0 0 0\"\"\") == \"1.0\"\n\nassert solution(r\"\"\"2.0 2.0\n0 0 0 0\n0 0 0\"\"\") == \"1.0\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n4 2 3 5 4\\n6 5 4 1 3 1\\n1 1 2 3 4 5\\n2 1 2 3 4 5\\n3 3 3 3 3 3') == '4'\nassert solution('7\\n4 2 3 5 4 5 5 5\\n6 6 5 4 1 3 1\\n1 1 2 3 4 5 5\\n2 1 2 3 4 5 5\\n3 3 3 3 3 3 3') == '6'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('6\\n0 1 2 3 4 5 6\\n0 2 1 3 4 5 6\\n0 3 1 4 2 5 6\\n0 4 1 2 3 5 6\\n0 5 1 4 3 2 6\\n0 6 1 5 2 4 3\\n') == '4'\nassert solution('6\\n0 1 2 3 4 5 6\\n0 2 3 4 5 6 7\\n0 3 4 5 6 7 8\\n0 4 5 6 7 8 9\\n0 6 7 8 9 10 11\\n0 7 8 9 10 11 12\\n') == '3'\nassert solution('6\\n0 1 2 3 4 5 6\\n0 2 3 4 5 6 7\\n0 3 4 5 6 7 8\\n0 4 5 6 7 8 9\\n0 6 7 8 9 10 11\\n0 7 8 9 10 11 12\\n0 8 9 10 11 12 13\\n') == '2'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n1 2 3\\n1 1 2\\n2 1 2 3\") == \"4\"\nassert solution(\n    \"5\\n1 2 3 4 5\\n1 6 5 4 2 1\\n1 1 2 3 4 6\\n2 6 5 3 2 1\\n1 1 2 3 4 6\") == \"4\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n0 2 3 4 5\n0 1 3 4 5\n1 6 5 4 2\n2 6 5 3 2\n1 1 2 3 4\n2 1 2 3 4\n''') == '4'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\nassert solution('''\n3\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '3'\nassert solution('''\n2\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '2'\n'''"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '4'\nassert solution('4 3') == '4'\nassert solution('5 1') == '5'\nassert solution('5 1 2 3 4') == '7'\nassert solution('5 1 2 3 4 5') == '7'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2 3 4') == '4'\nassert solution('2 3 4 5') == '5'\nassert solution('3 4 5 6') == '6'\nassert solution('4 5 6 7') == '7'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 2 3 4') == '5'\nassert solution('2 3 4 5 6') == '7'\nassert solution('3 4 5 6 7') == '7'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '5'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7''') == '4'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7''') == '4'\nassert solution('''6\n1 1 2 3 4 5\n3 5 6 7 8\n2 4 6 8 9\n4 7 9 8''') == '8'\nassert solution('''11\n1 1 2 3 4 5\n3 5 6 7 8 9\n2 4 6 8 9 10\n4 7 9 8 11''') == '11'\nassert solution('''1\n1 2\n2 3\n3 4''') == '1'\nassert solution('''1\n1 2\n2 3\n3 4\n4 5''') == '2'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 1\nassert solution('2') == 0\nassert solution('3') == 0\nassert solution('4') == 4\nassert solution('5') == 3\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7\\n5 6 7 8') == \"4\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7''') == '4'\nassert solution('''5\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7 8''') == '5'\nassert solution('''10\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7 8 9\n5 5 6 7 8 9 10''') == '9'\nassert solution('''20\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7 8 9\n5 5 6 7 8 9 10 11\n6 6 7 8 9 10 11 12''') == '11'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n') == '6'\n\nassert solution('15\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 3.1\\n6.0 3.1\\n7.0 3.1\\n8.0 3.1\\n9.0 3.1\\n10.0 3.1\\n11.0 3.1\\n12.0 3.1\\n13.0 3.1\\n14.0 3.1\\n15.0 3.1\\n16.0 3.1\\n17.0 3.1\\n18.0 3.1\\n19.0 3.1\\n20.0 3.1\\n\\n20\\n2.0 1.0\\n3.1 1.0\\n2.0 3.1\\n2.5 3.1\\n3.1 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4.0 3.1\\n4"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"6\""
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('2\\n1.5 1.0\\n5.1 1.0\\n1.5 5.1\\n4.5 5.1') == '7'\nassert solution('10\\n1.0 1.0\\n2.5 1.0\\n2.5 2.5\\n5.1 1.0\\n7.5 7.5\\n8.0 8.0\\n8.0 7.5\\n5.5 7.5\\n2.5 5.5\\n3.5 3.5\\n3.5 3.5\\n2.5 3.5\\n2.5 2.5\\n3.5 3.5') == '12'"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\nassert solution('''\n5\n2.6 2.6\n3.4 3.4\n1.5 1.5\n3.4 3.4\n2.6 3.4\n''') == '6'\nassert solution('''\n5\n1.1 1.1\n2.3 2.3\n3.4 3.4\n4.6 4.6\n5.9 5.9\n''') == '6'\nassert solution('''\n3\n3.1 3.1\n3.2 3.2\n3.3 3.3\n4.4 4.4\n5.5 5.5\n''') == '6'\nassert solution('''\n1\n2.4 2.4\n3.3 3.3\n4.5 4.5\n5.6 5.6\n''') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"6\"\nassert solution(\"\") == \"6\"\nassert solution(\"1\") == \"6\"\nassert solution(\"1\\n1\\n1\") == \"6\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6', 'First'\nassert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '5', 'Second'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '3'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2\n2\n1\n1\n4\n''') == '5'\n\nassert solution('''3\n3\n3\n2\n2\n''') == '4'\n\nassert solution('''5\n1\n1\n2\n2\n2\n2\n''') == '7'\n\nassert solution('''5\n1\n1\n2\n3\n2\n2\n2\n3\n1\n2\n''') == '5'\n\nassert solution('''5\n1\n1\n2\n3\n2\n3\n1\n2\n2\n''') == '7'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n2\") == \"5\"\nassert solution(\"3\\n2\\n2\\n2\\n1\\n1\") == \"4\"\nassert solution(\"3\\n2\\n3\") == \"2\""
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n2') == '3'\nassert solution('3\\n2\\n2') == '5'\nassert solution('3\\n2\\n2\\n') == '1'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\n2\\n') == '4'\nassert solution('3\\n2\\n3\\n2\\n') == '4'\nassert solution('5\\n1\\n2\\n3\\n4\\n') == '3'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n2\\n2\\n') == '5\\n'\nassert solution('1\\n') == ''\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '2'\nassert solution('3') == '4'\nassert solution('4') == '5'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n2\n''') == '5'\nassert solution('''3\n2\n2\n''') == '7'\nassert solution('''3\n2\n4\n''') == '10'\nassert solution('''2\n5\n''') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\\\n3\n2\n2\n\"\"\") == \"2\"\nassert solution(\"\"\"\\\n4\n1\n3\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\\\n6\n3\n3\n1\n1\n3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 2 2') == '1 1'\nassert solution('3 6 4 5') == '2 2'\n'''\n\nimport math"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\nassert solution('''\n1 2\n2 2 2 1\n''') == '0 0'\nassert solution('''\n1 1\n1 1\n''') == '0 0'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('1 3\\n2 2 2 0') == '1 2'\n'''\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '1 1'\nassert solution('2 2 2 1') == '1 1'\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestThis(unittest.TestCase):\n    def test_first_example(self):\n        with StringIO('''\n            1 3\n            2 2 2 1\n            ''') as buf:\n            sys.stdin = buf\n            solution()\n            sys.stdin = sys.__stdin__\n            self.assertEqual(buf.getvalue(), '1 1\\n')\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n2 2 2 1\n''') == '1 1'\n\n'''\n---Input---\n2 3\n2 2 2 1\nSample Output:\n1 1\n'''\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('3 4\\n4 5 3 3') == '3 4'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 3\\n\"\n    \"2 2 2 1\\n\"\n) == \"1 1\"\n\nassert solution(\n    \"1 4\\n\"\n    \"2 2 3 4\\n\"\n) == \"1 1\""
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('2 3\\n2 2 2 1') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2 3\n\"\"\") == \"1 2 3\"\n\nassert solution(\"\"\"\n1 2 5\n\"\"\") == \"2 3\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 3\n2 2 2 1''') == '1 1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\") == \"10\"\nassert solution(\"1\\n3\") == \"10\"\nassert solution(\"1\\n4\") == \"10\"\nassert solution(\"1\\n7\") == \"10\"\nassert solution(\"1\\n8\") == \"10\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '8'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('4') == '8'\nassert solution('5') == '9'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nassert solution('1') == '1'\nassert solution('10') == '10'\nassert solution('3') == '1'\nassert solution('2') == '4'\n\n'''\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '12'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '1'\nassert solution('55') == '12'\nassert solution('43') == '12'\nassert solution('32') == '1'\nassert solution('1') == '10'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n1\n1\n1\n1''') == '10'"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('3\\n4') == '3'\nassert solution('4\\n5') == '2'\nassert solution('10\\n2') == '10'"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '10'\nassert solution('1 2') == '10'\nassert solution('1 2 3') == '10'\nassert solution('1 2 3 4') == '10'\nassert solution('1 2 3 4 5') == '10'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 2 1\\n0 1 2\\n1 1000 1\") == \"0.001\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2\n1000 1 0\n1 1000 1''') == '0.001'\nassert solution('''\n1\n1 1\n1 1 1\n''') == '0.0001'\nassert solution('''\n2\n1 1\n2 2\n''') == '0.0002'\nassert solution('''\n3\n1 1 1\n2 2 2\n3 3\n''') == '0.0012'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n2 3\n1 2 3\n1 3 1\n''') == '0.0003'\nassert solution('''\n1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0.0018\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1000 1 0') == '0.001'\nassert solution('1 1000 1') == '0.0'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n1 2\n1000 1 0\n0 1000 1\n''') == '0.001'\nassert solution('''\n1 2\n1000 1 0\n0 1000 1\n1 1000 1\n''') == '0.001'\nassert solution('''\n1 2\n1000 1 0\n0 1000 1\n1 1000 1\n0 1000 1\n0 1000 1\n0 1000 1\n''') == '0.001'\nassert solution('''\n1 2\n1000 1 0\n1 1000 1\n0 1000 1\n1 1000 1\n0 1000 1\n0 1000 1\n''') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2\n1000 1 0\n1 1000 1\n\"\"\") == \"0.001\"\nassert solution(\"\"\"\n1 5\n1000 1 1 1\n1 1000 1 1\n1 1000 1 1\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n2 2\n1000 1 1 1\n1 1000 1 1\n\"\"\") == \"0.25\"\nassert solution(\"\"\"\n2 5\n1000 1 1 1 1\n1 1000 1 1 1\n1 1000 1 1 1\n\"\"\") == \"0.11\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n1 2\n1000 1 0\n1 1000 1\n1 10 1\n''') == '0.001'\nassert solution('''\n1 2\n1000 1 0\n1 1000 1\n1 10 1\n1 0 1\n''') == '0.0009'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1000 1 0') == '0.005'\nassert solution('1 1000 1') == '0.001'"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('5 2 5 100') == '4'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3 2 10000\n1 2\n2 3\n3 1\nSample Output:\n0''') == '0', 'Your function is incorrect. Your code produced: {}'.format(solution('''5 3 2 10000\n1 2\n2 3\n3 1\nSample Output:\n0'''))\nassert solution('''1 1\n1\nSample Output:\n1''') == '1', 'Your function is incorrect. Your code produced: {}'.format(solution('''1 1\n1\nSample Output:\n1'''))"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\nassert solution('6 6 4 10000\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5') == '2'\nassert solution('6 6 4 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5') == '3'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1\\n') == '0'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == '0'\nassert solution(\"5 5 5 5\\n1 2\\n2 4\\n4 2\\n3 6\\n6 3\\n5 4\\n4 1\\n1 5\") == '1'\nprint('Done!')\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2 2 10000\") == \"0\"\nassert solution(\"5 4 2 10000\") == \"1\"\nassert solution(\"3 3 2 10000\") == \"2\"\nassert solution(\"5 2 3 10000\") == \"2\"\nassert solution(\"7 2 3 10000\") == \"3\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\") == \"0\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 10000\\n1 2\\n2 3\") == \"0\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 1') == '0'"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '10'\nassert solution('15') == '13'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n') == '26'\nassert solution('8\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\\n') == '46'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3 2\\n1 3\\n4 2\\n0') == '26'\nassert solution('1\\n3 2\\n1 3\\n1 2\\n0') == '26'\nassert solution('2\\n0 1\\n1 1\\n0') == '1'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\n\nassert solution('5\\n0 1 1 1 1\\n1 0 2 2 2\\n1 2 0 3 3\\n1 2 3 0 2\\n1 2 3 1 0') == '30'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '13'\nassert solution('1') == '6'\n'''\nclass Solution:\n    def maxSizeSubmatrix(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        if n == 0:\n            return 0\n        m = len(matrix[0])\n        d = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                d[i][j] = matrix[i - 1][j - 1] + d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n        res = 0\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                for k in range(1, n + 1):\n                    for l in range(1, m + 1):\n                        if i == k and j == l:\n                            continue\n                        res = max(res, d[i][j] - d[k][l])\n        return res % (10 ** 9 + 7)"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n\"\"\") == \"26\"\nassert solution(\n\"\"\"\n3\n0 0 0\n0 0 0\n0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '26'\nassert solution([\n    [0, 1, 1, 1],\n    [1, 0, 2, 2],\n    [1, 2, 0, 3],\n    [1, 2, 3, 0],\n]) == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '26'"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '0.333333333'\nassert solution('20 20 20 40') == '0.666666667'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.33333333333\\n0.66666666667\\n'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '0.33333333'\nassert solution('3 3') == '0.05'\nassert solution('10 10') == '0.0'\nassert solution('5 10') == '0.0'\nassert solution('5 2') == '0.25'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n20 20 20 40\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n.X\n."
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n20 20 20 40\n.X.\nT.T\n''') == '0.333333333 0.666666667'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"20 20 20 40\\n\"\n    \"X.X\\n\"\n    \"T.T\\n\"\n    ) == \"0.333333333\"\n\nassert solution(\n    \"3 2\\n\"\n    \"20 20 20 40\\n\"\n    \"X.X\\n\"\n    \"X.X\\n\"\n    \"T.T\\n\"\n    ) == \"0.33333333\"\n\nassert solution(\n    \"3 2\\n\"\n    \"20 20 20 40\\n\"\n    \"X.X\\n\"\n    \"X.X\\n\"\n    \"X.X\\n\"\n    \"T.T\\n\"\n    ) == \"0.33333333\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n20 20 20 40\n.X\n.T\n''') == '0.333333333'\n\nassert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.66666667'\n\nassert solution('''\n3 2\n20 20 20 40\n.X\n.T\n''') == '0.5'\n\nassert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.666666667'\n\nassert solution('''\n3 2\n20 20 20 40\n.X\n.X\n''') == '0.33333333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 10 20 20 40') == '0.333333333'\nassert solution('10 10 20 20 40') == '0.333333333'\nassert solution('3 3 20 20 40') == '0.333333333'\nassert solution('3 3 20 20 40') == '0.333333333'\n'''\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 5 0 0\") == \"0.375\"\nassert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"10 10 0 0\") == \"0.625\"\nassert solution(\"10 0 0 0\") == \"0.0\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''45 45 0 0\n0 0 1 1\n''') == '0.75'\nassert solution('''45 45 0 0\n1 1 1 1\n''') == '0.75'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.45 0.0 0.0 0.0') == '0.75'\nassert solution('45 45 0 0') == '0.75'\nassert solution('0 0 0 0') == '1'\nassert solution('0 0 0 45') == '0.75'\nassert solution('45 0 0 45') == '0.375'\n\"\"\"\nfrom math import pi\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n12\n5.5\n12.7\n6.7\n12.2\n\"\"\") == \"0.25\"\nassert solution(\"\"\"\n30\n15\n25\n26\n10.5\n\"\"\") == \"0.09\"\nassert solution(\"\"\"\n100\n100\n100\n100\n\"\"\") == \"0.00\"\nassert solution(\"\"\"\n45\n45\n45\n45\n\"\"\") == \"0.00\"\nassert solution(\"\"\"\n45\n45\n45\n45\n\"\"\") == \"0.00\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.99 0.01') == '0.97'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nprint(solution(input()))\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0.0045\") == \"0.750000\"\n\"\"\"\nfrom math import pi"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('45 45 0 0') == '0.75'\n\nassert solution('90 90 0 0') == '0.0'\n\nassert solution('135 45 0 0') == '0.25'\n\nassert solution('180 45 0 0') == '0.5'\n\nassert solution('225 45 0 0') == '0.75'"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3 3 0''') == '0.75'\nassert solution('''25 25 15 0''') == '1.0'\nassert solution('''0 0 0 0''') == '0.0'\nassert solution('''0 0 0 0''') == '1.0'\nassert solution('''10 0 0 0''') == '1.0'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('120 4 5 5') == '0.08333333333333333'\nassert solution('10 12 6 4') == '0.3125'\nassert solution('0 0.1 0.1 0.1') == '0.14285714285714286'\nassert solution('0 0.5 0.5 0.5') == '0.0625'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\nassert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '5'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '4'\nassert solution('5 9') == '0'\nassert solution('7 4') == '0'\n\n'''\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n3 2\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n\"\"\"\n) == \"4\""
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n') == '4'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n\nassert solution('''\n5 7\n0 1 2\n0 3 7\n1 3 5\n2 3 7\n3 2 2\n2 5 1\n3 3 8\n''') == '11'\n\nassert solution('''\n100 5\n0 1 2\n0 3 8\n1 3 5\n2 3 7\n3 2 2\n2 5 1\n3 3 8\n''') == '7'\n'''"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9''') == '4'\nassert solution('''6\n8\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n0 2\n4 1''') == '11'\n'''"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''\n5 10\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n3 4 5\n3 5 8\n3 6 9\n3 7 10\n4 5 7\n4 6 9\n5 7 10\n5 8 9\n6 7 10\n6 8 9\n7 9 10\n7 8 10\n''') == '6'\nassert solution('''\n5 7\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n3 4 5\n3 5 8\n3 6 9\n3 7 10\n4 5 7\n4 6 9\n5 7 10\n5 8 9\n6 7 10\n6 8 9\n7 9 10\n7 8 10\n''') == '10'\nassert solution('''\n1 10\n0 2 4\n1 3 4\n2 3 5\n2 4 2\n4 4 6\n4 5 9\n5 5 10\n5 6 9\n5 7 10\n5 8 10\n6 7 10\n6 8 10\n7 9 10\n7 8 10\n8 9 10\n8 8 10\n''') == '12'\nassert solution('''\n1 10\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n3 4 5\n3 5 8\n3 6 9\n3 7 10\n4 5 7\n4 6 9\n5 7 10\n5 8 9\n6 7 10\n6 8 9\n7 9 10\n7 8 10\n''') == '14'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"4\"\nassert solution(\"6 5\") == \"1\"\nassert solution(\"2 4\") == \"0\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\\n\") == \"4\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"100\""
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '100'\nassert solution('2') == '999'\nassert solution('3') == '999'\nassert solution('4') == '999'\nassert solution('5') == '999'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n10 10 0 5\n''') == '100'\nassert solution('''\n2\n1 1 1 0\n''') == '1'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '100'\nassert solution('1\\n5') == '500'\nassert solution('10\\n10 0 5') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '100'\nassert solution('2') == '150'\nassert solution('3') == '200'\nassert solution('4') == '250'\nassert solution('5') == '250'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n10 0 5\n''') == '100'\nassert solution('''\n10\n0 5\n''') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '10'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 10 0 5\n10 20 0 5\n10 30 0 5\n10 40 0 5\n10 50 0 5\n10 60 0 5\n10 70 0 5\n10 80 0 5\n10 90 0 5\n10 100 0 5\n10 110 0 5\n10 120 0 5\n10 130 0 5\n10 140 0 5\n10 150 0 5\n10 160 0 5\n10 170 0 5\n10 180 0 5\n10 190 0 5\n10 200 0 5\n10 210 0 5\n10 220 0 5\n10 230 0 5\n10 240 0 5\n10 250 0 5\n10 260 0 5\n10 270 0 5\n10 280 0 5\n10 290 0 5\n10 300 0 5\n10 310 0 5\n10 320 0 5\n10 330 0 5\n10 340 0 5\n10 350 0 5\n10 360 0 5\n10 370 0 5\n10 380 0 5\n10 390 0 5\n10 400 0 5\n10 410 0 5\n10 420 0 5\n10 430 0 5\n10 440 0 5\n10 450 0 5\n10 460 0 5\n10 470 0 5\n10 480 0 5\n10 490 0 5\n10 500 0 5\n10 510 0 5\n10 520 0 5\n10 530 0 5\n10 540 0 5\n10 550 0 5\n10 560 0 5\n10 570 0 5\n10 580 0 5\n10 590 0 5\n10 600 0 5\n10 610 0 5\n10 620 0 5\n10 630 0 5\n10 640 0 5\n10 650 0 5\n10 660 0 5\n10 670 0 5\n10 680 0 5\n10 690 0 5\n10 700 0 5\n10 710 0 5\n10 720 0 5\n10 730 0 5\n10 740 0 5\n10 750 0 5\n10 760 0 5\n10 770 0 5\n10 780 0 5\n10 790 0 5\n10 800 0 5\n10 810 0 5\n10 820 0 5\n10 830 0 5\n10 840 0 5\n10 850 0 5\n10 860 0 5\n10 870 0 5\n10 880 0 5\n10 890 0 5\n10 900 0 5\n10 910 0 5\n10 920 0 5\n10 930 0 5\n10 940 0 5\n10 950 0 5\n10 960 0 5\n10 970 0 5\n10 980 0 5\n10 990 0 5\n10 1000 0 5\n10 1010 0 5\n10 1020 0 5\n10 1030 0 5\n10 1040 0 5\n10 1050 0 5\n10 1060 0 5\n10 1070 0 5\n10 1080 0 5\n10 1100 0 5\n10 1110 0 5\n10 1120 0 5\n10 1120 0 5\n10 1130 0 5\n10 1140 0 5\n10 1150 0 5\n10 1160 0 5\n10 1170 0 5\n10 1180 0 5\n10 1190 0 5\n10 1200 0 5\n10 1210 0 5\n10 1220 0 5\n10 1230 0 5\n10 1240 0 5\n10 1250 0 5\n10 1260 0 5\n10 1270 0 5\n10 1280 0 5\n10 1290 0 5\n10 1300 0 5\n10 1310 0 5\n10 1320 0 5\n10 1330 0 5\n10 1340 0 5\n10 1350 0 5\n10 1360 0 5\n10 1370 0 5\n10 1380 0 5\n10 1390 0 5\n10 1400 0 5\n10 1410 0 5\n10 1420 0 5\n10 1430 0 5\n10 1440 0 5\n10 1450 0 5\n10 1460 0 5\n10 1470 0 5\n10 1480 0 5\n10 1490 0 5\n10 1500 0 5\n10 1510 0 5\n10 1520 0 5\n10 1530 0 5\n10 1540 0 5\n10 1550 0 5\n10 1560 0 5\n10 1570 0 5\n10 1580 0 5\n10 1590 0 5\n10 1600 0 5\n10 1610 0 5\n10 1620 0 5\n10 1630 0 5\n10 1640 0 5\n10 1650 0 5\n10 1660 0 5\n10 1670 0 5\n10 1680 0 5\n10 1690 0 5\n10 1700 0 5\n10 1710 0 5\n10 1720 0 5\n10 1730 0 5\n10 1740 0 5\n10 1750 0 5\n10 1760 0 5\n10 1770 0 5\n10 1780 0 5\n10 1790 0 5\n10 1800 0 5\n10 1810 0 5\n10 1820 0 5\n10 1830 0 5\n10 1840 0 5\n10 1850 0 5\n10 1860 0 5\n10 1870 0 5\n10 1880 0 5\n10 1890 0 5\n10 1900 0 5\n10 1910 0 5\n10 1920 0 5\n10 1930 0 5\n10 1940 0 5\n10 1950 0 5\n10 1960 0 5\n10 1970 0 5\n10 1980 0 5\n10 1990 0 5\n10 2000 0 5\n10 2010 0 5\n10 2020 0 5\n10 2030 0 5\n10 2040 0 5\n10 2050 0 5\n10 2060 0 5\n10 2070 0 5\n10 2080 0 5\n10 2090 0 5\n10 2100 0 5\n10 2110 0 5\n10 2120 0 5\n10 2140 0 5\n10 2150 0 5\n10 2160 0 5\n10 2170 0 5\n10 2180 0 5\n10 2190 0 5\n10 2200 0 5\n10 2210 0 5\n10 2220 0 5\n10 2240 0 5\n10 2260 0 5\n10 2280 0 5\n10 2290 0 5\n10 2300 0 5\n10 2310 0 5\n10 2320 0 5\n10 2330 0 5\n10 2340 0 5\n10 2350 0 5\n10 2360 0 5\n10 2370 0 5\n10 2380 0 5\n10 2390 0 5\n10 2400 0 5\n10 2410 0 5\n10 2420 0 5\n10 2430 0 5\n10 2440 0 5\n10 2450 0 5\n10 2460 0 5\n10 2470 0 5\n10 2480 0 5\n10 2490 0 5\n10 2500 0 5\n10 2510 0 5\n10 2520 0 5\n10 2530 0 5\n10 2540 0 5\n10 2550 0 5\n10 2560 0 5\n10 2570 0 5\n10 2580 0 5\n10 2590 0 5\n10 2600 0 5\n10 2610 0 5\n10 2620 0 5\n10 2630 0 5\n10 2640 0 5\n10 2650 0 5\n10 2660 0 5\n10 2670 0 5\n10 2680 0 5\n10 2690 0 5\n10 2700 0 5\n10 2710 0 5\n10 2720 0 5\n10 2730 0 5\n10 2740 0 5\n10 2750 0 5\n10 2760 0 5\n10 2770 0 5\n10 2780 0 5\n10 2790 0 5\n10 2800 0 5\n10 2810 0 5\n10 2820 0 5\n10 2830 0 5\n10 2840 0 5"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('2\\n3 2 0 4\\n7 3 2 0 5') == '5'\nassert solution('3\\n3 2 0 4\\n4 6 2 0 5') == '5'\nassert solution('3\\n3 2 0 4\\n5 5 2 0 5') == '5'\nassert solution('4\\n10 10 0 5\\n20 10 0 5\\n30 10 0 5\\n40 10 0 5') == '110'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n2\n0 3 2\n1 4 1\n2 3 4\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n') == '1'\nassert solution('1\\n2 2 3\\n4 5 5\\n5 7 6 8\\n') == '0'\nassert solution('6\\n0 0 2 3\\n1 1 3 4\\n5 7 6 8\\n9 0 1 2\\n10 10 1 3\\n9 9 1 4\\n8 8 2 3\\n7 7 2 4\\n6 6 2 5\\n') == '0'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1 2 3\n1 4 5\n''') == '1', 'first'\n\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1','second'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1 1 3 4') == '1'\nassert solution('5\\n7 6 8 3 2') == '1'\nassert solution('100\\n1 1 3 4\\n2 5 6 8\\n2 2 1 4') == '0'\nassert solution('5\\n7 6 8 2 4\\n1 1 3 4\\n5 5 6 6\\n2 2 1 4\\n3 2 3 4') == '1'"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\n0 0 0 0 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 2 3 2\\n5 5 5 5\\n8 7 7 8') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '1'\nassert solution('''\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\nassert solution('''\n2\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\nassert solution('''\n2\n0 0 2 2\n1 1 3 4\n5 7 6 8\n''') == '0'\n''')\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5 7 6 8\") == \"1\""
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 2 3\n1 2 3\n-2 -2 -2 -2''') == '11'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'\nassert solution('10 10\\nX X X X X X X\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '13'\nassert solution('10 10\\nX X X X X X X\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S S') == '17'\nassert solution('10 10\\nX X X X X X X\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S S') == '13'\nassert solution('10 10\\nX X X X X X X\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S S') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nprint('solution() finished successfully!')"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''3 2\n2 2 3\n1 1 1\n1 1 1\n''') == '2'\n'''\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'\nassert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n-8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '21'\nassert solution('6 5\\nE E E E E E E E\\n1 2 3 4 5 6 7\\n5 4 3 2 1 2 3 4\\n-2 -2 -2 -2 -2 -2 -2 -2\\n-8 8 8 8 8 8 8 8\\n9 9 9 9 9 9 9 9\\nS S S S S S S S S\\n') == '31'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\nassert solution('5 5') == '5'\nassert solution('E E E E E') == '5'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5') == '17'\nassert solution('1 2 3 4 5') == '17'\nassert solution('5 4 3 2 1') == '17'\nassert solution('-2 -2 -2 -2 -2') == '17'\nassert solution('8 8 8 8 8') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\n\nassert solution('''10\n1 1 1 1 1 1\n2 2 2 2 2 2\n3 3 3 3 3 3\n4 4 4 4 4 4\n5 5 5 5 5 5\n6 6 6 6 6 6\n7 7 7 7 7 7\n8 8 8 8 8 8\n9 9 9 9 9 9\nS S S S S S\n''') == '44'\n\nassert solution('''1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"1 4 3 5 2\"\nassert solution(\"10\") == \"1 6 3 2 9 8 5 4 7 10\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1 4 3 5 2'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"1 4 3 5 2\"\nassert solution(\"3\") == \"1 3 5 2 4\"\nassert solution(\"4\") == \"2 3 5 1 4\"\nassert solution(\"5\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3 2 3 1 1\n''') == '1 4 3 5 2'\nprint(\"You're a smart cookie!\")\nassert solution('''\n8\n5 5 2 5 4 1 5 1\n''') == '2 4 5 5 5 4 1 5 1'\nprint(\"You're a smart cookie!\")"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2', \"Wrong answer for input '5\\n3 2 3 1 1'\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 3 1 1\\n\") == \"1 4 3 5 2\"\nassert solution(\"4\\n3 2 5 1 4\\n\") == \"2 3 5 1 4\"\nassert solution(\"6\\n3 2 5 1 4 6\\n\") == \"1 4 5 6 3\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n5 5 5 5 5\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"9 8 7 6 5 4 3 2 1\"\nassert solution(\"1\\n2\") == \"impossible\"\nassert solution(\"1\\n2\") == \"impossible\"\nassert solution(\"5\\n1 2 3 4\") == \"impossible\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"7\\n2 4 1 3 5 6 8\") == \"7 5 6 8 2 4 1\""
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('5\\n3 10 1\\n1 4\\n10 20 5\\n15 3 2\\n1 2\\n15 10 20') == '0.026978754'\nassert solution('5\\n0 0 1\\n1 4\\n10 20 5\\n15 3 2\\n1 2\\n15 10 20') == '1.0'\n\"\"\""
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2 3 1') == '0.5', 'First'\nassert solution('1\\n2 1 0') == '0.75', 'Second'\nassert solution('1\\n2 0 2') == '0.3333333333333333', 'Third'\nassert solution('2\\n2 4 1') == '0.25', 'Fourth'\nassert solution('1\\n4 2 2') == '0.22222222222222222', 'Fifth'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.76772047'\nassert solution('2') == '0.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.765625'\nassert solution('2') == '0.76772047'\nassert solution('3') == '0.07352941'\nassert solution('4') == '0.0'\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n2 4\n1 4\n''') == '0.75'\nassert solution('''\n3\n1 2\n1 1\n1 2\n''') == '0.5'\nassert solution('''\n3\n3 3\n2 2\n1 2\n''') == '1.0'\nassert solution('''\n3\n2 2\n1 1\n1 2\n''') == '1.0'\nassert solution('''\n4\n3 3\n2 2\n1 2\n''') == '1.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0.76772047'\n\n----\nfor i in range(len(trees)):\n    if trees[i][0] == -1 or trees[i][1] == -1:\n        continue\n    x, y = trees[i][0], trees[i][1]\n    r = trees[i][2]\n    for j in range(3):\n        tx, ty = x+dx[j], y+dy[j]\n        if 0 <= tx < n and 0 <= ty < n:\n            x, y = tx, ty\n            if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                break\n    else:\n        nx, ny = x, y\n        for j in range(3):\n            tx, ty = x + dx[j], y + dy[j]\n            if 0 <= tx < n and 0 <= ty < n:\n                x, y = tx, ty\n                if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                    break\n            else:\n                break\n        else:\n            nx, ny = x, y\n        tx, ty = x, y\n        for j in range(3):\n            tx, ty = x - dx[j], y - dy[j]\n            if 0 <= tx < n and 0 <= ty < n:\n                x, y = tx, ty\n                if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                    break\n            else:\n                break\n        else:\n            nx, ny = x, y\n        if (nx - nx) ** 2 + (ny - ny) ** 2 > (r - r) ** 2:\n            continue\n        else:\n            nx, ny = nx + dx[0], ny + dy[0]\n            if (nx - nx) ** 2 + (ny - ny) ** 2 > (r - r) ** 2:\n                continue\n            else:\n                break\n    print((nx - nx) ** 2 + (ny - ny) ** 2, (x - nx) ** 2 + (y - ny) ** 2, (x - nx) ** 2 + (y - ny) ** 2 + (nx - nx) ** 2 + (ny - ny) ** 2)\n\n-------\nfor i in range(len(trees)):\n    if trees[i][0] == -1 or trees[i][1] == -1:\n        continue\n    x, y = trees[i][0], trees[i][1]\n    r = trees[i][2]\n    for j in range(3):\n        tx, ty = x+dx[j], y+dy[j]\n        if 0 <= tx < n and 0 <= ty < n:\n            x, y = tx, ty\n            if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                break\n    else:\n        nx, ny = x, y\n        for j in range(3):\n            tx, ty = x + dx[j], y + dy[j]\n            if 0 <= tx < n and 0 <= ty < n:\n                x, y = tx, ty\n                if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                    break\n            else:\n                break\n        else:\n            nx, ny = x, y\n        tx, ty = x, y\n        for j in range(3):\n            tx, ty = x - dx[j], y - dy[j]\n            if 0 <= tx < n and 0 <= ty < n:\n                x, y = tx, ty\n                if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                    break\n            else:\n                break\n        else:\n            nx, ny = x, y\n        if (nx - nx) ** 2 + (ny - ny) ** 2 > (r - r) ** 2:\n            continue\n        else:\n            nx, ny = nx + dx[0], ny + dy[0]\n            if (nx - nx) ** 2 + (ny - ny) ** 2 > (r - r) ** 2:\n                continue\n            else:\n                break\n    print((nx - nx) ** 2 + (ny - ny) ** 2, (x - nx) ** 2 + (y - ny) ** 2, (x - nx) ** 2 + (y - ny) ** 2 + (nx - nx) ** 2 + (ny - ny) ** 2)\n    \n---\nfor i in range(len(trees)):\n    if trees[i][0] == -1 or trees[i][1] == -1:\n        continue\n    x, y = trees[i][0], trees[i][1]\n    r = trees[i][2]\n    for j in range(3):\n        tx, ty = x+dx[j], y+dy[j]\n        if 0 <= tx < n and 0 <= ty < n:\n            x, y = tx, ty\n            if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                break\n    else:\n        nx, ny = x, y\n        for j in range(3):\n            tx, ty = x + dx[j], y + dy[j]\n            if 0 <= tx < n and 0 <= ty < n:\n                x, y = tx, ty\n                if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                    break\n            else:\n                break\n        else:\n            nx, ny = x, y\n        tx, ty = x, y\n        for j in range(3):\n            tx, ty = x - dx[j], y - dy[j]\n            if 0 <= tx < n and 0 <= ty < n:\n                x, y = tx, ty\n                if (x - tx) ** 2 + (y - ty) ** 2 > (r - r) ** 2:\n                    break\n            else:\n                break\n        else:\n            nx, ny = x, y\n        if (nx - nx) ** 2 + (ny - ny"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.5'\nassert solution('3') == '0.8'\nassert solution('4') == '0.38'\nassert solution('5') == '0.09'\nassert solution('6') == '0.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n0 1 1\n1 4\n\"\"\") == \"0.76772047\"\n\nassert solution(\"\"\"\n1\n3 0 1\n2 5\n\"\"\") == \"0.0\"\n\nassert solution(\"\"\"\n1\n1 0 0\n3 2\n\"\"\") == \"1.0\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('5\\n2 0 4\\n3 1 1\\n2 1 1\\n0 0 0\\n2 3 1\\n2 3 1\\n1 0 1\\n2 1 1\\n3 1 1\\n2 1 1\\n0 0 0\\n3 1 1\\n2 3 1\\n1 0 1\\n1 2 2\\n1 2 2\\n2 0 2\\n2 2 2\\n1 0 1\\n1 2 2\\n2 2 2\\n2 3 2\\n2 3 2\\n0 0 0\\n3 2 2\\n1 3 2\\n2 3 2\\n2 0 2\\n2 2 2\\n2 2 2\\n2 3 2\\n3 2 2\\n0 0 0\\n2 1 2\\n2 1 2\\n2 1 2\\n2 1 2\\n2 3 2\\n0 0 0\\n2 2 2\\n2 2 2\\n2 2 2\\n2 3 2\\n1 0 1\\n0 0 0\\n0 0 0\\n3 1 1\\n3 1 1\\n3 1 1\\n1 2 2\\n3 2 2\\n3 2 2\\n1 0 1\\n0 0 0\\n2 1 1\\n0 0 0\\n2 1 1\\n0 0 0\\n2 1 1\\n0 0 0\\n2 3 1\\n1 3 1\\n1 3 1\\n0 0 0\\n2 0 2\\n0 0 0\\n1 0 1\\n0 0 0\\n2 0 2\\n0 0 0\\n2 0 2\\n2 0 2\\n0 0 0\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n0 0 0\\n3 1 1\\n3 1 1\\n3 1 1\\n1 0 1\\n0 0 0\\n1 2 2\\n1 2 2\\n1 0 1\\n2 0 2\\n0 0 0\\n2 2 2\\n0 0 0\\n2 1 2\\n1 0 1\\n0 0 0\\n2 1 2\\n1 2 2\\n0 0 0\\n2 1 2\\n1 0 1\\n2 1 2\\n0 0 0\\n2 2 2\\n2 2 2\\n2 0 2\\n2 0 2\\n1 0 1\\n1 1 2\\n2 0 2\\n2 1 2\\n2 0 2\\n2 0 2\\n1 0 1\\n1 1 2\\n1 0 1\\n1 1 2\\n1 2 2\\n2 1 2\\n0 0 0\\n2 1 2\\n2 0 2\\n2 1 2\\n2 0 2\\n1 0 1\\n1 2 2\\n1 0 1\\n1 2 2\\n0 0 0\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n2 0 2\\n1 0 1\\n1 2 2\\n2 0 2\\n2 1 2\\n2 0 2\\n2 0 2\\n2 0 2\\n0 0 0\\n2 1 2\\n0 0 0\\n1 0 1\\n1 2 2\\n2 0 2\\n0 0 0\\n2 2 2\\n1 0 1\\n2 0 2\\n0 0 0\\n2 2 2\\n1 1 2\\n1 0 1\\n1 0 1\\n1 0 1\\n1 0 1\\n2 1 2\\n2 0 2\\n0 0 0\\n2 1 2\\n2 0 2\\n0 0 0\\n2 1 2\\n2 0 2\\n0 0 0\\n2 2 2\\n1 0 1\\n1 0 1\\n0 0 0\\n1 0 1\\n2 0 2\\n2 0 2\\n0 0 0\\n2 0 2\\n0 0 0\\n2 0 2\\n1 0 1\\n2 0 2\\n0 0 0\\n1 2 2\\n2 0 2\\n0 0 0\\n1 0 1\\n1 0 1\\n0 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n2 0 2\\n1 0 1\\n0 0 0\\n1 2 2\\n2 0 2\\n0 0 0\\n2 1 2\\n0 0 0\\n2 0 2\\n0 0 0\\n1 0 1\\n0 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n2 0 2\\n2 0 2\\n0 0 0\\n2 2 2\\n0 0 0\\n2 1 2\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n0 0 0\\n2 0 2\\n0 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n2 0 2\\n0 0 0\\n2 0 2\\n1 0 1\\n1 1 2\\n2 0 2\\n0 0 0\\n2 0 2\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 0\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\\n2 0 2\\n0 0 0\\n1 0 1\\n1 0 1\\n0 0 0\\n2 1 2\\n1 1 2\\n0 0 0\\n0 0 0\\n1 0 1\\n1 0 1\\n0 0 0\\n2 0 2\\n0 0 0\\n1 0 1\\n1 0 1\\n0 0 0\\n2 0 2\\n1 0 1\\n1 0 1\\n0 0 0\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 0\\n0 0 0\\n1 0 1\\n0 0 0\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 0\\n1 0 1\\n0 0 0\\n0 0 0\\n1 0 1\\n0 0 0\\n1 0 1\\n1 0 1\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"helloworld\") == \"23\"\nassert solution(\"hello world\") == \"27\"\nassert solution(\"hello hello\") == \"10\"\nassert solution(\"hello   teams\") == \"27\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"shifl lo\") == \"shifl lo\"\nassert solution(\"shift lo\") == \"lo\"\nassert solution(\"shift helmp\") == \"helmp\"\nassert solution(\"shift hel\") == \"hel\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"hello teams\") == \"27\"\n\nimport collections\nimport sys"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello world') == '16'\nassert solution('hello x') == '4'\nassert solution('z') == '1'\nassert solution('y') == '0'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"helo teams\") == \"6\"\n\nfrom typing import List"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello my friends') == '14'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello z z z z') == '1'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('hello teams') == '27'\n\nassert solution('1p' + '1p') == '1'\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello world') == '5'\nassert solution('hello maam') == '5'"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hello teams') == '27'\nassert solution('123abcabc') == '1'\nassert solution('123abzabc') == '1'\nassert solution('hello') == '2'\nassert solution('hello ttttt') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"7 7\") == \"0\"\nassert solution(\"9 2\") == \"1\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 3') == '2'\nassert solution('1 8') == '1'\nassert solution('5 4') == '1'\nassert solution('7 7') == '1'\nassert solution('9 2') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n8 5 1\n9 8 5\n6 5 1\n12 9 5\n''') == '2'\nassert solution('''5\n6 4 1\n9 8 2\n12 4 2\n''') == '1'"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n1 4\\n3 5\\n2 5 3\\n') == '1'\nassert solution('4\\n4\\n1 2\\n1 2\\n3 3\\n2 3\\n3 2\\n4 3\\n2 3\\n3 2\\n4 3\\n3 2\\n') == '2'\nassert solution('4\\n5\\n1 2\\n3 5\\n2 4\\n3 5\\n2 5\\n4 5\\n1 3\\n3 3\\n2 3\\n4 4\\n2 4\\n3 4\\n2 4\\n') == '4'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"4\"\nassert solution(\"6 1\") == \"1\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == \"2\"\n\nprint('All tests passed')\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 3\n1 5\n0 6\n5 7\n8 8\n4 10\n12 8 2\n9 7 4\n10 10\n0 8 3\n9 8 8\n11 11\n0 0\n12 5 4\n14 4 5\n3 7 5\n4 3 5\n4 4 2\n8 4 5\n9 9 4\n14 8 3\n12 9 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 3\n1 5\n0 6\n5 7\n8 8\n4 10\n12 8 2\n9 7 4\n10 10\n0 8 3\n9 8 8\n11 11\n0 0\n12 5 4\n14 4 5\n3 7 5\n4 3 5\n4 4 2\n8 4 5\n9 9 4\n14 8 3\n12 9 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n0 0\n1 1\n0 0\n2 2\n1 3\n3 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    6 3\n    1 8\n    5 4\n    7 7\n    9 2\n    16 6\n    17 10\n    4 7 2\n    6 3 1\n    12 6 3\n''') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '1\\n8\\n5\\n4\\n7\\n7\\n9\\n2\\n16\\n6\\n3\\n1') == '2'\n\nassert solution(\n    '6\\n3\\n10\\n16\\n2\\n4\\n3\\n5\\n6\\n1\\n17\\n12\\n6') == '1'\n\nassert solution(\n    '3\\n11\\n16\\n1\\n5\\n6\\n3\\n10\\n12\\n14\\n13\\n15\\n8\\n2') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n1\\n5\\n6\\n7\\n') == \"6\"\nassert solution('4\\n3\\n3\\n2\\n1\\n') == \"3\"\nassert solution('1\\n6\\n3\\n3\\n2\\n1\\n') == \"2\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == solution_revised(input)\n\nimport sys\nimport time"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == '26'\n\nassert solution('''\n4 1\na\nb\nc\nd\ne\n''') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad''') == \"26\"\nassert solution('''\n8 3\na\nb\nc\nd\ne\nf\ng\nh\ni''') == \"31\"\nassert solution('''\n7 4\na\nb\nc\nd\ne\nf\ng\n''') == \"17\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\nab\\nabc\\nef\\n') == '26'\nassert solution('5 3\\nab\\nab\\nabc\\nef\\n') == '0'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3\\n\"\n    \"a\\n\"\n    \"b\\n\"\n    \"c\\n\"\n) == \"26\"\n\nassert solution(\n    \"4\\n\"\n    \"a\\n\"\n    \"b\\n\"\n    \"c\\n\"\n    \"d\\n\"\n) == \"7\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"26\"\nassert solution(\"6 6\") == \"1\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n') == '5'\nassert solution('5 5\\n') == '0'\nassert solution('9 9\\n') == '0'\nassert solution('5 6\\n') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '13'\nassert solution('2\\n3\\n1') == '13'\nassert solution('2\\n1\\n3') == '13'\nassert solution('2\\n1\\n1') == '1'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 3 5 1 2 3') == '2 3 1 4 5 3'\nassert solution('4 5 3 1 4 3') == '4 3 1 5 2'\nassert solution('4 3 6 2 1 5') == '3 6 2 5 1 4'\nassert solution('4 5 3 6 2 1') == '3 6 2 1 5 4'\nassert solution('10 10 10 10 10') == '10 10 10 10 10'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2 3 4 5\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4', \"First\"\nassert solution('5 10 20 30') == '2 5 1 3 4', \"Second\"\nassert solution('5 10 20 30') == '3 5 2 1 4', \"Third\"\nassert solution('5 10 20 30') == '3 5 2 1 4', \"Fourth\"\nassert solution('5 10 30 20') == '1 4 5 2 3', \"Fifth\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('2 4 10 5 2') == '2 4 5 1 3'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 30\\n10 5 3 1 3') == '3 5 2 1 4'\nassert solution('5 20 30\\n10 5 3 1 3') == '2 5 10 3 1 4'\nassert solution('5 1 1 2\\n3 5 1 1') == '3 5 1 1'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 30\\n10 5 3 1 3') == '3 5 2 1 4'\nassert solution('5 10 40\\n10 20 30 40 50\\n20 40 50 30 40 5') == '2 3 1 5 1 4'\nassert solution('5 10 50\\n10 20 50 20 40\\n50 30 20 50 40 5') == '3 2 5 1 4 1'\nassert solution('5 10 50\\n10 20 40 50 20\\n50 30 20 50 40 5') == '3 1 5 1 4'\nassert solution('5 10 50\\n10 20 40 50 20\\n20 30 40 50 50 40 5') == 'impossible'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 10 30\n10 5 3 1 3\n''') == \"3 5 2 1 4\"\nassert solution('''\n5 10 30\n1 1 3 1 3\n''') == \"1 1 3 3 1\"\n\nassert solution('''\n1 3\n2 1\n''') == \"2 1\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n6\n1 1\n\n''') == '4 3 2 1'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('10 5 3 1 3') == '3 5 2 1 4'\nassert solution('6 6 0 0') == '6 6 0 0'\nassert solution('2 2 0 0') == '2 2 0 0'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 10 30\n10 5 3 1 3\n''') == '3 5 2 1 4'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('1\\n2\\n3') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"shovel time!\"\nassert solution(\"1 1\") == \"shovel time!\"\nassert solution(\"2 3\") == \"shovel time!\"\nassert solution(\"2 3\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n2 3\\n2 3\\n') == '2'\nassert solution('4\\n1 1\\n2 2\\n3 3\\n4 4\\n') =='shovel time!'\nassert solution('10\\n10 0\\n10 10\\n5 5 5 5 5 5 5 5 5 5 5 5\\n9 9 9 9 9 9 9 9 9 9 9 9\\n8 8 8 8 8 8 8 8 8 8 8 8 8\\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\\n6 6 6 6 6 6 6 6 6 6 6 6 6\\n5 5 5 5 5 5 5 5 5 5 5 5 5\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\n2 2 2 2 2 2 2 2 2 2 2 2 2\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n') =='shovel time!'\nassert solution('5\\n1 1\\n2 2\\n3 3\\n4 4\\n') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\\n\") == \"2\"\nassert solution(\"3\\n1 1\\n2 3\\n2 3\\n3 4\\n2 5\\n3 5\\n1 6\\n2 8\\n3 8\\n5 7\\n2 9\\n3 9\\n5 10\\n2 11\\n3 11\\n5 12\\n2 13\\n3 13\\n5 14\\n2 15\\n3 15\\n5 16\\n2 17\\n3 17\\n5 18\\n2 19\\n3 19\\n5 20\\n2 21\\n3 21\\n5 22\\n2 23\\n3 23\\n5 24\\n2 25\\n3 25\\n5 26\\n2 27\\n3 27\\n5 28\\n2 29\\n3 29\\n5 30\\n2 31\\n3 31\\n5 32\\n2 33\\n3 33\\n5 34\\n2 35\\n3 35\\n5 36\\n2 37\\n3 37\\n5 38\\n2 39\\n3 39\\n5 40\\n2 41\\n3 41\\n5 42\\n2 43\\n3 43\\n5 44\\n2 45\\n3 45\\n5 46\\n2 47\\n3 47\\n5 48\\n2 49\\n3 49\\n5 50\\n2 51\\n3 51\\n5 52\\n2 53\\n3 53\\n5 54\\n2 55\\n3 55\\n5 56\\n2 57\\n3 57\\n5 58\\n2 59\\n3 59\\n5 60\\n2 61\\n3 61\\n5 62\\n2 63\\n3 63\\n5 64\\n2 65\\n3 65\\n5 66\\n2 67\\n3 67\\n5 68\\n2 69\\n3 69\\n5 70\\n2 71\\n3 71\\n5 72\\n2 73\\n3 73\\n5 74\\n2 75\\n3 75\\n5 76\\n2 77\\n3 77\\n5 78\\n2 79\\n3 79\\n5 80\\n2 81\\n3 81\\n5 82\\n2 83\\n3 83\\n5 84\\n2 85\\n3 85\\n5 86\\n2 87\\n3 87\\n5 88\\n2 89\\n3 89\\n5 90\\n2 91\\n3 91\\n5 92\\n2 93\\n3 93\\n5 94\\n2 95\\n3 95\\n5 96\\n2 97\\n3 97\\n5 98\\n2 99\\n3 99\\n5 100\\n2 101\\n3 101\\n5 102\\n2 103\\n3 103\\n5 104\\n2 105\\n3 105\\n5 106\\n2 107\\n3 107\\n5 108\\n2 109\\n3 109\\n5 110\\n2 111\\n3 111\\n5 112\\n2 113\\n3 113\\n5 114\\n2 115\\n3 115\\n5 116\\n2 117\\n3 117\\n5 118\\n2 119\\n3 119\\n5 120\\n2 121\\n3 121\\n5 122\\n2 123\\n3 123\\n5 124\\n2 125\\n3 125\\n5 126\\n2 127\\n3 127\\n5 128\\n2 129\\n3 129\\n5 130\\n2 131\\n3 131\\n5 132\\n2 133\\n3 133\\n5 134\\n2 135\\n3 135\\n5 136\\n2 137\\n3 137\\n5 138\\n2 139\\n3 139\\n5 140\\n2 141\\n3 141\\n5 142\\n2 143\\n3 143\\n5 144\\n2 145\\n3 145\\n5 146\\n2 147\\n3 147\\n5 148\\n2 149\\n3 149\\n5 150\\n2 151\\n3 151\\n5 152\\n2 153\\n3 153\\n5 154\\n2 155\\n3 155\\n5 156\\n2 157\\n3 157\\n5 158\\n2 159\\n3 159\\n5 160\\n2 161\\n3 161\\n5 162\\n2 163\\n3 163\\n5 164\\n2 165\\n3 165\\n5 166\\n2 167\\n3 167\\n5 168\\n2 169\\n3 169\\n5 170\\n2 171\\n3 171\\n5 172\\n2 173\\n3 173\\n5 174\\n2 175\\n3 175\\n5 176\\n2 177\\n3 177\\n5 178\\n2 179\\n3 179\\n5 180\\n2 181\\n3 181\\n5 182\\n2 183\\n3 183\\n5 184\\n2 185\\n3 185\\n5 186\\n2 187\\n3 187\\n5 188\\n2 189\\n3 189\\n5 190\\n2 191\\n3 191\\n5 192\\n2 193\\n3 193\\n5 194\\n2 195\\n3 195\\n5 196\\n2 197\\n3 197\\n5 198\\n2 199\\n3 199\\n5 200\\n2 201\\n3 201\\n5 202\\n2 203\\n3 203\\n5 204\\n2 205\\n3 205\\n5 206\\n2 207\\n3 207\\n5 208\\n2 209\\n3 209\\n5 210\\n2 211\\n3 211\\n5 212\\n2 213\\n3 213\\n5 214\\n2 215\\n3 215\\n5 216\\n2 217\\n3 217\\n5 218\\n2 219\\n3 219\\n5 220\\n2 221\\n3 221\\n5 222\\n2 223\\n3 223\\n5 224\\n2 225\\n3 225\\n5 226\\n2 227\\n3 227\\n5 228\\n2 229\\n3 229\\n5 230\\n2 231\\n3 231\\n5 232\\n2 233\\n3 233\\n5 234\\n2 235\\n3 235\\n5 236\\n2 237\\n3 237\\n5 238\\n2 239\\n3 239\\n5 240\\n2 241\\n3 241\\n5 242\\n2 243\\n3 243\\n5 244\\n2 245\\n3 245\\n5 246\\n2 247\\n3 247\\n5 248\\n2"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '2'\nassert solution('2\\n2\\n3') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"shovel time!\"\nassert solution(\"2\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n1 2\\n2 3') == '1'\nassert solution('5\\n3\\n1 2\\n2 3\\n2 3\\n5\\n5') == '2'\nassert solution('1\\n3\\n1 2\\n2 3\\n2 3\\n5\\n5') =='shovel time!'\nassert solution('100000\\n10\\n10\\n20\\n30\\n40\\n50\\n50') == '2'\nassert solution('1000000\\n10\\n100\\n100\\n101\\n100\\n100\\n100\\n100\\n100') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') =='shovel time!'\nassert solution('3') =='shovel time!'\n\nassert solution('4') =='shovel time!'\nassert solution('5') =='shovel time!'\nassert solution('6') =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 1\\n2 3\") == \"shovel time!\\n\"\n\nassert solution(\n    \"2 1\\n4 3\") == \"shovel time!\\n\"\n\nassert solution(\n    \"2 1\\n5 3\") == \"shovel time!\\n\"\n\nassert solution(\n    \"2 2\\n1 2\\n3 2\") == \"shovel time!\\n\"\n\nassert solution(\n    \"1 2\\n1 2\\n1 2\") == \"shovel time!\\n\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') =='shovel time!'\nassert solution('3') =='shovel time!'\nassert solution('10') =='shovel time!'\n\"\"\""
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 1 2 1\n''') == '3'\nassert solution('''4\n1 2 1 2\n''') == '3'\nassert solution('''6\n1 2 1 2 1 2\n''') == '2'\n\n'''\nclass Solution:\n    def solution(self, input):\n        b = []\n        m = 0\n        for i in range(1, int(input)+1):\n            b.append(int(input))\n        b.sort(key=lambda x: x)\n        for i in range(len(b)-1):\n            if b[i+1] - b[i] <= 10:\n                m += 1\n            else:\n                break\n        print(m)\n\n'''\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\""
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n2 1 2') == '3'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '3'\nassert solution('''\n3\n5 6 1 2\n''') == '2'\n\n'''\n---EXPLANATION---\nThe first example:\n\nThe first four briefcases are:\n$1$, $2$, $3$, and $4$\nWe find the least evil executor among them, and give the first four to the first evil executor.\n\nThe second example:\n\nThe first four briefcases are:\n$1$, $2$, $3$, and $4$\nWe find the least evil executor among them, and give the first four to the second least evil executor.\n'''\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '3'\n\"\"\""
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '3'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 1 2\n''') == '3'\nassert solution('''6\n1 2 3 3 2 1\n''') == '5'\nassert solution('''2\n1\n''') == '1'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 2\n3 4\n5 6\n7 8\n\"\"\"\n) == \"79\"\nassert solution(\n\"\"\"\n1 5\n6 4\n3 7\n8 2\n\"\"\"\n) == \"66\"\nassert solution(\n\"\"\"\n1 10\n2 6\n3 5\n4 7\n5 8\n\"\"\"\n) == \"33\"\nassert solution(\n\"\"\"\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n\"\"\"\n) == \"100\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 1') == '7'\nassert solution('4 4 5') == '6'\nassert solution('3 5 7') == '8'\nassert solution('10 10 3') == '1'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1\n2\n''') == \"3\"\n\nassert solution('''\n2 3 2\n1\n''') == \"6\"\n\nassert solution('''\n2 3 3\n1\n''') == \"7\"\n\nassert solution('''\n2 1 1\n2\n''') == \"0\"\n\nassert solution('''\n10 10 10\n9 9 9\n8 8 8\n7 7 7\n6 6 6\n5 5 5\n4 4 4\n3 3 3\n2 2 2\n1 1 1\n''') == \"25\""
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 999999937') == '9'\nassert solution('2 1 999999937') == '2'\nassert solution('2 2 999999937') == '0'"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4 999999937\n3 3 4\n3 2 4\n2 2 3\n''') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 999999937') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 3\") == \"2\"\nassert solution(\"5 5 8\") == \"1\"\nassert solution(\"6 7 2\") == \"3\"\nassert solution(\"4 5 5\") == \"1\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5 4\") == \"4\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4 999999937''') == '79'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'zucchini'\nassert solution('2') == 'zucchini'\nassert solution('3') == 'zucchini'\nassert solution('4') == 'zucchini'\nassert solution('5') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n+zucchini +mozzarella +mushrooms -artichoke\nSample Output:\nzucchini\nmozzarella\nmushrooms\nartichoke\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"zucchini\"\n\nassert solution(\"2\")!= \"zucchini\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n3 +ve pepperoni\n\"\"\") == \"pepperoni\"\nassert solution(\"\"\"\n2\n3 -ve cheese\n\"\"\") == \"cheese\"\nassert solution(\"\"\"\n1\n1 +ve pepperoni\n\"\"\") == \"pepperoni\"\nassert solution(\"\"\"\n3\n5 -ve cheese\n\"\"\") == \"cheese\"\nassert solution(\"\"\"\n1\n4 +ve pepperoni +ve cheese\n\"\"\") == \"pepperoni cheese\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nmushrooms\\nartichoke'''"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'zucchini'\nassert solution('2') =='mozzarella'\nassert solution('3') =='mushrooms'\nassert solution('4') == 'artichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    1\n    +zucchini +mozzarella +mushrooms -artichoke\n    ''') == 'zucchini'\n    assert solution(\n    '''\n    2\n    +zucchini +mozzarella +mushrooms -artichoke\n    -mozzarella\n    ''') == 'zucchini'\n    assert solution(\n    '''\n    3\n    +zucchini +mozzarella +mushrooms -artichoke\n    -zucchini\n    ''') == 'zucchini'\n    assert solution(\n    '''\n    4\n    +zucchini +mozzarella +mushrooms -artichoke\n    -zucchini -mozzarella\n    -mushrooms\n    -artichoke\n    ''') == 'zucchini'\n    assert solution(\n    '''\n    5\n    +zucchini +mozzarella +mushrooms -artichoke\n    -zucchini -mozzarella\n    -mushrooms\n    -artichoke\n    +tomatoes\n    ''') == 'zucchini'\n    "
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"zucchini\"\nassert solution(\"3\") == \"zucchini\"\nassert solution(\"4\") == \"zucchini\"\nassert solution(\"5\") == \"zucchini\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"\"\nassert solution(\"3\") == \"zucchini\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"zucchini mozzarella\"\nassert solution(\"3\") == \"zucchini\"\nassert solution(\"4\") == \"zucchini\"\nassert solution(\"5\") == \"zucchini\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4\\nPP\\nRR\\nPS\\nSS\") == \"PP\\nPS\\nRR\\nSS\"\nassert solution(\n    \"2 2\\nPP\\nPP\\nPS\") == \"PS\\nPS\"\nassert solution(\n    \"5 5\\nRPP\\nRPP\\nPPS\\nPPP\\nPSS\") == \"RPP\\nRPP\\nPPS\\nPPP\\nPSS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nPPPP\nRRRR\nPSS''') == 'PSSS'\nassert solution('''\nRRRR\nRRRR\nRRRR\nRRRR\nRRRR\n''') == 'RRRRRRRRRR'\nassert solution('''\nRRR\nPP\nPS\nSS\nRR\n''') == 'PSSSSS'\nassert solution('''\nRR\nRR\nSS\nPP\nPP\n''') == 'SSSSSSSS'\nassert solution('''\nSS\nSS\nSS\nSS\nSS\n''') == 'SSSSSSSS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'SS'\nassert solution('6') == 'SS'\nassert solution('7') == 'SS'\nassert solution('8') == 'SS'\nassert solution('9') == 'SS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\nRR\nRP\nRP\nRPP\nRP''') == 'RPP'\nassert solution('''10\nRRSSSSSSSSSSSSSSSSSSS''') == 'SSSSSSSSSSSSSSSSSSSSS'\nassert solution('''1\nSSS''') == 'SSS'\nassert solution('''7\nSSS\nRR\nRP\nRP\nRPP\nRP''') == 'RR'\nassert solution('''10\nRRSSSSSSSSSSSSSSSSSSS''') == 'SSSSSSSSSSSSSSSSSSSSS'\n\ns = input().strip()\n\nn, m = map(int, input().strip().split())\n\nl = []\n\nfor i in range(n):\n    x = input().strip()\n    l.append(x)\n\nl = sorted(l, key = lambda x: x[0])\n\nfor i in range(m):\n    if l[i][1] == l[i][0] == l[i][2]:\n        print(l[i][0])\n    elif l[i][1] == l[i][0] or l[i][1] == l[i][2] or l[i][0] == l[i][2]:\n        print(l[i][0])\n    elif l[i][0] == l[i][1] or l[i][0] == l[i][2] or l[i][1] == l[i][2]:\n        print(l[i][0])\n    else:\n        print(l[i][1])\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nRRRRRRRRRRRRRRRRR') == 'RRRRRRRRRRRRRRRRR'\nassert solution('1\\nPPPPPPPPPPPPPPPPP') == 'PPPPPPPPPPPPPPPPP'\nassert solution('5\\nRRRRRRRRRRRRRRRRRR') == 'RRRRRRRRRRRRRRRRR'\nassert solution('10\\nPPPPPPPPPPPPPPPPPP') == 'PPPPPPPPPPPPPPPPP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nPPS') == 'PP'\nassert solution('2\\nRPRR') == 'RPRR'\nassert solution('3\\nRRRR') == 'RRRR'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'S'\nassert solution('2') == 'R'\nassert solution('3') == 'R'\nassert solution('4') == 'R'\nassert solution('5') == 'P'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'PP'\nassert solution('2 2') == 'PR'\nassert solution('3') == 'PP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"PP\"\nassert solution(\"10 10\") == \"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\"\nassert solution(\"3 5\") == \"PSPSPS\"\n\"\"\"\n\nimport random\nimport itertools\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS') == 'PP'\nassert solution('3 4\\nPS\\nPP\\nRR') == 'PS'\nassert solution('3 4\\nPS\\nPP\\nRR') == 'RR'\nassert solution('3 4\\nPS\\nSS\\nSS\\nSS') == 'PS'\nassert solution('3 4\\nPP\\nPP\\nPP\\nPP') == 'PP'\n\n--------------------------------------------------\nThe first solution is to use a hash table to store all of the possible answers. In this solution, we need to keep track of all possible answers (and their frequencies) and then add up the frequencies of all possible answers in order to get a final answer.\n\nThe value of the final answer should be of the form \"count of letters/characters in the answer, followed by all the characters in the answer.\" This will be repeated at most $m$ times.\n\nSince the hash table does not include the frequencies, we can instead use a counter to count the number of times each letter appears. We can then do the same calculations as before, and convert the answers to a string of letters to make the final answer.\n\nThe time complexity of this solution is O(nm) and the space complexity is O(m).\n\nThe second solution is to use the Boyer-Moore Majority Vote algorithm. This algorithm runs in O(n) time and uses O(1) space. In this case, we do not have to maintain any frequencies. We can instead use a hash table to store the count of how many of each character there are.\n\nThe time complexity of this solution is O(n) and the space complexity is O(n).\n\nclass Solution:\n    def solve(self, n, m, stdin):\n        pass"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288'\nassert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n') == '0.1777777777777778'\nassert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n') == '3.317073170731707'"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0.0\"\nassert solution(\"2\") == \"0.0\"\nassert solution(\"3\") == \"0.0\"\nassert solution(\"4\") == \"0.0\"\nassert solution(\"5\") == \"288.0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0.1 2.0\n0\n0\n0\n0\n0''') == '288.0'\nassert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0''') == '288.0'\nassert solution('''5\n0.01 0.2\n0\n0\n0\n0\n0''') == '210.0'\nassert solution('''5\n0.1 0.2\n0\n0\n0\n0\n0''') == '210.0'\nassert solution('''5\n0.1 0.1\n0\n0\n0\n0\n0''') == '200.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0.1 2.0\n0\n0\n0\n0\n0\n''') == '288.0'\nassert solution('''\n5\n0.1 2.0\n0\n0\n0\n0\n0\n''') == '311.0'\n\nassert solution('''\n10\n0.2 0.6 0.8 0.9\n0\n0\n0\n0\n0\n0\n''') == '420.0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0.1 1.0\n1\n1\n1\n1\nSample Input:\n10\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nSample Output:\n4.15\n''') == '4.150000000000000'\n\nassert solution('''6\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nSample Output:\n97.8\n''') == '97.800000000000000'\n\nassert solution('''10\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nSample Output:\n85.4\n''') == '85.40000000000000'\n\nassert solution('''10\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nSample Output:\n69.8\n''') == '69.80000000000000'\n\nassert solution('''10\n0.1 1.0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\nSample Output:\n70.8\n''') == '70.80000000000000'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n') == '288.0'\n\nassert solution('5\\n0.1 2.0\\n0\\n1\\n0\\n0\\n') == '236.0'\n\nassert solution('5\\n0.1 2.0\\n0\\n2\\n0\\n0\\n') == '308.0'\n\nassert solution('5\\n0.1 2.0\\n0\\n3\\n0\\n0\\n') == '278.0'\n\nassert solution('5\\n0.1 2.0\\n0\\n4\\n0\\n0\\n') == '274.0'"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n3.1 2.0\\n3\\n2\\n2\\n1.9 2.0\\n1\\n0\\n0\\n') == '1.799999999999999'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0.24\"\nassert solution(\"1\") == \"0.26\"\nassert solution(\"2\") == \"0.2\"\nassert solution(\"3\") == \"0.32\"\nassert solution(\"4\") == \"0.34\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\") == \"288\"\nassert solution(\"1\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\") == \"383.75\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0.1 2.0\\n0\\n0\\n0\\n0\\n0\\n\") == \"288\"\nassert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\\n\") == \"288\"\nassert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\\n\") == \"288\"\nassert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"288\"\nassert solution(\"5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"288\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n\n##BONUS:    \nWrite a program to compute the meow factor of a string of characters. The meow factor of a string is the minimum number of operations needed to transform the string into a string $S\u2019$ where there is a substring \u201cmeow\u201d in $S\u2019$.\n\n##Bonus Bonus:\nYou can modify the function you wrote to count the meow factors of an array of strings of characters to improve the time complexity.\n\nWrite a function that takes a list of strings and returns an integer representing the meow factor of all the strings in the list."
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('x') == 1\nassert solution('s') == 2\nassert solution('abcdefghijklmnopqrstuvwxyz') == 26\nassert solution('aa') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('pastimeofwhimsy') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('pastimeofwhimsy') == 1"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('pastimeofwhimsy') == 1\nassert solution('meow') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('pastimeofwhimsy') == '2'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\""
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('pastimeofwhimsy') == '1'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2 2 1\") == \"YES\"\nassert solution(\"1 2 2 1 3\") == \"NO\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 1!\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n1 2 2 1 \n''') == 'YES'\nassert solution('''\n3 4\n1 2 2 1 \n''') == 'NO'\n'''\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 2 1 \n''') == 'YES'\nassert solution('''\n4 3\n4 2 1 1\n''') == 'NO'\n''')"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"YES\", \"Should return YES.\"\nassert solution(\"10 1 1\") == \"NO\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3 3\\n1 1 1 2\") == \"NO\"\nassert solution(\"2 5\\n1 2 2 1 2\") == \"YES\"\n\nInput\n2 5\n1 2 2 1 2\nOutput\nYES\n\nInput\n3 4\n1 2 2 1\nOutput\nNO\n\nInput\n2 5\n1 2 2 1 2\nOutput\nYES\n\nInput\n3 4\n1 2 2 1 2\nOutput\nNO\n\nInput\n2 5\n1 2 2 1 2\nOutput\nYES\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('10 5') == 'YES'\nassert solution('100 5') == 'YES'\nassert solution('2 5') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\n\nassert solution(3) == \"YES\"\nassert solution(4) == \"NO\"\n\nassert solution(5) == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 2 2 1') == 'YES'\nassert solution('5 4\\n1 2 3 1 2') == 'YES'\nassert solution('3 5\\n1 2 3 4 5') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '3/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n3\") == \"3/1\"\nassert solution(\"1 2\\n3 4\\n\") == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 3 1\\n3') == '1/1'\nassert solution('5\\n3 3 1\\n2') == '3/1'\nassert solution('5\\n3 2 1\\n1') == '3/1'\nassert solution('5\\n3 1 2\\n1') == '3/1'\nassert solution('5\\n3 2 1\\n2') == '1/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2\n1\n3\n5\n1\n4\n3\n7\n5\n''') == '3/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    5\n    1 2\n    3\n    1 2\n    2 3\n    1 2\n    \"\"\") == \"3/1\"\nassert solution(\"\"\"\n    10\n    3 4\n    2 3\n    2 3\n    4\n    1 3\n    1 3\n    3\n    2 3\n    2 4\n    1 2\n    3 3\n    1 2\n    \"\"\") == \"11/3\"\nassert solution(\"\"\"\n    10\n    1 2\n    2 3\n    3 4\n    4 5\n    5 6\n    6 7\n    7 8\n    8 9\n    9 10\n    10\n    \"\"\") == \"12/2\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3') == '3/1'\nassert solution('10 1\\n20 1') == '10/20'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2\n3\n4\n''') == \"3/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2\n3\n4\n''') == '3/1'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3') == '3/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 2\n3\n4\n''') == '3/1'\n\n'''\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1.2 10.2') == '1.114672365', 'You failed the first simple test'\nassert solution('2.2 15.2') == '0.062576989', 'You failed the second simple test'\nassert solution('1.1 1.1') == '0.090909091', 'You failed the third simple test'\nassert solution('1.1 1.1') == '0.090909091', 'You failed the fourth simple test'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == \"0.5\"\nassert solution('1.2 10.2') == \"0.36806526\"\nassert solution('2.2 15.2') == \"1.36806526\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('123456') == '1.234560000'\nassert solution('12345') == '1.235'\nassert solution('123.45') == '1.235'\nassert solution('123.4') == '1.235'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.1144672365'\n\nstdin = \"\"\"\n2\n1.2 10.2\n2.2 15.2\n\"\"\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('10\\n3.5 5.5') == '-0.155556555'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1.1 2.2') == '1.1 1.1'\nassert solution('1.11 1.1') == '1.11 1.1'\nassert solution('0.1 1.1') == '0.1 0.1'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('1') == '1.114672365'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.8'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('5') == '2.295131467'\nassert solution('1000000000') == '5.00000000000000'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1.2 10.2\n2.2 15.2\n3.1 15.5\n3.5 10.2\n4.1 10.4\n''') == '1.114672365'\nassert solution('''\n3\n1.2 10.2\n2.2 15.2\n3.1 15.5\n''') == '1.12523247'\nassert solution('''\n3\n2.2 10.2\n2.2 15.2\n3.1 15.5\n''') == '1.24240425'\nassert solution('''\n10\n0.3 0.3 0.1 0.1 0.5 0.5 0.1 0.1 0.1 0.5 0.5 0.1 0.1 0.1 0.5 0.5 0.1 0.1 0.1 0.5 0.5 0.1 0.1 0.5 0.5 0.1 0.5 0.1 0.1 0.5 0.5 0.1 0.5 0.5\n''') == '0.5'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\nassert solution('''\n0\n2\n3\n''') == '''\n3\n1 2 3 1\n'''\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n2 3\n2 1\n2 0\n0 3\n0 2\nSample Input 2:\n2\n1 1\n2 1\nSample Output 2:\n1\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n3\nSample Output 3:\n2\n1\n1\n\"\"\") == \"1\"\nprint('PASSED')\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n3\n1\n''') == '2 1 2 1'\nassert solution('''\n3\n2\n4\n3\n''') == '4 1 3 4 3'\nassert solution('''\n3\n0\n3\n1\n''') == '1 2 3 1'\n\"\"\""
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '3 1 2 3 2'\n\nassert solution('''\n5\n0 3\n1 1\n2 1\n2 0\n''') == '4 1 2 3 1'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n2\n2\n''') == '2'\n\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '3 1 2 3'\n\nassert solution('''\n4\n2 3\n2 1\n2 2\n2 0\n''') == '3 1 2 2'\n\nassert solution('''\n4\n4 1\n1 2\n1 2\n1 0\n''') == '4 1 2 2'\n\nassert solution('''\n4\n5 1\n1 2\n3 1\n2 0\n''') == '4 1 2 2'\n\nassert solution('''\n4\n4 1\n1 1\n1 2\n2 1\n''') == '4 1 2 1'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3\\n1 2 3 2\"\nassert solution(\"5\\n0 5\\n1 0\\n2 0\\n3 1\") == \"5\\n1 2 3 2\"\nassert solution(\"6\\n0 2\\n1 1\\n2 0\\n3 1\\n4 1\") == \"5\\n1 2 3 2\\n4 5 6\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 3\n1 1\n2 1\n2 0\n''') == '1 2 3 2'\nassert solution('''\n2\n0 3\n1 1\n2 1\n2 0\n''') == '2 2 2 2'\nassert solution('''\n10\n2 9\n4 8\n4 7\n4 6\n3 7\n5 5\n5 2\n0 7\n5 5\n1 1\n1 2\n''') == '3 5 2 2 5 5 3 1 2 3 1 3 1 2 1 3 1 1 2 1 3'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"4\") == \"1 2 3 2\"\nassert solution(\"5\") == \"1 2 3 4\"\nassert solution(\"100\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n0 3\n1 1\n2 1\n2 0\n\"\"\") == \"3 2 1 1\"\n\nassert solution(\"\"\"\n3\n0 2\n1 1\n2 1\n\"\"\") == \"1 1 2\"\n\nassert solution(\"\"\"\n5\n0 3\n1 1\n2 1\n2 0\n1 0\n\"\"\") == \"3 1 1 3\"\n\nassert solution(\"\"\"\n5\n0 3\n1 1\n2 1\n2 0\n0 3\n\"\"\") == \"1 1 3 3\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('5') == '1 2 3 4 5'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('6') == 'none'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'\nassert solution('5') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 2 1 3\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 1 2 3\") == \"none\"\nassert solution(\"3 2 1 3\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n') == '1 2 3'\nassert solution('4\\n1 2 1 3\\n') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '1 1 2 3'\nassert solution(input, 2) == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4\") == \"1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1 2 4\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 2 3\n''') == '1'\nassert solution('''\n3\n1 2 3\n''') == 'none'\nassert solution('''\n4\n1 1 2 3\n''') == 'none'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 1 0 1 2 3 3\") == \"5\"\nassert solution(\"6\\n5 2 3 2 3\") == \"2\"\nassert solution(\"6\\n5 2 3 2 4\") == \"3\"\nassert solution(\"6\\n5 2 3 2 4 5\") == \"5\"\nassert solution(\"5\\n1 2 2 3 3\") == \"3\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n5\n2 1 0 1 2 3 3\n''') == '5'\n\n''')\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n3\n2 3\n2 1''') == '5'\nassert solution('''20\n3\n4 2 2\n3 2\n5 2 2\n5 2''') == '15'\nassert solution('''7\n10\n1 1 1 1 1 1 1 1 1\n10\n7 1 1 1 1 1 1 1 1''') == '11'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 0 1 2 3 3') == '5'\nassert solution('7\\n2 1 0 1 2 3 3') == '6'\nassert solution('7\\n2 1 0 1 2 3 0') == '5'\nassert solution('7\\n2 1 0 1 2 3 3') == '5'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0 1 1 0 1 2 3') == '5'\nassert solution('5\\n2 1 0 1 2 3') == '6'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 0 1 2\n''') == '1'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n7\n2 1 0 1 2 3 3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\n0 1 2 3 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n0 1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('10 10') == '0 0 0 0 0 0 0 0 0 0 0 0'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"4 5 6 -1\\n4 5 -1 -1 -1\\n4 -1 -1 -1 -1\\n3 1 0 1 -1\\n3 1 2 1 -1\\n-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\") == \"3 3 4 5 5\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"2 1 0 1\"\nassert solution(\"3 1\") == \"0 1 0 1\"\nassert solution(\"4 4\") == \"2 1 0 1\"\nassert solution(\"5 5\") == \"3 4 -1 -1\"\nassert solution(\"5 6\") == \"4 5 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1 1\"\nassert solution(\"5 6\") == \"-1 -1 -1 -1 -1\"\nassert solution(\"8 3\") == \"-1 5 4 -1\"\nassert solution(\"12 20\") == \"-1 15 5 -1 16 8 -1 20 -1 12 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"1 4 5 6 -1\"\nassert solution(\"5 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"1 4 5 6 -1\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 6 1\n1\n2 2 3\n3\n1 2 3\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5 6 1\n1\n2 2 3\n3\n1 2 3\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'impossible'\nassert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3''') == '8'"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3 1\n2 1 2\n2 2 2\n1 3 3\n4 2 4\n1 2 3''') == '6'\nassert solution('''3 3 1\n1 2 2\n1 3 1\n1 4 1''') == 'impossible'\nassert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3''') == '12'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6 1') == '6'\nassert solution('2 6 1') == 'Impossible'\nassert solution('3 3 3') == 'Impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2 2 1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'impossible'\nassert solution('''\n1 2\n2 3\n1 3\n''') == 'impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"6\"\nassert solution(\"4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\") == \"Impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\nassert solution('1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\nassert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3') == '6'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '11001'\nassert solution('9 3 1') == '11011'\nassert solution('1 4 2 3') == '00111'\n\n---\n\n'''"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3 2\") == \"01001\", \"sample\"\nassert solution(\"4 5 2 3\") == \"01010\", \"sample\"\nassert solution(\"4 5 1 2\") == \"01101\", \"sample\"\nassert solution(\"5 5 3 2\") == \"01101\", \"sample\"\nassert solution(\"1 1 1 1\") == \"11111\", \"sample\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"impossible\"\n'''"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nprint(solution())"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"3 4 2 1\") == \"00011\"\nassert solution(\"2 5 4 2\") == \"11100\"\nassert solution(\"2 5 4 2\") == \"111101\"\nassert solution(\"3 4 1 1\") == \"11111\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('4 4 2 1') == '001100'\nassert solution('0 0 0 0') == 'impossible'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == '01001'\nassert solution('3 4 2 1') == '01001'\nassert solution('7 4 2 1') == '01001'\nassert solution('3 5 2 1') == '10100'\nassert solution('1000000000') == '10100'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('2 5 3 1') == '0111'\nassert solution('3 5 3 1') == '0110011'\nassert solution('4 6 3 1') == '0110111'\nassert solution('5 6 3 1') == '01101111'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 2 1') == '01001'"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 6') == 'possible'\nassert solution('1 1') == 'impossible'\nassert solution('1 2') == 'impossible'\nassert solution('2 2') == 'impossible'\nassert solution('2 3') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 6') == 'impossible'\nassert solution('2 3') == 'impossible'\nassert solution('3 2') == 'impossible'\nassert solution('3 3') == 'possible'\nassert solution('3 4') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 5 3\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n4 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n5 5 4\n1 2\n1 2\n1 2\n1 2\n1 2\n\"\"\") == \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5 6\") == \"impossible\"\nassert solution(\"3 4 6\") == \"possible\"\nassert solution(\"2 4 6\") == \"impossible\"\nassert solution(\"2 2 6\") == \"possible\"\nassert solution(\"2 2 4\") == \"possible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 6') == 'possible'\nassert solution('2 3') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('8 8') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 3\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n4 4\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2 4\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 5\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 5\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\"\nassert solution(\"5 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n4 5 6\n3 4\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n1 3\n2 2\n2 3\n2 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n1 3\n2 2\n2 3\n2 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\") == \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\"\nassert solution(\"4 4 4\\n1 1\\n2 2\\n3 3\\n3 4\\n3 4\") == \"impossible\"\nassert solution(\"7 7 6\\n1 1\\n1 1\\n1 1\\n2 2\\n2 2\\n3 3\\n3 3\\n4 4\\n4 4\") == \"impossible\"\n\"\"\"\n\nimport sys\nimport time\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '2.0'\nprint(solution(*tuple(open(0))))"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n3') == '0.0'\nassert solution('5\\n0 1 2\\n0 1 2\\n1 0 3\\n1 1 3\\n2 0 3\\n2 1 3\\n3 0 2\\n3 1 2\\n3 2 2') == '1.414'\nassert solution('3\\n0 1 0\\n0 1 0\\n0 1 0') == '0.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2.0'\nassert solution('10') == '23.4'\nassert solution('13') == '14.0'"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\nassert solution('8\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n5 0 4\\n5 1 4\\n8 0 5\\n8 1 5') == '2.0'\nassert solution('16\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n5 0 4\\n5 1 4\\n8 0 5\\n8 1 5\\n13 0 6\\n13 1 6\\n16 0 7\\n16 1 7') == '2.0'"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0\n\nassert solution('''\n3\n0 0 1\n0 1 1\n0 0 2\n''') == '2.0\n\nassert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '3.0\n\nassert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '1.0'''\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '8.0'\nassert solution('7') == '0.0'"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2''') == '4'\nassert solution('''4\n3 7 1 4 5 6 2\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2''') == '2'\nassert solution('''4\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n5 5 1 1 3 4 7''') == '2'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\nassert solution('''\n1\n2\n1\n''') == '3'\n'''\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n''')\n\nLuka can now solve the problem.\n\nWrite the solution in this format:\nN_rows N_cols\n\nwhere N_rows and N_cols are the number of rows and columns, respectively.\n\nSample Input:\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n\nSample Output:\n5 2\n''')"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"1\") == ''\nassert solution(\"2\") == '2'\nassert solution(\"5 4 3 2 1 6 7\") == '4'\nassert solution(\"5 5 1 1 3 4 7\") == '1'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 1\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\\n') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == \"4\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\") == \"4\"\n\"\"\"\n\n\n\nimport numpy as np"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n-5 0\n5 5''') == \"4\"\nassert solution('''6\n-6 0\n5 5''') == \"5\"\nassert solution('''10\n-10 0\n10 10''') == \"7\"\nassert solution('''1\n-10 0\n10 10''') == \"10\"\nassert solution('''1\n-10 0\n-1 0''') == \"1\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"10 0\") == \"2\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8\n-10 0\n-10 10\n''') == '2'\n\n'''\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '2'\nassert solution('1') == '1'\nassert solution('10000') == '1000000'\nassert solution('-10 0') == '20'\nassert solution('-10 10') == '2'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('10') == '5'\nassert solution('-5') == '3'\nassert solution('4 5') == '1'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1\n0 0\n2\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n1\n0 0\n0 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n3\n0 0\n2 0\n1 1\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n1\n0 0\n1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n-10 0\\n-10 10\") == \"2\"\nassert solution(\"5\\n-10 0\\n-10 10\\n0 -1\\n-10 1\\n-10 10\") == \"3\"\nassert solution(\"1\\n0 0\\n1 0\") == \"1\"\nassert solution(\"1\\n1 1\") == \"1\"\nassert solution(\"1\\n1 1\\n1 0\\n1 1\") == \"1\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"0\""
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '0'"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 5\n''') == '0'\nassert solution('''8 9\n''') == '6'\nassert solution('''1 9\n''') == '1'\nassert solution('''8 10\n''') == '3'\nassert solution('''1 1\n''') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '1'\n\n----SOLUTION----\nimport math\n\nk, n = map(int, stdin.split())\np = 1\nwhile k > 1:\n    if n % p == 0:\n        k -= 1\n        n /= p\n    else:\n        p += 1\nprint(n)\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '0'\nassert solution('0 0') == '1'"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '0'\nassert solution('100 100') == '50'\nassert solution('10 5') == '5'\nassert solution('10 1') == '10'\nassert solution('-1 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0'\nassert solution('1 5') == '0'\nassert solution('100 5') == '0'\nassert solution('2 2') == '6'\n\n---Analysis---\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\"\"\""
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '0'\nassert solution('1 9') == '0'\nassert solution('9 5') == '0'\nassert solution('9 1') == '0'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4') == '2'\nassert solution('1 5') == '1'\nassert solution('3 4') == '0'\nassert solution('0 4') == '0'\n\n'''\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"./input.txt\") == \"1 1\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0\\n1 1\\n'''\n\n-----\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"0 0\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"2 1\") == \"1 0\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0\\n1 1\\n'''\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"0 0\"\nassert solution(\"2 2\") == \"1 1\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1\\n'\nassert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '1 1\\n'\nassert solution('2 2\\n1 0\\n0 1\\n1 1\\n1 1\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n'\nassert solution('5 5\\n1 0\\n0 1\\n1 1\\n1 1\\n1 0 0\\n0 1 0\\n0 0 1\\n1 1\\n1 1\\n0 0 0\\n1 1\\n0 0 1\\n1 1') == '0 0\\n0 0\\n0 0\\n0 0\\n1 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 0\\n'\nassert solution('8 8\\n1 0\\n0 1\\n1 1\\n1 1\\n1 0 0\\n0 1 0\\n0 0 1\\n1 1\\n1 1\\n0 0 0\\n1 1\\n0 0 1\\n1 1') == '1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n1 0 1 1\n0 1 0 1\n1 0 1 0\n0 1 0 1\n''') == '0 0\\n1 1\\n1 1\\n0 0\\n'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0 0\\n1 1\\n'\nassert solution('2 2') == '1 1\\n0 0\\n'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\"\n    ) == \"\"\"0 0\"\"\"\n\nassert solution(\n\"\"\"\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\"\n    ) == \"\"\"1 1\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 2, 0.950000]) == '44.975'\nassert solution([0.700000, 50]) == '44.975'\nassert solution([0.900000, 50]) == '50.0'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 0.950000') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975'\n\nassert solution('''\n1 2 0.8\n0.5 0\n''') == '40.008'\n\nassert solution('''\n1 2 0.8\n0.5 0\n''') == '40.008'\n\nassert solution('''\n3 1 1\n0.7 1\n0.5 2\n''') == '4.174'\n\nassert solution('''\n2 1 1\n0.7 1\n0.5 2\n''') == '4.174'"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975'\nprint('Congratulations!')"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50\\n') == '44.975'\nassert solution('1 2 0.950000\\n0.700000 50\\n') == '44.975'\nassert solution('1 2 0.950000\\n0.700000 50\\n') == '44.975'\nassert solution('1 2 0.950000\\n0.700000 50\\n') == '44.975'\nassert solution('1 2 0.950000\\n0.700000 50\\n') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 0.950000') == \"44.975\""
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50\\n') == \"44.975\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1.5 1\n0.8 1\n1 0.5\n\"\"\") == \"51.4\"\nassert solution(\"\"\"\n2\n1 1\n0 0\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n2\n2 1\n1 0.5\n\"\"\") == \"1.0\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2', solution('1 2 3')\nassert solution('5 2') == '3', solution('5 2')\nassert solution('2 5') == '5', solution('2 5')\nassert solution('3') == 'IMPOSSIBLE', solution('3')\nassert solution('3 1') == '1', solution('3 1')\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 2\n3 2\n1 3\n3\n2\n1\nSample Input 2:\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\nSample Output 2:\nIMPOSSIBLE\n\"\"\"):\n    pass\n\nassert solution(\"\"\"\n5 2\n1 1\n5 2\n1 3\n3\n3\n2\n1\nSample Output 3:\n2\n\"\"\"):\n    pass\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('5 2') == '1'\nassert solution('1 3') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n''') == '2'\nassert solution('''\n4 5 4\n1 4\n2 3\n3 4\n4 5\n3\n2\n1\n''') == '3'\nassert solution('''\n10 9 8\n1 2\n4 5\n6 7\n8 9\n3\n2\n1\n''') == '1'\nassert solution('''\n5 5 4\n3 4\n1 5\n1 6\n2 7\n3\n2\n1\n''') == '2'\nassert solution('''\n5 5 5\n3 4\n1 5\n1 6\n2 7\n3\n2\n1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 3\\n1 1\\n5 2\\n1 3\\n3') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"IMPOSSIBLE\"\nassert solution(\"2 3 5\") == \"2\"\nassert solution(\"3 5 1\") == \"2\"\nassert solution(\"2 1 3\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 3') == '2'\nassert solution('1 1') == 'IMPOSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\nassert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('5 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 3\") == \"1\"\nassert solution(\"3 5 3\") == \"2\"\nassert solution(\"3 2 4\") == \"IMPOSSIBLE\"\nassert solution(\"1 3 5\") == \"2\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 3') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 3\\n1 1\\n5 2\\n1 3') == \"2\"\nassert solution('3 2 3\\n1 1\\n5 2\\n1 3') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1\\n2 1\\n3 1\\n4 2\\n5 3') == '3.0'\nassert solution('5 3\\n2 2\\n4 2\\n0 0\\n4 2\\n0 0') == '6.0'\nassert solution('2 2\\n4 4\\n1 1\\n2 1') == '5.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('1.2 1.2') == '2.0'\nassert solution('3 3 2.0 2.0 1.2 3.0 2.0 1.2') == '4.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('2 5') == '2.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"4.0\"\nassert solution(\"1 1\") == \"4.0\"\nassert solution(\"3 3\") == \"4.0\"\nassert solution(\"3 3\") == \"4.0\"\nassert solution(\"1 1\") == \"4.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1\\n1\\n\") == \"2.0\"\nassert solution(\"2\\n3\\n4\\n\") == \"3.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"4.0\"\nassert solution(\"5 5\") == \"7.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n0.0 6.0\n6.0 0.0\n''') == '4.0'\nassert solution('''\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == '4.0'\n'''"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\n\n\"\"\"\nimport math\nimport sys\nimport unittest\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0.1'\nassert solution('1 1') == '0.1'\nassert solution('4 2') == '0.2'\nassert solution('1 3') == '0.0'\nassert solution('6 5') == '0.5'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('5 1') == '3.0'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\n\nassert solution('''\n1\n300 100\n''') == '2450'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '300'\nassert solution('2 0') == '300'\nassert solution('2 100') == '300'\nassert solution('2 1000') == '450000'\nassert solution('2 10000') == '90000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nprint(solution('''\n5\n220 20\n190 30\n160 30\n220 20\n'''))\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '220'\nassert solution('2') == '195'\nassert solution('3') == '200'\nassert solution('4') == '180'"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"18000\""
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n220 29\n195 20\n200 9\n180 30''') == '18000'\nassert solution('''4\n200 9\n200 9\n180 30\n180 30''') == '36000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"18000\""
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('3\\n220 30\\n210 30\\n180 30') == '18000'\nassert solution('4\\n100 50\\n150 80\\n175 20\\n180 30') == '18000'\nassert solution('5\\n150 60\\n190 80\\n240 80\\n200 20') == '18000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n220 30\n195 20\n200 9\n180 30\n''') == '18000'\n'''\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '18000'\nassert solution('15') == '15000'\nassert solution('20') == '20000'\nassert solution('21') == '20100'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('STICKY 10') == '28'\nassert solution('TICKERS 1') == 'IMPOSSIBLE'\nassert solution('ERS 8') == 'IMPOSSIBLE'\n\nSample Input:\nSTICKY 10\nERS 8\nSTICKY 10\nERS 8\nIMPOSSIBLE\nSample Output:\n28\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\nprint(solution(input()))\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8') == '28'\nassert solution('QUIT\\n1\\n1\\n2\\n2\\n3\\n3\\n4\\n4\\n5\\n5\\n6\\n6\\n7\\n7\\n8\\n8\\n9\\n9\\n10\\n10\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"STICKY\") == \"28\"\nassert solution(\"TICKERS\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"BUYSTICKERS\") == \"BUYERTICKERS\"\nassert solution(\"STICKYERERS\") == \"STICKYERS\"\nassert solution(\"TICKETS\") == \"TICKETS\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\nassert solution('''\nBUYSTICKERS\n2\nBUYER 10\nERS 8\n''') == 'IMPOSSIBLE'\n\n'''"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BUYSTICKERS') == 'IMPOSSIBLE'\n\nassert solution('STICKY STICKY STICKY') == '28'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('BUYSTICKERS') == 'BUYER'\nassert solution('TICKERS') == 'TICKERS'\nassert solution('ERS') == 'IMPOSSIBLE'"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\nassert solution('''BUYSTICKERS\n3\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == 'IMPOSSIBLE'\nassert solution('''BUYSTICKERS\n5\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\nPARROT 6\n''') == '28'\nassert solution('''BUYSTICKERS\n2\nBUYER 10\nERS 8\n''') == 'IMPOSSIBLE'\nassert solution('''BUYSTICKERS\n2\nBUYER 10\nERS 8\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\n\n\"\"\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n\"\"\") == \"INDV 2 CORP 1 INDV 5 CORP 2 INDV 1\"\n\nassert solution(\"\"\"\n5 2 8\n1 2\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n\"\"\") == \"INDV 1 CORP 2 INDV 3 CORP 1 INDV 2\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == 'INDV 4\\nINDV 5\\nCORP 1\\nINDV 1\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'\nassert solution('1 1') == 'INDV 1\\nCORP 1\\nINDV 1\\nCORP 1'\nassert solution('2 1') == 'INDV 2\\nCORP 1\\nINDV 2\\nCORP 1'\nassert solution('3 1') == 'CORP 1\\nINDV 1\\nCORP 1\\nINDV 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 8') == 'CORP 1'\nassert solution('4 3 2') == 'CORP 1'\nassert solution('5 2 4') == 'CORP 1'\nassert solution('5 3 1') == 'INDV 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == 'CORP 1'\nassert solution('7 4 5') == 'INDV 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n\"\"\") == \"\"\"INDV 1\"\"\".strip()\n\nassert solution(\"\"\"\n10 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n6 3\n7 3\n8 3\n9 3\n10 3\n\"\"\") == \"\"\"CORP 2\"\"\".strip()\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == 'INDV 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 5\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\\n') == 'INDV 1\\nINDV 2\\nINDV 3\\nCORP 1\\nCORP 2\\nCORP 3\\nCORP 4\\nCORP 5'\nassert solution('3 3 5\\n3 1\\n4 1\\n5 2\\n3 3\\n4 3\\n5 3\\n') == 'INDV 1\\nINDV 3\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 5\\nCORP 3'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 5\\n1 2\\n2 1') == 'INDV 1 CORP 1 INDV 4 CORP 2 INDV 5'"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3') == 'INDV 2\\nINDV 3\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 5\\nCORP 3\\nINDV 1'"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 1 CORP 2 INDV 4 CORP 3 INDV 5 CORP 3 INDV 2 CORP 1'\nassert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 1 CORP 2 INDV 4 CORP 3 INDV 2 CORP 1'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10') == '2.4142135624'\nassert solution('6\\n10 2\\n4 1\\n5\\n10 3\\n2\\n1\\n2\\n3\\n4\\n6\\n10 2\\n4 1\\n5\\n10 3\\n2\\n1\\n2\\n3\\n4\\n6\\n') == '1.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n10 1\n1\n0\n10\n10\n''') == '2.4142135624'\nassert solution('''\n4\n5\n5\n10\n10\n''') == '8.0'\nassert solution('''\n8\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n6 3\\n0 1\\n2 3\\n4 2\\n3 1\\n5 1\\n') == '4.2429603427'\nassert solution('10\\n100 1\\n200 3\\n250 2\\n') == '42.451612903'\nassert solution('8\\n100 1\\n200 3\\n250 2\\n100 2\\n250 3\\n') == '42.518036238'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 1\\n0\\n10\\n0\") == \"0.0\"\nassert solution(\"4\\n10 1\\n1\\n10\\n10\") == \"1.4142135624\"\nassert solution(\"4\\n10 1\\n1\\n10\\n10\") == \"1.4142135624\"\nassert solution(\"4\\n20 1\\n1\\n10\\n0\") == \"2.8284271247461903\"\nassert solution(\"4\\n20 1\\n0\\n10\\n0\") == \"2.0\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 1') == '2.4142135624'\nassert solution('100 1') == '50.0'\nassert solution('2000 1') == '2'\nassert solution('4 200') == '2.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    4\n    10 1\n    1\n    0\n    10\n    10\n''') == \"2.4142135624\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n1\\n2\\n3\\n\") == \"2.4142135624\"\nassert solution(\"5\\n10 1\\n1\\n2\\n3\\n\") == \"2.25\"\nassert solution(\"5\\n10 2\\n1\\n2\\n3\\n\") == \"2.75\"\nassert solution(\"4\\n3 3\\n0\\n2\\n3\\n\") == \"5.0\""
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n10 1\\n1\\n0\\n10') == '2.4142135624'\nassert solution('10\\n10\\n10\\n10\\n10\\n10') == '1.0'\nprint(solution(input()))"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n10 1\\n0') == '2.4142135624'\nassert solution('8\\n10 1\\n10\\n0\\n10\\n0\\n10\\n0') == '4.82842712475'\n\n\"\"\""
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2.4142135624\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 5\\n3 1 5\\n2 1') == '15\\n'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n2 3\n1 2\n2 3\n2 4\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n5\n2 1\n1 2\n4 1\n1 3\n1 4\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n2 4\n2 5\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n5\n2 2\n2 4\n2 3\n4 4\n4 5\n\"\"\") == \"13\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1, 2, 5]) == \"15\"\nassert solution([3, 1, 5, 0]) == \"9\"\nassert solution([5, 0, 3, 1]) == \"12\"\nassert solution([1, 3, 5, 0]) == \"10\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '15'\nassert solution('5\\n0 1\\n1 3\\n3 1\\n1 2\\n1 3\\n3 2\\n3 1') == '18'\nassert solution('4\\n1 2 3\\n2 1\\n2 3\\n3 1\\n3 2\\n') == '21'\nassert solution('5\\n1 0\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '16'\nassert solution('5\\n1 0\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '11'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\nassert solution('''\n3\n3 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '10'\n\nassert solution('''\n4\n3 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '7'\n\nassert solution('''\n5\n3 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '5'\n\nassert solution('''\n6\n4 1 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '4'"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1\\n1 2 5\\n2 3 1\\n5 0\\n1 3\"\n) == \"15\\n\"\n\nassert solution(\n    \"5\\n0 2 1\\n1 2 3\\n1 3\"\n) == \"3\\n\"\n\nassert solution(\n    \"3\\n1 2 5\\n3 1 5\\n2 1\"\n) == \"1\\n\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 5\") == \"5\"\nassert solution(\"3 1 5\") == \"5\"\nassert solution(\"3 1 5 2\") == \"8\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 5\\n3 1 5\\n2 1\") == \"15\"\nassert solution(\"10\\n1 2 5\\n3 1 5\\n2 1\\n10 1 2\") == \"11\"\nassert solution(\"1\\n1 2 5\\n3 1 5\\n2 1\\n10 1 2\") == \"11\"\nassert solution(\"5\\n1 2 5\\n3 1 5\\n2 1\\n10 1 2\\n5 0\") == \"15\"\nassert solution(\"1\\n1 2 5\\n3 1 5\\n2 1\\n10 1 2\\n5 0\\n10 0 2\\n1 3 4\\n1 3 4\") == \"17\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    1 2 5\n    3 1 5\n    2 1\n    5 0\n    1 3\n    ''') == '15'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 5\") == \"15\"\nassert solution(\"3 1 5\") == \"10\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 0\") == \"0\"\nassert solution(\"1 3\") == \"10\"\n\nn = int(input())\n\nfor i in range(n - 1):\n    u, v, c = map(int, input().split())\n    arr[u - 1][v - 1] = c\n\nfor i in range(n):\n    print(min(arr[i]))"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD\n''') == 'PAB.CBA.DCDDDDCDD'\nassert solution('''\n.@B@C\n.....\n.@Z@C\n@DB@D\n@AB@A\n''') == 'PAB.CBA.DCDDDDCDD'\nassert solution('''\n.@B@C\n.....\n.@Z@C\n@DB@D\n@AB@A\n''') == 'PAB.CBA.DCDDDDCDD'\nassert solution('''\n.@B@C\n.....\n@Z.C\n@DB@D\n@AB@A\n''') == 'PAB.CBA.DCDDDDCDD'\nassert solution('''\n.....\n.@B@C\n@Z.C\n@DB@D\n@AB@A\n''') == 'PAB.CBA.DCDDDDCDD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\n..ABC\n..ADCD\n....CD\n@DDDD\n''')\nassert solution('''\n5 5 2 2 3\n''') == '''\n.\n.\n@\n@\n'''\n\nimport itertools\nimport collections\nimport sys\nimport math"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"....C\"\nassert solution(input) == \"DDDD\"\n\"\"\"\n\nr, c, i, j, n = map(int, stdin.strip().split())\n\nfor _ in range(n):\n    # rotates, then switches direction\n    for _ in range(i):\n        r, c = c, r\n\n    # goes down\n    for _ in range(c):\n        i += 1\n        if i == r:\n            i = 1\n        if i == 1:\n            j += 1\n        if j == c:\n            j = 1\n\n    # moves up\n    for _ in range(c):\n        i -= 1\n        if i == 0:\n            i = r\n        if i == r:\n            j -= 1\n        if j == 0:\n            j = c\n\nprint(''.join(chr(ord('A') + i) for i in range(r*c))[::-1])\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 3 3 4\\n\") == \"....C\\n..A.C\\n.....C\\n@DDDD\"\nassert solution(\"3 3 3 2\\n@\\n@\\n@\") == \"..C\\n...C\\n@C\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5 3 3 4\n@DDDD\n..BBC\n..A.C\n....C\n.....''') == ''.join(map(str,[\n    ['.','.','.','.','.'],\n    ['.','.','.','.','.'],\n    ['.','.','.','.','.'],\n    ['.','.','.','.','.'],\n    ['.','.','.','.','@']\n]))\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n...BBC\\n..A.C\\n....C\\n@DDDD'\n'''"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('1 1 1 2') == '@'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 3 3\n1 1 2''') == '.........\n'''\n\nimport re"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\".@.A.C..DDDD\") == '....C'\nassert solution(\".@.@.@..DDDD\") == '@DDDD'\nassert solution(\".@.@.@.@..DDDD\") == '@DDDD'\nassert solution(\".@.@.@.@..DDDD\") == '@DDDD'\nassert solution(\".@.@.@.@..DDDD\") == '@DDDD'\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 2 2\") == \".........\"\nassert solution(\"2 3 3 1 1 2\") == \"..BBB..B\"\nassert solution(\"5 5 5 3 4\") == \"...CCCC...\"\nassert solution(\"5 5 5 4 3\") == \"...CDCDC...\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001'\nassert solution('''5 3\n110\n010\n000\n111\n000''') == '111'\nassert solution('''5 3\n111\n010\n000\n111\n000''') == '011'\nassert solution('''5 3\n111\n010\n000\n111\n000''') == '111'\nassert solution('''5 3\n111\n010\n000\n111\n000''') == '011'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n101\\n111\\n000\") == \"0010111\"\n\nimport sys\nimport itertools\n\nn, m = map(int, input().split())\n\ns = input()\n\nl = []\nl.append(s[0:m])\nfor i in range(1,n):\n    temp = []\n    for j in range(m):\n        temp.append(s[m*i+j])\n    l.append(''.join(sorted(temp)))\n\nprint('\\n'.join(l))\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001001000'\nassert solution('''5 1\n111''') == '0111'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\nSample Input 2:\n5 3\n111\n111\n001\n000\n001\n000\n000\n000\n001\n000\n000\n000\n001\n000\n001\n001\n111\n000\n111\n111\n000\n001\n000\n000\n000\n000\n001\n000\n001\n111\n000\n111\n111\n000\n000\n000\n001\n000\n001\n000\n000\n000\n111\n000\n111\n111\n000\n000\n000\n001\n000\n001\n000\n000\n000\n000\n000\n000\n001\n000\n001\n000\n000\n001\n001\n000\n000\n000\n000\n000\n000\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n111\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n123\\n1234\\n\") == \"1234\"\nassert solution(\"1 2\\n123\\n123\\n\") == \"123\"\nassert solution(\"1 2\\n123\\n1234\\n\") == \"123\"\nassert solution(\"1 2\\n123\\n12\\n\") == \"123\"\nassert solution(\"1 2\\n12\\n123\\n\") == \"123\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n12') == '12'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"4 3\") == \"001\""
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"0000\"\nassert solution(\"3 3\") == \"0000\"\nassert solution(\"4 3\") == \"0000\"\nassert solution(\"5 3\") == \"0000\"\nassert solution(\"6 3\") == \"0000\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200\\n'\nassert solution('8 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n111\\n'"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('19/13\\n10/1\\n19/14') == '19 20'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"19/13\\n10/1\") == \"19 20\"\nassert solution(\"19/14\\n4/3\") == \"19 20\"\nassert solution(\"4/3\\n10/7\") == \"20 17\"\nassert solution(\"19/7\\n20/13\") == \"20 17\"\nassert solution(\"19/2\\n19/17\") == \"19 17\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 20'\nassert solution('19/14') == '17 15 14 13 7 2'\nassert solution('4/3') == '10 20'\nassert solution('20/7') == '17 15 14 13 7 2'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"19/13\\n10/1\") == \"19 20\"\nassert solution(\"19/14\\n10/1\") == \"19 20\"\nassert solution(\"19/15\\n10/1\") == \"19 20\"\nassert solution(\"19/2\\n10/1\") == \"impossible\"\nassert solution(\"19/17\\n10/1\") == \"impossible\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 20'\nassert solution('19/14') == '19 10'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '20 10'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"19 20\"\nassert solution(\"4/3\") == \"4 3\"\nassert solution(\"20/7\") == \"20\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"19\"\nassert solution(\"4/3\") == \"4\"\nassert solution(\"20/7\") == \"20\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 20'\nassert solution('19/14') == '20 18'\nassert solution('4/3') == '3 12 8 9 6 10'\nassert solution('20/7') == '7 9 14 21 23 26'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"19/13\") == \"20 20\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"19\"\nassert solution(\"4/3\") == \"4\"\nassert solution(\"20/7\") == \"20\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n''') == 'possible'\n'''\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3') == 'impossible'\nassert solution('3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3') == 'possible'\nassert solution('5 2\\n3 4 5\\n4 0 5\\n3 2 4\\n5 0 1\\n4 4 2\\n3 2 4\\n5 4 5') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2 2\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"impossible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n4 4 4\") == \"possible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n3 3 3\") == \"impossible\"\nassert solution(\"3 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\\n4 4 4\\n5 5 5\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == 'possible'\nassert solution('0 0') == 'impossible'\nassert solution('0 2') == 'possible'\nassert solution('2 0') == 'impossible'\nassert solution('1 2 3') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'impossible'\nassert solution('0 0') == 'possible'\nassert solution('0 2') == 'possible'\nassert solution('2 0') == 'possible'\nassert solution('1 2 3') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == 'impossible'\nassert solution('3 3') == 'possible'\nassert solution('2 3') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'possible'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n') == '4'\nassert solution('3\\n1\\n3\\n') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n2\n2\n2\n2\n''') == '4'\nassert solution('''4 1\n1\n1\n1\n1\n''') == '3'\nassert solution('''3\n2\n3\n1\n''') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4') == '4'\nassert solution('2\\n3\\n4\\n5') == '5'\nassert solution('2\\n2\\n2\\n2') == '2'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\n1\n1\n1\n1\n''') == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n2\\n2\\n2') == '2'\nassert solution('1\\n2\\n3\\n4') == '3'\nassert solution('1\\n4\\n3\\n2') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1 2 3') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n'\n    '2\\n'\n    '3'\n) == '4'\nassert solution(\n    '5\\n'\n    '4\\n'\n    '4\\n'\n    '4\\n'\n    '3'\n) == '5'\nassert solution(\n    '7\\n'\n    '6\\n'\n    '6\\n'\n    '5\\n'\n    '4\\n'\n    '4\\n'\n    '4\\n'\n    '3'\n) == '7'\nassert solution(\n    '12\\n'\n    '8\\n'\n    '8\\n'\n    '8\\n'\n    '9\\n'\n    '7\\n'\n    '7\\n'\n    '7\\n'\n    '6\\n'\n    '6\\n'\n    '5\\n'\n    '4\\n'\n    '4\\n'\n    '4\\n'\n    '4\\n'\n    '3'\n) == '12'\n\n'''\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n') == '3'\nassert solution('2\\n3\\n3\\n') == '3'\nassert solution('3\\n3\\n3\\n') == '3'\nassert solution('4\\n2\\n1\\n') == '4'\nassert solution('5\\n2\\n3\\n3\\n') == '5'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n4\n3\n2\n1\n''') == '4'\nassert solution('''\n5\n4\n3\n2\n1\n''') == '5'\nassert solution('''\n4\n5\n4\n3\n2\n''') == '5'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '4'\n\n'''"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == 'Slavko'\nassert solution('''\n5\n1 1\n1 3\n2 3\n3 1\n3 2\n''') == 'Mirko'\n\n'''\n--- Part Two ---\nIn the final round, Mirko and Slavko draw $N$ more points.\n\nThe resulting $2N$-sized coordinate system is called the new coordinate system. The points placed in the new system are called the new points.\n\nThe new points are distributed such that each player is given a unique set of points. Mirko draws first and then Slavko. If a player has an odd number of points in the set, that player wins the round. If a player has an even number of points in the set, the player who drew the furthest point wins the round. The players are given $2N$ cards each.\n\nFor example, if $N=4$ and the new coordinate system is shown below:\n\n1 2\n1 3\n2 1\n2 3\n\nand the players are given the following cards:\n\n1 2\n1 3\n2 2\n2 3\n\nIn this case, the player who drew the furthest point wins the round.\n\nThe players draw $N$ more points and then the winner is decided. The winner of the round is the player who has the most points. If there is a tie, then the player who drew the second furthest point wins.\n\nFor example, if $N=5$ and the new coordinate system is shown below:\n\n1 2\n1 3\n2 1\n2 3\n\nand the players are given the following cards:\n\n1 1\n1 2\n1 3\n2 1\n2 3\n\nIn this case, both players have 3 points and the winner is the player who drew the second furthest point.\n\nGiven $N=50$, how many ways can the new coordinate system be distributed so that each player has an even number of points?\n''')"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3') == 'Slavko'\n\nassert solution('4\\n1 2\\n3 4\\n2 1\\n3 4\\n4 3\\n1 2\\n2 3') == 'Mirko'"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n1 3''') == 'Mirko'\n\nassert solution('''5\n1 1\n1 2\n1 3\n2 2\n2 3''') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == 'Mirko'\nassert solution('''\n3\n1 1\n1 2\n1 3\n''') == 'Slavko'\nassert solution('''\n3\n1 2\n2 1\n2 2\n''') == 'Slavko'\nassert solution('''\n3\n1 1\n2 1\n3 1\n''') == 'Mirko'\nassert solution('''\n3\n1 1\n1 2\n3 1\n''') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n''') == \"Mirko\"\nassert solution('''5\n1 1\n1 2\n1 3\n1 4\n1 5\n''') == \"Slavko\"\nassert solution('''1\n1 1\n''') == \"Slavko\"\nassert solution('''1\n1 2\n''') == \"Slavko\"\nassert solution('''1\n1 1\n''') == \"Mirko\""
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == \"Mirko\"\nassert solution('2') == \"Slavko\""
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Mirko\""
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == \"Mirko\"\nassert solution('5') == \"Mirko\"\nassert solution('1 1') == \"Slavko\"\nassert solution('1 2') == \"Slavko\"\nassert solution('1 3') == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1\n2 2\n3 3\n2 4\n''') == 'Slavko'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == stdin.strip().split('\\n')\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n6\n34\n38''') == '2 4'\nassert solution('''6\n8\n17\n20\n26\n28\n30''') == '1 2 3 4 5 6'\n\n'''\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3\n    6\n    34\n    38\n''') == '2 4'\n\nassert solution('''\n    5\n    10\n    6\n    15\n    20\n''') == '1 3 5'\n\nassert solution('''\n    5\n    10\n    2\n    8\n    12\n''') == '2 1 3 5'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2 2\\n2 2\\n2 2\"\nassert solution(\"3\") == \"2 4\\n2 4\\n2 4\"\nassert solution(\"5\") == \"2 4\\n2 4\\n2 4\\n2 4\\n2 4\"\nassert solution(\"10\") == \"2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\"\nassert solution(\"50\") == \"2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\\n2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n6\n34\n38''') == '2 4'\nassert solution('''5\n1\n2\n3\n4\n5''') == '1 2 3 4 5'\nassert solution('''6\n1\n2\n3\n4\n5\n6''') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n6\n34\n38\n\"\"\") == \"2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2 4\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1\n4\n2\n5\n3''') == '1 2'\n\nassert solution('''4\n1\n3\n2\n5''') == '2 3'\n\nassert solution('''3\n1\n2\n4''') == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2 4'\nassert solution('4') == '1 2'\nassert solution('7') == '2 4'\nassert solution('11') == '1 2'\nassert solution('26') == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2 4\"\nassert solution(\"1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"1 2 3 4 5 6 7\") == \"1 2 3 4 5 6 7\"\n\"\"\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\n\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n\nassert solution('''\n6\n7 2631579 2631579 2631579 2631579\n''') == '21'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n6\n-1000 -1000 -1000 -1000 -1000\n''') == '0'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n9000 900000 1000000\n3\n10 20 30''') == '12'\nassert solution('''5\n90000 900000 1000000\n3\n10 20 30''') == '12'\nassert solution('''4\n4 5 6 7\n0\n1\n2\n3''') == '10'\nassert solution('''5\n4 5 6 7\n0\n1\n2\n3\n4''') == '16'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\n\"\"\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\nassert solution('''\n9\n6000000 8000 50000000 30556926000\n''') == '23'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '23'\nassert solution('''\n4\n10000 400000 500000 900000\n''') == '12'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '4'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"12\""
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n5 1\n4 1 0\n0\n2 4 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\"\n) == \"YES\"\nassert solution(r\"\"\"\n1 1\n3 1 0\n0\n4 4 0\n4 4 0\n5 5 0\n4 2 6 0\n1 6 0\n5 3 7 0\n1 6 0\n7 3 0\n\"\"\"\n) == \"YES\"\nassert solution(r\"\"\"\n1 1\n4 1 0\n0\n2 4 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\"\n) == \"YES\"\nassert solution(r\"\"\"\n1 1\n4 1 0\n0\n2 4 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\"\n) == \"YES\"\nassert solution(r\"\"\"\n3 1\n4 1 0\n0\n2 4 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\"\n) == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\nassert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'NO'\nassert solution('''\n20 8\n
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0\n2 1\n1 2\n''') == 'YES', \"Simple\"\nassert solution('''\n10\n0\n1 2 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2 1\n1 2 1 1 1 1 2 1 2 1 2"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES', '''Sample Tests'''\nassert solution('''\n12\n10 20 0\n15 40 0\n9 20 0\n1 30 0\n1 20 0\n''') == 'YES', '''Sample Tests'''\n\n'''\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"2 1 3 4\") == \"NO\"\nassert solution(\"5 3 5 5 5\") == \"NO\"\nassert solution(\"6 7 8 9 10\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('8 8') == 'YES'\nassert solution('5 3 7 0') == 'NO'\nassert solution('2 4 0') == 'YES'\nassert solution('1 8 0') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4 0\\n0 1 0\\n0 1 0\\n0 1 0\\n0 1 0\\n1 6 0\") == 'NO'\nassert solution(\"5 4 0\\n0 1 0\\n0 1 0\\n0 1 0\\n0 1 0\\n1 6 0\") == 'YES'\nassert solution(\"5 4 0\\n0 1 0\\n0 1 0\\n0 1 0\\n0 1 0\\n0 1 0\\n0 1 0\") == 'NO'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('10 20 30 40 50 60 70 80 90 100') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('3 10 20 30 40 50 60 70 80 90 100') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('10 10 10 10 10 10 10 10 10 10 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4 3\n1 2 3 4\n\"\"\"\n) == \"\"\"5 6 1 2 3 4\"\"\"[:-1]\n\nassert solution(\n\"\"\"\n5 1\n2 3\n5 1\n3 5\n3 1\n\"\"\"\n) == \"\"\"5 6 1 2 3 4\"\"\"[:-1]\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n6 2\n3 4 5 6 1 2\n\"\"\") == \"5 6 1 2 3 4\"\nassert solution(\"\"\"\n3 2\n1 2 3\n\"\"\") == \"1 2 3 1\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\nassert solution('''\n6 2\n3 4 5 6 1 2\n1 2 3 4 5 6\n''') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5 6 1 2 3 4\"\nassert solution(\"2 3\\n5 6 1 2\") == \"3 5 4 1 2\"\nassert solution(\"3 5 4 1 2\") == \"5 6 1 2 3\"\nassert solution(\"2 2\\n2 2\") == \"2 2\"\nassert solution(\"1 2\\n2 1\") == \"1 2\"\n\n---Input---\n6 2\n3 4 5 6 1 2\n\n---Output---\n1 2 3 5 4\n\n---Input---\n6 2\n3 4 5 6 1 2\n\n---Output---\n3 5 4 1 2 6\n\n---Input---\n6 3\n2 2 4 5 3 6\n\n---Output---\n3 5 2 4\n\n---Input---\n10 2\n1 1 1 2 2 2 3 3 3 3 3 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"1 1 1 1 1\"\nassert solution(\"5 5\") == \"1 1 1 1 1\"\nassert solution(\"1 1\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3 4 5 6 1 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"1 3 2 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\nassert solution('''\n3 2\n2 1 2 3\n''') == '1 2 3 2 1'\nassert solution('''\n1 2\n1 3\n''') == '3 2 1 1 2'\nassert solution('''\n5 2\n1 2 3 4 1 2\n''') == '1 1 3 4 2 4'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\""
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('3 6 10 5') == 'IMPOSSIBLE'\nassert solution('9 8 2 5') == '955'\nassert solution('5 4 5 5') == 'IMPOSSIBLE'\nassert solution('7 2 8 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('5 2 5 4') == 'IMPOSSIBLE'\nassert solution('100 3 2 5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"15 6 8 4\") == \"1512\"\n\nassert solution(\"5 2 8 4\") == \"204\"\n\nassert solution(\"17 7 6 1\") == \"1\"\n\nassert solution(\"3 4 5 2\") == \"IMPOSSIBLE\"\n\nassert solution(\"12 11 4 5\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 8 4') == '20512'\nassert solution('2 4 8 1') == 'IMPOSSIBLE'\nassert solution('8 5 2 3') == '8103'\nassert solution('8 3 8') == 'IMPOSSIBLE'\nassert solution('8 3 2') == '8103'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 8 4') == '20512'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'IMPOSSIBLE'\nassert solution('3 7') == '3273'\nassert solution('5 2 3 4') == '3624'\nassert solution('5 2 1 2 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 2 3') == '1113', 'Sample Test 1'\nassert solution('6 8 3 2') == '11113', 'Sample Test 2'\nassert solution('1 1 1 1') == '11111', 'Sample Test 3'\nassert solution('10 10 1 1') == '111111', 'Sample Test 4'\nassert solution('10 20 10 2') == '1111122', 'Sample Test 5'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2 8 4''') == '20512'\nprint('Solution Accepted')\n\n'''\n---\nThe given input is a number. We need to cross out the first two digits of the number to form a four-digit number. After that, we need to place a $8$ after the remaining three digits. After that, we have to multiply the resulting four-digit number by a number $4$ to get the original five-digit number. If such an five-digit number exists, return it; otherwise return the string IMPOSSIBLE.\n\nTo make things more concrete, we need to note that the problem can be solved by finding a number that meets all the requirements; that is, the given number must be formed by the following rule:\n\nIf we have a number in the form $aa$ where $a$ is a digit, we can use it to form another number in the form $ab$, and we can use the resulting number to form another number in the form $a'b', a number that meets all the requirements.\n\nIf we have a number in the form $ab$ where $a$ and $b$ are digits, we can use it to form another number in the form $a'bc'$, and we can use the resulting number to form another number in the form $ab'c', a number that meets all the requirements.\n\nIn short, we need to find a number that meets all the requirements.\n\nThe main idea is that we first need to find a number that meets the requirements, and then we can place a number behind it to make it work.\n\nFor example, if we have a number in the form $aba$, we can form a number in the form $abb$, and we can form a number in the form $abc$ to make it work.\n\nAlso, we need to try to form a number in the form $ab'c$, as well.\n\nAs an example, let us consider the number $2120$:\n\nIt meets all requirements by itself, and can be formed by placing the digit $2$ after the digits $1$, $2$ and $0$.\n\nLet us try to place the digit $1$ after the digits $2$ and $0$ to make the resulting number work:\n\nThen, it meets all requirements again, and can be formed by placing the digit $1$ after the digits $2$ and $1$; it can also be formed by placing the digit $2$ after the digits $1$ and $0$.\n\nSo, we can form a number in the form $21'00'$, and it will be a valid number.\n\nLet us try to place the digit $1$ after the digits $0$ and $1$ to make the resulting number work:\n\nThen, it meets all requirements again, and can be formed by placing the digit $1$ after the digits $0$ and $1$.\n\nSo, we can form a number in the form $201'1'$, and it will be a valid number.\n\nLet us try to place the digit $2$ after the digits $0$ and $1$ to make the resulting number work:\n\nAs we mentioned, if we have a number in the form $aa$ where $a$ is a digit, we can use it to form another number in the form $ab$, and we can use the resulting number to form another number in the form $a'b', a number that meets all the requirements.\n\nAs we mentioned, if we have a number in the form $ab$ where $a$ and $b$ are digits, we can use it to form another number in the form $a'bc'$, and we can use the resulting number to form another number in the form $ab'c', a number that meets all the requirements.\n\nIn short, we need to find a number that meets all the requirements, and then we can place a number behind it to make it work.\n\nWe can try these two examples and have a better understanding of the problem:\n\nSample Input:\n3 2 1\nSample Output:\n243\n412\n243\nExample Explanation:\n\nIn the first example, we can form the following numbers:\n\n$1$, $2$, $1$, $2$, $1$, $2$\n\nIn the second example, we can form the following numbers:\n\n$1$, $2$, $1$, $2$, $1$, $2$\n\nIn this case, we can put a number behind $1$ to make the number work.\n\nSo, we can form numbers in the following manner:\n\n$1'2', $2'1', $1'2'$, $2'1', $1'2', $2'1'$, $1'2', $2'1', $1'2'$\n\nSo, we can form the following numbers:\n\n$1'2', $2'1', $1'2'$, $2'1', $1'2', $2'1'$, $1'2', $2'1', $1'2'$\n\nWe can also apply this same technique to any other number:\n\nIn the first example, we can form the following numbers:\n\n$1$, $2$, $1$, $2$, $1$, $2$\n\nIn the second example, we can form the following numbers:\n\n$1$, $2$, $1$, $2$, $1$, $2$\n\nIn this case, we can put a number behind $1$ to make the number work.\n\nSo, we can form numbers in the following manner:\n\n$1'2', $2'1', $1'2'$, $2'1', $1'2', $2'1'$, $1'2', $2'1', $1'2'$\n\nSo, we can form the following numbers:\n\n$1'2', $2'1', $1'2'$, $2'1', $1'2', $2'1'$, $1'2', $2'1', $1'2'$\n\nThe given input is guaranteed to contain a number.\n\n-----Task-----\nRead in four numbers, represented as strings, and print the smallest number that meets all the requirements of the problem. If there is no valid number, print the string IMPOSSIBLE.\n\n---Sample Input---\n\n5 2 8 4\n---Sample Output---\n\n20512\n\n'''\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 8 4') == '20512'"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 3"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\nassert solution('2 3') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\nBAC\nABC\n''') == 2\n\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == 3\n\nassert solution('''\n2 9\nBCADECAB\nBCDABCA\n''') == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == ''\nassert solution('2') == 'ABC'\nassert solution('3') == 'ABC'\nassert solution('4') == 'ABCD'\nassert solution('5') == 'ABDCD'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == '2'\nassert solution(\"3 8\") == '3'"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"BAC\") == \"BAC\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"HGBDFCAE\") == \"HGBDFCAE\"\nassert solution(\"ADBGHFCE\") == \"ADBGHFCE\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '3'\nassert solution('4 2') == '9'\nassert solution('6 6') == '54'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '3'\nassert solution('2 2') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1, 2]) == \"3\"\nassert solution([2, 3]) == \"6\"\nassert solution([2, 1]) == \"3\"\nassert solution([2, 2]) == \"4\"\nassert solution([2, 2, 1]) == \"4\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([1, 2]) == '3'\nassert solution([4, 5]) == '28'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('5 4') == '6'\n\n\ninput()\ninput()\nprint(solution(input()))\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('1 1\\n') == '4'\nassert solution('2 2\\n') == '4'\nassert solution('3 3\\n') == '12'\n\n\n-----------------"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 3') == '3'\nassert solution('3 1 2') == '1'\nassert solution('3 0 2 3') == '2'\nassert solution('3 0 1 4') == '2'\nassert solution('2 1 4') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3''') == \"3\"\nassert solution('''8 4\n0 1 3 4 2 0\n0 0 0 0 2\n2 3 0 3 1\n4 0 2 2 0\n1 1 3 0 3\n3 2 0 2 1\n2 1 2 3 3''') == \"2\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 2\n3 0\n3 0\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 1 2\n1 0 2\n0 1 2\n0 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1 1\n1 0 1\n0 1 1\n\"\"\") == \"1\""
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '3'\nassert solution('20 20') == '5'\nassert solution('5 10') == '10'\nassert solution('5 10') == '10'\nassert solution('20 20') == '5'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\\n\") == \"3\"\n\n'''\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nprint(solution('''5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3'''))\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\n4 0 4\n3 0 1 2\n2 0 1\n2 0 2\n3 0 4\n3 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2\n3 0 1\n2 1 1\n1 0 1\n2 2 2\n3 0 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '3'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n3\n2 2\n1 2\n3 2\n3 1\n2 1\n''') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n5\\n1 1\\n1 3\\n2 2\\n2 3') == 'YES\\n'\nassert solution('3\\n7\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2') == 'NO\\n'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'NO'\nassert solution('''\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n3\n1 1\n1 3\n2 2\n''') == 'YES'\nassert solution('''\n10\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n7\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\n\n'''\n\n'''\n\n'''\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 'YES'\nassert solution(\"2\") == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n2\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'NO'"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1') == 'YES'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1\n1\n''') == '3.0'\nassert solution('''\n20\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('4') == '4.000000000'\nassert solution('10') == '9.99999999'\n\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.5\"\nassert solution(\"2\") == \"1.8\"\nassert solution(\"3\") == \"2.8\"\nassert solution(\"4\") == \"3.8\"\nassert solution(\"5\") == \"4.8\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('3') == '5.000000000'\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '5'\nassert solution('8\\n') == '9'\nassert solution('1\\n') == '0.9999999998'\nassert solution('10000\\n') == '10001'\nassert solution('12\\n') == '9.999999998'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"3.000000000\"\nassert solution(\"1\\n\") == \"1.000000000\"\nassert solution(\"100\\n\") == \"100.0000000000\"\nassert solution(\"1000\\n\") == \"999.9999999999\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3.000000000'\n\n\"\"\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1.000000000000'\nassert solution('2\\n') == '2.000000000000'\nassert solution('5\\n') == '2.000000000000'\nassert solution('10\\n') == '3.000000000000'\nassert solution('100\\n') == '3.000000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '3.000000000'\nassert solution('2\\n3') == '3.000000000'\n\"\"\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('12') == '13.000000000'\nassert solution('10') == '9.906250000'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n3\n''') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n3\n''') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n3\n2\n4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n3\n''') == \"1\"\nassert solution('''\n5 2\n3 4\n''') == \"2\"\nassert solution('''\n5 1\n3 4\n''') == \"3\"\nassert solution('''\n5 2\n2 3\n''') == \"3\"\nassert solution('''\n5 2\n2 3\n''') == \"2\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2\n3''') == '1'\nassert solution('''1 2\n4\n5''') == '1'\nassert solution('''5\n4\n3\n2\n1''') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\nassert solution('1 2 3') == '3'\nassert solution('5 2 6 1 3 5 2') == '4'\nassert solution('3') == '1'"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 2\\n3\") == \"1\"\nassert solution(\n    \"1 2\\n3\") == \"1\"\nassert solution(\n    \"1 2\\n3\") == \"1\"\nassert solution(\n    \"10 20\\n5 10\\n6 7\\n8 9\\n9 10\\n10 15\\n11 12\\n14 13\\n15 17\\n17 18\\n20 10\\n21 16\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101\\n101 102\\n102 103\\n103 104\\n104 105\\n105 106\\n106 107\\n107 108\\n108 109\\n109 110\\n110 111\\n111 112\\n112 113\\n113 114\\n114 115\\n115 116\\n116 117\\n117 118\\n118 119\\n119 120\\n120 121\\n121 122\\n122 123\\n123 124\\n124 125\\n125 126\\n126 127\\n127 128\\n128 129\\n129 130\\n130 131\\n131 132\\n132 133\\n133 134\\n133 135\\n133 136\\n134 137\\n134 138\\n134 139\\n135 140\\n135 141\\n135 142\\n136 143\\n136 144\\n136 145\\n137 146\\n137 147\\n137 148\\n138 149\\n138 150\\n138 151\\n139 152\\n139 153\\n139 154\\n140 155\\n140 156\\n140 157\\n141 158\\n141 159\\n141 160\\n142 161\\n142 162\\n142 163\\n143 164\\n143 165\\n143 166\\n144 167\\n144 168\\n144 169\\n145 170\\n145 171\\n145 172\\n146 173\\n146 174\\n146 175\\n147 176\\n147 177\\n147 178\\n148 179\\n148 180\\n148 181\\n149 182\\n149 183\\n149 184\\n150 185\\n150 186\\n150 187\\n151 188\\n151 189\\n151 190\\n152 191\\n152 192\\n152 193\\n153 194\\n153 195\\n153 196\\n154 197\\n154 198\\n154 199\\n155 200\\n155 201\\n155 202\\n156 203\\n156 204\\n156 205\\n157 206\\n157 207\\n157 208\\n158 209\\n158 210\\n158 211\\n159 212\\n159 213\\n159 214\\n160 215\\n160 216\\n160 217\\n161 218\\n161 219\\n161 220\\n162 221\\n162 222\\n162 223\\n163 224\\n163 225\\n163 226\\n164 227\\n164 228\\n164 229\\n165 230\\n165 231\\n165 232\\n166 233\\n166 234\\n166 235\\n167 236\\n167 237\\n167 238\\n168 239\\n168 240\\n168 241\\n169 242\\n169 243\\n169 244\\n170 245\\n170 246\\n170 247\\n171 248\\n171 249\\n171 250\\n172 251\\n172 252\\n172 253\\n173 254\\n173 255\\n173 256\\n174 257\\n174 258\\n174 259\\n175 260\\n175 261\\n175 262\\n176 263\\n176 264\\n176 265\\n177 266\\n177 267\\n177 268\\n178 269\\n178 270\\n178 271\\n179 272\\n179 273\\n179 274\\n180 275\\n180 276\\n180 277\\n181 278\\n181 279\\n181 280\\n182 281\\n182 282\\n182 283\\n183 284\\n183 285\\n183 286\\n184 287\\n184 288\\n184 289\\n185 290\\n185 291\\n185 292\\n186 293\\n186 294\\n186 295\\n187 296\\n187 297\\n187 298\\n188 299\\n188 300\\n188 301\\n189 302\\n189 303\\n189 304\\n190 305\\n190 306\\n190 307\\n191 308\\n191 309\\n191 310\\n192 311\\n192 312\\n192 313\\n193 314\\n193 315\\n193 316\\n194 317\\n194 318\\n194 319\\n195 320\\n195 321\\n195 322\\n196 323\\n196 324\\n196 325\\n197 326\\n197 327\\n197 328\\n198 329\\n198 330\\n198 331\\n199 332\\n199 333\\n199 334\\n200 335\\n200 336\\n200 337\\n201 338\\n201 339\\n201 340\\n202 341\\n202 342\\n202 343\\n203 344\\n203 345\\n203 346\\n204 347\\n204 348\\n204 349\\n205 350\\n205 351\\n205 352\\n206 353\\n206 354\\n206 355\\n207 356\\n207 357\\n207 358\\n208 359\\n208 360\\n208 361\\n209 362\\n209 363\\n209 364\\n210 365\\n210 366\\n210 367\\n211 368\\n211 369\\n211 370\\n212 371\\n212 372\\n212 373\\n213 374\\n213 375\\n213 376\\n214 377\\n214 378\\n214 379\\n215 380\\n215 381\\n215 382\\n215 383\\n216 384\\n216 385\\n216 386\\n217 387\\n217 388\\n217 389\\n218 390\\n218 391\\n218 392\\n219 393\\n219 394\\n219 395\\n220 396\\n220 397\\n220 398\\n221 399\\n221 400\\n221 401\\n222 402\\n222 403\\n222 404\\n223 405\\n223 406\\n223 407\\n224 408\\n224 409\\n224 410\\n225 411\\n225 412\\n225 413\\n226 414\\n226 415\\n226 416\\n227 417\\n227 418\\n227 419\\n228 420\\n228 421"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '3'\nassert solution('1 3 4') == '1'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"3\"\nassert solution(\"2 2 2 2 2\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('0 2 2 3 2') == '2'\nassert solution('1 3 2') == '3'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 5') == '2'\nassert solution('0 2 2 3 2') == '3'\nassert solution('1 3 2') == '2'\nassert solution('1 2 4') == '3'\nassert solution('1 1 4') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    3 4 5\n    1 3 4\n    0 2 2 3 2\n    1 3 2\n    1 2 4\n    1 1 4\n    '''\n) == '2'\n\nassert solution(\n    '''\n    10 1 10\n    2 2 4 1 4\n    3 2 4 2\n    3 3 4 3\n    5 5 3 5\n    5 4 4 4\n    5 5 4 5\n    5 5 5 5\n    5 4 4 4\n    5 5 4 5\n    5 5 5 5\n    5 5 5 5\n    5 4 4 4\n    5 5 5 5\n    5 5 5 5\n    5 5 5 5\n    '''\n) == '5'\n\nassert solution(\n    '''\n    5 1 5\n    1 1 1 2\n    1 1 3 2\n    1 1 1 4\n    1 1 3 2\n    1 1 1 2\n    1 2 4 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 2 4 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 2 4 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 2 4 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 3 4 3\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2\n    1 1 3 2\n    1 1 1 2"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\"\nassert solution(\"3\") == \"\"\nassert solution(\"1\") == \"Add.c\"\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 HelloWorld.c\") == \"2 HelloWorld.c\"\nassert solution(\"1 Add.c\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"\") == \"0\"\n\n'''"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\", i);\\n}') == '2 HelloWorld.c\\ndef solution(stdin: str) -> str:'\n\"\"\"\nimport re\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"HelloWorld.c\") == \"HelloWorld.c\"\nassert solution(\"Add.c\") == \"Add.c\"\n\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '0'\nassert solution(\"2\") == '2'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('HelloWorld.c') == '0'\nassert solution('Add.c') == '0'\nassert solution('Hello World.c') == '1 HelloWorld.c'\nassert solution('Hello World') == '1 HelloWorld.c'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() { \\n\\tsum = 0; \\n\\tfor (int i=0; i<10; i++) \\n\\t\\tsum += i; \\n\\t\\tprintf(\"SUM %d\", sum); \\n\\t}\\n***END***\\n\\n\\nint Main() { \\n\\tsum = 0; \\n\\tfor (int i=0; i<10; i++) \\n\\t\\tsum += i; \\n\\t\\tprintf(\"SUM %d\", sum); \\n\\t}\\n***END***\") == \"2 HelloWorld.c\\ndef solution(stdin: str) -> str: \\n\\tpass\"\n\nassert solution(\"2\\nAdd.c\\nint Main() { \\n\\tsum = 0; \\n\\tfor (int i=0; i<10; i++) \\n\\t\\tsum += i; \\n\\t\\tprintf(\"SUM %d\", sum); \\n\\t}\\n***END***\\n\\n\\nint Main() { \\n\\tsum = 0; \\n\\tfor (int i=0; i<10; i++) \\n\\t\\tsum += i; \\n\\t\\tprintf(\"SUM %d\", sum); \\n\\t}\\n***END***\") == \"2 Add.c\\ndef solution(stdin: str) -> str: \\n\\tpass\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\n''') == '2 Add.c\\ndef solution(stdin: str) -> str:\\n    pass\\n\\nassert solution('''\n2\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\n''') == '2 Add.c\\ndef solution(stdin: str) -> str:\\n    pass\\n\\nassert solution('''"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nHelloWorld.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == '2 HelloWorld.c def solution(stdin: str) -> str\\n3 def solution(stdin: str) -> str\\n4 def solution(stdin: str) -> str\\n5 def solution(stdin: str) -> str\\n6 def solution(stdin: str) -> str\\n7 def solution(stdin: str) -> str\\n8 def solution(stdin: str) -> str\\n9 def solution(stdin: str) -> str\\n10 def solution(stdin: str) -> str\\n11 def solution(stdin: str) -> str\\n12 def solution(stdin: str) -> str\\n13 def solution(stdin: str) -> str\\n14 def solution(stdin: str) -> str\\n15 def solution(stdin: str) -> str\\n16 def solution(stdin: str) -> str\\n17 def solution(stdin: str) -> str\\n18 def solution(stdin: str) -> str\\n19 def solution(stdin: str) -> str\\n20 def solution(stdin: str) -> str\\n21 def solution(stdin: str) -> str\\n22 def solution(stdin: str) -> str\\n23 def solution(stdin: str) -> str\\n24 def solution(stdin: str) -> str\\n25 def solution(stdin: str) -> str\\n26 def solution(stdin: str) -> str\\n27 def solution(stdin: str) -> str\\n28 def solution(stdin: str) -> str\\n29 def solution(stdin: str) -> str\\n30 def solution(stdin: str) -> str\\n31 def solution(stdin: str) -> str\\n32 def solution(stdin: str) -> str\\n33 def solution(stdin: str) -> str\\n34 def solution(stdin: str) -> str\\n35 def solution(stdin: str) -> str\\n36 def solution(stdin: str) -> str\\n37 def solution(stdin: str) -> str\\n38 def solution(stdin: str) -> str\\n39 def solution(stdin: str) -> str\\n40 def solution(stdin: str) -> str\\n41 def solution(stdin: str) -> str\\n42 def solution(stdin: str) -> str\\n43 def solution(stdin: str) -> str\\n44 def solution(stdin: str) -> str\\n45 def solution(stdin: str) -> str\\n46 def solution(stdin: str) -> str\\n47 def solution(stdin: str) -> str\\n48 def solution(stdin: str) -> str\\n49 def solution(stdin: str) -> str\\n50 def solution(stdin: str) -> str\\n51 def solution(stdin: str) -> str\\n52 def solution(stdin: str) -> str\\n53 def solution(stdin: str) -> str\\n54 def solution(stdin: str) -> str\\n55 def solution(stdin: str) -> str\\n56 def solution(stdin: str) -> str\\n57 def solution(stdin: str) -> str\\n58 def solution(stdin: str) -> str\\n59 def solution(stdin: str) -> str\\n60 def solution(stdin: str) -> str\\n61 def solution(stdin: str) -> str\\n62 def solution(stdin: str) -> str\\n63 def solution(stdin: str) -> str\\n64 def solution(stdin: str) -> str\\n65 def solution(stdin: str) -> str\\n66 def solution(stdin: str) -> str\\n67 def solution(stdin: str) -> str\\n68 def solution(stdin: str) -> str\\n69 def solution(stdin: str) -> str\\n70 def solution(stdin: str) -> str\\n71 def solution(stdin: str) -> str\\n72 def solution(stdin: str) -> str\\n73 def solution(stdin: str) -> str\\n74 def solution(stdin: str) -> str\\n75 def solution(stdin: str) -> str\\n76 def solution(stdin: str) -> str\\n77 def solution(stdin: str) -> str\\n78 def solution(stdin: str) -> str\\n79 def solution(stdin: str) -> str\\n80 def solution(stdin: str) -> str\\n81 def solution(stdin: str) -> str\\n82 def solution(stdin: str) -> str\\n83 def solution(stdin: str) -> str\\n84 def solution(stdin: str) -> str\\n85 def solution(stdin: str) -> str\\n86 def solution(stdin: str) -> str\\n87 def solution(stdin: str) -> str\\n88 def solution(stdin: str) -> str\\n89 def solution(stdin: str) -> str\\n90 def solution(stdin: str) -> str\\n91 def solution(stdin: str) -> str\\n92 def solution(stdin: str) -> str\\n93 def solution(stdin: str) -> str\\n94 def solution(stdin: str) -> str\\n95 def solution(stdin: str) -> str\\n96 def solution(stdin: str) -> str\\n97 def solution(stdin: str) -> str\\n98 def solution(stdin"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n''') == '2 Add.c\\n'\n\nassert solution('''4\nint main() {\n    printf(\"Hello %d\\n\",i);\n}\n''') == '4 HelloWorld.c\\n'\n\nassert solution('''1\nint main() {\n    printf(\"Hello %d\\n\",i);\n}\n''') == '0 The End\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5\n1 2 1 2 1\n1 2 1 2 1\n1 2 1 2 1\n1 2 1 2 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"1\\n2\\n2\\n\"\nassert solution(\"5 5\") == \"2\\n1\\n2\\n1\\n2\\n\"\nassert solution(\"5 5\") == \"2\\n1\\n2\\n1\\n2\\n\"\nassert solution(\"5 3\") == \"1\\n2\\n1\\n\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 3') == '1 2'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3\\n2 2 2\\n4 2 1\\n4 4 1\"\n) == \"1\\n2\\n2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1\\n2\\n2\\n'\nassert solution([3,2,2]) == '1\\n2\\n2\\n'\nassert solution([4,2,1]) == '1\\n2\\n2\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n2 2 2\n4 2 1\n4 4 1''') == '1'\nprint(solution('''3 3\n2 2 2\n4 2 1\n4 4 1'''))\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1 2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1\\n2\\n2\\n'\nassert solution('3 2 4 2') == '1\\n2\\n2\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2'\nassert solution('''\n3 4\n2 2 1\n3 4 1\n3 4 2\n''') == '2'\nassert solution('''\n4 5\n1 2 1\n3 4 2\n3 3 2\n2 5 2\n''') == '4'\nassert solution('''\n1 3\n2 5 1\n2 3 3\n3 2 3\n''') == '1'\nassert solution('''\n1 5\n1 1 2 2 1\n''') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1'\nassert solution('''\n2 2\n2 2\n''') == '2'\nassert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2'\nassert solution('''\n3 4\n1 1 1\n3 3 2\n1 2 1\n3 3 1\n''') == '3'\nassert solution('''\n3 3\n1 1 1\n3 3 2\n1 2 1\n3 3 1\n''') == '2'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nassert solution('''\n20 2\n1\n2\n''') == '1'\nassert solution('''\n3 5\n3 7 2 4 1\n1 5\n6 4\n5 9\n''') == '5'\nassert solution('''\n3 20\n2 2 1 3 4\n2 5\n6 4\n5 9\n''') == '1'\nassert solution('''\n3 20\n1 2 1 3 4\n2 5\n6 4\n5 9\n''') == '3'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n10 20\\n50 70 10\\n100 110 4\\n150 190 16') == \"5\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\nprint(solution('''\n4 3\n30 40 50 75\n10 20 30 50\n1 20 1 50\n1 10 1 50\n''')) == '2'\nprint(solution('''\n10 2\n10 100 1000 10\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n''')) == '1'\nprint(solution('''\n1 1\n1 1\n''')) == '1'\nprint(solution('''\n2 3\n50 70 10\n100 110 4\n150 190 16\n''')) == '3'\nprint(solution('''\n3 3\n50 70 10\n100 110 4\n150 190 16\n''')) == '3'\nprint(solution('''\n3 2\n10 100 1000 10\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n''')) == '1'\nprint(solution('''\n3 3\n10 100 1000 10\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n''')) == '1'\nprint(solution('''\n10 1\n10 100 1000 10\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n1 1000 1 1000\n''')) == '1'\nprint(solution('''\n5 2\n30 40 50 75\n10 20 30 50\n1 20 1 50\n1 20 1 50\n1 20 1 50\n''')) == '2'\nprint(solution('''\n3 4\n30 40 50 75\n10 20 30 50\n1 20 1 50\n1 20 1 50\n1 20 1 50\n''')) == '3'\nprint(solution('''\n4 4\n30 40 50 75\n10 20 30 50\n1 20 1 50\n1 20 1 50\n1 20 1 50\n''')) == '2'\nprint(solution('''\n3 6\n30 40 50 75\n10 20 30 50\n1 20 1 50\n1 20 1 50\n1 20 1 50\n''')) == '2'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '4'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"4 5 6\") == \"3\"\nassert solution(\"5 6 7 8\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\nassert solution(\"4 2\\n1 1 2\\n2 2 2\\n3 4 3\") == \"4\"\nassert solution(\"1 4\\n2 2 2\\n3 4 3\") == \"5\"\nassert solution(\"5 10\\n2 1 2\\n3 4 3\\n4 2 2\") == \"5\"\nassert solution(\"7 10\\n2 1 2\\n3 4 3\\n4 2 2\\n5 2 2\\n6 4 3\\n7 4 3\") == \"3\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == \"5\"\nassert solution('''\n2 3\n1 2 3\n3 4 5\n''') == \"7\"\nassert solution('''\n5 5\n7 4\n3 2\n1 2\n''') == \"2\"\nassert solution('''\n6 3\n1 2\n5 6\n5 4\n''') == \"4\"\nassert solution('''\n1 2\n1 2\n''') == \"2\"\n'''\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n') == \"1\"\nassert solution('1\\n1\\n1\\n') == \"1\"\nassert solution('2\\n3\\n5\\n') == \"2\"\nassert solution('2\\n2\\n1\\n') == \"2\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 1') == '1'\nassert solution('3 2') == '0'\nassert solution('3 1') == '1'\nassert solution('4 2') == '0'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == '26'\nassert solution('6 1') == 'IMPOSSIBLE'\nassert solution('5 5') == '26'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n(1 2) (2 3) (3 4)\\n1\\n4 2\\n(1 3) (2 4)\") == \"26\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5') == '26'\nassert solution('6 10') == 'IMPOSSIBLE'\nassert solution('5 10') == '10'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n\"\"\") == \"26\"\nassert solution(\"\"\"\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n10 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"26\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"26\"\nassert solution(\"1\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\n\nassert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n\"\n                \"(2 5) (5 3) (3 3) (2 3) (1 3) (1 2)\") == \"26\"\nassert solution(\"3 3\\n\"\n                \"(1 2) (2 3) (3 3) (1 3) (1 2)\") == \"IMPOSSIBLE\"\nassert solution(\"5 6\\n\"\n                \"(2 5) (5 3) (3 3) (2 3) (1 3) (1 2)\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)'\n                ) == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n-1 0\\n0 0') == \"success\"\nassert solution('3\\n-1 0\\n0 0\\n1 0') == \"failure\"\nprint('Success') if solution() =='success' else print('Failure')\n'''"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"failure\"\nassert solution(input_string=\"3\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\n\nfrom typing import List\nfrom math import inf\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        def shoot(x, y, a, b):\n            dist = inf\n            for _x in range(x - 1, x + 2):\n                for _y in range(y - 1, y + 2):\n                    dist_tuple = (abs(_x - a), abs(_y - b))\n                    if dist_tuple[0] + dist_tuple[1] < dist:\n                        dist = dist_tuple[0] + dist_tuple[1]\n            return dist\n        \n        targets = []\n        for i in range(int(stdin)):\n            target = tuple(map(int, stdin.split('\\n')[i + 1].split()))\n            targets.append(target)\n        \n        shots = []\n        for i in range(len(targets)):\n            shot = []\n            for j in range(len(targets)):\n                if i!= j:\n                    shot.append(shoot(targets[i][0], targets[i][1], targets[j][0], targets[j][1]))\n            shots.append(shot)\n        \n        for shot in shots:\n            if len(shot) == 2:\n                for target in targets:\n                    if shot[0] + shot[1] < shoot(targets[0][0], targets[0][1], targets[1][0], targets[1][1]):\n                        return \"failure\"\n            else:\n                if shot[0] + shot[1] < shoot(targets[0][0], targets[0][1], targets[1][0], targets[1][1]) or \\\n                   shot[0] + shot[1] < shoot(targets[1][0], targets[1][1], targets[0][0], targets[0][1]):\n                    return \"failure\"\n        return \"success\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n\"\"\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"success\"\nassert solution(\"2\") == \"success\"\nassert solution(\"3\") == \"failure\"\nassert solution(\"4\") == \"failure\"\nassert solution(\"5\") == \"failure\"\n\"\"\"\n\nfrom math import inf\n\nN = int(input())\n\ntargets = [[int(x) for x in input().split()] for _ in range(N)]\n\ninf_coords = [[inf, inf] for _ in range(N)]\n\nfor idx, target in enumerate(targets):\n    inf_coords[idx][0] = target[0]\n    inf_coords[idx][1] = target[1]\n\nfor idx, target in enumerate(inf_coords):\n    for jdx, target2 in enumerate(inf_coords):\n        if idx!= jdx:\n            if target2[0]!= inf and target2[1]!= inf:\n                if abs(target2[0] - target[0]) + abs(target2[1] - target[1]) <= 10:\n                    break\n    else:\n        print('failure')\n        break\nelse:\n    print('success')"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\nassert solution('''\n5\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') =='success'\nassert solution('''\n4\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\nassert solution('''\n8\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n-1 2\n0 3\n1 2\n''') =='success'\nassert solution('''\n9\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n-1 2\n0 3\n1 2\n''') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('3\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('10\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') =='success'\nassert solution('2') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n-1 0\\n0 0\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == 'failure'\nassert solution('3\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 2\\n1 2\\n3 3') == 'possible'\nassert solution('2 2 2\\n1 2\\n3 3') == 'impossible'\nassert solution('3 2 2\\n5 2 2\\n5 2 2') == 'possible'\nassert solution('3 2 2\\n5 2 2\\n5 2 2') == 'impossible'\nassert solution('5 2 2\\n3 3\\n5 2 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"3 3\") == \"impossible\"\nassert solution(\"5 2 2\") == \"possible\"\nassert solution(\"5 2 2\") == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'possible'\nassert solution('''\n4 4 2\n3 2\n2 5\n4 1\n4 2\n''') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'possible'\n\nassert solution('''\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'impossible'\n\"\"\"\nGiven a queue of $q$ integers, write a function $f(q)$ which:\n\n* If $q$ is even, return $False$ (the queue is not suitable for downlinking).\n* If $q$ is odd, return $True$ (the queue is suitable for downlinking).\n\nFor example, if $q$ = $2$, then $f(2)$ returns $False$ and $f(4)$ returns $True$.\n\"\"\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 2\") == \"possible\"\nassert solution(\"3 3\") == \"impossible\"\nassert solution(\"5 2 2\") == \"impossible\"\n\"\"\"\n\nn, q, s, d, *q_c_vals = list(map(int, input().split()))\nq_c_vals = list(map(int, q_c_vals))\nq_c_vals = sorted(q_c_vals, key=lambda x: x * 10**6)\nq_c_vals = list(map(lambda x: x * 10**6, q_c_vals))\nmax_q_c = max(q_c_vals)"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'possible'\nassert solution('''\n3 1 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'impossible'"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"3 3\") == \"possible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 3\n2 3\n3 3\n''') == 'impossible', 'Your solution needs to return \"impossible\" if data cannot be transferred'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\n\"\"\"\nfrom functools import lru_cache\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '1'\n''')\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 1 2') == '1'\nassert solution('3 3 1') == '2'"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '0'\nassert solution('6 4') == '1'\nassert solution('6 5') == '1'\nassert solution('5 6') == '2'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n1 3 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n1 3 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n3 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '0'"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 5\n1 2 2 2\n1 3 1 1\n-1 -1 2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\n1 1 1\n2 2 1\n-1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n1 1 2\n2 2 1\n-1 1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '1'\nassert solution('''\n3 4\n1 2 1\n1 2 1\n1 3 1\n''') == '2'\n\n'''"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\n'''\n\nimport sys\nimport io\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1 2 3\\n1 2 1\\n-1 1 2') == '0'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"20\") == \"20\"\nassert solution(\"3\") == \"2\"\nassert solution(\"20\") == \"20\"\nassert solution(\"20\") == \"20\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(stdin))\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"45678\") == \"56789\"\nassert solution(\"1234\")!= \"56789\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"13\"\nassert solution(\"5 2\") == \"5\"\nassert solution(\"6 2\") == \"15\"\nassert solution(\"7 2\") == \"7\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 4') == '5'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('11') == '11'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('100 999') == '99'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('234') == '234'\nassert solution('1234') == '1313'\nassert solution('1301') == '1313'\nassert solution('123456789') == '123456789'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '12 30 45 3 11'\n) == 'NO'\n\nassert solution(\n    '3 47 0 4 9'\n) == 'YES'\n\nprint(solution(\n    input()\n))\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n12 30 45 3 11\n''') == \"NO\"\nassert solution(\n'''\n3 47 0 4 9\n''') == \"YES\"\n'''\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([12, 30, 45, 3, 11]) == \"YES\"\nassert solution([12, 0, 1, 12, 1]) == \"YES\"\nassert solution([3, 47, 0, 4, 9]) == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''12 30 45 3 11\n''') == 'NO'\nassert solution('''12 0 1 12 1\n''') == 'YES'\nassert solution('''3 47 0 4 9\n''') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n12 30 45 3 11\n''') == 'NO'\nassert solution('''\n12 0 1 12 1\n''') == 'YES'\nassert solution('''\n3 47 0 4 9\n''') == 'YES'\nassert solution('''\n5 23 0 8 10\n''') == 'YES'\n''')\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1 1 2 3 1 0'\n    '2 4 20'\n    ) == '3'\nassert solution(\n    '1 1 2 3 1 0'\n    '15 27 26'\n    ) == '2'\nassert solution(\n    '1 1 2 3 1 0'\n    '2 2 1'\n    ) == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20\\n') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26\\n') == '2'\nassert solution('1 1 2 3 1 0\\n2 2 1\\n') == '0'\nassert solution('1 1 2 3 1 0\\n2 2 1\\n') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\nassert solution(\"1 1 2 3 1 0\") == \"0\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2 3 1 0') == '3', solution('1 1 2 3 1 0')\nassert solution('2 4 20') == '2', solution('2 4 20')\nassert solution('1 1 2 3 1 0') == '0', solution('1 1 2 3 1 0')\nassert solution('1 1 2 3 1 0') == '0', solution('1 1 2 3 1 0')\nassert solution('1 1 2 3 1 0') == '0', solution('1 1 2 3 1 0')\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1 2 3 1 0\n2 4 20\n''') == '3'\nassert solution('''\n1 1 2 3 1 0\n15 27 26\n''') == '2'\nassert solution('''\n1 1 2 3 1 0\n2 2 1\n''') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'\nassert solution('''1 1 2 3 1 0\n15 27 26''') == '2'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == '2'\nassert solution(input_2) == '0'\nassert solution(input_3) == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'\n\"\"\"\n\nstdin = \"\"\"\n3\n0 0 1\n2 0 1\n4 0 1\n\n\"\"\"\n\nstdin_lines = stdin.splitlines()\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n\n''') == '4'\n\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n\n''') == '8'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"4\"\nassert stdin == input_\nassert isinstance(stdin, str)\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4', \"Your solution is not correct\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"8\"\nassert stdin = input\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''\n3\n0 0 1\n2 0 1\n1 1 2\n''') == '6'\nassert solution('''\n1\n0 0 1\n''') == '1'\nassert solution('''\n2\n0 0 1\n''') == '1'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\"\nassert solution(\"\") == \"4\"\nassert solution(\"2\") == \"5\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n        '3',\n        '0 0 1',\n        '2 0 1',\n        '4 0 1',\n    ])) == '4'\n\nassert solution('\\n'.join([\n        '3',\n        '0 0 2',\n        '3 0 2',\n        '6 0 2',\n    ])) == '8'\n\nassert solution('\\n'.join([\n        '3',\n        '0 0 1',\n        '2 0 1',\n        '4 0 1',\n    ])) == '4'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'\nassert solution('3\\n0 0 1\\n2 0 1\\n4 0 1') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '8'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\n\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\n\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\nassert solution('''\n7 4 4 7 7 10 10 7\n1 3 3 5 5 3 3 1\n''') == 'NO'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'YES'\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'NO'\n''')\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\n''')\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution([0, 0, 6, 6, 6, 0, 6, 0]) == 'YES'\nassert solution([0, 0, 0, 0, 0, 0, 0, 0]) == 'NO'\nassert solution([1, 3, 3, 5, 5, 3, 1]) == 'YES'\nassert solution([7, 4, 4, 7, 7, 4, 7]) == 'YES'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1') == \"YES\"\nassert solution('0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7') == \"NO\"\n\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n\") == \"YES\"\nassert solution(\"5 5 5 5 5 5 5 5\\n5 5 5 5 5 5 5 5\\n\") == \"YES\"\nassert solution(\"5 5 5 5 5 5 5 5\\n6 6 6 6 6 6 6 6\\n\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n\") == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n    '''\n) == 'YES'\n\nassert solution(\n    '''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n    '''\n) == 'NO'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES'\nassert solution('1 3 3 5 5 3 3 1') == 'YES'\nassert solution('6 0 6 6 0 6 0 0') == 'NO'\nassert solution('7 4 4 7 7 10 10 7') == 'YES'"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') =='sjfnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\nassert solution('5') == 'cslnb'\nassert solution('6') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"cslnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"cslnb\"\nassert solution(\"4\") == \"cslnb\"\nassert solution(\"5\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0\n\n''') == 'cslnb'\nassert solution('''\n2\n1 0\n\n''') == 'cslnb'\nassert solution('''\n2\n2 2\n\n''') =='sjfnb'\nassert solution('''\n3\n2 3 1\n\n''') =='sjfnb'\nprint(solution('''\n3\n1 0 1\n\n'''))\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"sjfnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"cslnb\"\nassert solution(\"3\") == \"cslnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n0\n''') == \"cslnb\"\nassert solution('''\n2\n1 0\n''') == \"cslnb\"\nassert solution('''\n2\n2 2\n''') == \"sjfnb\"\nassert solution('''\n3\n2 3 1\n''') == \"sjfnb\"\nassert solution('''\n3\n1 0\n2 2\n''') == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"cslnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\n\n'''"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"sjfnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"4\") == \"cslnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n0\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"sjfnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"sjfnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"sjfnb\"\nassert solution() == \"cslnb\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n\n\n\"\"\"\n\n\nn, T = map(int, input().split())\nt = list(map(int, input().split()))\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n1 5 3\\n') == '2'\nassert solution('1 1\\n1') == '1'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 5\n1 5 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"0\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"2\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 5\") == \"2\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 5\n1 5 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 1\n1\n\"\"\") == \"0\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 3\") == \"1\"\n\n\n\n#############################\n###    Task 4 - Count      ###\n#############################\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5,3]) == 2\nassert solution([3,2]) == 1\nassert solution([1,1]) == 0\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 10\n1 5 3\n''') == '2'\nassert solution('''5 1\n1\n''') == '1'\nassert solution('''3 5\n1 5 3\n''') == '1'\nassert solution('''1 2\n1\n''') == '1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n0\n1\n''') == '1\n1\n0 1\n0\n1\n'\n'''\n    )\n\nassert solution('''\n2\n-1\n1\n0\n1\n''') == '2\n1\n0 1\n1\n0 1\n'''\n    )\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '1\\n0 1\\n1'\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n-1\\n1') == '2\\n0 1'\nassert solution('2\\n-1\\n1') == '2\\n0 1'\nassert solution('1\\n0\\n1') == '-1\\n0 1'\nassert solution('1') == '-1'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 -1\"\nassert solution(\"3\") == \"-1 0 1\"\nassert solution(\"4\") == \"1 -1 0 1\"\nassert solution(\"5\") == \"1 0 -1 0 1\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1 0'\nassert solution('2') == '-1 0 1'\nassert solution('3') == '-1 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == '-1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1\\n0 1'\nassert solution('2') == '2\\n-1 0 1'\nassert solution('3') == '2\\n-1 0 1'\n\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1 0 1'\nassert solution('2') == '-1 0 1'\nassert solution('3') == '2 -1 0 1'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2 3 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '1 3 3'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 3 2\"\nassert solution() == \"2 3 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1 3 1'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == stdout\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 1 5 4\"\n) == \"1 3 3\"\n\nassert solution(\n    \"3 1 5 3\"\n) == \"1 2 2\"\n\nassert solution(\n    \"3 2 5 3\"\n) == \"1 1 2\"\n\nassert solution(\n    \"3 2 5 3\"\n) == \"2 3 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n3 1 5 4\n1 2 1 3\n    ''') == '1 3 3'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 5 4\") == \"1 3 3\"\nassert solution(\"3 1 5 3\") == \"2 3 2\"\n\n\"\"\""
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''110\n2''') == '3'\nassert solution('''111111011\n2''') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(['110', '2']) == '3'\nassert solution(['111111011', '2']) == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\n2') == '8'\nassert solution('11111111111111\\n2') == '167'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"3\"\nassert solution(\"2\") == \"3\"\nassert solution(\"110\") == \"3\"\nassert solution(\"111111011\") == \"169\"\nassert solution(\"01101\") == \"3\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"111111011\") == \"169\""
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('1000000') == '1'\nassert solution('10000000') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n110\n2\n''') == '3'\n\nassert solution('''\n111111011\n2\n''') == '169'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n3 1\\n2 1\\n2 2\\n0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('0 0 0 0 0') == '0'\nassert solution('5 0 4 2 2 1') == '26.94565956005'\nassert solution('3 1 1 2 0 0') == '11.084259940083'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\n\"\"\") == \"11.084259940083\"\nassert solution(\"\"\"\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\n\"\"\") == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 0 4 2 2 0\n3 1\n2 1\n2 3\n3 5\n3 5\n3 3\n''') == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 2 0 0') == '11.084259940083'\nassert solution('3 1 1 2 0 0') == '33.121375178000'\n\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 1 4 2 0\"\"\") == \"33.121375178000\"\nassert solution(\"\"\"5 2 1\"\"\") == \"11.084259940083\"\n\n'''\n(a, b), (c, d)\n|a - b| = |c - d|\n|b - a| = |d - c|\n\n|x1 - x2| = |y1 - y2|\n|y1 - y2| = |x1 - x2|\n\n'''\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nprint(solution(input()))"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n\n'''\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '2'\nassert solution('8 5') == '2'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '2'\nassert solution('8 5') == '2'\nassert solution('7 20') == '1'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\""
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == '2'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n8 5\n''') == '2'\n\nassert solution(\n'''\n8 15\n''') == '1'\n\nassert solution(\n'''\n7 20\n''') == '0'\n\nassert solution(\n'''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 5\n''') == '2'\nassert solution('''8 15\n''') == '1'\nassert solution('''7 20\n''') == '0'\nassert solution('''1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([int(i) for i in stdin.split()]) == 0\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 1 10\n01000\"\"\") == \"11\"\nassert solution(\"\"\"5 10 1\n01000\"\"\") == \"2\"\nassert solution(\"\"\"7 2 3\n1111111\"\"\") == \"0\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 10 1') == '11'\nassert solution('3 10 1') == '0'\nassert solution('2 20 1') == '0'\nassert solution('5 10 1') == '11'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1 10\n01000''') == '11'\nassert solution('''5 10 1\n01000''') == '2'\nassert solution('''7 2 3\n1111111''') == '0'\nprint(solution('''20 9 5\n1110111'''))"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == str(11)\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\nassert solution('9 1000000 1') == '0'\nassert solution('4 5 2') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3 1 1\n    ''') == '2 1'\nassert solution('''\n    5 1 2\n    ''') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1 1\n''') == '2 1'\nassert solution('''\n5 1 2\n''') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 1, 1]) == \"2 1\"\nassert solution([5, 1, 2]) == \"19 5\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\nassert solution('3 1 1')!= '2 2'\nassert solution('3 1 1')!= '1 2'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\nprint(solution(input()))\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1 1\n5 1 2\n''') == '2 1'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2\") == \"19 5\"\nassert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"-1\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\""
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 1''') == '6'\nassert solution('''10 2''') == '4'\nassert solution('''1 2''') == '2'\nassert solution('''1 3''') == '1'\nassert solution('''2 5''') == '1'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1') == '6'\nassert solution('10 2') == '4'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\""
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '4'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\nassert solution('2 5 3 4 3 5 2 1') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 1''') == '6'\nassert solution('''10 2''') == '4'\nassert solution('''6 1''') == '6'\nassert solution('''20 1''') == '5'\nassert solution('''10 2''') == '4'\n\n----\n\nInput\n5 6\n\nOutput\n\n7\n\n\n----\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n\n\n\"\"\""
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n-149.154.167.99\\n') == '1\\n0.0.0.0/0\\n'\nassert solution('1\\n+149.154.167.99/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n') == '2\\n149.154.167.99\\n149.154.167.120/29\\n'\nassert solution('4\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'\nassert solution('2\\n+127.0.0.1/32\\n-127.0.0.1\\n') == '-1\\n'\nassert solution('0\\n') == '-1\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"2\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"127.0.0.4/30\"\nassert solution(\"4\") == \"127.0.0.1/32\"\nassert solution(\"5\") == \"127.0.0.6/31\""
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"2\") == \"195.0.0.0/8\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"5\") == \"195.0.0.0/8\"\nassert solution(\"2\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"1.1.1.1/32\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('6') == '127.0.0.0/8'\nassert solution('7') == '127.0.0.1/32'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"5\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"0.0.0.0/0\"\nassert solution(\"-1\") == \"-\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1\n-149.154.167.99\n\nOutput\n1\n0.0.0.0/0\n\nInput\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\nOutput\n2\n149.154.167.99\n149.154.167.120/29\n\nInput\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\nOutput\n2\n195.0.0.0/8\n127.0.0.4/30\n''') == '2'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1\\n-149.154.167.99\\n'\n    '1\\n-149.154.167.99/30\\n'\n    '1\\n-149.154.167.99/32\\n'\n    '0\\n-127.0.0.4/31\\n'\n    '1\\n-127.0.0.8\\n'\n    '1\\n-127.0.0.0/30\\n'\n    '-195.82.146.208/29\\n'\n    '-127.0.0.6/31\\n'\n    '2\\n195.0.0.0/8\\n'\n    '127.0.0.4/30\\n'\n    'assert solution(stdin)'\n) == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '195.0.0.0/8'\nassert solution('3') == '195.0.0.0/8'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2\\n0.0.0.0/0\\n0.0.0.0/0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n13\n0123456789\n\n12\n1212121212\n\n11\n31415926535\n\n10\n31415926535\n\n9\n9191919191\n\n8\n80000000000\n\n7\n79000000000\n\n6\n79000000000\n\n5\n79000000000\n\n4\n79000000000\n\n3\n79000000000\n\n2\n79000000000\n\n1\n79000000000\n''') == '1'\n\nassert solution('''\n11\n1\n\n10\n1\n\n9\n1\n\n8\n1\n\n7\n1\n\n6\n1\n\n5\n1\n\n4\n1\n\n3\n1\n\n2\n1\n\n1\n''') == '2'\n\nassert solution('''\n4\n1\n1\n1\n1\n\n2\n1\n\n3\n1\n\n2\n1\n\n''') == '0'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8\n00000000008\n\n''') == \"1\"\nassert solution('''\n11\n31415926535\n\n''') == \"0\"\nassert solution('''\n11\n00000000008\n\n''') == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"11\\n00000000008\") == \"1\"\nassert solution(\"22\\n0011223344556677889988\") == \"2\"\nassert solution(\"11\\n31415926535\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11\") == '1'\nassert solution(\"22\") == '2'\nassert solution(\"11\") == '0'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"333\") == \"0\"\nassert solution(\"31415926535\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '2'\n\n---\n\nMy solution:\n\nclass Solution:\n    def maxPhoneNumber(self, phone: str) -> str:\n        # phone = phone.replace(\" \", \"\")\n        phone = \"\".join(c for c in phone if c in \"0123456789\")\n        if phone[0] == \"8\" and len(phone) == 11:\n            return phone\n        return \"\"\n\nassert Solution().maxPhoneNumber(\"80123456789\") == \"80000000000\"\n\n\"\"\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11\\n00000000008\") == \"1\"\nassert solution(\"22\\n0011223344556677889988\") == \"2\"\nassert solution(\"11\\n31415926535\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''11\n00000000008''') == '1'\nassert solution('''22\n0011223344556677889988''') == '2'\nassert solution('''11\n31415926535''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"11\",\n    \"00000000008\",\n    ) == \"1\"\nassert solution(\n    \"22\",\n    \"0011223344556677889988\",\n    ) == \"2\"\nassert solution(\n    \"11\",\n    \"31415926535\",\n    ) == \"0\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '4'\nassert solution('3 3') == '3'\nassert solution('10 10') == '11'\n\n------SOLUTION------\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution([\n    \"1 1 1\",\n    \"1 1 1\",\n    \"1 1 1\"\n]) == \"3\"\n\nassert solution([\n    \"2 2 2\",\n    \"0 0 0\",\n    \"1 1 1\"\n]) == \"3\"\n\nassert solution([\n    \"2 2 2\",\n    \"0 0 0\",\n    \"1 1 1\",\n    \"1 1 1\"\n]) == \"3\"\n\nassert solution([\n    \"1 1 1\",\n    \"1 1 1\",\n    \"1 1 1\"\n]) == \"0\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"3 3\") == \"3\""
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == 'row 1\\nrow 1\\ncol 4\\nrow 3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == 'row 1'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == 'col 1'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == 'col 1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '-1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\"\n\n\n\"\"\"\n\nfrom typing import List\n\nimport pytest\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\n'''\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '3', 'row 1'\nassert solution('4 3') == '-1', 'row 3'\nassert solution('2 2') == '2', 'row 2'\nassert solution('3 2') == '-1', 'row 2'\nassert solution('2 1') == '2', 'col 2'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 3 11 4\n''') == 'YES'\nassert solution('''\n8 6 4 5\n''') == 'NO'\nassert solution('''\n4 2 1 4\n''') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 6 4 5''') == 'YES'\nassert solution('''8 6 4 6''') == 'NO'\nassert solution('''10 3 11 4''') == 'YES'\nassert solution('''4 2 1 4''') == 'YES'\nassert solution('''4 2 1 8''') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\nassert solution(\"8 6 4 5\\n\") == \"YES\"\nassert solution(\"8 6 4 6\\n\") == \"NO\"\nassert solution(\"10 3 11 4\\n\") == \"YES\"\nassert solution(\"4 2 1 4\\n\") == \"NO\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\"\n\nassert solution(\"0 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 6 4 5\n''') == 'YES'\nassert solution('''\n10 3 11 4\n''') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n8 6 4 5\n''') == 'YES'\nassert solution('''\n10 3 11 4\n''') == 'YES'\nassert solution('''\n4 2 1 4\n''') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '12'\nassert solution('7 8') == '12'\nassert solution('4 2') == '6'\nassert solution('6 2') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 8') == '12'\nassert solution('2 2') == '-1'\nassert solution('1 2') == '3'\n\n\n'''\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('1 2') == '-1'\nassert solution('4 2') == '6'\nassert solution('7 8') == '12'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 3\n1 4\n''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\nassert solution('''2 2\n1 2\n2 1\n''') == '-1'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 3\\n1 4\\n\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\\n\") == \"12\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'NO'\nassert solution('3 2') == 'YES'\n'''\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'YES'\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'NO'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"NO\"\n\n\"\"\"\n\nimport collections\n\nn, k = (int(i) for i in input().split())\nc = collections.Counter()\n\nfor _ in range(n):\n    c[int(input())] += 1\n\nans = (c[0] + c[1]) / k\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n\n''') == 'YES'\nassert solution('''3 2\n1 0\n1 1\n0 1\n\n''') == 'NO'\n'''\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == 'NO'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('3 2') == 'NO'"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, k = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        b = list(map(int, stdin.split()))\n\n        # assuming n, k is sorted\n        dict_a = defaultdict(int)\n        dict_b = defaultdict(int)\n\n        dict_a[a[0]] = 1\n        dict_b[b[0]] = 1\n\n        for i in range(1, n):\n            dict_a[a[i]] = dict_a[a[i-1]] % k\n            dict_b[b[i]] = dict_b[b[i-1]] % k\n\n        return \"Yes\" if dict_a == dict_b else \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == \"Yes\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5') == 'Yes'\nassert solution('2 7') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 7') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 7') == \"No\"\nassert solution('4 5') == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5\\n2 3') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4 1\n            ''') == '6'\nassert solution('''6 4 2\n            ''') == '8'\nassert solution('''2 3 4\n            ''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4 1\n    ''') == '6'\nassert solution('''6 4 2\n    ''') == '8'\nassert solution('''2 3 4\n    ''') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 1\\n\") == \"6\"\nassert solution(\"6 4 2\\n\") == \"8\"\nassert solution(\"2 3 4\\n\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n2\\n4\\n1') == '2'\nassert solution('3\\n1 2 1') == '3'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n1 2 2 4 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n4 1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n0 3 0 4\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 2\\n\") == \"-1\"\nassert solution(\"4\\n4 1 1\\n\") == \"2\"\nassert solution(\"5\\n1 2 2 4 3\\n\") == \"2\"\nassert solution(\"6\\n0 3 0 4 1 2\\n\") == \"2\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000\") == \"3\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 2 4 3') == '2'\nassert solution('3\\n4 1 1') == '2'\nassert solution('4\\n0 3 0 4') == '0'\nassert solution('10\\n1 1 1 0 0 0 0 1 1 0') == '1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 2 2 4 3\n''') == '2'\nassert solution('''3\n4 1 1\n''') == '0'\nassert solution('''4\n0 3 0 4\n''') == '0'\nprint(solution('''5\n1 2 2 4 3\n'''))"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 3\") == \"2\"\nassert solution(\"5 1 2 4 3\") == \"2\"\nassert solution(\"4 1 1\") == \"0\"\nassert solution
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n0') == '-1'\nassert solution('4\\n1 1\\n3 3\\n4 4\\n4 4\\n1 1\\n2 2\\n1 2\\n0 0\\n1 2\\n2 2') == '2'\nassert solution('3\\n1 1\\n2 2\\n4 4\\n1 1\\n3 3') == '2'\nassert solution('4\\n0 0\\n2 2\\n4 4\\n1 1\\n3 3') == '-1'\nassert solution('1\\n0 0\\n2 2\\n4 4\\n1 1\\n3 3') == '-1'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n0000\n1\n0\n1''') == '4'\nassert solution('''3\n0000\n1\n0''') == '2'\nassert solution('''2\n01\n0''') == '1'\nassert solution('''10\n0000\n1\n1\n1''') == '11'\nassert solution('''10\n0001\n1\n1\n1''') == '12'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == str(len(solution(input())))\nprint(solution(input()))"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"01\") == \"1\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 2\nassert solution('3') == 2\nassert solution('10011011') == 5\nassert solution('11100100') == 3\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8\n10000011''') == 5\nassert solution('''2\n01''') == 2"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"10000011\") == 5\nassert solution(\"01\") == 2"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000011') == '5'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('00') == '1'\nassert solution('11') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"10011011\") == \"5\"\nassert solution(\"10000011\") == \"5\"\nassert solution(\"01\") == \"2\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('01') == '2'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3 1 4\") == \"3\"\nassert solution(\"10\\n1 3 4 4 5 2 3 4 4 6 7 5 7 6 6\") == \"4\"\nassert solution(\"10\\n1 3 4 4 5 2 3 4 4 6 7 5 7 6 6\") == \"-1\"\nassert solution(\"10\\n1 3 4 4 5 2 3 4 4 6 7 5 7 6 6\") == \"1\"\nassert solution(\"10\\n1 3 4 4 5 2 3 4 4 6 7 5 7 6 6\") == \"5\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 3 1 4\n''') == '3'\n\nassert solution('''\n4\n4 4 4 4\n''') == '-1'\n\nassert solution('''\n4\n2 1 4 3\n''') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\nassert solution('4\\n4 4 4 4') == '-1'\nassert solution('4\\n2 1 4 3') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\nassert solution('4\\n4 4 4 4') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations\n\nn = int(input())\narpa = set(map(int, input().split()))\n\nprint(arpa)\narpa.remove(1)\nprint(arpa)\ncomb = combinations(arpa, 3)\nprint(list(comb))\n\nfor i in range(len(list(comb))):\n    print(list(comb)[i])\n    print(Counter(list(comb)[i]))\n    if len(Counter(list(comb)[i])) == 1:\n        print(Counter(list(comb)[i])[1])\n        if Counter(list(comb)[i])[1] == 1:\n            print(1)\n        else:\n            print(-1)\n    else:\n        print(3)\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '-1'\nassert solution('2') == '1'\nassert solution('10') == '-1'\n\n\n'''\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n2 4 1 3\n''') == '-1'\nassert solution('''4\n2 4 1 3\n4 2 3 1\n''') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 3 1 4\n''') == '3'\n\nassert solution('''\n4\n4 4 4 4\n''') == '-1'\n\nassert solution('''\n4\n2 1 4 3\n''') == '1'\n\nprint(solution('''\n7\n4 4 4 5 5 4 2\n'''))"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"7\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n''') == '2'\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n''') == '0'\nassert solution('''\n2\n\n2 2\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(example_input_1) == '1'\nassert solution(example_input_2) == '0'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n''') == '2'\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n''') == '1'\nassert solution('''\n2\n\n2 2\n''') == '0'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n''') == '2'\n\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n''') == '0'\n\nassert solution('''\n2\n\n2 2\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\\n\") == \"1\"\nassert solution(\"1\\n1\\n\") == \"1\"\nassert solution(\"4\\n0 0 1 1 2\\n\") == \"2\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\n\n'''\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n''') == '2'\n\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n''') == '0'\n\nassert solution('''\n2\n\n2 2\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 3 2 0\n''') == '2'\n\nassert solution('''\n7\n1 3 3 2 1 2 3\n''') == '0'\n\nassert solution('''\n2\n2 2\n''') == '1'\n\nassert solution('''\n2\n2 1\n''') == '1'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n\"\"\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"504\"\nassert solution(\"7\") == \"210\"\nassert solution(\"7\") == \"210\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"504\"\nassert solution(\"8\") == \"84\"\nassert solution(\"12\") == \"108\"\nassert solution(\"6\") == \"210\"\nassert solution(\"12\") == \"108\"\n\n\"\"\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n\"\"\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2\\n3\\n') == '6'\nassert solution('10\\n6\\n12\\n') == '18'\nassert solution('3\\n1\\n4\\n') == '12'\nassert solution('7\\n2\\n3\\n') == '21'\nassert solution('5\\n7\\n3\\n') == '30'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '8'\nassert solution('7') == '210'\nassert solution('9') == '504'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"100\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"1 1\"\nassert solution(\"5\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 1'\nassert solution() == '1 1'\nassert solution() == '1 1'\nassert solution() == '1 1'\n\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"1 1\"\nassert solution(\"5\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 1'\nassert solution() == '1 1'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1 1\"\nassert solution(input_) == \"1 1\""
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '3 4'\nassert solution('10') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 0 5 5\n0 1 4 4\n1 0 2 1\n1 1 4 4\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n2\n0 0 1 1\n1 1 2 2\n''') == '1 1'\nassert solution('''\n5\n0 0 5 5\n0 1 4 4\n1 0 2 1\n1 1 4 4\n3 0 4 1\n''') == '3 4'\nassert solution('''\n5\n0 0 5 5\n0 1 4 4\n1 0 2 1\n1 1 4 4\n3 0 4 1\n''') == '2 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\n\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\n\n\nassert solution('''\n5\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"3 4\"\nassert solution(\"5\") == \"3 4\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n18 55 16 17\n\n''') == 'YES'\n\nassert solution('''\n8\n5 972 3 4 1 4 970 971\n\n''') == 'YES'\n\nassert solution('''\n6\n40 41 43 44 44 44\n\n''') == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n18 55 16 17\n''') == \"YES\"\n\nassert solution('''\n6\n40 41 43 44 44 44\n''') == \"NO\"\n\nassert solution('''\n8\n5 972 3 4 1 4 970 971\n''') == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"8\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n18 55 16 17') == 'YES', solution('4\\n18 55 16 17')\nassert solution('6\\n40 41 43 44 44 44') == 'NO', solution('6\\n40 41 43 44 44 44')\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES', solution('8\\n5 972 3 4 1 4 970 971')\n\n\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\nTraceback (most recent call last):\n  File \"/Users/vikash/Desktop/Boys-Club-Project/bulldozers.py\", line 1, in <module>\n    solution(stdin.readline())\n  File \"/Users/vikash/Desktop/Boys-Club-Project/bulldozers.py\", line 2, in solution\n    pass\nNameError: name 'pass' is not defined\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/Desktop/Boys-Club-Project/bulldozers.py =========\n>>> \n========= RESTART: /Users/vikash/"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n40 41 43 44 44 44\n''') == 'NO'\nassert solution('''8\n5 972 3 4 1 4 970 971\n''') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n18 55 16 17\n\n4\n40 41 43 44 44 44\n\n6\n5 972 3 4 1 4 970 971\n\n8\n5 972 3 4 1 4 970 971''') == 'YES'\nassert solution('''\n6\n40 41 43 44 44 44 44\n\n8\n5 972 3 4 1 4 970 971\n\n10\n5 973 4 1 5 972 890 971''') == 'NO'\nassert solution('''\n3\n18 55 16 17\n\n4\n40 41 43 44 44 44\n\n6\n5 972 3 4 1 4 970 971\n\n8\n5 972 3 4 1 4 970 971\n\n10\n5 973 4 1 5 972 890 971''') == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n18 55 16 17\n''') == 'YES'\nassert solution('''\n8\n5 972 3 4 1 4 970 971\n''') == 'YES'\nassert solution('''\n6\n40 41 43 44 44 44\n''') == 'NO'\nassert solution('''\n6\n55 16 17 972 3 4 1 4 970 971\n''') == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n'\n    '18 55 16 17'\n) == 'YES'\n\nassert solution(\n    '6\\n'\n    '40 41 43 44 44 44'\n) == 'NO'\n\nassert solution(\n    '8\\n'\n    '5 972 3 4 1 4 970 971'\n) == 'YES'\n\nassert solution(\n    '10\\n'\n    '2 1 2 1 2 1 2 1 2 2 2'\n) == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'\nassert solution('6\\n5 972 3 4 1 4 970 971') == 'YES'\nassert solution('4\\n18 55 16 17') == 'YES'\nassert solution('8\\n40 41 43 44 44 44') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 9') == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '9'\nassert solution('3 9') == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\""
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\""
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"3 9\\n1 2 3\\n1 2 3 7 8 9 11 12 13\"\n) == \"9\"\n\nassert solution(\n    \"5 5\\n1 2 3 4 5\\n1 2 3 4 5\"\n) == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n\") == \"Vasya\"\nassert solution(\"2\\n\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 'Vasya'\nassert solution('2\\n') == 'Petya'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 3') == '0'\nassert solution('2 5 3') == '1'\nassert solution('2 2 3') == '0'\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 2 3\n1 2\n2 2\n2 1\n\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 5 3\n1 3\n1 1\n1 5\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 1 3\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5 3\") == \"0\"\nassert solution(\"2 5 3\") == \"1\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 3') == '0'\nassert solution('2 5 3') == '2'\nassert solution('4 5 3') == '1'\n\nNote that the test solutions that we provided are not necessarily valid. The elements that we do not purchase are not very important and can be modified."
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('1 5 3') == '0'\nassert solution('4 3 6') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2 3\n1 2\n2 2\n2 1\n''') == '0'\n\nassert solution('''\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n\nassert solution('''\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '2'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2 3\n1 2\n2 2\n2 1\n''') == '0'\nassert solution('''4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\\n\") == \"0\"\nassert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\\n\") == \"2\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\\n\") == \"1\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2\\n1 2\\n2 2') == '0'\nassert solution('1 5 3\\n1 3\\n1 1\\n1 5') == '2'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 2 3\n1 2\n2 2\n2 1\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"1 5 3\n1 3\n1 1\n1 5\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\nAB\\nAB\\nBA\\nBA\") == \"2\"\nassert solution(\"3\\nAA\\nAB\\nBB\") == \"3\"\nassert solution(\"6\\nAA\\nAB\\nBA\\nBB\\nAC\\nCC\") == \"4\""
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"14\") == \"5\"\nassert solution(\"1000000\") == \"2\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == '2'\nassert solution('8\\nAA\\nAB\\nBA\\nBB') == '4'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"1000\") == \"9335419766\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\nA\nB\nB\nA''') == '2'\nassert solution('''4\nA\nB\nB\nA''') == '2'\nassert solution('''8\nB\nB\nA\nA\nB\nB\nB\nB''') == '4'\nassert solution('''12\nB\nB\nA\nA\nB\nB\nA\nA''') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\nAA\\nAB\\nBA\\nBB') == '2'"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == ''\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\nprint(solution(input()))\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3 4''') == '3'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '5'\n\n'''\n+---------------------------------------------------------------------+\n|                                                                    |\n|                                                                    |\n|                                                                    |\n|                                                                    |\n|                                                                    |\n|                                                                    |\n|                                                                    |\n|                                                                    |\n|                                                                    |\n+---------------------------------------------------------------------+\n\n'''"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 3 4\n''') == '2'\nassert solution('''5\n2 3 4 6 7\n''') == '3'\nassert solution('''4\n3 5 4 2\n''') == '4'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 4\\n') == '2'\nassert solution('5 2 3 4 6 7\\n') == '3'\nassert solution('1 1\\n') == '2'\n'''"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2 3 4\n''') == '2'\nassert solution('''\n3\n2 3 4 6 7\n''') == '3'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('6\\nBABAC') == '10'\nassert solution('7\\nBABC') == '3'\nassert solution('8\\nBADBC') == '10'\nassert solution('9\\nBADCBA') == '10'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nABAABC') == '11'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nABAC') == '11'\nassert solution('5\\nABAAC') == '11'\nassert solution('5\\nABABA') == '3'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '11'\nassert solution('5ABAB') == '11'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\nassert solution(\"4\\nAAAAAAAA\") == \"10\"\nassert solution(\"6\\nAAABCD\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nABAAC\\n\") == \"11\"\nassert solution(\"1\\nABC\\n\") == \"1\"\nassert solution(\"9\\nABCBABCD\\n\") == \"32\"\nassert solution(\"1\\nBCD\\n\") == \"0\"\nassert solution(\"3\\nABA\\n\") == \"3\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"26\"\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n\n'''\n1. I have to calculate the number of seconds (time) until height of abol becomes equal to height of xaniar.\n2. The number of seconds is equal to the modulo of the difference of heights of xaniar and abol.\n3. The modulo is the remainder of a number after it's division by m.\n4. The number of seconds will be equal to the modulo of 2 * difference of h_1 and h_2 and the modulo of difference of x_1 and y_1.\n5. The modulo of 2 * difference of h_1 and h_2 and the modulo of difference of x_1 and y_1 = x_2 and y_2"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n4 2\\n1 1\\n0 1\\n2 3') == '3'\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n''') == \"3\"\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n''') == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n\n''') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"1023 1 2\") == \"-1\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"1023 1 1\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\nassert solution('''\n5\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\nassert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\n\nassert solution('''\n''') == '-1'\n\n'''"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '3'\nassert solution('1023 1 2') == '-1'\nassert solution('1 2') == '2'"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"1023 1 2 1 1\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('4 5') == '2'"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\nassert solution(\"3\\n2 1 2\") == \"1\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n4 5\n''') == '2'\nassert solution('''3\n4 5\n''') == '0'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\n\nassert solution('3') == '0'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n\"\"\"\n\n\nclass Solution:\n    def solve(self, n: int, *args) -> str:\n        def flip(r: int, c: int) -> int:\n            return min(2 * r, 2 * c)\n\n        def get_prime_numbers(n: int) -> list:\n            prime_numbers = []\n            for i in range(2, n + 1):\n                if i > 2 and i % 2 == 0:\n                    continue\n                if i > 3 and i % 3 == 0:\n                    continue\n                prime_numbers.append(i)\n\n            return prime_numbers\n\n        prime_numbers = get_prime_numbers(int(n))\n        for number in prime_numbers:\n            flips = flip(args[0], args[1])\n            if flips > number:\n                continue\n            for i in range(2, len(args)):\n                flips = flip(args[i], flips)\n                if flips > number:\n                    break\n            if flips == number:\n                return str(flips)\n\n        return \"N/A\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\\n\") == \"1\"\nassert solution(\"2\\n4 5\\n\") == \"2\""
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3\n4 5\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 2 1\n''') == 'YES'\nassert solution('''\n2 2 2 3\n''') == 'NO'\nassert solution('''\n2 2 2 3\n''') == 'NO'\n\nassert solution('''\n2 2 2 3\n''') == 'NO'\n'''\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 2 1\n''') == 'YES'\n\nassert solution('''\n1 2 3 4\n''') == 'NO'\n\nassert solution('''\n2 2 2 3\n''') == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 2 1''') == 'YES'\nassert solution('''1 2 3 4''') == 'NO'\nassert solution('''2 2 2 3''') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\nassert solution(\"3 3 3 3\") == \"NO\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([2, 2, 2, 1]) == 'YES'\nassert solution([1, 2, 3, 4]) == 'NO'\nassert solution([2, 2, 2, 3]) == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 4\n1 3 2 4\n1 3 4 2\n''') == 'YES'\n\nassert solution('''\n4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\\n\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4') == 'YES'\nassert solution('4 4') == 'YES'\nassert solution('3 6') == 'NO'\nassert solution('4 4') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'YES', \"First example\"\nassert solution('''3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5''') == 'NO', \"Second example\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n''') == 'NO'\nassert solution('''\n2 4\n1 3 2 4\n1 3 4 2\n''') == 'YES'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2\\n') == 'YES'\nassert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 2 3 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"6 4\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\"\nassert solution(\"2 3\\n1 2 4\\n1 3 4\\n\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 4\n    1 2 3 4\n    1 3 4 2\n    \"\"\"\n) == \"YES\"\n\nassert solution(\n    \"\"\"\n    4 4\n    1 2 3 4\n    2 3 4 1\n    3 4 1 2\n    4 1 2 3\n    \"\"\"\n) == \"YES\"\n\nassert solution(\n    \"\"\"\n    5 6\n    2 1 3 4 5 6\n    1 2 4 3 5 6\n    1 2 3 4 6 5\n    1 2 3 5 6 4\n    1 2 3 5 6 4\n    \"\"\"\n) == \"YES\"\n\nassert solution(\n    \"\"\"\n    5 6\n    2 4 3 1 5 6\n    4 3 1 2 5 6\n    4 3 1 5 2 6\n    4 3 5 1 2 6\n    4 3 5 2 1 6\n    \"\"\"\n) == \"NO\"\n\nassert solution(\n    \"\"\"\n    3 3\n    1 2 3\n    2 3 1\n    1 3 2\n    \"\"\"\n) == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2\n''') == \"NO\"\nassert solution('''4 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n''') == \"NO\"\nassert solution('''3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n''') == \"YES\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\\n\") == \"0\\n\"\nassert solution(\"1 2 1\\n\") == \"666666672\\n\"\nassert solution(\"1 3 1\\n\") == \"333333333333333333\\n\"\n\nassert solution(\"2 1 1\\n\") == \"0\\n\"\nassert solution(\"2 2 1\\n\") == \"666666672\\n\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1\n''') == '0'\nassert solution('''\n1 2 1\n''') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1 1\n''') == '0', '3'\nassert solution('''\n1 2 1\n''') == '666666672', '3'\nassert solution('''\n1 2 2\n''') == '0', '3'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1') == '666666672'\nassert solution('1 2 2') == '0'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == '0'\nassert solution(input_) == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\nassert solution('1 2 2\\n') == '3628800'\nprint(\"Congratulations! Your solutions works perfectly!\")\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n') == '0'\nassert solution('1 2 1\\n') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6\n7 2 3 1 5 6\n\"\"\") == \"5\"\nassert solution(\"\"\"\n12\n6 4 2 3 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == 5\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == 5\nassert solution('5') == 1\nassert solution('1000000000') == 1\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '8'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '5'\nassert solution('7') == '4'\nassert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n7 2 3 1 5 6') == '5'\nassert solution('4\\n1 2 3 4 5') == '4'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '9'\nassert solution('10\\n3 2 5 8 4 7 6 9 1') == '10'\nassert solution('2\\n5 3') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 8') == 2\nassert solution('4 2 2 6') == 3\nassert solution('3 7 4 6') == 1\n\"\"\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 1 8''') == '2'\nassert solution('''4 2 2 6''') == '3'\nassert solution('''3 7 4 6''') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1 1 8''') == '2'\nassert solution('''4 2 2 6''') == '3'\nassert solution('''3 7 4 6''') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1 1 1 8\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n4 2 2 6\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n3 7 4 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 7 4 6') == '1'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n\nassert solution('-1 4 15') == '4'\n\n'''\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 5\n''') == \"2\"\n\nassert solution('''\n-1 4 15\n''') == \"4\"\n\nassert solution('''\n0 -1 5\n''') == \"-1\"\n\nassert solution('''\n7 3 6\n''') == \"7\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-\"\nprint(solution(\"\"\"\nx, y, m\n3, 2, 5\n\"\"\") == \"2\")\nprint(solution(\"\"\"\n-1, 4, 15\n\"\"\") == \"4\")"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2 5\n\n''') == '2'\nassert solution('''-1 4 15\n\n''') == '4'\nassert solution('''0 -1 5\n\n''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 5\n''') == '2'\nassert solution('''-1 4 15\n''') == '4'\nassert solution('''0 -1 5\n''') == '-1'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"6 1\\n\"\n    \"2 1 2 3 4 3\\n\") == \"2\"\n\nassert solution(\n    \"6 1\\n\"\n    \"2 1 2 3 4 3\\n\") == \"0\"\n\nassert solution(\n    \"6 1\\n\"\n    \"2 3 4 2 1\\n\") == \"3\""
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"2\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"6 1\") == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"2\""
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"2\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"6 1\") == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 1\n2 1 2 3 4 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6 2\n1 1 2 2 3 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 1\n1 1 2 2 3 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\nassert solution('''\n6 1\n1 2 2 3 4 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n4 1\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n4 1\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n4 1\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n4 1\n2 2 2 2 3 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == \"2\"\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == \"0\"\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == \"2\"\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == \"0\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"YES\"\nassert solution(\"thursday\") == \"YES\"\nassert solution(\"friday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('monday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\ntuesday\\n') == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('monday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\nsunday\\n') == 'NO'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_sample_1) == \"YES\"\nassert solution(input_sample_2) == \"NO\"\nassert solution(input_sample_3) == \"YES\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"saturday\\ntuesday\\n\") == \"YES\"\nassert solution(\"saturday\\nwednesday\\n\") == \"NO\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\nassert solution(\"saturday\\nwednesday\\n\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"monday\\ntuesday\"\n) == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"saturday\") == \"YES\"\nassert solution(\"sunday\") == \"NO\"\nassert solution(\"monday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''monday\ntuesday\n''') == 'NO'\nassert solution('''saturday\nsunday\n''') == 'YES'\nassert solution('''saturday\ntuesday\n''') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"YES\"\nassert solution(\"sunday\\nsunday\\n\") == \"NO\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(samples[0]) == 'YES'\nassert solution(samples[1]) == 'NO'\nassert solution(samples[2]) == 'YES'\nassert solution(samples[3]) == 'NO'\n\n\"\"\"\n\ndays_of_week = ['saturday','sunday','monday', 'tuesday', 'wednesday', 'thursday', 'friday']"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n21\n21\n''') == '17'\nassert solution('''\n3\n4\n''') == '17'\nassert solution('''\n5000000001\n4999999999\n''') == '91'\nassert solution('''\n5000000001\n10000000000\n''') == '18'\nassert solution('''\n10000000000\n10000000000\n''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''35\n10000000000''') == '17'\nassert solution('''10000000000''') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '17'\nassert solution(input()) == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''35\n\n10000000000\n\n''') == '17'\nassert solution('''10000000000\n\n''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n\n''') == '91'\nassert solution('''2\n\n''') == '91'\nassert solution('''3\n\n''') == '91'\nassert solution('''4\n\n''') == '91'\nassert solution('''5\n\n''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12') == '7'\nassert solution('123') == '7'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('9999999999999999999999999999999999999999999999999999999999999999999999999') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"17\"\nassert solution(input()) == \"91\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"XO\") == \"NO\"\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"XO\") == \"NO\"\nassert solution(\"AHA\") == \"YES\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nassert solution('AHA') == 'YES'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint(solution())"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '0'\nassert solution(input_short) == '1'\n\"\"\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '0'\nassert solution(input(':')) == '1'\n\nassert solution(input(':')) == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\") == \"0\"\nassert solution(\"3\\n1 2 5\") == \"1\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '1'\nassert solution('''\n2\n1 5\n''') == '0'\nassert solution('''\n3\n1 2 5\n''') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1\n''') == '1'\nassert solution('''\n2\n1 2\n''') == '1'\nassert solution('''\n3\n1 2 5\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1\n''') == '1'\nassert solution('''3\n1 2 5\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 5\n''') == '0'\nassert solution('''\n3\n1 2 5\n''') == '1'\nassert solution('''\n4\n1 5 6 8\n''') == '2'\nassert solution('''\n5\n1 2 3 4 5\n''') == '3'\nassert solution('''\n6\n1 2 5 7 9 8\n''') == '4'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('-1 1000000000') == 'Yes'\nassert solution('0 0') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n\n\n'''\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\nassert solution(\"R\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'Yes'\nassert solution() == 'No'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\nRU') == 'Yes', \"Test 1 failed\"\nassert solution('1 2\\nRU') == 'No', \"Test 2 failed\"\nassert solution('0 0\\nD') == 'Yes', \"Test 3 failed\"\nassert solution('-1 1000000000\\nLRRLU') == 'Yes', \"Test 4 failed\"\nprint('All tests passed!')"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input(input())) == \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == 'Yes', 'basic case'\nassert solution('1 2') == 'No', 'basic case'\nassert solution('-1 1000000000') == 'Yes', 'basic case'\nassert solution('0 0') == 'Yes', 'basic case'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\nassert solution(\"0 0\\nD\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'No'\nassert solution('-1 1000000000') == 'Yes'\nassert solution('0 0') == 'Yes'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 3 7''') == '1'\nassert solution('''10   3   7''') == '1'\nassert solution('''314''') == '0'\nassert solution('''22 19 3''') == '1'\nassert solution('''60''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 3 7\") == \"1\", \"Should be 1\"\nassert solution(\"10   3   7\") == \"1\", \"Should be 1\"\nassert solution(\"314\") == \"0\", \"Should be 0\"\nassert solution(\"22 19 3\") == \"1\", \"Should be 1\"\nassert solution(\"60\") == \"1\", \"Should be 1\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\n\nassert solution('''\n10   3   7\n''') == '1'\n\nassert solution('''\n314\n''') == '0'\n\nassert solution('''\n22 19 3\n''') == '1'\n\nassert solution('''\n\n   60\n  \n  \n      31\n          \n          \n          \n          \nSample Output 6:\n1\n''') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\"\nassert solution(\"60\") == \"1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\nassert solution('''\n10   3   7\n''') == '1'\nassert solution('''\n314\n159 265\n358\n''') == '0'\nassert solution('''\n22 19 3\n''') == '1'\nassert solution('''\n''') == '0'\n'''\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '18'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1'\n    ) == '9'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\nassert solution('12345') == '9'\nassert solution('123456789') == '8'\nassert solution('10000') == '7'\nassert solution('1234') == '4'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n3\n4\n7\n8''') == '9'\nassert solution('''8\n6\n7\n9\n10''') == '16'\nassert solution('''10\n11\n12\n13''') == '5'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8''') == '15'\nassert solution('''1\n2\n3\n4\n5\n6\n7\n8''') == '17'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '18'\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '10'\nassert solution('3') == '10'\n\"\"\""
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '9'\nassert solution('1000000') == '9'\nassert solution('10000000') == '9'\nassert solution('10000001') == '8'\nassert solution('100000000') == '7'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('12') == '9'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 6 28 9\\n\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\\n\") == \"3\"\nassert solution(\"4\\n1 2 4 8\\n\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '-1'\nassert solution('3 6 28 9') == '4'\nassert solution('4 5 12 9 16 48') == '3'\nassert solution('2 3 4 5 6 7 8') == '-1'\nassert solution('2 4 8') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '3'\nassert solution('4') == -1\nassert solution('5') == '3'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 6 28 9\n''') == '4'\nassert solution('''\n5\n5 12 9 16 48\n''') == '3'\nassert solution('''\n4\n1 2 4 8\n''') == '-1'\nassert solution('''\n''') == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n3 6 28 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n5 12 9 16 48\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '3'\nassert solution('6') == '-1'\nassert solution('4') == '4'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 5 0 2 3\n\n''') == \"2\"\nassert solution('''\n7\n1 0 0 5 0 0 2\n\n''') == \"1 7 3 5 6 4 2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0 5 0 2 3\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\nassert solution('''7\n1 0 0 5 0 0 2\n1\n''') == '0'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0 5 0 2 3') == '2'\nassert solution('7\\n1 0 0 5 0 0 2') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n0 5 0 2 3\"\n) == \"2\"\nassert solution(\n    \"7\\n1 0 0 5 0 0 2\"\n) == \"1 7 3 5 6 4 2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n0 5 0 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"7\n1 0 0 5 0 0 2\n\"\"\") == \"1 7 3 5 6 4 2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n0 5 0 2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7\n1 0 0 5 0 0 2\n\"\"\") == \"1 7 3 5 6 4 2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n0 5 0 2 3\n\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n\n''') == '1'\nassert solution('''11\n
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\nassert solution('1') == '1'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"1 7 3 5 6 4 2\""
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('5\\n') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"5\") == 5\n\n\"\"\""
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('7') == '7'\n\n'''\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == 2\nassert solution('5') == 5\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '5'\nassert solution('3') == '2'\nassert solution('6') == '4'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '5'\nassert solution('''8\n2 1 3 5 7 8 1 2''') == '7'\nassert solution('''4\n1 1 1 1''') == '1'\nassert solution('''100\n
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '2'\nassert solution('5\\n') == '5'\nprint('ALL TESTS PASSED')\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == '2'\nassert solution(\"5\") == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"10\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '2'\nassert solution('5\\n') == '5'\nassert solution('8\\n') == '4'\nassert solution('10\\n') == '8'\nassert solution('12\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 2\") == \"18\", \"Wrong\"\nassert solution(\"4 2 2\") == \"31\", \"Wrong\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 2') == '18', \"Wrong\"\nassert solution('4 2 2') == '31', \"Wrong\"\nassert solution('5 3 1') == '1 3 5', \"Wrong\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\n\nassert solution('''\n5 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"5 3 1\") == \"1 3 5\"\n\n\"\"\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == \"18\"\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n''') == \"31\"\nassert solution('''5 3 1\n5 2 5 1 7\n6 3 1 6 3\n''') == \"23\"\nassert solution('''1 2 1\n1 2 1 1 1\n''') == \"2\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\nassert solution(\"5 3 1\") == \"1 3 5\"\nassert solution(\"6 3 1 6 3\") == \"4\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 2 2\\n'\n    '1 3 4 5 2\\n'\n    '5 3 2 1 4\\n') == '18\\n'\nassert solution(\n    '4 2 2\\n'\n    '10 8 8 3\\n'\n    '10 7 9 4\\n') == '31\\n'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n1 2') == 'Yes\\naa'\nassert solution('4 3\\n1 2\\n1 3\\n1 4') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"Yes\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"No\"\nassert solution(\"5 7\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n3 5\\n\") == \"Yes\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 4\\n\") == \"No\"\nassert solution(\"2 1\\n1 2\\n\") == \"Yes\"\nassert solution(\"2 2\\n1 2\\n\") == \"Yes\"\nassert solution(\"3 3\\n1 2\\n2 2\\n3 2\\n\") == \"Yes\"\nassert solution(\"4 2\\n1 2\\n3 2\\n2 2\\n\") == \"Yes\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    4 3\n    1 2\n    1 3\n    1 4\n    ''') == 'No'\n\nassert solution(\n    '''\n    5 3\n    1 2\n    1 3\n    1 4\n    1 5\n    ''') == 'Yes'\n\nassert solution(\n    '''\n    4 1\n    1 2\n    1 3\n    1 4\n    ''') == 'Yes'\n\nassert solution(\n    '''\n    5 3\n    1 2\n    1 3\n    1 4\n    1 5\n    ''') == 'No'\n\nassert solution(\n    '''\n    4 1\n    1 2\n    1 3\n    1 4\n    ''') == 'Yes'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 1'\n    ) == 'Yes'\nassert solution(\n    '4 3'\n    ) == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 1\n1 2\n''') == 'Yes'\n\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'No'\n\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'Yes'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('4 3') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n1 2\n''') == 'Yes'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'No'\n'''\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1\n1 2\n1 3\n\n2 2\n2 3\n2 4''') == \"Yes\"\n\nassert solution('''4 3\n1 2\n1 3\n1 4\n\n2 2\n2 3\n2 4''') == \"No\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n5\n''') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 1 1\\n1 0 1\\n1 1 0\\n3') == '7'\nassert solution('0 2 2\\n1 0 100\\n1 2 0\\n3') == '19'\nassert solution('0 2 1\\n1 0 100\\n1 2 0\\n5') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('0 2 2') == '19'\nassert solution('1 0 1') == '5'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('1 0 1') == '8'\nassert solution('1 2 0') == '6'\nassert solution('3') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1 0\\n1 2 0\\n3\\n\") == \"7\"\nassert solution(\"1\\n2 3\\n1 2 3\\n\") == \"9\"\nassert solution(\"3\\n0 1 1\\n1 0 1\\n2 1 0\\n\") == \"11\"\nassert solution(\"1\\n0 1 1\\n1 0 1\\n2 1 0\\n\") == \"10\"\nassert solution(\"3\\n1 1 0\\n1 2 0\\n3\\n\") == \"4\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"1 0 1\") == \"7\"\nassert solution(\"1 2 0\") == \"19\"\nassert solution(\"3\") == \"87\"\n\n\n---Input---\n1\n0 2 1\n1 0 100\n1 2 0\n3\n\n---Output---\n19\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"7\"\nassert solution(\"2 2 2\\n1 0 100\\n1 2 0\\n3\") == \"19\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read().strip()"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin_fixture) == stdout_fixture"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''Bulbbasaur\n    ''') == '1'\nassert solution('''F\n    ''') == '0'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bulbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''Bulbbasaur\n''') == '1'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"Bulbbasaur\"\n) == \"1\"\nassert solution(\n    \"F\"\n) == \"0\"\nassert solution(\n    \"aBddulbasaurrgndgbualdBdsagaurrgndbb\"\n) == \"2\"\nprint(\"Tests done\")\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"Bulbbasaur\n\"\"\") == \"1\"\nassert solution(\"\"\"F\n\"\"\") == \"0\"\nassert solution(\"\"\"aBddulbasaurrgndgbualdBdsagaurrgndbb\n\"\"\") == \"2\""
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('F') == 0\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\nassert solution('Bulbbasaur') == 1\nassert solution('F') == 0\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Bulbbasaur') == '1'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3\\narc\\nrac') == 'YES'\nassert solution('2 3\\narc\\nrac') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'YES'\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('4 2') == 'NO'\nassert solution('10 9') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\narc\nrac''') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\narc\nrac''') == 'YES'\nassert solution('''2 3\narc\nrac\n:''') == 'YES'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\na''') == 'YES'\nassert solution('''2 2\na\nb''') == 'NO'\nassert solution('''3 3\nabc\nbca\ncab''') == 'YES'\nassert solution('''3 4\ncba\nabd\naec''') == 'NO'\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\narc\nrac''') == 'YES'\nassert solution('''2 2\nab\nac''') == 'NO'\nassert solution('''3 3\nabc\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('5 3\\ncab\\nabd') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\narc\nrac\n''') == 'YES'\nassert solution('''1 3\narc\nrac\n''') == 'NO'\nassert solution('''2 4\narcrac\nrac\n''') == 'NO'"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\nassert solution(\"2 3\\narc\\nrac\\n\") == \"YES\"\nassert solution(\"2 4\\naxby\\nabc\\n\") == \"NO\"\nassert solution(\"2 5\\nabcde\\nfghi\\n\") == \"NO\"\n\n----SAMPLE INPUT/OUTPUT----\nInput    Output\n2 3    YES\n2 3    YES\n2 4    NO\n2 5    NO\n'''\n\nfrom itertools import permutations\n\nH, W = map(int, input().split())\nS = input()"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 111\\n1111\\n10111\\n10010') == '4'\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\n\nN, X = map(int, input().split())\n\nset_ = set()\nwhile N!= 0:\n    if N % 2 == 1:\n        set_.add(N)\n        N -= 1\n    else:\n        N = 2 * (N // 2)\n\nnumbers = list(set_)\nnumbers.sort(key=lambda x: (x * 2, x))\n\nn = 0\nfor n in numbers:\n    if n < X:\n        break\n    elif n == X:\n        print(len(numbers))\n        break\n    else:\n        n -= 1\n\n\n\n\n\n\n\n\n\n\"\"\"---SOLUTION---\"\"\"\n\n\"\"\"---SOLUTION---\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n10111\\n\") == \"4\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 111\"\n) == \"4\"\nassert solution(\n    \"3 12\"\n) == \"3\"\n\n\"\"\"\n\nn, x = int(stdin.readline()), int(stdin.readline())\n\nnumbers = []\nfor i in range(n):\n    numbers.append(int(stdin.readline()))\n\ncount = 0\nfor i in range(2 ** n):\n    bit = bin(i)[2:].zfill(n)\n    xor = numbers[0]\n    for j in range(n):\n        xor ^= bit[j] * numbers[j + 1]\n    if xor < x:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 111') == '5'\nassert solution('6 111') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"6 3\") == \"6\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(['3', '1111']) == '4'\nassert solution(['3', '10111']) == '0'\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1\\n111\\n1111\\n10111\\n10010\\n\") == \"4\"\nassert solution(\n    \"1\\n1\\n1\\n1\\n1\\n1\\n\") == \"5\"\nassert solution(\n    \"1\\n1111\\n1111\\n1111\\n1111\\n1111\\n\") == \"2\"\nassert solution(\n    \"1\\n1111\\n1111\\n1111\\n1111\\n1111\\n\") == \"1\"\nassert solution(\n    \"2\\n1\\n0\\n1\\n0\\n0\\n\") == \"0\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 1') == '2'\nassert solution('1') == '1'\n\ntime: O(n)\nspace: O(n)\n'''\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 111\") == \"4\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"4\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([11,11,5]) == 1\nassert solution([11,2,3]) == -1\n\n\"\"\"\n\nfrom math import factorial\n\nk, a, b = list(map(int, stdin.split()))\nans = -1\nwhile a + b!= k:\n    if a + b <= k:\n        a += 1\n        if a + b == k:\n            ans = 1\n            break\n    else:\n        b += 1\n        if a + b == k:\n            ans = 1\n            break\nprint(ans)\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\nassert solution(\"10 2 3\") == \"2\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 11 5\") == \"1\"\nassert solution(\"1 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == '1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 5') == '1'\nassert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\nassert solution('8 8 0') == '0'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3 3\n''') == '1'\nassert solution('''\n5 4 2\n''') == '-1'\nassert solution('''\n10 4 2\n''') == '3'\n''')\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 3 5\n''') == '1'\nassert solution('''\n10 2 5\n''') == '-1'\nassert solution('''\n100 20 3\n''') == '1'\nassert solution('''\n-1 2 3\n''') == '-1'\nassert solution('''\n100 -1 5\n''') == '1'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"NO\"\nassert solution(\"jinotega\") == \"YES\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\"\"\"\nimport re"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"a b a c a b a\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"NO\"\nassert solution(\"jinotega\") == \"YES\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '6.5'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == \"6.5\"\nassert solution(t) == \"20.0\"\n\nfrom typing import List\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 6\n''') == '6.5'\n\nassert solution('''4 2 20\n''') == '20.0'''"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\nassert solution('''10 5 3''') == '6.25'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '2'\n\nassert solution('''\n4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n..\n..\n\n''') == '2'\nassert solution('''3 4\n....\n.##.\n....\n\n''') == '1'\nassert solution('''3 5\n....\n.##.\n...#\n.##.\n\n''') == '1'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '2'\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '1'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '1'\nassert solution('4 4') == '2'\nassert solution('3 3') == '1'\nassert solution('6 6') == '2'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 3\n''') == '6'\nassert solution('''4\n1 1 3 1\n''') == '6'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 1 3\") == \"6\"\nassert solution(\"3\\n1 2 4\") == \"8\"\nassert solution(\"5\\n1 2 1 2 3\") == \"17\"\nassert solution(\"4\\n1 1 4 4\") == \"14\"\n\n'''\n\nn = int(input())\nd = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n):\n    if d[i] == 1:\n        continue\n    for j in range(i + 1, n):\n        if d[j] == 1:\n            continue\n        if d[i] % d[j] == 0:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6\n1 1 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n1 1 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 3\\n\") == \"6\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3\n1 1 3\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1 3') == '6'\nassert solution('10\\n6 8 3 1') == '16'\nassert solution('10\\n6 7 4 1') == '14'\nassert solution('10\\n6 8 7 4 1') == '14'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 3') == '6'\nassert solution('4\\n3 2 4 2') == '1'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 3\\n') == '6'\nassert solution('2\\n1 1 3\\n') == '3'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\n\nassert solution('4') == '3'\n\nassert solution('5') == '2'\n\nassert solution('6') == '1'\n\nassert solution('7') == '0'"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '11'\nassert solution('3') == '3'\nassert solution('4') == '3'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 4 3 7 5') == '11'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '13'\nassert solution('1\\n1 2 3 4 5 6 7 8 9 10') == '11'\nassert solution('1\\n1 2 3 4 5 6 7 8 9 10') == '11'\nassert solution('1\\n1 2 3 4 5 6 7 8 9 10') == '11'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n0 1 2 3 4\n''') == '7'\nassert solution('''\n5\n0 1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n4\n1 4 3 7 5\n''') == '3'\nassert solution('''\n2\n1 2 3 4 5\n''') == '1'\n'''"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"11\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '11'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"11\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"11\"\nassert solution(\"1\") == \"11\"\nassert solution(\"2\") == \"11\""
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '11'\nassert solution('6') == '7'\nassert solution('7') == '3'\nassert solution('8') == '2'\nassert solution('9') == '1'\n\"\"\""
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"10\") == \"4\"\nassert solution(\"10\") == \"5\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.3\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 100\n9.2\n\n\"\"\") == \"9.2\"\nassert solution(\"\"\"6 1\n10.245\n\n\"\"\") == \"10.25\"\nassert solution(\"\"\"6 2\n10.245\n\n\"\"\") == \"10.3\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string()) == '10.3'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"10.0\"\nassert solution(\"5\") == \"5.0\"\nassert solution(\"3\") == \"3.0\"\n\"\"\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n1.2\\n') == '1.2'\nassert solution('3 100\\n9.2\\n') == '9.2'\nassert solution('4 100\\n9.8\\n') == '9.8'\nassert solution('5 100\\n9.5\\n') == '9.5'\nassert solution('6 100\\n9.6\\n') == '9.6'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '10.3'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1\\n10.245\\n') == '10.25'\nassert solution('6 2\\n10.245\\n') == '10.3'\nassert solution('3 100\\n9.2\\n') == '9.2'\n\n\"\"\"\n\nn, t = map(int, input().split())\ngrade = map(float, input().split())\nmax_grade = 0\n\nfor i in range(n):\n    if i < len(grade) - 1:\n        if grade[i] < 5 and grade[i + 1] >= 5:\n            grade[i + 1] += 1\n        if grade[i] >= 5 and grade[i + 1] < 5:\n            grade[i + 1] -= 1\n        if i == len(grade) - 2:\n            if grade[i + 1] >= 5:\n                grade[i + 1] -= 1\n    else:\n        if grade[i] < 5:\n            grade[i] += 1\n\n    max_grade = max(max_grade, grade[i])\n\nprint('%f' % max_grade)\n\n\"\"\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1\n10.245\n\nOutput\n10.25''') == '10.3'\n\nassert solution('''6 2\n10.245\n\nOutput\n10.3''') == '10.3'\n\nassert solution('''3 100\n9.2\n\nOutput\n9.2''') == '9.3'\n\nassert solution('''5 100\n10.245\n\nOutput\n9.25''') == '10.3'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 1\n10.245\n\n''') == '10.25'\nassert solution('''6 2\n10.245\n\n''') == '10.3'\nassert solution('''3 100\n9.2\n\n''') == '9.2'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3 4\n\n''') == '0110'\nassert solution('''1 1 1 1\n\n''') == 'Impossible'\nassert solution('''2 0 0 1\n\n''') == '0202'\nassert solution('''3 1 3 1\n\n''') == 'Impossible'\nassert solution('''4 4 4 4\n\n''') == 'Impossible'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2 1') == \"0110\"\nassert solution('1 2 2 1') == \"0110\"\nassert solution('1 1 1 1') == \"Impossible\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 1 1 1\") == \"0110\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"0110\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 2, 2, 1]) == '0110'\nassert solution([1, 2, 1, 1]) == '1110'\nassert solution([1, 1, 1, 1]) == '1101'\nassert solution([1, 1, 1, 1]) == '0111'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"0110\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"0110\"\nassert solution(input()) == \"0110\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"Impossible\"\nassert solution(\"1 2 2 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"0110\"\nprint(solution(input))\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3 4\n''') == \"0110\"\n\nassert solution('''\n1 2 2 1\n''') == \"Impossible\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3 4\n''') == '0110'\nassert solution('''\n1 2 2 1\n''') == '0111'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7\n*..P*P*\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n''') == '2'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s1) == '3'\nassert solution(s2) == '2'\n\n\n\n\n\"\"\"\n\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n*PP.*P.*\") == \"3\"\nassert solution(\"10\\n*.**PP.*P.*\") == \"2\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7\n*..P*P*\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3'\nassert solution('''\n*..P*P*\n''') == '3'\nassert solution('''\n.**PP.*P.*\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n..PPP*P*P*\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n*..P*P*\n''') == '3'\nassert solution('''10\n*P*PP*P*\n''') == '2'\nassert solution('''20\n
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"3\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n\") == \"4\"\nassert solution(\"2\\n\") == \"8\"\nassert solution(\"3\\n\") == \"16\""
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n2\n1\n2\n3\n4\n''') == \"2\"\nassert solution('''4\n4\n3\n4\n1\n2\n1\n''') == \"4\"\nassert solution('''3\n3\n2\n2\n1\n''') == \"2\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '4'\nassert solution('2\\n') == '8'\nassert solution('3\\n') == '16'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n9 9 5 5 2 1\n\"\"\") == \"1 3 9 7\"\nassert solution(\"\"\"\n100 100 52 50 46 56\n\"\"\") == \"17 8 86 92\"\nassert solution(\"\"\"\n4 4 3 1 5 2\n\"\"\") == \"1 3 5 4\"\n\n\"\"\"\nInput\n100 100 52 50 46 56\n\nOutput\n17 8 86 92\n\"\"\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 4 5 1') == '2 3 5 1'\nassert solution('9 9 5 5 2 1') == '2 3 5 1'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 3 9 7\""
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 4\n1 2\n3 4\n5 6\n\"\"\") == \"1 3 4\"\nassert solution(\"\"\"\n4 3\n2 3\n2 5\n3 6\n\"\"\") == \"3 5 6\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2 1\") == \"1 3\"\nassert solution(\"10 10 10 10 1 1 1 1 1\") == \"1 2\""
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 20 10 20 30 40 50\n''') == '3 2 4 5'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 6 10 10 2 2\n6 6 10 10 1 4\n6 6 10 10 2 2''') == '2 3 9 7'\nassert solution('''9 9 5 5 2 1\n6 6 10 10 1 4\n6 6 10 10 2 2''') == '2 3 9 7'\nassert solution('''9 9 5 5 2 2\n6 6 10 10 1 4\n6 6 10 10 2 2''') == '2 3 9 7'\nassert solution('''100 100 52 50 46 56\n100 100 52 50 46 56\n100 100 52 50 46 56''') == '17 8 86 92'\nassert solution('''100 100 52 50 46 56\n100 100 52 50 46 56\n100 100 52 50 46 56''') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1 3 9 7\""
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 4 3 2\") == \"0 0 0 0\"\nassert solution(\"3 9 5 8\") == \"0 0 5 0\"\nassert solution(\"5 7 4 7\") == \"2 4 4 4\"\nassert solution(\"7 9 5 7\") == \"2 4 4 4\"\nassert solution(\"3 9 3 3\") == \"0 0 0 0\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nF\n2\n''') == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"F\") == \"Yes\"\nassert solution(\"TFTFF\") == \"Yes\"\nassert solution(\"FFTFT\") == \"Yes\"\nassert solution(\"TTTFF\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTFFFTSS') == 'No'"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTFFFFFF') == 'No'\nassert solution('TTTTTTT') == 'Yes'\nassert solution('TTTTTT') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"FFFF\") == \"Yes\"\nassert solution(\"TTTT\") == \"No\"\nassert solution(\"FFTF\") == \"Yes\"\nassert solution(\"TTTTT\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''F\nT\nF\nF\nT\nF\nF\nT\n''') == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TTTT\") == \"No\"\nassert solution(\"TTFT\") == \"Yes\"\nassert solution(\"TTFF\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''F\nFTFFTFFF\n''') == 'Yes', \"First\"\nassert solution('''F\nF\n''') == 'Yes', \"Second\"\nassert solution('''T\nFTFFTFFF\n''') == 'Yes', \"Third\"\nassert solution('''T\nT\n''') == 'Yes', \"Fourth\"\nassert solution('''T\nT\nF\n''') == 'Yes', \"Fifth\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n0\n1\n0\n''') == '2'\nassert solution('''2\n0\n1\n0\n''') == '3'\nassert solution('''3\n0\n1\n0\n''') == '5'\nassert solution('''4\n0\n1\n0\n''') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 2 3\n3\n\n\"\"\") == \"1.3333333333\"\nassert solution(\"\"\"4\n2 2 2 2\n4\n\n\"\"\") == \"2.0\"\nassert solution(\"\"\"5\n4 4 4 4 4\n5\n\n\"\"\") == \"2.0\""
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 2 3 1 4') == '0.5'\nassert solution('3\\n1 3 2') == '1.0'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1'\nassert solution('3\\n1 2 3\\n2 3 1\\n') == '1.3333333333'\nassert solution('3\\n3 2 1\\n1 2 3\\n') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nassert solution('5\\n2 3 1 2\\n5\\n') == '1.3333333333'\nassert solution('10\\n10 10 10 10 10 10\\n10\\n') == '1.0'\nassert solution('6\\n1 2 3 4 5\\n10\\n') == '1.666666666666'\nassert solution('7\\n1 2 3 4 5 6\\n10\\n') == '1.33333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n3\n\n''') == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 3 4 5\n4\n\n''') == '1.0'\nassert solution('''\n5\n1 2 3 4 5\n3\n\n''') == '1.0'\nassert solution('''\n5\n2 3 4 5\n3\n\n''') == '1.0'\nassert solution('''\n5\n2 3 4 5\n4\n\n''') == '0.5'\nassert solution('''\n5\n1 2 3 4 5\n5\n\n''') == '0.5'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n5\\n\") == \"1.5\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n\") == \"0.5\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1.3333333333\"\nassert solution(\"5\") == \"1.0\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n4\\n10\\n10') == '1.3333333333'\nassert solution('2\\n3\\n4\\n10\\n10') == '1.66666666667'\nassert solution('3\\n3\\n4\\n10\\n10') == '1.3333333333'\nassert solution('4\\n3\\n4\\n10\\n10') == '1.3333333333'\nassert solution('5\\n3\\n4\\n10\\n10') == '0.000000000'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1.3333333333'\nassert solution('1') == '1.0'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 2\n    9 7 11 15 5''') == '13 7'\nassert solution('''2 100000 569\n    605 986''') == '986 605'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('10 5 2') == '9 7 11 15 5'\nassert solution('10 2 6') == '9 9 9 9 9 9 9 9 9 9'\nassert solution('10 2 6') == '9 9 9 9 9 9 9 9 9 9'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 2\") == \"13 7\"\nassert solution(\"5 1 2\") == \"13 7\"\nassert solution(\"3 1 2\") == \"13 6\"\nassert solution(\"5 1 2\") == \"13 6\"\nassert solution(\"2 1 2\") == \"13 6\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"13 7\""
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1 2\n9 7 11 15 5\n\"\"\") == \"13 7\"\nassert solution(\"\"\"\n1 1 1\n1\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n3 3 2\n1 4 9 8\n\"\"\") == \"1 4\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n9 7 11 15 5') == '13 7'\nassert solution('4 3\\n4 3 4 5\\n6 7 8 9 10 11') == '12 12'\nassert solution('1\\n1') == '1'\nassert solution('6\\n1\\n2\\n4\\n8\\n11\\n16') == '11'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n') == '13 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1 2\n9 7 11 15 5\n\n4 1 2\n15 9 7 11 5\n\n4 1 2\n9 7 11 15\n\n4 1 2\n9 7 11 15 5\n\n5 1 2\n15 9 7 11 5\n\n3 1 2\n15 9 7 11\n\n2 2\n15 9 7 11\n''') == '986 605'\n\nassert solution('''\n5 1 3\n9 7 11 15 5\n\n4 1 2\n15 9 7 11\n\n4 1 3\n9 7 11 15\n\n4 1 2\n15 9 7 11\n\n5 1 2\n9 7 11 15\n\n3 1 2\n15 9 7 11\n\n2 2\n15 9 7 11\n''') == '15 9 7 11 15'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 2\n9 7 11 15 5\n\nOutput\n13 7''') == '986 605'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '1'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10\n''') == '1'\nassert solution('''3 3 3 3 5\n2 3 5 4 2\n''') == '0'\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n''') == '-1'\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n''') == '3'\n\nprint(solution('''1 1 2 2\n1 1'''))"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'\n\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"-1\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 2 4 4\n2 5 4 10\n''') == '1'\nassert solution('''\n3 3 3 3 5\n2 3 5 4 2\n''') == '0'\nassert solution('''\n5 5 1 2 3\n2 3 5 4 2\n''') == '3'\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2 2 4\") == \"1\"\nassert solution(\"3 4 1 1\") == \"0\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"3 3 3 3 5\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 1 2 3') == '0'\nassert solution('3 3 3 3 5') == '1'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'\nassert solution('5 5 1 2 3') == '-1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10\n''') == '1'\n\nassert solution('''3 3 3 3 5\n2 3 5 4 2\n''') == '0'\n\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n''') == '-1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\"\nassert solution(\"3 4 1 1 3\") == \"0\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10''') == '1'\n\nassert solution('''3 3 3 3 5\n2 3 5 4 2\n''') == '0'\n\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n''') == '3'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([2]) == '0'\nassert solution([4]) == '4'\nassert solution([5]) == '4'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\nG3 G3''') == '0'\nassert solution('''4\nB1 Y1 W1 G1 R1''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1''') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '4'\nassert solution('8') == '5'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\nassert solution('6') == '3'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n\"\"\"\n\nn = int(input())\ncards = input().split()\nhints = {}\nfor i in range(n):\n    color = cards[i][0]\n    number = int(cards[i][1])\n    if color not in hints:\n        hints[color] = 1\n    else:\n        hints[color] += 1\n\nresult = 0\nfor i in hints:\n    result += hints[i]\n\nprint(result)\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '4'\nassert solution('5') == '4'\n\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nR2 R2\\n\") == \"1\"\nassert solution(\"2\\nG4 G3\\n\") == \"2\"\nassert solution(\"3\\nY3 Y3\\n\") == \"0\"\nassert solution(\"4\\nB2 R2 B1 W3\\n\") == \"4\"\nassert solution(\"5\\nB1 Y1 Y1 W1 W2 W1 Y2\\n\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\nG3 G3''') == '0'\nassert solution('''4\nB1 Y1 W1 G1 R1''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1\n''') == '3'\nassert solution('''6\nG1 G3 G1 R3 G1 G4\n''') == '2'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"4\\n3 3 4 3\\n4 7 6 5\") == \"2 6\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n3 3 4 3\\n4 7 6 5') == '2 6'\nassert solution('5\\n10 30 5 6 24\\n10 41 7 8 24') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n3 3 4 3\\n4 7 6 5\\n') == '2 6'\nassert solution('5\\n10 30 5 6 24\\n10 41 7 8 24\\n') == '3 11'\n\n\"\"\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n3 3 4 3') == '2 6'\nassert solution('5\\n10 30 5 6 24') == '3 11'\n\n\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\nresult = []\n\nfor i in range(n):\n    result.append(a[i] + b[i])\n\nresult.sort()\n\nprint(len(result))\nprint(result[0])"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n3 3 4 3\n4 7 6 5\n\"\"\") == \"2 6\"\nassert solution(\"\"\"\n4\n10 30 5 6 24\n10 41 7 8 24\n\"\"\") == \"3 11\"\nassert solution(\"\"\"\n5\n10 30 5 6 24\n10 41 7 8 24\n\"\"\") == \"3 11\"\nassert solution(\"\"\"\n10\n1 1\n100 100\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n3 3 4 3\n4 7 6 5\n\"\"\") == \"2 6\"\nassert solution(\"\"\"\n5\n10 30 5 6 24\n10 41 7 8 24\n\"\"\") == \"3 11\"\nassert solution(\"\"\"\n2\n1 1\n100 100\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n6\n10 30 5 6 24 5 8 7 3 2\n10 41 7 8 24 5 8 7 3 2\n\"\"\") == \"4 9\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 1\n100 100\n''') == '1 1'\nassert solution('''\n5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 3 4 3\n4 7 6 5\n''') == '2 6'\nassert solution('''\n5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n'''\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 6'\nassert solution() == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2 6'\nassert solution('4') == '3 11'\nassert solution('5') == '3 11'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 4\\n\") == \"3B\"\nassert solution(\"2 2\\n\") == \"Impossible\"\nassert solution(\"3 2\\n\") == \"1A1B\""
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"3B\"\nassert solution(input_string_2) == \"Impossible\""
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 4\n''') == '3B'\n\nassert solution('''\n2 2\n''') == 'Impossible'\n\nassert solution('''\n3 2\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4\\n') == '3B\\n', '1st example'\nassert solution('2 2\\n') == 'Impossible\\n', '2nd example'\nassert solution('3 2\\n') == '1A1B\\n', '3rd example'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 4\") == \"3B\", \"First\"\nassert solution(\"2 2\") == \"Impossible\", \"Second\"\nassert solution(\"3 2\") == \"1A1B\", \"Third\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 4\n\"\"\") == \"25\"\nassert solution(\"\"\"\n20 5\n\"\"\") == \"902511\""
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"5 5\") == \"50\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n2 1\n3 2\n3 1\n''') == '3'\n\nassert solution('''5 4\n4 2\n4 1\n3 2\n3 1\n''') == '25'\n\nassert solution('''10 5\n6 5\n7 7\n7 6\n''') == '36'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_sample_string) == '3'\nassert solution(input_sample_string_2) == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n\"\"\"\n\np,k = list(map(int, input().split()))\nprint((p*pow(2,p-2))%(1000000007) )"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n\n'''\n\nimport math\nimport itertools"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == \"2\"\n\nimport math\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\""
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\nassert solution(input('')) == '1'\nassert solution(input('-1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n')) == '19'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"4 1 2 3\") == \"1\"\nassert solution(\"0 2 -3 1\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 5') == '2'\nassert solution('8 4') == '3'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('3\\n10 20\\n5 10\\n20 30') == '0'\nassert solution('4\\n1 2 3\\n0 2 3\\n1 3\\n2 3\\n3 4') == '1'"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('7 4\\n1 2 3 4 5 6 7\\n1 3\\n2 5\\n5 2\\n6 7\\n5 7\\n3 5\\n7 4\\n5 1\\n') == '5'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.o.\\no.T\\n\") == \"2\"\nassert solution(\"2 3\\n.o.\\no.T\\n\") == \"-1\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.o\\n.o.\\no.T') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 2') == '-1'"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '2'\nassert solution('5 7\\n.o.\\no.S') == '2'\nassert solution('3 3\\n.o.\\no.o') == '-1'\nassert solution('10 20\\n.o.\\no.S.\\n.o.\\no.S.\\no.T.\\no.T.\\no.T') == '4'\nassert solution('6 6\\nS.o\\n.o.\\no.o\\n.o.\\n.o.\\n.o.S\\n.o.S\\no.T\\no.T\\no.T') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n.o.\n.o.\n.o.\n\n''') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\n.o.\n.o.\n.o.\n.o.\n.o.''') == '2'\nassert solution('''3 2\n.o.\n.o.\n.o.\n.o.\n.o.''') == '-1'\nassert solution('''2 2\n.o.\n.o.\n.o.\n.o.\n.o.''') == '2'\n'''\n\n\n\nimport sys\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1\") == \"-1\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n.o.\n.o.\no.T\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5\nSSSS.\n.S.S.\nSS.TT.\nS.S.\n.SS.S\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 4\n.o.o\n..o.\n.o.T\n.o.\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 4\n.o.o\n..o.\n.o.T\n.o.\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3 1\n.o\n.o\n.o\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n''') == '1'\n\nassert solution('''\n3 2\n''') == '3'\n\nassert solution('''\n199 200\n''') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n\n''') == '1'\nassert solution('''\n3 2\n\n''') == '3'\nassert solution('''\n199 200\n\n''') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''3 2''') == '3'\nassert solution('''199 200''') == '200'"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n\nassert solution(\"1000000 10000\") == \"1000\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\nassert solution('2 2') == '2'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n5 2\\n3 3\\n') == 'Aoki'\nassert solution('3\\n5 2\\n3 3\\n') == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 2\\n3 3\\n\") == \"Aoki\"\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(samples[0]) == 'Aoki'\nassert solution(samples[1]) == 'Takahashi'\n\"\"\"\nimport math"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2\\n5 2\\n3 3') == 'Aoki'\nassert solution(\n    '3\\n5 2\\n3 3') == 'Takahashi'\n'''\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == 'Aoki'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string_1) == output_string_1\nassert solution(input_string_2) == output_string_2\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 2\n3 3\n\"\"\"\n) == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Aoki\"\nassert solution(\"5 2\") == \"Takahashi\"\nassert solution(\"6 1\") == \"Takahashi\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n5 2') == 'Aoki'\nassert solution('3\\n3 3') == 'Takahashi'"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n5 2\\n3 3\\n') == 'Aoki'\nassert solution('2\\n10 5\\n5 3\\n') == 'Takahashi'\n\n-----Hint:-----\nDivide the problem into subproblems.\n\n\"\"\""
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\"\nassert solution('''\n3 3\n''') == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n''') == '8'\nassert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n0\n''') == '0'\nassert solution('''3 3\n0\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n3''') == '0'\nassert solution('''3 3\n4\n5\n6''') == '8'\nassert solution('''7 3\n5\n6\n7\n8\n9\n10\n1\n2\n3''') == '14'\nassert solution('''10 10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n''') == '0'\nassert solution('''3 3\n''') == '8'\nassert solution('''3 3\n1 1\n1 1\n3 3\n''') == '12'\nassert solution('''3 3\n1 1\n3 3\n3 3\n''') == '12'\nassert solution('''10 10\n5 5\n8 8\n9 9\n4 4\n7 7\n7 7\n6 6\n5 5\n''') == '30'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n\") == \"0\"\nassert solution(\"3 3\\n\") == \"8\"\nprint(solution(input()))\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\nassert solution('3 2') == '4'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 2\"\"\") == \"0\"\nassert solution(\"\"\"3 3\"\"\") == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n\"\"\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == stdout_\n\n\n'''\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n1 2 3 4\\n1 5 6 4\\n') == '1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 3') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '0'\nassert solution('2 3') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '0'\nassert solution(input) == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\nassert solution(input2) == \"0\"\nassert solution(input3) == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 3') == '0'\nassert solution('1 2 3 4') == '1'\nassert solution('1 5 3 4') == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == '1'\nassert solution(input_string_2) == '0'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4\n\n''') == '1'\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3\n\n''') == '0'\nassert solution('''2 4\n1 2 4 5\n1 2 1 3 2 3\n\n''') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"24\") == \"19:09\"\nassert solution(\"12\") == \"07:09\"\nassert solution(\"24\") == \"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"17:00\"\nassert solution(\"24\") == \"07:00\"\nassert solution(\"99\") == \"09:00\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''12\n17:30\n''') == '17:30'\nassert solution('''24\n99:99\n''') == '99:99'\nassert solution('''24\n99:99\n''') == '99:99'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"24\") == \"17:30\"\nassert solution(\"12\") == \"17:30\"\nassert solution(\"24\") == \"17:30\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('24') == '07:09'\nassert solution('12') == '17:30'\nassert solution('24') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(12) == '00:99'\nassert solution(24) == '00:39'\nassert solution(99) == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n12\n99:99''') == \"09:09\"\nassert solution('''\n24\n99:99''') == \"09:09\"\nassert solution('''\n24\n99:99''') == \"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(24) == \"17:39\"\nassert solution(12) == \"17:39\"\nassert solution(24) == \"17:39\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"07:00\"\nassert solution(\"24\") == \"09:00\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"07:30\"\nassert solution(\"24\") == \"09:09\"\n\nassert solution(\"24\") == \"09:09\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 3\n2\n1 2 1\n2 3 1\n3 1 1\n\"\"\") == \"6\"\nassert solution(\"\"\"3 3\n2\n1 2 1\n2 3 1\n3 1 1\n\"\"\") == \"6\""
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"3 4\") == \"3\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '6'\nassert solution('1 1') == '1'\nassert solution('5 5') == '2'\nassert solution('10 10') == '1'\nassert solution('7 7') == '0'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '6'\nassert solution('6') == '1'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n2\n1 2 1\n2 3 1\n3 1 1''') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 4\") == \"6\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '4'\nassert solution('3 3') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"6\") == \"15\""
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 3') == '7'\nassert solution('1 3') == '1'\nassert solution('5 2') == '1'\nassert solution('10 10') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('6') == '5'\nassert solution('1\\n2 0 3 0 1 1') == '5'\nassert solution('6\\n2 0 3 0 1 1') == '-1'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '5'\nassert solution('1') == '0'\nassert solution('6') == '-1'\n\nstdin = '1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '6\\n2 0 3 0 1 1\\n') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6\\n'\n\nassert solution(\n    '6\\n0 0 0 0 1 1\\n') == '0\\n'\n\nassert solution(\n    '6\\n3 2 2 2 1 1\\n') == '-1\\n'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n''') == '5'\n\nassert solution('''\n1\n0\n''') == '0'\n\nassert solution('''\n6\n3 2 2 2 1 1\n''') == '-1'\n\nassert solution('''\n6\n3 2 2 2 1 1\n''') == '5'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n''') == '5'\nassert solution('''\n1\n0\n''') == '0'\n\nassert solution('''\n6\n3 2 2 2 1 1\n''') == '-1'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data) == '5 1'\nassert solution(input_data) == '-1'\n\"\"\""
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1\\n3 0 3 0 1 1\\n') == '5\\n2 1\\n2 5\\n3 3\\n3 6\\n5 6'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"6\") == \"5\"\nassert solution(\"6\") == \"1\"\nassert solution(\"6\") == \"-1\"\nprint(solution(input))\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '-1'\nassert solution('3') == '1 1'\nassert solution('4') == '1 3'\nassert solution('5') == '4 4'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n''') == '5 2 1'\nassert solution('''\n6\n3 2 2 2 1 1\n''') == '-1'\nassert solution('''\n6\n3 2 2 2 1 1\n''') == '5 3 3'\nassert solution('''\n6\n0 0 2 2 1 1\n''') == '0 0 2 2 1 1'\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '1 1 1 1 1 1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 8\n12 20''') == \"2\"\nassert solution('''3 10\n10 20 30''') == \"1\"\n\n\n\n\n\n4 5\n\n4 5\n\n8 10\n1 1\n\n2 6\n2 2\n\n2 3\n\n3 2\n\n4 2\n4 3\n4 4\n\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4\n2 4"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '2 8\\n'\n    '12 20'\n) == '2\\n0 4\\n1 0\\n0 0\\n1 4\\n2 0\\n3 0\\n4 4\\n5 0\\n6 4\\n7 4\\n8 4\\n9 4\\n10 4\\n11 4\\n12 4\\n13 4\\n14 4\\n15 4\\n16 4\\n17 4\\n18 4\\n19 4\\n20 4\\n21 4\\n22 4\\n23 4\\n24 4\\n25 4\\n26 4\\n27 4\\n28 4\\n29 4\\n30 4\\n31 4\\n32 4\\n33 4\\n34 4\\n35 4\\n36 4\\n37 4\\n38 4\\n39 4\\n40 4\\n41 4\\n42 4\\n43 4\\n44 4\\n45 4\\n46 4\\n47 4\\n48 4\\n49 4\\n50 4\\n51 4\\n52 4\\n53 4\\n54 4\\n55 4\\n56 4\\n57 4\\n58 4\\n59 4\\n60 4\\n61 4\\n62 4\\n63 4\\n64 4\\n65 4\\n66 4\\n67 4\\n68 4\\n69 4\\n70 4\\n71 4\\n72 4\\n73 4\\n74 4\\n75 4\\n76 4\\n77 4\\n78 4\\n79 4\\n80 4\\n81 4\\n82 4\\n83 4\\n84 4\\n85 4\\n86 4\\n87 4\\n88 4\\n89 4\\n90 4\\n91 4\\n92 4\\n93 4\\n94 4\\n95 4\\n96 4\\n97 4\\n98 4\\n99 4\\n100 4\\n101 4\\n102 4\\n103 4\\n104 4\\n105 4\\n106 4\\n107 4\\n108 4\\n109 4\\n110 4\\n111 4\\n112 4\\n113 4\\n114 4\\n115 4\\n116 4\\n117 4\\n118 4\\n119 4\\n120 4\\n121 4\\n122 4\\n123 4\\n124 4\\n125 4\\n126 4\\n127 4\\n128 4\\n129 4\\n130 4\\n131 4\\n132 4\\n133 4\\n134 4\\n135 4\\n136 4\\n137 4\\n138 4\\n139 4\\n140 4\\n141 4\\n142 4\\n143 4\\n144 4\\n145 4\\n146 4\\n147 4\\n148 4\\n149 4\\n150 4\\n151 4\\n152 4\\n153 4\\n154 4\\n155 4\\n156 4\\n157 4\\n158 4\\n159 4\\n160 4\\n161 4\\n162 4\\n163 4\\n164 4\\n165 4\\n166 4\\n167 4\\n168 4\\n169 4\\n170 4\\n171 4\\n172 4\\n173 4\\n174 4\\n175 4\\n176 4\\n177 4\\n178 4\\n179 4\\n180 4\\n181 4\\n182 4\\n183 4\\n184 4\\n185 4\\n186 4\\n187 4\\n188 4\\n189 4\\n190 4\\n191 4\\n192 4\\n193 4\\n194 4\\n195 4\\n196 4\\n197 4\\n198 4\\n199 4\\n200 4\\n201 4\\n202 4\\n203 4\\n204 4\\n205 4\\n206 4\\n207 4\\n208 4\\n209 4\\n210 4\\n211 4\\n212 4\\n213 4\\n214 4\\n215 4\\n216 4\\n217 4\\n218 4\\n219 4\\n220 4\\n221 4\\n222 4\\n223 4\\n224 4\\n225 4\\n226 4\\n227 4\\n228 4\\n229 4\\n230 4\\n231 4\\n232 4\\n233 4\\n234 4\\n235 4\\n236 4\\n237 4\\n238 4\\n239 4\\n240 4\\n241 4\\n242 4\\n243 4\\n244 4\\n245 4\\n246 4\\n247 4\\n248 4\\n249 4\\n250 4\\n251 4\\n252 4\\n253 4\\n254 4\\n255 4\\n256 4\\n257 4\\n258 4\\n259 4\\n260 4\\n261 4\\n262 4\\n263 4\\n264 4\\n265 4\\n266 4\\n267 4\\n268 4\\n269 4\\n270 4\\n271 4\\n272 4\\n273 4\\n274 4\\n275 4\\n276 4\\n277 4\\n278 4\\n279 4\\n280 4\\n281 4\\n282 4\\n283 4\\n284 4\\n285 4\\n286 4\\n287 4\\n288 4\\n289 4\\n290 4\\n291 4\\n292 4\\n293 4\\n294 4\\n295 4\\n296 4\\n297 4\\n298 4\\n299 4\\n300 4\\n301 4\\n302 4\\n303 4\\n304 4\\n305 4\\n306 4\\n307 4\\n308 4\\n309 4\\n310 4\\n311 4\\n312 4\\n313 4\\n314 4\\n315 4\\n316 4\\n317 4\\n318 4\\n319 4\\n320 4\\n321 4\\"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 8]) == \"2\"\nassert solution([3, 10]) == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 8\n12 20''') == '2'\n\nassert solution('''3 10\n10 20 30''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 8\n12 20\n''') == '2'\nassert solution('''\n3 10\n10 20 30\n''') == '1'\n\n'''"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '3.866855290801589542'\nassert solution('-1 -1') == '1.866855290801589542'\nassert solution('-1 0') == '3.866855290801589542'\nassert solution('0 0 0 1000') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '1.94445249899581022'\nassert solution('-1 -1') == '1.94445249899581022'\nassert solution('-1 0') == '1.94445249899581022'\nassert solution('0 0') == '0.0'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"100 1000\") == \"11.547005383792516398\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\nassert solution('-50 0') == '11.554699432069943'\nassert solution('50 0') == '11.554699432069943'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\") == \"11.547005383792516398\"\nassert solution(\"0 0 0 5\") == \"11.547005383792516398\""
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\nassert solution('''\n0 0 0 100\n100 100\n-50 0\n50 0\n''') == '2.253589359430282783'\nassert solution('''\n0 0 0 100\n100 100\n-100 0\n50 0\n''') == '6.0'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"3 2\") == \"1.086956521739130434\"\nassert solution(\"-1 -1\") == \"0.5\"\nassert solution(\"-1 0\") == \"0.5\""
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6.000000'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"Second\"\n'''"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second'\nassert solution('''\n2\n1\n2\n''') == 'First'\nassert solution('''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second'\n'''\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Second'\nassert solution('2') == 'Second'\nassert solution('3') == 'Second'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Second\"\nassert solution(\"2\") == \"First\"\nassert solution(\"3\") == \"Second\"\nassert solution(\"4\") == \"Second\"\nassert solution(\"5\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n10\\n2\\n1 2\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n1 2\\n5\\n3\\n4\\n7\\n1\\n4\\n7\\n1\\n2\\n8\\n7\\n7\\n2\\n7\\n8\\n2\\n8\\n8\\n7\\n7\\n5\\n4\\n3\\n4\\n5\\n3\\n4\\n8\\n7\\n7\\n2\\n7\\n4\\n5\\n8\\n2\\n7\\n8\\n8\\n7\\n2\\n7\\n8\\n8\\n7\\n7\\n8\\n8\\n7\\n7\\n8\\n8\\n7\\n7\\n8\\n8\\n7\\n7\\n7\\n7\\n7\\n8\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"First\"\nassert solution(\"10\") == \"Second\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"1 2\") == \"First\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\\n2\\n1\\n2\\n1 2\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162') == 'Second\\nFirst\\nSecond'"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second\\nFirst\\nSecond':\n    print('TEST CASE PASSED')\nelse:\n    print('TEST CASE FAILED')\n\n-----EXAMPLE-----\nInput:\n1\n5\n4\n5\n1 2\n2 3\n5 6\n7 8\n1 2\n3 4\n2 3\n4 5\n1 2\n1 3\n3 3\n1 1\n3 2\n4 4\n1 1\n3 2\n2 2\n1 1\n2 1\nOutput:\nT\nT\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"Second\\nFirst\\nSecond\"\nassert solution(\"2\\n1\\n10\\n2\\n1 2\\n21\\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\") == \"First\\nSecond\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == \"1\""
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"6 3 2\") == \"2\"\nassert solution(\"10 2 2\") == \"0\"\nassert solution(\"15 2 3\") == \"5\"\nassert solution(\"15 2 3 4\") == \"10\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(sample_input_2) == \"1\"\nassert solution(sample_input_3) == \"1\"\nassert solution(sample_input_4) == \"1\"\nassert solution(input_1) == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('5 5 2') == '4'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution('3 2') == '1'\nassert solution('5 3 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n4 3 1 5 2') == '1'\nassert solution('5 3 2\\n4 3 1 5 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 2 3\n''') == '1'\nassert solution('''5 3 2\n4 3 1 5 2\n''') == '1'\nassert solution('''5 4 3 2\n4 3 1 5 2\n''') == '1'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n''') == '1'\n\nassert solution('''\n3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 1\") == \"1\"\nassert solution(\n    \"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n''') == '24'\nassert solution('''\n3 2\n''') == '16'\nassert solution('''\n1 1\n''') == '1'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n''') == \"1\"\nassert solution('''\n3 2\n''') == \"24\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\nassert solution('4 4') == '0'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n''') == '1'\n\nassert solution('''\n3 2\n''') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\""
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"4 4\") == \"3\"\nassert solution(\"7 3\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n\nassert solution() == '6'\n\nassert solution() == '1196'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n\n''') == '6'\n\nassert solution('''\n4 4\n\n''') == '3'\n\nassert solution('''\n7 3\n\n''') == '1196'\n\nassert solution('''\n31 8\n\n''') == '64921457'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n\n''') == '6', \"You failed this!\"\n\nassert solution('''\n4 4\n\n''') == '3', \"You failed this!\"\n\nassert solution('''\n31 8\n\n''') == '64921457', \"You failed this!\""
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 2\n\n\"\"\") == \"6\"\nassert solution(\"\"\"4 4\n\n\"\"\") == \"3\"\nassert solution(\"\"\"7 3\n\n\"\"\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n') == '6'\nassert solution('3 4\\n') == '3'\nassert solution('4 4\\n') == '1196'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '6'\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import prod\n\nn, m = map(int, stdin.split())\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '6'\nassert solution('4 4') == '1196'\nassert solution('7 3') == '64921457'\n\"\"\"\n\nfrom typing import List, Tuple\nimport collections\nimport sys\n\nclass Solution:\n    def solution(self, n: int, m: int) -> int:\n        def is_similar(G, H):\n            g = collections.defaultdict(list)\n            h = collections.defaultdict(list)\n            for u, v in G:\n                g[u].append(v)\n                h[v].append(u)\n            for u, v in H:\n                if not g[u] or not h[v]:\n                    return False\n                if g[u][0]!= h[v][0]:\n                    return False\n                g[u].pop(0)\n                h[v].pop(0)\n            return True\n\n        q = collections.deque([])\n        visited = set([0])\n        q.append((0, 0))\n        total_count = 0\n        while q:\n            n, count = q.popleft()\n            if n == m:\n                total_count += 1\n            for u, v in ((n - 1, n), (n + 1, n), (n, n - 1), (n, n + 1)):\n                if 0 <= u < n and 0 <= v < n and (u, v) not in visited:\n                    visited.add((u, v))\n                    if is_similar(G, (u, v)):\n                        q.append((u, count + 1))\n                        q.append((v, count + 1))\n        return total_count"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2\n\n\"\"\") == \"6\"\nassert solution(\"\"\"\n4 4\n\n\"\"\") == \"3\"\nassert solution(\"\"\"\n7 3\n\n\"\"\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n3\n2\n1''') == '6'\nassert solution('''4 4\n1\n2\n1''') == '1196'\nassert solution('''31 8\n1\n1\n2\n2\n1''') == '64921457'\nassert solution('''6 3\n5\n2\n5\n6\n5\n5''') == '7'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 5') == '#XXX'\nassert solution('5 5 5') == '#X#.X#'\nassert solution('2 1 0') == '#X#'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...'\nassert solution('5 4 5') == '#X.X#\\nX#.\\n...#\\n.#.#\\n'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...\\n'\nassert solution('5 4 5') == '#.X#\\nX#.X\\nX#..\\n...#\\n#.#X'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...'\nassert solution('5 4 5') == '#.X#\\n#X#.\\nX#.#\\n...#\\n#.#X'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"#.X#\\nX.#.\\n#...\\n.#.#\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n#.#.\\n\") == \"#X#X\\nX.#.\\n#...\\n.#.#\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4 5\") == \"#XXX\"\nassert solution(\"10 10 5\") == \"#####\"\nassert solution(\"100 100 5\") == \"XXXXX\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 5\\n#...\\n#.#.\\n#...\\n#...\\n\") == \"\\n#X#\\nX#.\\nX#..\\n...#\\n.#.#\\n\"\nassert solution(\"5 4 4\\n#.#.\\n.#.\\n#.X\\n#.X\\n#.X\\n\") == \"\\n#X#\\nX.#\\n#.X\\n#.X\\n#.X\\n\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n#..#\\n#...\\n#...\\n\") == \"\\n#X#\\n#X#\\nX.#\\nX#.\\n#...\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"XX#X\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == \"###.\\n###.\\n###.\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == '1'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('5\\n1 2 2 2 2') == '3'\nassert solution('18\\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4') == '4'\nassert solution('12\\n2 5 2 2 1 5 2 1 3 2 3') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '4'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3]) == '1'\nassert solution([5]) == '3'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3]) == \"1\"\nassert solution([5]) == \"3\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 1\n\nOutput\n1\n\nInput\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n\nOutput\n4''') == '4'\nassert solution('''\n5\n1 2 2 2\n\nOutput\n3''') == '3'\nprint(solution('''\n5\n1 2 2 2\n\nOutput\n3'''))"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == \"4\"\n\n'''\n\nimport sys\nimport itertools"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"18\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1\n''') == '4'\nassert solution('''10\n1 1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"7 5 2\") == \"1 2 3 4 5 7\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"3 4 5 6 7 8 9\") == \"1 3 6 7 9 8 4 2 5\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('4 3 1 2') == '3 1 2 4'\nassert solution('1 1 1 1 1 1') == '1 1 1 1 1 1'\nassert solution('5 1 2 4 3') == '2 4 1 3 5'\nassert solution('6 7 2 8 1 4 3') == '3 1 4 1 7 6'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2\") == \"1 2\"\nassert solution(\"2 5 2\") == \"-1\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 2') == '1 2 3'\nassert solution('5 3 2') == '5 3 1 2'\nassert solution('5 5 5 5') == '5 5 5 5'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\""
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3,5,4,2,1]) == \"1 2 3 4 5\"\nassert solution([3,5,2,4,1]) == \"-1\"\nassert solution([-1, 2, 1, 3]) == \"1 2 -1\"\nassert solution([2, 1, 3, 5, 4, 2, 1]) == \"1 2 3 4 5 4 2 1\"\nassert solution([5,4,3,2,1]) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nprint(solution(\"5 3 2\"))\n\nstdin = input()\nN, A, B = list(map(int, stdin.split(\" \")))\nprint(*solution(stdin))\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n4 3\\n5 2\\n\") == \"Yes\"\nassert solution(\"3\\n3 6\\n\") == \"No\"\nassert solution(\"5\\n2 7\\n\") == \"Yes\"\nassert solution(\"11\\n4 8 9 10\\n\") == \"Yes\"\nassert solution(\"30\\n27 3\\n\") == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"9\") == \"Yes\"\n\"\"\"\n\nn = int(stdin)"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''2\n7 17\n''') == 'No'\nassert solution('''9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'No'\nassert solution('1') == 'Yes'\nassert solution('3') == 'No'\nassert solution('4') == 'Yes'\nassert solution('5') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n3 6 9 18 36 108') == 'Yes'\nassert solution('2\\n7 17') == 'No'\nassert solution('9\\n4 8 10 12 15 18 33 44 81') == 'Yes'\n\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n3 6 9 18 36 108\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n2\n7 17\n\"\"\") == \"No\"\nassert solution(\"\"\"\n9\n4 8 10 12 15 18 33 44 81\n\"\"\") == \"Yes\"\n\nprint(\"Runtime: %.10f ms\" % ((float(solution(sys.stdin.read())) * 10**3)))\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == \"Yes\"\n\n\n\"\"\"\n\nclass Solution:\n    def solution(self,stdin):\n        n=int(stdin.strip())\n        inp=map(int,stdin.strip().split())\n        inp=sorted(inp)\n        if inp[0]>1:\n            return(\"No\")\n        count=0\n        for i in range(1,n):\n            if inp[i]%inp[i-1]!=0:\n                return(\"No\")\n                break\n        return(\"Yes\")"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''\n2\n7 17\n''') == 'No'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == 'Yes'\nassert solution('2') == 'No'\nassert solution('9') == 'Yes'"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"7\"\nassert solution(\"6\") == \"13\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 -6 4 5 3\") == \"12\"\nassert solution(\"2 3 -6 4 5\") == \"5\"\nassert solution(\"3 2 -6 4 5\") == \"3\"\nassert solution(\"10 10 10 10 10 10\") == \"12\"\nassert solution(\"11 1 -4 1 2 2 2\") == \"10\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n-6 -3 5\n''') == '11'\nassert solution('''\n3\n-3 -5\n''') == '-2'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '12'"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 2 -6 4 5 3\") == \"12\"\nassert solution(\"5 7\") == \"11\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n1 2 -6 4 5 3') == '12'\nassert solution('6\\n1 2 1 4 5 3') == '6'\nassert solution('10\\n1 1 1 2 3 1 2') == '3'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '12'\n\n------Submission---------\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '12'\nassert solution('1 2 -6 4 5 3') == '18'\n\n'''\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        self.n: int = None\n        self.arr: List[int] = None\n\n    def __set_input(self):\n        self.n = int(input())\n        self.arr = list(map(int, input().split()))\n\n    def __solution(self) -> int:\n        answer: int = 0\n        cur_gem: int = self.arr[0]\n        for gem in self.arr[1:]:\n            if gem % cur_gem == 0:\n                answer += cur_gem\n                if gem > cur_gem:\n                    cur_gem = gem\n            else:\n                cur_gem = gem\n        return answer\n\n    def solution(self) -> str:\n        self.__set_input()\n        return str(self.__solution())"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2 -6 4 5 3\") == \"12\"\nassert solution(\"3\\n-1 2 3\") == \"3\"\nassert solution(\"4\\n-2 5 4 3\") == \"5\"\nassert solution(\"5\\n-2 -4 5 4 3\") == \"1\"\nassert solution(\"6\\n-2 -4 5 4 3\") == \"5\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"2 3\") == 1\nassert solution(\"1 2 3 4\") == 1\nassert solution(\"2 3 4 5 6 7 8 9\") == 1\nassert solution(\"1 2 3 4 5 6 7 8 9 0\") == 1\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 5\n1 2 3 4 5''') == '6'\nassert solution('''2 6\n1 2 4 5 1''') == '6'\nassert solution('''5 3\n1 2 3 4 5''') == '5'\nassert solution('''4 6\n1 2 3 4 5''') == '4'\nassert solution('''6 3\n1 2 3 4 5''') == '3'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n3 1 4 2\n''') == '5'\nassert solution('''\n6 4\n3 1 4 2 5 2\n''') == '4'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n3 1 4 2\n''') == '5'\nassert solution('''4 3\n1 3 4 2\n''') == '4'\nassert solution('''4 3\n3 2 1 4\n''') == '4'\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10\n''') == '10'\nassert solution('''10 10\n1 2 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10\n''') == '10'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == 5\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3, 1, 4, 2]) == 5\nassert solution([3, 1, 4, 2, 1]) == 5\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 3\n3 1 4 2\n\"\"\") == \"5\"\nassert solution(\"\"\"6 3\n3 1 4 2 2 4 5\n\"\"\") == \"7\"\nassert solution(\"\"\"6 4\n3 1 4 2 2 4 5\n\"\"\") == \"4\"\nassert solution(\"\"\"4 5\n1 1 1 1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"6 5\n1 1 1 1 1 1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 4 2') == 5\nassert solution('4 3\\n3 1 4 2') == 4\nassert solution('5 4\\n3 4 5 2 3') == 6\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '5'\nassert solution('10 3') == '10'"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '5'\nassert solution('4 5') == '5'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"0 1\"\n\nassert solution(\"\"\"\n3\n3 1 2\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2 3\n''') == \"0 0\"\n\nassert solution('''\n3\n2 3 1\n''') == \"0 1\"\n\nassert solution('''\n3\n3 2 1\n''') == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3\n    1 2 3\n''') == '0 0'\nassert solution('''\n    3\n    3 2 1\n''') == '2 1'\nassert solution('''\n    3\n    3 2 1\n''') == '2 1'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3]) == \"0 0\"\nassert solution([3, 2, 1]) == \"0 1\"\nassert solution([3, 3, 1]) == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2 3\n5 2 3 1''') == '0 0'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 3 1') == '0 0'\nassert solution('3\\n3 2 1') == '0 1'\nassert solution('3\\n3 2 1') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3 1\\n') == '0 0'\nassert solution('3\\n3 2 1\\n') == '0 1'\nassert solution('3\\n3 2 1\\n') == '0 1'\nassert solution('3\\n2 3 1\\n') == '0 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0 0'\nassert solution('2') == '0 1'\nassert solution('3') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n2 3 1\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"0 1\"\n\nassert solution(\"\"\"\n3\n3 2 1\n\"\"\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == \"0 0\"\nassert solution('3') == \"0 1\"\nassert solution('4') == \"1 1\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 6"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 4\naa\nbb\n\"\"\") == \"6\"\n\nassert solution(\n\"\"\"\n3 3\naba\nbba\n\"\"\") == \"8\"\n\nassert solution(\n\"\"\"\n4 5\nabbb\nbaaa\n\"\"\") == \"8\"\n\nassert solution(\n\"\"\"\n3 4\nbaab\naaba\n\"\"\") == \"6\""
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\naa\\nb\\n\") == \"6\"\nassert solution(\"3 3\\naba\\nbaa\\n\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5\naba\nbaaa\n''') == '8'\n\nassert solution('''2 4\naa\nbb\n''') == '6'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"6\"\nassert solution(\"3 3\") == \"8\"\nassert solution(\"4 5\") == \"8\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"6\"\nassert solution(\"3 3\") == \"8\"\nassert solution(\"4 5\") == \"8\"\n\n'''\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '6'\nassert solution('2 4') == '6'\nassert solution('3 3') == '8'\nassert solution('4 5') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '8'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0') == 'YES'\nassert solution('0 0 0\\n0 0 1') == 'YES'\nassert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1') == 'YES'\nassert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1') == 'YES'\nassert solution('0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'NO'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n''') == 'YES'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 1 1\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES'\nassert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'YES'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1'''\n\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\nOutput\nNO''') == 'NO\\n'\n\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n\nOutput\nYES\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n0 1 0\n1 0 1\n1 0 1\n''') == 'YES\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n0 1 0\\n1 0 1\\n1 0 1\\n'''\n\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\nOutput\nNO\n\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n0 1 0\n1 0 1\n1 0 1\n''') == 'NO\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n0 1 0\\n1 0 1\\n1 0 1\\n'''\n\nassert solution('''0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 1 1\n0 1 1\n0 1 1\n0 1 1\n\nOutput\nNO\n\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 0 1\n0 1 0\n1 0 1\n1 0 1\n''') == 'NO\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 0 1\\n0 1 0\\n1 0 1\\n1 0 1\\n'''\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'YES'"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\\n'''\n\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO\\n'''"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == 'YES'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == 'YES'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'YES'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n2 3 6 7\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5\n6 15 35 77 22\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n5\n6 10 15 1000 75\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n2 3 6 7\"\n    ) == \"YES\\n2 2 1 1\"\nassert solution(\n    \"5\\n6 10 15 1000 75\"\n    ) == \"NO\\n2 1 2 1 1\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"8\") == \"YES\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('6') == 'NO'\nassert solution('7') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''200\n60\n70''') == '0'\nassert solution('''411\n55\n70''') == '5'\nassert solution('''640\n60\n70''') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\nassert solution('100\\n300\\n550') == '5'\nassert solution('9000\\n100\\n1200') == '400'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n60\\n70\") == \"40\"\nassert solution(\"100\\n60\\n70\") == \"5\"\nassert solution(\"410\\n55\\n70\") == \"5\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"40\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n60\n70\n''') == '40'\nassert solution('''\n100\n60\n70\n''') == '5'\nassert solution('''\n410\n55\n70\n''') == '5'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"40\"\nassert solution(input_1) == \"40\"\nassert solution(input_2) == \"5\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('400\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"40\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3 4\"\nassert solution(stdin=\"5\\n1 1 1 1 1\\n\") == \"3 4\""
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('12') == '12'\nassert solution('3') == '4'\nassert solution('5') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4\"\n    \"1 1 2\"\n    \"1 2 1\"\n    \"2 1 1\"\n    \"1 3 1\"\n    ) == \"5\"\nassert solution(\n    \"5\"\n    \"1 1 1 1 1\"\n    ) == \"1\"\nassert solution(\n    \"10\"\n    \"2 2 2 2 2 2 2 2 2\"\n
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == '12'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '3'\nassert solution('12') == '12'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1\\n1 1\\n1'\nassert solution('3\\n1 2 3\\n') == '1\\n2 3\\n'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 1 4 1 5 9 2 6 5 3 5 8\n''') == '3 4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1 2 3'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('5') == '5'"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3 4'\nassert solution(input) == '3 4'\nassert solution(input) == '4 1'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 1 1 1 1\n''') == '1 4'\nassert solution('''\n3\n1 1 1\n1 1 1\n1 1 1\n''') == '1 4'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '1 4'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '1 4'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '1 4'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 3 3\\n') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"3 4\") == \"6\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n1 3 3\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 3 3\\n') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1\\n\") == \"6\"\nassert solution(\"10 1\\n1 10 1\\n\") == \"1\"\nassert solution(\"100 1\\n1 100 1\\n\") == \"2\"\nassert solution(\"1 1\\n1 1 1\\n\") == \"3\"\nassert solution(\"50 1\\n1 50 1\\n\") == \"1\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 1\n1 3 3\n\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n3 2\n1 3 1\n\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n1 1\n1 1\n\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"10\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 3 3') == '6'\nassert solution('6 3\\n2 5 1\\n4 6 2\\n3 4 1\\n5 1 2\\n1 2 3\\n4 5 2') == '2'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n1 3 3\n''') == '6'\nassert solution('''\n3 1\n1 3 3\n''') == '1'\nassert solution('''\n3 1\n1 3 3\n''') == '0'\nassert solution('''\n3 1\n1 3 2\n''') == '0'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 3 3') == '6'\n\"\"\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"30\") == \"10\"\nassert solution(\"97\") == \"1\"\nassert solution(\"87654\") == \"10\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '10'\nassert solution('4') == '-1'\nassert solution('1') == '-1'\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n9') == '3'\nassert solution('5\\n10') == '10'\nassert solution('5\\n21') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == -1\nassert solution(\"2\") == 2\nassert solution(\"3\") == -1\nassert solution(\"5\") == 2\nassert solution(\"6\") == -1\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '-1'\nassert solution('-1') == '-1'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '-1'\nassert solution('87654') == '10'\nassert solution('87654') == '10'"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '10'\nassert solution('87654') == '10'\nassert solution('30') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"3\\n5\") == \"-1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '10'\nassert solution('101') == '109'\nassert solution('1234567890') == '9999999990'\nassert solution('123456789101') == '9999999999'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"Second\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"abba\") == \"First\"\nassert solution(\"\") == \"\"\nassert solution(\"abcabcabc\") == \"Second\"\nassert solution(\"abcabcabcba\") == \"Second\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"bab\") == \"First\"\nassert solution(\"aabc\") == \"Second\"\nassert solution(\"aabb\") == \"First\"\nassert solution(\"aaaa\") == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Second\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aba') == 'Second'\nassert solution('cba') == 'First'\nassert solution('cd') == 'First'\nassert solution('abc') == 'Second'\nassert solution('a') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"dab\") == \"First\"\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"Second\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aba') == 'Second'\nassert solution('a') == 'First'\nassert solution('aab') == 'Second'\nassert solution('aabb') == 'First'\n\nTakahashi_code = '''\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aba') == 'Second'\nassert solution('bbb') == 'First'\nassert solution('a') == 'First'\nassert solution('b') == 'Second'\nassert solution('aaba') == 'Second'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"Second\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '40'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"40\"\nassert solution(input) == \"40\""
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '40'\nassert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('439873893693495623498263984765') == '40'\n\n'''"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"40\"\n\n\nInput\n3\n\nOutput\n\n3\n\nInput\n6\n\nOutput\n\n43\n\nInput\n9\n\nOutput\n\n2\n\"\"\"\na = int(input())\nn = int(input())"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"4\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"12 4\") == \"0\"\nassert solution(\"16 4\") == \"1\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"6\"\nassert solution(\"12\") == \"0\"\nassert solution(\"439873893693495623498263984765\") == \"40\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1\n\n2\n''') == '185138929'\nassert solution('''3 3\n0 1 1\n4 3 5\n\n2\n''') == '974061117'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 1\n0 1\n2 1\n\"\"\") == \"332748119\"\nassert solution(\"\"\"\n3 3\n0 1 1\n4 3 5\n\"\"\") == \"160955686\"\nassert solution(\"\"\"\n1 2\n1\n1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5''') == '160955686'\nassert solution('''1 2\n1\n1\n\n''') == '3'\nassert solution('''4 3\n0 1 1\n4 3 5\n\n''') == '974061117'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '974061117'\nassert solution('''\n2 2\n1\n1\n''') == '2'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '332748119'\nassert solution(input_) == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '974061117'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\n\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\nassert solution(\"AA\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''AJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ''') == \"ORZ\"\n\nassert solution('''AJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ''') == \"0\"\n\nassert solution('''AJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ''') == \"AJKEQSLOBSROFGZ\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"ORZ\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\nAAAAAAAABBB\nBBB\nCCCCCCDDDDD\nEEEEEEEEEEEE\n\"\"\") == \"DDDDD\"\n\nassert solution(r\"\"\"\nAA\nA\nA\n\n\"\"\") == \"0\"\n\nassert solution(r\"\"\"\nAA\nA\nAA\n\n\"\"\") == \"0\"\n\nassert solution(r\"\"\"\nAA\nA\nAA\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'OZ'\nassert solution('OZ') == 0"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AA\") == \"0\"\nassert solution(\"AAB\") == \"A\"\nassert solution(\"AAAB\") == \"AA\"\nassert solution(\"AAABB\") == \"ABA\"\nassert solution(\"AAABBB\") == \"ABAB\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\nprint(\"done\")"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\\n\") == \"99\\n\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\\n\") == \"0\\n\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n10 1 1\n100 100 1\n1 100 100\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\nassert solution('99 99 99\\n1 1 1\\n1 1 1') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"1 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100\\n') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1\\n') == '0'\nassert solution('0\\n100 100 100\\n0\\n') == '0'\nassert solution('0\\n0 0 0\\n0\\n') == '0'\nassert solution('100 100 100\\n1 1 1\\n1 1 1\\n') == '99'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('100 100 100') == '0'\nassert solution('0 0 0') == '0'\nassert solution('101 10 1') == '99'\nprint('solution() is working.')"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\\n\") == \"99\"\n\nstdin = \"\"\"\n10 10 10\n0 1 1\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n10 10 10\n\"\"\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1\n''') == '1'\nassert solution('''\n5 3\n''') == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1\n''') == '1'\nassert solution('''\n2 3\n''') == '1'\nassert solution('''\n2 2\n''') == '0'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution(\"\") == '0'\nassert solution(\"3 2\") == '1'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\"\nprint(solution(*[*map(int, input().split())])\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n\n''') == '1'\nassert solution('''\n3 2\n\n''') == '1'\nassert solution('''\n3 3\n\n''') == '0'\nassert solution('''\n1000000000000 1048576\n\n''') == '118606527258'\nassert solution('input.txt') == '183'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n1 10000000\n''') == '1'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"++-\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-+\") == \"No\"\nassert solution(\"+\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-++') == 'Yes'\nassert solution('-+') == 'No'\nassert solution('-++-') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+-') == 'No'\nassert solution('+') == 'Yes'\nassert solution('++') == 'Yes'\nassert solution('-++') == 'Yes'\nassert solution('+-') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+--\") == \"No\"\nassert solution(\"+++\") == \"Yes\"\nassert solution(\"-+\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('+') == 'Yes'\nassert solution('-') == 'No'\nassert solution('++-') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('+-') == 'Yes'\nassert solution('++') == 'Yes'\nassert solution('+') == 'No'\nassert solution('-') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-') == 'Yes'\nassert solution('+') == 'Yes'\nassert solution('--') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'Yes'\nassert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-+') == 'No'\nassert solution('+-') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == 'No'\nassert solution(\"++\") == 'Yes'\nassert solution(\"-++\") == 'Yes'\nassert solution(\"--\") == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"-\") == 'No'\nassert solution(\"+-\") == 'Yes'\nassert solution(\"++\") == 'Yes'\nassert solution(\"--\") == 'No'\nassert solution(\"+-+\") == 'Yes'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '12.566370614359172464'\nassert solution('4 1 -1') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2.0'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"12.566370614359172464\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0 0\\n0 1\\n-1 2\\n1 2') == '12.566370614359172464'\nassert solution('3 0 0\\n0 1\\n1 2\\n2 0\\n1 1') == '21.991148575128551812'\nassert solution('3 0 0\\n0 1\\n1 2\\n2 0\\n1 1\\n') == '0.00'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"12.566370614359172464\"\n\nIn the second sample snow will be removed from the circle, starting from point P (the point that has zero coordinates) and ending at point M (the point that lies exactly on the circle).\n\n\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n\n'''\nIn the second sample snow will be removed from that area:\n\n $0$\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '12.566370614359172464'\n\n'''\n\nn = int(input())\npoints = list(map(int, input().split()))\nx1, y1 = points[0], points[1]\n\nfor i in range(2, n):\n    x2, y2 = points[i], points[i + 1]\n    if x1 * y2 > x2 * y1:\n        x1, x2 = x2, x1\n        y1, y2 = y2, y1\n\nprint(x1 * y2)\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '12.566370614359172464'\n\nassert solution([3, 0, 0]) == '12.566370614359172464'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 0 0\n0 1\n-1 2\n1 2\"\"\") == \"12.566370614359172464\"\n\nassert solution(\"\"\"4 1 -1\n0 0\n1 2\n2 0\n1 1\"\"\") == \"21.991148575128551812\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 1 -1\n0 0\n1 2\n2 0\n1 1''') == '21.991148575128551812'\nassert solution('''4 1 -1\n0 0\n1 2\n2 0\n1 1''') == '12.566370614359172464'\n\nFor any of the other samples the snow will be removed from that area:\n\n $0$\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '3 9'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '6 6'\nassert solution('48') == '9 42'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7\") == '6 6'\nassert solution(\"23\") == '9 42'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '6 6'\nassert solution('48') == '9 42'\n\n'''"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('42') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '7 6'\nassert solution('5') == '10 14'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\nassert solution(\"7\") == \"7 7\""
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1 1'\nassert solution('4') == '4 4'\nassert solution('1000000') == '1 1000000'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'No'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'No'\nassert solution('5') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\" or solution(input) == \"No\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n))\n''') == \"Yes\"\nassert solution('''3\n(()\n\n''') == \"No\"\nassert solution('''10\n)))\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n(())') == \"Yes\"\nassert solution('2\\n(())') == \"No\"\nassert solution('3\\n())') == \"No\"\nassert solution('4\\n(())(') == \"No\"\nassert solution('5\\n(((((())())((()()))(((()())))))()(()))(())') == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\n\nassert solution(\"2 50\") == \"2\"\nassert solution(\"2 50\") == \"2\"\n\nassert solution(\"2 50\") == \"2\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 50\n50\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"3 100\n50 50 100\n\n\"\"\") == \"5\"\n\nassert solution(\"\"\"2 50\n50 50\n\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1 50\n50 50\"\"\") == \"1\"\nassert solution(\"\"\"1 100\n50 50\"\"\") == \"2\"\nassert solution(\"\"\"2 50\n50 50\"\"\") == \"-1\"\nassert solution(\"\"\"3 100\n50 50 100\"\"\") == \"5\"\nassert solution(\"\"\"3 50\n50 50 100\"\"\") == \"2\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('2 50\\n50 50') == '-1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 50\n50 50 100\n''') == '1'\nassert solution('''\n2 50\n50 50\n''') == '5'\nassert solution('''\n3 100\n50 50 100\n''') == '2'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([\n'1', \n'50', \n'50', \n'50', \n'50'\n]) == '1'\n\nassert solution([\n'2', \n'50', \n'50', \n'50', \n'50'\n]) == '2'\n\nassert solution([\n'3', \n'50', \n'50', \n'50', \n'50'\n]) == '5'\n\nassert solution([\n'4', \n'50', \n'50', \n'50', \n'50'\n]) == '-1'\n\nassert solution([\n'5', \n'50', \n'50', \n'50', \n'50'\n]) == '0'"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('3 100\\n50 50 100') == '5'\nassert solution('2 50\\n50 50') == '-1'\nassert solution('4 50\\n50 50') == '0'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('2 50\\n50 50') == '-1'\nassert solution('3 100\\n50 50 100') == '5'\nassert solution('4 100\\n50 50 100') == '2'\nassert solution('5 100\\n50 50 100') == '0'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 50') == '1'\nassert solution('3 100') == '5'\nassert solution('2 50') == '2'\nassert solution('5 100') == '5'\n\n'''\n\nimport math"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 50\\n50 50\\n\") == \"1\"\nassert solution(\"2 50\\n50 50\\n\") == \"5\"\nassert solution(\"3 100\\n50 50 100\\n\") == \"5\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n4\\n5\\n6\") == \"1\"\nassert solution(\"2\\n4\\n3\\n1\") == \"0\"\nassert solution(\"2\\n3\\n4\\n2\") == \"1\"\nassert solution(\"4\\n8\\n12\\n8\") == \"2\"\nassert solution(\"5\\n7\\n3\\n2\\n8\") == \"3\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 6 8\n''') == \"2\"\n\nassert solution('''\n5\n2 3 4 9 12\n''') == \"4\"\n\nassert solution('''\n4\n5 7 2 9\n''') == \"1\"\n\nassert solution('''\n1\n2 3\n''') == \"0\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n\n------------------------------\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 6 8\\n') == '2'\nassert solution('5\\n2 3 4 9 12\\n') == '4'\nassert solution('4\\n5 7 2 9\\n') == '1'\nassert solution('4\\n5 7 2 9\\n') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 6 8\n''') == '2'\nassert solution('''5\n2 3 4 9 12\n''') == '4'\nassert solution('''4\n5 7 2 9\n''') == '1'\n\n\n>>> solution('''4\n2 3 4 9 12\n''')\n'1'\n>>> solution('''5\n2 3 4 9 12\n''')\n'1'\n>>> solution('''4\n2 3 4 9 12\n''')\n'1'\n>>> solution('''3\n2 6 8\n''')\n'2'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''4\n2 3 4 9 12\n''')\n'1'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''4\n2 3 4 9 12\n''')\n'1'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''')\n'4'\n>>> solution('''5\n2 3 4 9 12\n''"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 6 8\\n') == '2'\nassert solution('4\\n5 7 2 9\\n') == '1'\nassert solution('5\\n2 3 4 9 12\\n') == '4'\nassert solution('8\\n2 3 4 9 12\\n') == '0'\nassert solution('12\\n2 3 4 9 12\\n') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n2 6 8\n''') == '2'\nassert solution('''5\n2 3 4 9 12\n''') == '4'\nassert solution('''4\n5 7 2 9\n''') == '1'\nassert solution('''6\n2 3 4 9 12\n''') == '1'\nassert solution('''7\n2 3 4 9 12\n''') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 6 8') == '2'\nassert solution('4\\n5 7 2 9') == '4'\nassert solution('5\\n2 3 4 9 12') == '1'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\n    '3',\n    '17 18',\n    '15 24',\n    '12 15',\n]) == '6'\nassert solution([\n    '2',\n    '10 16',\n    '7 17',\n]) == '-1'\nassert solution([\n    '5',\n    '90 108',\n    '45 105',\n    '75 40',\n]) == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n10 16\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n17 18\n15 24\n12 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n10 16\n7 17\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\"\"\") == \"5\""
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\n\nassert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\n\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '-1'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == \"6\"\n\ninput = \"\"\"2\n12 30\n25 50\n\"\"\"\nprint(solution(input))\n\ninput = \"\"\"3\n17 18\n15 24\n12 15\n\"\"\"\nprint(solution(input))\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n2\n10 16\n7 17\n''') == '-1'\nassert solution('''\n6\n1 0\n3 2\n2 2\n2 2\n3 3\n3 4\n''') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n17 18\n15 24\n12 15''') == '6'\nassert solution('''5\n90 108\n45 105\n75 40''') == '5'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bab') == '2 0'\nassert solution('bbbb') == '0'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"2 0 1 3\"\nassert solution(\"bbbb\") == \"0\"\nassert solution(\"aaaa\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\"\n\n'''\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"bab\") == \"2 0 1 3\"\nassert solution(\"bbbb\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bab\") == \"2 1 0\"\nassert solution(\"bbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bb\") == \"1 3\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"bab\\nbb\") == \"0\"\nassert solution(\"bbbb\\naaa\") == \"0\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2\n1 2 3\n1 3\n1 4\n2 1\n2 2\n2 4\n2 3\n2 4\n2 5\n3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n4 11\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n5 13\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n6 14\n6 15\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n7 11\n7 12\n7 13\n7 14\n7 15\n7 16\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n8 15\n8 16\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n9 11\n9 12\n9 13\n9 14\n9 15\n9 16\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n10 11\n10 12\n10 13\n10 14\n10 15\n10 16\n11 1\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n11 11\n11 12\n11 13\n11 14\n11 15\n11 16\n12 1\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n12 12\n12 13\n12 14\n12 15\n12 16\n13 1\n13 2\n13 3\n13 4\n13 5\n13 6\n13 7\n13 8\n13 9\n13 10\n13 11\n13 12\n13 13\n13 14\n13 15\n13 16\n14 1\n14 2\n14 3\n14 4\n14 5\n14 6\n14 7\n14 8\n14 9\n14 10\n14 11\n14 12\n14 13\n14 14\n14 15\n14 16\n15 1\n15 2\n15 3\n15 4\n15 5\n15 6\n15 7\n15 8\n15 9\n15 10\n15 11\n15 12\n15 13\n15 14\n15 15\n16 1\n16 2\n16 3\n16 4\n16 5\n16 6\n16 7\n16 8\n16 9\n16 10\n16 11\n16 12\n16 13\n16 14\n16 15\n16 16''') == \"POSSIBLE\":\n    print(\"POSSIBLE\")\nelse:\n    print(\"IMPOSSIBLE\")\n\n------------------------------------------------------------------------------------------------------\n\n1174\n\n-----Constraints-----\n1 \\leq N \\leq 100000\n1 \\leq P_i \\leq i - 1\n0 \\leq X_i \\leq 50000\n\n-----Inputs-----\nN\nP_2 P_3... P_N\nX_1 X_2... X_N\n\n-----Outputs-----\nIf it is possible to allocate colors and weights to the vertices so that the condition is satisfied, print POSSIBLE; otherwise, print IMPOSSIBLE.\n\n-----Sample Input-----\n5\n1 1\n1 2\n2 1\n2 2\n2 3\n2 4\n\n-----Sample Output-----\nPOSSIBLE\n\nfor example, the following allocation satisfies the condition:\n - Set the color of Vertex 1 to white and its weight to 2.\n - Set the color of Vertex 2 to black and its weight to 3.\n - Set the color of Vertex 3 to white and its weight to 2.\nThere are also other possible allocations.\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1 1\") == \"POSSIBLE\"\nassert solution(\"2\\n1 1\") == \"IMPOSSIBLE\"\nassert solution(\"3\\n1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1\\n4 3 2\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('5\\n1 2 3 4 5\\n1 5 2 3 4') == 'IMPOSSIBLE'\nassert solution('8\\n1 2 3 4 5 6 7 8\\n1 5 2 3 4 7 6 8') == 'POSSIBLE'\n\n'''"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('5\\n1 1\\n1 1 1 1\\n4 1 1 3 2\\n3 2 1 4 3') == 'IMPOSSIBLE'\nassert solution('9\\n1 1\\n4 3 2\\n2 4 1 3 5\\n3 5 1 4 6 7 8\\n4 8 1 5 6 7 9\\n5 9 1 6 7 8') == 'POSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n4 3 2\n''') == 'POSSIBLE', 'Sample Test Failed'\nassert solution('''10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n''') == 'IMPOSSIBLE', 'Sample Test Failed'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 1\\n4 3 2\\n') == 'POSSIBLE'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'POSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('5\\n1 3 4 2 1\\n') == 'IMPOSSIBLE'\nassert solution('5\\n1 3 4 2 1\\n') == 'IMPOSSIBLE'"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\nassert solution(\"3\\n3 3\\n2 1 2\") == \"IMPOSSIBLE\"\nassert solution(\"1\\n2 2\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1000000007\\n\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2\\n') == '2'\nassert solution('3 2\\n') == '4'"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"3 10\") == \"10\"\nassert solution(\"5 2\") == \"20\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1\n3\n4\n5\n''') == '1'\nassert solution('''2 1\n4\n5\n''') == '0'\nassert solution('''2 2\n3\n5\n''') == '0'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1000000007') == '3'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1000000007\n''') == '2'\nassert solution('''100 50000007\n''') == '0'\nassert solution('''20 1000000007\n''') == '0'\nassert solution('''2 1000000007\n''') == '0'\nassert solution('''4 1000000007\n''') == '0'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1000000007\\n\") == \"2\"\nassert solution(\"100 1000000007\\n\") == \"2\"\nassert solution(\"100 30000007\\n\") == \"4\"\nassert solution(\"10 100000007\\n\") == \"4\"\nassert solution(\"1000 1000000007\\n\") == \"9\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1', \"1st\"\nassert solution('2 3') == '0', \"2nd\"\nassert solution('3 4') == '1', \"3rd\"\nassert solution('4 5') == '2', \"4th\"\nassert solution('5 6') == '3', \"5th\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 3 1') == '7'\nassert solution('4 1 5 1') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 3 3\n+-+\n\n''') == '7'\nassert solution('''4 1 5 1\n-\n\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2, 3, 3, 1, '+', '-', '-', '+', '+', '-', '+']) == '7'\nassert solution([4, 1, 5, 1, '+', '-', '+', '+', '+', '-', '+']) == '999999228'\nassert solution([4, 1, 5, 1, '-', '+', '-', '+', '+', '-', '+']) == '-1'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n\"\"\"\n\nn, a, b, k = map(int, input().split())\n\ns = input()\ns = list(s)"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 1 5 1\n-''') == '999999228'\nassert solution('''2 2 3 3\n+''') == '7'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\""
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1 1 1 2') == '4'\nassert solution(\n    '1 2 3 1') == '2'\nassert solution(\n    '10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 2') == \"4\"\nassert solution('1 2 3 1') == \"2\"\nassert solution('10 2 1 7') == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 1 2''') == '4'\nassert solution('''1 2 3 1''') == '2'\nassert solution('''10 2 1 7''') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([1, 1, 1, 2]) == 4\nassert solution([1, 2, 3, 1]) == 2\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\""
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 1 2\n''') == 4\nassert solution('''\n1 2 3 1\n''') == 2\nassert solution('''\n10 2 1 7\n''') == 0\nassert solution('''\n2 2 2 2 2 2 2\n''') == 14\nassert solution('''\n3 3 3 2 2 2 2\n''') == 14\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1 2\n''') == '4'\nassert solution('''\n1 2 3 1\n''') == '2'\nassert solution('''\n10 2 1 7\n''') == '0'\n\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0\nassert solution('10 10 10 1') == 1\nassert solution('10 10 10 10') == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"10 11\") == \"110\"\nassert solution(\"1 2\") == \"3\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''3 1''') == '0'\nassert solution('''6 2''') == '6'\nassert solution('''10 5''') == '0'\nassert solution('''5 1''') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 2\") == \"8\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '6'\nassert solution('4 5') == '9'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''1 2''') == '6'\nassert solution('''8 8''') == '0'\n\n'''\nCodeWars\n\nComplexity\n\nWe can show that the algorithm performs O(n log n) time complexity.\n\n'''"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '6'\nassert solution('5 2') == '10'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n''') == '6'\nassert solution('''4 2\n''') == '8'\nassert solution('''5 2\n''') == '11'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 2') == '6'\nassert solution('1 1 1') == '0'\nassert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''5 2''') == '12'\nassert solution('''10 2''') == '164'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 2\") == \"6\"\nassert solution(\"2 6\") == \"4\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == '2'\nassert solution(\"1\") == '0'\nassert solution(\"10\") == '0'\nassert solution(\"3\") == '0'"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"4\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2''') == '2'\nassert solution('''2\n1 2\n2 1''') == '0'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1 2') == '2'\nassert solution('1\\n1 2\\n2 3') == '1'\nassert solution('5\\n1 2 3 4 5') == '1'\nassert solution('20\\n1 3 5 7 9 11 17 19 23 27 31') == '1'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '0'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n1\n3 1\n''') == '0'"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '2'\nassert solution('2') == '2'\nassert solution('2 3') == '0'\nassert solution('2 3') == '0'\nassert solution('2 3') == '0'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == '4'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n\n'''"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n\n''') == \"2\"\n\nassert solution('''\n3\n0 2 0\n1 0 3\n\n''') == \"4\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 2 0\n3 0 1\n''') == '4'\n\nassert solution('''\n8\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '17'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 2 0\\n3 0 1\\n') == '2'\nassert solution('2\\n0 2 0\\n1 0 3\\n') == '4'\n\n'''\n\n\nfrom heapq import heappush, heappop, heapify\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\""
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n\n''') == \"4\"\n\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n\n''') == \"18\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('6 5') == 'YES'\nassert solution('9 6') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 10\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 10\n*s\ncodeforces\n\n''') == 'YES', 'First'\nassert solution('''\n6 5\nvkcup\n\n''') == 'YES', 'Second'\nassert solution('''\n1 1\nv\nk\n\n''') == 'NO', 'Third'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n\n''') == 'NO', 'Fourth'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    6 10\n    code*s\n    codeforces\n    ''') == 'YES'\n\n    assert solution('''\n    6 5\n    vk*cup\n    vkcup\n    ''') == 'YES'\n\n    assert solution('''\n    1 1\n    v\n    k\n    ''') == 'NO'\n\nassert solution('''\n    9 6\n    gfgf*gfgf\n    gfgfgf\n    ''') == 'NO'\n\nprint('Tests passed')\n\ninput = stdin.read()\nsolution(input)\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"6 10\\ncode*s\\ncodeforces\"\n) == \"YES\"\nassert solution(\n    \"6 5\\nvk*cup\\nvkcup\"\n) == \"YES\"\nassert solution(\n    \"1 1\\nv\\nk\"\n) == \"NO\"\nassert solution(\n    \"9 6\\ngfgf*gfgf\\ngfgfgf\"\n) == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 10\ncode*s\ncodeforces\n\n''') == 'YES'\nassert solution('''\n6 5\nvk*cup\nvkcup\n\n''') == 'YES'\nassert solution('''\n1 1\nv\nk\n\n''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\nassert solution(\"4\") == \"0.800000000000\""
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0.1 0.2 0.3 0.8') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.260000000000'\nprint(solution())"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0.1 0.2 0.3 0.8\n''') == '0.26'\nassert solution('''2\n0.1 0.2\n''') == '0.26'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0.800000000000'\nassert solution('5') == '0.2'\nassert solution('10') == '0.01010101010101010'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\nassert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000'\n\nassert solution('''2\n0.1 0.2\n''') == '0.260000000000'''"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.26'\nassert solution('4') == '0.800000000000'\nassert solution('3') == '0.25'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0.300000000000\"\n\nassert solution(\"5\") == \"0.800000000000\""
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0.1 0.2') == '0.260000000000'\nassert solution('4\\n0.1 0.2 0.3 0.8') == '0.800000000000'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '5.0000000000'\nassert solution(input()) == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 10 1 2 5\n''') == '5.0000000000\n'''\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(stdin: str) \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430. \n\u0422\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c assert. \u041a\u043e\u0434 \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u0434 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution. \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430.\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '5.0000000000'\nassert solution(input()) == '4.7142857143'\nassert solution(input()) == '4.7142857143'\nassert solution(input()) == '4.7142857143'\nassert solution(input()) == '4.7142857143'\n\"\"\"\n\n\n\nfrom math import pi\nfrom math import exp\nfrom math import sqrt\nimport time"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 1 2 5\\n\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\\n\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 1 2 5\\n') == '5.0000000000'\nassert solution('3 6 1 2 1\\n') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 1 2 5\\n') == '5.0000000000'\nassert solution('3 6 1 2 1\\n') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0.25'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\n\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\n\nassert solution('''3\n4469.0 6526.0 4864.0 9356.38 0.875 7490.0 995.89\n''') == '0.25'\n\nassert solution('''3\n4469.0 6526.0 4864.0 9356.38 0.875 7490.0 995.89 0.92\n''') == '0.25'\n\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.250'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\") == \"0.279\"\nassert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.250\""
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'\nassert solution('3') == '0.280'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.250'\nassert solution('5') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\nassert solution('5\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.0'\nassert solution('8\\n0.000 0.500 0.750 1.000 2.000 3.000 4.000 5.000 6.000 7.000 8.000 9.000 10.000 11.000 12.000 13.000 14.000 15.000 16.000 17.000 18.000 19.000 20.000 21.000 22.000 23.000 24.000 25.000 26.000 27.000 28.000 29.000 30.000 31.000 32.000 33.000 34.000 35.000 36.000 37.000 38.000 39.000 40.000 41.000 42.000 43.000 44.000 45.000 46.000 47.000 48.000 49.000 50.000 51.000 52.000 53.000 54.000 55.000 56.000 57.000 58.000 59.000 60.000 61.000 62.000 63.000 64.000 65.000 66.000 67.000 68.000 69.000 70.000 71.000 72.000 73.000 74.000 75.000 76.000 77.000 78.000 79.000 80.000 81.000 82.000 83.000 84.000 85.000 86.000 87.000 88.000 89.000 90.000 91.000 92.000 93.000 94.000 95.000 96.000 97.000 98.000 99.000 100.000 101.000 102.000 103.000 104.000 105.000 106.000 107.000 108.000 109.000 110.000 111.000 112.000 113.000 114.000 115.000 116.000 117.000 118.000 119.000 120.000 121.000 122.000 123.000 124.000 125.000 126.000 127.000 128.000 129.000 130.000 131.000 132.000 133.000 134.000 135.000 136.000 137.000 138.000 139.000 140.000 141.000 142.000 143.000 144.000 145.000 146.000 147.000 148.000 149.000 150.000 151.000 152.000 153.000 154.000 155.000 156.000 157.000 158.000 159.000 160.000 161.000 162.000 163.000 164.000 165.000 166.000 167.000 168.000 169.000 170.000 171.000 172.000 173.000 174.000 175.000 176.000 177.000 178.000 179.000 180.000 181.000 182.000 183.000 184.000 185.000 186.000 187.000 188.000 189.000 190.000 191.000 192.000 193.000 194.000 195.000 196.000 197.000 198.000 199.000 200.000 201.000 202.000 203.000 204.000 205.000 206.000 207.000 208.000 209.000 210.000 211.000 212.000 213.000 214.000 215.000 216.000 217.000 218.000 219.000 220.000 221.000 222.000 223.000 224.000 225.000 226.000 227.000 228.000 229.000 230.000 231.000 232.000 233.000 234.000 235.000 236.000 237.000 238.000 239.000 240.000 241.000 242.000 243.000 244.000 245.000 246.000 247.000 248.000 249.000 250.000 251.000 252.000 253.000 254.000 255.000 256.000 257.000 258.000 259.000 260.000 261.000 262.000 263.000 264.000 265.000 266.000 267.000 268.000 269.000 270.000 271.000 272.000 273.000 274.000 275.000 276.000 277.000 278.000 279.000 280.000 281.000 282.000 283.000 284.000 285.000 286.000 287.000 288.000 289.000 290.000 291.000 292.000 293.000 294.000 295.000 296.000 297.000 298.000 299.000 300.000 301.000 302.000 303.000 304.000 305.000 306.000 307.000 308.000 309.000 310.000 311.000 312.000 313.000 314.000 315.000 316.000 317.000 318.000 319.000 320.000 321.000 322.000 323.000 324.000 325.000 326.000 327.000 328.000 329.000 330.000 331.000 332.000 333.000 334.000 335.000 336.000 337.000 338.000 339.000 340.000 341.000 342.000 343.000 344.000 345.000 346.000 347.000 348.000 349.000 350.000 351.000 352.000 353.000 354.000 355.000 356.000 357.000 358.000 359.000 360.000 361.000 362.000 363.000 364.000 365.000 366.000 367.000 368.000 369.000 370.000 371.000 372.000 373.000 374.000 375.000 376.000 377.000 378.000 379.000 380.000 381.000 382.000 383.000 384.000 385.000 386.000 387.000 388.000 389.000 390.000 391.000 392.000 393.000 394.000 395.000 396.000 397.000 398.000 399.000 400.000 401.000 402.000 403.000 404.000 405.000 406.000 407.000 408.000 409.000 410.000 411.000 412.000 413.000 414.000 415.000 416.000 417.000 418.000 419.000 420.000 421.000 422.000 423.000 424.000 425.000 426.000 427.000 428.000 429.000 430.000 431.000 432.000 433.000 434.000 435.000 436.000 437.000 438.000 439.000 440.000 441.000 442.000 443.000 444.000 445.000 446.000 447.000 448.000 449.000 450.000 451.000 452.000 453.000 454.000 455.000 456.000 457.000 458.000 459.000 460"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0.500 0.750 1.000 2.000 3.000\") == \"0.250\"\nassert solution(\"3\\n0.000 0.500 0.750 1.000 2.000 3.000\") == \"0.279\"\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '18'\nassert solution(\"\"\"0 0\n1 1\"\"\") == '8'\n\nassert solution(\"\"\"2 2\n1 1\"\"\") == '4'\n\nassert solution(\"\"\"0 0\n5 5\"\"\") == '1'\n\nassert solution(\"\"\"0 0\n4 0\"\"\") == '2'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 1\n0 0\n\n''') == '8'\n\nprint(solution('''\n0 0\n0 0\n\n'''))\n\n\"\"\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '18'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5\\n5 2') == \"18\\n\"\nassert solution('0 1\\n0 0') == \"8\\n\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == '18'\nassert solution('1 1') == '8'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n''') == '4'\nassert solution('''\n10\n''') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('10') == '244'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n''') == '4'\nassert solution('''2\n''') == '10'\nassert solution('''10\n''') == '244'\nassert solution('''8\n''') == '13'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 4, 'Part 1'\nassert solution('2') == 10, 'Part 2'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '4'\nassert solution('2\\n') == '10'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('10') == '244'\nassert solution('2') == '10'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '10'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('10') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n''') == '4'\nassert solution('''\n2\n''') == '10'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n''') == '0'\nassert solution('''4\n1 4 1 4 9\n''') == '2'\nassert solution('''5\n1 4 1 4 9\n''') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 4 1 4 9\") == \"2\"\nassert solution(\"4\\n1 4 1 4 9\") == \"2\"\nassert solution(\"2\\n1 4 1 4 9\") == \"0\"\nassert solution(\"5\\n1 1 2 2 3 4\") == \"1\"\nassert solution(\"1\\n1 2 3 4\") == \"0\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '2'\n\n'''\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3\\n') == '0'\nassert solution('4\\n1 4 1 4 9\\n') == '2'\nassert solution('5\\n1 4 1 4 9\\n') == '2'\nassert solution('6\\n1 4 1 4 9\\n') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1\\n') == '0\\n', \"1 1 1 1\"\nassert solution('4 1 1 1 9\\n') == '2\\n', \"1 1 1 1 9\"\nassert solution('5 1 4 1 4 9\\n') == '2\\n', \"1 4 1 4 9\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\n1 4 1 4 9\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n1 4 1 4 9\n\"\"\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '0'\nassert solution('4 1 4 9') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\n1 1 2 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n1 4 1 4 9\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaabccc\") == \"YES\", \"First example\"\nassert solution(\"bbacc\") == \"NO\", \"Second example\"\nassert solution(\"aabc\") == \"YES\", \"Third example\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input(\"\")) == \"NO\"\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\naaabccc\n''') == 'YES'\nassert solution('''\nbbacc\n''') == 'NO'\nassert solution('''\naabc\n''') == 'YES'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 2 5 3') == '2'\nassert solution('4 1 2 3 5') == '1'\nassert solution('4 1 2 5 3') == '0'\nassert solution('4 5 1 2 3') == '1'\nassert solution('4 5 1 3 2') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 1 2 5 3''') == '2'\nassert solution('''4\n4 1 3 2''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\nassert solution('''5\n4 1 3 2\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\nassert solution('''5\n4 1 2 3 5\n''') == '3'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n4 1 2 5 3') == '2'\nassert solution('10\\n' + ''.join(map(str, range(1, 11)))) == '11'\nassert solution('5\\n' + ''.join(map(str, range(1, 6)))) == '2'\nassert solution('5\\n' + ''.join(map(str, range(1, 5)))) == '1'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('3') == '2'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '2'\n'''\n\nclass Solution:\n    def solution(self, n):\n        # n = int(n)\n        # cars = list(map(int, stdin.readline().split()))\n        cars = list(map(int, stdin.readline().split()))\n        cars.sort()\n        print(cars)\n        ans = 0\n        for i in range(len(cars)):\n            if i == 0 or cars[i-1]!= cars[i]:\n                ans += 1\n        return str(ans)\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n4 1 2 5 3''') == '2'\nassert solution('''4\n4 1 3 2''') == '2'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1\n''') == '3.500000000000'\nassert solution('''\n6 3\n''') == '4.958333333333'\nassert solution('''\n2 2\n''') == '1.750000000000'\nassert solution('''\n4 4\n''') == '5.000000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\""
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == '3.500000000000'\nassert solution(\"6 3\") == '4.958333333333'\nassert solution(\"2 2\") == '1.750000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'\n'''\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    2\n    -><-\n    5\n    >>>>>\n    3\n    <--\n    2\n    <>\n    \"\"\"\n    ) == \"3\"\n\nassert solution(\n    \"\"\"\n    5\n    -><-\n    5\n    >>>>>\n    3\n    <--\n    2\n    <>\n    \"\"\"\n    ) == \"5\"\n\nassert solution(\n    \"\"\"\n    10\n    -><-\n    5\n    >>>>>\n    3\n    <--\n    2\n    <>\n    \"\"\"\n    ) == \"8\"\n\n\n\"\"\"\nRuntime: 60 ms, faster than 79.76% of Python3 online submissions for Snake Game.\nMemory Usage: 13.9 MB, less than 63.26% of Python3 online submissions for Snake Game.\n\"\"\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n5\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n''') == '3'\n\nassert solution('''\n6\n5\n-><-\n4\n>-<\n3\n<>\n2\n<>\n''') == '2'\n\nassert solution('''\n3\n6\n-><-\n5\n>-<\n3\n<>\n2\n<>\n''') == '0'\n\nassert solution('''\n10\n10\n
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n\n''') == '3'\nassert solution('''\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n\n''') == '4'\nassert solution('''\n5\n>-<->-<->-<->-<->>-<->>\n''') == '0'\nassert solution('''\n7\n
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\nassert solution(\"4\\n5\\n3\") == \"5\"\nassert solution(\"4\\n4\\n4\") == \"0\"\nassert solution(\"5\\n4\\n5\\n3\") == \"0\"\nassert solution(\"5\\n4\\n5\\n3\\n2\\n1\") == \"0\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"11\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '3'\n\nassert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '5'\n\nassert solution('''\n3\n<->\n2\n<->\n''') == '0'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n>->-><\n5\n<->-><\n3\n<->>\n\n''') == '5'\nassert solution('''\n5\n>->-><\n4\n<->-><\n3\n<->>\n2\n<->>\n\n''') == '3'\nassert solution('''\n4\n-><-\n5\n>>->\n3\n<->>\n\n''') == '5'\nassert solution('''\n4\n<->-><\n5\n>->-><\n3\n<->>\n\n''') == '5'\nassert solution('''\n5\n<->-><\n4\n>->-><\n3\n<->>\n2\n<->>\n\n''') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == \"5\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '3'\nassert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '5'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\nassert solution('3') == '202'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n4 5\n4 5\n4 10\n''') == '16', 'Simple test case'\nassert solution('''\n2\n1 1\n1 1\n''') == '-1', 'Another simple test case'\nassert solution('''\n1\n1 1\n1 1\n1 1\n''') == '4', 'Another simple test case'\nassert solution('''\n1\n1 100\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n100 1\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n2 5\n4 3\n5 5\n7 5\n4 4\n\"\"\") == \"202\"\n\nassert solution(\"\"\"\n5\n1 1\n100 100\n1 1\n\n\"\"\") == \"101 101 101 101 101\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3\n    4 5\n    4 5\n    4 10\n''') == '16'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4 5\\n4 5\\n4 10') == '16\\n9 9 10'\nassert solution('3\\n1 1\\n100 100\\n1 1') == '202\\n101 101 101 101'\nassert solution('3\\n100 100\\n100 100\\n100 100') == '-1'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n4 5\n4 5\n4 10\n\n''') == '16'\nassert solution('''\n4\n1 100\n100 1\n1 100\n100 1\n\n''') == '101 101 101 101 \n\n\n'''\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n4 5\n4 5\n4 10\n''') == '16'\nassert solution('''\n4\n1 100\n100 1\n1 100\n100 1\n''') == '101 101 101 101 \n'''"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"16\"\nassert solution(\"4\") == \"9 9 10\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"16\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n4 5\\n4 5\\n4 10') == '16'\nassert solution('3\\n1 1\\n100 100\\n1 1\\n') == '-1'\nprint(solution(''))\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1 2 3 2 2'\nassert solution('3') == '0 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 1 1 1\\n\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\\n\") == \"0 2\"\nprint(\"Everything passed\")"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'\n\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"10\") == \"0 2 4 6 8\""
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1 2 2'\nassert solution('3\\n1 2 3\\n') == '0 2'\nassert solution('6\\n1 2 3 2 2\\n') == '0 1 3'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1 2 2'\nassert solution('5\\n1 2 3 2 2\\n') == '0 2'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"5 2\") == \"2\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 2 3 2 2\"\nassert solution(\"3\") == \"0 1 3\""
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 2'\n\nassert solution('''5\n1 1 1 1 1\n''') == '1 2 3'\n\nassert solution('''3\n1 2 3\n''') == '0 1 3'\n\nassert solution('''5\n1 2 3 2 2\n''') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n1 1 1 1 1\n\"\"\") == \"1 2 2\"\nassert solution(\"\"\"3\n1 2 3\n\"\"\") == \"0 2\""
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10010110') == '01'\nassert solution('100011') == '01'\nassert solution('10') == ''\nassert solution('11100') == '01'\nassert solution('101111') == '01'"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"101101\") == \"110110\"\nassert solution(\"10010110\") == \"01100011\"\nassert solution(\"10\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10010110\") == \"01001011\"\nassert solution(\"10\") == \"01\"\nassert solution(\"111\") == \"11111\""
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '01'\n\n'''\n\ns = input()\nt = input()\ncount = 0\ns = list(s)\nt = list(t)\nfor i in range(len(s)):\n    if s[i] == '1':\n        for j in range(i,len(s)):\n            if s[j] == '1':\n                s[j] = '0'\n                count+=1\n                break\n            if j == len(s)-1:\n                s[j] = '0'\n                count+=1\n                break\n    else:\n        for j in range(i,len(s)):\n            if s[j] == '0':\n                s[j] = '1'\n                count+=1\n                break\n            if j == len(s)-1:\n                s[j] = '1'\n                count+=1\n                break\nprint(''.join(s))\nprint(count)"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '010111'\nassert solution(input()) == '01'\nassert solution(input()) == ''"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('101101') == '110110'\nassert solution('110') == '01100011'\nassert solution('10') == '01'\n\n\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"110110\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10010110\") == \"01\"\nassert solution(\"11100\") == \"01\"\nassert solution(\"10\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INP) == OUTP\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"011010\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"100 50 100 5\") == \"5\"\nassert solution(\"100 200 100 5\") == \"0\"\nassert solution(\"100 500 100 5\") == \"5\"\n\nfrom itertools import combinations\nimport itertools"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('4 3 1') == '0'\nassert solution('4 2 1') == '-1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('5 4 3') == '-1'\nassert solution('8 1 2') == '2'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('0') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '1'\nassert solution('''3 4 1\n1 0 0 1\n0 1 1 0\n1 0 0 1\n\nOutput\n0''') == '0'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5 2\") == \"1\", \"Wrong\"\nassert solution(\"3 4 1\") == \"0\", \"Wrong\"\nassert solution(\"5 2\") == \"2\", \"Wrong\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\nassert solution('''\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n\nOutput\n2 2 3 1 2 \n''') == '2 2 3 1 2'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n\"\n    \"0 4 6 2 4\\n\"\n    \"4 0 6 2 4\\n\"\n    \"6 6 0 3 6\\n\"\n    \"2 2 3 0 2\\n\"\n    \"4 4 6 2 0\\n\"\n) == \"2 2 3 1 2\"\n\nassert solution(\n    \"5\\n\"\n    \"0 4 6 2 4\\n\"\n    \"4 0 6 2 4\\n\"\n    \"6 6 0 3 6\\n\"\n    \"2 2 3 0 2\\n\"\n    \"4 4 6 2 0\\n\"\n) == \"9999 10000 9998\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\nassert solution('''\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == '9999 10000 9998'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1 2'\nassert solution('4') == '3 4'\nassert solution('5') == '2 4 6'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 4 6 2 4\\n4 0 6 2 4\\n6 6 0 3 6\\n2 2 3 0 2\\n4 4 6 2 0') == '2 2 3 1 2'\nassert solution('5\\n99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\\n2 2 3 0 2\\n4 4 6 2 0') == '9999 10000 9998'\nassert solution('3\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\\n2 2 3 0 2\\n4 4 6 2 0') == '9999 10000 9998'\nassert solution('10\\n0 99990000 99970002\\n99990000 0 99980000\\n99970002 99980000 0\\n2 2 3 0 2\\n4 4 6 2 0\\n99999999 99990000 99970002\\n99999999 0 99980000\\n99970002 99980000 0\\n2 2 3 0 2\\n4 4 6 2 0') == '99999999 99990000 99970002'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\nassert solution('''5\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == '9999 10000 9998'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\n''') == '22'\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n\n''') == '105'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n\n''') == '0'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9''') == '22'\nassert solution('''5\n11 1\n01 1\n00 100\n10 1\n01 1''') == '103'\nassert solution('''6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28''') == '105'\nassert solution('''3\n00 5000\n00 5000\n00 5000''') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'\n\"\"\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11 19\") == \"22\"\nassert solution(\"10 22\") == \"105\"\nassert solution(\"00 5000\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\n''') == '22'\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n\n''') == '105'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n\n''') == '0'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n11 1\n01 1\n00 100\n10 1''') == \"22\"\n\nassert solution('''6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28''') == \"105\"\n\nassert solution('''3\n00 5000\n00 5000\n00 5000''') == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"22\"\nassert solution() == \"105\"\nassert solution() == \"0\"\n\"\"\"\n\nstdin = \"\"\"\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\n\"\"\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n''') == '22'\n\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n''') == '103'\n\nassert solution('''\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n''') == '105'\n\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n''') == '0'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n11 6') == '22'\nassert solution('2\\n11 6') == '0'\nassert solution('3\\n11 6') == '105'\nassert solution('4\\n11 6') == '0'\nassert solution('5\\n11 6') == '105'\n\n\"\"\"\nimport math"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0'\nassert solution('6') == '22'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 4 9\n1 3 1 2\n2 1 3\n4 3 6\"\"\") == \"YES\"\n\nassert solution(\"\"\"3 4 10\n2 3 1 2\n2 1 3\n4 3 6\"\"\") == \"YES\"\n\nassert solution(\"\"\"3 4 9\n2 3 1 2\n2 1 3\n4 3 6\"\"\") == \"NO\"\n\nassert solution(\"\"\"3 4 5\n1 3 1 2\n2 1 3\n5 3 6\"\"\") == \"YES\"\n\nassert solution(\"\"\"3 4 5\n1 3 1 2\n2 1 3\n5 3 6\"\"\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1 4 9\") == \"YES\"\nassert solution(\"2 3 1 2\") == \"YES\"\nassert solution(\"3 4 6\") == \"YES\"\nassert solution(\"5 4 3\") == \"YES\"\n\n--------------------------------------------------------------------------------------------------------------------\n2nd question\n\nhttps://www.hackerrank.com/challenges/ctci-ransom-note/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps\n\nTry to write a solution that can take a dictionary and return True if it can build the dictionary, or False if it cannot.\n\nInput\n{'a': 1, 'b': 2, 'c': 3}\n\nOutput\nTrue\n\nInput\n{'d': 1, 'e': 2, 'f': 3}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5}\n\nOutput\nTrue\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7}\n\nOutput\nTrue\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8, 'v': 9}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8, 'v': 9, 't': 10}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8, 'v': 9, 't': 10,'s': 11}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8, 'v': 9, 't': 10,'s': 11, 'n': 12}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8, 'v': 9, 't': 10,'s': 11, 'n': 12,'m': 13}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8, 'v': 9, 't': 10,'s': 11, 'n': 12,'m': 13, 'o': 14}\n\nOutput\nTrue\n\n--------------------------------------------------------------------------------------------------------------------\n\n2nd question\n\nhttps://www.hackerrank.com/challenges/ctci-ransom-note/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=dictionaries-hashmaps\n\nTry to write a solution that can take a dictionary and return True if it can build the dictionary, or False if it cannot.\n\nInput\n{'a': 1, 'b': 2, 'c': 3}\n\nOutput\nTrue\n\nInput\n{'d': 1, 'e': 2, 'f': 3}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5}\n\nOutput\nTrue\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7}\n\nOutput\nTrue\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4, 'y': 5, 'z': 6, 'w': 7, 'u': 8}\n\nOutput\nFalse\n\nInput\n{'a': 1, 'b': 2, 'c': 3, 'x': 4"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3 1 2\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 5') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 9\") == \"YES\"\nassert solution(\"2 4 10\") == \"NO\"\nassert solution(\"3 4 5\") == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == 'NO'\nassert solution('4 1') == 'YES'\nassert solution('4 3') == 'YES'\nassert solution('4 2') == 'NO'\nassert solution('4 1') == 'YES'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution(stdin=\"3 4 1 2\") == \"YES\"\nassert solution(stdin=\"4 3 1 2\") == \"YES\"\nassert solution(stdin=\"4 3 1 2\") == \"YES\"\nassert solution(stdin=\"4 3 1 2\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"NO\"\nassert solution(input_string_2) == \"NO\"\nassert solution(input_string_3) == \"YES\"\nassert solution(input_string_4) == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1\n2 3 4 1\n1 2 3 4''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1''') == 'YES'\nassert solution('''4 3\n4 3 1 2\n2 1 4 3''') == 'YES'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n\n-----Note-----\n\nIn the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed.\n\nIn the second sample the described situation is possible, in case if after we toss a coin, we get tails.\n\nIn the third sample the possible coin tossing sequence is: heads-tails-tails.\n\nIn the fourth sample the possible coin tossing sequence is: heads-heads.\n''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 1\n2 3 4 1\n1 2 3 4\n''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 1\n2 3 4 1\n1 2 3 4''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == 'NO'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"1\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"2\") == \"2 1\\n3 1\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"3\") == \"2 1\\n3 1\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"4\") == \"2 1\\n3 1\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"2 1\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nassert solution(\"6\") == \"2 1\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\"\nassert solution(\"3\") == \"2 1\\n3 1\\n1 5\\n4 1\\n5 2\"\nassert solution(\"10\") == \"2 1\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n7 8\\n7 9\\n7 10\"\nassert solution(\"11\") == \"2 1\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n7 8\\n7 9\\n7 10\\n7 11\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2\n3\n4''') == '1 1'\n\nassert solution('''7\n2\n3\n4\n5\n6\n7\n0\n0\n0\n0\n0\n0\n0\n0''') == '2 1'\n\nassert solution('''6\n5\n4\n3\n2\n1\n0\n0\n0\n0\n0\n0''') == '2 1'\n\nassert solution('''4\n7\n6\n5\n4\n3\n2\n1\n0\n0\n0\n0\n0''') == '2 1'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 5\\n4 4'\nassert solution('7') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 5\\n4 4'\nassert solution('7') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n') == '1 1\\n3 1\\n1 5\\n4 4'\nassert solution('7\\n') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == output_data\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'\n\nassert solution('''\n7\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n\nassert solution('''\n8\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n3 8\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n4 8\\n4 1\\n3 8\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\nprint(solution(input()))\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\") == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution(\"7\\n\") == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('4') == '-1'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n''') == '3'\nassert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n5\n5 2 3 2 1\n''') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n') == '3'\nassert solution('3\\n1 2 3') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n3\\n4\\n5\\n6\\n1\\n1\\n1\\n1\\n2\\n') == '2'\nassert solution('5\\n10 2 3 1 5\\n1 2 3 4 5') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '-1'\nassert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n3\n2 5 2\n''') == '2'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == '-1'\nassert solution(\"3\") == '3'\nassert solution(\"7\") == '2'\nassert solution(\"5\") == '4'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s1) == \"3\"\nassert solution(s2) == \"-1\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n1\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n1 2 3\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n1 2 2 3\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n1 3 2 2 3\n\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n1 2 1 1 1\n\n\"\"\") == \"-1\""
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1\n''') == '3'\nassert solution('''3\n1 2 3\n''') == '3'\nassert solution('''5\n1 2 2 3 4\n''') == '4'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '11'\nassert solution('''2\n2\n''') == '-1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '7\\n0 1 0 0 1 1 1'\nassert solution() == '3\\n92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"46 2\") == \"7\"\nassert solution(\"2018 214\") == \"92 205 1\""
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '3'"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '3'\nassert solution('2016 18') == '-1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"0 1 0 0 1 1 1\"\nassert solution(\"45214\") == \"92 205 1\"\nassert solution(\"7714\") == \"3\"\nassert solution(\"86147\") == \"1\"\nassert solution(\"20169\") == \"3\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4') == '-1'\nassert solution('20 12') == '2'\nassert solution('46 214') == '7'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''46 2\n\nOutput\n7\n\n''') == '7'\nassert solution('''2018 214\n\nOutput\n3\n\n''') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''46 2\n\n''') == '7'\nassert solution('''2018 214\n\n''') == '3'"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '3'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 20 20\n6 2\n1 3\n2 6\n\"\"\") == '5.000000000000000'\nassert solution(\"\"\"\n3 100 1\n2 3\n3 2\n2 3\n3 2\n\"\"\") == '0.400000000000000'\nassert solution(\"\"\"\n6 100 100\n2 3\n3 2\n3 2\n3 2\n3 2\n\"\"\") == '3.000000000000000'\nassert solution(\"\"\"\n10 100 100\n2 3\n3 2\n3 2\n3 2\n3 2\n\"\"\") == '5.000000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_sample_1) == \"5.000000000000000\"\n\nassert solution(input_sample_2) == \"0.400000000000000\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1\n3 2\n3 2\n3 2\n''') == '3.00000000000000'\nprint(solution('''\n3 1 1\n3 2\n3 2\n3 2\n''')) == '5.00000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\nassert solution('5 0 0') == '0.0'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '4'\nassert solution('4 1 1') == '0.4'\nassert solution('5 10 10') == '10'\nassert solution('4 1 1') == '0.4'\nassert solution('5 10 10') == '10'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '5.000000000000000'\nassert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\nassert solution('2 3') == '1.00000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input) == '5.000000000000000'\nassert solution(input) == '5.000000000000000'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 20 20\n6 2\n1 3\n2 6\n\"\"\"\n) == \"5.000000000000000\"\nassert solution(\n\"\"\"\n4 1 1\n2 3\n3 2\n2 3\n3 2\n\"\"\"\n) == \"0.400000000000000\"\nassert solution(\n\"\"\"\n7 3\n2 1\n3 2\n4 3\n5 4\n6 5\n7 5\n\"\"\"\n) == \"6.66666666666667\"\nassert solution(\n\"\"\"\n10 10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n\"\"\"\n) == \"11.0000000000000\"\nassert solution(\n\"\"\"\n5 5\n1 2\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 10\n\"\"\"\n) == \"12.0000000000000\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    2 3\n''') == '4'\nassert solution('''\n    8 2\n''') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n\nOutput\n4\n\n''') == \"4\"\nassert solution('''8 2\n\nOutput\n5\n''') == \"5\"\nassert solution('''7 1\n\nOutput\n0\n\n''') == \"0\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n''') == '4'\nassert solution('''\n8 2\n''') == '5'\nassert solution('''\n2 3\n''') == '4'\n'''\n\n\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"4\"\n\n\"\"\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n\n''') == \"4\"\nassert solution('''8 2\n\n''') == \"5\"\nassert solution('''0 2\n\n''') == \"5\"\nassert solution('''8 0\n\n''') == \"1\"\n\n'''"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4 5 7\\n\") == \"Conan\"\nassert solution(\"2\\n1 1\\n\") == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 5 7\n2 1''') == \"Conan\"\nassert solution('''5\n4 5 7\n1 1''') == \"Agasa\"\nassert solution('''3\n2 3\n1 2''') == \"Agasa\"\nassert solution('''3\n2 1\n1 2''') == \"Conan\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 7\\n') == 'Conan'\nassert solution('2 1\\n') == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4 5 7\\n\") == \"Conan\"\nassert solution(\"2\\n1 1\\n\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 5 7\") == \"Conan\"\nassert solution(\"2\\n1 1\") == \"Agasa\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n5 7\n''') == 'Conan', 'First'\nassert solution('''\n2\n1 1\n''') == 'Agasa', 'Second'\n''')"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n4 5 7\n\n4\n7\n8\n''') == 'Agasa', solution('''3\n4 5 7\n\n4\n7\n8\n''')\nassert solution('''2\n1 1\n\n2\n1\n\n3\n2\n''') == 'Conan', solution('''2\n1 1\n\n2\n1\n\n3\n2\n\n''')\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 1\\n\") == \"Agasa\"\nassert solution(\"3\\n3 4 5\\n\") == \"Conan\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Agasa'\nassert solution('3') == 'Conan'\nassert solution('2') == 'Agasa'\n\n---Output---\n\nAgasa\nConan\nConan\nConan\nAgasa\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"1 2\") == \"3 1\"\nassert solution(\"2 3\") == \"3 3\"\nassert solution(\"4 5\") == \"4 3\"\nassert solution(\"3 3\") == \"3 3\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1 1\\n.\\n.\"\nassert solution(\"2 2\") == \"2 2\\n##\\n##\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5\n...\n##.\n###.\n.###\n...\n###.''') == '''5 5\n...\n##.\n###.\n.###\n...\n###.'''\nassert solution('''5 5\n..#\n##.\n###.\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n..#\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 3'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"10 10\") == \"10 10\"\nassert solution(\"1 1\") == \"2 2\"\nassert solution(\"100 100\") == \"100 100\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n\") == \"3 3\\n###\\n##.\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2 3\"\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '##.\\n.##\\n##.\\n.##\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2 -1\\n3 4 1\") == \"4\\n1 3 4 5\"\nassert solution(\"2 4\\n+ 1\\n- 2\\n+ 1\") == \"1\\n3\"\nassert solution(\"5 6\\n+ 1\\n- 1\\n- 3\\n+ 3\\n+ 4\\n- 4\") == \"3\\n2 3 5\""
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1\n''') == \"4\"\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1\n''') == \"3\"\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n''') == \"0\"\nassert solution('''5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n''') == \"3\""
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1''') == '4'\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1''') == '3'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '1 3'\nassert solution('5 6') == '2 3 5'\nassert solution('2 4') == '0'\n\nstdin = '3 2'\nprint(solution(stdin))"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '1 3 4 5'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1''') == '4'\nassert solution('''3 2\n+ 1\n- 2\n''') == '1'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1''') == '0'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4\n+ 1\n+ 2\n- 2\n- 1\n\n''') == '4'\nassert solution('''\n5 2\n+ 1\n- 2\n+ 2\n+ 1\n- 1\n\n''') == '1'\nassert solution('''\n5 4\n+ 1\n- 2\n- 1\n+ 2\n+ 3\n- 4\n\n''') == '0'\nassert solution('''\n2 4\n+ 1\n+ 2\n+ 1\n+ 2\n\n''') == '1'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"2 4\") == \"0\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n+ 1\n- 2\n- 1\n+ 2\n+ 3\n- 4\n''') == '4'\nassert solution('''\n5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n''') == '3'\nassert solution('''\n2 4\n+ 1\n- 2\n+ 2\n- 1\n''') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1\n5 4 2 4 5\n2''') == '1'\nassert solution('''4 1\n4 5 2 6\n6''') == '0'\nassert solution('''4 1\n5 4 2 4 5\n2''') == '2'\nassert solution('''4 1\n5 4 2 4 5\n2''') == '0'\n\nassert solution('''3 3\n1 2 3\n1 2 3\n9\n\nOutput\n4\n\nInput\n3 3\n1 2 3\n1 2 3\n9\n\nOutput\n1\n\nInput\n3 2\n1 2 3\n1 2 3\n9\n\nOutput\n0''') == '0'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n3 3\n1 2 3\n1 2 3\n9\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 2\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '1'\nassert solution('5 2') == '4'\nassert solution('3 2') == '0'\nassert solution('5 3') == '0'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n9''') == '4'\nassert solution('''5 1\n5 4 2 4 5\n2\n5\n\n''') == '1'\nprint('Do it!')"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 3\n1 2 3\n9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 1\n5 4 2 4 5\n2\n5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 1\") == \"1\"\n\nassert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"10 1\") == \"0\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '1'\nassert solution('5 2') == '0'\nassert solution('5 3') == '0'\nassert solution('5 5') == '1'\n\n\n\"\"\"\n\nfrom typing import List\nimport sys"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 5 2 4 5\") == \"0\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\n\n\"\"\"\n\nfrom collections import deque\nfrom heapq import heappop, heappush"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\ncba\\n') == 'cbd'\nassert solution('3 4\\nabcd\\n') == 'abda'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\"\nassert solution(\"4 4\") == \"abda\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"cbd\"\nassert solution(\"4 4\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"4 4\") == \"abda\"\nassert solution(\"3 9\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\ncba\n''') == 'abda'\nassert solution('''\n3 3\ncba\n''') == 'cbd'\nassert solution('''\n4 4\ncba\n''') == 'NO'\nassert solution('''\n10 8\ncba\n''') == 'cbd'\nassert solution('''\n3 3\ncba\n''') == 'cbd'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3 3\ncba\n\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n3 4\ncba\n\n\"\"\") == \"cbd\"\nassert solution(\n\"\"\"\n4 4\nabcd\n\n\"\"\") == \"abda\"\nassert solution(\n\"\"\"\n7 7\nbaa\n\n\"\"\") == \"baa\"\nassert solution(\n\"\"\"\n5 5\naaab\n\n\"\"\") == \"abab\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == 'NO'\n\nprint(solution('3 4 5 2 1 4'))\n\nprint(solution('3 4 5 2 1'))\n\nprint(solution('1 2 3 4 5 6'))\n\nprint(solution('1 2 3 4 5 4'))\n\nprint(solution('1 1 1 1 2 2 1 2 2'))\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\ncba\n\n\"\"\") == \"cbd\"\n\nassert solution(\"\"\"\n3 4\nabcd\n\n\"\"\") == \"abda\""
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\nabc\") == \"cbd\"\nassert solution(\"4 4\\nabcd\") == \"abda\"\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"4 4\") == \"abda\"\n\n\"\"\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'once again'\nassert solution(input()) == 'tokitsukaze'\nassert solution(input()) == 'quailty'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == 'quailty'\nassert solution('6 1') == 'once again'\nassert solution('6 5') == 'tokitsukaze'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == 'tokitsukaze'\nassert solution('6 1') == 'once again'\nassert solution('6 5') == 'tokitsukaze'\n\n'''\nimport math\n\nn, k = map(int, input().split())\narr = [int(input()) for _ in range(n)]\n\nis_flipped = True\n\nwhile n > 0:\n    if k == 0:\n        break\n    if is_flipped:\n        is_flipped = False\n        k -= 1\n        n -= 1\n        arr[n] = 1 if arr[n] == 0 else 0\n    else:\n        k -= 1\n        n -= 1\n        arr[n] = 1 if arr[n] == 0 else 0"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) in [\"tokitsukaze\", \"quailty\", \"once again\"]"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"quailty\"\nassert solution(\"6 1\") == \"tokitsukaze\"\nassert solution(\"6 5\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"tokitsukaze\"\nassert solution(\"6 1\") == \"quailty\"\nassert solution(\"6 5\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == 'tokitsukaze'\nassert solution('6 1') == 'tokitsukaze'\nassert solution('6 5') == 'quailty'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\n0101') == 'tokitsukaze'\nassert solution('6 1\\n010101') == 'once again'\nassert solution('6 5\\n010101') == 'tokitsukaze'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n0101\n''') == \"tokitsukaze\"\nassert solution('''6 1\n010101\n''') == \"tokitsukaze\"\nassert solution('''6 5\n010101\n''') == \"once again\"\nassert solution('''4 1\n0011\n''') == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == 'tokitsukaze'\nassert solution('6 5') == 'quailty'\nassert solution('4 1') == 'once again'\nassert solution('4 5') == 'once again'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 4 50\\n\"\n    \"20 100\\n\"\n    \"60 10 40 80\\n\"\n) == \"50\"\nassert solution(\n    \"1 2 10\\n\"\n    \"11\\n\"\n    \"15 7\\n\"\n) == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 4 50\n20 100\n60 10 40 80\n\"\"\") == \"50\"\nassert solution(\"\"\"\n1 2 10\n11\n15 7\n\"\"\") == \"7\"\nassert solution(\"\"\"\n10 20 30 40 50 60 70 80 90 100\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"84\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80\\n') == '50'\nassert solution('1 2 10\\n11\\n15 7\\n') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4 50\n20 100\n60 10 40 80\n''') == '50'\nassert solution('''\n1 2 10\n11\n15 7\n''') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\n\nassert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4 100\n20 100\n60 10 40 80\n''') == '50'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 4 50\n20 100\n60 10 40 80''') == '50'\nassert solution('''1 2 10\n11''') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\""
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\nassert solution('''\n3 2\n0 0\n''') == '1 3'\nassert solution('''\n1 10\n5 3\n''') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '6 4'\nassert solution() == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == '1 6'\nassert solution(input_ + '\\n' + input_) == '1 3'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n-2 5 -1\n''') == '2 3'\nassert solution('''\n100\n-2 5 -1\n''') == '2 3'\nassert solution('''\n4\n-2 5 -1\n''') == '4 3'"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n-2 5 -1\n\"\"\") == \"2 3\"\nassert solution(\"\"\"\n3\n10 -20 20\n\"\"\") == \"3 3\"\nassert solution(\"\"\"\n100\n10 -20 20\n\"\"\") == \"1 10\"\nassert solution(\"\"\"\n1\n-2\n\"\"\") == \"1 -1\"\nassert solution(\"\"\"\n5\n-2 5 -1 -3\n\"\"\") == \"2 3 3\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"3\"\nassert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n\nN = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\ncount = 0\nfor i in range(2*N):\n    if a[i] < 0 or a[i] > 2*N:\n        continue\n    a[i] += a[i+1]\n    a[i+1] += a[i]\n    if a[i] > 2*N:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    3\n    -2 5 -1\n\"\"\") == \"2 3\"\nassert solution(\"\"\"\n    3\n    -2 5 -1\n    2 3\n\"\"\") == \"2\"\n\"\"\"\n    >>>\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2 3\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    ... -2 5 -1\n    ... 2 3\n    ... \"\"\") == \"2\"\n    >>> assert solution(\"\"\"\n    ... 3\n    "
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('2') == '2 3'"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n-1 5 6 -2''') == '2 3'\nassert solution('''5\n-1 3 7 -2''') == '2 4'\nassert solution('''6\n-1 5 -3 2 -1''') == '1 4'\nassert solution('''8\n-1 -2 6 7 -2 -3 -4 -5''') == '3 4'\nassert solution('''12\n-1 3 -3 4 -4 -4 4 6 -5''') == '5 6'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2 2\"\nassert solution(\"10\") == \"3 3\"\n\"\"\"\n\n\nfrom math import sqrt"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '2 3'\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([1, 0, 3, 1]) == \"3\"\nassert solution([1, 0, 1, 1]) == \"1\"\nassert solution([0, 3, 1, 1]) == \"3\"\n\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nn = data[0]\ndata = data[1:]\nassert len(data) == n\n\nans = 0\nwhile True:\n    for i in range(len(data)):\n        if data[i] < 2**ans:\n            data[i] = 2**ans\n        else:\n            break\n    ans += 1\n    if ans == len(data):\n        break\nprint(ans)"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 3\\n1 5\\n\") == \"3\"\nassert solution(\"1 10\\n2 2\\n\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\\n\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 3\\n1 5\\n') == '3'\nassert solution('1\\n0 4\\n') == '1'\nassert solution('2\\n1 10\\n2 2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 3') == '3'\nassert solution('1 5') == '1'\nassert solution('2 2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0 3\\n1 5\") == \"3\"\nassert solution(\"1 10\\n2 2\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n1 5\\n2 2\\n') == '1'\nassert solution('2\\n3\\n1 5\\n2 2\\n') == '3'\nassert solution('3\\n3\\n1 5\\n2 2\\n') == '3'\nassert solution('4\\n3\\n1 5\\n2 2\\n') == '2'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == '1'\nprint('Hurray!')\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"1 0\") == \"1\"\n\n'''\n\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6 1 10 12 2\n2 4 1 7''') == '16'\nassert solution('''5 5 1 6 7 2\n3 5 3 4''') == '3'\nassert solution('''4 5 1 6 7 2\n3 5 4 7''') == '0 1 2 3 4 5 6 7 8 10 11 12 13 15 16 17 18''')\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('4 5 6') == '1 2 3'\nassert solution('1 2 3 4 5') == '0 1 2 3 4 5'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 18') == '16'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 18\n5 6 1 10 12 2\n''') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \nassert solution('''3 50\n25 25 50\n''') == '3 0 25 50'''\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6 18\\n5 6 1 10 12 2\\n') == '16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 18\") == \"16\"\nassert solution(\"3 50\") == \"3 0 25 50\""
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 50\\n\"\n    \"25 25 50\") == \"0 25 50\"\n\nassert solution(\n    \"6 18\\n\"\n    \"5 6 1 10 12 2\\n\"\n    \"7 7 11\\n\"\n    \"10 12 13 14 15 16 17 18 19 20 21 22 23 24 25\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"10\\n\"\n    \"2\\n\"\n    \"9\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"10\\n\"\n    \"7\\n\"\n    \"11\\n\"\n    \"12\\n\"\n    \"13\\n\"\n    \"14\\n\"\n    \"15\\n\"\n    \"16\\n\"\n    \"17\\n\"\n    \"18\\n\"\n    \"19\\n\"\n    \"20\\n\"\n    \"21\\n\"\n    \"22\\n\"\n    \"23\\n\"\n    \"24\\n\"\n    \"25\\n\"\n    \"0\") == \"0\\n1\\n10\\n2\\n9\\n3\\n1\\n5\\n6\\n10\\n7\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 30 15 20\n''') == '2 4 6 8 10 12 14 16 18'\n\nassert solution('''\n1\n10\n''') == '1'\n\nassert solution('''\n8\n10 10 20 20 30 30 40 40 50\n''') == '4'\n\nassert solution('''\n6\n30 15 20 20 10\n''') == '1 3 5'\n\nassert solution('''\n4\n10 10 10 10\n''') == '0 1 2 3 4'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"16\\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18\""
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 2\nassert solution('3') == 3\n\n\"\"\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6\n''') == '3'\nassert solution('''2\n''') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    6\n''') == \"3\"\nassert solution('''\n    2\n''') == \"2\"\n\n'''\nSOLVED:\n\nimport math\n\nclass Solution:\n    def minpackets(self, coins: int, value: int) -> int:\n        #solve the problem\n        #for each i in range of 1, 2,..., n\n            #pick the current minimum amount\n        \n        #pick the amount in packet with the least amount of coins\n        #recurse for all the next smaller amounts\n            #until the amount in the packet is equal to the minimum amount\n        #return the number of packets\n        \n        \n        num_coins = 0\n        packets = 0\n        \n        for i in range(1, value + 1):\n            num_coins = i\n            \n            if num_coins % coins == 0:\n                packets += math.ceil(num_coins / coins)\n                \n        return packets\n        \n    \n'''"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n\"\"\"\n\nn = int(input())\n\nmin_packets = 0\ni = 0\nwhile i < n:\n    if i < n and i == n - 1:\n        min_packets += 1\n        break\n    elif i >= n - 1 and i == n:\n        min_packets += 1\n        break\n    else:\n        i += 1\n\nprint(min_packets)\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n''') == '3'\nassert solution('''\n3\n''') == '3'\nassert solution('''\n3\n''') == '2'\nassert solution('''\n10\n''') == '2'\nassert solution('''\n3\n''') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '180'\nassert solution('4') == '21'\nassert solution('1') == '50'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '180'\nassert solution('1') == '50'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 1\\n20 2\\n30 3\\n\") == \"180\"\nassert solution(\"3\\n3 1\\n2 2\\n4 3\\n\") == \"21\"\nassert solution(\"1\\n5 10\\n\") == \"50\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '12'\nassert solution(stdin=\"3\") == '180'\nassert solution(stdin=\"3\") == '180'\nassert solution(stdin=\"3\") == '180'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n10 1\\n20 2\\n30 3\\n') == \"180\"\nassert solution('3\\n3 1\\n2 2\\n4 3\\n') == \"21\"\nassert solution('1\\n5 10\\n') == \"50\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 1\n20 2\n30 3\n\n''') == '180'\nassert solution('''\n3 1\n2 2\n4 3\n\n''') == '21'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\\\n3\n10 1\n20 2\n30 3\n\"\"\") == \"180\"\nassert solution(\"\"\"\\\n1\n5 10\n\"\"\") == \"50\"\nassert solution(\"\"\"\\\n7\n5 1\n6 6\n5 2\n4 5\n6 4\n5 1\n\"\"\") == \"208\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n10 1\n20 2\n30 3\n\n''') == '180'\nassert solution('''\n4\n3 1\n2 2\n4 3\n\n''') == '21'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"180\"\nassert solution(\"2\") == \"21\"\nassert solution(\"3\") == \"50\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '180'\nassert solution('3') == '21'\nassert solution('1') == '50'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 0 10\n''') == '2'\nassert solution('''\n4\n0 1 2 3 4\n''') == '1'\nassert solution('''\n9\n0 1 0 2 0 1 1 2 10\n''') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\n0 1 2 3\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n5\n0 1 2 3 4\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n9\n0 1 2 3 4 5 6 7 8\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9\n\"\"\"\n) == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 2 3 4') == '3'\nassert solution('10\\n0 1 2 3 4') == '4'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 2 3 4') == '3'\n\nassert solution('4\\n0 0 0 0') == '4'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '1'\n\nassert solution(input_stdin_is(\"3\")) == '2'\n\nassert solution(input_stdin_is(\"5\")) == '4'\n\nassert solution(input_stdin_is(\"9\")) == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 0 2 0 1 1 2 10') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0 1 2 3 4') == '1'\nassert solution('9\\n0 1 2 3 4') == '3'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '8'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '8'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n1 1\\n0 2\\n1 2') == '8'\nassert solution('15\\n0 0\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n3 3\\n3 4\\n3 5\\n3 6\\n3 7\\n3 8\\n3 9\\n4 4\\n4 5\\n4 6\\n4 7\\n4 8\\n4 9\\n5 5\\n5 6\\n5 7\\n5 8\\n5 9\\n6 6\\n6 7\\n6 8\\n6 9\\n7 7\\n7 8\\n7 9\\n8 8\\n8 9\\n9 9\\n') == '90051682695442067'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n0 1\n1 0\n1 1\n\n''') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n0 2\\n0 3\\n0 4\") == \"12\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"5\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1\") == \"5\"\nassert solution(\"2\") == \"5\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([2, 1, 3, 2, 3]) == \"4\"\nassert solution([2, 1, 2, 1, 3]) == \"2\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"6\") == \"3\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"3\", \"B 1\", \"W 2\", \"B 3\", \"W 1\", \"W 3\", \"B 2\"]) == \"4\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\n\nN = int(stdin.readline().strip())\n\na = [[0] * (N + 1) for i in range(2 * N + 1)]\n\nfor i in range(1, N + 1):\n    a[i][i] = 1\n    a[i][-i] = 1\n\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        a[i][j] = a[i][j - 1] + a[i - 1][j] - a[i - 1][j - 1]\n\nfor line in stdin:\n    i, j = map(int, line.split())\n    i = i - 1\n    j = j - 1\n    a[i][j], a[j][i] = a[j][i], a[i][j]\n\nans = 0\nfor i in range(1, N + 1):\n    ans = max(ans, a[i][-i] + a[-i][i] - a[i][i] - a[-i][-i])\nprint(ans)\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\nassert solution('10') == '2'\nassert solution('1') == '0'"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\"\"\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\nW 1\nW 3\nB 3\nB 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n\"\"\") == \"4\"\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\n\nimport math\n\nN = int(input())\ncolor = input()\n\nwhite_balls = {}\nblack_balls = {}\nfor i in range(1, N + 1):\n    if color[i - 1] == 'W':\n        white_balls[i] = color[i]\n    else:\n        black_balls[i] = color[i]\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n6\n3\n''') == '4'\nassert solution('''5\n3\n5\n''') == '4'\nassert solution('''5\n3\n4\n''') == '3'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"4\"\n\n\n\"\"\"\n\nb, g, n = map(int, input().split())\nb = min(b, n-g)\ng = min(g, n-b)\nprint(min(b, g))\n\n\"\"\"\n\nfrom itertools import product\n\nb, g, n = map(int, input().split())\n\nfor i in product(range(n+1), range(n+1)):\n    if sum(i) == n:\n        print(len(list(i)))\n        break\n\n\"\"\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '3'\nassert solution('3') == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n6\\n3\\n') == '4'\nassert solution('5\\n3\\n5\\n') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n6\n3\n''') == \"4\"\nassert solution('''5\n3\n5\n''') == \"4\"\nassert solution('''5\n3\n5\n''') == \"4\"\nassert solution('''5\n3\n4\n''') == \"5\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n6\n3''') == '4'\nassert solution('''5\n3\n5''') == '4'\nassert solution('''5\n2\n5''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n6\\n3\\n\") == \"4\"\nassert solution(\"5\\n3\\n5\\n\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n6\\n3') == '4'\nassert solution('5\\n3\\n5') == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '3'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([4, 2]) == 2\nassert solution([8, 1, 2, 4, 8]) == 32\nassert solution([16, 4, 6, 7, 9, 5, 13, 12, 11, 10]) == 38\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n4 2\\n') == '2'\nassert solution('8\\n1 2 4 8 16 32 64 576\\n') == '32'\nassert solution('9\\n4 2\\n') == '4'\nassert solution('9\\n1 2\\n') == '1'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input) == str(10)\nassert solution(input) == str(81)\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n4 2\\n') == '2'\nassert solution('8\\n1 2 4 8 16 32 64 576\\n') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n''') == '2'\nassert solution('''\n8 1 2 4 8 16 32 64 576\n''') == '32'\n'''\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n4 2\n''') == '2'\nassert solution('''8\n1 2 4 8 16 32 64 576\n''') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n4 2\n''') == '2'\n\nassert solution('''\n8\n1 2 4 8 16 32 64 576\n''') == '32'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n1\n9\n''') == '9'\n\nassert solution('''\n2\n1 2\n''') == '1'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == \"32\"\n\n\n'''"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '32'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n100 300 450 500\n''') == '2'\nassert solution('''50 2\n100 25\n''') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2\\n\"\n    \"100 300 450 500\"\n) == \"2\"\n\nassert solution(\n    \"50 2\\n\"\n    \"100 25\"\n) == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('400 4') == '2'\nassert solution('50 2') == '3'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '2'\nassert solution('50 2') == '3'\nassert solution('400 4') == '2'\nassert solution('50 2') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"2\"\nassert solution(\"50 2\") == \"3\"\n\nimport math\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '2'\nassert solution('100 4') == '2'\nassert solution('0 2') == '-1'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n3\\n1 3 2 1\\n') == '3'\nassert solution('4\\n3\\n1 2 3 4\\n') == '4'\nassert solution('8\\n4\\n2 4 2 4 2 1\\n') == '5'\nprint('Tests completed')\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([400, 4],\n    [100, 300, 450, 500]) == '2'\nassert solution([50, 2],\n    [100, 25]) == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"100 0\") == \"3\"\nassert solution(\"50 2\") == \"3\"\nassert solution(\"50 2\") == \"3\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"6\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"6\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '6'"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"5 5\") == \"8\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2\n2 3''') == '6'\n\nprint(solution('''5 2\n2 3'''))"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"9 2\") == \"30\"\nassert solution(\"15 2\") == \"182\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '6'"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2\n''') == '6'\nassert solution('''3 3\n''') == '12'\nassert solution('''3 2\n''') == '8'\nassert solution('''3 5\n''') == '20'\nassert solution('''4 1\n''') == '10'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '6'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3/2\"\nassert solution(\"6\") == \"3/2\"\nassert solution(\"7\") == \"3/2\"\nassert solution(\"8\") == \"3/2\"\nassert solution(\"9\") == \"3/2\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2\n2\n''') == '499122178'\nassert solution('''3\n3\n2\n''') == '499122178'\n\n'''\nSample test case 4\nSample Input\n3\n1\n2\n3\nSample Output\n3\n'''\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"0 0 0 0 0\"\nassert solution(\"3\") == \"2 1 1 2\"\nassert solution(\"6\") == \"3 4 2 6 6 7\"\nassert solution(\"12\") == \"1 4 1 1 1 2 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"12\") == \"499122178\"\nassert solution(\"10\") == \"499122178\"\nassert solution(\"15\") == \"499122178\"\nassert solution(\"20\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2/2\"\nassert solution(\"3\") == \"3/3\"\nassert solution(\"4\") == \"4/4\"\nassert solution(\"5\") == \"5/5\"\nassert solution(\"6\") == \"6/6\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"499122178\"\nassert solution(\"3\") == \"499122178\"\nassert solution(\"4\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\""
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3/2\"\nassert solution(\"2\") == \"2/2\"\nassert solution(\"4\") == \"1/2\"\nassert solution(\"1\") == \"1/2\"\nassert solution(\"6\") == \"3/2\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3/2 = 1.5 ~(mod 998244353)'\nassert solution('5') == '7/2 = 3 ~(mod 998244353)'\nassert solution('1') == '1/2 = 1 ~(mod 998244353)'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n''') == '3/2'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"10\\n\") == \"6669\"\nassert solution(\"50\\n\") == \"75\"\nassert solution(\"1000\\n\") == \"15\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"6\"\nassert solution(\"10\") == \"6669\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\"\n) == \"6\", \"Example #1\"\nassert solution(\n    \"3\"\n) == \"6669\", \"Example #2\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '-1'\nassert solution('10') == '6669'\n\nassert solution('2') == '6'\nassert solution('11') == '-1'\n\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\n\nstdin = \"10\"\nassert solution(stdin) == \"-1\"\nstdin = \"2\"\nassert solution(stdin) == \"6\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '6'\nassert solution('3') == '6669'\nprint(solution(input()))\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '-1'\nassert solution('3') == '6'\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3\n''') == '-1'\nassert solution('''1\n2\n''') == '1'\nassert solution('''1\n2\n3\n''') == '2'\nassert solution('''1\n2\n3\n4\n''') == '2'\nassert solution('''1\n2\n3\n4\n5\n''') == '2'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1 4 3 2 0'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"-1\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"8\") == \"1 0 2 4 3 2 3 0\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"1 0 2 4 3\"\nassert solution(\"5\") == \"1 4 3 2 0\"\n\n---\n\n===How to solve===\n\nFirst, you need to find a permutation triple. If there are multiple permutation triple, you can just find the one with the smallest permutation triple, which you should write in your code.\n\nSecondly, you need to generate all permutations with length n and then compare them with all of the permutations with length n - 1.\n\nFinally, you need to print the permutation triple with smallest permutation triple.\n\nSome functions:\n\nfind_permutation_triple(n) : find a permutation triple with length n. Return a triple, in which a[i] and b[i] are the same, and a[i + 1] and b[i + 1] are different.\n\ngenerate_permutations(n) : generate all permutations of length n. Return a list of permutations.\n\ngenerate_permutations_with_smallest_triple(n, a, b) : generate all permutations of length n, and compare them with all permutations of length n - 1. Return the permutation triple that has the smallest permutation triple.\n\n\"\"\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '-1'\nassert solution('5') == '1 4 3 2 0'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"1 0 2 4 3\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1 4 3 2 0'\nassert solution('2') == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '-1'\n\n\"\"\"\nfrom itertools import permutations\n\nn = int(input())\nperms = list(permutations(range(n)))\n\nfor perm in perms:\n    if perm[0] + perm[1] == perm[2]:\n        print(perm[0], perm[1], perm[2])\n        return\nprint('-1')\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n1 2 3 4\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n1 2 4 3\n\"\"\") == \"No\"\nassert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n1 2 4 3\n\"\"\") == \"Yes\"\n\n\"\"\"\n--- Day 1: Report Repair ---\n\nAfter saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n\nThe tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n\nTo save your vacation, you need to get all fifty stars by December 25th.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nBefore you leave, the Elves in accounting just need you to fix your expense report (your puzzle input); apparently, something isn't quite adding up.\n\nSpecifically, they need you to find the two entries that sum to 2020 and then multiply those two numbers together.\n\nFor example, suppose your expense report contained the following:\n\n1721\n979\n366\n299\n675\n1456\nIn this list, the two entries that sum to 2020 are 1721 and 299. Multiplying them together produces 1721 * 299 = 514579, so the correct answer is 514579.\n\nOf course, your expense report is much larger. Find the two entries that sum to 2020; what do you get if you multiply them together?\n\nYour puzzle answer was 36699.\n\nThe first half of this puzzle is complete! It provides one gold star: *\n\n--- Part Two ---\n\nThe Elves in accounting are thankful for your help; one of them even offers you a starfish coin they had left over from a past vacation. They offer you a second one if you can find three numbers in your expense report that meet the same criteria.\n\nUsing the above example again, the three entries that sum to 2020 are 979, 366, and 675. Multiplying them together produces the answer, 241861950.\n\nIn your expense report, what is the product of the three entries that sum to 2020?\n\nYour puzzle answer was 241861950.\n\"\"\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\n\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'No'\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\n\nassert solution('''\n5\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'No'"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('1 3') == 'No'\nassert solution('2 4') == 'No'\nassert solution('1 2 3 4') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\nassert solution('''\n3\n1 2\n1 3\n2 4\n''') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"No\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 4 3 2\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n\") == \"Yes\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\n\nassert solution() == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'Yes'\nassert solution() == 'No'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 6 5') == \"24500\"\nassert solution('2 4 5') == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 6 5\") == \"24500\", \"Wrong answer\"\nassert solution(\"2 4 5\") == \"-1\", \"Wrong answer\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n\"\"\") == \"24500\"\n\nassert solution(\"\"\"\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n\"\"\") == \"-\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\nprint(solution(*tuple(map(int, input().split()))))\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"25000\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"3 2 0 5500\") == \"24500\"\nassert solution(\"3 2 0 3000\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '24500'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 45\n    ''') == '0.828427125'\nassert solution('''6 4 30\n    ''') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\""
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n\n\n\"\"\"\n\n\nfrom math import pi\n\nw, h, alpha = map(int, stdin.split())\nalpha = pi * alpha / 180\n\nreturn w * h * 0.5 - w * h * 0.5 * (1 + 2 * alpha) / (1 + 2 * alpha + 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 45\\n\") == '0.828427125'\nassert solution(\"6 4 30\\n\") == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == '0.828427125'\nassert solution(input_) == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 45\n\n''') == '0.828427125'\nassert solution('''\n6 4 30\n\n''') == '19.668384925'\nassert solution('''\n1 1 1\n\n''') == '0'\nassert solution('''\n1 1 2\n\n''') == '0.25'\n'''\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\nassert solution('''3 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\nassert solution('''\n3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n''') == '992'\nassert solution('''\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n1\\n\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3000\"\nassert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3000\"\nassert solution(\"3 4\") == \"992\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3000'\nassert solution('''3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n''') == '992'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3000'\nassert solution_if_test() == '992'\nassert solution_if_test2() == '992'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == \"992\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == str(6)\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 3 2 1 1\") == \"6\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\"\nassert solution(\"\"\"\n5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\"\"\") == \"62\"\nassert solution(\"\"\"\n5 2\n1 2\n0 0\n2 1 -100 -100\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''2 2\n1 2\n0 0\n2 1 -100 -100\n''') == '2'\n\n'''\n\nstdin = []\nfor line in sys.stdin:\n    stdin.append(line.rstrip())\nprint(solution(stdin))\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n') == '2'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\n\nprint(solution('''2 2\n1 2\n0 0\n2 1 -100 -100\n'''))\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_1) == '6'\nassert solution(input_2) == '-1'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4\n3 1 1 2 2\n0 2 6 7 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 4\n1 3 1 2\n1 2 1 2\n1 3 1 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaab\") == \"YES\"\nassert solution(\"aabb\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"baa\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''aaba\nabaa\n''') == 'YES'\nassert solution('''aabb\nabab\n''') == 'NO'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"abbbaa\") == \"YES\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('aabb') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaba\") == \"YES\", \"Wrong answer with input aaba\"\nassert solution(\"abaa\") == \"YES\", \"Wrong answer with input abaa\"\nassert solution(\"aabb\") == \"NO\", \"Wrong answer with input aabb\"\nassert solution(\"bbaa\") == \"YES\", \"Wrong answer with input bbaa\"\nassert solution(\"bbbaa\") == \"NO\", \"Wrong answer with input bbbaa\"\n\n'''\n\ns = stdin\ns1 = \"a\"\ns2 = \"b\"\na1 = s1 + s1\na2 = s2 + s2\nb1 = s1 + s2\nb2 = s2 + s1"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == 'YES'\nprint(solution(input_))\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaabb\") == \"NO\"\nassert solution(\"aabaa\") == \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 2\n3 4\n2 5''') == \"NO\"\n\nassert solution('''6\n1 2 4 5 3\n3 4 2 5 1\n2 3 5 1 4\n5 4 3 2 1\n4 5 1 2 3''') == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\""
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'NO'\nassert solution(stdin) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == \"NO\"\nassert solution('2\\n') == \"YES\""
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"YES\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''4 4\na\nb\nc\ndd\n1 2 3 4\n''') == 'No'\nassert solution('''6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'Yes'\nassert solution('''2 5\na\nb\nc\ndd\n1 2\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'Yes'\n\nassert solution('4 4') == 'No'\n\nassert solution('6 3') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"a?ba?\\n\") == \"Yes\"\nassert solution(\"a?ba?\\n\") == \"Yes\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"No\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"6 3\") == \"No\"\nassert solution(\"7 4\") == \"Yes\"\nassert solution(\"8 4\") == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == \"Yes\"\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == \"Yes\"\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == \"No\"\nassert solution('''\n5 3\n1 2 3 4\n''') == \"No\"\n'''"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\nab\nac\ncd\n1 2\n\n''') == 'Yes'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\n''') == 'Yes'\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\n''') == 'No'\nassert solution('''\n7 3\na\nb\nc\ndd\n.svn\n.git\ntest\ntes.\n.est\n...\n.\n1 2 3\n\n''') == 'Yes'\nassert solution('''\n7 6\na\nb\nc\ndd\n.svn\n.git\ntest\ntes.\n.est\n...\n.\n1 2 3 4 5 6\n\n''') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\", \"Your solution is wrong!\"\n\n'''\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"Yes\"\nassert solution(\"5 4\") == \"No\"\nassert solution(\"6 4\") == \"Yes\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\nab\\nc\\nd\\n1 2\\n\") == \"Yes\\n?es?\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '?3'\nassert solution('1 2 3 4') == '?34'\nassert solution('1 2 3 4 5') == '?3445'\nassert solution('1 2 3 4 5 6') == '?3456'\nassert solution('1 2 3 4 5 6 7') == '?34567'\n\nstdin = '''\n5 4\na\nb\nc\nd\n1 2 3 4\n\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n\") == \"2\"\nassert solution(\"1\\n2\\n1\\n\") == \"1\"\nassert solution(\"3\\n1 2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''3\n1 1 2\n''') == '3'\nassert solution('''3\n3 1 3\n''') == '0'\nassert solution('''4\n1 2 3\n''') == '1'\nassert solution('''5\n1 2 2\n''') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"3\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3\\n') == '2'\nassert solution('5\\n1 2 3 4 5\\n') == '4'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3''') == '2'\nassert solution('''3\n1 2 3''') == '2'\nassert solution('''10\n10 10 10 10 10''') == '2'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''5\n1 2 3 5\n''') == '4'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3\\n') == '2'\nassert solution('6\\n1 2 3 4 5\\n') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'\nassert solution('5\\n1 2\\n3 4\\n5 6\\n7 8\\n') == '3'\nassert solution('7\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n') == '4'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n') == '2'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2'\n\nassert solution('5') == '1'\n\nassert solution('6') == '1'\n\nassert solution('10') == '7'\n\nassert solution('50') == '6314'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2\n2 3\n3 4''') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"2 1 2 1\") == \"3\"\nassert solution(\"5 2\") == \"2\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '3'\n\"\"\"\n\nimport math\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('3\\n1 2\\n2 3') == '1'\n\n------------------------------------\n\nFor this problem, let the goal be to create a function called solution that\ntakes in two parameters (a list representing the edge connections and a\nstring representing N) and returns a string representing the ways to divide\nthe vertices into pairs, satisfying the condition.\n\nConsider the example from above: N = 5, the vertices are numbered from 1 to 5, and\nthe vertices are connected such that each vertex u can be connected to the\nvertex v such that u < v. This is an undirected graph with 5 vertices and\n5 edges. The edge connections are as follows:\n\n1 2\n2 3\n3 4\n4 5\n5 1\n\nNow, Snuke would like to decorate the graph with ribbons. For each vertex v, he\nwould decorate it with a ribbon connected to every edge (u, v) such that\nthere is a shortest path between u and v. Here is one way to decorate the\ngraph:\n\n1 2\n2 3\n3 4\n4 5\n5 1\n\nSnuke would like to divide the vertices into pairs so that the following\ncondition is satisfied: \"for every edge, there is at least one ribbon going\nthrough it.\"\n\nSo, the above graph should be divided into 2 pairs, so the final string that\nSnuke needs to return will be \"2\".\n\nSo, the solution function should return a string representing the ways to\ndivide the vertices into pairs, satisfying the condition.\n\nTest your code using the provided input:\n\n>>> solution('3\\n1 2\\n2 3')\n'1'\n\n>>> solution('4\\n1 2\\n2 3\\n3 4')\n'1'\n\n>>> solution('5\\n1 2\\n2 3\\n3 4')\n'2'\n\n>>> solution('3\\n1 2\\n2 3\\n3 4')\n'1'\n\n>>> solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10')\n'4'\n\nHere is a starting point:"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n1 2\\n2 3\\n3 4\\n\") == \"2\"\nassert solution(\n    \"10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 3') == '2'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 2 5\n''') == \"4\"\nassert solution('''\n10 3 10\n''') == \"5\"\n\n'''\n1. Go through the list and check for all even numbers and odd numbers in a range l to r.\n2. If all are even numbers, then return l, otherwise return r.\n'''\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 2 5\n''') == '4'\nassert solution('''10 3 10\n''') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 2 5\n''') == '4'\nassert solution('''\n10 3 10\n''') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n\"\"\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n\n''') == '2'\n\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n\n''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 6\"\n) == \"2\"\nassert solution(\n    \"4 4\"\n) == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '1 2 3 4 5'''"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n'''"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\"\nassert solution(\"5 6\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 5\") == \"1\"\nassert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n4 5\") == \"1\"\nassert solution(\"3 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 5\") == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"4 4\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n75 150 75 50\n''') == 'Yes'\nassert solution('''3\n100 150 250\n''') == 'No'\nassert solution('''8\n100 150 250 500 750 800 850 950\n''') == 'Yes'\n''')"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'No'\nassert solution('3') == 'Yes'\n'''"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n75 150 75 50\\n\") == \"Yes\"\nassert solution(\"3\\n100 150 250\\n\") == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'\n\n'''\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nfor i in range(n):\n    if a[i] == a[i+1]:\n        continue\n    else:\n        if (a[i] - 1) in a and (a[i] + 1) in a and (a[i] * 2) in a:\n            continue\n        else:\n            print('No')\n            break\n\n\n'''\n    def solution(stdin: str) -> str:\n        pass\n\nassert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'\n\n'''"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n\"\n    \"75 150 75 50\\n\"\n    \"3\\n\"\n    \"100 150 250\\n\"\n    ) == \"Yes\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\""
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"Yes\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nc = 0\nfor i in range(n):\n    if a[i] == a[(i + 1) % n] == a[(i + 2) % n]:\n        c += 1\n    if a[i] == a[(i + 1) % n] == a[(i + 2) % n] == a[(i + 3) % n]:\n        c += 1\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n100 150 75 50\n''') == 'Yes'\nassert solution('''3\n100 150 250\n''') == 'No'\nassert solution('''7\n100 150 75 50 200 150 50\n''') == 'Yes'\n'''\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_1) == 'Yes'\nassert solution(input_2) == 'No'\n\n\"\"\""
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"150\"\nassert solution(input()) == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n50 50 50\\n') == '150'\nassert solution('2\\n-1 -100 -1\\n') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\nassert solution('-1 -100 -1') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '150'\nassert solution('3') == '150'\nassert solution('4') == '150'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\">50 50 50\\n\") == \"150\\n\"\nassert solution(\">-1 -100 -1\\n\") == \"100\\n\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n50 50 50\\n') == '150'\nassert solution('2\\n-1 -100 -1\\n') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == \"150\"\nprint(solution(input_data))\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 3\") == \"3\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5\nab a\ncc c\nca a\nee c\nff d\n''') == '4'\n\nassert solution('''\n6 2\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '1'\n\nassert solution('''\n6 2\ncc e\nbc d\na b\nff c\nba b\nab a\n''') == '0'\n\nassert solution('''\n6 2\nab a\nbb b\n\n''') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"ab a\\n\"\n    \"cc c\\n\"\n    \"ca a\\n\"\n    \"ee c\\n\"\n    \"ff d\\n\"\n) == \"1\"\nassert solution(\n    \"6 2\\n\"\n    \"bb a\\n\"\n    \"ba a\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 5\nab a\ncc c\nca a\nee c\nff d\n''') == \"4\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 5\") == \"4\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"3 6\") == \"1\"\nassert solution(\"2 8\") == \"1\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution(input()) == '1'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\nab a\\ncc c\\nc a\\nee c\\nff d\\n\") == \"4\"\nassert solution(\"2 8\\naf e\\ndc d\\nc f\\nbc b\\nda b\\neb a\\nbb b\\nff c\\n\") == \"1\"\nassert solution(\"6 2\\nbb a\\nba a\\n\") == \"0\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1\n3\n2\n4\n1''') == '3'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n3\n2\n4\n5\n4\n7\n5\n4''') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == \"1\"\nassert solution('3') == \"10\"\nprint(solution(input()))\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"10\"\n\"\"\"\n\nstdin = input()\na, b = map(int, stdin.split())"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1\n1''') == '1'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\nassert solution('5 1') == '1.000000000000'\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == \"1\"\nassert solution('3 1') == \"1.000000000000\"\nassert solution('4 1') == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1\n1 2\n''') == '1.000000000000', solution('''3 1\n1 2\n''')\nassert solution('''4 1\n1 2\n''') == '1.250000000000', solution('''4 1\n1 2\n''')\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == \"1.000000000000\"\nassert solution('1 3') == \"1.250000000000\"\nassert solution('4 1') == \"1.250000000000\"\n\n'''\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 1\") == \"1.250000000000\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '1.000000000000'\n\nassert solution('4 1') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n3 2\n4 1\n''') == '1.000000000000'\nprint(solution('''1 3\n3 2\n4 1\n'''))"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'\n\nimport math"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) in {'-1', '10.0000000000'}\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n12\n11 8\n7 5\n\n''') == \"10.0000000000\"\n\nassert solution('''\n3\n1\n1 4 1\n2 5 3\n\n''') == \"-1\"\n\nassert solution('''\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\n''') == \"85.4800000000\"\n\nassert solution('''\n6\n3\n4 5 3 2 3\n3 5 5 5 2\n\n''') == \"77.4800000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'\nassert solution('6') == '85.4800000000'\n\n--Time Complexity--\n\nThe time complexity of the algorithm will be O(N) where N is the number of planets in the cargo.\n\n--Space Complexity--\n\nThe space complexity of the algorithm will be O(N) in the worst case.\n\n\n\"\"\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 4 1\n2 5 3\n''') == '10.0000000000'\n\nassert solution('''3\n1\n1 4 1\n2 5 3\n''') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2\n12\n11 8\n7 5\n\"\"\") == \"10.0000000000\"\n\nassert solution(\n\"\"\"\n3\n1\n1 4 1\n2 5 3\n\"\"\") == \"-1\"\n\nassert solution(\n\"\"\"\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\"\"\") == \"85.4800000000\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_lines) == '10.0000000000'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n22\\n11 8\\n7 5\\n\") == \"10.0000000000\"\nassert solution(\"2\\n4 6 3 3 5 6\\n2 6 3 6 5 3\\n\") == \"-1\""
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n12\\n11 8\\n7 5') == '10.0000000000'\nassert solution('2\\n4 6 3 3 5 6\\n2 6 3 6 5 3') == '85.4800000000'\nassert solution('6\\n2\\n4 6 3 3 5 6\\n2 6 3 6 5 3') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'\nassert solution('6') == '85.4800000000'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('10') == '4'"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n3''') == '0'\nassert solution('''10\n2\n1\n3''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\"\nassert solution(input) == \"4\"\n\n>>>"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '4'"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 0\nassert solution('10') == 4\n\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n''') == \"0\"\nassert solution('''10\n''') == \"4\""
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n\n''') == '0'\nassert solution('''\n10\n\n''') == '4'"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Wh\"\nassert solution(\"1 2\") == \"Areyoubusy\"\nassert solution(\"1 111111111111\") == \"Wh\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"3 1\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"4 1\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"5 1\") == \"Wh. \"\n\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"Wh\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"Wh\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"Wh\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 111111111111\n''') == 'Wh'\nassert solution('''\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'abdef'\nassert solution('''\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n''') == 'Areyoubusy'\n\n\n\n\n[Image]\n\nNephren is playing a game with little leprechauns.\n\nShe gives them an infinite array of strings, f_{0... \u221e}.\n\nf_0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\n\nShe wants to let more people know about it, so she defines f_{i} =  \"What are you doing while sending \"f_{i} - 1\"? Are you busy? Will you send \"f_{i} - 1\"?\" for all i \u2265 1.\n\nFor example, f_1 is\n\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f_1.\n\nIt can be seen that the characters in f_{i} are letters, question marks, (possibly) quotation marks and spaces.\n\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of f_{n}. The characters are indexed starting from 1. If f_{n} consists of less than k characters, output '.' (without quotes).\n\nCan you answer her queries?\n\n\n-----Input-----\n\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\n\nEach of the next q lines contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18).\n\n\n-----Output-----\n\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 111111111111\n\nOutput\nWh\nInput\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\nOutput\nabdef\nInput\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\nOutput\nAreyoubusy\n\n\n-----Note-----\n\nFor the first two examples, refer to f_0 and f_1 given in the legend.\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"f_{0} - 1\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending f_{1} - 1\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\n\n\"\"\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 111111111111\n\"\"\") == \"Wh.\"\nassert solution(\"\"\"\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\"\"\") == \"abdef\"\nassert solution(\"\"\"\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\"\"\") == \"Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'Areyoubusy'\nassert solution('1 111111111111') == 'Wh'\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \".\"\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1 2') == 'Wh'\n\nassert solution('5 0\\n0 69') == 'abdef'\n\nassert solution('10 4\\n4 1825') == 'Areyoubusy'\n\nassert solution('10 5\\n4 1829\\n4 1651') == 'Wh'\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1\n1 2''') == 'Wh.'\nassert solution('''5 0\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474''') == 'Areyoubusy'\n\n\"\"\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n? +? -? +? = n\n''') == 'Possible'\nassert solution(\n'''\n? +? -? +? +? = n\n''') == 'Impossible'\n'''\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? =?') == 'Possible'\nassert solution('? +? = 1') == 'Impossible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? -? = 1') == 'Impossible'\nassert solution('? = 1000000') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('? +? -? +? = 42') == \"Possible\"\nassert solution('? +? -? +? = 12') == \"Impossible\"\nassert solution('? -? = 1000000') == \"Impossible\"\nassert solution('? = 1000000') == \"Impossible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n? +? -? +? +? = 42\n''') == 'Possible'\nassert solution('''\n? -? = 1\n''') == 'Impossible'\nassert solution('''\n? = 1000000\n''') == 'Possible'\nassert solution('''\n? + 1 + 1 = 4\n''') == 'Impossible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('?+?+?+?+?=n') == 'Possible'\nassert solution('?+?+?=n') == 'Impossible'\nassert solution('?=n') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"? +? -? +? = n\") == \"Possible\"\nassert solution(\"? +? -? +? = n\") == \"Impossible\"\nassert solution(\"? -? = 1\") == \"Impossible\"\nassert solution(\"? = 1000000\") == \"Possible\""
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '? +? -? +? = 42'\n) == 'Possible'\nassert solution(\n    '? -? = 1'\n) == 'Impossible'\nassert solution(\n    '? = 1000000'\n) == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? +? -? +? +? = 42') == 'Possible'\nassert solution('? +? -? +? = 1') == 'Impossible'\nassert solution('? = 1') == 'Impossible'\nassert solution('? +? = 1') == 'Impossible'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''? +? -? +? = 42''') == 'Possible'\nassert solution('''? -? = 1''') == 'Impossible'\nassert solution('''? = 1000000''') == 'Possible'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 0 2') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2 0 2\n0\n0\n0\n\n''') == '7 4 5'\n\n'''\nFind all the prime numbers that are smaller than or equal to N.\n\nHere is a table of the first few prime numbers.\n\nN   prime number\n'''"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '7 4 5'\nassert solution('5') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '7 4 5'\n\"\"\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 0 2\n0\n1\n0\n0\n\n''') == '7 4 5', \"First example\"\nassert solution('''\n4\n1 2 0 2\n0\n1\n0\n0\n\n''') == '7 4 5', \"Second example\"\nassert solution('''\n3\n1 2 0 2\n0\n1\n\n''') == '7 4 5', \"Third example\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"7 4 5\"\nassert solution(\"2\") == \"7 4 5\"\nassert solution(\"1\") == \"7 4 5\"\nassert solution(\"3\") == \"7 4 5\"\nassert solution(\"5\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2 0 2\n0 1 2 0\n0 2 0 1\n0 1 2 0\n1 2 0 2\n''') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '7 4 5'\nassert solution('4') == '7 4 5'\n\n'''\n\nimport sys"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '4 4 4'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\naabddc\n''') == \"Yes\"\nassert solution('''\n3\nabc\n''') == \"No\"\nassert solution('''\n3\njjj\n''') == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\naabddc\n\n''') == \"Yes\"\nassert solution('''\n3\nabc\n\n''') == \"No\"\nassert solution('''\n3\njjj\n\n''') == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('3') == 'Yes'\n'''\n\nstdin = input()\nstdin = list(stdin.split())"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('3') == 'Yes'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\naabddc\n''') == 'Yes'\nassert solution('''\n3\nabc\n''') == 'No'\nassert solution('''\n3\njjj\n''') == 'Yes'\nassert solution('''\n4\nhhgfh\n''') == 'Yes'\n'''\n\n'''"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\naabddc\n''') == 'Yes'\nassert solution('''3\njjj\n''') == 'Yes'\nassert solution('''3\nabc\n''') == 'No'\n\n\nfrom itertools import combinations_with_replacement\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"54\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nprint(solution(input()))\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '5 2'\n) == '54', solution('5 2')\nassert solution(\n    '7 4'\n) == '1728', solution('7 4')\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '54'\nassert solution(\"5 2\") == '54'\nassert solution(\"7 4\") == '1728'\nassert solution(\"3 5\") == '11'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\n''') == '54'\nassert solution('''\n7 4\n''') == '1728'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"54\"\nassert solution(input) == \"1728\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '1'\nassert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('8 10') == '73'\nassert solution('6 2') == '4'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('1 2') == '1'\nassert solution('6 2') == '4'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '54'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\nWWBBBW') == '2 4'\nassert solution('3 3\\nWWW') == '2 1'\nassert solution('1 1\\nW') == '1 1'\nassert solution('3 3\\nWWWWWW') == '1 1'\nassert solution('1 1\\nW') == '1 1'\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == \"2 4\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\\n') == '2 1'\n\nassert solution('5 3\\nWWWWWWWW\\nWWBBBWWW\\nBBBBBBBB\\nWWWWWWWW\\nWWBBBBWW\\nWWBBBBWW\\nWWBBBBWW\\nWWBBBBWW\\nWWBBBBWW\\n') == '3 2'\n\nassert solution('5 2\\nBBBBBBBB\\nBBBBBBBB\\nBBBBBBBB\\nBBBBBBBB\\nBBBBBBBB\\nBBBBBBBB\\n') == '2 1'\n\nassert solution('2 1\\nBBBBBBBB\\nBBBBBBBB\\n') == '1 2'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\nWWBBBW\\nWWBBBW\\nWWBBBW\\nWWWWWW\\nWWWWWW\") == \"2 4\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"2 4\"\nassert solution(\"3 3\") == \"2 1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\nprint(solution(input()))"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\nassert solution('9 1') == '5 4'\nassert solution('12 5') == '9 7'\nprint('Congratulations! All tests passed')"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\n''') == '2 4'\nassert solution('''5 5\nWWWWW\nWWWWW\nWWWWW\nWWWWW\nWWWWW\n\n''') == '4 2'\nassert solution('''3 3\nWWWWW\nWWWWW\nWWWWW\n\n''') == '2 2'\nassert solution('''5 5\nWWWWW\nWWWWW\nWWWWW\nWWWWW\nWWWWW\n\n''') == '2 2'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10 9 10 10 9\"\n\n\"\"\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    5 7\n    2 4\n    5 1\n    2 3\n    3 4\n    4 1\n    5 3\n    3 5\n    \"\"\"\n) == \"10 9 10 10 9\"\nprint(solution(\n    \"\"\"\n    5 7\n    2 4\n    5 1\n    2 3\n    3 4\n    4 1\n    5 3\n    3 5\n    \"\"\"\n))\nassert solution(\n    \"\"\"\n    2 3\n    1 2\n    1 2\n    1 2\n    \"\"\"\n) == \"5 6\"\nprint(solution(\n    \"\"\"\n    2 3\n    1 2\n    1 2\n    1 2\n    \"\"\"\n))\nassert solution(\n    \"\"\"\n    4\n    \"\"\"\n) == \"5 6\"\nprint(solution(\n    \"\"\"\n    4\n    \"\"\"\n))"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\n\nstdin = '3 1\\n4 1\\n3 2\\n2 3'\nassert solution(stdin) == '8 8 6'\n\nstdin = '3 2\\n1 2\\n1 2'\nassert solution(stdin) == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n2 4\\n5 1\\n2 3\\n3 4\\n4 1\\n5 3\") == \"10 9 10 10 9\"\nassert solution(\"5 5\\n1 1\\n2 2\\n3 2\\n4 2\\n5 2\") == \"9 9 9 9 9\"\nassert solution(\"4 2\\n1 1\\n2 2\\n3 2\\n4 2\\n5 2\") == \"5 5 5 5 5\"\nassert solution(\"2 3\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"5 6 \n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"2 3\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 7\"\n    \"2 4\"\n    \"5 1\"\n    \"2 3\"\n    \"3 4\"\n    \"4 1\"\n    \"5 3\"\n) == \"10 9 10 10 9\"\nassert solution(\n    \"2 3\"\n    \"1 2\"\n    \"1 2\"\n    \"1 2\"\n) == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '10 9 10 10 9'\nassert solution('5 7') == '10 9 10 10 9'\nassert solution('2 1') == '5 6'\nassert solution('3 3') == '5 6'\nassert solution('1 3') == '4 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3 1 5'\nassert solution('6 2') == '4 1 6'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3\") == \"2\""
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\\n0 1 0\\n1 0 0\\n1 1 -3\") == \"2\""
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n\n2\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\n2\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1 0 0\") == \"1\"\nassert solution(\"0 1 0\") == \"1\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == '2'\nassert solution('''\n1 1\n-1 -1\n4\n1 0 0\n0 1 0\n1 0 0\n''') == '3'\nassert solution('''\n1 1\n-1 -1\n5\n1 0 0\n0 1 0\n1 0 0\n''') == '3'\nassert solution('''\n1 1\n-1 -1\n6\n1 0 0\n0 1 0\n1 0 0\n''') == '4'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Kevin\"\nassert solution(\"2 1\") == \"Nicky\"\nassert solution(\"1 2\") == \"Kevin\"\nassert solution(\"2 2\") == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n3 4\\n\") == \"Kevin\"\nassert solution(\"1 2\\n3\\n\") == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'\nassert solution('3 4') == 'Kevin'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3\") == \"Kevin\"\nassert solution(\"1 2\\n3\") == \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 1') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\"\nassert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\"\nassert solution(\"2 1\") == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 1\") == \"Nicky\"\nassert solution(\"1\") == \"Nicky\"\nassert solution(\"1 2 3 4\") == \"Kevin\"\nassert solution(\"1 1 2 3 4\") == \"Nicky\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1\n3 4\n\n''') == 'Kevin'\nassert solution('''1 2\n3\n\n''') == 'Nicky'\nprint(solution('''1\n2\n3\n4\n5\n6'''))"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3\") == \"Kevin\"\nassert solution(\"2 2\\n3\") == \"Nicky\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution([\"3\", \"1 2 3\"]) == \"1 2 3\"\nassert solution([\"2\", \"2 2 2\"]) == \"1\""
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"2 2 2\") == \"1 1 1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1\\n') == '1\\n1 1\\n'\nassert solution('1\\n1 1\\n') == '1\\n1 1\\n'\nassert solution('2\\n2 1\\n') == '1\\n1 1\\n'\nassert solution('3\\n1 1 1\\n') == '1\\n1 1 1\\n'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1 1 1'\nassert solution('1') == '1 1 1'\nassert solution('3 1 2 3') == '3 1 2 3'\nassert solution('3 2 2 3') == '3 2 2 3'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"2\") == \"1 1 1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1 1 1\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n2 2 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n0\n1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('4') == '1'\n'''\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '1 1 1'\nassert solution('2 2') == '2 2 2'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 1 2\n''') == '1'\nassert solution('''\n3\n1 1 2\n''') == '2'\nassert solution('''\n4\n1 1 1 1\n''') == '-1'\nassert solution('''\n2\n1 1\n''') == '2'\nassert solution('''\n5\n1 1 1 1 2 2\n''') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('100') == '2'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11\") == '6'\nassert solution(\"01\") == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n11''') == '1'\nassert solution('''0\n01''') == '2'\nassert solution('''1\n10''') == '2'\nassert solution('''0\n00''') == '0'\nassert solution('''0\n11''') == '1'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('01') == \"1\"\nassert solution('11') == \"6\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nprint(solution(input()))\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"11\"\n    ) == \"6\"\nassert solution(\n    \"01\"\n    ) == \"2\""
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 7\") == \"4\"\nassert solution(\"3\\n1 1 2\") == \"3\"\nassert solution(\"2\\n3 3\") == \"2\""
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '4'"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1 2 3\n3 5 6''') == '1'\nassert solution('''2\n5 7 8 9''') == '2'\nassert solution('''3\n1 2 3\n2 3 4\n3 4 5''') == '2'\nassert solution('''2\n5 7 8 9''') == '3'\nassert solution('''3\n1 2 3\n2 3 4\n3 4 5''') == '2'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"1\", f\"input: {input_1} \"\n\nassert solution(input_2) == \"3\", f\"input: {input_2} \"\n\nassert solution(input_3) == \"4\", f\"input: {input_3} \"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('1 1 2') == '3'\nassert solution('3 1 2') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 1\nassert solution('2') == 3\nassert solution('3') == 6\nassert solution('4') == 10\nassert solution('5') == 15\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1 2\n\n''') == '1'\nassert solution('''\n2\n5 7\n\n''') == '3'\nassert solution('''\n3\n1 1 2\n\n''') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('1 1 2') == '3'\nassert solution('3') == '4'\nassert solution('2') == '4'\nassert solution('5 7') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1 1 2\n''') == '1', \"fist\"\nassert solution('''2\n5 7\n''') == '4', \"second\"\nassert solution('''3\n1 1 2\n''') == '3', \"third\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''\n2\n1 0\n0 1\n''') == 'YES'\nassert solution('''\n5\n1 2 3 4 0\n0 3 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == \"YES\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n1 0\n2 0 1''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 0 2\n2 0 1\n\n''') == 'YES'\nassert solution('''\n2\n1 0\n0 1\n\n''') == 'YES'\nassert solution('''\n4\n1 2 3 0\n0 3 2 1\n\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''2\n1 0\n0 1\n''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'YES'\nassert solution('4') == 'NO'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\nassert solution('''3\n1 0 2\n0 3 2 1\n''') == 'YES'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\n\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"9000\"\nassert solution(\"2\") == \"1160\"\nassert solution(\"3\") == \"1156\"\nassert solution(\"4\") == \"1157\"\nassert solution(\"5\") == \"1157\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"9000\"\nassert solution(\"6\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\n\n'''"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '9000'\nassert solution('6') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10') == '1160'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2') == '6'\nassert solution('8 6') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n5 2\n2 3\n1 4\n1 4\n2 1\n\"\"\") == \"6\"\nassert solution(r\"\"\"\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n\"\"\") == \"1\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"8 6\") == \"1\"\nassert solution(\"2 2\") == \"2\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1\\n1'\nassert solution('3 1') == '0'\nassert solution('3 2') == '1'\nassert solution('2 2') == '2'\nassert solution('4 1') == '2'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2') == '1', \"Wrong!\"\nassert solution('8 6') == '6', \"Wrong!\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"8 6\") == \"1\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5\\n2 2 3 4 6\\n') == '5', \"Wrong!\"\nassert solution(\n    '4\\n2 4 6 8\\n') == '-1', \"Wrong!\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"-1\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 2 3 4 6\") == \"5\"\nassert solution(\"4\\n2 4 6 8\") == \"-1\"\nassert solution(\"3\\n2 6 9\") == \"4\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4', \"Wrong answer\"\nassert solution('4') == '-1', \"Wrong answer\"\nassert solution('3') == '4', \"Wrong answer\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 2 3 4 6''') == '5'\nassert solution('''3\n2 6 9''') == '-1'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"5\"\nassert solution(\"4\\n2 4 6 8\") == \"4\"\nassert solution(\"3\\n2 6 9\") == \"-1\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '-1'\nassert solution('5') == '5'\nassert solution('6') == '4'\nassert solution('7') == '3'\nassert solution('8') == '5'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '5'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5, 2, 3, 4, 6]) == 5\nassert solution([2, 4, 6, 8, 10]) == -1\nassert solution([2, 6, 9, 10]) == 4\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2 2 3 4 6\") == \"5\"\nassert solution(\"1\\n2 4 6 8\") == -1\nassert solution(\"3\\n2 6 9\") == \"4\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abacabaca\") == \"3\\naca\\nba\\nca\"\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nabacabaca\n''') == '3'\nassert solution('''\nabaca\n''') == '0'\n\n'''\nYou are free to use whatever programming languages you like. However, please check the following:\n\nSample input (stdin)\n\nabacabaca\nSample output (stdout)\n\n3\naca\nba\nca"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n'''\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abacabaca\") == \"3\"\n\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\""
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('abacabac') == '3'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5\\n11.2\\n#.22\\n#.323\\n') == '2'\nassert solution('3 3\\n1#1#\\n#.1#\\n#.#.\\n') == '-1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n1#2#3') == '2'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\\n11.2#2#3\") == \"2\"\nassert solution(\"3 3\\n.23.23\\n1#2\\n.3\") == \"1\"\nassert solution(\"1 1\\n1#\") == \"1\"\nassert solution(\"1 1\\n.1#\") == \"1\"\nassert solution(\"1 1\\n.1#\\n1#\") == \"1\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 5\\n\"\n    \"11..2\\n\"\n    \"#..22\\n\"\n    \"#.323\\n\"\n    \"#333\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5\n11#2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5\n11.2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == \"2\"\nassert solution(\"3 3\\n1..1\\n#.2\\n#.1\\n#.2\") == \"0\"\nassert solution(\"2 1\\n#..2\\n#.2\") == \"1\"\nassert solution(\"1 5\\n11..2\\n#..22\\n#.323\\n.#333\") == \"4\"\nassert solution(\"1 0\\n#..2\\n#.2\") == \"2\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\".#..#\") == \"2\"\nassert solution(\"#.##\") == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8') == '6'\nassert solution('3') == '-1'"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '-1'\nassert solution('8') == '6'\nassert solution('4') == '-1'\nassert solution('20') == '-1'\nassert solution('20') == '-1'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '-1'\nassert solution('8') == '6'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8\n()((())(\n''') == '6'\nassert solution('''3\n(()\n''') == '-1'\nassert solution('''4\n(((()))))\n''') == '-1'\nassert solution('''3\n(()))\n''') == '6'\nassert solution('''8\n))((()))\n''') == '6'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"-\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"5\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n())') == '2'\nassert solution('3\\n(()') == '-1'\nassert solution('1\\n()') == '0'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"(())(\") == \"6\"\nassert solution(\"))((()\") == \"6\"\nassert solution(\"))((()(\") == \"6\"\nassert solution(\"))((()))(\") == \"6\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"-1\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"1\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1', solution('1')\nassert solution('2') == '1', solution('2')\nassert solution('3') == '2', solution('3')\nassert solution('4') == '3', solution('4')\nassert solution('5') == '4', solution('5')"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 4\") == \"1\"\nassert solution(\"5 5 4\") == \"4\"\nassert solution(\"4 5 3\") == \"2\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n\") == \"1 2 3 4\"\nassert solution(\"4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n\") == \"4\"\nassert solution(\"10 20 30\\n1 2\\n5 7\\n8 9\\n2 4\\n4 6\\n6 8\\n9 10\\n3 5\\n5 7\\n8 9\\n9 10\\n4 6\\n6 8\\n8 9\\n\") == \"9\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1''') == '1 2 3'\n\nassert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3''') == '4'\n\nassert solution('''4 5 6\n1 2 0 3\n4 3\n3 2\n1 2\n1 4\n1 3''') == '3'\n\nassert solution('''3 3 3\n2 1 0\n1 2\n3 1''') == '4'\n\nassert solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1''') == '3'\n\nprint(solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1'''))\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '2'\nassert solution('5 5 5') == '0'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('3 5 3') == '2'\nprint(solution(input()))"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3 5\\n\"\n    \"4 4 0\\n\"\n    \"1 3\\n\"\n    \"3 2\\n\"\n    \"3 1\\n\"\n) == \"1\\n\"\nassert solution(\n    \"4 5 4\\n\"\n    \"2 1 0 3\\n\"\n    \"4 3\\n\"\n    \"3 2\\n\"\n    \"1 2\\n\"\n    \"1 4\\n\"\n    \"1 3\\n\"\n) == \"4\\n\"\nassert solution(\n    \"10 10 4\\n\"\n    \"2 2 1 2 4 4\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"4 4 4 4 4\\n\"\n    \"4 4 4 4 4\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n\"\n    \"2 2 2 2 2\\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n\n0 0\n\n0 0\n''') == '6'\nassert solution('''\n1 1\n\n0 1\n\n1 1\n''') == '10'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"8\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == 8\nassert solution('4 3') == 5\nassert solution('10 3') == 31"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3]) == 8\nassert solution([3, 2]) == 10\nassert solution([2, 2]) == 0\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '8'\nassert solution('7 3') == '21'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n') == 8\nassert solution('4 5\\n') == 9\nassert solution('8 5\\n') == 9\nassert solution('10 10\\n') == 9\nassert solution('1 5\\n') == 8\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"8\""
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '8'"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '7'\nassert solution('3 5') == '12'\n\n\n\n'''"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n5 5\n5 4\n4 3\n3 2\n2 1\n1 3\n1 2''') == 8\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n''') == '5'\nassert solution('''\n100 3\n1 2\n2 1\n3 1\n''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '5'\nassert solution('1 2') == '2'\nassert solution('100 3') == '100'\n\n\"\"\"\n\nn, m = list(map(int, input().split()))\ncoupons = []\nfor i in range(m):\n    coupons.append(list(map(int, input().split())))\n\nmax_money = 0\nfor i in range(m):\n    if coupons[i][0] < coupons[i][1]:\n        max_money += coupons[i][0]\n    else:\n        max_money += coupons[i][1]\n\nprint(max_money)\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n1 2\n2 3\n''') == '5'\nassert solution('''100 3\n1 2\n2 1\n3 1\n''') == '100'\nassert solution('''1 2\n1 1\n2 100\n''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 2\n2 3\n''') == '5'\nassert solution('''100 3\n1 2\n2 1\n3 1\n''') == '100'\nassert solution('''1 2\n1 1\n2 100\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '100'\nprint(solution(input()))\n\n\n\n>>> \n RESTART: /Users/rohit/Documents/Research/SDSC/fall2020/CSCI-555/Lab_2/lab2_2.py \nEnter the number of numbers in the array: 5\nEnter the numbers: 2 3 1 2\nEnter the number of coupons: 3\nEnter the coupons: 2 1 100\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array: 1\nEnter the numbers: 1\nEnter the number of coupons: 100\nEnter the coupons: 2 1\nEnter the number of numbers in the array: 2\nEnter the numbers: 1 1\nEnter the number of coupons: 2\nEnter the coupons: 1 1\nEnter the number of numbers in the array"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '5'\nassert solution('''1 2\n1 1\n2 100''') == '100'\nassert solution('''2 2\n1 2\n2 1''') == '4'\nassert solution('''1 2\n1 1\n2 100''') == '4'\nassert solution('''1 3\n1 1\n2 1''') == '3'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n1 2\n2 3''') == '5'\nassert solution('''1 2\n2 1\n3 1''') == '1'\nassert solution('''1 2\n1 1\n2 100''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2\n2 1''') == '5'\nassert solution('''1 2\n2 1\n3 100''') == '4'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n''') == '5'\n\nassert solution('''\n100 3\n1 2\n2 1\n3 1\n''') == '100'\n\nassert solution('''\n1 2\n1 1\n2 100\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input(stdin)) == \"100\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaabb\") == \"6\"\nassert solution(\"usaco\") == \"1\"\nassert solution(\"lol\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('usaco') == 1\nassert solution('lol') == 2"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''aaabb\nusaco\nlol''') == '6'\nassert solution('''usaco\naaaaa\nzzzzz''') == '2'\nassert solution('''zzzzz''') == '1'\nassert solution('''aaaaa''') == '1'\nassert solution('''l''') == '1'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"usaco\") == \"1\"\nassert solution(\"aaabb\") == \"6\"\nassert solution(\"lol\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaabb\") == 6\nassert solution(\"usaco\") == 1\nassert solution(\"lol\") == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"6\""
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''aaabb''') == '6'\nassert solution('''usaco''') == '1'\nassert solution('''lol''') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '1'\nassert solution('a') == '2'\nassert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n\n------\n\nGiven: a string s of lowercase Latin letters\nReturn: the number of occurrences of the secret message"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1\n''') == '1'\nassert solution('''4\n1\n''') == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n''') == '2'\nassert solution('''1\n''') == '1'\nassert solution('''7\n''') == '3'\nassert solution('''8\n''') == '1'\nassert solution('''4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''4\n''') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\nassert solution('1') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n\n''') == '1'\nassert solution('''4\n\n''') == '2'\nassert solution('''5\n\n''') == '3'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 3\n4\n''') == '1 2'\nassert solution('''\n2\n1 3\n4\n''') == '1 2'\n\n'''\n2\n1 3\n4\n''') == '1 2'\n'''\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\\n1 4\\n2 5\\n3 6\") == \"1 2\"\nassert solution(\n    \"4\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1 1\"\nassert solution(\n    \"5\\n1 1\\n2 3\\n3 2\\n4 4\\n4 2\") == \"2 1\"\nassert solution(\n    \"5\\n1 3\\n2 2\\n3 1\\n4 4\\n4 1\") == \"2 1\"\nassert solution(\n    \"10\\n1 2\\n2 5\\n3 4\\n5 3\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\") == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 2\n2 1\"\"\") == \"2 1\"\nassert solution(\"\"\"\n1\n2 3\n\"\"\") == \"2 3\"\nassert solution(\"\"\"\n4\n1 2\n2 3\n4 1\n1 3\"\"\") == \"1 1\"\nassert solution(\"\"\"\n1\n1 1\n3 1\n1 3\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n4\n1 2\n2 3\n4 1\n1 3\"\"\") == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    3\n    1 4\n    2 5\n    3 6\n    \"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n    2\n    1 2\n    3 1\n    \"\"\") == \"1 1\"\n\nassert solution(\"\"\"\n    2\n    1 2\n    2 1\n    \"\"\") == \"2 2\"\n\nassert solution(\"\"\"\n    2\n    1 2\n    3 1\n    \"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n    5\n    1 2 3 5\n    4 3 2 5\n    1 3 2 4\n    5 3 4 2\n    5 2 4 1\n    \"\"\") == \"1 2 2 3 5\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1 2\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"5\") == \"1 1\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1 2'\nassert solution('6') == '1 2'\nassert solution('16') == '1 2 1 3 3 1 2 1 3'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2 1'\nassert solution('1') == '1'\nassert solution('4') == '1 1'\nassert solution('5') == '1 2'\nassert solution('6') == '2 1'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 2\\n1 1\") == \"1 1\"\nassert solution(\"2 1\\n1 2\\n1 2\") == \"1 1\"\nassert solution(\"3 2\\n1 2\\n1 2\") == \"1 1\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1 2\\n2 1\\n1 2\"\nassert solution(\"4\") == \"1 2\\n2 1\\n1 2\"\nassert solution(\"5\") == \"1 2\\n2 1\\n1 2\"\nassert solution(\"2\") == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 4\n2 5''') == '1 2'\nassert solution('''3\n1 4\n2 5\n3 6''') == '1 2'\n'''"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 1 1 1\"\nassert solution(\"5\") == \"2 1 1 1 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n''') == '1'\nassert solution('''\n2\n''') == '2'\nassert solution('''\n3\n''') == '3'\nassert solution('''\n8\n''') == '4'\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1''') == '1'\nassert solution('''2''') == '2'\nassert solution('''3''') == '2 1'\nassert solution('''8''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1'\nassert solution('4') == '2 1'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"2 2 1 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"8\") == \"4\""
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nInput\n6\naabaac\n\nOutput\n2\naba aca \nInput\n8\n0rTrT022\n\nOutput\n1\n02TrrT20 \nInput\n2\naA\n\nOutput\n2\na A\n''') == '''2\na A'''\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0rTrT022\n''') == '02TrrT20'\nprint(solution('''\n0rTrT022\n'''))"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nhixx') == 'hixx'\nassert solution('8\\n0rTrT022') == '02TrrT20'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2 A'\nassert solution('1') == '1 A'\nassert solution('3') == '3 A A'\nassert solution('4') == '4 A A A'\nassert solution('5') == '5 A A A A'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8\n0rTrT022\n''') == '2\\n02TrrT20'\nassert solution('''6\naabaac\n''') == '1\\na aba ac'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'A B C', 'Wrong answer for input 3'\nassert solution('6') == 'A A A A A A', 'Wrong answer for input 6'\nassert solution('8') == '0 1 1 1 1 1 1 1', 'Wrong answer for input 8'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '1'\nassert solution('2') == '2'\nassert solution('aA') == '2'\nassert solution('0rTrT022') == '1'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz''') == '5'\nassert solution('''\nt\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '7'\nassert solution('''\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '5'\nassert solution('''\nb\na\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == '4'\nassert solution('''\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\n''') == '2'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9\nacacab\n''') == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\na**d\\n2\\nabcd\\nacbd') == '2'\nassert solution('5\\nlo*er\\n2\\nlover\\nloser') == '0'\nassert solution('3\\na*a\\n2\\naaa\\naba') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('3') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\na**d\n2\nabcd\nacbd\n\n''') == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n''') == '2'\nassert solution('''5\nlo*er\n2\nlover\nloser\n''') == '0'\nassert solution('''3\na*a\n2\naaa\naba\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nabcd\\nabcd') == '0'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nad\\na**d\\n2\\nabcd\") == \"2\"\nassert solution(\"5\\nlo*er\\n2\\nlover\\nloser\") == \"0\"\nassert solution(\"3\\n*a*\\n2\\naaa\\naba\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nabacaba\n2\naba\naba\naba\naba\n\n''') == '2'\nassert solution('''5\nabacaba\n2\naba\naba\naba\naba\n\n''') == '0'\nassert solution('''5\nabacaba\n2\naba\naba\naba\naba\n\n''') == '1'\nassert solution('''5\nabacaba\n2\naba\naba\naba\naba\n\n''') == '1'\nassert solution('''5\nabacaba\n2\naba\naba\naba\naba\n\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\na**d\n2\nabcd\nacbd\n\n''') == '2'\nassert solution('''\n5\nlo*er\n2\nlover\nloser\n\n''') == '0'\nassert solution('''\n3\na*a\n2\naaa\naba\n\n''') == '1'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4''') == '1'\nassert solution('''6 1 2\n3 8 0 1 0 0''') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1 1\n1 0 0 0 4\n''') == '1'\nassert solution('''\n6 1 2\n3 8 0 1 0 0\n''') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1\"\n\n'''\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 2\\n1 0 0 0 4') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n    ''') == '40'\nassert solution('''1 42\n    ''') == '1'\nassert solution('''6 4\n    ''') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n''') == '40'\nassert solution('''1 42\n''') == '1'\nassert solution('''6 4\n''') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"1 1\") == \"40\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\nassert solution(\"1 1e-5\") == \"100000\"\nassert solution(\"1 e-5\") == \"1\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n''') == '40'\nassert solution('''\n1 42\n''') == '1'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'Palindromic tree is better than splay tree'\nassert solution('7') == 'Palindromic tree is better than splay tree'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 1 4\n''') == '5'\nassert solution('''4\n3 1 4 1\n''') == '6'\nassert solution('''5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n3 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"5\"\nassert solution('4') == \"6\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3 1 4 1\n''') == '6'\n\nassert solution('''\n4\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 4\\n') == '5'\nassert solution('4 3 1 4 1\\n') == '11'\nassert solution('5 3 1 4 1 5\\n') == '13'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"11\"\nassert solution(\"5\") == \"16\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1 0 0 -1\") == \"1\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 -1\") == \"2\"\nassert solution(\"3 1 2 3\") == \"0\"\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput()\n\ninput"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 0 0 -1\n''') == '1'\n\nassert solution('''2\n1 -1\n''') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 0 -1') == \"1\"\nassert solution('2\\n1 -1') == \"2\"\nassert solution('3\\n-1 2 2') == \"1\"\nassert solution('5\\n0 0 0 0 0') == \"0\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('2 -1') == '2'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 0 0 -1') == '1'\nassert solution('2\\n1 -1') == '2'\nassert solution('5\\n1 0 0 1 -1') == '2'\nassert solution('1\\n1') == '0'\nassert solution('5\\n1 0 0 1 -1') == '0'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 0 0 -1\"\n) == \"1\"\nassert solution(\n    \"1 -1\"\n) == \"2\""
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 0 0\n    1 2\n    2 3''') == '2'\nassert solution('''2 1 0\n    1 2\n    2 3''') == '0'\nassert solution('''2 5 7\n    3 4\n    14 4''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"0\"\nprint(solution(input_))"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 0 0\n1 2\n2 3\n''') == '2'\n\nassert solution('''2 1 0\n1 2\n2 2\n''') == '0'\n\nassert solution('''2 5 7\n3 4\n14 4\n''') == '1'\n\nassert solution('''2 4 5\n6 4\n4 6\n''') == '0'\n\nassert solution('''2 5 7\n3 4\n14 4\n''') == '0'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('1 2') == '0'\nassert solution('2 1 0') == '1'\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0\\n1 2\\n2 3\\n\") == \"2\"\nassert solution(\"2 1 0\\n1 2\\n2 2\\n\") == \"0\"\nassert solution(\"2 5 7\\n3 4\\n14 4\\n\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"1\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 0 0\n1 2\n2 3\n\n''') == '2'\nassert solution('''2 1 0\n1 2\n2 2\n\n''') == '0'\nassert solution('''5 7\n3 4\n14 4\n\n''') == '1'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '6'\nassert solution('5 2') == '6'\n\"\"\"\n\nn, m = map(int, input().split())\ns = input()"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n0000\n3 5\n''') == '1'\nassert solution('''6 5\n0000\n1 2\n1 3\n1 4\n1 5\n''') == '2'\nassert solution('''3 6\n0000\n1 2\n1 3\n1 4\n1 5\n''') == '5'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2\\n01001\\n2 4\\n3 5\\n') == '6'"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"6 2\") == \"7\"\nassert solution(\"7 2\") == \"7\"\nassert solution(\"8 2\") == \"7\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n1 1') == '2'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '7'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '8'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"./input.txt\") == \"7\"\nassert solution(\"./input_test.txt\") == \"8\"\n\n--- Day 2: Password Philosophy ---\nYou arrive at the airport only to realize that you grabbed your North Pole Credentials instead of your passport. While these documents are extremely similar, North Pole Credentials aren't issued by a country and therefore aren't actually valid documentation for travel in most of the world.\n\nIt seems like you're not the only one having problems, though; a very long line has formed for the automatic passport scanners, and the delay could upset your travel itinerary.\n\nDue to some questionable network security, you realize you might be able to solve both of these problems at the same time.\n\nThe automatic passport scanners are slow because they're having trouble detecting which passports have all required fields. The expected fields are as follows:\n\nbyr (Birth Year)\niyr (Issue Year)\neyr (Expiration Year)\nhgt (Height)\nhcl (Hair Color)\necl (Eye Color)\npid (Passport ID)\ncid (Country ID)\nPassport data is validated in batch files (your puzzle input). Each passport is represented as a sequence of key:value pairs separated by spaces or newlines. Passports are separated by blank lines.\n\nHere is an example batch file containing four passports:\n\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in\nThe first passport is valid - all eight fields are present. The second passport is invalid - it is missing hgt (the Height field).\n\nThe third passport is interesting; the only missing field is cid, so it looks like data from North Pole Credentials, not a passport at all! Surely, nobody would mind if you made the system temporarily ignore missing cid fields. Treat this \"passport\" as valid.\n\nThe fourth passport is missing two fields, cid and byr. Missing cid is fine, but missing any other field is not, so this passport is invalid.\n\nAccording to the above rules, your improved system would report 2 valid passports.\n\nCount the number of valid passports - those that have all required fields. Treat cid as optional. In your batch file, how many passports are valid?\n\"\"\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == '6'\nassert solution(\"10 10\") == '15'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"10 2\") == \"12\"\nassert solution(\"12 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"13\""
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\nassert solution('''\n2 1 1 2 1 2\n''') == '10'\n'''\n    def solution(str):\n        l = str.split(' ')\n        def get_angles(a,b,c):\n            return (a-b)*(a-b)+(a-c)*(a-c)==180\n        l = [list(map(int,x.split(' '))) for x in l]\n        return l\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\nassert solution('1 1 1 1 1 1') == '6'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1 1 1 1 1\"\n) == \"6\"\nassert solution(\n    \"1 2 1 2 1 2\"\n) == \"13\""
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\nassert solution('1 1 1 1 2 1 2') == '13'\nassert solution('1 2 1 2 1 2') == '10'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\n'''\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1 1 1\\n') == '6'\nassert solution('1 2 1 2 1 2\\n') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1 1 1 1\n\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n\n''') == '13'\nassert solution('''\n10 30 1 1 2 2 10\n\n''') == '10'\nassert solution('''\n1 2 1 2 1 2\n\n''') == '13'\nassert solution('''\n0 1 1 2 1 2\n\n''') == '4'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6', \"First sample\"\nassert solution('''\n1 2 1 2 1 2\n''') == '13', \"Second sample\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1 1 1\\n') == '6'\nassert solution('1 2 1 2 1 2\\n') == '13'\n\"\"\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_lines) == '4'\n\n-----Hints-----\n\nUse binary search to check if the sequence contains a larger number than the first element.\n\nUse binary search to check if the sequence contains a smaller number than the last element.\n\nUse binary search to check if the sequence contains a smaller number than the first element and the next larger one.\n\nUse binary search to check if the sequence contains a smaller number than the last element and the next smaller one.\n\n\"\"\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 4\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 3 4 6 9\\n') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10\\n') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '4'\n\nassert solution('''\n4\n2 3 4 5\n''') == '4'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '9'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n2 3 4\n''') == 4\n\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == 4\n\nassert solution('''\n5\n2 3 4 6 9\n''') == 4\n\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == 4"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\nassert solution('9') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 3 4 6 9') == 4\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == 4\nassert solution('7\\n1 2 3 5 6 7 8 9 10') == 6\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'\nassert solution('10\\n2 3 4 5 6 7 8 9 10') == '9'\nassert solution('1\\n10') == '0'\nassert solution('9\\n1 2 3 4 5 6 7 8 9 10') == '9'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 3 4 6 9\n''') == '4'\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == '4'\nassert solution('''\n7\n1 1 1 2 2 3 3\n''') == '5'\nassert solution('''\n5\n2 2 2 3 3 3\n''') == '4'\nassert solution('''\n3\n1 2 3\n''') == '3'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"SURGERY COMPLETE\"\nassert solution(input()) == \"SURGERY FAILED\"\n\n\n----Hints----\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'SURGERY COMPLETE'\nassert solution('3') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'SURGERY FAILED', \"DONE\"\nassert solution('2') == 'SURGERY COMPLETE'\nassert solution('1') == 'SURGERY COMPLETE'"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'SURGERY COMPLETE'\nassert solution('3') == 'SURGERY FAILED'\n\n\"\"\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\nassert solution('''\n4\n1 2 3 4 5 6\n3 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n''') == 'SURGERY FAILED'\nassert solution('''\n2\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\nassert solution('''\n3\n2\n1 2 3\n4 5\n6 7\n''') == 'SURGERY FAILED'\n\nfrom collections import deque"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n\nassert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == \"IR\"\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == \"SURGERY COMPLETE\"\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == '''SURGERY COMPLETE\nIR\nR SrS\nS rr\nI lldll\nDONE'''\n\nassert solution('''\n4\n1 2 3 4 5 6 E\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == '''SURGERY FAILED'''"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY COMPLETE\\n'\nassert solution('2\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY FAILED'\nassert solution('2\\n3 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('6 2 1') == '1 2 3 4 5 6'\nassert solution('6 2 1') == '1 2 3 4 5 6'\nassert solution('10 10 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('10 10 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 2 3 \nassert solution() == \"6 5 8 3 4 1 9 2 7\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2 3\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 2 3'\nassert solution() == '1 2 3'\n\n'''\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == '1 2 3'\n\nassert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'\n\nassert solution('1 2 3') == '1 2 3'\n\nassert solution('5 6') == '5 6'\n\nassert solution('10 100') == '10 100'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2 1\n4 2 1''') == '2 1 3 4'\n\nassert solution('''6 2 5\n1 2 3 4 5 6''') == '3 1 4 2 5 6 7 8'\n\nassert solution('''5 2 1\n4 2 1''') == '4 3 2 1 5'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''9 2 5\n''') == '6 5 8 3 4 1 9 2 7'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\", \"Should return 1, 2, 3\"\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\", \"Should return 6, 5, 8, 3, 4, 1, 9, 2, 7\"\nassert solution(\"3 2 1\") == \"1 2 3\", \"Should return 1, 2, 3\"\nassert solution(\"4 2 1\") == \"1 2 3 4\", \"Should return 1, 2, 3, 4\"\nassert solution(\"8 2 1\") == \"1 2 3 4 5 6 7 8\", \"Should return 1, 2, 3, 4, 5, 6, 7, 8\""
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 2 1''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''3 2 1''') == '1 2 3 \n''')\nassert solution('''5 2 1''') == '2 1 5 3 4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '3'\nassert solution('3 2') == '3'\nassert solution('10 3') == '10'\nassert solution('1 2') == '2'\nassert solution('10 1') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '3'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 3\n1 2 3\n''') == '1'\nassert solution('''\n1 2\n1\n''') == '1'\nassert solution('''\n10 10\n
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n3 2 1\n''') == '3'\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '2'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bbbwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(example_input_stdin) == '5'\nassert solution(input_data) == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\nassert solution('bb') == '0'\nassert solution('') == '0'\nassert solution('wwwwwwwwwww') == '5'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\n----Hint----\n\nSolving a zebra problem with two operations is simply the same problem with one operation.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, s: str) -> str:\n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '5'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10'\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == '7'\n'''"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10', 'First example'\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == '7', 'Second example'\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nstart_row, start_col = map(int, input().split())\n\nx, y = map(int, input().split())\n\nx_move = 0\ny_move = 0\n\nvisited = [[0] * m for _ in range(n)]\nvisited[start_row][start_col] = 1\n\nwhile x_move < x and y_move < y:\n    visited[start_row][start_col] = 1\n    if x_move > 0 and visited[start_row][start_col - 1] == 0:\n        visited[start_row][start_col - 1] = 1\n        x_move -= 1\n    if x_move < x and visited[start_row][start_col + 1] == 0:\n        visited[start_row][start_col + 1] = 1\n        x_move += 1\n    if y_move > 0 and visited[start_row - 1][start_col] == 0:\n        visited[start_row - 1][start_col] = 1\n        y_move -= 1\n    if y_move < y and visited[start_row + 1][start_col] == 0:\n        visited[start_row + 1][start_col] = 1\n        y_move += 1"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....') == \"10\"\nassert solution('10 10\\n3 2\\n0 1\\n....\\n..*.\\n....\\n....') == \"7\"\nassert solution('3 5\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....') == \"7\"\nassert solution('4 4\\n3 2\\n0 1\\n....\\n..*.\\n....\\n....') == \"7\"\nassert solution('3 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....') == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5') == '10'\nassert solution('4 4') == '7'\n\"\"\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"10\"\n\n\"\"\"\nimport math\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nstart_x, start_y = map(int, input().split())\nx, y = map(int, input().split())\n\nvisited = [[-1] * m for _ in range(n)]\n\ndx = [1, -1, 0, 0]\ndy = [0, 0, 1, -1]\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '10'\nassert solution('''4 4\n2 2\n0 1\n....\n..*.\n....\n....\n\n''') == '7'"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '10'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input) == \"10\"\nassert solution(input) == \"100\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10'\n\nassert solution('''\n4 5\n2 2\n0 1\n***\n\n+**.\n\n+***\n''') == '7'\n\n'''\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10', 'First'\n\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == '7', 'Second'\n\n'''"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 5\n''') == '3'\n\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == '2'"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 4 2 2''') == '2'\nassert solution('''6\n1 2 4 4 4 9''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4 2 2\") == \"2\"\nassert solution(\"6\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 4\n''') == '2'\n\nassert solution('''6\n1 2 4 4 4 9\n''') == '2'\n\nassert solution('''8\n1 2 4 4 4 9\n''') == '2'\n\nassert solution('''12\n1 2 4 4 4 9\n''') == '2'\n\nassert solution('''20\n1 2 4 4 4 9\n''') == '3'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 4 2 2') == '2'\nassert solution('6\\n1 2 4 4 4 9') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3 1\naba\n''') == 7\n\nassert solution('''4 1 1\naaaa\n''') == 12\n\nassert solution('''4 10 1\naaaa\n''') == 12\n\nprint('Ready, hit RETURN to continue the test')\ninput()"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == str(7)\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'\nprint(solution(input()))"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_data) == output_data"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3 1\naba\n\n''') == '7'\nassert solution('''4 1 1\nabcd\n\n''') == '4'\nassert solution('''4 10 1\naaaa\n\n''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1\\naba\") == '7'\nassert solution(\"4 1 1\\nabcd\") == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '3 3 1\\n'\n    'aba\\n'\n    ) == '7'\n\nassert solution(\n    '4 1 1\\n'\n    'abcd\\n'\n    ) == '4'\n\nassert solution(\n    '4 10 1\\n'\n    'aaaa\\n'\n    ) == '12'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '2'\nassert solution('5 3') == '0'\nassert solution('1 1 2 1 2 2') == '2'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('5 10') == '3'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 4') == '1'\nassert solution('4 2') == '1'\nassert solution('5 1') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\n\"\"\"\n\nn, k = map(int, input().split())\nc = 1\nd = 1\n\nwhile d <= n:\n    c *= d\n    d += 1"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\"4 2\", \"2 2 2 2\"]) == \"8\"\nassert solution([\"4 -3\", \"3 -6 -3 12\"]) == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 2\\n\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\\n\") == \"3\"\n\ns = input()\n\nwhile s!= '-1':\n    print(solution(s))\n    s = input()\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 2 2 2\\n') == '8'\nassert solution('4 -3\\n3 -6 -3 12\\n') == '3'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n2 2 2 2\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n2 2 2 2\n''') == '8'\nassert solution('''\n4 -3\n3 -6 -3 12\n''') == '3'\n\nprint('Congratulations! Your solution is correct.')"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == '8'\nassert solution(\"4 -3\") == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"8\"\nassert solution(\"3 -6 -3 12\") == \"3\"\nassert solution(\"10 -10 -10 10 10 -10 10 10\") == \"3\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5 3 1 8\n    a A\n    A aa\n    aa AA\n    AA a\n''') == '11'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\nassert solution(\"7 3 4 1 5 6 8\") == \"8\"\n\nstdin = \"\"\"\n2 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n\"\"\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5 3 1 8\n    a A\n    A aa\n    aa AA\n    AA a\n    ''') == '11'\n\nassert solution('''4 2 1 300 1000\n    a A\n    A aa\n    aa AA\n    AA a\n    ''') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5 3 1 8\na A\nA aa\naa AA\nAA a\n''') == \"11\"\nassert solution('''4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n''') == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 5 3 1 8\"\n) == \"11\"\nassert solution(\n    \"4 2 1 300 1000\"\n) == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(['3', '5', '3', '1', '8']) == '11'\nassert solution(['4', '2', '1', '300', '1000']) == '5'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == \"YES\"\nassert solution('5') == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'YES'\nassert solution('2 2 2 1') == 'YES'\nassert solution('3 4 5 6') == 'NO'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 1 5 2 1\n''') == \"YES\"\nassert solution('''\n6\n1 1 5 3 2 1\n''') == \"NO\"\nassert solution('''\n6\n1 1 5 2 1\n''') == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1 4\\n\") == \"YES\"\nassert solution(\"4\\n1 1 1 4\\n\") == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 4\\n\") == \"YES\"\nassert solution(\"5\\n1 1 5 2 1\\n\") == \"NO\"\n\n\"\"\"\n\nfrom math import floor, sqrt"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('5') == 'YES'\nassert solution('5 2 1 1 3 1 2') == 'YES'\nassert solution('5 2 1 1 4 3 1 2') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 4') == \"YES\"\nassert solution('5 1 5 2 1') == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 4') == 'YES'\nassert solution('5 1 5 2 1') == 'NO'\n\n\n\n'''"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n10 5 0 -5 -10''') == '-15'\nassert solution('''4\n1 1 1 1''') == '1'\nassert solution('''2\n900 1000''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == '-15'\nassert solution(\"3\") == '-5'\nassert solution(\"2\") == '1100'\nassert solution(\"4\") == '1100'\nassert solution(\"10\") == '-15'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n10 5 0 -5 -10') == '-15'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('3\\n5 1 -5') == '-5'\nassert solution('2\\n900 1000') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''2\n900 1000\n''') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n10 5 0 -5 -10''') == '-15'\nassert solution('''4\n1 1 1 1''') == '1'\nassert solution('''2\n900 1000''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''2\n900 1000\n''') == '1100'\n\n-------------------------------------------------------------------------------------------------------------------------\n15. Write an algorithm to print all permutations of a given string.\n\nWrite an algorithm to print all permutations of a given string.\n\n\n-----Input-----\n\nThe first line contains a single string, which is a permutation of lowercase English letters.\n\nThe second line contains an integer, which is the length of the permutation.\n\nThe third line contains the string, which is a permutation of lowercase English letters.\n\nThe fourth line contains an integer, which is the length of the permutation.\n\n\n-----Output-----\n\nPrint all permutations of the given string.\n\nPrint all permutations of the given string.\n\n\n-----Examples-----\nInput\nstring = \"abc\"\nlength = 3\nstring = \"abc\"\nlength = 3\nOutput\nab\nac\nbc\n\nInput\nstring = \"sunday\"\nlength = 4\nstring = \"sunday\"\nlength = 4\nOutput\nsun\nun\nde\nsd\n\nInput\nstring = \"sunday\"\nlength = 2\nstring = \"sunday\"\nlength = 2\nOutput\ns\nu\nn\ns\nd\n\nInput\nstring = \"abcd\"\nlength = 4\nstring = \"abcd\"\nlength = 4\nOutput\nabcd\nabcd\nabcd\nabcd\n\nInput\nstring = \"sunday\"\nlength = 4\nstring = \"sunday\"\nlength = 4\nOutput\nsun\nun\nde\nsd\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\nsd\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring = \"sunday\"\nlength = 3\nstring = \"sunday\"\nlength = 3\nOutput\nsu\nnd\nyu\n\nInput\nstring = \"xyz\"\nlength = 3\nstring = \"xyz\"\nlength = 3\nOutput\nx\ny\nz\n\nInput\nstring ="
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''3\n5 1 -5\n''') == '-5'\nassert solution('''2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('3') == '-5'\nassert solution('2') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''4\n1 1 1 1\n''') == '1'\nassert solution('''2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\nassert solution('6') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution('''\n1 2\n2 3\n1 3\n2 4\n2 5\n''') == \"NO\"\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES'\nassert solution('3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == 'YES'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == 'NO'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n\") == \"YES\"\n\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n\") == \"NO\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"5 6\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\nassert solution('''\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n2 3\n''') == \"YES\"\nassert solution('''\n3\n1 2\n2 3\n''') == \"NO\"\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == \"YES\"\n'''\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"1 2 4\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"1 2 4 5 7 8 9\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('2 6') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 2 3') == '1'\nassert solution('2\\n2 6') == '0'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution(stdin='1 2 3\\n') == '1'\nassert solution(stdin='2 6\\n') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 3 4 5\n''') == '0'\n\nassert solution('''\n6\n1 1 2 2 2 3\n''') == '1'\n\nassert solution('''\n9\n1 2 3 4 5 6 7 8 9\n''') == '0'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 2 3\") == \"1\"\nassert solution(\"2\\n2 6\") == \"0\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n4') == '0'\nassert solution('3\\n1 2 3') == '1'\nassert solution('3\\n2 6 3') == '1'\nassert solution('4\\n3 4 5 2') == '0'\nassert solution('6\\n1 2 3 4 5 6') == '0'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2\\n\") == \"0\"\nassert solution(\"2 1 3\\n\") == \"1\"\nassert solution(\"3 1 2\\n\") == \"1\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\naab\\nccb') == '6'\nassert solution('6\\nccb\\nccb\\nccb\\nccb\\nccb') == '5'\nassert solution('4\\nab\\ncd\\nef') == '7'\nassert solution('1\\na') == '1'\nassert solution('10\\nabd\\n') == '16'\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\naab\nccb\n''') == '6'\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(3, 'aab', 'ccb') == 6\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '3'\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\n'''\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\naab\nccb\n''') == '6'\nassert solution('''2\naa\nbb''') == '2'\n\n'''\n\nstdin = input()\na_counter, b_counter = 0, 0\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\nassert solution('3') == '6'\nassert solution('3') == '6'\n'''\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1\\n') == 'YES\\n'\nassert solution('100 8 5\\n1 2 3 4 5 6 7\\n') == 'NO\\n'\nassert solution('100 100 7\\n1 2 3 4 5 6 7\\n') == 'NO\\n'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"10 8 5\\n1 2 3 4 5 6 7\") == \"NO\"\nassert solution(\"100 100 7\\n1 2 3 4 5 6 7\") == \"NO\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 5 2 1 1 2 1\\n1 2 3 4 5 6 7') == 'YES'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution() == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1\\n') == 'YES'\nassert solution('100 8 5\\n1 2 3 4 5 6 7\\n') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5 2 1 2 1\") == \"YES\"\nassert solution(\"100 8 5\") == \"NO\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''100 100 5\n5 2 1 2 1''') == 'YES'\nassert solution('''100 8 5\n5 2 1 2 1''') == 'NO'\nassert solution('''10 10 7\n2 1 2 1 1 2 1''') == 'YES'\nassert solution('''10 10 7\n1 2 1 2 1 2 1''') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == 'YES'\nprint(solution(input))"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100 100 5\n5 2 1 2 1\n''') == 'YES'\nassert solution('''100 8 5\n5 2 1 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n2 2 4 4\n1 1 1 3\n4 4 4 1\n2 1 2 2\n2 1 2 2''') == \"9\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"4\"\nassert solution(\"7 6\") == \"3\"\nassert solution
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n4 2 5 10') == '4'\nassert solution('10 2\\n4 1 5 10') == '4'\n\n'''"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 4\n\n\n[Image]"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 2 1\n3 4 2 5\n1 3 2 5\n''') == '4'\nassert solution('''\n2 2\n1 2 1\n3 4 2 5\n1 3 2 5\n''') == '5'\nassert solution('''\n2 2\n1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\n''') == '4'\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\n''') == '3'\nassert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution(\n'''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\n''') == '3'\nassert solution(\n'''\n10 10\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n26 27 28 29 30\n31 32 33 34 35\n36 37 38 39 40\n41 42 43 44 45\n46 47 48 49 50\n51 52 53 54 55\n56 57 58 59 60\n61 62 63 64 65\n66 67 68 69 70\n71 72 73 74 75\n76 77 78 79 80\n81 82 83 84 85\n86 87 88 89 90\n91 92 93 94 95\n96 97 98 99 100\n\n''') == '36'\n'''\nIn this example, we are able to paint the whole square in white, i.e. to paint all rectangles.\n\n    \nWe can paint the top-left rectangle as white:\n\n'''\n\n'''\n\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the bottom-right rectangle as white.\n\n\nWe can paint the bottom-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-left rectangle as white, and we are able to paint the bottom-right rectangle as white.\n\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-right rectangle as white, and we are able to paint the top-right rectangle as white.\n\n\nWe can paint the top-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-left rectangle as white.\n\n\nWe can paint the top-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the bottom-right rectangle as white.\n\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-left rectangle as white.\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the top-left rectangle as white.\n\nWe can paint the bottom-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-left rectangle as white.\n\nWe can paint the bottom-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-left rectangle as white, and we are able to paint the top-left rectangle as white.\n\n\nWe can paint the top-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-left rectangle as white.\n\n\nWe can paint the top-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-right rectangle as white, and we are able to paint the top-left rectangle as white.\n\n\nWe can paint the bottom-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\n\nWe can paint the top-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the top-left rectangle as white.\n\n\nWe can paint the top-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the bottom-right rectangle as white.\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-left rectangle as white.\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\n\nWe can paint the top-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the bottom-right rectangle as white.\n\n\nWe can paint the bottom-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\nWe can paint the top-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-right rectangle as white.\n\n\nWe can paint the top-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-right rectangle as white, and we are able to paint the top-left rectangle as white.\n\nWe can paint the top-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-right rectangle as white, and we are able to paint the bottom-left rectangle as white.\n\nWe can paint the top-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the top-left rectangle as white, and we are able to paint the top-right rectangle as white.\n\n\nWe can paint the bottom-right rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-right rectangle as white, and we are able to paint the top-left rectangle as white.\n\n\nWe can paint the bottom-left rectangle as white:\n\n'''\n'''\nIn this example, we are able to paint the bottom-left rectangle as white, and we are able to paint the top-left"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 6\") == \"3\"\nassert solution(\"10 2\") == \"4\"\nassert solution(\"9 9\") == \"0\""
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n1 4 10 5\n1 4 10 5''') == '4'\nassert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\n\n'''\n\n----------------------------\n\nInput:\n\n<input>\n\nOutput:\n\n<output>\n\n'''"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n') == 'no\\nyes\\nno\\nno\\nyes\\n'\n\n--------------------------------------------------------------------------------------------------------------------\n\nIn order to solve this problem, you'll need to come up with a solution,\nwhich is an efficient algorithm that can do the following:\n\nDivide the problem into subproblems.\nYour solution should return the answer for each subproblem.\n\nYour solution will be tested by the provided Test class.\n\n'''"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'yes\\n'\nassert solution() == 'no\\n'\nassert solution() == 'no\\n'\nassert solution() == 'yes\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 2\\n1 2 3') == 'yes'\nassert solution('2\\n3 2\\n1 2 3') == 'no'\n\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if k in a:\n        print('yes')\n    else:\n        print('no')\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n'''\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    5 3\n    1 5 2 6 1\n    1 6\n    6\n    3 2\n    1 2 3\n    4 3\n    3 1 2 3\n    10 3\n    1 2 3 4 5 6 7 8 9 10\n    ''') == 'yes\\n'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\n\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"yes\"\nassert solution(\"5 1\") == \"no\"\nassert solution(\"5 2\") == \"yes\"\nassert solution(\"5 3\") == \"no\"\nassert solution(\"5 4\") == \"no\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'no'\nassert solution('1\\n10 2\\n2 2') == 'yes'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"1 4\") == \"5 2 0 1\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n\n\n'''\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\n1 3\n2 5\n4 5''') == '2'\nassert solution('''4 2\n1 4\n2 4\n3 4''') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == '2'\nassert solution('5 3') == '1 0 2 1 0'\nassert solution('4 2') == '3'\n\n'''\nfrom itertools import combinations\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 3\n2 5\n4 5''') == '2'\nassert solution('''4 2\n1 4\n2 4\n3 4\n5 4''') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n\n\n'''\n\nn, m = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\narr_res = []\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 4\") == \"3\"\nassert solution(\"5 3\\n1 3\\n2 5\\n4 5\") == \"2\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"1 0 1\\n\"\n    \"2 1 3 3\\n\"\n    \"2 1 2 2\\n\"\n    \"2 2 3 1\\n\"\n) == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == 'YES'\nassert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'NO'\nassert solution('''\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"YES\"\n\n\"\"\"\nfrom itertools import combinations\nn, m = map(int, input().split())\ndoors = list(map(int, input().split()))\nnum = list(range(1, n+1))\n\nn_comb = combinations(num, m)\n\nfor c in n_comb:\n    print(c)\n    for i in c:\n        for j in c:\n            if i!= j:\n                if doors[i-1] == 0 and doors[j-1] == 0:\n                    continue\n                else:\n                    if doors[i-1] == 1 and doors[j-1] == 1:\n                        continue\n                    else:\n                        break\n    if doors == [1, 1, 1, 1, 1]:\n        return \"YES\"\nprint(\"NO\")\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3\\n2 1 2 3\\n2 1 2 3\\n2 2 3\\n') == 'NO'\n\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n') == 'YES'\n\nassert solution('3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\\n') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3\\n2 1 2\\n2 3\") == \"YES\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\") == \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('(((#)((#)') == '1'\nassert solution('#') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('#') == '-1'\nassert solution('#') == '-1'\nassert solution('(())(#)') == '2'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"(()(#(#)\") == '1'\nassert solution(\"()(((#)\") == '2'\nassert solution(\"#)()\") == '-1'\nassert solution
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('(#)') == '-1'\nassert solution('(#((#(#))') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"(((#))\") == \"1\"\nassert solution(\"#\") == \"-1\"\nassert solution(\"(#)\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"(()\") == \"1\"\nassert solution(\"(()))\") == \"1\"\nassert solution(\"(()(()\") == \"2\"\nassert solution(\"(()(()))\") == \"2\"\nassert solution(\"()(()\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('(()((#((#(#)') == '2'\nassert solution('#') == '-1'\nassert solution('(()((#(#)') == '2'\nassert solution('(((#)') == '1'\nassert solution('#') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#())') == '2'\nassert solution('(#)') == '-1'\nassert solution('#') == '-1'\nassert solution('(((#)(#)') == '2'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''(((#)((#)\n''') == '1')\nassert solution('''()((#((#(#)\n''') == '2')\nassert solution('''#\n''') == '-1')\nassert solution('''(#)\n''') == '-1'\nassert solution('''(()#()\n''') == '2'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == 'xoxox'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"xoxox\"\nassert solution(\"4 0\") == \"xxxx\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\nxoxox\nxoxox\n''') == '-1'\nassert solution('''4 0\nxoxox\nxoxox\n''') == '16'\nassert solution('''0 4\nxoxox\nxoxox\n''') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"4 0\") == \"16\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\n1''') == '1'\nassert solution('''0 1\n0''') == '0'\nassert solution('''1 0\n1''') == '0'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\nassert solution(\"0 4\") == \"-16\"\nassert solution(\"20 4\") == \"-1\"\nassert solution(\"50 3\") == \"-1\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == '-1'\nassert solution(\"4 0\") == '16'\nassert solution(\"0 4\") == '-16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\nxoxox\n''') == '-1'\nassert solution('''4 0\nooo\n''') == '16'\nassert solution('''5 1\noooxx\n''') == '8'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 3 3\") == \"12\"\nassert solution(\"4 4 4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '17'\n\"\"\"\nimport math\nimport functools"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 1''') == '17'\nassert solution('''1 1 1''') == '17'\nassert solution('''1 2 1''') == '17'\nassert solution('''1 1 1''') == '17'\nassert solution('''1 1 1''') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 2') == '4'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1 1\n''') == '17'\nassert solution('''1 1 1\nb\n''') == '8'\nassert solution('''1 1 1\na\n''') == '8'\nassert solution('''1 1 1\na\n''') == '8'\nassert solution('''1 1 1\nb\n''') == '8'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 2 1') == '10'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"3 5 3\") == \"10\"\nassert solution(\"2 3 5\") == \"9\"\nassert solution(\"2 4 7\") == \"8\"\nassert solution(\"2 2 3\") == \"9\""
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1 1\n''') == '17'\nassert solution('''5 3 1\n''') == '27'\n''')\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == \"17\"\nassert solution(\"2 2 3\") == \"2\"\nassert solution(\"3 3 3\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 4') == '3 2 3'\n\n\"\"\"\n\n\nimport math\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 1\\n2 1 2') == '2 2 2'\nassert solution('2 2\\n1 2') == '2 3'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"2 2 2\"\nassert solution(\"2 2\") == \"2 2 2\"\nassert solution(\"4 5\") == \"4 3 2 2\"\nassert solution(\"3 3\") == \"4 2 2\"\nassert solution(\"2 4\") == \"2 2 2\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3]) == \"2 2 2\"\nassert solution([2, 2]) == \"2 2 2\"\nassert solution([2, 1]) == \"2 2 2\"\nassert solution([2, 2]) == \"2 2 2\"\nassert solution([3, 4]) == \"3 2 3\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\n1 2\n''') == '2 2 2'\nassert solution('''\n1 1\n2 2\n''') == '2 2 2'\nassert solution('''\n2 2\n1 2\n''') == '2 2 2'\nassert solution('''\n2 2\n1 2\n''') == '2 2 2'\nassert solution('''\n3 4\n1 2\n3 4\n''') == '3 3 3'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('1 2') == '2 2 2'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO('''\n2 3\n1 2 1\n2 1 2\n\n2 2\n1 2\n3 4\n\n''')\nimport math\nimport functools\nfrom collections import defaultdict\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 1\\n2 1 2\\n') == '2 2 2'\nassert solution('2 2\\n1 2\\n3 4\\n') == '2 3'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2, 3]) == '2 2 2'\nassert solution([2, 2]) == '2 2 2'\nassert solution([2, 2]) == '2 2 2'\nassert solution([2, 2]) == '2 2 2'\n\nassert solution([2, 2]) == '2 2 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 2\n2 1\n''') == '2 2 2 \nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2 \n''')"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '2 2 2\\n2 2 2\\n'\nassert solution('2 2') == '2 2 2\\n2 2 2\\n'\nassert solution('2 1') == '2 2 2\\n2 2 2\\n'\nassert solution('2 2') == '2 2 2\\n2 2 2\\n'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"332748119\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"2 3\") == \"160955686\"\nassert solution(\"3 3\") == \"974061117\"\n\n\"\"\"\nimport math\nimport random\nimport re\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n1''') == '332748119'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\n\nassert solution('''\n1 2\n1\n1\n''') == '3'\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n2 1''') == '332748119'\n\nassert solution('''2 2\n0 1\n2 1''') == '160955686'\n\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1\\n2 1\") == \"332748119\"\nassert solution(\"1 2\\n1\\n1\") == \"3\"\nassert solution(\"3 3\\n0 1 1\\n4 3 5\") == \"160955686\""
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"332748119\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input) == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1\n0 1\n2 1\n\n''') == '332748119'\nassert solution('''2 1\n0 1\n2 1\n\n''') == '332748119'\nassert solution('''1 2\n1\n1\n\n''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n\n''') == '160955686'\nassert solution('''3 1\n0 1\n2 1\n\n''') == '3'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '3'\nassert solution('3 3') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '11'\nassert solution('3 1 5 2 6') == '11'\nassert solution('2 3 9 1') == '3'\nassert solution('2 3 9 1 2') == '3'\nassert solution('2 3 9 1 2 3') == '3'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '11'\nassert solution('5') == '102'\nassert solution('5') == '11'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '11'\n\n'''"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 1 5 2 6\") == \"11\"\nassert solution(\"5\\n1 100 101 100 1\") == \"102\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1 5 2 6\\n') == '11'\nassert solution('5\\n1 2 3 4 5\\n') == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('5\\n1 100 101 100 1') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('5\\n1 100 101 100 1') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('5\\n1 100 101 100 1') == '102'\nassert solution('1\\n1 2 3 4 5') == '5'\nassert solution('5\\n1 100 101 100 1') == '100'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3 1 5 2 6\\n') == '11'\nassert solution('5\\n1 2 3 4 5\\n') == '6'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 1 5 2 6\n\n''') == '11'\n\nassert solution('''5\n1 2 3 4 5\n\n''') == '6'\n\nprint(solution('''5\n1 2 3 4 5\n\n'''))"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''14 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6''') == 'Yes'\nassert solution('''3 1\n1 3\n2 3''') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n''') == \"Yes\"\n\n'''\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 3\\n2 3') == 'No'\nassert solution('5 1\\n1 2\\n2 3\\n4 3\\n5 4\\n6 5\\n7 6\\n8 7\\n9 8') == 'Yes'\nassert solution('4 1\\n1 4\\n2 4\\n3 4\\n4 6') == 'No'\n\n'''"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n''') == \"Yes\", \"First example\"\nassert solution('''\n1 2\n1 3\n2 3\n''') == \"No\", \"Second example\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 1\n5 2\n7 1\n4 4\n6 5\n9 5\n2 7\n5 7\n6 5\n10 4\n4 5\n5 5\n6 5\n''') == 'Yes'\nassert solution('''\n4 1\n1 4\n2 4\n3 4\n4 3\n''') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"No\"\nassert solution(\"6 1\") == \"Yes\"\nassert solution(\"5 1\") == \"Yes\"\nassert solution(\"10 1\") == \"Yes\"\nassert solution(\"12 1\") == \"Yes\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6') == 'Yes'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'No'\nassert solution('7 2') == 'Yes'\n\n\n\"\"\""
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('4 5') == '2'\nassert solution('3 5') == '0'\nassert solution('3 1') == '-1'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('3 5') == '0'\nassert solution('2 1') == '-1'\nassert solution('3 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n.#.\n###\n##.\n\n''') == '1'\nassert solution('''\n4 2\n##\n.#\n##\n##\n\n''') == '0'\nassert solution('''\n4 5\n.....\n.....\n.....\n\n''') == '0'\nassert solution('''\n3 5\n....#\n####.\n.###.\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '0'\nassert solution('1 1') == '-1'\nassert solution('4 5') == '0'\nassert solution('3 5') == '0'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('3 5') == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3 3\n.#.\n###\n##.\n    \"\"\") == '1'\n\n    assert solution(\n    \"\"\"\n4 2\n##.\n.#\n##\n    \"\"\") == '-1'\n\n    assert solution(\n    \"\"\"\n3 5\n.....\n.....\n.....\n    \"\"\") == '0'\n\n    assert solution(\n    \"\"\"\n2 1\n.\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"0\", \"Should be zero\"\nassert solution(\"4 5\") == \"2\", \"Should be two\"\nassert solution(\"3 5\") == \"1\", \"Should be one\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 0 2 3\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n''') == 'YES'\nassert solution('''5 6\n6 5 6 2 2\n''') == 'NO'\n\n\n'''\n4 3\n1 0 2 3\n\nYES\n1 2 2 3\n\n3 5\n0 0 0\n\n5 6\n6 5 6 2 2\n\nNO\n'''"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution(\"2 10 5 4\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"3 5\") == \"YES\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"3 10\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"2 1 2 2\") == \"YES\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'YES'\nassert solution() == 'YES'\nassert solution() == 'YES'\nassert solution() == 'YES'\n\nassert solution() == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('2 5') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('5 6') == 'YES'\nassert solution('10 10') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n1 0 2 3\n\n''') == 'YES'\n\nassert solution('''3 5\n1 2 3\n\n''') == 'YES'\n\nassert solution('''5 6\n1 2 3\n\n''') == 'NO'\n\nassert solution('''3 5\n0 0 0\n\n''') == 'YES'\n\nassert solution('''3 5\n1 0 1\n\n''') == 'NO'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"YES\\n10 10 10\", \"First\"\nassert solution(\"5 6\") == \"YES\\n5 4 2\", \"Second\"\nassert solution(\"3 5\") == \"NO\", \"Third\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('3 10') == 'YES'\nassert solution('5 6') == 'NO'\nassert solution('3 5') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 1', \"First\"\nassert solution('1') == '1 1', \"Second\"\nassert solution('4') == '3 2 1', \"Third\"\nassert solution('5') == '3 2 1', \"Fourth\"\nassert solution('6') == '3 2 1', \"Fifth\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4 3 6 2\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 1 2 3\n''') == '3 3 2'\nassert solution('''5\n2 3 4 5 4 2 7 8 1\n''') == '5 5 5 5 4 5 2 7 8 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read().rstrip()\nprint(solution(open(0)))\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2 3 4''') == '1 3 4'\nassert solution('''1\n42''') == '42'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '2 1'\nassert solution('4') == '3 1'\nassert solution('5') == '5 1 2 3 1 2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"3 2 1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 1\n1 2\n1 3\n2 1\n3 1''') == '6'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2''') == '6'\nassert solution('''3\n1 1\n1 2\n1 3''') == '3'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 1\n1 2\n1 3\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n2 1\n2 2\n3 1\n3 2\n\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5\n1 1\n2 1\n2 2\n3 1\n3 2\n3 3\n\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3\\n') == '3'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\n\n---"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 2\n1 3\n\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3\n1 1\n2 1\n3 1\n\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4\n2 1\n2 2\n3 1\n3 2\n\n\"\"\") == \"6\""
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n\n4\n2 1\n2 2\n3 1\n3 2\n\n5\n3 1\n3 2\n3 3\n''') == '6'\nprint(solution('''4\n2 1\n2 2\n3 1\n3 2\n\n5\n3 1\n3 2\n3 3\n'''))"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3 3'\nassert solution('5') == '3 3'\n\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4 4\"\nassert solution(\"6\") == \"4 4\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n.E.\nE.E\n.E.\n''') == '-1'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == \"3 3\"\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        a = stdin.splitlines()\n        x = 0\n        for i in a:\n            x = max(x, len(i.split(\".\")))\n        return x\n'''\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n.E.E.\n.E.E.\n''') == '1 1'\nassert solution('''\nE.E.E.\nE.E.E.\n''') == '1 1'\nassert solution('''\nEEE\nE..\nE.E.\n''') == '-1'\nassert solution('''\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == '3 3'\nassert solution('''\n3\nEE.EE\nE.EE.\nE...E\n''') == '1 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE''') == '3 3'\n\nassert solution('''5\nEEE\nE..\nE.E\nEE.E\nEE.EE''') == '-1'\n'''"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n.E.\\nE.E\\nE...E\\n.EE.E\\nEE.EE') == '2 3'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n.E.\\ne.E.\\n.E.\\n\") == \"1 1\"\nassert solution(\"3\\nEEE\\ne.E.\\nE...E\\n.EE.E\\nEE.EE\\n\") == \"4 4\"\n\n'''\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n.E.\nE..\nE.E''') == '-1'\nassert solution('''3\nEEE\nE..\nE.E''') == '3 3'\nassert solution('''5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE''') == '4 4'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == '3 3'\nassert solution('''\n3\nEE.EE\nE.EE.\nE...E\n''') == '-1'\nassert solution('''\n5\nEEE\nE..\nE.E\nEE.E\nEE.EE\n''') == '3 3'\nassert solution('''\n3\nEE.EE\nE.EE.\nE...E\n''') == '-1'\n'''"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 10\") == \"32\"\nassert solution(\"10 2\") == \"32\"\nassert solution(\"10 3\") == \"31\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 10\n-1 -1 -1 -1 -1\n''') == '32'\nassert solution('''\n    1\n''') == '1'\nassert solution('''\n    10\n''') == '10'\nassert solution('''\n    10 2\n''') == '10'\nassert solution('''\n    20 10\n''') == '0'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n') == '2'\nassert solution('3\\n3\\n') == '3'\nassert solution('10\\n5\\n') == '31'\nassert solution('10\\n10\\n') == '10'\nassert solution('10\\n2\\n') == '10'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10\\n-1 -1 -1 -1 -1') == '32'\nassert solution('10 2\\n10 -1 2 2 2 2 2 2 -1 10') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"32\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"5 10\") == \"1\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"5 10\") == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10') == '32'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1 2''') == '3'\nassert solution('''4 2 3''') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\nassert solution(\"5 2 4\") == \"49\"\nassert solution(\"6 2 4\") == \"31\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3,1,2]) == \"3\"\nassert solution([4,2,3]) == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 2\n1 1 1\n''') == '3'\nassert solution('''4 2 3\n1 2 4 8\n''') == '79'\nassert solution('''5 2 3\n1 2 3 4 8\n''') == '73'\nassert solution('''6 2 3\n1 2 3 4 8 9\n''') == '65'\nassert solution('''7 2 3\n1 2 3 4 8 9 0\n''') == '65'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 1 2\n1 1 1\n''') == '3'\nassert solution('''4 2 3\n1 2 4 8\n''') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\nassert solution('4 2 3') == '79'\nassert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2 3\n1 2 4 8\n\"\"\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 2') == '3', \"3\"\nassert solution('4 2 3') == '79', \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1\\n2 2 4') == '3'\nassert solution('4 2 3\\n1 2 4 8') == '79'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '7'\nassert solution('3 1') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == '7'\nassert solution('3 2') == '7'\nassert solution('6 4') == '7'\nassert solution('1 2') == '7'\nassert solution('1 3') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3''') == '7'\nassert solution('''3 3''') == '7'\n'''\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"1 1\") == \"7 7 7\"\nassert solution(\"2 2\") == \"7 7 7\"\nassert solution(\"2 3\") == \"7 7 7\"\nassert solution(\"2 4\") == \"7 7 7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"4 4\") == \"7\""
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"5 5\") == \"10 10 10 10 10\""
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '7'\nassert solution('1 2') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"12 3\") == \"7\"\nassert solution(\"2 4\") == \"7\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '7'\nassert solution('3 4') == '7'\nassert solution('3 1') == '7'\nassert solution('3 2') == '4'\nassert solution('3 2') == '4'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\\n') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == \"6\", \"Wrong solution\"\nassert solution('7 2') == \"6\", \"Wrong solution\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '6'\n'''\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\nprint('Super!')\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 5 6 2\\n1 3\") == \"6\"\nassert solution(\"9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8\") == \"9\"\nprint(solution(input()))"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"3 1 3 4\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''0110010110111010111010111010111011011''') == '2'\nassert solution
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"111\") == \"1 2 5 7\"\nassert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"10111\") == \"-1\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join([\n    '0010100',\n    '0100011',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n])) == '3 3 1 3 4'\n\nassert solution('\\n'.join([\n    '111',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n    '0100001',\n    '0100011',\n])) == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n010111\n''') == '3 1 3 4'\nassert solution('''\n011\n''') == '3 2 5 6'\nassert solution('''\n011110\n''') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"100\") == \"1\"\nassert solution(\"01101110\") == \"3 1 3 4\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('01010') == '3 1 3 4'\nassert solution('111') == '-1'\nassert solution('100100') == '6 5 7 2 3 4 6 2 3 7 1'\nassert solution('001100') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 7\") == \"24\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    2 3\n    2 1 2\n    \"\"\"\n    ) == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''2 4\n2 1 2\n3 2 3 4\n''') == '2'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('1 2') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 3') == '2'\nassert solution('1 2') == '1'\nassert solution('2 2') == '1'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n2 1 2\\n2 2 3\") == \"1\"\nassert solution(\n    \"1 3\\n3 1 2 3\\n3 2 3 4\") == \"2\"\nassert solution(\n    \"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\") == \"24\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 4') == '2'\nassert solution('1 3') == '2'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3\n\n''') == '1'\nassert solution('''1 3\n3 1 2 3\n\n''') == '6'\nassert solution('''2 4\n2 1 2\n3 2 3 4\n\n''') == '24'\nassert solution('''3 7\n2 1 2\n2 3 4\n3 5 6 7\n\n''') == '24'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 3') == '1'\nassert solution('1 3') == '1'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\"\nassert solution() == \"6\"\nassert solution() == \"4\"\nassert solution() == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 4 2 3 1\\n') == '3'\nassert solution('4\\n1 5 4 7\\n') == '6'\nassert solution('3\\n10 10 8 12\\n') == '10'\nassert solution('5\\n5 5 5 5\\n') == '5'\nassert solution('3\\n10 10 8 12\\n') == '10'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 4 2 3 1\n''') == '3'\nassert solution('''4\n1 5 4 7\n''') == '6'\nassert solution('''5\n-2 1 -3 0 1\n''') == '3'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 4 2 3 1\\n\") == \"3\"\nassert solution(\"4\\n1 5 4 7\\n\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 4 2 3 1\") == \"3\"\nassert solution(\"4\\n1 5 4 7\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 4 2 3 1\n''') == '3'\n\nassert solution('''\n4\n1 5 4 7\n''') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n1 4 2 3 1''') == '6'\nassert solution('''5\n1 4 2 3 1''') == '6'\nassert solution('''10\n10 4 2 3 1''') == '9'\nassert solution('''10\n1 4 2 3 1''') == '8'\nassert solution('''10\n1 4 2 3 1''') == '9'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution(input_string=\"4\\n1 5 4 7\\n\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('4') == '6'\n\"\"\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"62\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"738\"\nassert solution(\"100\\n1 2 3 4 5 6 7 8 9 10 11 12\") == \"967\"\nassert solution(\"1\\n3 3 3 3 3 3 3 3 3\") == \"1\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1 1\") == \"9\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == '4'\nassert solution(\"2\") == '4'\nassert solution(\"3\") == '10'\nassert solution(\"4\") == '20'\nassert solution(\"5\") == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2\") == \"4\"\nassert solution(\"4\\n1 1 2 3\") == \"20\""
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"20\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2\n''') == '1'\nassert solution('''4\n1 1 2 3\n''') == '4'\nassert solution('''5\n1 1 1 1 1\n''') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 1 2 3\n''') == '4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'\nassert solution('''\n10\n1 1 2 3 4 5 6 7 8 9\n''') == '23'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 2 3\") == \"5\"\nassert solution(\"1 2 3 4\") == \"9\""
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"4\"\nassert solution(\"4\\n1 1 2 3\") == \"20\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 2\n''') == '4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '73'\n\nstdin = '''\n4\n1 1 2 3\n'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '20'\nassert solution('5') == '62'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 1\n1 1\n1 1''') == '6'\nassert solution('''4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''1\n5 6\n''') == '7'\nprint('All tests passed!')"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '7'\nassert solution('4') == '15'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n1\n2\n3\n2\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n2\n3\n''') == \"6\"\n\nassert solution('''\n1\n2\n3\n5\n3\n4\n2\n1\n2\n3\n1\n2\n3\n1\n2\n3\n''') == \"7\"\n\nassert solution('''\n2\n2\n1\n4\n2\n3\n1\n2\n2\n3\n''') == \"7\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '7'\n\nassert solution('1') == '5'\nassert solution('5') == '10'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"7\"\nassert solution(\"1\") == \"5\"\nassert solution(\"5\") == \"7\"\n\n\"\"\"\n\n\n\nn = int(input())\ndata = [list(map(int, input().split())) for i in range(n)]\n\nfor i in range(n):\n    l, r = data[i]\n    if i == 0:\n        l = 0\n    if i == n-1:\n        r = 0\n    print(min(l, r, n-1-i), end = \" \")"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == '6'\nassert solution(\"2\") == '7'\nassert solution(\"3\") == '15'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n1 1\\n1 1\") == \"6\"\nassert solution(\"4\\n1 2\\n2 1\\n3 5\\n5 3\") == \"15\"\nassert solution(\"1\\n5 6\") == \"7\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '15'\n\nassert solution('1') == '7'\nassert solution('5 6') == '7'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1', \"Not implemented\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n4 2\n10 10 10''') == '3'\n\nassert solution('''1\n1 1\n10 10 10''') == '1'\n\nassert solution('''2\n1 1\n10 10 10''') == '2'\n\nassert solution('''3\n3 3\n10 10 10''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"1\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n4\n2\n''') == '1'\nassert solution('''2\n1\n4\n2\n''') == '3'\nassert solution('''3\n3 3\n10 10 10\n17\n''') == '6'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n2\n''') == '1'\n\nassert solution('''3\n3\n''') == '3'\n\nassert solution('''3\n3\n5 5 5''') == '6'\n\nassert solution('''2\n2\n5 5''') == '1'\n\nassert solution('''2\n1\n5 5''') == '2'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution() == '3'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2\n''') == '1'\nassert solution('''3\n3\n''') == '3'\nassert solution('''3\n3\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2\n''') == '1'\nassert solution('''\n3\n3\n''') == '3'\nassert solution('''\n3\n1\n''') == '6'\nassert solution('''\n3\n1\n''') == '3'\nassert solution('''\n4\n1\n''') == '5'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 5 6 11') == '0'\nassert solution('2 5 4 11') == '1'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0'\n\nfor each test case, read in the input and call the solution function.\n\n'''\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1 1\") == \"10\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 1 1 1\") == \"10\"\nassert solution(\"1 2 3\") == \"0\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n''') == \"10\"\nassert solution('''\n3 6 5 1000000007\n1 2 1\n''') == \"0\"\nassert solution('''\n3 5 6 11\n1 2 1\n''') == \"0\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\nassert solution('10 4 8 5 12') == '1'\nassert solution('1000000000') == '0'\nassert solution('2 5 2') == '2'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n''') == \"10\"\nassert solution('''\n3 5 6 11\n1 2 1\n''') == \"0\""
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\nintel\ncode\nch allenge\n''') == 'YES'\nassert solution('''\n1 2 3\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n''') == 'YES'\nassert solution('''\n1 5 2\npapapapa\n''') == 'YES'\nassert solution('''\n1 1 1\nx\n''') == 'NO'\nassert solution('''\n2 1 1\nx\n''') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2 3\\nintel\\ncode\") == \"YES\"\nassert solution(\"4\\n1 2 3 1\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 3\\nintel\\ndef') == 'YES'\nassert solution('4\\n1 2 3 1\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\n the slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles') == 'YES'\nassert solution('3\\naa bb cc dd\\neee ff gh\\nii jj kk\\nl ll mm\\nnnnoo pp\\npq rr\\nsss ss\\nuu vv\\nxxx yyy') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 1 2 1\") == \"NO\"\nassert solution(\"3 1 3 3\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 1 2 3\") == \"YES\"\nassert solution(\"6 1 2 3\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n2 2 3\\nintel\\ncode') == 'YES'\nassert solution('4\\n1 2 3 1\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles') == 'YES'"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\nintel\\ncode') == 'YES'\nassert solution('4 1 2 1\\nch allenge\\njklmnopqrstu\\nvwxyz\\n') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('4 1 2 3') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 2 3\\nintel\\ncode\\nch allenge\\n') == 'YES'\nassert solution('4\\n1 2 3 1\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles\\n') == 'YES'\nassert solution('4\\n13 11 15 15\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles\\n') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 3\") == \"YES\", \"2 2 3\"\nassert solution(\"4 1 2 2\") == \"NO\", \"4 1 2 2\"\nassert solution(\"3 1 1 1\") == \"NO\", \"3 1 1 1\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1\n2''') == '2'\nassert solution('''1\n1\n2''') == '3'\nassert solution('''3\n1\n2''') == '5'\nassert solution('''10\n10\n10''') == '20'\nprint('done')\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n5 1\\n6 5\\n') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 1 5\n\n3\n1 2 2\n\n''') == '26'\nassert solution('''\n3\n3 1 5\n\n2\n1 2\n\n''') == '26'\nassert solution('''\n3\n3 1 5\n\n5\n3 1 5 2 1\n\n''') == '26'\nassert solution('''\n3\n3 1 5\n\n3\n5\n1 2\n\n''') == '26'\nassert solution('''\n3\n3 1 5\n\n5\n2\n2 2\n\n''') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 1 5\\n') == '26'\nassert solution('1\\n10\\n') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1\n2\n3''') == '26'\nassert solution('''1\n10\n''') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3\\n') == '26'\nassert solution('3\\n3 1 5\\n') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"32\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\""
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\nassert solution('''3 60\n10 30 50\n''') == '37'\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nExplanation\n\nQ2. Write a function which receives two parameters a and b. The function should return the sum of the natural numbers from a to b (both inclusive).\n\nThe input will be an integer >= 0. The function should not use any built-in function to solve the problem."
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == '3'\nassert solution(\"1 1\") == '1'\nassert solution(\"2 4\") == '4'\nassert solution(\"3 3\") == '3'\nassert solution(\"5 5\") == '5'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '3'\nassert solution('3 40') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\"\n\nstdin = '''\n3 10\n1 3 5\n'''\n\nprint(solution(stdin))"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\nassert solution('''\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\nSample Output 2:\n1 2 4\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n5 5\n10 10\n''') == '1 4 5 6 7 8 9'\n\nassert solution('''\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\nSample Output 3:\n1 2 4\n''') == '1 2 4'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\nSample Output 3:\n1 2 4\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1 2 3'\nassert solution('5 1') == '1 2 3 4 5'\nassert solution('10 1') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11') == '1 4 5 6 7 8 9'\nassert solution('5 1\\n1 1\\n3 3\\n2 3\\n1 2\\n3 4\\n4 5\\n') == '1 2 4'\nassert solution('5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1 4 5 6 7 8 9\"\nassert solution(\"2 1\") == \"1 4 5 6 7 8 9\"\n\nassert solution(\"1 1\") == \"1 4 5 6 7 8 9\"\nassert solution(\"2 1\") == \"1 4 5 6 7 8 9\""
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1 4'\nassert solution('5 1') == '1 2 3 4 5'\nassert solution('5 1') == '1 2 4'\nassert solution('5 1') == '1 2 4'\nassert solution('5 1') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1 4 5 6 7 8 9'\nassert solution('5 1') == '1 2 3 4 5 6 7 8 9'\nassert solution('5 1') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n''') == '1 4'\nassert solution('''5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\nassert solution('''\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n''') == '1 2 4'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 1\\n1 2.0\\n1 3.100\") == \"1\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\\n\") == \"0\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 1\n1 2.0\n1 3.100\n\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\n''') == '2'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n\nOutput\n0\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\n\n\n'''\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n''') == '2'\nassert solution('''\n1 2 3\n''') == '3'\nassert solution('''\n1 2 3\n4\n5 6\n7\n8 9\n10\n''') == '3'\nassert solution('''\n7 5\n6 8 9\n10 12\n''') == '1'\nassert solution('''\n2 4 6\n1 8 9\n10 12\n''') == '1'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'\nassert solution('6 4\\n3 5 6 2 4 10') == '4'\nassert solution('10 4\\n7 4 8 9 5 2 3 6 4 10') == '2'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '3'\nassert solution('6 2') == '2'\nassert solution('10 1') == '9'\nassert solution('6 4') == '4'\nassert solution('8 5') == '5'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 6 5 4 10') == '3'\nassert solution('5 5 5 5 5 5') == '5'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n2 3 6 5 4 10\n''') == '3'\nassert solution('''\n6 5\n2 3 2 6 6 8 10\n''') == '5'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2\\n') == '3'\nassert solution('6 4\\n') == '1'\nassert solution('6 2 4 5 10\\n') == '2'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 2\n2 3 6 5 4 10''') == '3'\nassert solution('''5 2\n5 4 8 9 2 3''') == '2'\nassert solution('''5 1\n1''') == '1'\nassert solution('''6 5\n1 2 1 3 3 2''') == '2'\nassert solution('''4 7\n2 6 2 1 6''') == '3'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 3\") == \"1\"\nassert solution(\"1 1\\n5 4\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 2') == '6'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\") == \"3\"\nassert solution(\"6 3\\n2 3 2 5 4 4\") == \"2\"\nassert solution(\"6 2\\n2 3 2 5 4 4\") == \"1\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"1\"\nassert solution(\"2\\n2\\n2\\n2\") == \"1\"\n\"\"\"\nimport itertools\nimport math\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 1 3 2 2 2 2 3\") == \"4\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(t1) == \"2\"\nassert solution(t2) == \"4\"\nassert solution(t3) == \"10\"\nassert solution(t4) == \"10\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '4'\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == '10'\nprint(solution(input()))\n\n\n\n\"\"\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1 3 2 2 2 2 3') == \"4\"\nassert solution('9') == \"10\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('3\\n1 2 3') == '4'\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == '10'\nassert solution('10\\n1 2 1 3 2 2 2 2 3') == '13'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n''') == '4'\nassert solution('''4\n1 2 1 3 2 2 2 2 3\n''') == '10'\nassert solution('''9\n1 2 1 3 2 2 2 2 3\n''') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2 1 3 2 2 2 2 3''') == '4'\nassert solution('''5\n1 2 1 3 2 2 2 2 3''') == '10'\nassert solution('''9\n1 2 1 3 2 2 2 2 3''') == '10'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '4'\nassert solution('2') == '4'\nassert solution('5') == '10'\nassert solution('10') == '10'\n'''\n\nstdin = input()"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '3'"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '4'\nassert solution('2') == '4'\n\"\"\"\nfrom itertools import combinations_with_replacement"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"4\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '4'\nassert solution('2\\n') == '4'\n'''\n\nn = int(input())"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '8'\nassert solution('7') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 5 1 4\\n\") == \"5\"\nassert solution(\"10 10\\n1 2 4 7 8 9 2 5\\n\") == \"9\"\nassert solution(\"5 1\\n2 3 4 5\\n\") == \"3\"\nassert solution(\"3 3\\n1 2\\n\") == \"1\"\nassert solution(\"5 4\\n1 2 3 4\\n\") == \"2\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 6\\n1 5 1 4') == '5'\nassert solution('5 5\\n1 4 3 2') == '6'\nassert solution('5 5\\n1 4 2 5') == '3'\nassert solution('4 4\\n1 5 5 1') == '5'\n\n'''\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '4'\nassert solution('4 6') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 1 4') == '5'\nassert solution('4 6') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1\"\n\n\"\"\"\n\nn, m = list(map(int, stdin.split()))\n\na = list(map(int, stdin.split()))"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 6') == '5'\nassert solution('1 2') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n3 5 1 4\\n\") == \"8\""
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n4 6\n1 5 1 4\n''') == '5'\nassert solution(\n'''\n4 5\n1 2 3 4\n''') == '4'\nassert solution(\n'''\n4 5\n1 2 3 4\n''') == '4'"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+++--') == '2'\nassert solution('+-+-+') == '1'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"++-\") == \"2\"\nassert solution(\"+-+-\") == \"3\"\nassert solution(\"++++\") == \"3\"\nassert solution(\"+-+-++\") == \"4\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution(\"--++\") == '3'\nassert solution(\"-++\") == '2'\n\n-------------------\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n--++\n\nOutput\n3\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n---\n\nOutput\n2\n\nInput\n-\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n--++\n\nOutput\n2\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n-++\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n---\n\nOutput\n2\n\nInput\n--++\n\nOutput\n1\n\nInput\n-++\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n---\n\nOutput\n2\n\nInput\n+-+-+\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n--++\n\nOutput\n2\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n-++\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n---\n\nOutput\n2\n\nInput\n+-+-+\n\nOutput\n2\n\nInput\n-++\n\nOutput\n1\n\nInput\n+-+-+\n\nOutput\n3\n\nInput\n--++\n\nOutput\n1\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nassert solution(\"+-+-+\") == \"3\"\nassert solution(\"+-+-+-\") == \"2\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution(\"++\") == \"1\"\nassert solution(\"+--+\") == \"2\"\nassert solution(\"+--\") == \"2\"\nassert solution(\"+-\") == \"1\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"+-+-+-\") == \"1\"\nassert solution(\n    \"+-+-+-+-\") == \"2\"\nassert solution(\n
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"--+-+--\") == \"3\"\nassert solution(\"+-+-++-+-+\") == \"5\"\nprint(\"All tests passed\")"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-+-+-+') == '3'\nassert solution('+-+-+-+---') == '3'\nassert solution('--+-+-+---') == '2'\nassert solution('+-+-+-+---+-+-+-+---+-+-+-+') == '4'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('+-+-+') == '3'\n\nassert solution('--') == '0'\n\nassert solution('-') == '1'\n\nassert solution('+--+') == '2'\n\nassert solution('+-+-') == '3'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('1 0 0 0 0 0 1 0 1 0 1 0 1 1 0 1 1 0 0 0 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(samples.SAMPLE_INPUT_02) == \"0110110\"\nassert solution(samples.SAMPLE_INPUT_03) == \"0110110\"\nassert solution(samples.SAMPLE_INPUT_04) == \"0110110\"\nassert solution(samples.SAMPLE_INPUT_05) == \"0110110\"\nassert solution(samples.SAMPLE_INPUT_06) == \"0110110\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"10110\"\nassert solution(\"9\") == \"01110\"\nassert solution(\"4\") == \"00001\"\nassert solution(\"6\") == \"001010\"\nassert solution(\"5\") == \"010101\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '1010'\nassert solution('7') == '111'\nassert solution('9') == '100'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '10110'\n\n'''"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\nassert solution('4\\nAND 3 7\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 2 8\\n') == '10100'\nassert solution('5\\nAND 6 7\\nIN 1\\nIN 1\\nXOR 3 5\\nAND 2 8\\n') == '10101'\nassert solution('10\\nAND 4 8\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 2 8\\n') == '10110'\nassert solution('10\\nAND 4 6\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 2 8\\n') == '11110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\nassert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '0110'\n'''\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    5\n    AND 9 4\n    IN 1\n    IN 1\n    XOR 6 5\n    AND 3 7\n    IN 0\n    NOT 10\n    IN 1\n    IN 1\n    AND 2 8\n''') == '10110'\nassert solution('''\n    10\n    AND 9 4\n    IN 1\n    IN 1\n    XOR 6 5\n    AND 3 7\n    IN 0\n    NOT 10\n    IN 1\n    IN 1\n    AND 2 8\n''') == '10110'\nassert solution('''\n    8\n    AND 9 4\n    IN 1\n    IN 1\n    XOR 6 5\n    AND 3 7\n    IN 0\n    NOT 10\n    IN 1\n    IN 1\n    AND 2 8\n''') == '10110'\nassert solution('''\n    10\n    AND 9 4\n    IN 1\n    IN 1\n    XOR 6 5\n    AND 3 7\n    IN 0\n    NOT 10\n    IN 1\n    IN 1\n    AND 2 8\n''') == '10110'\nassert solution('''\n    7\n    AND 9 4\n    IN 1\n    IN 1\n    XOR 6 5\n    AND 3 7\n    IN 0\n    NOT 10\n    IN 1\n    IN 1\n    AND 2 8\n''') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(inp) == out\nassert solution(inp) == out\nassert solution(inp) == out\nassert solution(inp) == out\nassert solution(inp) == out\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'\n\n\n'''\nfrom bisect import bisect_left\n\nn, m, p = map(int, input().split())\nseq_a = list(map(int, input().split()))\nseq_b = list(map(int, input().split()))"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '5 3 1\\n'\n    '1 2 3 2 1\\n'\n    '1 2 3\\n'\n) == '2\\n'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2\\n1 2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3\n\n''') == '2\\n1 2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3''') == '2'\nassert solution('''6 3 2\n1 3 2 2 3 1\n1 2 3''') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n6 3 2\n1 3 2 2 3 1\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 3 1\\n\"\n    \"1 2 3 2 1\\n\"\n    \"1 2 3\"\n) == \"2\"\nassert solution(\n    \"6 3 2\\n\"\n    \"1 3 2 2 3 1\\n\"\n    \"1 2 3\"\n) == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 2 1') == '1 3'\nassert solution('1 2 3 2 1') == '1 2 3'\nassert solution('5 3 1') == '2'\nassert solution('5 3 1') == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 1 2') == '0'\n\n\n------SOLUTION------\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\n    4, 1, 2\n]) == '2'\n\nassert solution([\n    3, 3, 1\n]) == '0'\n\nassert solution([\n    3, 1, 2\n]) == '0'\n\nassert solution([\n    4, 1, 2\n]) == '0'\n\nassert solution([\n    3, 1, 2\n]) == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\") == \"0\"\nassert solution(\"3 3 1 2\") == \"2\"\nassert solution(\"4 1 2\") == \"2\"\nassert solution(\"4 3 1\") == \"0\"\nassert solution(\"6 5 1 3 5\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1\") == \"0\"\nassert solution(\"5 3 1\") == \"1\"\nassert solution(\"5 5 4\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 1 2\n1 3\n1 2\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3 1\n2\n1 2\n1 3\n2 3\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"4 1 2\n1 3\n1 2\n\n2\"\"\") == \"2\"\nassert solution(\n    \"\"\"3 3 1\n2\n1 2\n1 3\n2 3\n\n2\"\"\") == \"0\"\nassert solution(\n    \"\"\"3 4 1\n1 2\n2 3\n3 1\n3 2\"\"\") == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 2\n1 3\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 1 2\n1 3\n1 2\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3 1\n2\n1 3\n1 2\n\n\"\"\") == \"0\""
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 1, 2]) == '2'\nassert solution([3, 3, 1]) == '0'\nassert solution([3, 2, 1]) == '0'\n\"\"\"\n\nclass Graph:\n    def __init__(self, v, e):\n        self.V = v\n        self.E = e\n        self.parent = [-1] * v\n        self.visited = [False] * v\n\n    def dfs(self, v):\n        if self.visited[v] == False:\n            self.visited[v] = True\n            for i in self.parent:\n                if i == -1 or self.parent[i] == v:\n                    self.parent[v] = i\n                    break\n            self.dfs(self.parent[v])\n\n    def kruskal(self):\n        result = 0\n        self.parent = [-1] * self.V\n        self.visited = [False] * self.V\n        sort = []\n        for i in range(self.E):\n            u, v, w = map(int, stdin.readline().split())\n            if self.visited[u-1] == False and self.visited[v-1] == False:\n                self.visited[u-1] = True\n                self.visited[v-1] = True\n                sort.append([u,v,w])\n                result += w\n                while sort:\n                    x, y, z = sort[0]\n                    if self.parent[x-1] == -1:\n                        self.parent[x-1] = y - 1\n                        sort.pop(0)\n                    elif self.parent[y-1] == -1:\n                        self.parent[y-1] = x - 1\n                        sort.pop(0)\n                    else:\n                        break\n        for i in range(self.V):\n            for j in range(self.V):\n                if self.parent[i] == self.parent[j]:\n                    self.parent[i] = -1\n        for i in self.parent:\n            if i == -1:\n                break\n        self.visited = [False] * self.V\n        for i in self.parent:\n            if i!= -1:\n                self.dfs(i)\n        return result\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1 2\n1 3\n1 2\n\n''') == '2'\nassert solution('''4 1 2\n1 3\n1 2\n\n''') == '0'\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n\n''') == '0'\nassert solution('''3 3 1\n1 2\n1 3\n2 3\n\n''') == '0'\n\n'''\n--- Day 21: The Stars Align ---\n\nThe final boss, the space ship Ceres, wants you to make it crash into the nearest star. To do so, you'll need to make the space ship travel faster.\n\nThe Elves send you a small script:\n\n    s = n + m + q\n\ns is the total amount of stars that will be aligned.\n\nn is the number of times that you will move one side of the star in the x direction, inclusive.\n\nm is the number of times that you will move one side of the star in the y direction, inclusive.\n\nq is the number of times that you will move both the x and y directions, inclusive.\n\nFor example, if s = 17, n = 3, m = 2, and q = 1, then the path for you to crash the space ship is as follows:\n\n   (0,0), (0,1), (1,1), (1,2), (2,2), (2,1), (2,0), (1,0)\n\nIn other words, you will travel the path from (0,0) to (2,2).\n\nGiven the value of s in your puzzle input, determine the number of times the path must be traveled to crash the space ship.\n'''\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n10 2 3 5 4 2''') == '3'\nassert solution('''4\n100 100 100 100''') == '1'\nassert solution('''8\n7 6 5 4 3 2 2 3''') == '4'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '6\\n'\n    '10 2 3 5 4 2'\n) == '3'\n\nassert solution(\n    '4\\n'\n    '100 100 100 100'\n) == '1'\n\nassert solution(\n    '8\\n'\n    '7 6 5 4 3 2 2 3'\n) == '4'\n\n\nprint('Problem 1:', 'ok')"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n10 2 3 5 4 2''') == '3'\nassert solution('''4\n100 100 100 100''') == '1'\nassert solution('''8\n7 6 5 4 3 2 2 3''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n10 2 3 5 4 2\n''') == '3'\nassert solution('''\n4\n100 100 100 100\n''') == '1'\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output\n\n\"\"\"\n\n\"\"\"\n            0        1        2        3\n        0        1        1        2        3\n        1        1        1        2        3\n        2        1        1        2        3\n        3        1        1        2        3\n        \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n        \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n      \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n      \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n      \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n      \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n      \n      1        1        1        2        3\n      2        1        1        2        3\n      3        1        1        2        3\n\"\"\"\n\ninput_ = \"\"\"\n6\n10 2 3 5 4 2\n\"\"\"\n\noutput = \"\"\"\n3\n\"\"\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '3'\nassert solution('8') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 2 3 5 4 2\n''') == '3'\n\nassert solution('''\n4\n100 100 100 100\n''') == '1'\n\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n\n''') == 'Yes', 'Input 1'\nassert solution('''\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n\n''') == 'No', 'Input 2'\nassert solution('''\n4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n\n''') == 'Yes', 'Input 3'\nassert solution('''\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n\n''') == 'No', 'Input 4'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3\\n2 1 2') == 'Yes\\n2 3'\nassert solution('6 5\\n2 1 2\\n3 1 1 3') == 'No'\nassert solution('4 3\\n4 3 2 2 1') == 'Yes\\n0'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n\n''') == 'Yes'\nassert solution(\n'''\n4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n\n''') == 'No'\nassert solution(\n'''\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n\n''') == 'Yes'\n\n'''\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"6 5\") == \"No\""
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 2\n1 1\n3 1 3 2\n2 1 5\n2 4 4\n2 4 4''') == 'Yes'\n\nassert solution('''6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 3 1\n''') == 'Yes'\n\nassert solution('''4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n''') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"4 3\") == \"0\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 1\\n3 1 3 2\\n2 1 5\\n2 4 4\") == \"Yes\\n2 3\\n\"\nassert solution(\"6 5\\n4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"No\"\nassert solution(\"4 3\\n4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\") == \"Yes\\n0\""
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n1 2\n1 1\n3 1 3 2\n2 1 5\n2 4 4\n2 4 4''') == 'Yes'\nassert solution('''6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4''') == 'No'\nassert solution('''4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1''') == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('6 5') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'Yes'\nassert solution('6 5') == 'No'\nassert solution('4 3') == 'Yes'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '0 2 1 4 3'\n\nassert solution('3') == '0 2 1'\n\nassert solution('2') == '0 1'\n\nassert solution('1') == '0'\n\nassert solution('0') == ''"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0 1'\nassert solution('4') == '0 1 2 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '2 1 4 3'\nassert solution('13') == '13 5 2 4 1 3 6'\nassert solution('10') == '0 10 2 5 8 9 1 6 3 4 7'\nassert solution('3') == '0 1 2'\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2\\n3\\n') == '1 0 2 3'\nassert solution('5\\n1 2 3 4 5\\n') == '1 0 2 3 4 5'"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0 2 1'\nassert solution('5') == '0 2 1 3 4'\nassert solution('100') == '0 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\n\n'''\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == stdin.rstrip()\n\n\n>>>\n\ninput:\n\n20\n\noutput:\n\n0 2 1 4 3\n\n'''\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '0 2 1 4 3'\nassert solution('1') == '0 1'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\nInput\n5\n\nOutput\n6\n0 2 4 1 3\n\nInput\n3\n\nOutput\n0\n\nInput\n2\n\nOutput\n1\n\nInput\n3\n\nOutput\n0\n1\n2\n\n'''\n\n'''\nn=int(input())\nc=0\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            for l in range(n):\n                if i!=j and j!=k and k!=l and i!=l:\n                    print(i,j,k,l)\n                    print(i*100+j*10+k*1+l)\n                    if max(i*100+j*10+k*1+l,c)>c:\n                        c=max(i*100+j*10+k*1+l,c)\nprint(c)\n'''"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0 2 1 4 3'\n\"\"\"\n\nn = int(input())\narr = []\nfor i in range(0, n):\n    arr.append(i)\nmax = -1\nfor i in range(0, n):\n    cur = 0\n    for j in range(0, n):\n        cur += (i ^ j)\n    if cur > max:\n        max = cur\n\nfor i in range(0, n):\n    cur = 0\n    for j in range(0, n):\n        cur += (i ^ j)\n    if cur == max:\n        print(arr[i], end=\" \")\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\n\n\n\nhttps://www.hackerrank.com/challenges/supersonic-flight/problem\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\n\nassert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"YES\"\nassert solution([input() for _ in range(int(input()))]) == \"YES\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n''') == 'NO'\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n''') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\n''') == \"YES\"\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n\n''') == \"NO\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('1 2') == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 4],\n    [[0, 0],\n    [0, 2],\n    [2, 0],\n    [0, 2],\n    [2, 2],\n    [2, 0],\n    [1, 1]]) == 'YES'\n\nassert solution([3, 4],\n    [[0, 0],\n    [0, 2],\n    [2, 0],\n    [0, 2],\n    [2, 2],\n    [2, 0],\n    [1, 1]]) == 'NO'\n\nassert solution([3, 4],\n    [[0, 0],\n    [0, 2],\n    [2, 0],\n    [0, 2],\n    [2, 2],\n    [2, 0],\n    [1, 1],\n    [1, 1]]) == 'NO'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == \"YES\"\nassert solution('''\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == \"NO\""
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('0') == '1'\nassert solution('1') == '11'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"11\") == \"11\"\nassert solution(\"11\") == \"11\"\nassert solution(\"111\") == \"111\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"22\"\nassert solution(\"3\") == \"43\"\nassert solution(\"9\") == \"423\"\nassert solution(\"5\") == \"51\"\nassert solution(\"10\") == \"213\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n1\\n1') == '1'\nassert solution('5\\n1\\n0\\n0\\n0\\n1') == '4'"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"00\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"111\") == \"111\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"1\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n1\\n1\") == \"1\"\nassert solution(\"5\\n1\\n0\\n0\\n0\\n1\") == \"4\"\nassert solution(\"9\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n0\") == \"3\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"9\") == \"3\"\n\nstdin = sys.stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_line()) == \"First\\nSecond\"\nassert solution(input_line(\"Second\")) == \"First\"\n------------------------------------\nIn any game, a good graph is a graph where the sum of the degrees of the vertices in the graph is less than the maximum possible degree of any vertex in the graph. Thus, if we search a graph G in a depth-first manner using DFS, the sum of the degrees of each vertex in the graph will be minimized. However, the graph can be seen as an undirected graph, and if a vertex v is connected to a vertex u, then v is also connected to u.\n\nA graph is good if it meets the condition below:\n - The graph is not connected, i.e., there are no self-loops and no multi-edges.\n - The graph has at least one vertex with degree 1.\n\nGiven an undirected graph G consisting of N vertices numbered 1 through N and M edges numbered 1 through M.\nG is said to be a good graph when both of the conditions above are satisfied. It is guaranteed that G is initially a good graph.\n - Vertex 1 and Vertex N are not connected.\n - There are no self-loops and no multi-edges.\nTaro the first and Jiro the second will play a game against each other.\nThey will alternately take turns, with Taro the first going first.\nIn each player's turn, the player can do the following operation:\n - Operation: Choose vertices u and v, then add to G an edge connecting u and v bidirectionally.\nThe player whose addition of an edge results in G being no longer a good graph loses. Determine the winner of the game when the two players play optimally.\nYou are given T test cases. Solve each of them.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 10^5\n - 2 \\leq N \\leq 10^{5}\n - 0 \\leq M \\leq \\min(N(N-1)/2,10^{5})\n - 1 \\leq a_i,b_i \\leq N\n - The given graph is a good graph.\n - In one input file, the sum of N and that of M do not exceed 2 \\times 10^5.\n\n-----Input-----\nT\n\\mathrm{case}_1\n\\vdots\n\\mathrm{case}_T\n\nEach case is in the following format:\nN M\na_1 b_1\n\\vdots\na_M b_M\n\n-----Output-----\nPrint T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case.\n\n-----Sample Input-----\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\n-----Sample Output-----\nFirst\nSecond\nFirst"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3 0\n6 2\n1 2\n2 3\n''') == 'First'\nassert solution('''3\n3 0\n6 2\n1 2\n2 3\n''') == 'Second'\nassert solution('''1\n3 0\n''') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First'\n\nassert solution('''2\n2 3\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0\n0\n1 2''') == 'First'\nassert solution('''2\n0\n0\n0''') == 'Second'\nassert solution('''5\n0\n1\n2\n3\n4''') == 'First'\nprint(solution('''1\n0\n0'''))\nprint(solution('''1\n1\n0'''))\nprint(solution('''1\n1\n0'''))"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 0\n6 2\n1 2\n2 3\n''') == 'First'\n\nassert solution('''\n1\n3 2\n''') == 'Second'\n\nassert solution('''\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First'\n\nassert solution('''\n1\n1 1\n''') == 'Second'\n\nassert solution('''\n3\n5 0\n1 2\n4 3\n2 4\n''') == 'Second'"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 2\n1 2''') == 'First'\nassert solution('''\n3\n0 2\n1 2\n2 3''') == 'Second'\n\nassert solution('''\n5\n0 2\n1 2\n2 3\n3 4\n4 5''') == 'First'\n\nassert solution('''\n1\n0 2''') == 'Second'\n\nassert solution('''\n6\n0 2\n1 2\n2 3\n3 4\n4 5\n5 6''') == 'First'"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 0\n2 3\n3 2\n1 4\n2 5\n''') == 'First'\nassert solution('''\n1 2\n2 3\n3 2\n1 4\n2 5\n''') == 'Second'\nassert solution('''\n10 2\n10 4\n4 10\n4 3\n3 10\n4 2\n5 10\n5 3\n3 5\n5 4\n1 10\n1 2\n''') == 'First'\n\n----Explanation----\n\nIn the first test case, the initial graph G is given as follows:\n - a_1=1, b_1=2\n - a_2=2, b_2=3\n - a_3=3, b_3=4\n - a_4=4, b_4=5\n - a_5=5, b_5=10\n\nThe game begins with a turn:\n - Taro the first takes turns\n - Taro the second takes turns\n\nTaro the first moves by adding an edge (a_1, b_2) to G. Then the graph G became as follows:\n - a_1=1, b_2=2\n - a_2=2, b_3=3\n - a_3=3, b_4=4\n - a_4=4, b_5=5\n - a_5=5, b_10=10\n\nAfter the first move, the graph becomes bad:\n - b_2=3 is no longer connected to b_1 and b_5\n\nTaro the second moves by adding an edge (a_2, b_3) to G. Then the graph G became as follows:\n - a_2=2, b_3=3\n - a_3=3, b_4=4\n - a_4=4, b_5=5\n - a_5=5, b_10=10\n\nAfter the second move, the graph becomes bad:\n - b_3=4 is no longer connected to b_2 and b_5\n\nTaro the third moves by adding an edge (a_3, b_4) to G. Then the graph G became as follows:\n - a_3=3, b_4=4\n - a_4=4, b_5=5\n - a_5=5, b_10=10\n\nAfter the third move, the graph becomes bad:\n - b_4=4 is no longer connected to b_3 and b_5\n\nTaro the fourth moves by adding an edge (a_4, b_5) to G. Then the graph G became as follows:\n - a_4=4, b_5=5\n - a_5=5, b_10=10\n\nAfter the fourth move, the graph becomes bad:\n - b_5=5 is no longer connected to b_4 and b_10\n\nTaro the fifth moves by adding an edge (a_5, b_10) to G. Then the graph G became as follows:\n - a_5=5, b_10=10\n\nAfter the fifth move, the graph becomes bad:\n - b_10=10 is no longer connected to b_5\n\nTaro the sixth moves by adding an edge (a_6, b_10) to G. Then the graph G became as follows:\n - a_6=6, b_10=10\n\nAfter the sixth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the seventh moves by adding an edge (a_7, b_10) to G. Then the graph G became as follows:\n - a_7=7, b_10=10\n\nAfter the seventh move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the eighth moves by adding an edge (a_8, b_10) to G. Then the graph G became as follows:\n - a_8=8, b_10=10\n\nAfter the eighth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the ninth moves by adding an edge (a_9, b_10) to G. Then the graph G became as follows:\n - a_9=9, b_10=10\n\nAfter the ninth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the tenth moves by adding an edge (a_10, b_10) to G. Then the graph G becomes as follows:\n - a_10=10, b_10=10\n\nAfter the tenth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the eleventh moves by adding an edge (a_11, b_10) to G. Then the graph G became as follows:\n - a_11=11, b_10=10\n\nAfter the eleventh move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the twelfth moves by adding an edge (a_12, b_10) to G. Then the graph G became as follows:\n - a_12=12, b_10=10\n\nAfter the twelfth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the thirteenth moves by adding an edge (a_13, b_10) to G. Then the graph G became as follows:\n - a_13=13, b_10=10\n\nAfter the thirteenth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the fourteenth moves by adding an edge (a_14, b_10) to G. Then the graph G became as follows:\n - a_14=14, b_10=10\n\nAfter the fourteenth move, the graph becomes good:\n - b_10=10 is no longer connected to b_5\n\nTaro the fifteenth moves by adding an edge (a_15, b_10) to G. Then the graph G became as follows:"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == \"First\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\nassert solution('aabbc') == 'Mike'\nassert solution('aabbc') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nabba\n''') == 'Mike'\nassert solution('''\ncba\n''') == 'Ann'\n''')\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\nassert solution('abc') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\n\"\"\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\n\nprint('all tests passed')"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4') == '2'\nassert solution('2 2') == '1'\nassert solution('1 5') == '1'\nassert solution('2 3') == '0'\n\nstdin = \\\n\"\"\"3 2\n8 3 8\n1 2\n2 3\n\n\"\"\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\"\nassert solution('''\n4 4\n1 2 5 7\n5 7 5 7\n1 7 8 9\n2 8 9 3\n3 9 9 9\n''') == \"2\"\nassert solution('''\n2 2\n1 2\n2 4\n1 4\n''') == \"0\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '2'\nassert solution('6 1') == '0'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n6\n1 2\n3 4\"\"\") == \"0\"\nassert solution(\"\"\"3\n1\n2\n3\"\"\") == \"1\"\nassert solution(\"\"\"5\n5\n5\n4\n3\n2\"\"\") == \"2\"\nassert solution(\"\"\"20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\"\"\") == \"6\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"8 3 8\") == \"2\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '0'\nassert solution('3 3') == '2'\nassert solution('10 3') == '4'\nassert solution('12 5') == '1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 4') == 'ababacd'\nassert solution('4 7') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"abacd\"\nassert solution(\"10 3\") == \"ababcdddeffedcba\"\nassert solution(\"15 7\") == \"abacdabcabcdedcba\"\nassert solution(\"2 8\") == \"-1\"\nassert solution(\"2 9\") == \"aaababa\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('ababacd') == 'ababacd'\nassert solution('ababacdab') == 'ababacdab'\nassert solution('abcdef') == '-1'\nassert solution('abcdefgh') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == 'ababc'\nassert solution('4 3') == '-1'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n') == 'ababacd'\nassert solution('2 2\\n') == '-1'\nassert solution('10 4\\n') == 'ababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == 'ababaca'\nassert solution('4 7') == '-1'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 4') == 'ababacd', 'Case 1'\nassert solution('4 7') == '-1', 'Case 2'\nassert solution('3 10') == '-1', 'Case 3'\nassert solution('9 8') == 'acacbac', 'Case 4'\nassert solution('6 3') == 'ababacd', 'Case 5'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n''') == 'ababacd'\nassert solution('''\n7 4\n''') == 'ababacd'\nassert solution('''\n3 5\n''') == '-1'\nassert solution('''\n2 6\n''') == '-1'\nprint('All tests passed!')"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 4\n''') == 'ababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4\\n') == 'ababacd'\nassert solution('2 4\\n') == '-1'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == input_1\n\nprint(solution(input_1))\n\n>>> Solution:\n>>> def solution(n, A):\n...     if len(A) == 0:\n...         return 0\n...     dp = [[0 for _ in range(len(A) + 1)] for _ in range(len(A) + 1)]\n...     for i in range(1, len(dp)):\n...         for j in range(1, len(dp[i])):\n...             if A[j - 1] > A[i - 1]:\n...                 dp[i][j] = dp[i][j - 1] + 1\n...             elif A[j - 1] < A[i - 1]:\n...                 dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n...             else:\n...                 dp[i][j] = dp[i - 1][j - 1]\n...     return dp[len(dp) - 1][len(dp) - 1]\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 1 2\n''') == 4\n\nassert solution('''\n10\n1 1 2 2 2 1 1 2 2 1\n''') == 9\n\nassert solution('''\n2\n1 1\n''') == 2\n\nassert solution('''\n3\n1 2 1\n''') == 3\n\nassert solution('''\n4\n1 1 1 1\n''') == 4\n\nprint('All test cases passed!')"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1 2') == 4\n\nassert solution('10') == 9\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 1 2') == '4'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2 1 2\n2''') == '4'\n\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1\n''') == '9'\n\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1\n''') == '7'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\nassert solution(\"2 2 2 1 1 2 2 1 2\") == \"9\"\nassert solution(\"1 1 2 2 2 1 1 2 1\") == \"4\"\nassert solution(\"1 1 1 2 2 2 1 1 2 1\") == \"9\"\nassert solution(\"1 1 2 1 2 1 2 1 2 2 2 1 1 2 1 2\") == \"7\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2') == '4'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 1 2') == '4'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1') == '9'\nassert solution('6\\n1 2 1 2 1 2') == '3'\nassert solution('1\\n1') == '1'\nassert solution('3\\n1 2 3') == '3'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == '4'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5 5 1\n1 2 5\n2 4 3\n3 4 1\n4 5 2\n5 2 5\n\"\"\") == \"++-\"\nassert solution(\n\"\"\"\n5 5 2\n1 3 5\n2 4 1\n3 4 1\n4 5 3\n5 2 5\n\"\"\") == \"++-\"\nassert solution(\n\"\"\"\n5 5 1\n1 2 5\n2 4 3\n3 4 1\n4 5 2\n5 2 5\n\"\"\") == \"++-++-\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '+'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1') == '2', solution('2 2 1')\nassert solution('1 4 5') == '2', solution('1 4 5')\nassert solution('2 3 4') == '-', solution('2 3 4')\nassert solution('1 4 1') == '+', solution('1 4 1')\nassert solution('1 3 1') == '+', solution('1 3 1')\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution(\"1 2 1\\n2 2 1\\n1 4 5\\n2 3 4\\n1 4 1\\n1 3 1\\n2 2 3\\n\") == \"2\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 1\n2 2 1\n2 2 1\n\n''') == '2'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque, Counter\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"2\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1\") == \"2\"\nassert solution(\"1 4 5\") == \"-4\"\nassert solution(\"2 3 4\") == \"2\"\nassert solution(\"1 4 1\") == \"-4\"\nassert solution(\"1 3 1\") == \"+3\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 1') == '2'\nassert solution('1 4 5') == '+-+'\nassert solution('2 3 4') == '++-'\nassert solution('1 4 1') == '+-'\nassert solution('1 3 1') == '+-'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2 1\n1 1 2''') == '2'\nassert solution('''6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3''') == '6'"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"18690\"\nassert solution(input(\"\")) == \"0\"\nassert solution(input(\"123456789123456789123456789123456789123456789123456789123456789\")) == \"18690\"\nassert solution(input(\"0000000000000\")) == \"0\"\nassert solution(input(\"0123456789123456789123456789123456789123456789123456789123456789\")) == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\"1\", \"6\", \"8\", \"9\"]) == \"1869\"\nassert solution([\"1\", \"6\", \"8\", \"9\", \"0\"]) == \"18690\"\nassert solution([\"1\", \"6\", \"8\", \"9\", \"0\", \"0\"]) == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline()[:-1]\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 6 8 9 1\") == \"1869\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"2152\"\nassert solution(\"11 21 22 23 24 25 26 27 28 29 30 31\") == \"0312\"\nassert solution(\"19\") == \"0\"\nprint('You passed all test cases.')"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\na: 2\nb: 3\nc: 4\n''') == '1234'\nassert solution('''\na: 3\nb: 1\nc: 3\n''') == '1312'\nassert solution('''\na: 1\nb: 8\nc: 9\n''') == '868'\nassert solution('''\na: 1\nb: 9\nc: 1\n''') == '913'\nassert solution('''\na: 1\nb: 5\nc: 1\n''') == '541'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2333') == '2333'\nassert solution('2334') == '3423'\n\nassert solution('1') == '1'\nassert solution('2333') == '2333'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1234') == '124'\nassert solution('9000') == '9000'\nassert solution('012345') == '13245'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1.1.2.3.4.5.6.7.8.9.0\n1.2.3.4.5.6.7.8.9.0\n1.2.3.4.5.6.7.8.9\n1.2.3.4.5.6.7.8\n1.2.3.4.5.6.7\n1.2.3.4.5.6\n1.2.3.4.5\n1.2.3.4\n1.2.3\n1.2.3\n1.2.3\n1.2.3\n1.2.3.4\n1.2.3.4.5\n1.2.3.4.5.6\n1.2.3.4.5.6.7\n1.2.3.4.5.6.7.8\n1.2.3.4.5.6.7.8.9\n1.2.3.4.5.6.7.8.9.0\n1.2.3.4.5.6.7.8.9.1\n1.2.3.4.5.6.7.8.9.10\n1.2.3.4.5.6.7.8.9.1.0\n1.2.3.4.5.6.7.8.9.1.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0\n1.2.3.4.5.6.7.8.9.1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '3'\nassert solution('4 2') == '2'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\\n\") == \"2\"\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\\n\") == \"3\"\n\n\n\"\"\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"5 6\") == \"3\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\n\nimport sys\nimport heapq\nimport math\nfrom collections import Counter\n\nn, m = [int(x) for x in input().split()]"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution(\"4 2\") == '2'\nassert solution(\"5 5\") == '3'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '3'\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n1 3\n3 4\n\n''') == '2'\nassert solution('''\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\n''') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n4 7\n''') == '3'\n\nassert solution('''\n3\n4 3 1\n''') == '9'\n\nassert solution('''\n10\n10 5 1 2 3 4 6 8 9 10\n''') == '43'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '8'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"10\"\nassert solution(\"3\") == \"9\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '9'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '3'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '6'\nassert solution('5') == '10'\nassert solution('6') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n4 7\n''') == '3'\nassert solution('''3\n4 3 1\n''') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 7') == '3'\nassert solution('3 4 1') == '9'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 8 5\n''') == '9'\nassert solution('''\n5\n3 10 2 1 5\n''') == '2'\nassert solution('''\n4\n0 5 15 10\n''') == '0'\nassert solution('''\n1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n3 10 2 1 5\n''') == '2'\nassert solution('''4\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n8 5\n''') == '9'\nassert solution('''\n5\n3 10 2 1 5\n''') == '2'\nassert solution('''\n1\n1\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n3 10 2 1 5\n''') == '2'\nassert solution('''4\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n3 10 2 1 5\n''') == '9'\nassert solution('''\n4\n0 5 15 10\n''') == '0'\nassert solution('''\n1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\nassert solution('''5\n3 10 2 1 5\n''') == '2'\nassert solution('''4\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n8 5\n''') == '9'\nassert solution('''5\n0 5 15 10\n''') == '0'\nassert solution('''4\n0 5 15 10\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"0\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n4 8 5\n''') == '9'\nassert solution('''5\n0 5 15 10\n''') == '0'\nassert solution('''1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n0 5 15 10\n''') == '0'\n\nassert solution('''4\n0 5 15 10\n''') == '-1'\n\nassert solution('''5\n0 5 15 10\n''') == '2'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == \"3\"\nassert solution(test_input_2) == \"1\""
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"10 4 5\n3 5 7 10\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"13 4 5\n7 8 9 10\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"100 5 100\n10 8 9 8 7\n\"\"\"\n) == \"99\"\n\nassert solution(\n\"\"\"1 2 2\n1 1\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 4 5\\n3 5 7 10') == '3'\nassert solution('13 4 5\\n7 8 9 10') == '1'\nassert solution('10 4 5\\n0 0 0 0') == '1'\nassert solution('10 4 5\\n2 4 0 0') == '0'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"1\"\nprint(solution(input_))"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '1'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4 5\\n3 5 7 10') == '3'\nassert solution('13 4 5\\n7 8 9 10') == '1'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n101\n3 3\n3 2\n3 1''') == '2'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2''') == '4'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5''') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"6\"\nassert solution(\"4\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == '2'\nassert solution(\"4\") == '4'\nassert solution(\"6\") == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n101\n3 3\n3 2\n3 1\n''') == '2'\n\nassert solution('''\n4\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\n\nassert solution('''\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n101\n3 3\n3 2\n3 1\n\n4\n1111\n3 4\n5 2\n3 1\n3 2''') == '2'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n\n6''') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n101\n3 4\n5 2\n3 1\n3 2''') == '2'\n\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2''') == '4'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n101\n3 4\n5 2\n3 1\n3 2\n''') == '2'\nassert solution('''\n3\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\nassert solution('''\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '6'\nassert solution('''\n4\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\nassert solution('''\n7\n101\n3 4\n5 2\n3 1\n3 2\n4 1\n5 4\n2 2\n''') == '7'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n101\n3 4''') == '2'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2''') == '4'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5''') == '6'\nassert solution('''5\n1111\n3 4\n5 2\n3 1\n3 2''') == '5'\nassert solution('''8\n010110011\n3 4\n5 2\n3 1\n3 2''') == '7'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n11\n3 4\n3 2\n3 1\n''') == '2'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '6'\nassert solution('''10\n101\n3 4\n5 2\n3 1\n3 2\n''') == '5'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4\n''') == '1111'\nassert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"1111\"\nassert solution(input) == \"01010\"\nassert solution(input) == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4\n''') == '1111'\nassert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'\nprint(\"Congratulations, your submission is CORRECT!\")\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1''') == '1111'\nassert solution('''7 3\n2''') == '01010'\nassert solution('''5 3\n4''') == '1111'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1111'\nassert solution() == '01010'\nassert solution() == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == '1111'\nassert solution(input_string) == '01010'\nassert solution(input_string) == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '11'\nassert solution('1 2\\n') == '11'\nassert solution('2 2\\n') == '22'\nassert solution('2 2\\n') == '22'\nassert solution('1 4\\n') == '11'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"1111\"\nassert solution(input()) == \"01010\"\nassert solution(input()) == \"1011011\""
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n''') == '0/1'\n\nassert solution('''\n3\n1 1 1\n''') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0/1'\nassert solution('2') == '0/1'\nassert solution('3') == '0/1'\nassert solution('10') == '1/10'\nassert solution('11') == '1/11'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0/1'\nassert solution() == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n') == '1/2'\nassert solution('2\\n1 1 1\\n') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"1/2\"\nassert solution(\"3\\n1 1 1\") == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1/2'\nassert solution('3') == '0/1'\nassert solution('4') == '1/1'\nassert solution('5') == '1/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\n2\n\n\"\"\") == \"1/2\"\nassert solution(\"\"\"3\n1 1 1\n\n\"\"\") == \"0/1\""
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 1') == '0/1'\nassert solution('4\\n1 1 1 1\\n') == '1/2'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"0/1\"\nassert solution(\"3\") == \"1/2\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1 1\n''') == '1/2'\n\nassert solution('''4\n2 2 2 2\n''') == '0/1'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4 3 2 1 0\"\nassert solution_fast() == \"4 3 2 1 0\"\n\"\"\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4 3 2 1 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n\n''') == '1 0 1 0 0'\nassert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n\n''') == '4 3 2 1 0'\nassert solution('''5\n1\n1\n2\n3\n3\n\n''') == '0 0 0 0 0'\nassert solution('''10\n1\n1\n1\n1\n2\n2\n2\n3\n4\n3\n5\n5\n6\n6\n7\n7\n7\n7\n8\n8\n9\n9\n10\n10\n\n''') == '10 10 10 10 10 10 10 10 10 10 10 10'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\"\"\") == \"1 0 1 0 0\"\nassert solution(\"\"\"5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\"\"\") == \"4 3 2 1 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 0 1 0 0'\nassert solution() == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''\n5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\n4 5 1 7 4\\n\") == \"1\\n8\\n01001001101\\n11000111101\\n11000111101\\n100111001101\\n000111011001\\n110001111011\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('3') == '11'\nassert solution('2') == '0'\nassert solution('6') == '21'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('1') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 1') == '1'\nassert solution('4\\n4 2 2 2') == '1'\nassert solution('5\\n4 3 2 2') == '2'\nassert solution('5\\n3 4 2 2') == '1'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '11'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('4 5 1 7 4') == '1'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '8'\nassert solution('4') == '11'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n') == '1'\nassert solution('12\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n') == '0'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '0'\n\"\"\""
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 1 2\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '1', \"Wrong answer!\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 1 2\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\n\n\"\"\""
    }
]