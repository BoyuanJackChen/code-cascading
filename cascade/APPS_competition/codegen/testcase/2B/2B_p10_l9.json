[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"16\"\nassert solution(\"5\") == \"25\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 5') == '36'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('2') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 (2 ( 2 1 ) ) 3') == '9'\nassert solution('4 ( 12 3 )') == '36'\nassert solution('6 ( ( 2 ) )') == '5'\nassert solution('6 ( ( ( 2 3 ) ) )') == '5'\nprint('\"Run\" is good. Coding is good.')\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000000)\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 3') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('3') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n2 3\nSample Input 1:\n2\n2 3\nSample Output 1:\n5\n\nSample Input 2:\n8\n( 2 ( 2 1 ) ) 3\nSample Output 2:\n9\n\nSample Input 3:\n4\n( 12 3 )\nSample Output 3:\n36\n\nSample Input 4:\n6\n( 2 ) ( 3 )\nSample Output 4:\n5\n\nSample Input 5:\n6\n( ( 2 3 ) )\nSample Output 5:\n5\n''') == '5'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n2 3\n''') == '5'\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''\n4\n( 12 3 )\n''') == '36'\nassert solution('''\n6\n( 2 ) ( 3 )\n''') == '5'\nassert solution('''\n6\n( ( 2 3 ) )\n''') == '5'\n'''\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '5'\nassert solution('2') == '5'\nassert solution('8') == '9'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 2') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n\"\"\""
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 3\n''') == '5'\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''4\n( 12 3 )\n''') == '36'\nassert solution('''6\n( ( 2 3 ) )\n''') == '5'\nprint(solution('''10\n( 1 2 ) ( ( 3 4 ) ) ( ( 6 7 ) ) ( 8 )\n'''))\nprint(solution('''5\n( 1 ) ( ) ( ) ( ) ( )\n'''))"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"610\") == \"4\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'\nprint('You are all set!')\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\nassert solution('9999') == '1'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') =='seems legit'\nassert solution('2') == 'insufficient service'\nassert solution('1') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') =='seems legit'\nassert solution('4') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'insufficient service'\nassert solution('''\n4\n2017 1 0\n2017 2 0\n2017 3 0\n2017 4 0\n''') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2\\n2017 11 0\\n2018 1 1000\\n') == 'insufficient service'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('2\\n2017 11 0\\n2018 1 1000\\n') == 'tampered odometer'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\\n') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n2016 12 0\n2017 1 0''') =='seems legit'\nassert solution('''2\n2016 12 0\n2017 1 0''') == 'insufficient service'\nassert solution('''3\n2016 12 0\n2017 1 0\n2018 1 1000''') == 'tampered odometer'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"seems legit\"\nassert solution(\"\"\"\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"\n2\n2017 11 0\n2018 1 1000\n\"\"\") == \"insufficient service\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n2017 4 0\n2017 8 12000\n2018 8 42000\n2018 8 42001\nSample Output 4:\ninsufficient service''') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\nSample Output 1:\nseems legit\n\nSample Input 2:\n3\n2017 4 0\n2017 8 12000\n2018 8 42001\nSample Output 2:\ninsufficient service\n\nSample Input 3:\n2\n2017 11 0\n2018 1 1000\nSample Output 3:\ntampered odometer\n\nSample Input 4:\n2\n2013 1 0\n2013 2 0\nSample Output 4:\nseems legit\n''') =='seems legit'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') =='seems legit'\nassert solution('2') == 'insufficient service'\nassert solution('4') == 'tampered odometer'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2\n0 2 3\n0 1\n1''') == '3'\nassert solution('''5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n1''') == '2'\nassert solution('''6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 4:\n4\n''') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_value_1) == \"3\", \"Should return 3\"\nassert solution(input_value_2) == \"2\", \"Should return 2\"\nassert solution(input_value_3) == \"2\", \"Should return 2\"\nassert solution(input_value_4) == \"4\", \"Should return 4\"\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Input 5:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 5:\n2\n''') == \"3\"\nassert solution('''5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 6:\n2\n''') == \"4\"\nassert solution('''6\n1 3\n0 2 3\n1 5\n0 4\n1 3 5\n2 4\nSample Output 7:\n2\n''') == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '2'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 3 4\\n0 2 3\\n0 1 3\\n1\\n0 1 2') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"5\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"6\\n1 3\\n0 2 4\\n1 5\\n0 4\\n1 3 5\\n2 4\") == \"2\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n0 2 3\\n0 1\") == \"3\"\nassert solution(\"4\\n2 3 4\\n2 3 4\\n0 1\\n0 1\\n0 1\") == \"2\"\nassert solution(\"5\\n3 4\\n2 3 4\\n1 5\\n0 4\\n1 3 5\\n0 4\\n1 3 5\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\") == \"4\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'\nassert solution('''\nBLUE 1 4000\nRED 4002 10000\n''') == 'IMPOSSIBLE'\nassert solution('''\nBLUE 1 4000\nRED 4002 10000\nGREEN 700 100\n''') == '3'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nBLUE 1 5000\\nRED 5001 10000\\n') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\\n') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\\n') == '3'\nassert solution('2\\nBLUE 1 4000\\nRED 4002 10000\\n') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '4'\nassert solution('''\n2\nBLUE 1 4000\nRED 4002 10000\n''') == 'IMPOSSIBLE'\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 700 10\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\nBLUE 1 6000\nRED 5001 10000\nWHITE 7000 10000\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2\nBLUE 1 5000\nRED 5001 10000\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"2\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nABC\nABC\nABD\nABCDEFG\nABCDEFG\nABCDEFGHI\nABCDEFGHIJ\nABCDEFGHIJK\nABCDEFGHIJKL\nABCDEFGHIJKL\nABCDEFGHIJKLM\nABCDEFGHIJKLMN\nABCDEFGHIJKLMN\nABCDEFGHIJKLMNO\nABCDEFGHIJKLMNOP\nABCDEFGHIJKLMNOP\nABCDEFGHIJKLMNOPQ\nABCDEFGHIJKLMNOPQR\nABCDEFGHIJKLMNOPQRST\nABCDEFGHIJKLMNOPQRS\nABCDEFGHIJKLMNOPQST\nABCDEFGHIJKLMNOPQS\nABCDEFGHIJKLMNOPQSTU\nABCDEFGHIJKLMNOPQSV\nABCDEFGHIJKLMNOPQSV\nABCDEFGHIJKLMNOPQSVW\nABCDEFGHIJKLMNOPQSVW\nABCDEFGHIJKLMNOPQSVWP\nABCDEFGHIJKLMNOPQSVWQ\nABCDEFGHIJKLMNOPQSVQ\nABCDEFGHIJKLMNOPQSVQR\nABCDEFGHIJKLMNOPQSVQR\nABCDEFGHIJKLMNOPQSVQRS\nABCDEFGHIJKLMNOPQSVQRST\nABCDEFGHIJKLMNOPQSVQRS\nABCDEFGHIJKLMNOPQSVQRSTU\nABCDEFGHIJKLMNOPQSVQRSTU\nABCDEFGHIJKLMNOPQSVQRSTU\nABCDEFGHIJKLMNOPQSVQRSTU\nABCDEFGHIJKLMNOPQSVQRSTU\nABCDEFGHIJKLMNOPQSVQRSTUV\nABCDEFGHIJKLMNOPQSVQRSTUV\nABCDEFGHIJKLMNOPQSVQRSTUVW\nABCDEFGHIJKLMNOPQSVQRSTUVW\nABCDEFGHIJKLMNOPQSVQRSTUVWS\nABCDEFGHIJKLMNOPQSVQRSTUVWS\nABCDEFGHIJKLMNOPQSVQRSTUVW\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGHIJKLMNOPQSVQRSTUVWR\nABCDEFGH"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nPRATTATTATTIC\n''') == '6'\n\nassert solution('''\nGGGGGGGGG\n''') == '1'\n\nassert solution('''\nPRIME\n''') == '5'\n\nassert solution('''\nBABBABABBABBA\n''') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n\") == \"0\\n\", \"First example\"\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\\n\") == \"1\\n\", \"Second example\"\nassert solution(\"I 14 B\\nI 14 A\\nE\\nI 14 A\\nI 15 B\\nE\\n\") == \"0\\n\", \"Third example\"\nassert solution(\"I 14 A\\nI 15 B\\nE\\nI 14 A\\nI 15 B\\nE\\n\") == \"1\\n\", \"Fourth example\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('D 1') == '0'\nassert solution('D 2') == '1'\nassert solution('D 3') == '1'\nassert solution('D 1') == '0'\nassert solution('E') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"I 1 X\") == \"0\"\nassert solution(\"D 1\") == \"1\"\nassert solution(\"D 1\") == \"1\"\nassert solution(\"D 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\nSample Output 1:\n0\n\nSample Input 2:\nD 2\nD 1\nE\nD 1\nD 2\nE\nSample Output 2:\n1\n\nSample Input 3:\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\nSample Output 3:\n0\n\nSample Input 4:\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\nSample Output 4:\n1''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"D 2\\nD 1\\nI 1 X\\nD 1\\nD 2\\nE\\nD 1\\nI 14 A\\nI 15 B\\nE\\nI 14 A\\nI 15 B\\nE\") == \"0\"\nprint(solution(\"D 2\\nD 1\\nI 1 X\\nD 1\\nD 2\\nE\\nD 1\\nI 14 A\\nI 15 B\\nE\\nI 14 A\\nI 15 B\\nE\"))"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nD 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\nD 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\nI 14 X\nD 1\nE\nD 1\nD 2\nE\nI 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''D 1\nD 2\nE\nD 3\nD 1\nE\nD 1\nD 2\nE\nD 1\nE\n''') == '0'\n\nassert solution('''D 2\nD 1\nE\nD 1\nD 2\nE\nD 1\nE\n''') == '1'\n\nassert solution('''I 14 B\nD 1\nE\nD 1\nD 2\nE\nD 1\nE\n''') == '0'\n\nassert solution('''I 14 A\nD 1\nE\nD 1\nD 2\nE\nD 1\nE\n''') == '1'\n\nassert solution('''I 15 B\nD 1\nE\nD 1\nD 2\nE\nD 1\nE\n''') == '0'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s) == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 0 1 0 0 0\"\n) == \"300\"\n\nassert solution(\n    \"5 0 1 0 1 0\"\n) == \"1900\"\n\nassert solution(\n    \"6 0 1 1 0 0\"\n) == \"2300\"\n\nassert solution(\n    \"10 399 0 0 0 0\"\n) == \"399\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 0 1 0 0 0''') == '300'\nassert solution('''5 0 1 0 1 0''') == '1900'\nassert solution('''6 0 1 1 0 0''') == '2300'\nassert solution('''10 399 0 0 0 0''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '4 0 1 0 0 0') == '300'\nassert solution(\n    '5 0 1 0 1 0') == '1900'\nassert solution(\n    '6 0 1 1 0 0') == '2300'\nassert solution(\n    '10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 10\n1 5\n1 12\n''') == \"2\"\nassert solution('''2 10\n1 5\n1 4\n''') == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 10\n1 12\n1 13''') == '2'\nassert solution('''2 10\n1 5\n1 12\nSample Output 1:\n2\n\nSample Input 2:\n2 10\n1 5\n1 4\nSample Output 2:\n2\n\nSample Input 3:\n2 10\n1 5\n4 1\nSample Output 3:\n2\n\nSample Input 4:\n2 10\n1 5\n4 1\nSample Output 4:\n2''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10') == '2'\nassert solution('1 12') == '2'\nassert solution('1 13') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 5') == '2'\nassert solution('2 10') == '2'\nassert solution('1 5') == '2'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 10\n1 5\n1 4''') == '2'\nassert solution('''2 10\n1 5\n1 12''') == '2'\nassert solution('''2 10\n1 12\n1 13''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '3'\nassert solution('3 2') == '2'\nassert solution('3 1') == '2'\nassert solution('2 3') == '2'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(t_input.read()) == t_output.read()\n\"\"\""
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5''') == '28.970562748'\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n99 6 -8''') == '32'\nassert solution('''8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8''') == '32'\nassert solution('''2\n3 3 -2\n4 2 0\n4 3 0''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n8\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '28'\nassert solution('6') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_stdin()) in [\"0\", \"IMPOSSIBLE\"]\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\\n\") == \"28\"\nassert solution(\"4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5\\n\") == \"36.2842712475\"\nassert solution(\"6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n\") == \"32\"\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'IMPOSSIBLE'\nassert solution('1') == '28.970562748'\nassert solution('3') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748', 'impossible'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475', 'impossible'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32.000000', 'impossible'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '28.969564324'\nassert solution('6') == '32.0'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\n\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\n\nassert solution('''\n2\n-1 -2 -1 -1\n-1 2 -1 -1\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 9 5') == '3'\nassert solution('2 2 6 8') == '1'\nassert solution('4 8 9 3') == '1'\nassert solution('5 2 7 10') == '2'\nassert solution('7 4 4 10') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3\\n\") == \"3\"\nassert solution(\"2\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"4\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\nassert solution(\"3\\n5 2 7 10\\n7 4 4 10\\n2 4 10 8\\n\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == \"1\"\n\nimport math\nimport sys\n\nn = int(input())\n\npoints = []\nfor _ in range(n):\n    points.append([int(i) for i in input().split()])"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('3') == '3'\nassert solution('3') == '3'\nassert solution('3') == '3'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('1 3 9 5') == '3'\nassert solution('2 2 6 8') == '1'\nassert solution('4 8 9 3') == '1'\nassert solution('2 4 10 8') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3'\nassert solution([\n    '1 3 9 5',\n    '2 2 6 8',\n    '4 8 9 3',\n]) == '3'\nassert solution([\n    '5 2 7 10',\n    '7 4 4 10',\n    '2 4 10 8',\n]) == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n5 2 7 10') == '1'\nassert solution('3\\n1 3 9 5\\n2 2 6 8\\n4 8 9 3') == '1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''12223''') == '95608'\nassert solution('''33322111''') == '656219'\nassert solution('''1232321''') == '-1'\nassert solution('''11111111111111111111111111111111''') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1234321\") == \"94708\"\nprint(solution(\"1234321\"))"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"12\") == \"2\"\nassert solution(\"33322111\") == \"94708\"\nassert solution(\"1232321\") == \"94708\"\nassert solution(\"12321\") == \"1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8\n4''') == '2'\nassert solution('''5\n4''') == '1'\nassert solution('''10\n1''') == '9'\nassert solution('''100\n0''') == '99999'\nassert solution('''10\n123\n12''') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n\n----------------------------------------\n\nWrite a function, which will return the first N numbers in the Fibonacci sequence.\n\nFibonacci numbers are a special case of the sequence of numbers:\n\nF_0 = 0\nF_1 = 1\nF_2 = 1\nF_n = F_{n-1} + F_{n-2}\n\nThe function should return a list of N elements (the Fibonacci numbers). The function should return -1 if N is not a positive integer.\n\n-----Input-----\nThe function should be called with a single integer $n$ (the number of Fibonacci numbers to return).\n\n-----Output-----\nReturn a list of N elements, which is the Fibonacci numbers, if it is a positive integer, otherwise -1.\n\n-----Examples-----\nSample Input 1:\n10\nSample Output 1:\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nSample Input 2:\n-1\nSample Output 2:\n-1\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1234321\") == \"94708\"\nassert solution(\"1232321\") == \"2\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12223') == '3'\nassert solution('1232321') == '94708'\nassert solution('12321') == '-1'\n\"\"\""
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '2'\nassert solution('1234321') == '94708'\nassert solution('8801') == '1'\nassert solution('12345') == '0'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('55') == 55\nassert solution('101') == -1\nassert solution('1234321') == 94708\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 5\n''') == '2'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 6\n''') == '0'\nassert solution('''\n2\n''') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 0 0 0 3') == '6'\nassert solution(\n    '1 2 0 0 5') == '2'\nassert solution(\n    '1 2 0 0 4') == '4'\nassert solution(\n    '1 2 0 0 6') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\nassert solution(sample_input_4) == sample_output_4\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 0 0 3') == '6'\nassert solution('1 2 0 0 3') == '4'\nassert solution('1 2 0 0 4') == '0'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 0 0 0 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"6\"\nprint(solution(input_))\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n0 0 0 0 3\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n1 2 0 0 5\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n1 2 0 0 4\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n1 2 0 0 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 0 0 0 3\n''') == '6'\nassert solution('''\n1 2 0 0 5\n''') == '2'\nassert solution('''\n1 2 0 0 4\n''') == '4'\nassert solution('''\n1 2 0 0 6\n''') == '0'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nprint('all tests passed')"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\n    \"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\n    \"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0.5 -5.301 3.098\n1 1 1\n''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8\n3 2 4\n''') == '9.21068947 2.56226688'\nassert solution('''0.5 -8 8\n3 2 4\n''') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\""
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 2\n2 1\n''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '2'\nassert solution('''7 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '1,2,3,4,5,6,7'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 2\n2 1\n''') == '1'\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 2') == '0'\nassert solution('4 5') == '2'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 2\n2 1\n''') == '1'\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 5') == '0'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('5 3') == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\nassert solution('1 2') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 5 0 3\\n\"\n    \"0 1 1\\n\"\n    \"1 2 2\\n\"\n    \"2 0 4\\n\"\n    \"2 3 1\\n\"\n    \"2 3 3\\n\"\n) == \"11\"\n\nassert solution(\n    \"5 5 0 4\\n\"\n    \"0 1 1\\n\"\n    \"1 0 1\\n\"\n    \"1 2 1\\n\"\n    \"2 0 4\\n\"\n    \"2 3 1\\n\"\n) == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([4, 5, 0, 3]) == \"11\"\nassert solution([5, 5, 0, 4]) == \"infinity\"\nassert solution([3, 3, 1, 2]) == \"2\"\nassert solution([3, 3, 1, 2]) == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('3 3 1 2') == '2'\nassert solution('6 6 1 2 2 2') == 'infinity'\nassert solution('2 1 0 1') == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n''') == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == \"infinity\"\nassert solution('''\n2 1 0 1\n0 1 2\n''') == \"2\"\nassert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == \"11\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data) == \"2\""
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 5 0 3\\n\"\n    \"0 1 1\\n\"\n    \"1 2 2\\n\"\n    \"2 0 4\\n\"\n    \"2 3 1\\n\"\n    \"2 3 3\\n\"\n) == \"11\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '11'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('5 5 0 4') == 'infinity'\nassert solution('3 3 1 2') == '2'"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('3 3 1 2\\n0 1 1\\n1 0 1\\n1 2 1\\nSample Output 4:') == 'infinity'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1 2') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 1 2') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('1 1') == '12'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 2 1 2 1\n2 1 2\n2 3 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2 2 3\n1 1\n2 2 3\n\"\"\") == \"18\"\nassert solution(\"\"\"\n3 2 1 2\n1 1\n2 2 3\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\""
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '18'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 2 1') == '6'\nassert solution('3 3 1 1') == '18'\nassert solution('4 4 4 3') == '9'\nassert solution('4 4 5 3') == '10'\nassert solution('6 1 2 3 1 1 2 3') == '12'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 2 1 2\"\n) == \"6\"\nassert solution(\n    \"4 2 1 2\"\n) == \"0\"\nassert solution(\n    \"3 3 1 1\"\n) == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2 1 2\n2 1 2\n2 3 4\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n3 3 1 1\n1 1\n2 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 2 2 3\n1 1\n2 2 3\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\nassert solution(\"7000000000000000000\") == \"6\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n\n'''"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000000 1') == \"468559\"\nassert solution('1000000 5') == \"49401\"\nassert solution('1000000 16') == \"20\"\nassert solution('9000000000000000000 62') == \"1\""
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\""
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == 0, \"Empty string\"\nassert solution(\"1\") == 1, \"Single digit\"\nassert solution(\"12\") == 2, \"Two digits\"\nassert solution(\"12560\") == 4, \"123 and 561\"\nassert solution(\"123456\") == 8, \"123, 456, 12345, 6, 456, 12345\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 13') == '3'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nprint(solution())\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 9\n5 4 1\n''') == '1'\nassert solution('''\n4 13\n2 2 2 2\n''') == '3'\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"100 100\") == \"100\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"6\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 9\n5 4 1\n''') == '1'\nassert solution('''4 13\n2 2 2 2\n''') == '3'\nassert solution('''18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12'\nassert solution('''10 7\n1 2 3 4 5 6 7\n''') == '7'\nassert solution('''30 40\n7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n''') == '8'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n''') == '0'\nassert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"9\") == \"9\"\nassert solution(\"11\") == \"11\"\nassert solution(\"12\") == \"11\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '5'\nassert solution('5') == '7'\nprint('You passed all tests!')\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\""
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n4\n1 2 3 4\n''') == '4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '15'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1'\n) == '0'\n\nassert solution(\n    '3'\n) == '3'\n\nassert solution(\n    '5'\n) == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n5\n''') == '5'\nassert solution('''\n4\n7 8\n''') == '8'\nassert solution('''\n5\n2 3 4 5 8\n''') == '8'\nassert solution('''\n5\n2 1 3 2 5\n''') == '3'\nassert solution('''\n5\n2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n87654\n''') == '-1'\nassert solution('''\n36\n''') == '-1'\nassert solution('''\n87654\n''') == '-1'\nassert solution('''\n5\n''') == '5'\nassert solution('''\n17\n''') == '17'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nprint('You passed the test')\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''37 48 75''') == '75'\nassert solution('''37 48 85''') == '-1'\nassert solution('''37 48 100''') == '-1'\nassert solution('''4 9 12 34''') == '-1'\nassert solution('''32 99 98''') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\nassert solution('12345678') == '-1'\nassert solution('0') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\nprint(solution(input()))\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nabcd\\nca\\nab\\nabd') == 'ambi'\nassert solution('3\\nabc\\nbca\\ncab') == 'ambi'\nassert solution('3\\nabcd\\nac\\nab') == 'ambi'\nassert solution('3\\nacd\\nabc\\na') == 'impossible'\nassert solution('8\\nhaj\\nha\\nha\\nja\\nja\\nja\\nja\\njb') == 'ambi'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('d 4\\nabc\\nbca\\ncab\\naca\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == 'adcb'\nassert solution('c 4') == 'impossible'\nassert solution('f 2') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('d 4\\ncab\\n') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb\\n') == 'AMBIGUOUS'\nassert solution('a 5\\naaaaaaaaaa\\nb') == 'IMPOSSIBLE'\n\n''''\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin.readline())\n        strlist = []\n        for i in range(n):\n            strlist.append(stdin.readline().strip())\n\n        letter_dict = {}\n        for word in strlist:\n            for char in word:\n                if char not in letter_dict:\n                    letter_dict[char] = 1\n                else:\n                    letter_dict[char] += 1\n\n        temp = sorted(letter_dict.items(), key=lambda item: item[1], reverse=True)\n        if len(temp) == 1 and temp[0][1] == 1:\n            return 'IMPOSSIBLE'\n        elif len(temp) == 1 and temp[0][1] > 1:\n            return 'AMBIGUOUS'\n\n        if temp[0][1] == 1:\n            return ''.join(k[0] for k in temp)\n        else:\n            if len(temp) > 1:\n                return ''.join(k[0] for k in temp[:1]) + ''.join(k[0] for k in temp[1:])\n            else:\n                return ''.join(k[0] for k in temp)\n\n\nfor i in range(int(input())):\n    print(Solution().solution(stdin))\n'''\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\", \"Your solution method is incorrect\"\nassert solution(\"d 4\") == \"adcb\", \"Test case incorrect\"\nassert solution(\"c 4\") == \"IMPOSSIBLE\", \"Test case incorrect\"\nassert solution(\"abc 4\") == \"IMPOSSIBLE\", \"Test case incorrect\"\nassert solution(\"bca 4\") == \"IMPOSSIBLE\", \"Test case incorrect\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('d 4\\nabc\\nbca\\ncab\\naca\\n') == 'adcb'\nassert solution('f 2\\ndea\\ncfb') == 'IMPOSSIBLE'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\nassert solution('b 4\\nabc\\nbca\\ncab\\naca\\n') == 'ambg'\nassert solution('z 4\\nabc\\nbca\\ncab\\naca\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"d 4\\nabc\\nbca\\ncab\\naca\\n\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\\n\") == \"AMBIGUOUS\""
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\nccc\\nbadca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) in range(1, 1001)\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n\nprint(solution(*map(int, input().split())))"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '6', '1 2 3'\nassert solution('2 4 5') == '10', '2 4 5'\nassert solution('100 20 543 12') == '164', '100 20 543 12'\nprint('All test cases passed!')"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3 3 3\n''') == '9'\nassert solution('''\n10 20 0 0\n''') == '10'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"yes\"\nassert solution(\"4 3 3\\n0 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == \"no\"\nassert solution(\"3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == \"yes\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('3 2 3') == 'yes'\nassert solution('3 3 3') == 'no'\nassert solution('2 2 2') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\") == 'yes'\nassert solution(\"3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\") == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('5 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('4 3 3') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"yes\"\nassert solution([4,2,3]) == \"yes\"\nassert solution([3,2,3]) == \"no\"\nassert solution([3,2,3,4,5]) == \"no\"\nassert solution([3,2,3,4,5,6]) == \"yes\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\\n') == 'yes'\nassert solution('2 3 3\\n2 1\\n1 2\\n-1 2\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\\n') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes', \"First\"\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no', \"Second\"\nassert solution('''3 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\n''') == 'yes', \"Third\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == 'yes'\nassert solution('2 2 0') == 'no'\nassert solution('2 1 0') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\nassert solution('''\n4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no'\nassert solution('''\n3 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\n''') == 'yes'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nassert solution('0123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nassert solution('0000') == '1'\nassert solution('23123') == '2'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nassert solution('1234567899') == '2'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('652526') == 4, 'Sample Case 1'\nassert solution('12121131221') == 7, 'Sample Case 2'\nassert solution('123456789') == 1, 'Sample Case 3'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '652526') == '4'\nassert solution(\n    '12121131221') == '7'\nassert solution(\n    '123456789') == '1'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\n\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\n''') == '24'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 6') == '1200'\nassert solution('4 4') == '1200'\nassert solution('10 10') == '10000'\nassert solution('5 5') == '20000'\nassert solution('12 3') == '12000'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 10\n1 2\n2 3\n2 4\n1 5\n1 6\n2 7\n2 8\n2 9\n2 10\n''') == '800'\nassert solution('''\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\nSample Output 4:\n24\n''') == '24'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\nSample Output 5:\n100\n''') == '100'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"6 8\") == \"800\"\nassert solution(\"5 10\") == \"8765\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"1\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"1 3\\n\"\n    \"2 3\"\n) == \"0\"\nassert solution(\n    \"4 4\\n\"\n    \"24 10\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"3 6\\n\"\n    \"4 5\\n\"\n    \"3 5\\n\"\n    \"4 6\\n\"\n    \"2 5\\n\"\n    \"2 6\"\n) == \"24\"\nassert solution(\n    \"6 8\\n\"\n    \"100 500 300 75\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"3 6\\n\"\n    \"4 5\\n\"\n    \"3 5\\n\"\n    \"4 6\\n\"\n    \"2 5\\n\"\n    \"2 6\"\n) == \"800\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 3\n1\n1 2\n2 3\n1 3\n\"\"\"\n    ) == \"0\"\nassert solution(\n\"\"\"\n4 4\n24 10\n1 3\n2 3\n2 4\n1 4\nSample Output 2:\n24\n\"\"\"\n    ) == \"24\"\nassert solution(\n\"\"\"\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n\"\"\"\n    ) == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n1 2\\n1 1') == '0'\nassert solution('3 3\\n1\\n2 3\\n3 4\\n4 5\\n2 3') == '24'\nassert solution('4 4\\n1\\n2 3\\n1 4\\n3 5\\n2 4\\n3 5\\n3 6\\n4 5\\n4 6\\n5 6') == '2400'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n2 1 4 3\n''') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == '-1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"4\") == \"1 2 3 4\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 3 2 4') == '1 4', \"Wrong\"\nassert solution('5\\n1 2 3 4 5') == '1 2 3 4 5', \"Wrong\"\nassert solution('4\\n2 1 4 3') == '-1', \"Wrong\"\n\n----"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1 4'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '-1'\nassert solution('100000000') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('2') == '1 2'\nassert solution('4') == '1 2 3 4'\nassert solution('5') == '1 2 3 4 5'\nassert solution('8') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 2 4\\n\") == \"1 4\", \"Wrong Answer\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1 2 3 4 5\", \"Wrong Answer\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"-1\", \"Wrong Answer\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.#####\\n#####.\\n') == '1'\nassert solution('4 4\\n...#\\n...#.\\n...#.\\n') == '2'\nassert solution('2 3\\n.###.\\n.###.\\n.###.\\n') == '3'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 6') == '5'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 2') == '1'\nassert solution('4 8') == '8'\nassert solution('3 3') == '1'\nassert solution('2 6') == '5'"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5 5\n#####\n#####.\n#####\n#####.\n##.##.\n\"\"\") == \"5\"\nassert solution(\n\"\"\"\n10 10\n...\n.#.#.\n##.##.\n.#.#.\n.#.##.\n..#..\n.####\n.###.\n\"\"\") == \"12\"\nassert solution(\n\"\"\"\n30 30\n.##.##.\n.##.##.\n.#.#.#.\n.#.#.#.\n.##.##.\n.##.##.\n.##.##.\n.#.#.#.\n.##.##.\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 8\n.######.\n.######.\n..#..#..\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3 3\n...\n.#.\n...\nSample Output 3:\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 6\n.#####\n#####.\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 5\n...\n.#\n...\nSample Output 3:\n2\n''') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n.#####\\n#####.\\n') == '5'\nassert solution('3 3\\n...\\n...\\n') == '1'\nassert solution('3 3\\n...\\n...\\n') == '1'\nassert solution('3 3\\n...\\n...\\n') == '1'\nassert solution('3 3\\n...\\n...\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"2 4\") == \"2\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"8\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 8') == \"8\"\nassert solution('3 3') == \"1\"\nassert solution('2 6') == \"5\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 3') == '13'\nassert solution('4 3 3') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('3 1 2') == '-1'\nassert solution('5 4 4 4 3') == '5 4 4 4 3'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\") == \"13\"\nassert solution(\"4 2 6 1 9 7 5 5 7 1 2 3 3\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\nassert solution(\"3 3 3\") == \"13\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2') == '6', 'Should return 6'\nprint('Hurray! You solved it')\n'''"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\nassert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '-1'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 5\\n2 1 1 1 2') == '6'\nassert solution('3 3 3\\n3 1 1') == '13'\nassert solution('3 2 2\\n1 2') == '4 2 6 1 9 7 5 5 7 1 2 3 3'\n\nstdin = \"\"\"4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nassert solution('''3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\nassert solution('''3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 5\") == \"6\"\nassert solution(\"3 3 3\") == \"13\"\nassert solution(\"3 2 2\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"19 12 2 18 5 5 7 5 7 1 2 3 3\""
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1 1\"\nassert solution(\"4\") == \"1 5\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"1\") == \"1 1\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\nassert solution('''\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '3 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3\n3\n3\n3\n1\n2\n3\n4\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n\"\"\") == \"1 5\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0 1\"\nassert solution(\"1\") == \"1 0\"\nassert solution(\"2\") == \"1 0\"\nassert solution(\"3\") == \"1 0\"\nassert solution(\"4\") == \"1 0\"\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 2'\nassert solution() == '2 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 5'\nassert solution('2') == '1 5'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1 1'\nassert solution('5') == '5 1'\nassert solution('10') == '1 1'\nassert solution('11') == '1 1'\nassert solution('101') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n4\n3\n2\n1\n0''') == '1 5'\nassert solution('''5\n4\n3\n2\n1\n0''') == '3 2'\nassert solution('''5\n4\n3\n2\n1\n0''') == '5 2'\nassert solution('''5\n4\n3\n2\n1\n0''') == '4 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n3\\n4\\n3\\n2\\n1\\n4\\n') == '1 3 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5 1'\nassert solution('6') == '1 5'\nassert solution('7') == '1 5'\nassert solution('8') == '1 6'\nassert solution('9') == '1 5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution(\"\") == \"1\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 0\\n3 1\\n3 2\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\") == \"5\\n\"\nassert solution(\"10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\") == \"5\\n\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"1\"\nassert solution(\n    \"6\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\\n5 1\\n\") == \"5\"\nassert solution(\n    \"9\\n5 0\\n6 1\\n4 2\\n3 3\\n8 4\\n7 5\\n2 6\\n6 7\\n1 8\\n\") == \"6\"\nassert solution(\n    \"6\\n4 0\\n5 1\\n3 2\\n8 4\\n7 5\\n2 6\\n6 7\\n1 8\\n\") == \"9\"\nassert solution(\n    \"11\\n10 0\\n9 1\\n8 2\\n7 3\\n6 4\\n5 5\\n4 6\\n3 7\\n2 8\\n1 9\\n\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'\nassert solution('5\\n5 0\\n3 1\\n2 2\\n1 3\\n0 4') == '6'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"5\"\nassert solution(\"3 4\") == \"5\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\nassert solution('''\n6\n3 0\n1 1\n2 1\n3 1\n4 1\n5 1\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\nassert solution('''6\n3 0\n1 1\n2 1\n1 3\n0 4\n''') == '5'\nassert solution('''8\n3 0\n1 1\n2 1\n1 3\n0 4\n0 5\n0 6\n1 7\n''') == '7'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"8\") == \"4\"\nassert solution(\"9\") == \"5\"\nassert solution(\"13\") == \"0\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''\n8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\nassert solution('''\n9\n1 2 2\n1 3 1\n1 4 5\n1 5 5\n2 6 3\n3 7 3\n4 8 1\n5 9 2\n''') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\nassert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == \"4\"\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == \"0\""
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\"\n) == \"4\\n3\\n4\\n5\\n6\"\nprint(solution(\n    \"5\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\nSample Output 3: \\n5\"\n))"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n1 2 2\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\\n\"\nassert solution(\n    \"4\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n\") == \"0\\n\"\nassert solution(\n    \"5\\n1 2 2\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"5\\n\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"4\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"1 2 2 3\") == \"2\"\nassert solution(\"1 2 2 3 4\") == \"1\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\nV1 V2 V1 V1 V2''') == '5'\nassert solution('''2 1\nV1 V2 V1 V1 V2''') == '6'\nassert solution('''3 1\nR10 V1 V2 V1 E''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\nR10 V1 V2 V1 E\n''') == '6'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 3\nV1 V2 V1 V1 V2\n''') == '4'\nassert solution('''\n2 4\nV1 V2 V1 V1 V2\nR2 R1 V1 V2 V1 E\n''') == '36'\n''')"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\nV1 V2 V1 V1 V2') == '6'\nassert solution('1 2\\nR10 V1 V2 V1 E') == '31'\nassert solution('1 2\\nV1 V2') == '3'\nassert solution('1 2\\nR10 V1 V1 V1 E') == '10'\nassert solution('1 2\\nV1 V2') == '3'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\nV1 V2 V1 V1 V2\n''') == '6'\nassert solution('''\n2 2\nV1 V2 V1 V1 V2\nV2 V3 V4 V5\n''') == '11'\nassert solution('''\n3 2\nV1 V2 V1 V1 V2\nR10 V1 V2 V1\n''') == '20'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR1 V1 V2 V1 E\n''') == '6'\nassert solution('''\n1 2\nV1 V2 E\n''') == '2'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '10'\n\nstdin = '''\\\n5 2\nR1 V1 V1 V1 V2\nR2 V2 V1 V1 V2\nR1 V1 V1 V1 V1\nR1 V1 V1 V1 E\nR2 V2 V2 V2 V2\nR2 V2 V2 V2 V2\nR1 V1 V1 V1 V1\nR1 V1 V1 V1 V1\n'''.strip().split('\\n')\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"30\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 25\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 10\n''') == '38'\nassert solution('''\n3 11\n''') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '1'\nassert solution('1 2') == 'impossible'\nassert solution('2 10') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 12') == '12'\nassert solution('10 13') == 'impossible'\nassert solution('9 216') == '546'\nassert solution('10 21') == 'impossible'\nassert solution('10 22') == '22'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 25') == '38', \"Wrong answer in test case 10/25\"\nassert solution('9 216') == '546', \"Wrong answer in test case 9/216\"\nassert solution('5 7') == 'impossible', \"Wrong answer in test case 5/7\""
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 24') == '38', solution('10 24')\nassert solution('10 11') == 'impossible', solution('10 11')\nassert solution('9 216') == '546', solution('9 216')"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n\n\"\"\""
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == \"466.662\"\nassert solution(\n'''3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == \"10.00005\"\nassert solution(\n'''10 10 1 0.25\n0 5 0.3333\n''') == \"2.0\"\nassert solution(\n'''10 10 1 0.25\n0 5 0.3333\n''') == \"2.0\"\nassert solution(\n'''20 10 1 0.25\n0 5 0.3333\n''') == \"2.0\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10\\n\") == '466.662'\nassert solution(\"3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n\") == '10.00005'"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2 1') == '10.00005'\nassert solution('3 4 1 0') == '2.0'\nassert solution('1 3 0.25 8') == '10.00005'\nassert solution('0 2 0.25 8') == '2.0'\nprint(solution(input()))\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"20 60 2 1\") == '466.662'\nassert solution(\"3 4 2 1\") == '10.00005'\nassert solution(\"5 15 0.33333 30\") == '7.71198'\nassert solution(\"20 60 2 1\") == '7.7'\nassert solution(\"3 4 2 1\") == '2'\n\"\"\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 20 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nassert solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\nassert solution(\"\"\"\n1 1 0.5\n0 1\n\"\"\") == \"1.5\""
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2 1') == '10.00005'\nassert solution('3 5 1 1') == '2.0'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4 2 1') == '10.00005'\nassert solution('3 4 1 0') == '2.0'\nassert solution('20 60 2 1') == '466.662'\nassert solution('5 15 0.33333 30') == '466.662'\nassert solution('22 60 0.66666 70') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n''') == '466.662'\nassert solution('''\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005'"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\nblue red 1.0\nred pink 1.5\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n''') == '1.500000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\nassert solution('''\n1\nblue red 1.0\ngreen yellow 1.9\norange red 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''blue red 1.0\nred pink 1.5\norange pink 1.9\ngreen yellow 1.9''') == '1.500000000000000'\n\nassert solution('''blue red 1.0\nred pink 1.5\ngreen yellow 1.9\nblue green 1.9''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.00000000000000\"\nassert solution(\"4\") == \"10.0000000000000\"\n\"\"\""
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0.000000000000000\"\nassert solution(\"1\") == \"0.000000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"1.000000000000000\"\nassert solution(\"4\") == \"1.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.500000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\""
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''3\nblue red 1.0\nred pink 1.5\nblue green 1.9\n''') == '1.900000000000000'\nassert solution('''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n\"\"\") == \"1.500000000000000\"\n\nassert solution(\n    \"\"\"\n2\nblue red 1.0\nred pink 1.5\n\"\"\") == \"0.000000000000000\"\n\nassert solution(\n    \"\"\"\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n\"\"\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1.00000000000000\"\nassert solution(\"2\") == \"1.00000000000000\"\nassert solution(\"3\") == \"1.00000000000000\"\nassert solution(\"4\") == \"1.00000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0.000000000000000\"\nassert solution(\"1\") == \"1.000000000000000\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"3\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\nblue pink 1.0\nred pink 1.5\nblue red 1.0\n\"\"\") == \"1.500000000000000\"\nassert solution(\"\"\"\n2\nblue red 1.0\nred pink 1.5\n\"\"\") == \"0.000000000000000\"\nassert solution(\"\"\"\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n\"\"\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == 'too many'\nassert solution('1 1') == 'too many'\nassert solution('1 1 1 1') == 'too many'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"too many\"\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == 'too many'\nassert solution('1 1') == 'too many'\nassert solution('2 1') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n2 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n'''\n) == '180'\nassert solution(\n'''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n'''\n) == '22'\nassert solution(\n'''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n'''\n) == '0'\nassert solution(\n'''\n8 7 9\n1 1 1\n3 1 2\n1 1 2\n1 2 2\n3 1 1\n2 2 1\n1 2 1\n1 2 2\n1 2 1\n1 2 2\n'''\n) == '-1'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '0'\nassert solution('''3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\n0\n''') == 'too many'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '0'\nassert solution('''\n10 3 2 1 1 1 1 2 2 2\n2 5 2\n2 1 2\n3 3 4 5\n1 6\n''') == 'too many'\nassert solution('''\n10 3 2 1 1 1 1 2 2 2\n2 5 2\n2 1 2\n3 3 4 5\n1 6\n''') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\n\nassert solution('''\n5 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '22'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 1:\n180\n\nSample Input 2:\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 2:\n22\n\nSample Input 3:\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 3:\ntoo many\n''') == '0'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 1:\n180\n\nSample Input 2:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 2:\n22\n\nSample Input 3:\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\ntoo many\n''') == 'too many'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 1:\n180\n\nSample Input 2:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 2:\n22\n\nSample Input 3:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\ntoo many\n''') == 'too many'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 1:\n180\n\nSample Input 2:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 2:\n22\n\nSample Input 3:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\ntoo many\n''') == 'too many'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 1:\n180\n\nSample Input 2:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 2:\n22\n\nSample Input 3:\n3 2 2 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\ntoo many\n''') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 1 1 1 0\") == \"180\"\nassert solution(\"3 2 2 1 1\") == \"22\"\nassert solution(\"3 1 2\") == \"0\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nu 3\\n') == '20 20'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nu 3\\n') == '17 17'\nassert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nu 3\\nright 7\\ndown 2\\nleft 4\\nu 3\\n') == '-1 -1'"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 8 5\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n6 8 5\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6 8 5\\n\"\n    \".#.\\n\"\n    \"###\\n\"\n    \"###\\n\"\n    \"###\\n\"\n    \"up 3\\n\"\n    \"right 7\\n\"\n    \"down 2\\n\"\n    \"left 4\\n\"\n    \"up 3\\n\") == \"20 20\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 8 5\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3') == '20 20'\nassert solution('3 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\nup 3\\nSample Output 3:') == '17 17'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('371') == 'impossible'\nassert solution('310') == '300'\nassert solution('90') == '88'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n371\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''\n310\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2\n2 40 65\n2 100 150\n2 300 320\n''') == '88'\nassert solution('''\n1\n2\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''\n3\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"impossible\"\nassert solution(input) == \"300\""
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n2\n2 20 35\n2 88 200\n''') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '300'\nassert solution('3') == '88'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('3\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == '88'\nassert solution('3\\n2\\n1 10\\n3\\n2 3\\n1 1\\n1 1') == 'impossible'\nassert solution('3\\n2\\n1 10\\n3\\n2 3\\n1 1\\n1 1') == '10'\nassert solution('3\\n2\\n1 20\\n3\\n2 3\\n1 1\\n1 1') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3\n2 40 65\n2 100 150\n2 300 320\n''') == 'impossible'\nassert solution('''\n310\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\nassert solution('''\n90\n2\n2 20 35\n2 88 200\n''') == '88'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == 'impossible'\nassert solution(input('3\\n2 40 65\\n2 100 150\\n2 300 320\\n')) == '300'\nassert solution(input('310\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n')) == 'impossible'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"....##....###\") == \"can fold\"\nassert solution(\"##.#.#####.##.#####.#####\") == \"can fold\"\nassert solution(\"..#######..##.##.###.##.###\") == \"can fold\"\nassert solution(\"#.##..#..##...##.#####.##.#\") == \"can fold\"\nassert solution(\"#.##...#.##..#..##..##.##..#\") == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('......\\n......\\n######\\n......\\n......\\n......\\n') == 'can fold'\nassert solution('......\\n##...\\n...##\\n##...\\n...##\\n......\\n......\\n') == 'can fold'\nassert solution('......\\n....#\\n##.#.\\n##.#.\\n#...#\\n#...#\\n......\\n......\\n') == 'cannot fold'\n\n----\n-----\n-----\n----\n----\n-----\n----\n----\n----\n-----\n-----\n-----\n----\n----\n-----\n-----\n-----\n----\n----\n-----\n-----\n-----\n----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----\n-----"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_str_1) == 'cannot fold'\nassert solution(input_str_2) == 'can fold'\nassert solution(input_str_3) == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"......\\n#.....\\n##...#\\n......\") == \"can fold\"\nassert solution(\"......\\n....#.\\n##...#\\n......\") == \"cannot fold\"\nassert solution(\"......\\n....#.\\n##...#\\n#.....\") == \"can fold\"\nassert solution(\"......\\n###.#\\n##...#\\n......\") == \"can fold\"\nassert solution(\"......\\n#####\\n##...#\\n......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('......') == 'cannot fold'\nassert solution('..#..') == 'cannot fold'\nassert solution('##..#') == 'can fold'\nassert solution('#..##') == 'can fold'\nassert solution('......') == 'cannot fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('......') == 'cannot fold'\nassert solution('##...##...#') == 'cannot fold'\nassert solution('..##..##......') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('..##..') == 'can fold'\nassert solution('....#') == 'cannot fold'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('abccba') == 'abccba'\nassert solution('abcddddd') == 'abcddddd'\nassert solution('aabccba') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('aabccbaa') == 'aabccbaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == ''\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"abcefgabc\"\n) == \"abc\"\nassert solution(\n    \"abcbabcba\"\n) == \"abcba\"\nassert solution(\n    \"aaaa\"\n) == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 4\n2 5\n''') == '4'\nassert solution('''3\n1 4\n2 10\n0 15\n''') == '6'''\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n3\n1 3\n4\n0 2''') == '4'\nassert solution('''2\n1 4\n2 5\n0 1''') == '5'\nassert solution('''3\n1 4\n2 5\n0 1''') == '6'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('2') == '4'\nassert solution('3') == '6'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 4\n2 5\n2 10005''') == '6'\nprint('All tests passed!')\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\nassert solution(\"2\\n1 4\\n2 5\\n\") == \"4\"\nassert solution(\"2\\n1 4\\n2 10005\\n0 15\\n\") == \"6\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2\n0 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 2\n0 4\n0 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 10\n1 2\n4 5\n3 6\n0 7\n8 8\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"4\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '4'\nassert solution('1 4') == '4'\nassert solution('2 5') == '6'\nassert solution('1 4 2 5') == '4'\nassert solution('2 10005') == '6'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nassert solution('1 2 3 2 1') == '3'\nassert solution('3 1 3 1') == '0'\n\n'''\n\n\n'''"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n7\n2 3 4 4 8 12 24\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n7 7 7\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2 3 2 1\n\"\"\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 4 4 8 12 24\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n7 7 7\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 2 3 2 1\n\"\"\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\n\nassert solution('''\n3\n7 7 7\n''') == '0'\n\nassert solution('''\n5\n1 2 3 2 1\n''') == '3'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nprint(solution())\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3 7 7 7\") == \"3\"\nassert solution(\"5 1 2 3 2 1\") == \"0\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\n\nassert solution('''\n3\n7 7 7\n''') == '0'\n\nassert solution('''\n5\n1 2 3 2 1\n''') == '0'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == '2'\nassert solution('3') == '3'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n2 3 4 4 8 12 24\n''') == '2'\nassert solution('''\n3\n7 7 7\n''') == '3'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('1 1 1') == '0'\n\nimport os\nimport sys"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n2 5 4\nS#.F.\n.MFMG\n\"\"\") == \"3\", \"First Example\"\nassert solution(\n    \"\"\"\n1 2 1\nGS\n\"\"\") == \"1\", \"Second Example\"\nassert solution(\n    \"\"\"\n3\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2 1\nGS''') == '1'\nassert solution('''3 3 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\") == \"3\"\nassert solution(\"1 2 1\\nGS\") == \"1\"\nassert solution(\"2 2 10\\nS#\\n#G\") == \"1\""
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"2 5 4\nS#.F.\n.MFMG\"\"\") == \"3\", \"Should find a minimum of three days!\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '-1'"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('1 2 2') == '-1'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"1\"\nprint(solution(input))\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\nS..\n.#.\n..G\nDRRDD\n''') == '1'\nassert solution('''\n3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nSSSS\\n.\") == \"1\"\nassert solution(\"3 7\\nSSSS\\n.......\\n\") == \"1\"\nassert solution(\"3 7\\nS..\\n.......\\n\") == \"0\"\nassert solution(\"3 7\\n...\\n.......\\n\") == \"1\"\nassert solution(\"3 7\\n.#.\\n.#.\\n.#.\\nSSS\\n.\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nS\\nS\\n.G') == \"1\"\nassert solution('2\\nS..S\\n...G') == \"2\"\nassert solution('3\\n.S.\\nS.G') == \"2\"\nassert solution('4\\n.....\\nG.S.\\n.G.S.') == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\nS..\\n.#.\\n..G') == '1'\nassert solution('3 7\\n.......\\n.G.##S.\\n.......\\nLDLDLLDR') == '1'\nassert solution('3 7\\n.#.....\\n.G.##S.\\n.......\\nLDLDLLDR') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"..S\") == \"1\"\nassert solution(\"S.G..\") == \"1\"\nassert solution(\"S.G#S\") == \"1\"\nassert solution(\"G#.##\") == \"1\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input.read()) == \"1\"\ninput.read()"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(samples[0]) == '1'\nassert solution(samples[1]) == '1'\nassert solution(samples[2]) == '2'"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n2 2\n....\n...#\n\"\"\") == \"1\"\nassert solution(\n    \"\"\"\n3 3\nS..\n.#.\n..G\nDRRDD\n\"\"\") == \"1\"\nassert solution(\n    \"\"\"\n3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR\n\"\"\") == \"1\"\nassert solution(\n    \"\"\"\n3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'\nassert solution('0') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'\nassert solution('0') == 'impossible'\n'''"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('1') == '200'\nassert solution('2') == 'uncertain'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"1000200 799\"\nassert solution(\"2\") == \"uncertain\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'uncertain'\nassert solution('1') == 'impossible'\nassert solution('1000') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"1,0\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1000200 799\"\nassert solution() == \"impossible\"\nassert solution() == \"uncertain\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\\n') == '1000200 799'\nassert solution('2\\n100 0 100\\n0 200 199\\n') == 'impossible'\nassert solution('3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\\n') == '1000200 799'\n\n----------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1000200 799'\nassert solution('2') == 'impossible'\nassert solution('3') == '1000200 799'\nassert solution('3') == '1000200 799'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n4 7\\n9 8\\n14 17\\n19 18') == '2 1'\nprint(solution('2\\n4 7\\n9 8\\n14 17\\n19 18'))"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"2 1\\n1 2\"\nassert solution(\"2\\n4 7\\n19 17\\n9 8\\n\") == \"2 1\\n1 2\"\nassert solution(\"2\\n4 7\\n19 18\\n9 8\\n\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n7 8\n12 16\n19 18\n20 20\n''') == '2 1 2 1 1'\nassert solution('''\n5\n7 8\n12 16\n20 19\n20 20\n''') == '1 1 1 1 2'\nassert solution('''\n5\n7 8\n12 16\n20 20\n20 19\n''') == '1 1 1 2 2'\nassert solution('''\n5\n7 8\n12 16\n20 19\n20 20\n''') == '2 2 2 1 1'\n'''\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '1'\nassert solution('2') =='syntax error'\nassert solution('2') =='syntax error'\nassert solution('2') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n7\n9 8\n14 17\n19 18\n''') == '2\\n1\\n'\nassert solution('''\n5\n9 7\n14 17\n19 18\n6 8\n15 18\n''') == '1\\n2\\n'\nassert solution('''\n10\n7\n14 17\n9 7\n19 18\n6 8\n15 18\n7 1\n''') == '1\\n2\\n'\nassert solution('''\n2\n''') =='syntax error\\n'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\\\n3\n4 7\n9 8\n14 17\n19 18\n\"\"\") == \"\"\"2\n1\n\"\"\", \"\"\"\\\n2\n1\n\"\"\", \"\"\"\\\n1\n2\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\"\\\nsyntax error\n\"\"\", \"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''2\n4 7\n14 17\n9 8\n19 18\n''') == '1'\nassert solution('''2\n4 7\n19 18\n9 8\n14 17\n''') =='syntax error'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2\\n4 7\\n9 8\\n14 17\\n19 18\\n\") == \"2 1\\n1 2\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 80 57 _ _ _ _ 101 _ _ _\\n_ _ _ _ _ _ _ _ _ _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ 85 63 153\") == \"8640\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\") == \"8640\""
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _ _\\n') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('160 _ _ 136 _ _ _ _ 170') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ _ 12 60 _ 90 _\\n') == \"1\"\nassert solution('160 _ _ _ _ _ _ _ _\\n_ _ _ _ 120 _ _ 144 _ _\\n') == \"8640\"\nassert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ _ 12 60 _ 90 _\\n') == \"1\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1\"\nassert solution(input_) == \"many\"\n\"\"\""
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ 17') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ _ _ _ _ _ _ 85 63 153\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"_ _ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\n_ _ _ _ _ _ _ _ _ _\\"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _\\n') == '8640'\nassert solution('85 55 _ 99 51 _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\n\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"10 1\") == \"8\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"8\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\nprint(solution())"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nprint('First puzzle correct')\n\nprint('Second puzzle correct')\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 2 3') == '2'\nassert solution('2 3 1') == '1'\nassert solution('5 6 7 8 9 10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '8'\nassert solution('10') == '24'\nassert solution('1') == '0'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n2 1\n1 5\n3 1\n4 3\n5 6\n7 8\n5 9\n5 10\n''') == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 2\n1 3''') == '2'\nassert solution('''5\n2 1\n1 5\n3 1\n4 3\nSample Output 3:\n8''') == '8'\nassert solution('''10\n2 1\n1 5\n3 1\n4 3\n5 6\n7 8\n5 9\n5 10''') == '24'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    treetreetreetree\n    ''') == '3'\nassert solution('''\n    treetreetreetree\n    ''') == '0'\nassert solution('''\n    oranges\n    apples\n    ''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"0\"\nassert solution(\"apples\") == \"0\""
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\neo\no\n''') == 'eo'\nassert solution('''\nab\na\n''') == 'ab'\n\nassert solution('''\naac\nac\n''') == 'aac'\n\nassert solution('''\nae\na\n''') == 'ae'\n\nassert solution('''\nart\nare\n''') == 'art'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nsskqpsohlyfhknr\nkoztqywttbrycjx\n''') == 'koztqywttbrycjx'\n\nassert solution('''\ncoyotjvjjjwyqthj\ndppfueoujnqnkic\n''') == 'dppfueoujnqnkic'\n''' == '3')\n\nassert solution('''\nqjkzszjkzzqkms\ndjkjqhjkzqrkzj\n''') == 'djkjqhjkzqrkzj'\n\nassert solution('''\nbmsqjqkxkmqkzn\ndnqrdmvdfmdrxk\n''') == 'dnqrdmvdfmdrxk'\n\n''' == '0')"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''secretmessage\nboot\n''') == 'essa'\nassert solution('''treetreetreetree\nwood\n''') == '3'\nassert solution('''oranges\napples\n''') == '0'\nassert solution('''sasdfasdfasdfasdfa\ndwdgfghfghjkjhgf\n''') == '5'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('boot') == 'essa'\nassert solution('treetreetreetree') == '3'\nassert solution('apples') == '0'\nassert solution('oranges') == '0'\nassert solution('aabccccccdddcccccdddddddddddddddccccccccccccdddccccccccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == solution(sample_input_2) == solution(sample_input_3)\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nsecretmessage\nboot\n\"\"\") == \"essa\"\nassert solution(\"\"\"\ntreetreetreetree\nwood\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nv^v^v^v^v\n.^.^.^.\n.#.#.^#.\n##v.^##.\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('10') == '9'\nassert solution('6') == '1'\nassert solution('13') == '4'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \">^<^\\n######\\n#.#..#\\n#....#\\n#..R.#\\n#....#\\n######\\n\") == \"2\"\nassert solution(\n    \"v<^>\\n####\\n#.R#\\n#..#\\n####\\n\") == \"4\"\nassert solution(\n    \"<<<\\n####\\n#.R#\\n#..#\\n####\\n\") == \"1\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('6') == '5'\nassert solution('7') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('3') == '1'\nassert solution('5') == '4'\n\nimport os\nimport sys\n\nfrom io import StringIO\n\nclass Capturing(list):\n    def __enter__(self):\n        self._stdout = sys.stdout\n        sys.stdout = self._stringio = StringIO()\n        return self\n    def __exit__(self, *args):\n        self.extend(self._stringio.getvalue().splitlines())\n        del self._stringio    # free up some memory\n        sys.stdout = self._stdout"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '4'\nassert solution('6') == '2'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n>^<^\n######\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('2') == '3'\nassert solution('10 1 0 2 5 2 2 7') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\nassert solution('5') == '15'\nassert solution('6') == '21'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('''\n2\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '11'\nassert solution('''\n2\n5 1 1 1 1 1 1\n1 5 1 1 1 1 1\n''') == '10'\nassert solution('''\n1\n1 1\n1 1\n''') == '2'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n\"\"\") == \"3\""
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\n\nimport os\nimport sys\n\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        print('------------')\n        print(out)\n        print('------------')\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"1\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n\"\"\"\n        output = \"\"\"3\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n\"\"\"\n        output = \"\"\"6\"\"\"\n        self."
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1000000000\") == \"1000000000\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\\n') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1\\n') == '6'\nassert solution('2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2\\n') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(samples.SAMPLE_1) == \"3\"\nassert solution(samples.SAMPLE_2) == \"6\"\nassert solution(samples.SAMPLE_3) == \"11\"\nassert solution(samples.SAMPLE_4) == \"10\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n60.0 0.0 50.0 170.0\n3\n40.0 0.0 0.0 0.0\n5.0 20.0 5.0 170.0\n95.0 0.0 95.0 80.0\n''') == '168.7916512460'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '163.5274740179'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0') == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('0.0 0.0 4.0 0.0') == '1.000000000'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 80.0') == '168.7916512460'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('40.0 0.0 0.0 0.0') == '163.5274740179'\nassert solution('95.0 0.0 95.0 80.0') == '164.9285763589'\n\n'''\n\nimport math"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0') == '163.5274740179'"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == \"168.7916512460\"\nprint(solution(\n    '60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0'))\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0') == '163.5274740179'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('0.0 1.0 4.0 1.0') == '3.7320508076'\nassert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\n\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\nassert solution(\"7 8 1\") == \"impossible\"\nassert solution(\"6 4 3\") == \"impossible\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\"\"\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 5\") == \"madam\"\nassert solution(\"6 5 3\") == \"rarity\"\n\"\"\"\nfrom itertools import permutations\nfrom math import factorial"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('1 2 3') == 'IMPOSSIBLE'\nassert solution('1 4 7') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'\nassert solution('''\n6 5 5\n''') == 'I am the king'\n'''\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 5 3\nrarity''') == 'rarity'\nassert solution('''9 8 1\ncanterlot''') == 'canterlot'\nassert solution('''5 3 5\nmadam''') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('7 8 1') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\nLeaves, glowing in autumn sun,\n\n\nfall in Virginia. \n\"\"\") == \"\"\"\nLeaves, glowing in autumn sun,\n\nfall in Virginia. \n\"\"\"\n\nassert solution(\n\"\"\"\nWho would know if we had too few syllables?\n\"\"\") == \"\"\"\nWho would know if we had too few syllables?\n\"\"\"\n\nassert solution(\n\"\"\"\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters are in Washington, D.C.\nGlobal headquarters"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\\nProgrammers have fun!.\\n\") == \"Who would know if we had too few syllables?\\nProgrammers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('I dream of my childhood.') == 'I dream of my childhood.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!\") == \"International\\ncontest- motivation high\\nProgrammers have fun!\""
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nBlue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\n''') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('''\nNational flower:\n\nVanilla,\nCranberry,\nWatermelon,\nTulip,\nButtercup,\nRose,\nRosemary,\nDaisy,\nSunflower,\nTigerlily,\nFallow,\nFern\n''') == 'National flower:\\nVanilla,\\nCranberry,\\nWatermelon,\\nTulip,\\nButtercup,\\nRose,\\nRosemary,\\nDaisy,\\nSunflower,\\nTigerlily,\\nFallow,\\nFern'\nassert solution('''\nHow many cars do you own?\nFord, Mercedes, BMW, Nissan\n''') == 'How many cars do you own?\\nFord,\\nMercedes,\\nBMW,\\nNissan'\nassert solution('''\nThe cow jumped over the moon.\n''') == 'The cow jumped over the moon.'\n\nassert solution('''\nTomatoes,\nPotatoes,\nTomatoes,\nTomatoes\n''') == 'Tomatoes,\\nPotatoes,\\nTomatoes,\\nTomatoes'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\n\n------TEST CASES\nTEST 1\nINPUT1= 'Blue Ridge mountain road.'\nEXPECTED_OUTPUT = 'Blue Ridge mountain road.'\nOUTPUT = solution(INPUT1)\nassert OUTPUT == EXPECTED_OUTPUT\n\nTEST 2\nINPUT2 = 'Leaves, glowing in autumn sun, fall in Virginia.'\nEXPECTED_OUTPUT = 'Leaves, glowing in autumn sun,\\nfall in Virginia.'\nOUTPUT = solution(INPUT2)\nassert OUTPUT == EXPECTED_OUTPUT\n\nTEST 3\nINPUT3 = 'Who would know if we had too few syllables?'\nEXPECTED_OUTPUT = 'Who would know if we had too few syllables?'\nOUTPUT = solution(INPUT3)\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.') == 'A haiku is a three-line poem in which the first and third lines contain $5$ syllables each, and the second line contains $7$ syllables.'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'Thore'\nassert solution('2') == 'Thore'\nassert solution('2') == 'Thore'\nassert solution('2') == 'Thore'\nassert solution('3') == 'Thore'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt') == 'Thore sucks'\nassert solution('3\\nThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt') == 'Thore is awesome'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nThoreTiemann\nThoreHusfeldt\n\"\"\") == \"Thore is awesome\"\n\nassert solution(\"\"\"\nThoreHusfeldter\nThoreHusfeldt\n\"\"\") == \"Thore sucks\"\n\nassert solution(\"\"\"\nThoreHusfeldt\nJohanSannemo\n\"\"\") == \"ThoreH is awesome\""
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'ThoreH'\nassert solution('2') == 'Thore is awesome'\nassert solution('2') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\nThoreTiemann\\nJohanSannemo\\nThoreHusfeldt') == 'Thore is awesome'\nassert solution('3\\nThoreHusfeldt\\nJohanSannemo\\nThoreTiemann') == 'Thore sucks'\nassert solution('3\\nThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt') == 'Thore sucks'\nassert solution('3\\nThoreHusfeldt\\nJohanSannemo\\nThoreHusfeldt') == 'Thore sucks'\nassert solution('3\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt''') == 'Thore sucks'\nassert solution('''\n3\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt''') == 'Thore is awesome'\nassert solution('''\n2\nThoreHusfeldt\nJohanSannemo''') == 'ThoreH'\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt''') == 'Thore'\nassert solution('''\n2\nThoreHusfeldt\nJohanSannemo''') == 'Thore'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\nThoreTiemann\\nThoreHusfeldt') == 'ThoreH'\nprint(solution('2\\nThoreHusfeldt\\nThoreHusfeldt'))\nassert solution('2\\nThoreHusfeldt\\nThoreSannemo') == 'ThoreS'\nprint(solution('2\\nThoreHusfeldt\\nThoreSannemo'))"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"Thore sucks\"\n\nassert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"Thore is awesome\"\n\nassert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"Thore sucks\"\n\nassert solution(\"\"\"\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\nThoreHusfeldt\n\"\"\") == \"Thore is awesome\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"Thore sucks\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nLLR\nLRL\nLRR\nLLR\nP*P\nR*R\nP*P\nR*R\nR*R\nR*R\nR*R\nP*P\nR*R\nR*R\nP*P\nR*R\nP*P\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR*R\nR"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('*') == '10'\nassert solution('L*R') == '25'\nassert solution('*P') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n\n'''\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''L*R\nP*P''') == '6'\nassert solution('''L*R\nL*R''') == '6'\nassert solution('''L*R\nP*P\nP*P''') == '6'\nassert solution('''P*P\nL*R\nP*P''') == '6'\nassert solution('''P*P\nP*P\nL*R\nP*P''') == '6'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''L*L*R\n*R*R*L''') == '6'\nassert solution('''L*R*R\nL*R*R\nL*R*R''') == '25'\nassert solution('''L*R*R*R\n*R*L*R\n*R*L*R\n*R*R*R''') == '33'\nassert solution('''L*R*R\n*R*L*R\n*R*R*R\n*R*R*R''') == '42'\nassert solution('''L*R*R\n*R*R*R\n*R*R*R\n*R*R*R\n*R*R*R''') == '42'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 'yes'\nassert solution('4') == 'wait what?'\nassert solution('1') == 'yes'\nprint('All tests passed!')"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nmoo not foo\\n') == 'wait what?'\nassert solution('2\\nherp is derp\\nderp is herp\\nderp is derp\\nherp is derp\\n') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nderp is derp\\nherp is derp') == 'yes'\nassert solution('3\\noskar not lukas\\nlukas is smart\\nlukas is smart\\nlukas is smart') == 'yes'\nassert solution('2\\nherp is derp\\nherp is derp\\nherp is derp\\nderp is derp') == 'wait what?'\nassert solution('1\\nmoo not foo') == 'yes'\nassert solution('1\\nfoo is bar') == 'wait what?'"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is derp\nherp is der"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\n\"\n    \"sheep is sheep\\n\"\n    \"sheep is sheep\\n\"\n) == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\noskar not lukas\\nderp is herp\\nherp is herp\\nderp is herp\\nderp is derp\\nherp is derp\\nherp is derp\\nderp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nherp is derp\\nher"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"yes\"\nassert solution(\"2\") == \"wait what?\"\nassert solution(\"4\") == \"yes\"\nassert solution(\"5\") == \"wait what?\"\nassert solution(\"6\") == \"wait what?\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"yes\"\nassert solution(\"3\") == \"wait what?\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == 'yes'\nassert solution('3') == 'wait what?'\nassert solution('2') == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\nassert solution('''3\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'\nassert solution('''1\nmoo not foo\n''') == 'yes'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nAACCMMAA\\nACA\\nMM\\nACMAA\\nAA\\nA') == '1 4\\nMM\\nA\\nAA\\nACA'\nassert solution('3\\nACMA\\nACM\\nACA\\nAM') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\nACMA\nACM\nACA\nAMA\n''') == '1 4'\nassert solution('''3\nACMA\nACM\nACA\n''') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\nACMA\nACM\nACA\"\"\") == \"\"\"1 4\nACM\nA\"\"\n\"\"\"[:-1]"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nACMA\\nACA\\nAMA') == 'impossible'\nassert solution('2\\nACMA\\nACM\\nACA') == '1 4'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n''') == '4 4'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2178') == '2178'\nassert solution('1') == '1'\nassert solution('5') == '1 4'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 4'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '1 4'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 4'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 4 1\") == \"3\"\nassert solution(\"10 20 3\") == \"18.908178325\"\nassert solution(\"2 4 1\") == \"3\"\nassert solution(\"20 0.5 10\") == \"19.5\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 2 1\") == \"2\""
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 4 1\\n\"\n    \"1 0.5 5\\n\"\n    \"6 0.8 3\\n\"\n    \"8 0.9 3\\n\"\n) == \"18.9029850746\"\n\nassert solution(\n    \"10 20 3\\n\"\n    \"5 0.3 8\\n\"\n    \"6 0.8 3\\n\"\n    \"8 0.9 3\\n\"\n) == \"18.9029850746\"\n\nassert solution(\n    \"100 111 5\\n\"\n    \"20 0.5 10\\n\"\n    \"80 0.5 2\\n\"\n    \"85 0.5 2\\n\"\n    \"90 0.5 2\\n\"\n    \"95 0.5 2\\n\"\n) == \"124\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n20 1 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\n\nassert solution('''\n2 4 1\n1 0.5 5\n''') == '3'\n\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.90897629'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 1') == '3'\nassert solution('10 20 3') == '18.9029850746'\nassert solution('20 1 0.5 10') == '21.9'\nassert solution('100 111 5') == '124'\nassert solution('20 0.5 10') == '100.0'\n\nimport math"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 5\") == \"1\"\nassert solution(\"2 4 1\") == \"3\"\nassert solution(\"10 20 3\") == \"18.9029850746\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''\n2 4 1\n1 0.5 5\n''') == '3'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 111 5\\n20 0.5 10\\n80 0.5 2\\n85 0.5 2\\n90 0.5 2\\n95 0.5 2') == '124'\nassert solution('2 4 1\\n1 0.5 5\\n') == '3'\nassert solution('10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 20 1\n5 0.3 5\n6 0.8 5\n8 0.9 5\n''') == '18.9076115068'\nassert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9148936247'\n\nimport sys\nimport io\nimport atexit\n\ninput = io.BytesIO(sys.stdin.buffer.read()).readline"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2''') == '124', solution\n\nassert solution('''2 4 1\n1 0.5 5\nSample Output 2:\n3''') == '3', solution\n\nassert solution('''10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\nSample Output 3:\n18.9029850746''') == '18.9029850746', solution\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4 3\n2 1 2\"\"\") == \"2 1 2\"\nassert solution(\"\"\"2 1\n3 5\"\"\") == \"1\"\nassert solution(\"\"\"5 20\n2 3 5 3\"\"\") == \"3 4\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2 1 2'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\nprint('all tests passed')\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n\n\"\"\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2 1 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 2\\n1 3\\n3 4\\n2 4\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n\") == \"0\""
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\nassert solution('''\n7 5\n1 2\n2 3\n3 4\n5 6\n6 7\n''') == '0'\nassert solution('''\n3 4\n1 2\n2 3\n3 4\n''') == '0'\nassert solution('''\n2 2\n1 2\n1 3\n''') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"7 5\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n3 4\\n2 4') == '2'\nassert solution('7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n') == '2'\nassert solution('7 5\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n') == '0'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\n\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\nSample Output 2:\n0\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '2'\nassert solution('3 4') == '2'\nassert solution('1 2') == '2'\nassert solution('3 4') == '2'"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\n''') == '2'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('20 0\\n1.00 0.10\\n') == '20.00000000'\nassert solution('-10 10\\n10.00 1.00\\n') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\nassert solution(\"0 20\") == \"28.26445910\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"20 0\\n1.00 0.10\") == \"20.00000000\"\nassert solution(\n    \"-10 10\\n10.00 1.00\") == \"3.14159265\"\nassert solution(\n    \"0 20\\n1.00 0.10\") == \"28.26445910\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nprint('All test cases passed')\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0') == '0.00000000'\nassert solution('20 0') == '20.00000000'\nassert solution('-10 10') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '28.26407905'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"28.26445910\"\n\n\"\"\"\n\nfrom math import *\nfrom decimal import Decimal\n\ninput = stdin.readline\n\nx, y = map(int, input().split())\nv, w = Decimal(input().split()[0]), Decimal(input().split()[0])\n\nx = Decimal(x)\ny = Decimal(y)"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n0 0\n1.00 0.10\n\"\"\"\n) == \"28.26445910\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n2 100\n1 100\n4 70\n3 70\n\"\"\") == \"170\"\nprint(solution(input()))\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''\n5\n2 100\n1 100\n4 70\n3 70\n2 80\nSample Output 3:\n150\n''') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"150\""
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"170\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\nassert solution('3\\n2 120\\n3 50\\n2 80') == '150'\nprint('All Tests Passed!')\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"170\""
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '170'\nassert solution('4') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"150\"\nassert solution([\n    \"3\",\n    \"2 120\",\n    \"3 50\",\n    \"2 80\",\n]) == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1\\n2\\n') == '170'\nassert solution('2\\n100\\n1 100\\n4 70\\n3 70\\n2 80') == '150'\nassert solution('3\\n2 120\\n3 50\\n2 80') == '150'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"5 7\") == \"3\"\nassert solution(\"10 10\") == \"8\"\nprint(solution(input()))\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"6 6\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n''') == '5'\nassert solution('''\n10 10\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n6 7\n6 8\n7 9\n8 9\n8 10\n''') == '8'\nassert solution('''\n10 10\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n6 7\n6 8\n7 9\n8 9\n8 10\n''') == '10'\nassert solution('''\n10 10\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n6 7\n6 8\n7 9\n8 9\n8 10\n''') == '10'\nassert solution('''\n10 10\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n6 7\n6 8\n7 9\n8 9\n8 10\n''') == '8'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 3') == '2'\nassert solution('6 6') == '5'"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"6 6\") == \"5\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2\n1 3\n2 4\n3 4''') == '2'\nassert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\nSample Output 2:\n5''') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 3\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n10 10\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.5'\nassert solution('3') == '0.5'\nassert solution('4') == '0.49'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\nSample Output 3:\n0.0144395499999997\n''') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n''') == '0.0446429'\nassert solution('''\n4\n1\n0\n1\n0\nSample Output 3:\n0.0446429\n''') == '0.0446429'\nassert solution('''\n5\n1\n0\n0\n1\n0\nSample Output 4:\n0.0446429\n''') == '0.0446429'\nassert solution('''\n10\n5\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\nSample Output 5:\n0.0446429\n''') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0.0446429\"\nassert solution(\"4\\n6\\n1 0 2 3 0 1\\n7 1 2 3 4 5 6 7 1 0\") == \"0.0446429\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n5\n1 1 0\n2 2 0\n3 3 0\n4 4 0\n5 5 0\n1 0\n2 1 1\n''') == '0.0446429'\nassert solution('''6\n4\n0 1 2 3 0 1\n0 0 0 0 2 3\n0 0 0 0 1 2\n0 0 0 0 1 2\n1 1 0 2 3 0 1\n1 0 1 2 3 0 1\n1 0 1 2 3 0 1\n1 0 1 2 3 0 1\n1 0 1 2 3 0 1\n1 0 1 2 3 0 1\n''') == '0.00999998'\nassert solution('''7\n5\n1 1 0\n2 2 0\n3 3 0\n4 4 0\n5 5 0\n1 0\n2 1 1\n''') == '0.00999998'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    2\n    1 0\n    1 0\n    '''\n) == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n\"\"\") == '0.5'\nassert solution(r\"\"\"\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n\"\"\") == '0.0446429'\nassert solution(r\"\"\"\n4\n3\n2 1 2\n1 0\n1 0\n1 0\n1 0\n\"\"\") == '0.0'\nassert solution(r\"\"\"\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n\"\"\") == '0.0'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3\\n2 4 3') == '2 4 1\\n1 6 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '''3\n1 6 1\n2 5 2\n3 4 3\n'''\nassert solution('''\n4\n1 2 1 2\n''') == '''IMPOSSIBLE'''\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2\n1 3\n2 4''') == '3'\n\nassert solution('''2\n2\n1 3\n1 4''') == '4'\n\nassert solution('''10\n1 2 2 2 2 2 2 2 2\n3 2 1 1 1 2 1 1 1''') == '4'\n\nassert solution('''10\n1 2 2 2 2 2 2 2 2\n3 2 1 1 1 1 2 1 1\n1 2 3 1 2 2 2 2 1\n3 2 1 1 1 1 2 1 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 2 1 1\n2 3 2 1 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3 2 1 1 1 1 1 2 1\n2 3 2 2 1 1 1 1 1\n3"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\\\n10\n1 2 3 3 2 1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\\\n4\n1 2 1 2\n\"\"\") == \"1 6 1\"\nassert solution(\"\"\"\\\n6\n1 2 3 3 2 1\n\"\"\") == \"3 4 3\"\nassert solution(\"\"\"\\\n10\n1 2 3 3 2 1\n\"\"\") == \"3 4 3\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1\\n3 3 3\") == \"1 3 1\\n3 3 3\"\nassert solution(\"4\\n1 2 1 2\") == \"1 2 1\\n3 4 3\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"1 1 1\\n3 1 3\\n3 1 3\\n3 2 2\\n2 2 2\\n2 1 1\\n1 1 2\\n3 1 3\\n3 2 3\\n3 1 3\\n3 1 3\\n3 2 2\\n2 1 1\\n1 1 2\\n2 1 2\\n3 1 3\\n3 2 2\\n2 2 2\\n1 2 1\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3\n3\n1 6 1\n2 5 2\n3 4 3\n''')\n\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n5\n1 2 1 2 1\n''') == '1 6 1'\n\nassert solution('''\n5\n1 2 1 2 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n1 2 2 2 2 2 2 2 2 2 2 2\n''') == '1 6 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3 3 2\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\nassert solution(\"1 2 3 3 2 1\") == \"6\"\nassert solution(\"4 1 2 1 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1 6 1'\nassert solution('4') == '2 5 2'\nassert solution('6') == 'IMPOSSIBLE'\nassert solution('7') == 'IMPOSSIBLE'\nassert solution('8') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('5 10 20 30 40 50') == '5 10 20 30 40 50'\nassert solution('5 10 20 30 40 50\\n2 28 27') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '1 100'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 10 20 30 40 50') == '10 20 28 27 30 40 50'\nprint(solution('2\\n3 10 20 30 40 50'))\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''2\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\nassert solution('''3\n2 5\n3 4\n''') == '2 5 3 4'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\\n\"\nassert solution(\"3\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\\n\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1 100\n1 1\n''') == '1 2 100'\nassert solution('''\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 100') == '1 100'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 10 20 30 40 50\n2 28 27\n''') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 1') == '1 1'\nassert solution('10 20 28 27 30 40 50') == '10 20 28 27 30 40 50'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"2\", \"Should return the number of suspects in the Black Vienna circle\"\nassert solution(\"2\") == \"2600\", \"Should return the number of suspects in the Black Vienna circle\"\nassert solution(\"3\") == \"506\", \"Should return the number of suspects in the Black Vienna circle\""
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\nassert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('AB 1 1') == '5'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2550'\nassert solution('2') == '3750'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0\\n') == '2600\\n'\nassert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1\\n') == '506\\n'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\nAB 1 1\\nAC 2 1\\nBC 2 1') == '506'\nassert solution('4\\nA 1 2\\nB 2 1\\nC 1 1\\nD 1 1') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"2600\"\nassert solution(\"3\") == \"506\"\nassert solution(\"4\") == \"0\"\nassert solution(\"6\") == \"0\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\n'''\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\nassert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\nassert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\nassert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\nassert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '2600'\nassert solution('1') == '2600'\nassert solution('2') == '2600'\nassert solution('3') == '2600'\nassert solution('4') == '2600'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('())') == 'possible'\nassert solution('()())') == 'impossible'\nassert solution('(()())()') == 'possible'\nassert solution('(())(())') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('((((') == 'possible'\nassert solution('))(((') == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\nassert solution(\"(())(\") == \"impossible\"\nassert solution(\")()(\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('(((((') == 'possible'\nassert solution('(()))') == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''()))\n()()\n(()\n''') == 'possible'\nassert solution('''()(\n''') == 'impossible'\nassert solution('''()\n''') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('()))' == 'possible'\nassert solution(')))(' == 'impossible'"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('(())') == 'possible'\nassert solution('()())') == 'possible'\nassert solution('(()())()') == 'impossible'\nassert solution('()(())') == 'impossible'\nassert solution('()(()') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(())') == 'possible'\nassert solution('()()') == 'possible'\nassert solution('(()())()') == 'possible'\nassert solution('(()())(())') == 'impossible'\nassert solution('(()())(())(())') == 'possible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"((()))\") == \"possible\"\nassert solution(\"()()\") == \"possible\"\nassert solution(\"(()())()\") == \"possible\"\nassert solution(\"(()())()())\") == \"possible\"\nassert solution(\"()()()()()()\") == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('()))') == 'possible'\nassert solution('))(') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\") == \"1800\"\nassert solution(\"\"\"\n1 2\n1 1800 3600 1800\n1 1900 3600 1600\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\\n') == '1800'\nassert solution('2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\nassert solution('''\n2 1\n1 1800 9200\n1 1900 9200\n''') == 'impossible'\nassert solution('''\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n''') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"impossible\"\nprint(solution(input_))"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nassert solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\\n1 2200 9400 1400\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\""
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == \"1800\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n3\n1 2\n2 3\n3 1\n1 3''') == 'A1-B2 B1-A2 A3-B3\\nA2-B3 B2-A3 A1-B1\\nA3-B1 B3-A1 A2-B2\\nA1-B2 A2-C1 B1-C2\\nA1-C2 A2-B1 B2-C1\\nA1-B3 A2-C1 B1-C2'''\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n3 1\n1 2\n2 3''') == \"A1-B1 A2-C2 B2-C1\\nA1-C1 A2-B1 B2-C2\"\n\nassert solution('''2 3\n3 2\n2 3\n2 3''') == \"A1-B1 A2-C2 B2-C1\\nA2-B1 A1-C1 A3-B3\"\n\nassert solution('''4 3\n3 2\n2 4\n2 3\n2 4''') == \"A1-B1 A2-C2 B2-C1\\nA3-B3 A4-C4 B4-C3\\nA1-C1 A2-B1 B2-C2\\nA2-C2 A3-B3 C4-A4\"\n\nassert solution('''2 4\n3 2\n2 4\n4 3\n2 3\n2 4''') == \"A1-B1 A2-C2 B2-C1\\nA3-B3 A4-C4 B4-C3\\nA1-C1 A2-B1 B2-C2\\nA2-C2 A3-B3 C4-A4\"\n\nassert solution('''3 3\n2 2\n2 3\n3 2''') == \"A1-B1 A2-C2 B2-C1\\nA2-B1 A3-C3 B3-C2\\nA1-C1 A2-B1 B2-C2\\nA2-C2 A3-B3 C4-A4\""
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"3 2\") == \"A1-B1 A2-C2 B2-C1\""
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n''') == 'A1-B2 B1-A2 A3-B3\nassert solution('''\n2 3\n''') == 'A1-B1 A2-C2 B2-C1\n''')\n'''\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == 'A1-B2\\nA2-C1\\nA3-B3'\nassert solution('2 3') == 'A1-B1\\nA2-C2\\nA3-B3'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n\n\"\"\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\nassert solution(\"3 3\") == \"A1-B1 A2-C2 B2-C1 A3-B3\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n.XX\n..X.\n''') == '7'\nprint(\"solution = {}\".format(solution(stdin)))\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n.\\n.\\n\") == \"7\"\nassert solution(\"4 4\\nXX.XX\\nXX.X\\nXX..X\\nXX..X\\n\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"4 4\") == \"9\"\nassert solution(\"100 100\") == \"1000\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '7'\nassert solution('2 2') == '7'\nassert solution('3 3') == '13'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\nXX.X\\n.X.X\\nXX.X\\n.XX\\n\") == \"7\"\nprint(solution(input()))\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 7, \"WRONG!\""
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == '7'\nassert solution(\"4 4\") == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == '7'\nassert solution('5 5') == '9'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 3 2 2 100\\n1 1 1 1 500\\n') == '600'\n\nassert solution('3\\n0 0 2 2 100\\n6 0 8 1 1\\n') == '100'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1 1 1 500\n2 0 2 1 100\n''') == '600'\nassert solution('''\n2\n1 1 1 1 500\n6 0 8 1 1\n''') == '100'\nassert solution('''\n2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''\n3\n1 1 1 1 500\n6 0 8 1 1\n''') == '100'\nassert solution('''\n1\n-1\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2 2 100') == '600'\nassert solution('1 1 1 1 500') == '-1'\nassert solution('3 2 0 2 100') == '1000'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n5 5 2 2 100\n3 1 1 1 500\n''') == '600'\nassert solution('''2\n5 5 2 2 100\n3 1 1 1 500\n''') == '100'\nassert solution('''3\n5 5 2 2 100\n3 1 1 1 500\n''') == '-1'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 2 2 100\n1 1 1 1 500\n''') == '600', 'First Test'\nassert solution('''\n3 3 1 1 500\n2 3 4 6 500\n''') == '100', 'Second Test'\nassert solution('''\n1\n1 1 1 1\n''') == '-1', 'Third Test'\nassert solution('''\n2\n0 3 2 2\n1 0 1 1\n''') == '600', 'Fourth Test'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"700\""
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"600\"\nassert solution(\"1\") == \"500\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"600\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''2\n4 4 2 0 100\n1 1 1 1 500\n''') == '-1'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == \"0\"\nassert stdout.endswith(solution(s))\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('21') == '0'\nassert solution('23') == '1'\nassert solution('24') == '0'\nassert solution('13') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n361') == '3'\nassert solution('2\\n11') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n361\") == \"3\"\nassert solution(\"2\\n11\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '1'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('361') == '3'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n361\n''') == '3'\nassert solution('''2\n11\n''') == '0'\nassert solution('''1\n4\n''') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"361\") == \"3\"\nassert solution(\"2\") == \"0\"\nassert solution(\"11\") == \"0\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10') == '10'\nassert solution('3 10') == '10'\nassert solution('1 10') == 'cancel road trip'\nassert solution('11 5') == 'cancel road trip'\nassert solution('2 5') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 10\\n2 100\\n1 10\\n11 5\\n'\n) == '10'\nassert solution(\n    '3 10\\n2 100\\n1 10\\n13 5\\n'\n) == 'cancel road trip'\nassert solution(\n    '1 2\\n10 9\\n'\n) == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3 10\n2 100\n1 10\n11 5\n\"\"\"\n) == \"10\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 10, 2, 100, 1, 10, 11, 5]) == '10'\nassert solution([3, 10, 2, 100, 1, 10, 11, 5, 6]) == 'cancel road trip'\nassert solution([4, 20, 1, 8, 3, 6, 5]) == 'cancel road trip'\nassert solution([4, 20, 1, 8, 3, 6, 5, 10]) == '10'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5\n''') == '10'\n\nassert solution('''3 10\n2 100\n1 10\n13 5\n''') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10'\n\nassert solution('''\n4 10\n2 100\n1 10\n11 5\n''') == 'cancel road trip'\n\nassert solution('''\n3 10\n2 100\n1 10\n1 2\n''') == '10'\n\nassert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == 'cancel road trip'\n\nassert solution('''\n3 10\n2 100\n1 10\n4 5\n''') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n14 5') == 'cancel road trip'\nassert solution('3 10\\n2 100\\n1 10\\n15 5') == 'cancel road trip'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\nSample Output 3:\n''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\nassert solution('''4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '0 0 1 5'\nassert solution('2 5') == '1 5'\nassert solution('3 5') == '2 5'\nassert solution('4 5') == '3 5'\nassert solution('5 5') == '4 5'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100''') == '1 8 9 9 100 101 108 109 109', 'First Test'\n\nassert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8\nSample Output 2:\n0 7 8 11 15 16 19\n''') == '0 7 8 11 15 16 19', 'Second Test'"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2 4\") == \"0 7 8 11 15 16 19\"\nassert solution(\"1 3 8 5 2 7 9 7 5\") == \"1 7 7 8 8 9 9 7 7 7\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1 8 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '1'\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 3 3\") == \"1\"\nassert solution(\"1 5 3\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 3') == '1', 'First'\nassert solution('0 0 1') == '1', 'Second'\nassert solution('3 3') == '2', 'Third'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 3\\n0 0 1\\n3 3\") == \"1\"\nassert solution(\"1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3\\n3 0\\n0 3\") == \"3\"\nprint('all tests passed')\n\"\"\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('1 5 3 4 5') == '4'\nassert solution('1 5 3 4 5 6 5') == '5'\nassert solution('1 2 4 3') == '3'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3 3\") == \"1\"\nassert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 3 0\") == \"3\"\nassert solution(\"1 5 3 -3\") == \"3\"\nassert solution(\"1 5 3 -3 0\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'\nassert solution('2 1 2') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '1'\nassert solution('''\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n''') == '3'\nassert solution('''\n1 10 4\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 3\n''') == '4'\n\nimport collections"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 10 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 0\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 10 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 0\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 10 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n0 0\n\"\"\") == \"2\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 10000\\n\") == \"4\\n\"\nassert solution(\"5 9\\n\") == \"2\\n\"\nassert solution(\"5 0\\n\") == \"0\\n\"\nassert solution(\"5 9\\n\") == \"2\\n\"\nassert solution(\"5 10\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10000\\n1') == '4'\nassert solution('5 9\\n1') == '2'\nassert solution('5 9\\n1\\n10') == '2'\nassert solution('5 9\\n1\\n10\\n1') == '3'\nassert solution('5 9\\n1\\n10\\n1\\n9') == '3'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4 2 0 2 1 0\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0'\nprint('All tests passed!')"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 9') == '4'\nassert solution('5 10000') == '4'\nassert solution('1') == '0'\nassert solution('5 9') == '4'\nassert solution('5 9') == '4'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10000\") == \"4\"\nassert solution(\"5 9\") == \"2\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10000') == '4\\n4\\n2\\n2\\n0'\nassert solution('5 9') == '2\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10000') == '4'\nassert solution('5 9') == '2'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1') == '4\\n4\\n2\\n2\\n0'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nne\n''') == \"NE\"\nassert solution('''\nkava\n''') == \"DA\"\nassert solution('''\nne\n''') == \"NE\"\nassert solution('''\nkava\n''') == \"DA\"\nassert solution('''\nne\n''') == \"NE\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nne') == 'NE'\nassert solution('2\\nne') == 'DA'\nassert solution('3\\nne') == 'NE'\nassert solution('4\\nne') == 'DA'\nassert solution('5\\nne') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"NE\"\nassert solution(\"2\") == \"DA\"\n\nassert solution(\"3\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nne\") == \"NE\"\nassert solution(\"4\\nkava\") == \"DA\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'NE'\nassert solution('2') == 'DA'\nassert solution('3') == 'DA'\nassert solution('4') == 'NE'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'NE'\nassert solution('2') == 'DA'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '0'\n\nassert solution('''9 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '3'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\nassert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '0'\nassert solution('''\n4 4 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '3'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"8 10 4\") == \"0\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\\n0\\n3\\n2\"\nassert solution('''\n3 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == \"2\\n0\\n2\\n1\\n0\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4 4') == '2'\nassert solution('8 10 4') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '3'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '3'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"8 10 4\") == \"3\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2\\n'"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"3\""
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '2'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"1\"\n\ninput_1 = \"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\"\n\ninput_2 = \"\"\"\n5 5\n0 0\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\"\n\ninput_3 = \"\"\"\n5 5\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution_slow() == '2'\n\nimport time"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1\") == \"1\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == \"2\"\nassert solution(\"2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3\") == \"2\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1', 'First'\nassert solution('''\n5 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2', 'Second'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 1') == '1'\nassert solution('2 2\\n1 1\\n0 1\\n1 0\\n1 2 1\\n2 1 3') == '2'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 15') == '40.500000000'\nassert solution('3 15') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 15') == '40.5'\nassert solution('3 15') == '49.000000'\nprint(solution(input()))\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 15\nD 4 10 1\nC 6 1\n\"\"\") == \"40.500000000\"\nassert solution(\"\"\"\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n\"\"\") == \"49.000000000\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == '40.500000000'\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\nassert solution('''\n10 15\nD 4 10 1\nC 6 1\nC 9 3\nD 5 5\n''') == '99.0000000000'\nassert solution('''\n3 10\nC 4 1\nD 4 1\n''') == '31.0'\nassert solution('''\n1 10\nC 1 1\nD 4 1\n''') == '2.0'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 15') == '40.500000000'\nassert solution('3 15') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\nD 4 10 1\nC 6 1\n\"\"\") == \"40.500000000\"\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"2\") == \"fail\"\nassert solution(\"10\") == \"fail\"\nassert solution(\"2\\n1\\n3\\n2\\n2\\n5\\n4\\n5\\n6\\n6\\n7\\n8\\n9\\n2\\n1\\n10\\n3\\n7\\n8\\n9\\n10\\n1\\n7\\n10\\n7\\n10\\n9\\n3\\n1\\n3\\n2\\n5\\n6\\n5\\n4\\n7\\n9\\n5\\n9\\n10\\n3\\n5\\n9\\n5\\n10\\n3\\n1\\n6\\n3\\n1\\n2\\n8\\n3\\n10\\n9\\n7\\n10\\n5\\n1\\n3\\n5\\n6\\n4\\n5\\n6\\n9\\n6\\n4\\n6\\n3\\n2\\n10\\n9\\n7\\n8\\n5\\n9\\n8\\n7\\n6\\n9\\n5\\n4\\n7\\n8\\n6\\n5\\n3\\n9\\n5\\n1\\n9\\n4\\n9\\n8\\n7\\n4\\n9\\n7\\n3\\n2\\n2\\n1\\n6\\n3\\n6\\n5\\n9\\n9\\n3\\n5\\n10\\n8\\n7\\n7\\n3\\n10\\n4\\n1\\n7\\n5\\n10\\n3\\n8\\n1\\n1\\n4\\n4\\n3\\n4\\n5\\n1\\n10\\n5\\n10\\n3\\n1\\n8\\n7\\n4\\n7\\n1\\n5\\n7\\n1\\n2\\n2\\n9\\n7\\n1\\n1\\n6\\n5\\n5\\n7\\n3\\n9\\n10\\n6\\n1\\n3\\n10\\n4\\n5\\n1\\n6\\n3\\n5\\n8\\n9\\n7\\n5\\n4\\n7\\n7\\n1\\n2\\n5\\n2\\n10\\n3\\n3\\n10\\n8\\n1\\n7\\n10\\n8\\n10\\n2\\n8\\n9\\n6\\n4\\n5\\n4\\n1\\n2\\n8\\n7\\n2\\n3\\n5\\n3\\n3\\n4\\n5\\n5\\n10\\n5\\n2\\n5\\n10\\n3\\n4\\n3\\n10\\n7\\n9\\n9\\n4\\n3\\n2\\n3\\n6\\n10\\n8\\n9\\n1\\n8\\n2\\n3\\n3\\n1\\n6\\n5\\n6\\n7\\n8\\n1\\n3\\n9\\n2\\n3\\n4\\n2\\n7\\n3\\n8\\n8\\n2\\n1\\n7\\n7\\n3\\n7\\n8\\n3\\n3\\n4\\n6\\n7\\n2\\n1\\n8\\n9\\n1\\n8\\n9\\n10\\n2\\n10\\n3\\n5\\n3\\n1\\n10\\n10\\n1\\n4\\n7\\n1\\n6\\n2\\n8\\n4\\n8\\n5\\n2\\n6\\n6\\n9\\n10\\n6\\n8\\n10\\n9\\n10\\n1\\n7\\n5\\n3\\n7\\n6\\n8\\n4\\n1\\n1\\n2\\n6\\n8\\n4\\n10\\n2\\n10\\n5\\n4\\n7\\n4\\n10\\n4\\n1\\n2\\n9\\n6\\n5\\n1\\n8\\n5\\n3\\n1\\n6\\n8\\n5\\n1\\n5\\n5\\n4\\n1\\n10\\n6\\n9\\n3\\n1\\n3\\n3\\n7\\n3\\n7\\n6\\n8\\n5\\n1\\n1\\n10\\n9\\n5\\n1\\n9\\n8\\n2\\n10\\n9\\n3\\n4\\n5\\n5\\n7\\n6\\n2\\n10\\n4\\n5\\n6\\n3\\n10\\n2\\n8\\n1\\n2\\n7\\n7\\n2\\n3\\n10\\n4\\n1\\n4\\n4\\n2\\n5\\n3\\n3\\n7\\n5\\n3\\n6\\n3\\n1\\n5\\n1\\n10\\n2\\n7\\n5\\n1\\n2\\n10\\n6\\n5\\n9\\n10\\n3\\n6\\n9\\n2\\n5\\"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nassert solution('''\n2\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n5\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n5\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\nprint('all tests passed')\n'''\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution('10\\na 2 10 3\\n' * 20) == 'fail'\nassert solution('10\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2 10 3\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"10 2 10 3\") == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"3\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\") == \"fail\"\nassert solution(\"10\\nabc 2 1 5\\nabd 1 9\\ne1 4\\nfg 2 6 8\\nhi 0\\nij 1 3\\njk 1 7\") == \"5 4 9 3 1 10 7 6 2\""
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nassert solution('1\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'\nprint('All test cases passed.')"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"10\\n\"\n    \"a 2 10 3\\n\"\n    \"b 1 6\\n\"\n    \"c 2 1 5\\n\"\n    \"d 1 9\\n\"\n    \"e 1 4\\n\"\n    \"f 1 2\\n\"\n    \"g 2 6 8\\n\"\n    \"h 0\\n\"\n    \"i 1 3\\n\"\n    \"j 1 7\"\n    ) == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\nassert solution('''\n1\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"00:01\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:00\") == \"3\"\nassert solution(\"00:00\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('00:00\\n01:01') == '3'\nassert solution('00:08\\n00:00') == '3'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"01:01\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('00:00\\n00:00\\n') == '3'\nassert solution('00:00\\n01:01\\n') == '3'\nassert solution('00:00\\n01:30\\n') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0:00\n0:00\n0:00\n0:00\n1:01\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0:00\n0"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('00:00') == '3'\nassert solution('00:08') == '3'\nassert solution('01:01') == '3'\nassert solution('00:00') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n00:00\n01:01\n''') == '3\\n00:00\\n01:00\\n01:01\\n'\nassert solution('''\n00:08\n00:00\n''') == '3\\n00:08\\n00:09\\n00:00\\n'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('(()') == '4,4:', '((())')\nassert solution('()()()()()') == '4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:4,4:"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\"\nassert solution(\"()\") == \"4,4:\"\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(())') == '4,8:8,8:'\nassert solution('()') == '4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''(((())))''') == '4,4:'''"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('(()())') == '4,4:', 'TEST ERROR'\nassert solution('(((()))))') == '4,4:4,4:', 'TEST ERROR'\n\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return not self.items\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)\n\nclass Node:\n    def __init__(self,data):\n        self.right=self.left=None\n        self.data = data\nclass Solution:\n    def isPythagorean(self,a,b,c):\n        if a**2==b**2+c**2 or b**2==a**2+c**2 or c**2==a**2+b**2:\n            return True\n        return False\n    def compare(self,a,b):\n        if a>b:\n            return 1\n        elif a<b:\n            return -1\n        else:\n            return 0\n    def buildTree(self,nodes,n):\n        if n==1:\n            return nodes[0]\n        if n==2:\n            node = Node(nodes[0])\n            node.left = nodes[1]\n            node.right = nodes[2]\n            return node\n        node = Node(nodes[n-1])\n        node.left = self.buildTree(nodes,n-1)\n        node.right = self.buildTree(nodes,n-1)\n        return node\n\n    def constructFromPrePost(self,postorder,preorder):\n        if not preorder or not postorder:\n            return None\n        root = self.buildTree(postorder,len(postorder))\n        root.left = self.constructFromPrePost(postorder,preorder)\n        root.right = self.constructFromPrePost(postorder,preorder)\n        return root"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''(())\n(())\n((()))\n''') == '''4,8:8,8:\n4,4:'''\nassert solution('''(((())))\n(()(())\n(((()()))\n''') == '''4,4:4,4:4,4,4:\n4,4:4,4,4:'''\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''((())\n(((()()\n((((()))\n(((((()()\n((((()())\n((((((()()''') == '4,4:4,4:4,4,4:4,4,4:4,4,4:'\n\n''')"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n(())\n\"\"\"\n) == \"\"\"4,8:8,8:\n\"\"\"\n\nassert solution(\n\"\"\"\n()\n\"\"\"\n) == \"\"\"4,4:\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"()\") == \"4,4:\"\nassert solution(\"(())\") == \"4,4:8,8:\nassert solution(\"())\") == \"4,4:8,8:\"\nassert solution(\"(()()(()()))(())\") == \"4,4:8,8:8,8:8,8:\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"((((()))))\") == \"4,4:4,4:\nassert solution(\"(()(())(())()((())))(())\") == \"4,8:8,8:8,8:\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\nassert solution('''\n2 2\n26 02 03 03 1\n26 02 03 03 2\n''') == '-1'\nassert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\nprint('All tests passed!')"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '185'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == \"5\"\nassert solution('1 1') == \"5\"\nassert solution('1 1') == \"-1\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1860\"\nprint(solution())\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"6 2\n3 4 5 6 1 2\"\"\") == \"5 6 1 2 3 4\"\nassert solution(\"\"\"4 2\n3 4 1 2\"\"\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4 \n\nassert solution('''6 2\n3 4 5 6 1 2\n''') == '2 3 4 1 6 5'\n\nassert solution('''\n4 2\n3 4 1 2\n''') == '2 3 4 1 6 5'\n\nassert solution('''\n1\n1\n''') == '1 2'\n\nassert solution('''\n2\n2\n''') == '1 2'"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5 6 1 2\") == \"2 3 4 1 6 5\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\nassert solution(\"6 2\\n1 2 3 4 5 6\") == \"1 2 3 4 5 6\"\nassert solution(\"6 2\\n1 2 3 4 5 6\\n\") == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4 \n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'\nassert solution('4 2') == '2 3 4 1'\n\nfor _ in range(input()):\n    N,K = map(int,input().split())\n    a = list(map(int,input().split()))\n    n = len(a)\n    if n<2:\n        print('Impossible')\n    else:\n        a.sort()\n        s = 0\n        for i in range(n):\n            s+=a[i]\n            if s>N:\n                print('Impossible')\n                break\n        if s<N:\n            i = 0\n            while s<N:\n                print(i+1,end=' ')\n                s+=a[i]\n                i+=1\n\n'''\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n3 4 1 2\") == \"2 3 4 1\"\nassert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"2 3 4 1\""
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n3 4 1 2\n''') == '5 6 1 2 3 4 '\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '2 3 4 1'\nassert solution('2\\n4\\n3\\n1\\n5') == '3 1 4 2'\nassert solution('5\\n1\\n4\\n3\\n2') == '4 3 2 1'\nassert solution('6\\n1\\n2\\n3\\n4\\n5') == '5 1 2 3 4'\nassert solution('3\\n1\\n2\\n4\\n5\\n6') == '4 5 2 1 3'\n\"\"\"\n\nimport os\nimport sys\nimport collections\nfrom collections import defaultdict"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''12''') == '201'\nassert solution('''22''') == '1221'\nassert solution('''73831''') == '73838'\nassert solution('''73832''') == '73239'\nassert solution('''73833''') == '73238'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nprint('Congratulations, have you done it correctly!')"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"201\"\nprint(solution(input))\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '55'\nassert solution('12345678 9 89') == '0 0'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'\nprint(\"Congratulations, have you met the conditions of this kata? :)\")\n\n'''\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1374 2') == '7413'\nassert solution('210 1') == '201'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '7413'\nprint(solution())"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1\",\n    \"2\",\n) == \"1\", \"Should be 1\"\nassert solution(\n    \"12\",\n    \"3\",\n) == \"13\", \"Should be 13\"\nassert solution(\n    \"10000\",\n    \"100\",\n) == \"10000\", \"Should be 10000\"\nassert solution(\n    \"12345\",\n    \"3456\",\n) == \"12345\", \"Should be 12345\"\nassert solution(\n    \"1234567891011121314151617181920212223242526272829303133343536373839\",\n    \"912121314151617181920212223242526272829303133343536373839\",\n) == \"1234567891011121314151617181920212223242526272829303133343536373839\", \"Should be 1234567891011121314151617181920212223242526272829303133343536373839\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'\nassert solution('5') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.6'\nassert solution('4') == '0.7'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.5'\nassert solution('4') == '0.8333333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('4') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.0'\nassert solution('2') == '0.7071'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n1 1\\n2 0\\n\") == \"0.733333333333333\"\nprint(solution(\"5\\n0 0\\n1 1\\n2 0\\n\"))\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0\n1 1\n2 0''') == '0.5'\n\nassert solution('''3\n0 0\n1 1\n2 0''') == '1.0'\n\nassert solution('''5\n0 0\n1 1\n2 0\n3 3\n4 4''') == '2.5'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0.5'\nassert solution('3') == '0.666666666666667'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0\n0 1\n1 1\n1 0\n''') == '0.666666666666667'\nassert solution('''\n3\n0 0\n1 1\n2 0\n''') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('2') == '0.733333333333333'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 3 4\\n\"\n    \"10 1 3\\n\"\n    \"0 1 20\\n\"\n) == \"9\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\nassert solution('''\n2 2 3\n4 3 1\n2 3 1\n''') == '7'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 10\n5 3 20\n10 1 10\n15 1 10\"\"\") == \"\"\"9\"\"\"\nassert solution(\"\"\"\n3 3 10\n5 3 10\n10 1 10\n15 1 10\"\"\") == \"\"\"21\"\"\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 3') == '0'\nassert solution('3 3 3') == '6'\nassert solution('3 2 2') == '6'\nassert solution('3 3 3') == '0'\nassert solution('3 3 100') == '7'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3 4\n10 1 3\n0 1 20\n''') == '9'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 2 10\n1 1 1 2 2\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5 2 50\n1 1 10 1 1\n\"\"\") == \"16\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 200') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == \"9\"\nassert solution(\"2 3 100\") == \"21\"\nassert solution(\"2 3 100 1\") == \"21\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''2 2 2 7'''\n) == '2'\nassert solution(\n'''9 2 7 -\n1 1 1 2\nSample Input 3:\n8 2 7 -\n1 1 1 2\nSample Output 3:\n4\n\nSample Input 4:\n8 3 4 7\n1 1 1 2\nSample Output 4:\n3\n\nSample Input 5:\n8 3 4 7\n1 1 1 2\nSample Output 5:\n3\n'''\n) == '4'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\n\nstdin = \"\"\"\n8 2 7 -\n1 1 1 2\n\"\"\"\n\nstdout = \"\"\"\n2\n\"\"\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 4 3\n1 1 2\n3 3 4\n5 5 7''') == '6'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 2 7 -\\n1 1 1 2') == '2'\nassert solution('9 2 7 -\\n1 1 1 2') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 4 7 +\n1 1 2''') == '2'\n\nassert solution('''8 2 7 -\n1 2 2 2\nSample Output 3:\n1\n''') == '1'\n\nassert solution('''9 2 7 -\n1 1 2\nSample Output 4:\n2\n''') == '2'\n\nassert solution('''10 2 7 -\n1 1 2\n1 1 2''') == '2'\n\nassert solution('''6 2 6 +\n1 1 1 2\n1 1 1 2''') == '0'"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == '2'\n\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == '4'\n\nassert solution('''\n5 6 4 -\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\nSample Input 3:\n7 4 1 -\n1 1 1 1 1 1 1\nSample Output 3:\n2\n\nSample Input 4:\n7 5 -\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\nSample Output 4:\n1\n\nSample Input 5:\n7 7 -\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\nSample Output 5:\n6\n''') == '6'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\n\n'''"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    2 2 7 -\n    1 1 1 2''') == '2'\n\nassert solution('''\n    3 3 7 -\n    1 1 1 2\n    3 4 1 5''') == '4'\n\nassert solution('''\n    4 4 7 -\n    1 1 1 2\n    3 3 1 3\n    2 2 2 3''') == '2'\n\nassert solution('''\n    5 5 7 -\n    1 1 1 2\n    4 4 1 3\n    2 2 2 3\n    2 2 2 4''') == '2'\n\nassert solution('''\n    6 6 7 -\n    1 1 1 2\n    5 5 1 3\n    2 2 2 3\n    2 2 2 4\n    2 2 2 5''') == '2'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\nassert solution('6 5') == '3'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"3\\n4\\n3\\n2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 4') == '2'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '2'\nassert solution('4 4') == '3'\nassert solution('5 5') == '5'\nassert solution('12 10') == '2'\nassert solution('10 10') == '1'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\nassert solution('''\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '2'\nassert solution('''\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '4'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\nassert solution('4 4') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\") == \"2 3\"\nassert solution(\"4 4\\n1 4 8\\n2 3 5\\n3 4 5\\n1 2 5\") == \"1\""
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n2 1') == '6'\nassert solution('3 4\\n2 3 1') == '24'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '6'\nassert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n2 1\") == \"6\"\nassert solution(\"2 4\\n3 4\") == \"24\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n2 1\n''') == '6'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '6'"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n5\n3 4 5 1 2\n''') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2\\n1 2'\n) == '2'\nassert solution(\n    '5\\n3 4 5 1 2'\n) == '1'\nassert solution(\n    '10\\n3 2 1 5 6 7 8 9'\n) == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(f'2\\n1 2') == '2'\nassert solution(f'5\\n3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2\n1 2\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n5\n3 4 5 1 2\n\"\"\") == \"1\"\n\n\"\"\"\n    time = 0\n    for i in range(n):\n        for j in range(i,n):\n            if (i!=j) and (seats[i]<seats[j]):\n                time += 1\n    return time\n\"\"\"\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 3') == '9'\nassert solution('3 3') == '9'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"9\"\nassert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"4\"\nassert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\") == \"0\""
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '0'\nassert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n5 3 6\n4 6 1\n6 1 3\n''') == '6'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\n5 2 6\\n1 1 1\\n2 1 2\\n1 1 1\") == \"4\"\nassert solution(\"1 2 3\\n1 1 2\\n1 2 3\") == \"3\"\nassert solution(\"1 2 3\\n1 1 2\\n1 2 3\\n1 1 2\") == \"1\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\nassert solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1\\n') == '4'\nassert solution('4 3\\n1 3 1\\n2 1 2\\n1 1 1\\n') == '0'\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '0'\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == '0'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n1 3 1\\n2 1 2\\n1 1 1\\n') == '4'\n\n'''\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n') == '0'\nassert solution('3\\n3\\n1\\n1\\n') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 1\\n2 1 2\\n1 1 1\\n') == \"4\"\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n') == \"9\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '9'\nassert solution('3 3') == '9'\n\"\"\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 4 10\\n5 2 6\\n11 1 3\\n\") == \"9\"\nassert solution(\"3 3\\n1 3 1\\n2 1 2\\n1 1 1\\n\") == \"4\"\nassert solution(\"1 1\\n2 1 2\\n1 1 1\\n\") == \"1\"\nassert solution(\"5 5\\n1 2 3\\n4 2 5\\n6 3 1\\n7 4 2\\n\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"6\"\nassert solution(\"3 2 1 3\") == \"3\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n1\n2 1\n1 3\n3 4\n\"\"\"\n) == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n4 1 3\n1 2\n1 3\n3 4\n''') == '6', 'First'\nassert solution('''\n4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '3', 'Second'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n1 3\n3 4\n''') == '6'\nassert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '3'\nassert solution('''\n4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\nassert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '3'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6', 'First'\nassert solution('''\n4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '3', 'Second'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\nassert solution('''\n4\n3 4 5 6\n1 2\n1 3\n2 4\n''') == '3'\nassert solution('''\n5\n2 4 5 4 6\n1 2\n1 3\n3 4\n3 2\n4 5\n''') == '2'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 1 2 3') == '2'\nassert solution('5 3 2 1 2') == '3'\nassert solution('5 3 4 1 2') == '3'\nassert solution('5 3 4 2 1') == '4'\nassert solution('5 4 2 2 3') == '3'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '18'\nassert solution('3') == '265'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\nassert solution('''\n1\n1 1\n''') == '1'\nassert solution('''\n2\n1 10\n5 8\n''') == '8'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 10\n5 8\n\"\"\") == \"\"\"18\n8\n\"\"\".strip()\nassert solution(\"\"\"\n3\n17 144\n121 121\n89 98\n\"\"\") == \"\"\"265\n25\n10\n\"\"\".strip()"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 10\") == \"18\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\") == \"265\"\nprint(solution(input()))\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 10\n5 8\n''') == '18'\n\nassert solution('''\n2 2\n1 1\n''') == '1'\n\nassert solution('''\n3 3\n1 1\n2 1\n''') == '2'\n\nassert solution('''\n4 4\n1 1\n1 1\n2 2\n3 3\n''') == '3'\n\nassert solution('''\n5 5\n1 1\n2 2\n2 3\n1 1\n''') == '1'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 10\n5 8\n''') == '18'\n\nassert solution('''2\n1 10\n5 8\n''') == '25'\n\nassert solution('''3\n17 144\n121 121\n89 98\n''') == '265'\n\nassert solution('''4\n17 144\n121 121\n89 98\n''') == '25'\n\nassert solution('''5\n17 144\n121 121\n89 98\n''') == '265'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 10\\n5 8\\n') == '18\\n8\\n'\nassert solution('3\\n17 144\\n121 121\\n89 98\\n') == '265\\n25\\n10\\n'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 10\n5 8\n''') == '18'\nassert solution('''\n2 15\n4 8\n''') == '265'\nassert solution('''\n3 5\n5 6\n''') == '25'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 10\n5 8\n17 144\n121 121\n89 98\nSample Output 2:\n265\n25\n10''') == '18'\nassert solution('''3\n17 144\n121 121\n89 98\nSample Output 2:\n265\n25\n10''') == '10'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n0 0\n1 1\n2 1\n1 0\n''') == '0.50000000'\nassert solution('''\n5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '12.50000000'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\nassert solution('10 10') == '14.14285714'\nassert solution('3 4') == '1.71428571'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '12.50000000'\nassert solution('''\n5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\n''') == '12.50000000'\nassert solution('''\n7 7\n0 2\n2 2\n2 1\n2 0\n1 1\n0 1\n1 0\n''') == '4.50000000'\nassert solution('''\n7 7\n0 2\n2 2\n2 1\n2 0\n1 1\n0 1\n1 0\n''') == '2.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n0 4\\n4 2\\n4 1\\n3 -1\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"0.5\"\nassert solution(\"4 3\") == \"0.5\"\nassert solution(\"10 10\") == \"0.4999999\"\nassert solution(\"100 100\") == \"1.0\"\nassert solution(\"-10 -10\") == \"-0.999999\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '0.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\nassert solution(\"5 5\\n0 4\\n4 2\\n4 1\\n3 -1\\n-2 4\") == \"12.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\nassert solution(\"4 3\\n0 0\\n1 1\\n2 1\\n1 0\") == \"0.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 3\n0 0\n1 1\n2 1\n1 0\n\"\"\") == \"0.50000000\n\nassert solution(\"\"\"\n5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4\n\"\"\") == \"12.50000000\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '0.50000000'\nassert solution('3 4') == '0.50000000'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''\n4 0 4\n0 2\n0 1\n2 1\n2 3\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 1 3\\n0 1\\n1 2\\n2 3\\n1\") == \"2\"\nassert solution(\n    \"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\") == \"1\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3\\n1') == '2'\nassert solution('3 2 4\\n0 0\\n0 1\\n1 1\\n1') == '1'\nassert solution('1 1\\n0 0\\n0 1\\n1 1\\n1') == '1'\nassert solution('4 2 4\\n0 0\\n0 1\\n1 1\\n2 2\\n2 3\\n3 3\\n3 3\\n3') == '1'\nassert solution('4 1 1\\n0 1\\n0 1\\n1 1\\n1') == '0'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\\n0 1\\n1 2\\n2 3\\n1\\n\") == \"2\"\nassert solution(\"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\\n\") == \"1\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\nassert solution('''4 0 4\n0 2\n0 1\n2 1\n2 3\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 3') == '2'\nassert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\n\"\"\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\nassert solution('4 5 3') == '3'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 1 3\n0 1\n1 2\n2 3\n1\"\"\") == \"2\"\nassert solution(\"\"\"4 1 3\n0 1\n1 2\n2 3\n2\"\"\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\"\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()\n\n\n\n## Problem 2"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\nassert solution('3 3 3') == '84'\nassert solution('4 4 4') == '1536'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 1') == '6'\nassert solution('2 2 2') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1\\n') == '6'\nassert solution('2 2 2\\n') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 1\n''') == '6'\nassert solution('''\n5 1 1\n''') == '6'\nassert solution('''\n2 2 2\n''') == '6'\n\nassert solution('''\n5 1 2\n''') == '30'\nassert solution('''\n1 1 2\n''') == '6'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2 2''') == '30'\nassert solution('''1 1 1''') == '6'\nassert solution('''2 2 2''') == '30'\nassert solution('''1 1 1''') == '6'\nassert solution('''1 1 1''') == '6'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 1\n''') == '6'\nassert solution('''\n2 2 2\n''') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2 1''') == '6'\nassert solution('''2 2 2''') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\"\nprint(solution(input()))\n\na = input().split()\n\na = sorted(a, key=lambda x: x)\n\na = ''.join(a)\n\nprint(a)\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2020 2020 2020'\nassert solution('2') == '1 9999999'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 3 4\n''') == 'impossible'\nassert solution('''5\n10 20 30 40 50\n''') == 'impossible'\nassert solution('''3\n1 2 3\n''') == 'impossible'\nassert solution('''10\n1 2 3 4 5 6 7 8 9\n''') == '1 2 3 4 5 6 7 8 9'"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n2020 2020 2020\n2020 2020 2020\n2020 2020 2020\n2020 2020 2020\n2020 2020 2020''') == \"impossible\"\nassert solution('''4\n2020 2020 2020\n2020 2020 2020\n2020 2020 2020\n2020 2020 2020''') == \"2021 2020 2020\"\nassert solution('''2\n1 9999999\nSample Output 2:\nimpossible\n''') == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"2021 2020 2020\"\nassert solution(\"3\") == \"2021 2020 2020\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(t_input) == 'impossible'\nassert solution(t_input_2) == '2021 2020 2020'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2020 2020 2020\n''') == '2021 2020 2020'\nassert solution('''2\n1 9999999\n''') == 'impossible'\nassert solution('''1\n2020 2020 2020\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2020 2020 2020'\nassert solution('2') == '1 9999999'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == \"impossible\"\nassert solution(\"1 9999999\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2020 2020 2020\n''') == '2021 2020 2020'\nassert solution('''2\n1 9999999\n''') == 'impossible'\nprint(\"You're doing it!\")\n\"\"\"\n\nimport math\nimport itertools"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('4') == '3'\nassert solution('10') == '9'\nassert solution('80') == '8'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 7') == '11'\nassert solution('1 1000000000') == '6'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n30 70') == '11'\nassert solution('2\\n66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    40 90\n    ''') == '2'\n\nassert solution('''\n    70 60\n    ''') == '1'\n\nassert solution('''\n    40 90\n    ''') == '1'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '0'\nassert solution('20') == '1'\nassert solution('30 70') == '11'\nassert solution('66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"100 1\") == \"0\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '1\\n'\nassert solution('30\\n70') == '11\\n'\nassert solution('66\\n69') == '2\\n'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"3\"\n\n'''"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\\n\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\\n\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 0\n>@\n>~\n''') == '2'\nassert solution('''\n3 3 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 0\\n>@\\n>~\\n\") == \"2\"\nassert solution(\"3 5 1\\n>>@<<\\n>~#~<\\n\") == \"4\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 0\n>@\n>~''') == '2'\nassert solution('''3 5 1\n>>@<<''') == '4'\nassert solution('''4 4 3\n>~#~<>~#~<\n>~#~<>~#~<\n>~#~<>~#~<\n>~#~<>~#~<''') == 'begin repairs'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r'''1\n1\n>@\n>~\n1''') == '2'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 5 1\n>@<<\n>~#~<\n>>>>~\n''') == '4'\nassert solution('''10 10 1\n>@@##@@<\n>@>#@<\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>@<>@\n@>"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''143175=120''') == '14+31+75=120', f'got {solution('')}'\nassert solution('''5025=30''') == '5+025=30', f'got {solution('')}'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"5+025=30\"\n\nSample Input 2:\n10=40\nSample Output 2:\n10=40\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''143175=120''') == '14+31+75=120'\nassert solution('''5025=30''') == '5+025=30'\nassert solution('''995567=9763\n10333=1011\n943=945\n9916=9916''') == '1+99+16=9916'\nassert solution('''0=0\n1=1\n0=1\n10=11''') == '10=11'\nassert solution('''0=0\n1=1\n0=1\n2=2''') == '1+2+2=4'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\nprint(solution.__name__, '\\n', solution(input()))"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '-1 -1'"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == '1 2'\nassert solution(solution.__doc__) == '-1'"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n4\n1\n5\n2\n4\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\nassert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '-1'"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1\\n') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2 -1'\nassert solution('2') == '2 -1'\nassert solution('4') == '1 2 -1'\nassert solution('3') == '2 -1'\nassert solution('8') == '1 2 -1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '-1'\nassert solution('3') == '2 -1'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '-1'\nassert solution('8') == '1 2'\n\nassert solution('1') == '-1'\nassert solution('2') == '-1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8\\n1\\n3\\n2\\n4\\n1\\n5\\n2\\n4\\n') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2 1'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1101') == '1'\nassert solution('101') == '0'\nprint(solution(input()))\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == ''\nassert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('11') == '1'\nassert solution('01') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nprint(solution('''\n1101\n'''))\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nprint(solution(''))\nprint(solution('0'))\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1101\n''') == '1'\nassert solution('''\n0\n''') == '0'\nassert solution('''\n1110\n''') == '0'\nassert solution('''\n1111\n''') == '1'\nassert solution('''\n1011\n''') == '2'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"01\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1101\n1110''') == '1'\nassert solution('''1110\n1111''') == '0'\nassert solution('''1110\n0000''') == '0'\nassert solution('''0000\n1111''') == '1'\nassert solution('''0000\n0000''') == '2'\n\nimport sys\nimport io\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 3') == '1'\nassert solution('3 1 3 1') == '0'\nassert solution('2 2') == '2'\nassert solution('7 3 4 2 6 5 6 1') == '3'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\", \"First\"\nassert solution(\"4 1 6 3 6\") == \"3\", \"Second\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"2\", \"Third\"\nassert solution(\"1 2\") == \"0\", \"Fourth\"\nassert solution(\"2 3\") == \"1\", \"Fifth\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 1 6 3 6\") == \"2\"\nassert solution(\"7 3 4 2 6 5 6 1\") == \"3\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"2 3\") == \"0\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3'\n\nprint(solution())"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2''') == '1'\nassert solution('''2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3''') == '0'\nassert solution('''1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 3\n2 4 5 7 8 10\n4 5 7 8 10 1\n3 2\n1 3\n3 4\n6 1\n3 4 5 6 7 8 9\n7 8 9 10 1\n3 4 5 6 7 8 10\n5 1\n3 4 5 6 7 8 9\n7 8 9 10 1\n4 5 6 7 8 9 10\n5 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n''') == '3'\nassert solution('''\n1 2\n2 3\n1 1\n''') == '2'\nassert solution('''\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\n''') == '3'\nassert solution('''\n2 1\n3 1\n1 2\n''') == '0'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '2'\nassert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''') == '1'\nprint(solution('''\n5 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\n''')) == '2'\nprint(solution('''\n2 3\n3 1 3 1\n1 2\n2 3\n3 1\n''')) == '0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1.0'\nassert solution('2 2') == '2.0'\nassert solution('3 2') == '2.0'\nassert solution('4 4') == '4.0'"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 1\n1 2 3 4\n''') == '4.000000'\nassert solution('''4 2\n2 4 3 4\n''') == '3.666666'"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '4.000000', \"Wrong solution\"\nassert solution('4 1') == '1.000000', \"Wrong solution\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1') == '4.000000'\nassert solution('4 2') == '3.666666'\nassert solution('5 5 1') == '4.0'\nassert solution('5 5 2') == '3.5'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"4.000000\"\nassert solution(\"1 2 3 4 5\") == \"2.666666\"\nassert solution(\"1 2 3 4 5 6\") == \"4.0\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 1\\n1 2 3 4') == '4.000000'\nassert solution('4 2\\n2 4 3 4') == '3.666666'\nassert solution('4 5\\n6 7 8 5 2') == '5.0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1') == '4.000000'\nassert solution('4 2') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '4.000000'\nassert solution('4 2 3 4') == '3.666666'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 1\n1 2 3 4\n\"\"\") == \"4.000000\"\nassert solution(\"\"\"\n4 2\n2 4 3 4\n\"\"\") == \"3.666666\""
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\nassert solution('3 3 6 5') == '0.750'\nassert solution('3 3 5 5') == '0.625'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\"\n) == \"0.750\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''5 5 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.375'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.750'\nassert solution('3 2 5 5') == '0.750'\nassert solution('4 2 5 5') == '0.750'\nassert solution('5 2 5 5') == '0.750'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == \"0.750\"\n\nassert solution(\"\"\"4 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n\"\"\") == \"0.625\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'\n\ninput: stdin = input()\noutput: stdout = print()\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 5 5') == '0.750'\nassert solution('4 2 5 5') == '1.000'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 5 5\") == \"0.625\"\nassert solution(\"3 1 1 5\") == \"2.625\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '37'\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 3') == '2'\nassert solution('4 4') == '41'\nassert solution('3 3') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\n\"\"\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2\\n3\\n3') == '4'\nassert solution('1\\n1\\n2\\n3\\n3\\n3') == '37'\nassert solution('4\\n4\\n4\\n4\\n4') == '192'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"4 4\") == \"37\""
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\nassert solution('4 4') == '37'\nassert solution('5 3') == '20'\nassert solution('3 4') == '13'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 4\\n0 3 6\\n4 0 3\\n') == '2'\nassert solution('4 4\\n2 3 0 7\\n0 0 2 1\\n0 0 3 0\\n') == '37'\nassert solution('20 20\\n10 10 10 10\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n2 2 2 2 2\\n') == '144'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10\\n14\\n18\\n'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n') == '1\\n4\\n9\\n16\\n'\nassert solution('3 3\\n123\\n1 4\\n2 4\\n3 4\\n') == '10\\n14\\n18\\n'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('4 5') == '1 1 1 1 1'\nassert solution('4 5') == '1 1 1 1 1'\nassert solution('4 5') == '1 1 1 1 1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"10\"\nassert solution('''\n4 3\n1234\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '4'\nassert solution('7 7') == '5'\nassert solution('3 3') == '2'\nassert solution('7 7') == '5'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '10'\nassert solution('10 2') == '7'\nassert solution('6 5') == '9'\nassert solution('3 3') == '6'\nassert solution('3 4') == '12'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3') == '1'\nassert solution('1 4') == '1'\nassert solution('1 5') == '1'\nassert solution('1 6') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '4'\nassert solution('1 3') == '9'\nassert solution('1 4') == '16'\nassert solution('1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"10\\n18\\n\"\nassert solution(\"3 4\") == \"12\\n18\\n\"\nassert solution(\"3 3\") == \"10\\n14\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4''') == '10'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '1'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '4'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\nprint(solution('''6 8 9\n3 4\n3 5\n1 1\n1 5\n3 1\n4 4\n4 5\n4 2\n5 4\n'''))\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 3\") == \"2\"\nassert solution(\"4 2 3\") == \"1\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n4 2 3') == '2'\nassert solution('2\\n4 2 3') == '1'\nassert solution('3\\n4 2 3') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == '2'\nassert solution('''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 3\n1 3\n2 3\n3 4\n4 5''') == '1'\nassert solution('''4 2 3\n1 3\n3 4\n2 4\n4 5''') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 2 3\n1 3\n2 3\n3 4\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n3 3 3\n1 2\n2 3\n1 3\n\"\"\",\n) == \"1\"\n\nassert solution(\n\"\"\"\n3 4 1\n1 2\n2 3\n1 3\n\"\"\",\n) == \"1\""
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == '2'\nassert solution('''\n5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\nassert solution('''\n4 2 3\n1 3\n2 3\n3 4\n''') == '0'\n'''"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0 10000\nSample Output 1:\nyes\n\nSample Input 2:\n2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nyes\n\n''') == 'no'\n\nassert solution('''\n2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 1:\nyes\n\nSample Input 2:\n3\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0 10000\nSample Output 2:\nno\n''') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 2 2\n1 3 3\n1 4 4\n\"\"\") == \"yes\", \"Test 1\"\nassert solution(\"\"\"\n1\n1 2 1\n1 3 3\n1 4 4\n\"\"\") == \"no\", \"Test 2\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\n''') == 'no'\nassert solution('''\n5\n1 0 1 1 1\n1 0 1 1 1\n1 0 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'no'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"no\"\nassert solution(\"1\") == \"yes\"\nassert solution(\"3\") == \"yes\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\""
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'no'\nassert solution('3') == 'yes'\n\n\"\"\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n1 2\n2 3\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 3\n1 2\n2 3\n1 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 4\n1 2\n2 3\n3 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'YES\\n1 3\\n2 1'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n1\\n3\\n') == 'YES\\n1 3\\n2 1'\nassert solution('2\\n3\\n2\\n1\\n') == 'NO'\nassert solution('4\\n2\\n1\\n3\\n') == 'YES\\n1 3\\n2 1'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 5\n1 2\n2 3\n3 4\n1 4\n2 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4 4\n1 2\n1 3\n2 3\n3 1\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4 4\n1 2\n3 4\n1 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4 4\n1 2\n1 3\n3 2\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'YES\\n1 3\\n2 1\\n'\nassert solution('4 3') == 'NO\\n'\nassert solution('8 3') == 'YES\\n2 2\\n1 1\\n3 1\\n4 1\\n5 2\\n6 3\\n7 4\\n'\nassert solution('12 3') == 'NO\\n'\nassert solution('6 6') == 'NO\\n'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'YES\\n1 3\\n2 1\\n3 2\\n'''\n\n---Input---\nInput: The first line contains the number $N$ and $M$. The next $M$ lines describe each road. Each line consists of two integers $X$ and $Y$. The roads are directed such that a road connecting city $X$ and $Y$ forms a cycle.\n\n---Output---\nOn the first line of output, either print YES if it is possible to assign all directions, or NO.\nOn the next $M$ lines, print the $M$ directions in the form of a matrix, where each row corresponds to a direction, and each column corresponds to a city. Each column should contain only numbers in the range 1 to $N$. The order of the directions should be as in the input, i.e., from left to right.\n\n---Examples---\nInput:\n3 3\n1 2\n1 3\n1 4\nOutput:\nYES\n1 3 1 3 2\n1 3 2 1 3\n1 3 2 1 4\n\nInput:\n4 3\n1 2\n1 3\n1 4\nOutput:\nNO\n1 3 1 3 2\n1 3 2 1 3\n1 3 2 1 4\n1 4 1 1 3\n1 4 2 1 3\n1 4 2 1 4\n'''"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n) == \"YES\\n1 3\\n2 1\\n3 2\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"5 3\") == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n''')"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\n\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 5\n1 = 2\n0 = 2\n3 = 4\n0 > 3\n1 > 4\n\"\"\") == \"inconsistent\"\nassert solution(\"\"\"4 4\n0 > 2\n1 > 3\n0 = 1\n2 > 3\n\"\"\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 10\n0 > 1\n1 = 2\n0 = 2\n1 > 0\n2 > 1\n0 > 0\n0 = 1\n0 > 2\n2 = 2\n1 > 3\n3 > 2\n0 > 2\n2 > 0\n3 = 1\n''') == 'consistent'\n\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'inconsistent'"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 > 2\n3 = 4\n1 > 3\n''') == 'inconsistent'\nassert solution('''\n5\n0 = 1\n1 > 2\n2 = 3\n0 > 3\n1 > 4\n''') == 'inconsistent'"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"inconsistent\"\nassert solution('''\n6 2\n0 > 2\n1 = 2\n0 > 1\n1 = 2\n0 = 2\n1 > 2\nSample Input 3:\n6 3\n0 > 1\n1 = 2\n2 = 3\n0 > 2\n1 > 3\nSample Output 3:\nconsistent''') == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\nassert solution('''\n1 1\n0 = 1\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"consistent\"\nassert solution(\"5 5\") == \"inconsistent\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nassert solution('5\\n1 0 0\\n2 0 0\\n-1 -1 -1\\n-10 -10 -10\\n') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1 0\n0 0 0\n-1 1 0\n''') == '2.997847262'\nassert solution('''4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n\") == \"1.57079633\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"41938.65135885\"\nprint(solution())"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n0 0 -1''') == '0.16666666666667'\nassert solution('''5\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n0 0 -1''') == '3.14159265358979'\n\n'''\nConstraints\n1 \u2264 $n$ \u2264 1000\n-1000 \u2264 x, y, z \u2264 1000\n\u22121000 \u2264 x, y, z \u2264 1000\nx, y, z \u2265 0\nSample Case 2\n1\n0 0 0\n1 1 0\n0 0 0\n0 0 1\n0 0 -1\nSample Case 3\n1\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\nSample Case 4\n1\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\nSample Case 5\n1\n-100 0 0\n0 0 0\n0 0 1\n0 0 -1\nSample Case 6\n1\n0 0 0\n1 1 0\n0 0 0\n0 0 1\n0 0 -1\n''')\n'''\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''\n5\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n0 0 1\n''') == '41938.65135885'\nassert solution('''\n8\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n''') == '6.283185307179586'\nassert solution('''\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '3.141592653589793'\nassert solution('''\n5\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n''') == '5.773502691896257'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1.57079633\""
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n') == '41938.65135885'\nassert solution('5\\n0 0 0\\n0 0 1\\n0 0 2\\n0 0 3\\n0 0 4\\n0 0 5\\n') == '0.04'\nassert solution('10\\n0 0 0\\n0 0 1\\n0 0 2\\n0 0 3\\n0 0 4\\n0 0 5\\n0 0 6\\n0 0 7\\n0 0 8\\n0 0 9\\n0 0 10\\n0 0 11\\n0 0 12\\n0 0 13\\n0 0 14\\n0 0 15\\n0 0 16\\n0 0 17\\n0 0 18\\n0 0 19\\n0 0 20\\n0 0 21\\n0 0 22\\n0 0 23\\n0 0 24\\n0 0 25\\n0 0 26\\n0 0 27\\n0 0 28\\n0 0 29\\n0 0 30\\n0 0 31\\n0 0 32\\n0 0 33\\n0 0 34\\n0 0 35\\n0 0 36\\n0 0 37\\n0 0 38\\n0 0 39\\n0 0 40\\n0 0 41\\n0 0 42\\n0 0 43\\n0 0 44\\n0 0 45\\n0 0 46\\n0 0 47\\n0 0 48\\n0 0 49\\n0 0 50\\n0 0 51\\n0 0 52\\n0 0 53\\n0 0 54\\n0 0 55\\n0 0 56\\n0 0 57\\n0 0 58\\n0 0 59\\n0 0 60\\n0 0 61\\n0 0 62\\n0 0 63\\n0 0 64\\n0 0 65\\n0 0 66\\n0 0 67\\n0 0 68\\n0 0 69\\n0 0 70\\n0 0 71\\n0 0 72\\n0 0 73\\n0 0 74\\n0 0 75\\n0 0 76\\n0 0 77\\n0 0 78\\n0 0 79\\n0 0 80\\n0 0 81\\n0 0 82\\n0 0 83\\n0 0 84\\n0 0 85\\n0 0 86\\n0 0 87\\n0 0 88\\n0 0 89\\n0 0 90\\n0 0 91\\n0 0 92\\n0 0 93\\n0 0 94\\n0 0 95\\n0 0 96\\n0 0 97\\n0 0 98\\n0 0 99\\n0 0 100\\n0 0 101\\n0 0 102\\n0 0 103\\n0 0 104\\n0 0 105\\n0 0 106\\n0 0 107\\n0 0 108\\n0 0 109\\n0 0 110\\n0 0 111\\n0 0 112\\n0 0 113\\n0 0 114\\n0 0 115\\n0 0 116\\n0 0 117\\n0 0 118\\n0 0 119\\n0 0 120\\n0 0 121\\n0 0 122\\n0 0 123\\n0 0 124\\n0 0 125\\n0 0 126\\n0 0 127\\n0 0 128\\n0 0 129\\n0 0 130\\n0 0 131\\n0 0 132\\n0 0 133\\n0 0 134\\n0 0 135\\n0 0 136\\n0 0 137\\n0 0 138\\n0 0 139\\n0 0 140\\n0 0 141\\n0 0 142\\n0 0 143\\n0 0 144\\n0 0 145\\n0 0 146\\n0 0 147\\n0 0 148\\n0 0 149\\n0 0 150\\n0 0 151\\n0 0 152\\n0 0 153\\n0 0 154\\n0 0 155\\n0 0 156\\n0 0 157\\n0 0 158\\n0 0 159\\n0 0 160\\n0 0 161\\n0 0 162\\n0 0 163\\n0 0 164\\n0 0 165\\n0 0 166\\n0 0 167\\n0 0 168\\n0 0 169\\n0 0 170\\n0 0 171\\n0 0 172\\n0 0 173\\n0 0 174\\n0 0 175\\n0 0 176\\n0 0 177\\n0 0 178\\n0 0 179\\n0 0 180\\n0 0 181\\n0 0 182\\n0 0 183\\n0 0 184\\n0 0 185\\n0 0 186\\n0 0 187\\n0 0 188\\n0 0 189\\n0 0 190\\n0 0 191\\n0 0 192\\n0 0 193\\n0 0 194\\n0 0 195\\n0 0 196\\n0 0 197\\n0 0 198\\n0 0 199\\n0 0 200\\n0 0 201\\n0 0 202\\n0 0 203\\n0 0 204\\n0 0 205\\n0 0 206\\n0 0 207\\n0 0 208\\n0 0 209\\n0 0 210\\n0 0 211\\n0 0 212\\n0 0 213\\n0 0 214\\n0 0 215\\n0 0 216\\n0 0 217\\n0 0 218\\n0 0 219\\n0 0 220\\n0 0 221\\n0 0 222\\n0 0 223\\n0 0 224\\n0 0 225\\n0 0 226\\n0 0 227\\n0 0 228\\n0 0 229\\n0 0 230\\n0 0 231\\n0 0 232\\n0 0 233\\n0 0 234\\n0 0 235\\n0 0 236\\n0 0 237\\n0 0 238\\n0 0 239\\n0 0 240\\n0 0 241\\n0 0 242\\n0 0 243\\n0 0 244\\n0 0 245\\n0 0 246\\n0 0 247\\n0 0 248\\n0 0 249\\n0 0 250\\n0 0 251\\n0 0 252\\n0 0 253\\n0 0 254\\n0 0 255\\n',stdin)\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 0\\n1 1 0\\n0 0 0') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1.57079633'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11\\n'+input()) == '3'\nassert solution('18\\n'+input()) == '4'"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution() == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"20\") == \"4\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 0\nassert solution(\"s\") == 1\nassert solution(\"abc\") == 1\nassert solution(\"aaa\") == 3\nassert solution(\"abcabcabcabcabcabcabc\") == 6\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '11\\n'\n   'sabcabcfabc'\n) == '3'\n\nassert solution(\n    '18\\n'\n    'trutrutiktiktappop'\n) == '4'\n\nassert solution(\n    '99\\n'\n    'trrutrutiktiktappop'\n) == '0'\n\nassert solution(\n    '0\\n'\n   'sabcabcfabc'\n) == '0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('s') == '2'\nassert solution('sabcabcfabc') == '3'\nassert solution('trutrutiktiktappop') == '4'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(''.join([s for s in stdin.split()])) == str(len(set(stdin.split())))\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\n\n\"\"\""
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 5 1 3 2\") == \"2\"\nassert solution(\"4 4 5 1 3 2\") == \"5\"\nassert solution(\"8 8 8 8 8 8 8 8 8\") == \"huge\"\nprint('all test cases passed')\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([3,2,3,1]) == \"2\"\nassert solution([6,5,6,3,2,4]) == \"5\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n3 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n20\n15 10 10 2 8 4 6 1 9 7 8 10 9 6 10 1 2 3 4 7 8 5 6\n5 6 6 5 6 5 3 8 5 4 7 7 1 1 5 1 7\n\"\"\") == \"10\"\nassert solution(\"\"\"\n19\n14 14 14 5 1 4 7 5 6 8 8 7 8 2 1 1 8 3 6 6 8\n14 5 4 7 3 1 1 7 4 8 6 1 7 8 6 5 3 5 4 4 2 5 1 2\n\"\"\") == \"20\"\nassert solution(\"\"\"\n10\n2 2 3 2 2 2 2 3 3 3 3 3 1 1 1 2 1 2 1 2 2 3\n1 1 3 3 1 3 3 2 2 1 1 1 2 1 2 1 1 1 1 1 2 1 2\n\"\"\") == \"19\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 1\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4') == '5'\nassert solution('13\\n
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n3 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n1 2 3\n2 3 1\n\"\"\") == \"huge\"\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"huge\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('3 1 2') == '1'\nassert solution('3 2 2') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2\\n') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2\\n') == '5'\nassert solution('10\\n1 2 5 3 4 6 8 9 10\\n8 9 10 1 2 3 4 5 6\\n') == '9'\nassert solution('1\\n2 3 4 5\\n5 4 3 2 1\\n') == 'huge'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n2 3 1\n3 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"5\""
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == '4'\nassert solution(solution.__doc__, stdin='''\n6 1\n0 10 20\n0 40\n5 10\n3 50\n3 40\n4 40\n1 20\n1 20\nSample Input 3:\n4 1\n0 10 20\n0 10\n0 10\nSample Output 3:\n3\n''')"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n0 10 20\n0 10\n''') == '4'\nassert solution('''\n6 1\n0 10 20 26 40 50\n0 40\n''') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 2') == '4'\nassert solution('3 3') == '6'\nassert solution('4 4') == '9'\nassert solution('5 5') == '10'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1\\n0 10 20\\n0 10\\n1 20\\n2 10\\n3 20') == '4'\nassert solution('3\\n1\\n0 10 20\\n0 10\\n1 20') == '3'\nassert solution('5\\n1\\n0 10 20\\n0 10\\n1 20\\n3 10\\n4 20') == '5'\nassert solution('10\\n1\\n0 10 20\\n0 10\\n1 20\\n3 10\\n4 20\\n5 10\\n6 20\\n7 10\\n8 20\\n9 10') == '10'"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == '4'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == '4'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n7 1\n0 10 20 26 40 50 60 80\n0 40\nSample Output 3:\n9\n\nSample Input 4:\n3 1\n0 10 20\n0 10\nSample Output 4:\n8\n\nSample Input 5:\n7 1\n0 10 20 26 40 50 60 80\n0 40\nSample Output 5:\n4\n''') == '4'\n\n'''\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1\n0 10 20\n0 10\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6 1\n0 10 20 26 40 50\n0 40\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\n''') == 'not equal'\nassert solution('''\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n''') == 'equal'\nassert solution('''\nshuffle([1,2,1,2])\nshuffle([1,2,1,2])\n''') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"concat(shuffle([1,2]),shuffle([1,2]))\"\"\") == \"not equal\"\nassert solution(\"\"\"sorted(concat([3,2,1],[4,5,6]))\"\"\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == 'not equal'\nassert solution('''shuffle([1,2,1,2])''') == 'equal'\nassert solution('''concat(concat([3,2,1],[4,5,6]),sorted(shuffle([1,2,1,2])))''') == 'equal'\nassert solution('''concat(shuffle([1,2]),shuffle([1,2]))''') == 'equal'\n\nimport sys\nimport math\nimport os\nimport random\nimport re\nimport time"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"equal\"\nassert solution('''\nconcat([1,2],concat([1,2]))\nshuffle([1,2,1,2])\n''') == \"equal\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''concat([1,2],shuffle([1,2]))\nshuffle([1,2,1,2])\n''') == 'not equal'\nassert solution('''sorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\n''') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n\n\"\"\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == sample_output_1\nprint(solution(input))\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Input 1:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 1:\nequal\n\nSample Input 2:\nshuffle([1,2,1,2])\n[1,2,1,2]\nSample Output 2:\nnot equal\n\nsample input 1 :\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsample output 1 :\nequal\nsample input 2 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 2 :\nequal\"\"\") == \"equal\"\n\nassert solution(\"\"\"concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nequal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nnot equal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nequal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nnot equal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nnot equal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsample output 1 :\nnot equal\nsample input 2 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 2 :\nequal\n\nsample input 1 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 1 :\nnot equal\nsample input 2 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 2 :\nequal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nequal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nequal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nequal\"\"\") == \"not equal\"\n\nassert solution(\"\"\"concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nequal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nnot equal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nsample output 1 :\nnot equal\nsample input 2 :\nshuffle([1,2,1,2])\n[1,2,1,2]\nsample output 2 :\nnot equal\n\nsample input 1 :\nsorted(concat([3,2,1],[4,5,"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''concat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]''') == 'equal'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == '1'\nassert solution('''1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\nassert solution('3 2') == '2'\n\"\"\"\n\na, h = map(int, input().split())\nn, m = map(int, input().split())"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n''') == \"1\"\n\nassert solution('''\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n''') == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1 2\\n3 2\\n1 2 1 2\\n2 3 1 2'\n) == '1'\nassert solution(\n    '1 3\\n3 2\\n1 2 1 2\\n2 3 1 2'\n) == 'Oh no'\n\nassert solution(\n    '1 4\\n4 3\\n1 2 1 2\\n2 3 1 2\\n3 4 1 2'\n) == '3'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"Oh no\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\n\n'''"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"1\"\nassert solution(\"1 3\\n3 2\\n1 2 1 2\\n2 3 1 2\") == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n3 2 1 2\n2 3 1 2\nSample Input 3:\n3 5\n5 2\n1 2 2 3 2\n2 3 1 2\nSample Output 3:\n6\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 1\n3 2\n1 2 1 2\n2 3 1 2\nSample Input 4:\n1 3\n3 2\n1 2 1 2\n2 3 1 2\nSample Output 4:\nOh no\n\"\"\") == \"Oh no\""
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3') == 'Oh no'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"Oh no\"\n\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10 9\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'Oh no'\nassert solution('1 3') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '3'\nassert solution('5 5') == 'impossible'\nassert solution('6 6') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == '3'\nassert solution('''\n3 3\n1 2 2\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5, 5, 1, 2, 1]) == '3'\nassert solution([10, 10, 1, 1]) == 'impossible'\nassert solution([100, 100, 1, 1]) == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3'\nassert solution('''\n3 4 1\n2 3 1\n3 4 1\n4 1 2\n''') == 'impossible'\nassert solution('''\n4 2\n1 3 1\n3 4 1\n4 5 1\n''') == 'impossible'\nassert solution('''\n3 3 1\n2 3 1\n2 4 1\n3 5 1\n4 5 1\n''') == 'impossible'\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n3 4 1\n4 5 1\n5 4 1\n''') == 'impossible'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"3\"\nassert solution(\"4 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\nSample Output 2:\") == \"impossible\"\nassert solution(\"3 3\\n1 2 1\\n2 3 1\\n3 4 1\\nSample Output 1:\") == \"3\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"impossible\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n4 5 1\") == \"3\"\nassert solution(\"2 4 1\\n2 3 1\\n4 3 1\\n2 5 1\\n4 5 1\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 2\n2 4 1\n3 4 1\n4 5 1\n''') == 'impossible', 'Should return \"impossible\" when not possible'\nassert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3', 'Should return \"3\" when only a single one'\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([4, 4]) == \"3\"\nassert solution([5, 5]) == \"impossible\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n2 1 1 1 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1 1 3') == '2', 'Wrong'\nassert solution('1') == '', 'Wrong'"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    2 1 1 1 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n    5\n    1 1 1 1 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n    3\n    10 9 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n    4\n    1 1 1 1 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n    2\n    1''') == '4'\nassert solution('''4\n    4''') == '2'\nassert solution('''4\n    5''') == '4'\nassert solution('''10\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n    1\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 1 1 1 3\n''') == '2'\nassert solution('''1\n22\n''') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"22\") == '4'"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n2 1 1 1 3''') == '2'\nassert solution('''3\n6 8 9 2 5''') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 1 1 1 3\n''') == \"2\"\nassert solution('''1\n22\n''') == \"4\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"1\") == \"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 1 1 1 3') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '4'\nassert solution('10') == '7'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"9\"\nassert solution(\"12\") == \"8\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '2'\nassert solution('3 1 5') == '3'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '2'\n\nassert solution('2 1 3 4') == '2'\n\nassert solution('2 1 2 3 4') == '1'\n\nassert solution('1 2 3 1 4') == '3'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n'\n    '1 2 3\\n'\n) == '3'\n\nassert solution(\n    '4\\n'\n    '1 2 3 4\\n'\n) == '2'\n\nprint(solution(\n    input()\n))\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 1 5\n''') == '3'\n\nassert solution('''4\n1 2 3 4\n''') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"1\"\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n3 1 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '- +d-', f'expected {- +d-} for {stdin}'\nassert solution('''a+b-c\na-b+d-c\n''') == '<any> <empty>', f'expected {<any> <empty>} for {stdin}'\nassert solution('''a-b+d-c\na+b-c\n''') == '- +d-', f'expected {- +d-} for {stdin}'\nassert solution('''a+b-c\na-b+d-c\n''') == '<any> <empty>', f'expected {<any> <empty>} for {stdin}'\nassert solution('''knuth-morris-pratt\nknuthmorrispratt\n''') == '- +d-', f'expected {- +d-} for {stdin}'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '- +d-', 'First Test'\nassert solution('''knuth-morris-pratt\nknuthmorrispratt\n''') == '<any> <empty>', 'Second Test'\n\"\"\"\n\nimport sys\nimport os\n\n__location__ = os.path.dirname(os.path.realpath(__file__))\nsys.path.append(os.path.join(__location__, '../'))\n\nimport unittest\n\nfrom solutions.week_4.solution import solution\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_empty(self):\n        self.assertEqual(solution(\"\"), \"<empty>\", \"Empty String\")\n\n    def test_any(self):\n        self.assertEqual(solution(\"any\"), \"<any>\", \"Any String\")\n\n    def test_yes(self):\n        self.assertEqual(\n            solution(\"a+b-c\"), \"- +d-\", \"Plus Plus Plus\")\n\n    def test_no_plus(self):\n        self."
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"a+b-c\na-b+d-c\"\"\") == \"- +d-\", \"Wrong!\"\nassert solution(\"\"\"knuth-morris-pratt\nknuthmorrispratt\"\"\") == \"> - +d-\", \"Wrong!\"\n\n\"\"\"\n\nimport re\n\na = input()\nb = input()\n\npattern = r\"([a-zA-Z0-9+-]+)\"\npattern2 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]+)([a-zA-Z0-9+-]+)\"\npattern3 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]+)\"\npattern4 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})\"\npattern5 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern6 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern7 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern8 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern9 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern10 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern11 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern12 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern13 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern14 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern15 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern16 = r\"([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})([a-zA-Z0-9+-]{1})+\"\npattern17 = r\"("
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '- +d-'''"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"First\"\nassert solution(\"a-b+d-c\") == \" -+d-\", \"Second\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", solution(\"a+b-c\")\nassert solution(\"a-b+d-c\") == \"<any> <empty>\", solution(\"a-b+d-c\")\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"a+b-c\") == '- +d-', \"Wrong!\"\nassert solution(\"a-b+d-c\") == '+ +d-', \"Wrong!\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('knuth-morris-pratt') == '+ -d-', 'WRONG SOLUTION'\nassert solution('a+b-c') == '- +d-', 'WRONG SOLUTION'\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", \"Solution is wrong\"\nassert solution(\"a-b+d-c\") == \"knuthmorrispratt\", \"Solution is wrong\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\", 'Test 1 failed'\nassert solution(\"a-b+d-c\") == \" + +d-\", 'Test 2 failed'\nassert solution(\"\") == \"<empty>\", 'Test 3 failed'\n\n'''"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 1') == '1'\nassert solution('3 2') == '2'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 0\\n0') == '0'\nassert solution('3 0\\n2 6 6') == '3'\nassert solution('3 0\\n10') == '10'"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"6\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n\"\"\") == \"\"\"0\n1\n3\n2\n3\n5\n3\"\"\"\nassert solution(\"\"\"\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n\"\"\") == \"\"\"11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n\"\"\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '0'\nassert solution('''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n''') == '11'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0'\nassert solution('1 0') == '1'\nassert solution('3 0') == '3'\nassert solution('3 1') == '2'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_sample_1) == '3'\nassert solution(input_sample_2) == '11'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 0') == '1'\nassert solution('3 0') == '1'\nassert solution('3 0') == '1'\nassert solution('3 0') == '1'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '0'\nassert solution('''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n''') == '1'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6'\n\nassert solution('''\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '0'\n\nassert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2 4 6'\nassert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0'\nassert solution('7 7\\n1 2 2\\n2 3 2\\n3 5 2\\n4 5 2\\n5 6 2\\n1 6 3\\n2 5 3\\n3 4 3\\n') == '3 4'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2'\nassert solution('''\n5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6\n''') == '4 6'\n\nimport sys\nimport io\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '0'\nassert solution('7 8') == '2'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '2 4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 2\\n2 3 2') == '0\\n2\\n'"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '4\\n5\\n6\\n1\\n2\\n3\\n'\nassert solution(\n    '2\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"1 1\") == \"4\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 1') == '4'\nassert solution('1 1') == '4'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12\\n1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '4 5 6'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '1 2 3'\nassert solution('1 1') == '1 2'\nassert solution('4') == '1 2 3 4'\nassert solution('10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 1') == '4'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n1 2\n1 3\n1 1\n1 2\n1 3''') == '4 5 6'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"12\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 1\\n\"\n    \"2 2\\n\"\n    \"2 3\\n\"\n    \"2 4\\n\"\n    \"2 5\\n\"\n    \"2 6\\n\"\n    ) == \"4\\n\"\nassert solution(\n    \"6\\n\"\n    \"1 1\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 1\\n\"\n    \"2 2\\n\"\n    \"2 3\\n\"\n    \"2 4\\n\"\n    \"2 5\\n\"\n    \"2 6\\n\"\n    ) == \"1\\n\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4\\n5\\n6\\n1\\n2\\n3\\n'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('P') == '1'\nassert solution('C') == '1'\nassert solution('CP') == '2'\nassert solution('CPC') == '2'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''CPCC''') == '1'\nassert solution('''PPPPCCCC''') == '8'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"PPPPCCCC\") == \"8\"\nassert solution(\"CPSPSPSP\") == \"5\"\nassert solution(\"CPSPSPSPC\") == \"4\"\nassert solution(\"CPSPSPSPCC\") == \"4\"\nassert solution(\"CPSPSPSPCCC\") == \"3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 3\n2 3\n3\n\"\"\") == \"1 2 3\"\n\nassert solution(\"\"\"\n3 2 1\n1 3\n2 3\n3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 2 1\n1 3\n2 3\n3\n\"\"\") == \"1,2,3\"\n\nassert solution(\"\"\"\n4 2 1\n1 4\n2 4\n1\n\"\"\") == \"1,2,4\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 2 3\"\nassert solution(\"1 2 1\") == \"1 2 3\"\nassert solution(\"2 3 3\") == \"2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 2 3\"\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 1\\n1 2\\n2 3\\n2') == '1 2 3'\nassert solution('2 2 1\\n1 3\\n2 3\\n3') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3') == '1 2 3'\nassert solution('2 2 1\\n1 3\\n2 3\\n3') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 3') == '1 3'\nassert solution('2 3') == '1 3'\nassert solution('1 2 3') == '1 3'\nassert solution('2 3 1') == '1 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 1\n1 3\n2 3\n2\n''') == '1 2 3'\n\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2 1\n1 3\n2 3\n2''') == '1 2 3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '1 2 3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '1 2 3'\nassert solution('''4 2 1\n1 3\n2 3\n3''') == '1 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n1 3\n2 3\n3 3\n2\n''') == '1 3 2 3 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n1\\n') == '1 2'\nassert solution('3\\n2 1\\n1 3\\n2 3\\n3') == '1 2 3'\nassert solution('4\\n1 2\\n1 3\\n2 3\\n3') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution) == '1 2 3'\nassert solution(solution) == '3'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1\n2\n3\n4\n''') == '39'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '39'\nassert solution(input()) == '4'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 3\n2 4 2 3 4\"\"\") == \"39\"\nassert solution(\"\"\"5 1\n1 0 1 1 1\"\"\") == \"4\"\nassert solution(\"\"\"5 2\n1 0 1 1 1\"\"\") == \"3\"\nassert solution(\"\"\"5 1\n1 0 1 1 1\"\"\") == \"2\"\nassert solution(\"\"\"5 2\n1 1 1 1 1\"\"\") == \"0\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '39'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39', f'''Solution:  {solution()}'''\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 3\n2 4 2 3 4\n\"\"\") == \"\"\"39\"\"\"\nassert solution(\"\"\"5 1\n1 0 1 1 1\n\"\"\") == \"\"\"4\"\"\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string_1) == \"1 1 2\"\nassert solution(input_string_2) == \"2 4 3\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\".xx.x.xx.xx.xx.x.xx.xx.xx.x.xx.xx.x\") == \"1 1 2\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx.x\\nxx.x') == '1 1 2'\nassert solution('4 6\\nxx...\\nxx.xx') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\nx.\nxxx\nxxxx''') == '2 2 1'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '2 4 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '1 1 2', \"First\"\nassert solution('4 6') == '1 2 4', \"Second\"\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n.x.\\nxx.x') == '1 1 3'\nassert solution('4 6\\nxx...\\nxx.xxx') == '1 2 4'\nassert solution('2 3\\nxx.x\\nxxx') == '2 3 1'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 1 2'\nassert solution('''\n10 10\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x.\nxxxxx.x.x.x.x"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\nxxx\nxxx\n...\nSample Output 3:\n1 1 2\n2 3 1\n''') == '1 1 2\\n2 3 1'\nassert solution('''4 6\nxxxx\nxxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\nxxxx\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 1 2'\n\n\"\"\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 1 2\\n1 2 1\\n0 2 0\\n0 1 0\\n\"\n) == \"0\"\nassert solution(\n    \"3 1 2\\n1 2 1\\n0 2 0\\n0 1 0\\n\"\n) == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 2') == \"0\"\nassert solution('2 0 1') == \"0\""
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == \"1\"\nassert solution('2 0 1') == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"indistinguishable\"\nassert solution(\"2 0 1\") == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\nassert solution('1 1 1') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == '0'\n\nassert solution('''5 1 2\n1 2 1\n0 2 0\n0 1 0\n1 1 1\n0 0 0\nSample Output 3:\n0\n''') == 'indistinguishable'\n\nassert solution('''5 0 1\n1 1 1\n0 0 0\n0 1 0\n1 1 1\nSample Output 4:\nindistinguishable\n''') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 1 2\n1 2 1\n0 2 0\n0 1 0\"\"\") == \"0\"\nassert solution(\"\"\"1 1 1\n1 1 1\n0 0 0\"\"\") == \"indistinguishable\"\nassert solution(\"\"\"3 1 2\n1 2 1\n0 2 0\n0 1 0\"\"\") == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 0\n1 2 1\n1 2 1\n''') == '0'\nassert solution('''\n4 3 0\n1 2 1\n1 2 1\n1 3 1\n''') == '1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\n\n-----------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    \n    def test_sample_case_1(self):\n        self.assertEqual(solution('0110'), '1111')\n        \n    def test_sample_case_2(self):\n        self.assertEqual(solution('1001'), '0111')\n        \n    def test_empty_string(self):\n        self.assertEqual(solution(''), '-1')\n        \nunittest.main(verbosity=2)"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0110\\n1001\") == \"1111\"\nassert solution(\"0\\n1\") == -1\nassert solution(\"0\\n1\\n1\") == \"1111\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1010\n1001''') == '1111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"1111\") == \"1111\"\nassert solution(\"0111\") == \"0111\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('-11111') == '-11111'\nassert solution('1111') == '+000-"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10000\") == \"+0000\"\nassert solution(\"1111\") == \"+000-\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '+1'\nassert solution('0') == '0'\nassert solution('-1') == '-1'\nassert solution('-10') == '-10'\nassert solution('+2') == '+2'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1111') == '+000-', solution('1111')\nassert solution('00111') == '+000-', solution('00111')\nassert solution('1') == '+1', solution('1')\nassert solution('10') == '+0', solution('10')\nassert solution('13') == '+0-', solution('13')\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('123') == '+00+0-1'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('-101') == '-1-0-'\nassert solution('-11-') == '-11-'\nassert solution('1') == '+1-'\nassert solution('101') == '+0-1-'\nassert solution('1000') == '+0+0-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"+1\"\nassert solution(\"11111\") == \"+111-1\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"+0000\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"+1\"\nassert solution(\"1000\") == \"+00\"\nassert solution(\"1001\") == \"+1\"\nassert solution(\"100000\") == \"0\"\nassert solution(\"1001001\") == \"0-1\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n1 1 1 1\n1 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n1 6 5\n''') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5 2 1\n1 2\n2 3\n3 4\n4 5''') == '7'\n\nassert solution('''2 2 3 1\n2 3\n3 2\n1 3\n1 4''') == '6'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 1\\n2 2\\n1\\n1\\n1 2 1\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n\") == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''6 3 1 2\n1 2\n2 3 4\n3 4 5\n3 6 5\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '11'\nassert solution('''8 1 1 1\n1 2\n1 3\n1 4\n2 5\n3 6\n4 7\n5 8\n6 9\n7 10\n1 11 1\n1 12 1\n1 13 1\n1 14 1\n2 15\n3 16\n3 17\n3 18\n3 19\n4 20\n5 21\n5 22\n5 23\n5 24\n6 25\n6 26\n6 27\n6 28\n6 29\n7 30\n7 31\n7 32\n7 33\n7 34\n7 35\n7 36\n7 37\n7 38\n7 39\n7 40\n8 41\n8 42\n8 43\n8 44\n8 45\n9 46\n9 47\n9 48\n9 49\n10 50\n10 51\n10 52\n10 53\n10 54\n10 55\n10 56\n10 57\n10 58\n10 59\n10 60\n10 61\n10 62\n10 63\n10 64\n10 65\n10 66\n10 67\n10 68\n10 69\n10 70\n10 71\n10 72\n10 73\n10 74\n10 75\n10 76\n10 77\n10 78\n10 79\n10 80\n10 81\n11 82\n11 83\n11 84\n11 85\n11 86\n11 87\n11 88\n11 89\n11 90\n11 91\n11 92\n11 93\n11 94\n11 95\n11 96\n11 97\n11 98\n11 99\n12 100\n12 101\n12 102\n12 103\n12 104\n12 105\n12 106\n12 107\n12 108\n12 109\n12 110\n12 111\n12 112\n12 113\n12 114\n12 115\n12 116\n12 117\n12 118\n12 119\n12 120\n12 121\n12 122\n12 123\n12 124\n12 125\n12 126\n12 127\n12 128\n12 129\n12 130\n12 131\n12 132\n12 133\n12 134\n12 135\n12 136\n12 137\n12 138\n12 139\n12 140\n12 141\n12 142\n12 143\n12 144\n12 145\n12 146\n12 147\n12 148\n12 149\n12 150\n12 151\n12 152\n12 153\n12 154\n12 155\n12 156\n12 157\n12 158\n12 159\n12 160\n12 161\n12 162\n12 163\n12 164\n12 165\n12 166\n12 167\n12 168\n12 169\n12 170\n12 171\n12 172\n12 173\n12 174\n12 175\n12 176\n12 177\n12 178\n12 179\n12 180\n12 181\n12 182\n12 183\n12 184\n12 185\n12 186\n12 187\n12 188\n12 189\n12 190\n12 191\n12 192\n12 193\n12 194\n12 195\n12 196\n12 197\n12 198\n12 199\n13 200\n13 201\n13 202\n13 203\n13 204\n13 205\n13 206\n13 207\n13 208\n13 209\n13 210\n13 211\n13 212\n13 213\n13 214\n13 215\n13 216\n13 217\n13 218\n13 219\n13 220\n13 221\n13 222\n13 223\n13 224\n13 225\n13 226\n13 227\n13 228\n13 229\n13 230\n13 231\n13 232\n13 233\n13 234\n13 235\n13 236\n13 237\n13 238\n13 239\n13 240\n13 241\n13 242\n13 243\n13 244\n13 245\n13 246\n13 247\n13 248\n13 249\n13 250\n13 251\n13 252\n13 253\n13 254\n13 255\n13 256\n13 257\n13 258\n13 259\n13 260\n13 261\n13 262\n13 263\n13 264\n13 265\n13 266\n13 267\n13 268\n13 269\n13 270\n13 271\n13 272\n13 273\n13 274\n13 275\n13 276\n13 277\n13 278\n13 279\n13 280\n13 281\n13 282\n13 283\n13 284\n13 285\n13 286\n13 287\n13 288\n13 289\n13 290\n13 291\n13 292\n13 293\n13 294\n13 295\n13 296\n13 297\n13 298\n13 299\n14 300\n14 301\n14 302\n14 303\n14 304\n14 305\n14 306\n14 307\n14 308\n14 309\n14 310\n14 311\n14 312\n14 313\n14 314\n14 315\n14 316\n14 317\n14 318\n14 319\n14 320\n14 321\n14 322\n14 323\n14 324\n14 325\n14 326\n14 327\n14 328\n14 329\n14 330\n14 331\n14 332\n14 333\n14 334\n14 335\n14 336\n14 337\n14 338\n14 339\n14 340\n14 341\n14 342\n14 343\n14 344\n14 345\n14 346\n14 347\n14 348\n14 349\n14 350\n14 351\n14 352\n14 353\n14 354\n14 355\n14 356\n14 357\n14 358\n14 359\n14 360\n14 361\n14 362\n14 363\n14 364\n14 365\n14 366\n14 367\n14 368\n14 369\n14 370\n14 371\n14 372\n14 373\n14 374\n14 375\n14 376\n14 377\n14 378\n14 379\n14 380\n14 381\n14 382\n14 383\n14 384\n14 385\n14 386\n14 387\n14 388\n14 389\n14 390\n14 391\n14 392\n14 393\n14 394\n14 395\n14 396\n14 397\n14 398\n14 399\n14 400\n14 401\n14 402"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('2 1 1 1') == '2'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''7 3 4\n1 3\n1 2 2\n2 4\n2 5 2\n2 6 2\n3 5\n3 6\n4 6\n''') == '10'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''\n5 5 4 4\n2 3\n4 2\n1 5\n2 3\n4 1\n''') == '3'\nassert solution('''\n5 6 5 6\n1 2\n3 4\n2 5\n5 6\n2 6\n''') == '7'\nassert solution('''\n5 7 5 7\n1 2\n4 5\n3 6\n5 6\n2 5\n3 5\n''') == '10'\nassert solution('''\n5 6 5 6\n1 2\n3 4\n2 5\n5 6\n2 6\n''') == '8'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '13'\nassert solution('''2 1 1 1\n2 2\n1\n1\n1 2 1\nSample Output 2:\n2''') == '''\n'''"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 8 3 2') == '9'\nassert solution('2 1 1 1') == '2'\nassert solution('5 3 4') == '2'\nassert solution('5 6') == '7'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1\") == \"2\"\nassert solution(\"3 4 2\") == \"7\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1\") == \"2\"\nassert solution(\"3 4 2\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\n2 2\\n1 1 R\\n010\\n000\\n000\\n\") == \"2\"\nassert solution(\"3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301\\n\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"7\"\n\nassert solution([3, 3, 1]) == \"2\"\nassert solution([3, 4, 2]) == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4 2\n3 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1 1 U') == '1'\nassert solution('3 3 2 2 R') == '2'\nassert solution('3 4 2 2 R') == '3'\nassert solution('10 5 10 3 R') == '21'\nassert solution('10 10 10 3 R') == '21'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"1\", \"Should return 1\"\nassert solution(\"2 2 1\") == \"2\", \"Should return 2\"\nassert solution(\"3 3 2\") == \"3\", \"Should return 3\"\nassert solution(\"4 3 2\") == \"5\", \"Should return 5\"\nassert solution(\"3 3 4\") == \"7\", \"Should return 7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1\\n2 2\\n1 1 R\\n010') == '2'\nassert solution('3 4 2\\n2 2\\n3 4 R\\n2327\\n6009\\n2112\\n3 2 R\\n1310\\n2101\\n1301') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '3 3 1\\n'\n    '2 2\\n'\n    '1 1 R\\n'\n    '010\\n'\n    '000\\n'\n    '000\\n'\n) == '2'\n\nassert solution(\n    '3 4 2\\n'\n    '2 2\\n'\n    '3 4 R\\n'\n    '2327\\n'\n    '6009\\n'\n    '2112\\n'\n    '3 2 R\\n'\n    '1310\\n'\n    '2101\\n'\n    '1301\\n'\n) == '7'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 2 1 2 3\n''') == '2'\nassert solution('''8\n1 2 4 1 1 2 5 1\n''') == '4'\nprint('All tests passed.')\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2'\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 3 4\\n\") == \"2\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 2 1 2 3\"\n) == \"2\"\nassert solution(\n    \"8\\n\"\n    \"1 2 4 1 1 2 5 1\"\n) == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 2 1 2 3') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"4\""
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n5\n2 2 1 2 3\n'''\n    ) == '2'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''6\n    D 3 1\n    D 2 2\n    D 1 3\n    P 1\n    P 2\n    P 3\n    '''\n) == 'NE'\nassert solution(\n    '''6\n    D 8 8\n    D 2 4\n    D 5 6\n    P 2\n    D 6 2\n    P 4\n    '''\n) == '1'\nprint('All tests passed!')"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"NE\"\nassert solution(\"6\") == \"NE\"\nassert solution(\"6\") == \"NE\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == '1'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    D 3 1\n    D 2 2\n    D 1 3\n    P 1\n    P 2\n    P 3\n    \"\"\"\n    ) == \"NE\""
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == \"3\"\nassert solution('2') == \"1\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\nD 2 4\nD 5 6\nP 2\n''') == '1'\nassert solution('''\n2\nD 8 8\nD 2 4\nD 5 6\nP 2\n''') == '3'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"6\") == \"1\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"2 3 5 6\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 10') == '2', 'Should catch 2'\nassert solution('2 3 5 6') == '5', 'Should catch 5'\nassert solution('10 5 2 5') == '10', 'Should catch 10'\nassert solution('3 1 2 5') == '3', 'Should catch 3'\n\nimport sys\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n3 5 4 9\n0 0\n0 2\n0 1\n1 1\n0 1\n1 2\n1 3\n''') == '5'\nassert solution('''\n5 5 4 8\n0 0\n0 2\n0 1\n0 3\n1 1\n1 2\n1 3\n1 4\n''') == '8'\n\n'''\nsolution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\n\nsolution('''\n3 5 4 9\n0 0\n0 2\n0 1\n1 1\n0 1\n1 2\n1 3\n''') == '5'\n\nsolution('''\n5 5 4 8\n0 0\n0 2\n0 1\n0 3\n1 1\n1 2\n1 3\n1 4\n''') == '8'\n'''\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''3 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 1 10') == '2'\nassert solution('2 3 5 6') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1 10') == '2'\nassert solution('3 3 5 6') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1 10\") == \"2\"\nassert solution(\"2 3 5 6\") == \"5\"\nassert solution(\"2 2 1 10\") == \"2\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\nassert solution('''\n3 4 2 5\n1 1\n2 2\n1 2\n''') == '4'\nassert solution('''\n4 3 1 4\n1 1\n2 2\n2 2\n''') == '3'\n'''\n\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2') == '2'\nassert solution('4 4 1 2\\n1 1\\n3 2\\n2 3') == '5'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2.0000000000'\nassert solution('1') == '2.0000000000'\nassert solution('10') == '10.0000000000'\nassert solution('1.1') == '1.10000000000'\nassert solution('1.0001') == '1.000100000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '2.0000000000'\nassert solution('3') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'\nassert solution('1000\\n-5.9199802836\\n-1.563626944\\n-0.9444335913\\n0.566686579\\n0.566686579\\n') == '4.5728857979'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n\"\"\") == \"2.0000000000\"\nassert solution(\"\"\"\n5\n0.3 0.0 1.2\n-0.3 -1.2 0.9\n-0.5 0.0 0.5\n-1.2 0.9 -0.3\n0.5 0.5 -0.5\n\"\"\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n\"\"\") == \"2.0000000000\"\nprint(\"Solution: \", solution(input()))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5''') == '2.0000000000'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 9 5\n1 100 10''') == '1\\n5\\n'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\nassert solution('1 99 5') == '99'\nassert solution('1 99 9') == '99'\nassert solution('1 99 9') == '99'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 9 5\n''') == '1'\nassert solution('''1 100 10\n''') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 9 5\n\"\"\") == \"\"\"1\n5\n\"\"\", \"Wrong answer in sample #1\"\nassert solution(\"\"\"\n10\n1 2 6 4\n\"\"\") == \"\"\"10\n10\n\"\"\", \"Wrong answer in sample #2\"\nassert solution(\"\"\"\n9\n1 9 5\n\"\"\") == \"\"\"9\n10\n\"\"\", \"Wrong answer in sample #3\"\nassert solution(\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"\"\"6\n10\n\"\"\", \"Wrong answer in sample #4\"\nassert solution(\"\"\"\n50\n1 1 3 5 7 9\n\"\"\") == \"\"\"11\n50\n\"\"\", \"Wrong answer in sample #5\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 7') == '1'\nassert solution('3 5 8') == '2'\nassert solution('1 1 1') == '3'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"7\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('3 2') == '4 4 2 4 4 1 4'\nprint('All tests passed')\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '4'\nassert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 1 2 4 4') == '4 4 2 4 4 1 4'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n1\n1\n''') == '1'\nassert solution('''4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7 4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 1') == '1'\nassert solution('5 5') == '4 4 2 4 4 1 4'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\nassert solution('3 1 2 4') == '1'"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7\\n4 4 2 4 4 1 4\"\nassert solution(\"5 6\\n1 2 3 4 5\\n5 1 2 3 4 5\") == \"7\\n4 4 2 4 4 1 4\"\nassert solution(\"4 1 2 4 4\\n1 2 3 4 5\\n5 1 2 3 4 5\") == \"2\\n3 4 5 2 4 4 1\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7 4 4 4 4 1 4\""
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2 3\n1 2 3\n''') == '7'\nassert solution('''10 10\n10 10 10 10\n10 10 10 10\n10 10 10 10\n''') == '7'\nassert solution('''5 5\n1 2 4 3 5\n1 2 4 3 5\n1 2 4 3 5\n1 2 4 3 5\n''') == '4'\nassert solution('''11 11\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n''') == '6'\nassert solution('''16 16\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3 5 6 7 8 9 10\n1 2 4 3"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n5 6 4') == '6'\nassert solution('5\\n10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 10, 3, 2]) == \"4\"\nprint(solution([10, 10, 5, 0]))"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 10 3 2\"\"\") == \"4\"\nassert solution(\"\"\"10 10 5 0\"\"\") == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 10 3 2''') == '4'\nassert solution('''10 10 5 0''') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\""
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 10 3 2\n10 10 5 0\n''') == '4'\nassert solution('''10 10 5 0\n0 0 0''') == '10'\nassert solution('''3 4 5 0\n0 0 0\n2 1 2\n''') == '5'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2 3\n3\n''') == '1'\nassert solution('''\n2 5 8\n123456789\n''') == '10'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 20') == '10'\nassert solution('6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 20') == \"10\", \"Should be 10\"\nassert solution('2 1 20') == \"10\", \"Should be 10\"\nassert solution('3 1 20') == \"11\", \"Should be 11\"\nassert solution('4 1 20') == \"12\", \"Should be 12\"\nassert solution('5 1 20') == \"13\", \"Should be 13\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '10'\nprint('Congratulations, have a nice day!')\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == '11'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"11\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"10\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('4 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '0.0 0.0'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 2.666667'\nassert solution('5 2\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'\nassert solution('''4 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"1.500000 2.666667\"\nassert solution(\"10 0\") == \"0.000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('10 2') == '0.0'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.50000 2.60000'\nassert solution('''4 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1''') == '1.500000 3.666700'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''\n3 3\n1 S 2\n2 R 2\n3 S 2\n4 R 2\n5 R 2\n''') == '1.5000000 2.8333333'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 R 2\\n2 R 2\\n3 S 2') == '1.50000 2.50000'\nassert solution('5\\n3 R 2\\n4 S 2\\n1 S 1\\n2 R 2') == '0.50000 2.5000'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '3'\nprint(solution(input))\nprint(solution(input))"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 6\n101010\n111001\n101001''') == '3'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'\n'''\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"5 5\") == \"2\""
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"10010\") == \"1\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == \"3\"\nassert solution(\"4 5\") == \"3\""
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"4 5\") == \"3\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"-1\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 6\n101010\n111001\n101001\n''') == '3'\n\nassert solution('''\n4 5\n10010\n01010\n10101\n01001\n''') == '3'\n\nassert solution('''\n3 5\n10010\n01010\n10101\n01001\n''') == '3'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\") == \"-3 -1\"\nassert solution(\"4\\n2 4\\n6 -1\\n3 5\\n-1 -1\") == \"3 4\\n3 -1\"\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0''') == '3 -1'\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1''') == '3 4'"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('6') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '3 -1\\n3 1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4\\n3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0') == '-3 -1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1') == '3 4'\nprint('You passed all test cases!')\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1'\nassert solution('''\n4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4'\nassert solution('''\n4\n5 2\n5 -5\n5 -2\n-5 -2\n-5 -5\n''') == '1 2'\nassert solution('''\n4\n1 -1\n2 -2\n3 -3\n-1 -3\n''') == '2 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 0\\n0 1\\n1 0\\n0 -1') == '-3 -1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n\n\"\"\"\nfrom math import atan2\nfrom math import sqrt"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\nassert solution('10 5 8 5 1') == '4 3.3333333'\nassert solution('20 10 3 4 1') == '1 1.5'\nprint('all tests passed')\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0 0\\n2 0\\n') == '2 5.086781'\nassert solution('1 1.5\\n0 0\\n2 0\\n') == '2 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 6 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 6 5 45 20\\n0 0\\n2 0\\n1 1.5\\n') == '2 5.086781'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 2 1') == '1 1.5'\nassert solution('3 0.25 2 45 20') == '2 0.8333333333'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 6 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\n\nassert solution('''\n3 0.25 2 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('2 5 5 45 20') == '1 12.715255'"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 5 5 45 20\n0 0\n2 0\n1 1.5\n''') == '2 5.086781'\nassert solution('''3 0.25 2 45 20\n0 0\n2 0\n1 1.5\n''') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 45 20\") == \"2 5.086781\"\nassert solution(\"3 0.25 2 45 20\") == \"1 12.715255\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == \"8\"\nassert solution(test_input_2) == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(tst_inp_1) == '8'\nassert solution(tst_inp_2) == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\nassert solution('''6\n2 2 1\n1 1 2\n3 3 0\n0 0 1\n1 0 0\n2 2 0\n''') == '18'\nassert solution('''4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\nassert solution('''\n8\n2 4 4 2\n0 0 0 4\n0 4 2 2\n4 1 1 2\n3 0 0 2\n4 0 1 4\n0 0 2 2\n0 1 2 4\n''') == '4'\nassert solution('''\n4\n3 3 3 3\n1 1 1 3\n3 1 2 3\n2 2 2 2\n3 1 1 3\n''') == '2'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\nassert solution('''\n5\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '0'\nassert solution('''\n3\n5 1 7 1\n1 1 5 1\n4 0 4 4\n''') == '1'\nassert solution('''\n2\n5 1 7 1\n1 1 5 1\n4 0 4 4\n''') == '0'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4''') == '1'\nprint('All test cases passed.')\n\n## Part 2\n\nclass Line:\n\n    def __init__(self, x1, y1, x2, y2):\n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n\n    def __str__(self):\n        return f\"({self.x1}, {self.y1}) {self.x2}, {self.y2}\"\n\n    def __repr__(self):\n        return f\"({self.x1}, {self.y1}) {self.x2}, {self.y2}\"\n\n    def __eq__(self, other):\n        return self.x1 == other.x1 and self.y1 == other.y1 and self.x2 == other.x2 and self.y2 == other.y2\n\n    def get_line(self):\n        return (self.x1, self.y1), (self.x2, self.y2)\n\nclass LineSegment:\n\n    def __init__(self, line):\n        self.line = line\n        self.line_x1, self.line_x2 = line.get_line()\n        self.line_x1_coord = self.line_x1[0]\n        self.line_x2_coord = self.line_x2[0]\n\n    def get_line_segment(self):\n        return self.line\n\n    def get_line_segment_y(self):\n        return (self.line_x1[1], self.line_x2[1])\n\n    def get_line_segment_x(self):\n        return (self.line_x1[0], self.line_x2[0])\n\n    def get_point_1(self):\n        return (self.line_x1[0], self.line_x1[1])\n\n    def get_point_2(self):\n        return (self.line_x2[0], self.line_x2[1])\n\n    def __str__(self):\n        return f\"{self.get_line_segment()} - ({self.get_point_1()}, {self.get_point_2()})\"\n\n    def __repr__(self):\n        return f\"{self.get_line_segment()} - ({self.get_point_1()}, {self.get_point_2()})\"\n\n    def __eq__(self, other):\n        return self.get_line_segment() == other.get_line_segment() and \\\n              self.get_line_segment_x() == other.get_line_segment_x() and \\\n              self.get_line_segment_y() == other.get_line_segment_y() and \\\n              self.get_point_1() == other.get_point_1() and \\\n              self.get_point_2() == other.get_point_2()\n\n    def get_min_x(self):\n        return min(self.line_x1_coord, self.line_x2_coord)\n\n    def get_max_x(self):\n        return max(self.line_x1_coord, self.line_x2_coord)\n\n    def get_min_y(self):\n        return min(self.line_x1[1], self.line_x2[1])\n\n    def get_max_y(self):\n        return max(self.line_x1[1], self.line_x2[1])\n\n    def get_mid_point(self):\n        return ((self.line_x1[0] + self.line_x2[0]) / 2, (self.line_x1[1] + self.line_x2[1]) / 2)\n\n    def get_mid_point_x(self):\n        return (self.line_x1[0] + self.line_x2[0]) / 2\n\n    def get_mid_point_y(self):\n        return (self.line_x1[1] + self.line_x2[1]) / 2\n\n    def is_point_on_line_segment(self, point):\n        return point[0] > min(self.get_min_x(), self.get_max_x()) and \\\n               point[0] < max(self.get_min_x(), self.get_max_x()) and \\\n               point[1] > min(self.get_min_y(), self.get_max_y()) and \\\n               point[1] < max(self.get_min_y(), self.get_max_y())\n\n    def get_distance_point_line_segment(self, point):\n        return (self.get_mid_point()[0] - point[0])**2 + (self.get_mid_point()[1] - point[1])**2\n\n    def get_distance_line_segment_point(self, point):\n        return ((self.line_x1[0] - point[0])**2 + (self.line_x1[1] - point[1])**2) + \\\n               ((self.line_x2[0] - point[0])**2 + (self.line_x2[1] - point[1])**2)"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == 'impossible'\nassert solution('10') == '4 3'\n\"\"\"\nimport math"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'impossible'\nassert solution('10') == '4 3'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == 'impossible'\n\nassert solution('10') == 'impossible'"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2\n1\n4\n1\n3\n4\n8\n12\n2\n3\n8\n16\n''') == 'impossible'\n\nassert solution('''15\n4\n1\n4\n4\n4\n6\n8\n8\n13\n8\n8\n10\n16\n12\n''') == '10 3'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1''') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''7\nSample Input 2:\n10\nSample Output 2:\nimpossible''') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\""
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"7\") == \"4 3\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'impossible'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '10'\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n\n\"\"\""
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '16'\nassert solution('2') == '109'\nassert solution('3') == '104'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"16\"\nassert solution(\"2\") == \"109\"\nassert solution(\"3\") == \"109\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n3\n4\n1\n4''') == '109'\nassert solution('''2\n3\n4\n1\n4''') == '110'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"9808\"\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5 3 1 1 2 3 2 3 4 1 0'\nassert solution('''8 2\n4 4 1 1 1 1 1 1 1\n1 1\n1 2\n2 2\n1 1\n2 2\n1 1\n1 1\n1 2\n2 2\n1 1\n''') == '8'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n5 1\n1 2\n1 2''') == '3'\nassert solution('''4 3\n5 3 1 1\n1 3\n2 3\n4 1\nSample Input 3:\n5 5\n1 2 1 2\n1 2\n1 2\n1 2\n1 2\nSample Output 3:\n5\n2 2 1\n1 2 1\n1 2 2\n2 2 1\n1 2 1\n1 2 2\n1 2 1\n1 2 1\n1 2 2\n1 2 2\n1 2 1\n1 2 1\n1 2 2\n1 2 1\n1 2 1\n1 2 2\n1 2 1\n1 2 1\n1 2 1\n1 2 2\n1 2 1\n1 2 1\n1 2 1\n1 2 2\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('5 3') == '1 3 1'\nassert solution('6 3') == '5 1 2'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == \"2\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\") == \"3\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\nSample Output 2:\") == \"5\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"1\""
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('3 5') == '2'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '5'\n\n'''\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n5 1\\n1 2\\n1 2\") == \"3\"\nassert solution(\"4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\") == \"5\"\n\nassert solution(\"2 2\\n2 2\\n2 2\\n2 2\") == \"0\"\nassert solution(\"4 4\\n4 4\\n4 4\\n4 4\") == \"0\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == \"impossible\"\nassert solution(\"\\n\".join([\n    \"3 3\",\n    \"5 2 1\",\n    \"10 1 1\",\n    \"4 1 1\",\n    \"10 2 3\",\n    \"3 1 3\",\n])) == \"1 3\""
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\nSample Output 3:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n2 2\n5 5\n0 1 1\n1 1 0\n2 1 3\n0 2 2\n2 2 1\nSample Output 3:\nimpossible\n''') == 'impossible'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"2 1\") == \"impossible\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n3 2\n6 1 1\n10 1 0\n10 2 2\nSample Output 3:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('1 2') == '1 2'\nassert solution('2 1') == 'impossible'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n\nassert solution('''\n1 1\n1 1\n''') == 'impossible'\n\nassert solution('''\n2 1\n2 1\n''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('6 7') == '1 2 3'\nassert solution('20 3') == '1 2 3'\nassert solution('10 1 0') == '10 2 1'\nassert solution('10 2 1') == '10 1 1'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 2 1'\nassert solution('10') == '5 2 5 4'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5 2'\nassert solution('10') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"5 2\"\nassert solution(\"10\") == \"5 2\"\nassert solution(\"2020\") == \"5 2\""
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('5') == '2'\nassert solution('10') == '5'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n16''') == '4 1'\nassert solution('''100\n100000''') == '100 100000'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nprint('PASSED')"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'\nprint(solution(stdin))\n\nstdin = '2020'\nprint(solution(stdin))\n\nstdin = '10'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5 2'\nassert solution('1') == '1 2'\nassert solution('2') == '1 3'\nassert solution('100') == '10 2'\nassert solution('2019') == '19 2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '4'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\n\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\n\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n\nassert solution('''5\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"unique\"\nassert solution() == \"impossible\""
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n1\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\\n\"\n) == \"unique\"\nassert solution(\n    \"2\\n0\\n1\\n2\\n3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n\"\n) == \"impossible\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    2\n    0 icecream\n    1 chocolate\n    1 cookies\n    3\n    chocolate\n    icecream\n    cookies\n    ''') == 'unique'\nassert solution('''\n    4\n    0 chocolate\n    1 icecream\n    2 cookies\n    2 chocolate\n    3\n    chocolate\n    icecream\n    cookies\n    ''') == 'impossible'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'impossible'\nassert solution('4') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == 'unique'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"unique\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n7 0 10\n''') == '1'\nassert solution(\n'''\n1 2 10\n''') == '1'\nassert solution(\n'''\n1 2 10\n''') == '1'\nassert solution(\n'''\n1 2 10\n''') == '1'\nassert solution(\n'''\n3 1 10\n''') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 0 10\n''') == '0', \"1st example\"\nassert solution('''\n1 2 10\n''') == '1', \"2nd example\"\nassert solution('''\n10 0 10\n''') == '0', \"3rd example\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\nprint(solution(input()))\n\"\"\"\n\nN, K, M = map(int, input().split())\n\nMOD = 2 ** M"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\""
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 0 10\n''') == '0'\nassert solution('''\n1 2 10\n''') == '1'\nassert solution('''\n1 3 10\n''') == '2'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1 0 10\n''') == '0'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n\"\"\"\n\nn, k, m = map(int, stdin.split())"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 10') == '1'\nassert solution('1 3 10') == '2'\nassert solution('3 2 10') == '1'\nassert solution('4 5 10') == '0'\nassert solution('5 4 10') == '1'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n....XXXX...................... \n....XXXX...................... \n....XXXX...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n...................... \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................."
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n.\n....\n.\n....\n....\n.\n....\n.\n...\n....\n.....\n.\n....\n.\n....\n.\n.\n''') == '3 zoom out'\nassert solution('''\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n''') == '1 pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"....XXXX............................XXXX..........\") == \"1 zoom out\"\nassert solution(\"............................................................\") == \"1 pan\"\nassert solution(\"................XX..............................................\") == \"3 rotate\"\nassert solution(\"............................................................\") == \"2 zoom out\"\nassert solution(\".......................................XXXX.................\") == \"3 rotate\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n............................................................\n............................................................\n...XXXX...........XX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n...XXXX...........XXX.........................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n''') == '3 zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('X.X.X..X..X.X..X..X.X...X...X...X...X..X..X..X..X..X..X.X.X.X...X...X...X...X...X...X...X.X..X..X..X..X..X.X.X.X...X...X...X...X...X.X..X..X.X..X..X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X.X.X..X..X.X"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"........X..........\") == \"3 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('....XXXX....................................................') == '1 pan'\nassert solution('............................................................') == '1 pan'\nassert solution('...............................................XXXX...........') == '3 zoom out'\nassert solution('.....................................XXX......XXXX..........') == '3 zoom out'\nassert solution('....................................XXXX........X...........') == '3 zoom out'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"....X...............................................................\") == \"3 pan\"\nassert solution(\"....XXXX....................................................\") == \"3 pan\"\nassert solution(\"....XXXX..................................XXXX..............\") == \"5 zoom in\"\nassert solution(\"....XXXX...................................XXX..............\") == \"3 zoom out\"\nassert solution(\"....XXXX...................................XX..............\") == \"4 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"....XXXX..................................................................................\") == \"1 pan\"\nassert solution(\"....XXXX..................................XXXX..................................................................\") == \"1 pan\"\nassert solution(\"....XXXX...................................XXX..................................................................\") == \"1 pan\"\nassert solution(\"........................................................................................................................\") == \"0\"\nassert solution(\"........................................................................................................................\") == \"0\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n....XXXX....................................................\n....XXXX..................................XXXX..............\n....XXXX...................................XXX..............\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n............................................................\n\"\"\") == \"3 zoom out\"\n\nassert solution(\"\"\"\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n.....................................................................................\n........................."
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 20') == 'apples are great!\\ncheck out our\\nfresh apples!\\n'\nassert solution('7 7') == '+++++++\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+  +  +\\n+++++++'"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\"\nassert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"8 20\n +----+\n | aa |\n +----+\n | bb |\n +----+\n | cc |\n +----+\n\"\"\") == \"\"\" aa\nbb\ncc\n\"\"\", \"\"\"\n8 20\n++++\n++++\n++++\n++++\n++++\n++++\n\"\"\"]\n\nassert solution(\"\"\"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n6"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 7') =='   \\n' * 7\nassert solution('8 10') =='   \\n    \\n    \\n' * 7\nassert solution('10 20') =='   \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 20') == 'apples are great!\\ncheck out our fresh apples!'\nassert solution('7 7') == '+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\ncheck out our fresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 20') == 'apples are great! '\nassert solution('7 7') == '+++++++  + ++ +++ +  + ++ +++  +  ++ +++'"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\nassert solution(\"5 5\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\nassert solution(\"5 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\"\nassert solution(\"1 1\") == \"             \"\nassert solution(\"1 2\") == \"    \"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 20') == \"apples are great! check out our fresh apples!\"\nassert solution('7 7') == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\ncheck out our fresh apples!\"\nassert solution('10 10') == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+ +++ +\\n+++++++\\ncheck out our fresh apples!\""
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\\\n+ oranges are      +\\n\\\n+ way better!      +\\n\\\n+ #oranges>apples  +\\n\\\n+\\n\\\ncheck out our\\n\\\nfresh apples!\"\n\nassert solution(\"7 7\") == \"+++++++\\n\\\n+  =  +\\n\\\n+ +++ +\\n\\\n+ + + +\\n\\\n+ +++ +\\n\\\n+     +\\n\\\n+++++++\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\\n
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H?') == \"1.5\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nTHT\nHTT\n''') == '2.0'\nassert solution('''\nTHT\nTTT\n''') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"HTHTHTH\") == \"2.0\"\nassert solution(\"HT?\") == \"1.5\"\nassert solution(\"H?\") == \"0.0\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"HH\") == \"2.0\"\nassert solution(\"H??\") == \"1.5\"\n\"\"\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"HH\") == \"2.0\"\nassert solution(\"HHH\") == \"3.0\"\nassert solution(\"HHHHH\") == \"4.0\"\nassert solution(\"HHHHHHH\") == \"4.0\"\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HH') == \"2.0\"\nassert solution('H?') == \"1.5\""
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nHT\nHH\nH?'''') == '1.5'\n\nassert solution('''\nTT\nTH\nTHT''') == '0.5'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\nassert solution('5\\n0001\\n1111\\n1111\\n1111') == '1'\nassert solution('10\\n11111\\n11111\\n11111\\n11111') == '2'\nassert solution('100\\n111111\\n111111\\n111111\\n111111') == '3'"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"1\") == \"0001\"\nassert solution(\"1\") == \"0001\"\nassert solution(\"101\") == \"0001\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0001\"\nassert solution(\"4\") == \"0001\"\nassert solution(\"8\") == \"1111\"\nassert solution(\"16\") == \"1111\"\nassert solution(\"32\") == \"0111\"\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('''\n0011\n1111\n1111\n1111\n1101\n''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n1\\n') == '2\\n0\\n'\nassert solution('4\\n' + '1' * 256 + '\\n') == '2\\n'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0001\\n0001\\n0011\\n1110') == '1'\nassert solution('4\\n1111\\n1111\\n1111\\n1111') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2\\n\"\n    \"101\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"0\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \""
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n111\n111\n111\n111\n''') == '2'\n\nassert solution('''\n4\n011\n011\n011\n011\n''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0011\\n0011\\n0001') == '1'\nassert solution('5\\n11111\\n1111\\n1111\\n11111\\n1111') == '6'\nassert solution('6\\n0000\\n0000\\n0000\\n0000\\n0000') == '0'\nprint('All test cases passed!')\n\n\"\"\"\n\nN = int(input())\n\npic1 = input().split()\npic2 = input().split()"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1111\n1111\n1111\n1111''') == '6'\nassert solution('''4\n1111\n1111\n1111\n1111''') == '6'\nassert solution('''4\n0011\n0011\n0011\n0011''') == '1'\nassert solution('''4\n0011\n0011\n0011\n0011''') == '1'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''3\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\nassert solution('''5\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nv 6 10 4\nh 7 10 5\nh 8 10 6\n''') == '5'\nassert solution('''9\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nv 6 10 4\nv 7 10 5\nv 8 10 6\nv 9 10 7\n''') == '6'\nassert solution('''1\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nv 6 10 4\nv 7 10 5\nv 8 10 6\nv 9 10 7\nh 10 10 8\n''') == '8'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n\nassert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 5 10 2\nv 11 2 3\n''') == '4'\n\nassert solution('''\n4\nh 1 1 1\nh 2 1 2\nv 1 1 1\nv 2 1 2\n''') == '2'\n\nassert solution('''\n4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n1\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nprint(solution(*(input().split())))"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '4'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '5'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n\nassert solution('''\n3\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\n\nassert solution('''\n5\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nv 11 2 3\n''') == '6'\n\nassert solution('''\n5\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nh 11 2 3\n''') == '5'\n\nassert solution('''\n3\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\nh 11 2 3\nh 13 2 4\nv 11 2 3\nv 13 2 4\n''') == '1'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '2'\nassert solution('4') == '2'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nprint(solution('''1\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3'''))\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"5 5\") == \"6\"\nassert solution(\"0 1 0 0\") == \"1\"\nassert solution(\"3 5 4 0\") == \"3\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\nassert solution('''4 4\n1 2 3 4\n5 6 7 8\n9 0 0 0\n4 2 3\n6 5 1\n0 7 8\n''') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 5 6') == '4'\nassert solution('7 8 0') == '-1'\nassert solution('4 2 3') == '-1'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '-1'\nassert solution('2 3') == '4'\nassert solution('6 5') == '3'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\"\n) == \"2\"\nassert solution(\n    \"5 6\\n3 2 4 1 0\\n5 5 6 2 0\\n5 6 6 4 0\\n4 2 2 0 0\\n4 2 2 5 0\\n4 3 3 5 0\"\n) == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == '2'\nassert solution('3 3') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\nassert solution('''\n6 6\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '-1'\n'''\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 2 3\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\n\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''\n2 2\n2 1 1\n''') == '-1'\nassert solution('''\n5 5\n0 0 0 0 0\n1 2 3 4 5\n0 1 2 3 4\n0 0 1 2 3\n0 0 0 1 2\n''') == '4'\nassert solution('''\n2 3\n2 1 2\n''') == '-1'\nassert solution('''\n3 3\n1 2 3\n2 1 3\n''') == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 1 2 1\n''') == '4'\nassert solution('''\n8\n1 2 1 3 1 3 1 2\n''') == '4'\n\n---Logic----\nSo we're gonna try to solve it as a single for loop. To solve this problem, we need to build a list of consecutive sub-arrays.\n\nWe can do so by:\n\n1. Initialize a variable `start` to the first index of the array and `end` to the last index of the array.\n2. Initialize `count` to 0.\n3. Using a while loop, we'll keep advancing the `start` variable by one value at a time.\n    a. If the current value is the same as `end`, we know we've exhausted all the values in the array and can stop.\n    b. If the current value is different than `end`, we know we need to keep adding the current value to the list.\n4. If the current value is not equal to `end`, we need to check if the value has already been seen.\n    a. If it has been seen, we know we need to check the next value in the array.\n    b. If it hasn't been seen, we will keep adding it to the list.\n5. After we've iterated through the entire array and are done, return the maximum length of the sub-array.\n''')\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n\"\"\"\n\n\"\"\"\nmy solution\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nlength = 0\ncurrent = 0\ncount = 0\n\nfor i in range(n):\n    current += arr[i]\n    count += 1\n    if arr[i] == 2 and count > 2:\n        count = 1\n        current = 0\n        length = i\n    if count == 3:\n        length = i\n        break\n    \nprint(length)"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 1 3 1 3 1 2\n''') == \"4\"\nassert solution('''5\n1 2 1 3 1 3 1 2\n''') == \"5\"\nassert solution('''4\n1 2 1 3 1 3 1 2\n''') == \"5\"\nassert solution('''4\n1 2 1 3 1 3 1 2\n''') == \"5\"\nassert solution('''5\n1 2 1 3 1 3 1 2\n''') == \"4\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 3 4 2') == '2'\nassert solution('6\\n1 2 1 3 1 3 1 2') == '4'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 1 3 1 3 1 2''') == '4'\n\nassert solution('''8 1 2 1 3 1 3 1 2''') == '3'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n1 2 3 3 4 2\n''') == '2'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'\n\"\"\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\nassert solution('''2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2''') == '4'\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\") == \"4\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2 1 1 1 1 2 2 2 1 1 2 1 1 2\") == \"2\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\nprint('\\033[92mTests Passed\\033[0m')"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == \"4\"\n\nassert solution('''\n3 3 3\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == \"5\"\n\nassert solution('''\n3 2 3\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n''') == \"0\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 2\n2 2 2 1\n1 1 1 2\n\"\"\") == \"2\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\nassert solution('1 1 1') == '2'\nprint('You are a true solution! ;-)')\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n2 5\n0 1\n1 0\n1 1\n1 1\n0 2\n\"\"\"\n) == \"impossible\"\n\nassert solution(\n\"\"\"\n5 5\n0 1\n1 0\n0 1\n1 1\n0 2\n\"\"\"\n) == \"2\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('3 3\\n0 0 1\\n1 0 0\\n0 1') == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == 'impossible'\nassert solution('2 2') == '1'\nassert solution('3 3') == 'impossible'\nassert solution('3 3') == '1'\nassert solution('5 7') == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"2 3\") == \"impossible\"\nassert solution(\"4 2\") == \"1\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n') == \"impossible\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n') == \"1\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n') == \"3\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == \"impossible\"\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n') == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 2\\n\"\n    \"0 0 1 1\\n\"\n    \"1 0 0 1\\n\"\n    \"0 1 0 0\\n\"\n    \"0 0 1 0\\n\"\n    \"1 2\"\n) == \"1\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"impossible\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 2\") == \"impossible\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"4 5\") == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\\n') == '1'\nassert solution(\n    '4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"1\"\nassert solution([\n    \"1\",\n    \"0 0 1 1\",\n    \"1 0 0 1\",\n    \"0 1 0 0\",\n    \"0 0 1 0\",\n    \"0 2\"\n]) == \"1\"\nassert solution([\n    \"4 2\",\n    \"0 0 1 1\",\n    \"1 0 0 1\",\n    \"0 1 0 0\",\n    \"0 0 1 0\",\n    \"0 2\"\n]) == \"impossible\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 2 1') == '35'\nassert solution('11 3') == '2'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"8\"\nassert solution(\"3 5 2 5 8 5\") == \"13\"\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\nassert solution('''\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '35\\n18\\n1'\nassert solution('5\\n1 1 2 1\\n3\\n0 9\\n2 6') == '8\\n2\\n1'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(t1) == '20\\n19\\n18'\nassert solution(t2) == '24\\n23\\n22'\nassert solution(t3) == '34\\n33\\n32'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"8\\n2\\n1\"\nassert solution(input_) == \"35\\n18\\n3\"\n\nassert solution(input_) == str(solution.__code__.co_consts[0])\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == '8'\nassert solution(solution.__doc__,\n                 input_values=(4, 3),\n                 expected_output=(8, 2, 1)) == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n1 2 3\\n3 4 5') == '6\\n2\\n1'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\nassert solution('''11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == '4', 'First example test case wrong'\nassert solution('10 4') == '35', 'Second example test case wrong'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n1') == '0\\n1\\n2\\n'\nassert solution('5\\n3\\n2\\n4\\n1') == '0\\n1\\n2\\n4\\n3\\n'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n3\n2\n4\n1\n5''') == '0 1 3 2 4'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1\n2\n3\n4''') == '0 1 3 6'\nassert solution('''5\n3\n2\n4\n1\n5''') == '0 1 2 4 6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 3 4 5\\n\") == \"0 1 3 6\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\n\n'''\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3\n2\n4\n1\n5\n''') == '0 1 3 2 4 6'\n\nassert solution('''\n10\n3\n2\n4\n1\n5\n7\n8\n9\n10\n''') == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0\\n1\\n3\\n4\\n6'"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n2\\n3\") == \"0\\n1\\n3\\n2\\n\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\") == \"0\\n1\\n2\\n3\\n4\\n5\\n\""
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0\\n1\\n3\\n6\\n'\nassert solution('5') == '0\\n1\\n2\\n4\\n6\\n'\nassert solution('100') == '0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '4\\n'\n    '1 3 2 2\\n'\n    '1 1 3 2\\n'\n    '2 4 7 3\\n'\n    '3 3 5 3\\n'\n) == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n') == '2 4 1 3'\nassert solution('3\\n0 0 1 1\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '3 3 5 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n4 0 3 1''') == '2 4 1 3', 'Should be 2 4 1 3'\nprint('All tests passed!')\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n''') == '1 2 3 4'\n\nassert solution('''3\n2 1 3 2\n1 2 3 2\n3 3 5 3\n''') == '1 2 3 4'\n\nassert solution('''4\n0 0 1 1\n1 2 0 3\n2 2 3 3\n4 0 3 1\n''') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\") == \"2 4 1 3\""
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2 3') == '2 3 1'\nassert solution('4 2 2 3') == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"2 4 1 3\", \"Wrong output\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n') == '4 3 1 2'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 2 2') == '2 4 1 3'\nassert solution('4 0 0 1') == '4 3 1 2'\n\n'''\n\nfrom itertools import permutations\n\nsticks = []"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2 3 1 4\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == \"Theta wins\"\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\"\"\") == \"Theta wins\"\nassert solution(\"\"\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\"\"\") == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == \"Theta wins\", \"First\"\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == \"Theta wins\", \"Second\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\n89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\nassert solution(input()) == 'Theta wins'\nassert solution(input('TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5')) == 'Theta wins'\nassert solution(input('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49')) == 'Theta wins'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'truther'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'\n\n'''"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n\"\"\"\nfrom typing import List\n\nimport pytest\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nprint('Congratulations! Your solutions works perfectly.')\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1 fabulist 1\n1 not charlatan 1\n''') == 'fabulist'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\nassert solution('''\n3 2\n1 and not charlatan 1\n1 not charlatan 1\n''') == 'truther'\nassert solution('''\n4 1\n1 and fabulist 1\n1 and not charlatan 1\n''') == 'truther'\n\n''')\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nassert solution('2 1\\n1 charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 fabulist 1') == 'fabulist'\nassert solution('2 1\\n1 not charlatan 1') == 'truther'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2\n1 truther 1\n1 not truther 1\nSample Output 3:\ntruther\ntruther\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n1 truther 1\n1 not truther 1\n\"\"\") == \"truther\"\nassert solution(\"\"\"\n1 3\n1 truther 1\n1 fabulist 1\n\"\"\") == \"truther\"\nassert solution(\"\"\"\n2 1\n1 charlatan 1\n1 not charlatan 1\n\"\"\") == \"charlatan\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n0.00 1.00\\n0.00 1.00\") == \"1\"\nassert solution(\"3\\n1.00 0.00\\n0.00 1.00\") == \"3\"\nassert solution(\"1\\n1.00 1.00\\n1.00 1.00\") == \"1\"\nassert solution(\"1\\n1.00 1.00\\n1.00 1.00\") == \"1\"\nassert solution(\"1\\n1.00 1.00\\n1.00 1.00\") == \"1\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\nassert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '3'\nassert solution('''7\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '1'\nassert solution('''13\n1.00 -10.00\n2.00 5.00\n3.00 2.00\n4.00 1.00\n5.00 -6.00\n6.00 2.00\n7.00 1.00\n8.00 3.00\n9.00 -1.00\n10.00 -1.00\n11.00 2.00\n12.00 5.00\n13.00 -1.00\n''') == '13'\nassert solution('''49\n1.00 1.00\n4.00 1.00\n5.00 1.00\n6.00 1.00\n7.00 1.00\n8.00 2.00\n9.00 2.00\n10.00 3.00\n11.00 3.00\n12.00 4.00\n13.00 4.00\n14.00 4.00\n15.00 5.00\n16.00 5.00\n17.00 6.00\n18.00 6.00\n19.00 7.00\n20.00 7.00\n21.00 8.00\n22.00 8.00\n23.00 9.00\n24.00 9.00\n25.00 10.00\n26.00 10.00\n27.00 11.00\n28.00 11.00\n29.00 12.00\n30.00 12.00\n31.00 13.00\n32.00 13.00\n33.00 14.00\n34.00 14.00\n35.00 15.00\n36.00 15.00\n37.00 16.00\n38.00 16.00\n39.00 17.00\n40.00 17.00\n41.00 18.00\n42.00 18.00\n43.00 19.00\n44.00 19.00\n45.00 20.00\n46.00 20.00\n47.00 21.00\n48.00 21.00\n49.00 22.00\n''') == '23'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '5\\n'\n    '1.00 5.00\\n'\n    '3.00 3.00\\n'\n    '4.00 2.00\\n'\n    '6.00 4.50\\n'\n    '7.00 1.00'\n) == '4'\n\nassert solution(\n    '6\\n'\n    '-1.50 -1.00\\n'\n    '1.50 -1.00\\n'\n    '0.00 1.00\\n'\n    '1.00 2.00\\n'\n    '2.00 3.00\\n'\n    '3.00 4.50'\n) == '3'\n\nassert solution(\n    '4\\n'\n    '1.00 5.00\\n'\n    '3.00 3.00\\n'\n    '4.00 2.00\\n'\n    '6.00 4.50'\n) == '0'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('2\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '1'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'\nassert solution('5') == '4'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\nassert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'\nassert solution('3\\n-1.00 -1.00\\n1.00 -1.00\\n0.00 1.00') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('1') == '1'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"10\"\nassert solution(\"2 3 2\") == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nassert solution('''\n3 3 1\nX..\n?.\n1\n''') == '1'\nassert solution('''\n3 3 1\nX..\n?.\n1\n''') == '2'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5 2') == '16'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 2') == '16'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 5 2\") == \"16\"\nassert solution(\"R..?.X...\") == \"16\"\nassert solution(\"X..?.R...\") == \"16\"\nassert solution(\"X..?X...X...\") == \"16\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('2 3 1') == '10'\nassert solution('4 5 2') == '16'\nassert solution('1 1 1') == '1'\nassert solution('4 4 4') == '12'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3 1\nX..\n.?.\n10 1000 1\n''') == '10'\nassert solution('''2 5 2\nR....\n. X...\n1000 1000 7 100 8\n''') == '1000'\nassert solution('''2 3 1\nX...\n?...\n100 100 7 100 8\n''') == '100'\nassert solution('''2 3 1\nR..?\nX..?\n1 1 1 1\n''') == '1'\nassert solution('''2 3 2\nR...\n?...\n100 100 100\n''') == '100'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == \"16\"\nassert solution('''\n2 3 1\nX..\n.?.\n10 1000 1\n''') == \"10\"\n''')\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8') == '16'\nprint(solution('''2 5 2\nR..?.\n.X...\n100 100 7 100 8\n'''))\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1.1.1') == '1'\nassert solution('-2.1') == '0'\n\n\"\"\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\nprint(solution('''\n9 10\n11 8 2\n18 17 9\n19 7 6\n18 9 5\n19 10 4\n12 9 1\n8 9 5\n18 4 7\n16 5 7\n12 6 9\n9 13 8\n13 9 4\n7 9 2\n9 14 9\n8 13 2\n7 5 4\n'''))\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n0 4 4\n1 5 1\n2 6 1''') == '1.414'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\nassert solution(\"\"\"\n5 5\n0 0 1\n0 2 3\n1 0 3\n1 1 4\n4 5 1\n\"\"\") == \"0.583\"\nassert solution(\"\"\"\n10 10\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n6 6 1\n7 7 1\n8 8 1\n9 9 1\n10 10 1\n\"\"\") == \"1.5\"\n\nimport sys\nimport io\nsys.stdin = io.BytesIO(input().encode())\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1.414'\nprint('SUCCESS')"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\"\nassert solution(\"\"\"8 8\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n10 10 3\n\"\"\") == \"9.666\"\nassert solution(\"\"\"4 5\n0 0 1\n1 0 2\n2 0 3\n3 0 4\n0 1 5\n0 2 6\n1 2 7\n2 3 8\n3 1 9\n\"\"\") == \"3.167\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1.414\"\nassert solution(\"6 11\") == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n    \"\"\") == \"1.414\"\nassert solution(\n    \"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n    \"\"\") == \"5.657\"\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('3 2 2 2') == '0.414'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 5 1\\n2 2 1') == '1.0'\nassert solution('6\\n2 3 3 2 2 3\\n2 3 4 3 2 3') == '0.0'\nassert solution('2\\n2 2') == '0.0'\nassert solution('5\\n2 3 1 1\\n2 1 1') == '1.0'\nassert solution('5\\n5 5 5 5\\n5 5 5 5') == '0.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('4 1 1 1') == '0.433'\nassert solution('5 1 1 1') == '0.433'\nassert solution('6 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('4 1 1 1 1') == '1.0'\nassert solution('5 1 1 1 1 1') == '0.433'\nassert solution('15 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\nassert solution('2 2 2 2') == '0.25'\nassert solution('3 2 2 3') == '0.433'\nassert solution('4 4 4 4') == '0.25'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1 1 1 1\n3 1 1 1''') == '0.433'\nassert solution('''9 1 1 1 1 1 1 1 1 1\n9\n3 1 1 1''') == '0.433'\nassert solution('''2 2 2 2 2 2 2 2 2 2 2 2\n2\n2''') == '1.414'\nassert solution('''3 3 3 3 3 3 3 3 3 3 3\n3\n2 3 2 2''') == '0.0'\n\nprint(solution('''10 5 5 3 6 6 2 7 3 2 7 2 6 5 3\n4'''))\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 3 3\") == \"0.33333\"\nassert solution(\"5 1 1 1 1\") == \"0.5\"\nassert solution(\"2 1 1 1 1 1\") == \"1.0\"\nassert solution(\"1 1\") == \"0.25\"\nassert solution(\"2 1 1\") == \"0.333333333\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 1 1\") == \"0.433\"\nassert solution(\"4 1 1 1\") == \"1.0\"\nassert solution(\"3 1 1 1 2 2\") == \"1.0\"\nassert solution(\"10 1 2 3 5 6 7 10\") == \"1.0\"\nassert solution(\"2 1 1 1 1\") == \"0.0\""
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('5 3 1 3') == '1.6'\nassert solution('3 1 2 3') == '2.8'\nassert solution('10 3 1 3 5') == '2.4'\nassert solution('1 5 10 1') == '1.4'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == '1.0'\nassert solution('2 1 1 1') == '0.433'\nassert solution('3 2 1 1') == '1.0'\nassert solution('5 2 1 1') == '0.433'\nassert solution('6 2 1 1') == '0.433'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\") == \"5\"\nassert solution(\"8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5') == '5'\nassert solution('8 10') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 10') == '36'\nassert solution('6 5') == '5'"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\nassert solution('''\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\nassert solution('''\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '1'\nassert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '36'\nassert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '1'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 5') == '5'\nassert solution('8 10') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\nassert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5 4\") == \"5\"\nassert solution(\"1 2 3 4 5 5\") == \"5\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n\ninput = sys.stdin.read()\nn, m = map(int, input.split())\nsequence = list(map(int, input.split()))"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n2 1\\n1 2') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1\n2 1\n1 2\nSample Input 3:\n3 2\n2 1 3\n1 3\n2 3\nSample Output 3:\n2\n''') == '1'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n2 1\\n1 2') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3') == '3'\nassert solution('5 2\\n2 1 4 3 5\\n1 4\\n2 5 3\\n3 4\\n4 5') == '4'\nassert solution('5 5\\n1 1 4 3 5\\n3 4\\n4 5\\n2 5 3\\n5 4\\n5 5') == '2'\nassert solution('10 10\\n1 3 4 5 6 7 8 9 10\\n8 2 9 7 6 5 4 3 1\\n5 3 4 7 2 6 1 9 8\\n6 7 5 1 4 3 8 9 2\\n7 9 8 5 6 4 3 1 2 10\\n5 3 4 7 2 6 1 9 8\\n4 3 6 7 8 9 2 5 1\\n3 8 9 5 4 1 2 7 6 10\\n3 9 5 4 7 6 1 8 2\\n8 9 7 6 5 1 4 3 2 10\\n4 7 8 5 6 3 9 1 2\\n4 9 5 7 6 3 1 8 2\\n2 7 4 1 6 9 8 5\\n7 6 8 5 4 1 9 3 2\\n2 3 8 5 1 4 7 9 6\\n9 4 5 7 3 8 2 1 6\\n7 8 2 5 1 4 9 3 6\\n5 6 4 3 8 2 7 9 1\\n6 3 1 4 7 8 9 8 5\\n3 8 9 5 4 1 7 6 2\\n6 1 4 7 8 9 5 3\\n2 5 3 4 1 7 8 9\\n9 5 1 4 7 8 2 3\\n5 3 8 4 1 7 2 9\\n5 1 4 7 8 9 2 3\\n4 8 9 5 1 7 2 6\\n9 8 5 4 1 7 3 2\\n2 8 9 5 7 1 4 3\\n4 1 8 5 7 9 3 2\\n9 5 1 4 7 8 2 3\\n7 8 5 4 1 9 3 6\\n6 5 9 4 1 7 8 3\\n2 5 3 4 8 7 9 6\\n1 6 9 5 7 4 3 2\\n4 2 9 5 7 3 8 1\\n5 3 4 7 8 9 1 6\\n5 3 4 8 7 9 1 6\\n4 5 6 8 9 7 3 2\\n4 5 6 7 8 9 1 2\\n9 4 5 1 4 7 8 3\\n4 6 5 7 8 9 1 2\\n7 6 5 4 1 8 9 3\\n4 7 6 8 9 1 5\\n7 3 6 1 4 8 5 9\\n5 4 7 6 8 9 3\\n4 5 7 6 1 9 8 4\\n8 5 4 7 6 9 3 1\\n7 1 6 4 5 8 9\\n4 5 6 7 8 9 1 2\\n1 5 8 9 7 4 6\\n6 5 1 4 7 8 9\\n6 4 8 9 5 7 3\\n4 8 9 5 1 7 3\\n8 5 6 7 9 4 1\\n7 6 9 5 4 1 8\\n4 9 6 7 5 1 8\\n4 5 6 9 7 1 8\\n8 4 6 5 9 1 7\\n6 5 9 4 8 1 7\\n5 6 7 9 1 4 8\\n5 1 4 8 9 7 6\\n6 7 8 9 5 1 5\\n9 5 4 8 7 6 1\\n6 5 7 9 1 4 8\\n7 6 9 5 4 1 8\\n7 5 6 9 1 4 8\\n6 4 9 7 1 5 8\\n8 6 9 5 1 4 7\\n9 5 1 4 7 8 6\\n7 5 1 4 7 8 9\\n5 6 9 7 1 4 8\\n4 8 9 6 7 1 5\\n5 9 7 8 6 1 4\\n7 6 5 9 1 4 8\\n7 1 6 5 9 4\\n9 6 7 8 5 1 4\\n5 3 8 6 7 1 9\\n8 5 6 7 9 1 4\\n6 4 8 9 5 1 7\\n5 1 8 9 7 6 6\\n7 1 6 9 5 4 8\\n9 1 7 6 5 4 8\\n8 5 6 7 9 1 4\\n9 5 1 4 7 8 6\\n6 4 8 9 5 1 7\\n7 5 6 9 1 4 8\\n9 6 7 5 1 4 8\\n7 1 6 9 5 4 8\\n1 9 8 6 5 4 7\\n4 5 6 7 8 9 1 6\\n9 5 1 4 7 8 9 3\\n8 4 6 5 7 9 1 3\\n6 3 9 5 1 4 7 8\\n9 5 1 4 7 8 2 3\\n4 5 6 8 9 7 1 2\\n5 1 4 7 8 9 3 6\\n9 5 1 4 7 8 2 3\\n9 5 1 4 7 8 2 3\\n5 6 7 8 9 1 4 2\\n9 5 1 4 7 8 2 3\\n5 9 7 8 6 1 4 8\\n7 6 5 9 1 4 8 9\\n6 5 9 4 8 7 1 5\\n4 8 5 6 7 9 1 2\\n9 5 1 4 7 8 2 3\\n5 4 7 8 9 1 6 6\\n8 4 5 6 7 9 1 3\\n5 1 4 7 8 9 3 6\\n8 5 6 7 9 1 4 8\\n5 1 4 7 8 9 3 6\\n8 4 5 6 7 9 1 3\\n4 8 5 6 7 9 1 3\\n6 7 9 8 5 1 4\\n5 1 4 7 8 9 3 6\\n5 9 7 8 6 1 4 8\\n7 5 6 9 1 4 8 9\\n7 5 6 9 1 4 8 9\\n5 5 6 7 8 9 1 6\\n9 5 1 4 7 8 9 3\\n8 5 6 7 9 1 4 8\\n9 5 1 4 7 8 9 3\\n9 5 1 4 7 8 9 3\\n8 4 6 7 9 1 5 8\\n7 6 5 9 1 4 8 9\\n6 5 9 4 8 7 1 5\\n9 5 1 4 7 8 9 3\\n5 1 4 7 8 9 3 6\\n7 8 5 9 1 4 8 6\\n1 4 7 8 9 5 6 6\\n3 5 6 7 8 9 1 4\\n6 4 8 9 5 1 7 8\\n5 6 7 9 1 4 8 9\\n9 5 1 4 7 8 9 3\\n7 6 5 9 1 4 8 9\\n9 5 1 4 7 8 9 3\\n9 5 1 4 7 8 9 3\\n5 1 4 7 8 9 3 6\\n9 5 1 4 7 8 9 3 6\\n8 6 9 5 1 4 7 8\\n5 1 4 7 8 9 3 6\\n7 6 5 9 1 4 8 9\\n9 5 1 4 7 8 9 3\\n9 5 1 4 7 8 9 3\\n8 6 7 9 5 1 4 8\\n9 5 1 4 7 8 9 3\\n7 1 6 9 5 4 8\\n5 1 4 7 8 9 3 6\\n7 8 5 9 1 4 8 9\\n9 5 1 4 7 8 9 3\\n7 1 6 9 5 4 8\\n9 5 1 4 7 8 9 3\\n7 8 5 9 1 4 8 9\\n8 5 6 7 9 1 4 8\\n9 5 1 4 7 8 9 3\\n5 1 4 7 8 9 3 6\\n7"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\nassert solution('10 8') == '10'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('6 5') == '5'\nassert solution('7 7') == '7'\nassert solution('7 7') == '7'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 8\") == \"5\"\nassert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\n''') == '5'\nassert solution('''6 5\n1 4\n2 4\n3 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '6'\nassert solution('''6 5\n1 4\n2 4\n3 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5 8\\n\"\n    \"1 4\\n\"\n    \"4 5\\n\"\n    \"1 5\\n\"\n    \"1 5\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 3\\n\"\n    \"3 5\\n\"\n    \"2 5\\n\"\n    ) == \"5\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1'\nprint(solution('''\n10 5\n1 4\n4 5\n1 5\n1 6\n1 7\n2 6\n3 7\n4 8\n5 7\n6 8\n'''))\nassert solution('''\n10 5\n1 4\n4 5\n1 5\n1 6\n1 7\n2 6\n3 7\n4 8\n5 7\n6 8\n''') == '8'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5''') == '-1'\n\nassert solution('''6 5\n2 4\n3 5\n1 5\n3 6\n1 6\nSample Output 3:\n5''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 8\n1 4\n4 5\n1 5\n1 2\n1 3\n2 3\n3 5\n2 5\n''') == '-1', 'First Example'\nassert solution('''\n5 9\n2 3\n2 4\n3 6\n3 5\n1 6\n1 7\n2 8\n1 9\n''') == '4', 'Second Example'\nassert solution('''\n5 10\n1 2\n3 5\n1 8\n1 9\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n''') == '-1', 'Third Example'\nassert solution('''\n10 10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n''') == '-1', 'Fourth Example'\nassert solution('''\n10 10\n1 2\n3 5\n1 8\n1 9\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n''') == '1', 'Fifth Example'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 8\") == \"-1\"\nassert solution(\"6 5\") == \"5\""
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1\\n1 1\\n5 1\\n5 5\\n4 2\\n') == '4.00'\nassert solution('6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\\n') == '9.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 1') == '4.00'\nassert solution('4 2\\n2 4') == '6.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 1\n1 1\n5 1\n5 5\n4 2\n\"\"\") == \"4.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 1\n1 1\n5 1\n5 5\n4 2\n\"\"\") == \"4.00\"\nassert solution(\"\"\"\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n\"\"\") == \"9.00\"\nassert solution(\"\"\"\n10 10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2\\n-1 -1\\n5 -4') == '2.00'\nassert solution('4 1\\n1 1\\n5 1\\n5 5') == '1.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == \"4.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"2.00\"\nassert solution(\"6 3\") == \"4.00\"\nassert solution(\"2 0\") == \"1.00\"\nassert solution(\"0 0\") == \"0.00\"\nassert solution(\"6 1\") == \"2.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\nprint('Tests passed')\nassert solution('''\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\nprint('Tests passed')\n'''"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1\") == \"2.00\"\nassert solution(\"4 1\\n1 1\\n5 1\\n5 5\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 2') == '4.00'\nassert solution('2 2\\n3 3') == '4.00'\nassert solution('2 2\\n5 5') == '4.00'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"1 2 1 2\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '2 1 2 3'\nassert solution('3 3 4') == '1 2 1 2'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('4') == '1 2 1 2 3'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n\"\"\") == \"2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n\"\"\nassert solution(\"\"\"\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n\"\"\") == \"3 1 1\\n1 3 1\\n1 1 1\\n1 2 1\\n\"\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''\n3 3 4\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\nSample Output 2:\n3 1 1\n1 3 1\n1 1 1\n''') == '1 2 1 2'\nassert solution('''\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\nSample Output 2:\n3 1 1\n1 3 1\n1 1 1\n''') == '1 2 1 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\") == \"1 1 2\\n2 1 1 2\\n2 1 1 2\"\nassert solution(\"3 3 4\") == \"2 1 2\\n1 2 1\\n1 1 1\\n2 1 1 2\""
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3'\nassert solution('''3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1'\nassert solution('''5 5 5\nPAINT 4 0 0 0 4 0\nSAVE\nPAINT 2 0 0 2 0 0\nPAINT 1 1 1 0 1 1\nPAINT 2 2 2 2 2 2\nLOAD 1\n''') == '1 1 1 2 2'\nassert solution('''5 5 5\nPAINT 4 0 0 0 4 0\nSAVE\nPAINT 3 0 0 2 0 0\nPAINT 1 1 1 0 1 1\nPAINT 2 2 2 2 2 2\nLOAD 1\n''') == '2 2 2 3 2'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"2 1 2 3\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\", \"Empty\"\nassert solution(\"1 2 3\") == \"12\", \"1,2,3\"\nassert solution(\"5 5 5\") == \"111\", \"5,5,5\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n\"\"\") == \"1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 4') == '2 1 2 3 3'\nassert solution('5 3 2') == '2 1 2 3 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"1 2 3 4\"\nassert solution(\"2 6\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 1\") == \"-1\"\nassert solution(\"3 3\") == \"1 2\"\nassert solution(\"7 8\") == \"7 8 7\"\nassert solution(\"2 1\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1 4 2'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"-1\"\nassert solution(\"4 3\") == \"1 4 2 3\"\nassert solution(\"5 2\") == \"-1\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n''') == '1 4 2 3'\nassert solution('''\n5 1\n''') == '-1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 3 2 4 5 6 1 7 5 3 4') == '1 4 2 3 5 6 7'\nassert solution('3 1') == '-1'\nassert solution('3 2') == '-1'\nassert solution('3') == '-1'\nassert solution('3 2 5') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1\n2 4 3 6\n4 5 6 1 3\n4 6 1 4 2\n3 4 5 2''') == \"1 4 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5 1 3 2 1') == '3 1 2 5'\nprint(solution('2 5 1 3 2 1'))\nassert solution('2 5 1 3 2 1') == '3 1 2 5'\nprint(solution('2 5 1 3 2 1'))\n'''\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution([3,4,2,1,1,3]) == \"1\"\nassert solution([5,0,2,6,8,6]) == \"0\""
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4 2\\n2 1\\n1 3\\n\") == \"1\"\n\nassert solution(\"4\\n5 0\\n2 6\\n8 6\\n5 7\\n\") == \"0\"\n\nassert solution(\"3\\n-7 -1\\n2 4\\n7 3\\n\") == \"1\"\n\"\"\"\n\nN = int(input())\n\ncord1 = []\ncord2 = []\ncord3 = []\n\nfor i in range(N):\n    x, y = list(map(int, input().split()))\n    cord1.append(x)\n    cord2.append(y)\n\ncord1.sort()\ncord2.sort()\ncord3.sort()"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2\\n1 2\\n1 3') == '1'\nassert solution('3\\n2 4\\n3 4\\n3 2') == '0'\nassert solution('3\\n2 3\\n1 2\\n1 3') == '0'\nassert solution('3\\n1 1\\n1 1\\n1 3') == '3'\nassert solution('5\\n0 0\\n1 1\\n1 0\\n0 1\\n0 0') == '2'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3\\n4 5\\n6 7') == '1\\n'\nassert solution('4\\n5 0\\n2 6\\n8 6\\n5 7') == '0\\n'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n\nassert solution('''\n4 2 0 1\n0 1 1000 100\n''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4 0 3') == \"4 140\"\nassert solution('2 1 0 1') == \"1000 100\"\nassert solution('0 1 1000 100') == \"1000 100000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 0 1') == '1000 100000'\nassert solution('4 4 0 3') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''\n6 6 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n0 3 4 100\n''') == '6 100000'\nassert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n''')\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100'"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10 7\n3 5\n1 7\n9 3\n10 10\n5 10\n6 4\n1 8\n6 4\n1 2\n4 9\n6 5\n4 6\n3 2\n8 9\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 3\n3 4\n1 5\n2 6\n8 7\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join([\n    '3',\n    '4 5',\n    '1 2',\n    '3 7',\n    '8 10',\n])) == '3'\n\nassert solution('\\n'.join([\n    '3',\n    '2 3',\n    '1 2',\n    '3 7',\n    '8 10',\n])) == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 5\n1 5\n''') == '1'\nassert solution('''\n1 2\n1 5\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\\n1 2\") == \"3\"\nassert solution(\"1\\n1 2\") == \"2\"\nassert solution(\"5\\n1 2 3 5\") == \"impossible\"\nassert solution(\"3\\n3 2 1\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n5 10\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5\n20 15\n10 20\n30 20\n30 20\n30 20\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5\n20 20\n10 20\n30 20\n30 20\n30 20\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5\n20 30\n30 20\n30 20\n30 20\n30 20\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3\n100 7\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n\"\"\") == \"3\""
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10 10\n1 5\n5 5\n8 5\n9 5\n5 8\n5 9\n4 9\n7 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '2'\nassert solution('6 5') == 'impossible'\nprint(solution('''\n5 4\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n'''))"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n100 7\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '3'\nassert solution('''\n10 10\n1 2\n2 3\n1 5\n3 6\n4 7\n''') == 'impossible'\nassert solution('''\n100 20\n1 1\n1 1\n1 2\n2 2\n3 3\n''') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n100 7\n1 50\n50 70\n70 90\n90 40\n20 60\n60 80\n80 20\n''') == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join(['2', '5', '8', '11', '15'])) == '2'\nassert solution('\\n'.join(['7', '17', '18'])) == 'impossible'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\nassert solution('1') == '1'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('20') == '1'\nassert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n\n\"\"\""
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\nassert solution('1000000000') == '5'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    7 8\n    1 2\n    2 1\n    3 2\n    4 2\n    5 2\n    6 1\n    7 1\n    8 1''') == '14'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\n\nassert solution('''\n2 3 4\n''') == '10'\n\nassert solution('''\n2 5 2\n''') == '10'\n\nassert solution('''\n1 3 2\n''') == '10'\n\nassert solution('''\n2 4 4\n''') == '0'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\") == \"10\"\nassert solution(\"7 3 1\") == \"40\"\nassert solution(\"10000000000 1000\") == \"473957800000\"\n\n'''\n\n\nn, m, k = map(int, input().split())\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 1 2\n3 3 3''') == '10'\nprint('Solution: {}'.format(solution(stdin)))\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"18\"\nassert solution(\"10\") == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"1\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n10\n''') == 'impossible'\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == '18'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"impossible\"\nassert solution(\"3\\n1 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\nassert solution(\"3\\n1 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"impossible\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"20\"\nassert solution(\"1\\n\") == \"impossible\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5\n2 1\n1 5\n5 9\n2 6\n5 3\n5\n\"\"\") == \"20\"\nassert solution(\"\"\"\n10\n2 1\n4 1\n6 9\n2 6\n8 5\n3 2\n3 3\n9 9\n1 7\n\"\"\") == \"72\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\") == \"18\"\nassert solution(\"5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\") == \"impossible\"\n\n---Input Grading/Sample Grading---"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"18\"\n\nassert solution(\"\"\"\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == \"impossible\"\nassert solution('5 1') == \"18\"\nassert solution('4 1') == \"20\"\nassert solution('5 9') == \"22\"\nassert solution('2 6') == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '18'\n\nassert solution('''1\n1\n2\n''') == 'impossible'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"11\"\nassert solution(\"4\") == \"7\"\nassert solution(\"6\") == \"7\"\nassert solution(\"7\") == \"6\"\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '11'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '11'\nassert solution('3') == '9'"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    1 5 10\n    7 8 2\n    ''') == '3'\nassert solution('''\n    10\n    2 4 8\n    ''') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\n1 5 10\n7 8 2\"\"\") == \"3\"\nassert solution(\"\"\"2\n1 5 10\n7 8 2\n\"\"\") == \"11\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '11'\n\"\"\""
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 5 10\\n7 8 2\\n') == '3'\nassert solution('3\\n-1 -1 -1\\n5 5 5\\n10 10 10\\n') == '11'\nprint('ALL TEST CASES PASSED')"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n3\n-1 -1 -1\n5 5 5\n10 10 10\n''') == '11'\nprint('Tests passed')\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 5 10\\n7 8 2\\n\") == \"3\"\nassert solution(\"10\\n-1 -1 -1\\n5 5 5\\n10 10 10\\n\") == \"11\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n110\n011\n''') == '2'\nassert solution('''\n4 2\n1000\n1000\n0000\n0010\n''') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\\\n3 1\n110\n011\nSample Input 3:\n10 5\n101010101010101\n101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n0101010101010101\n010101"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n110\n011\n''') == '2', \"Should be 2\"\nassert solution('''\n4 2\n1000\n1000\n0000\n0010\n''') == '0', \"Should be 0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n110\n011\n''') == '2'\nassert solution('''\n4 2\n1000\n1000\n0000\n0010\n''') == '0'\nassert solution('''\n5 2\n1010\n1010\n0010\n1010\n''') == '1'\nassert solution('''\n6 2\n1111\n1111\n1010\n1010\n1010\n1010\n''') == '0'\nassert solution('''\n7 2\n0110\n0110\n0100\n0100\n0100\n0100\n''') == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 1\n11\n0\n010\n1010\n\"\"\") == '0'\nassert solution(\"\"\"\n5 1\n10\n0\n000\n010\n\"\"\") == '1'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0') == '0'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1') == '0'\nassert solution('4\\n1') == '1'\nassert solution('5\\n1') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\"\nprint(solution())"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 1\n1110\n0101\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4 2\n1000\n1000\n0011\n0011\nSample Output 3:\n0\n\nSample Input 4:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\nSample Output 4:\n3\n\nSample Input 5:\n6 2\n0100\n0000\n0001\n0000\n0001\n0000\nSample Output 5:\n1\n\nSample Input 6:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\nSample Output 6:\n0\n\nSample Input 7:\n6 2\n0000\n0000\n0001\n0000\n0001\n0000\nSample Output 7:\n1\n\nSample Input 8:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\n0001\nSample Output 8:\n1\n\nSample Input 9:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\n0001\n0000\n0001\nSample Output 9:\n0\n\nSample Input 10:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\n0001\n0001\n0000\n0001\nSample Output 10:\n2\n\nSample Input 11:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\n0001\n0000\n0001\n0001\n0000\n0001\nSample Output 11:\n1\n\nSample Input 12:\n6 2\n1100\n0000\n0001\n0000\n0001\n0000\n0001\n0000\n0001\n0000\n0001\n0000\n0001\n0001\n0000\n0001\n0000\n0001\n0001\n0001\n0000\n0000\n0001\n0000\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n0001\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1\\n110\\n011\\n') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010\\n') == '0'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\nprint(\"You're all set!\")"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n3\n2\n''') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n1 3 2\n2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n2 3\\n1') == '1'\nassert solution('3\\n4 5 6\\n5') == '5'\nassert solution('4\\n4 5 6\\n5') == '6'\nassert solution('4\\n4 5 6\\n5') == '6'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1', \"Should be 1\"\nassert solution('3') == '2', \"Should be 2\"\n\nSample Input 3:\n3\n1 3 2\n4\nSample Output 3:\n5\n\n\"\"\""
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1', \"Wrong!\"\nassert solution('3') == '1', \"Wrong!\"\nassert solution('3 2') == '3', \"Wrong!\"\nassert solution('3 2 1') == '5', \"Wrong!\"\nassert solution('3') == '1', \"Wrong!\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3\n3\n2''') == '1'\nassert solution('''5\n1 3 2\n3\n2''') == '5'\nassert solution('''5\n1 2 3\n3\n4''') == '1'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('3') == '1'\nassert solution('3 2') == '1'\nassert solution('3 2 3') == '3'\nassert solution('3 3 3') == '2'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 100 20\n\"\"\") == '0'\n\nassert solution(\"\"\"\n10 10 1\n\"\"\") == '19'\n\nassert solution(\"\"\"\n20 3 3\n\"\"\") == '18'\n\nassert solution(\"\"\"\n3 10 10\n\"\"\") == '17'\n\nassert solution(\"\"\"\n1000 100 100\n\"\"\") == '9720'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 100 20''') == '0'\nassert solution('''10 10 1''') == '19'\n'''"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n0\n0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n0\n0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n1\n0\n0\n0\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n1\n0\n0\n0\n\"\"\") == \"19\"\n\nassert solution(\"\"\"\n10\n5\n0\n0\n0\n\"\"\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 100 20\") == '0'\nassert solution(\"10 10 1\") == '19'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 10 1\\n\") == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '19'\nassert solution('10 1') == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\nassert solution(\"10 10 1\") == \"0\"\n\n---Explanation---\nWe can see that we need to either call printf twice or use a printf statement before each line. We can choose to use printf statement in the middle of the program, and let the program crash before adding any printf statement. This solution takes one line of code (up to 100 lines), so it takes the same amount of time as the naive approach.\n\nThe code is already correct, so we only need to add the printf statements in the middle of the program, to make sure it crashes before the added printf statement. If we let the program crash before it adds any printf statement, then we would just need to compile and run the program with the entire code. Thus, the time taken for this solution is the same as that of the naive approach.\n\nOur second strategy is to add printf statement in the middle of the program, and let the program crash before this statement is added. This solution takes two lines of code (up to 100 lines), so it takes slightly longer than the naive approach.\n\nThe final approach is to add printf statement in the beginning and the end of the program, so it takes 3 lines of code (up to 100 lines), so it takes longer than the naive approach.\n\nIn the final approach, we need to add printf statement in the beginning of the program, and in the end of the program, so we need to add it in the middle of the program. In the middle of the program, we can see that it takes one line of code (up to 100 lines), so it takes the same amount of time as the naive approach.\n\nThis is the final solution, with the least amount of time.\n\"\"\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''10\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT'\n\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n\nassert solution('''10\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\na b c\\na 1\\nimport b, c\\nb 2\\nimport c\\n\") == \"SHIP IT\"\nassert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport c\\n\") == \"SHIP IT\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'SHIP IT'\nassert solution('''5\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'c'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'classb'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'c'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nexecd 1\\nimport libe') == 'SHIP IT'\n'''\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'c'\nassert solution('3\\na b c\\na 1\\nimport c\\nb 2\\nimport c\\nc 1\\n') == 'c'\nassert solution('4\\na b c d\\na 2\\nimport d, b, c\\nb 1\\nimport c\\nc 1\\n') == 'd'\nassert solution('1\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'SHIP IT'\nassert solution('4') == 'SHIP IT'\nassert solution('5') == 'SHIP IT'\n\n'''"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\nabc,def,ghi\\na,b,c,d\\n1,2,3\\n4\") == \"3\\nabc,def,ghi\\nabc,d\\n\"\nassert solution(\"4\\nabc,def,ghi\\na,b,c,d\\n1,2,3\\n4\") == \"3\\nabc,def,ghi\\nabc,d\\n\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"4\\nclassa classb myfilec execd libe\\nclassa libe\\n\"\nassert solution(\"6\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"2\\nclassa myfilec\\n\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"SHIP IT\"\nassert solution(\"1\") == \"SHIP IT\"\nassert solution(\"2\") == \"SHIP IT\"\nassert solution(\"3\") == \"SHIP IT\"\nassert solution(\"4\") == \"SHIP IT\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nassert solution(\"5+3+x+1\") == \"4\"\nassert solution(\"5+3+x+1+1\") == \"5\"\nassert solution(\"5+3+x+1+1+1\") == \"6\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\nassert solution('10+20+3+x') == '7'\nassert solution('10+10+20+3+x') == '12'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nassert solution(\"1+3+x\") == \"2\"\nassert solution(\"10+2\") == \"3\"\nassert solution(\"9+2\") == \"4\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('9+10') == '11'\nassert solution('20+3+x') == '2'\nassert solution('20+10') == '11'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('5+3+x') == '2'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 10') == 'yes'\nassert solution('2 10') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 10, 0, 15, 5, 20]) == \"yes\"\nassert solution([2, 10, 1, 15, 5, 20]) == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 10\") == \"yes\"\nassert solution(\"2 10\") == \"no\"\nassert solution(\"3 10\") == \"no\"\nassert solution(\"4 10\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 10\n0 15\n5 20\n''') == 'yes'\nassert solution('''\n5 10\n0 15\n2 20\n''') == 'no'\nassert solution('''\n10 20\n''') == 'yes'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 10\n1 15\n0 20\n''') == 'yes'\nassert solution('''\n2 10\n0 15\n5 20\n''') == 'no'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10\") == \"yes\"\nassert solution(\"2 10\") == \"no\""
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 10\") == \"yes\"\nassert solution(\"1 10\") == \"no\"\nassert solution(\"3 10\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10') == 'yes'\nassert solution('1 15') == 'no'\nassert solution('0 20') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('1 100\\n0 200\\n20 30') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10\\n0 15\\n5 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nprint(solution(*tuple(map(int, input().split()))))\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 3\\n1 2 3\\n3 1 1\\n') == '0.75'\nassert solution('4 4 4\\n4\\n3 red\\n10 green\\n12 green\\n3 red\\n3 red\\n4 red\\n5 green\\n6 red\\nSample Output 2:\n0\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25', f'expected 0.25, got {solution('')}'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4 4\n2 green\n3 green\n3 red\n1 red\n1 green\n''') == '0.25'\nassert solution('''4 4 4\n5 green\n1 green\n7 red\n1 red\n1 red\n''') == '0.6666666666666666'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n\") == \"0.25\"\nassert solution(\"4 4 4\\n4\\n4 red\\n5 green\\n\") == \"0\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0.5'\nassert solution('6') == '0.5'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25', 'Sample Test 1'\nassert solution('4 4 4\\n4\\n4 red\\n8 yellow\\n10 green\\n14 green\\n') == '1', 'Sample Test 2'\nassert solution('4 4 4\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0', 'Sample Test 3'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 4 4') == '0.25'\nassert solution('3 5 2') == '0.75'\nassert solution('3 3 2') == '0.5'\nassert solution('1 1 1') == '0'\nassert solution('3 2 3') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4 4') == '0.25'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4''') == '3', \"First\"\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\nSample Output 2:\ninf''') == 'inf', \"Second\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('30 40\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30') == '41'\nassert solution('30 40\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30') == '41'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"6 7\"\n) == \"3\"\nassert solution(\n    \"6 8\"\n) == \"inf\"\nassert solution(\n    \"6 8\"\n) == \"inf\"\nassert solution(\n    \"6 8\"\n) == \"inf\"\nassert solution(\n    \"6 8\"\n) == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\nprint(solution(input()))\n\nfrom itertools import permutations"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\nassert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 7') == '3'\nassert solution('6 8') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\""
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\nassert solution(stdin=\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"3\"\nassert solution(stdin=\"10 20\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n4 5\\n4 6\\n4 5\\n4 6\\n5 6\\n6 7\") == \"inf\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '4 4\\n'\n    '1 2 3 4'\n) == '4'\n\nassert solution(\n    '12 3\\n'\n    '2 3 4 5 6 7 4 7 8 8 12 12'\n) == '2'"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n\nn, k = list(map(int, stdin.readline().strip().split()))\npreferences = list(map(int, stdin.readline().strip().split()))\npreferences.sort()\npreferences.reverse()\nprint(preferences)\nans = 0\nfor num in preferences:\n    if num > ans:\n        ans = num\nprint(ans)\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3, 4, 5]\n\n[1, 2, 3, 4]\n[2, 3,"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 2 3 4 5\n''') == '4'\nassert solution('''\n4 3\n1 2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3\n4 5 6\n''') == '4'\nassert solution('''\n1 2\n3 4\n''') == '1'\nassert solution('''\n1 2 3\n4 5 6\n''') == '4'\n\nassert solution('''\n5 5 5 5 5\n5 4 6 6 4 5\n5 4 5 6 5 5\n5 4 4 5 6 5 4\n5 4 4 5 5 5 4\n''') == '5'\n\nprint('Tests done')"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"1 2 3 4\\n\"\n) == \"4\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'NO TYPO'\nassert solution('4') == 'NO TYPO'\n\n'''"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '2'\n\"\"\"\n\nn = int(input())\nd = set(map(str, input().split()))\nt = int(input())\n\nfor i in range(t):\n    word = str(input())\n    if word in d:\n        d.discard(word)"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nhoose\\nhose\\nnose\\nnoises\\nnoise\\n') == 'hoose\\nmoose\\nnoise\\n'\n\nassert solution('4\\nhose\\nhoose\\noose\\nmoose\\n') == 'hose\\nmoose\\n'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nhoose\\nhose\\nnoises\\nnoise\\n') == 'hoose\\nnoises\\nnoise'"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose'\nassert solution('''\n4\nhose\nhoose\noose\nmoose\n''') == 'hoose'\nassert solution('''\n3\nhoose\nhose\nnose\nnoises\nnoise\n''') == 'hoose'\nassert solution('''\n2\nhose\nhose\n''') == 'hoose'\nassert solution('''\n1\nhoose\n''') == 'NO TYPOS'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'hoose'\nassert solution('4') == 'hoose,moose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\ncow\\ncow\\ncow\\n') == 'cow'\nassert solution('1\\ncow\\ncow\\n') == 'cow'\nassert solution('4\\ncow\\ncow\\ncow\\n') == 'cow'\nassert solution('8\\ncow\\ncow\\ncow\\ncow\\ncow\\ncow\\ncow\\ncow\\ncow\\n') == 'cow'"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\\\n5\nhoose\nhose\nnose\nnoises\nnoise\\n\"\"\") == \"hoose, noise, nose, noises\"\nassert solution(\"\"\"\\\n4\nhose\nhoose\noose\nmoose\\n\"\"\") == \"hoose, moose\"\n\"\"\""
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == \"no noises\"\nassert solution('4') == \"hoose,moose,noise,oose\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == \"NO TYPO\"\nassert solution('2') == \"NO TYPO\"\nassert solution('3') == \"NO TYPO\"\nassert solution('4') == \"NO TYPO\"\nassert solution('5') == \"NO TYPO\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1 1\\n3\"\n    ) == \"2\\n2\\n5\"\n\nassert solution(\n    \"2 3\\n4\"\n    ) == \"0\\n16\\n8\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('2 3') == '5'\nprint(solution(input()))\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == '2'\nassert solution(\"3\") == '2'\nassert solution(\"4\") == '5'\nassert solution(\"2 3\") == '0'\nassert solution(\"4\") == '16'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n3\n''') == '2'\nassert solution('''\n2 3\n4\n''') == '0'\n\nstdin = '''\n1 1\n3\n'''\nimport sys\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('4') == '5'\nprint(solution(*[*map(int, stdin.split())]))\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"2 2 5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '5'\nassert solution('2 3') == '0'\nassert solution('1') == '2'\nassert solution('2') == '0'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('3') == '2'\nassert solution('4') == '16'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1\n3\n\"\"\") == \"2 2 5\"\nassert solution(\"\"\"\n2 3\n4\n\"\"\") == \"0 16 8\""
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"44.72135955\"\nprint(solution())\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n50 45 45\nSample Output 1:\n68.52419365\n''') == '44.72135955'\n\nassert solution('''\n1\n40 45 50\nSample Output 1:\n68.52419365\n''') == '44.72135955'\n\nassert solution('''\n2\n40 45 45\nSample Output 2:\n68.52419365\n''') == '68.52419365'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0.0000000000000000\"\nassert solution(\"2\") == \"0.0000000000000000\"\nassert solution(\"1\") == \"0.04296875\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '68.52419365'\nassert solution('1') == '44.72135955'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n50 45 45\n''') == '68.52419365'\nassert solution('''\n5\n10 10 10\n''') == '1.5'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == \"44.72135955\"\nassert solution(sample_input_2) == \"68.52419365\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\nprint(solution(input()))\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 1 5') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_1) == \"1\"\nassert solution(input_2) == \"0\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3 1 5\n1 2\n''') == '1\\n3\\n2\\n'\nassert solution('''3 4 2 3\n1 3 1\n''') == '1\\n2\\n2\\n'"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '0'\nassert solution('1 3 1') == '2'\nassert solution('1 3 1 2') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 3\") == \"1\"\nassert solution(\"5 3 2 2\") == \"3\"\nassert solution(\"5 3 2 1\") == \"2\"\nassert solution(\"10 10 10 10\") == \"9\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4 2 3\n1 3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 3 1 5\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 4 2 3\n1 3 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 1 2 2 3\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"0\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n4\n1 1 1 1\n2 2\n3 1\"\"\") == \"2\"\n\nprint(\"Solution:\")\nprint(solution(*(input().split())))\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '2'\nassert solution('3 4 5') == '3'\nassert solution('4 5 3') == '3'\nassert solution('1 2 2') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 5\n1 1\n\"\"\"\n    ) == \"3\"\nassert solution(\n\"\"\"\n5 3\n2 2 3 2 2\n\"\"\"\n    ) == \"2\"\nassert solution(\n\"\"\"\n8 2\n2 2 1 2 3 4 5 4 3\n\"\"\"\n    ) == \"3\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '2'\nassert solution('5 3') == '2'\nassert solution('1 1 2 1 1') == '3'"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 1\\n\") == \"3\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"3\"\nassert solution(\"5 3\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 5\n1 1\n\"\"\") == \"3\", \"1st example\"\nassert solution(\"\"\"\n5 3\n2 2 3 2 2\n\"\"\") == \"2\", \"2nd example\"\nprint(\"The local tests are done. Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_1) == stdout_1\nprint(solution(input_2))\nprint(solution(input_3))\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n100 100\\n50 50') == '50'\nassert solution('4\\n0 100\\n50 50') == '25'\nassert solution('10\\n0 1\\n1 1\\n2 2\\n3 2\\n3 3\\n4 3\\n4 4\\n5 4\\n5 5\\n6 5\\n6 6\\n7 6\\n7 7\\n8 7\\n8 8\\n9 8\\n9 9\\n10 9') == '22.5'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 50\n2 50\n3 50\n4 50\n5 50\n6 50\n7 50\n8 50\n9 50\n10 50\n''') == '50', 'First'\nassert solution('''\n10\n1 50\n2 50\n3 50\n4 50\n5 50\n6 50\n7 50\n8 50\n9 50\n10 50\n''') == '50.0', 'Second'\nassert solution('''\n10\n1 50\n2 50\n3 50\n4 50\n5 50\n6 50\n7 50\n8 50\n9 50\n10 50\n''') == '99.80', 'Third'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n100 100\n50 50''') == '50'\nassert solution('''2\n0 50\n50 0''') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '50'\nassert solution('0 50') == '25'\nassert solution('100 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"50\"\nassert solution(\"0 50\") == \"50\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '9.1'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0.5'\nassert solution('0') == '0'\nassert solution('-2') == '-0.5'\nassert solution('0.5') == '0.5'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '50'\nassert solution('2') == '50'\nassert solution('3') == '0'\n\nstdin = \"\"\"\n3\n1 2 3\n3\n5 4 4\n\"\"\""
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '50'\nassert solution('1') == '50'\nassert solution('2') == '25'\nassert solution('5') == '50'\nassert solution('4') == '25'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"160\"\nassert solution(\"3\") == \"250\""
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n100\n200''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n100\n200\n''') == '160'\nassert solution('''\n3\n100\n200\n2010\n''') == '250'\n'''\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"60\"\nassert solution(\"2\") == \"100\"\nassert solution(\"3\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n100\n200\n''') == '160'\nassert solution('''3\n100\n200\n2010\n''') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'\nassert solution('2\\n100\\n200\\n2010') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n10\\n20') == '250'\nassert solution('1\\n100\\n1000') == '160'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"160\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n100\n200''') == '160'\nassert solution('''2\n100\n200\n2010''') == '250'\nassert solution('''5\n100\n200\n2010\n2010\n2010''') == '240'\n\nimport sys\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '2'\nassert solution('5 5') == '0'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n0 1 1\\n2 3 1\\n\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n\") == \"0\"\nassert solution(\"8 8\\n0 1 1\\n1 2 3\\n2 3 3\\n3 4 3\\n4 5 2\\n5 0 3\\n\") == \"2\"\nassert solution(\"6 6\\n0 1 1\\n1 2 3\\n2 3 3\\n3 4 3\\n4 5 2\\n5 6 2\\n\") == \"0\"\nassert solution(\"10 10\\n0 1 1\\n1 2 3\\n2 3 3\\n3 4 3\\n4 5 2\\n5 6 2\\n6 7 2\\n7 8 2\\n\") == \"1\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n1 1 1\n2 3 1\n''') == '2'\n\nassert solution('''10 10\n0 1 1\n1 2 3\n2 3 3\n3 4 3\n4 5 3\n5 6 3\n6 7 3\n7 8 3\n8 9 3\n9 10 3\n''') == '0'\n\nassert solution('''5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 5 3\n5 6 3\n6 7 3\n7 8 3\n8 9 3\n9 10 3\n''') == '0'\n\nassert solution('''1 2\n2 3\n3 4\n''') == '1'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n0 1 1\\n2 3 1\\n') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '4 2\\n'\n    '0 1 1\\n'\n    '2 3 1\\n'\n    '3 4 3\\n'\n    '4 0 3\\n') == '2'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n') == '1'\nassert solution('4\\n2\\n') == '2'\nassert solution('5\\n5\\n') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n''') == '2'\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\n1 2\n2 3 4\n'''\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3\n''') == '1 1\\n1 2\\n2 3 4'\nassert solution('''4 2\n3 3 2 2\n6 3\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '1'\nassert solution(\"1\\n3 3 2 1\") == '1 1'\nassert solution(\"4 3\\n3 3 2 1\") == '1 2'\nassert solution(\"4 2\\n3 3 2 1\") == '-1'"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5\n2 3 1 3 1\n5 5\n3 2 2 2 2\n1 1 1 1 1\n1 1 1 2\n1 1 1 3\n1 1 1 2\n1 1 1 3\n1 1 1 2''') == '1 1 1 1 1\\n1 2 1 1 1\\n1 3 2 1 1\\n1 4 2 1 1\\n1 5 3 1 1\\n1 6 3 1 1\\n1 7 2 1 1\\n1 8 2 1 1\\n1 9 3 2 1\\n1 1 3 2 1\\n1 1 2 3 1\\n1 1 3 2 1\\n1 1 2 3 1'''\nassert solution('''3 1\n2 2 2\n3 3\n''') == '1 1\\n1 2 2\\n1 3 3'''\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 1'\nprint(solution())"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n5\\n6\\n') == '2\\n3\\n5\\n6'\nassert solution('1\\n1\\n5\\n5\\n') == '1\\n1\\n5\\n5'\nassert solution('1\\n1\\n3\\n1\\n') == '1\\n1\\n3\\n1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1 1'\nassert solution('3 3') == '1 1'\nassert solution('4 2') == '2 3'\nassert solution('6 3') == '2 3 4 5 6'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 3 2 1') == '1 1'\nassert solution('4 2\\n3 3 2 2') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '1 1\\n2 2\\n2 1\\n1 1'\nassert solution('4 2') == '1 1\\n1 2'"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\\n1 2\\n2 3 4'\nassert solution('''\n4 3\n3 3 2 1\n3 3 2\n6 3\n''') == '1 1\\n1 2\\n2 3 4'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '10.0\\n4.0\\n1.0\\n'''\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10.0\\n10.0\\n1.0\\n4.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 10\\n0 0 D\\n10 1 L\\n') == '10.0\\n10.0\\n0.0'\nassert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\\n') == '10.0\\n4.0\\n1.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"10.0\\n4.0\\n1.0\"\nassert solution(input_) == \"10.0\\n4.0\\n1.0\"\nassert solution(input_) == \"10.0\\n4.0\\n1.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4 10\\n1 1 L\\n3 1 L\\n4 3 L') == '3.0\\n7.0\\n3.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 10\\n0 0 D\\n10 1 L\\n\") == \"10.0\\n10.0\\n0.0\"\nassert solution(\"4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D\\n\") == \"10.0\\n4.0\\n1.0\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3 10\n0 0 D\n10 1 L\n''') == '10.0\nassert solution('''\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '4.0\n'''\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 10\\n0 0 D\\n10 1 L') == '10.0\\n4.0\\n1.0'\nassert solution('4 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0'\nassert solution('10 3 7\\n1 0 D\\n3 0 D\\n4 1 L\\n6 2 D') == '10.0\\n4.0\\n1.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'\n\nimport os\nimport sys\n\nfrom io import StringIO"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L''') == '10.0\nassert solution('''4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D''') == '4.0\nassert solution('''6 5 1\n0 0 D\n0 2 D\n4 1 L\n3 4 D\n1 1 D''') == '16.0\nassert solution('''5 4 3\n1 0 D\n0 2 D\n3 4 D\n1 1 D''') == '13.0\n'''"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\\nex\\t\\tjkd\\n\") == \"we\\x09will\\x09a\\nng\\x09get\\x09f\\x09re\\x09arr\\x09r\\x09\"\nassert solution(\"wl\\njkd\\n\") == \"Impossible\"\nassert solution(\"\\n\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ab de fgh ij kl') == 'abdefghijkl'\nassert solution('fgh ij kl') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"ex eoii jpxbmx cvz uxju sjzzcn jzz\n    wl jkd\n    \"\"\") == \"we will avenge our dead parrot arr\"\nassert solution(\n    \"\"\"ex eoii jpxbmx cvz uxju sjzzcn jzz\n    wl jkd\n    \"\"\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"we will avenge our dead parrot arr\") == \"arr arr we\"\n\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"a be our rum will dead hook ship blood sabable avenge parrot captain will ship blood will can sue hoora rum begine hoof will jnox reze jnox moora rave albatross will albatross finder albatross be hideous will hoof heigher than gale heighs or heigh dower heigher than gale. any who can n-jkd hoora will hint gale jkd, albatross sabe and gale will heigh ave, or heigh, heigh albatross will hoora will hoora and heigher than gale heighs. heigher than gale heighs or heigh dower than gale hoora will nothief jkd, hoora hoora, or hoora heigh will hoora heigh, hoora will hoora heigh or hoora heigh any who can n-hoora heigh will hoora albatross heigh or heigh albatross jkd. and so on.\"\n    ) == \"Impossible\""
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\nassert solution(\"asjf dasfd fsd asfjd asfdf asdf asdf asdf asd asdf asdasdf\") == \"asjf dasfd fsd asfjd asfdf asdf asdf asdf asd asdf asdasdf\"\nassert solution(\"cr asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf asdf"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(''.join(stdin.strip().split())) == 'Impossible'\nassert solution(' '.join(stdin.strip().split())) == 'Impossible'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Hamburg Bremen') == '68.3'\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nHamburg Bremen\n2\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nAmsterdam Rotterdam\n5\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == '72.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('Hamburg Bremen\\n3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60\\nBremen Frankfurt 14 226 10 120') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''Hamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\nSample Output 1:\n68.3\nSample Output 2:\nIMPOSSIBLE''') == '68.3'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nBremen Frankfurt 14 226 10 120') == 'IMPOSSIBLE'\nassert solution('3\\nHamburg Bremen 15 68 10 5\\nHamburg Bremen 46 55 50 60') == '68.3'\nprint(solution('''5\\nRotterdam Rotterdam 29 74 10 8\nRotterdam Rotterdam 29 73 10 8\nRotterdam Rotterdam 29 72 10 8\nRotterdam Rotterdam 29 71 10 8\nRotterdam Rotterdam 29 70 10 8\n\nRotterdam Utrecht 29 75 10 8\nRotterdam Utrecht 29 74 10 8\nRotterdam Utrecht 29 73 10 8\nRotterdam Utrecht 29 72 10 8\nRotterdam Utrecht 29 71 10 8\nRotterdam Utrecht 29 70 10 8\n\nRotterdam Bamberg 12 34 16 9\nRotterdam Bamberg 29 53 10 8\nRotterdam Bamberg 29 50 10 8\nRotterdam Bamberg 29 49 10 8\nRotterdam Bamberg 29 48 10 8\nRotterdam Bamberg 29 47 10 8\n\nRotterdam Utrecht 12 34 16 9\nRotterdam Utrecht 29 53 10 8\nRotterdam Utrecht 29 50 10 8\nRotterdam Utrecht 29 49 10 8\nRotterdam Utrecht 29 48 10 8\nRotterdam Utrecht 29 47 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 53 10 8\nRotterdam Rotterdam 29 50 10 8\nRotterdam Rotterdam 29 49 10 8\nRotterdam Rotterdam 29 48 10 8\nRotterdam Rotterdam 29 47 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 48 10 8\nRotterdam Rotterdam 29 47 10 8\nRotterdam Rotterdam 29 46 10 8\nRotterdam Rotterdam 29 45 10 8\nRotterdam Rotterdam 29 44 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 48 10 8\nRotterdam Rotterdam 29 47 10 8\nRotterdam Rotterdam 29 46 10 8\nRotterdam Rotterdam 29 45 10 8\nRotterdam Rotterdam 29 44 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 46 10 8\nRotterdam Rotterdam 29 45 10 8\nRotterdam Rotterdam 29 44 10 8\nRotterdam Rotterdam 29 43 10 8\nRotterdam Rotterdam 29 42 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 46 10 8\nRotterdam Rotterdam 29 45 10 8\nRotterdam Rotterdam 29 44 10 8\nRotterdam Rotterdam 29 43 10 8\nRotterdam Rotterdam 29 42 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 51 10 8\nRotterdam Rotterdam 29 50 10 8\nRotterdam Rotterdam 29 49 10 8\nRotterdam Rotterdam 29 48 10 8\nRotterdam Rotterdam 29 47 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 51 10 8\nRotterdam Rotterdam 29 50 10 8\nRotterdam Rotterdam 29 49 10 8\nRotterdam Rotterdam 29 48 10 8\nRotterdam Rotterdam 29 47 10 8\n\nRotterdam Rotterdam 12 34 16 9\nRotterdam Rotterdam 29 52 10 8\nRotterdam Rotterdam 29 51 10 8\nRotterdam Rotterdam 29 50 10 8\nRotterdam Rotterdam 29 49 10 8\nRotterdam Rotterdam 29 48 10 8\nRotterdam Rotterdam 29 47 10 8\nRotterdam Rotterdam 29 46 10 8\nRotterdam Rotterdam 29 45 10 8\nRotterdam Rotterdam 29 44 10 8\nRotterdam Rotterdam 29 43 10 8\nRotterdam Rotterdam 29 42 10 8\nRotterdam Rotterdam 29 41 10 8\nRotterdam Rotterdam 29 40 10 8\nRotterdam Rotterdam 29 39 10 8\nRotterdam Rotterdam 29 38 10 8\nRotterdam Rotterdam 29 37 10 8\nRotterdam Rotterdam 29 36 10 8\nRotterdam Rotterdam 29 35 10 8\nRotterdam Rotterdam 29 34 10 8\nRotterdam Rotterdam 29 33 10 8\nRotterdam Rotterdam 29 32 10 8\nRotterdam Rotterdam 29 31 10 8\nRotterdam Rotterdam 29 30 10 8\nRotterdam Rotterdam 29 29 10 8\nRotterdam Rotterdam 29 28 10 8\nRotterdam Rotterdam 29 27 10 8\nRotterdam Rotterdam 29 26 10 8\nRotterdam Rotterdam 29 25 10 8\nRotterdam Rotterdam 29 24 10 8\nRotterdam Rotterdam 29 23 10 8\nRotterdam Rotterdam 29 22 10 8\nRotterdam Rotterdam 29 21 10 8\nRotterdam Rotterdam 29 20 10 8\nRotterdam Rotterdam 29 19 10 8\nRotterdam Rotterdam 29 18 10 8\nRotterdam Rotterdam 29 17 10 8\nRotterdam Rotterdam 29 16 10 8\nRotterdam Rotterdam 29 15 10 8\nRotterdam Rotterdam 29 14 10 8\nRotterdam Rotterdam 29 13 10 8\nRotterdam Rotterdam 29 12 10 8\nRotterdam Rotterdam 29 11 10 8\nRotterdam Rotterdam 29 10 10 8\nRotterdam Rotterdam 29 9 10 8\nRotter"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\nprint(solution('''\nHamburg Bremen\n1\nAmsterdam Utrecht 10 22 5 10\n'''))\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\\\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\nassert solution(\"\"\"\\\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\\\nAmsterdam Utrecht\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*''') == '4'\nassert solution('''\n5\n*-*-\n|.|.|\n*.*-*\n|...|\n*.*-*\n|...|''') == '6'\nassert solution('''\n3\n*-*\n|.|\n*.*\n|...|\n*.*''') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"5\"\n\n## python3 -m timeit -s \"import solution\" \"solution(\\\"3\\\")\"\n## 4.5 ms \u00b1 6.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n## 4.5 ms \u00b1 6.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*\\n|...|\\n*.*.*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '4'\nassert solution('''2\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '5'\nassert solution('''3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '4'\n''')\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''*.*\n|.|.|\n*.*-*\n|...|\n*.*.*''') == '3'\nassert solution('''*.*\n|.|.|\n*.*-*\n*.*-*\n*.*-*''') == '4'\nassert solution('''*.*\n|.|.|\n*.*-*\n*.*.|\n*.*-*''') == '4'\nassert solution('''*.*\n|.|.|\n*.*-*\n*.*.|\n*.*.|''') == '2'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*''') == '4'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1000000000\") == \"4\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n' + '12210020') == '4'\nassert solution('8\\n' + '12210020') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8\\n12210020') == '4'\nassert solution('4\\n1111') == 'impossible'\n\"\"\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8') == '4'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n12210020') == '4'\nassert solution('4\\n1111') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n11111\nSample Input 3:\n4\n1111\nSample Output 3:\nimpossible\n''') == 'impossible'\n\nassert solution('''\n5\n123455\nSample Output 4:\n4\n''') == '4'\n\nassert solution('''\n8\n12210020\nSample Output 5:\n4\n''') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n2121\n''') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"4\"\nassert solution(\"12210020\") == \"impossible\"\nassert solution(\"1111\") == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'impossible'\n\nassert solution('5') == '4'\n\nassert solution('6') == 'impossible'\n\nassert solution('9') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n20\n1\n2\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'impossible'\nassert solution('12210020') == '4'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n\"\"\") == \"Bill will be bitten.\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill will be bitten.\\n\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n500 500 499\n0 0 999\n1000 1000 200\n250 250 300\n750 250 300\n250 750 300\n750 750 300\n''') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n\nassert solution('4') == 'Bill will be bitten.'"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill will be bitten.\\n\"\nassert solution(\"5\") == \"Bill will be bitten.\\n\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('12 3') == 'xxooo+xx++'\nassert solution('12 4') == 'xxoooo+xx++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"8 3\n+++++\n+++++\"\"\") == \"\"\"+oo+\"\"\"\"\"\"\n\nassert solution(\"\"\"8 3\n++++\n++++\"\"\") == \"\"\"oo+oo+\"\"\"\n\nassert solution(\"\"\"8 3\n+x+++\n++++\"\"\") == \"\"\"oo+oo+o+o+o\"\"\"\n\nassert solution(\"\"\"8 3\n+x++\n++++\"\"\") == \"\"\"oo+oo+o+o+o+o+o+o\"\"\"\n\nassert solution(\"\"\"8 3\n+x+\"\"\") == \"\"\"oo+oo+o+o+o+o+o+o+o+o+o+o\"\"\""
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 10') == 'xxoooooo'\nassert solution('3 4') == 'x+x+o+x'\nassert solution('10 10') == 'xoooooxx'\nassert solution('4 4') == 'o+x+oxx'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 2\n++xx++\n\"\"\") == \"xxo++o\"\n\nassert solution(\"\"\"\n10 4\n+x+x+xx+x++\n\"\"\") == \"o+x+xo+xo+x\"\n\nassert solution(\"\"\"\n8 4\n++++x+\n\"\"\") == \"x++x++\"\n\nassert solution(\"\"\"\n100 4\n+x+x+x+x+x+x+x+x+x+x+x+x+x+x+x\n\"\"\") == \"x++x++x+x++x+x+x+x+x+x+x+x+x\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 3\n++xx++\n''') == '++xx++'\nassert solution('''\n10 3\n++xx+x++\n''') == '++xx+o++'\n'''\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 3\\n++xx+x++') == '++xx+o++'\nassert solution('8 3\\nxxxxxxxx') == 'xxoooooo'"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"xoooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\n+1+x+x++') == 'x+x++'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3\\n+xx+x++\\n') == '++xx+o++'\nassert solution('8 3\\nxxxxx+xx\\n') == 'xxooo+o++'\nassert solution('8 3\\nxx+xx+xx+x\\n') == 'xx+o+oo+x++'\nassert solution('8 3\\nxx+xx+x++\\n') == 'xx+o+oo+x++'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('The fox said, \"When?\"\\n\"Not till 12 o\\'clock\", replied the hen.\\n\"That clock is stopped, it will never strike.\", he said.') == 'clock: oclock\\the: hen the\\till: will\\tin: it\\tis: it\\tthat: he\\twhen: hen'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"clock: oclock\\the: hen the\\the when\\nhen: hen the\\nhen: the when\\nhen: not till 12 o'clock\\nhen: clock\\nis: it\\nis: it\\nis: clock\\nnot till: clock\\ntill: will\\ntill: not till\\ntill: clock\\ntill: clock\\nclock: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\ntill: clock\\nt"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"***\"\nassert solution(\"Lost is Close to Lose\") == \"close: lose\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"close: lose the when\"\nassert solution(\"The fox said, \\\"When?\\\".\\\"\") == \"close: lose the when the\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n\"Better Documents Inc. wants to add Typo Checking in to the next generation of word processors,\" he said.\n
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nBetter Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors, he said.\n\n\"The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n''') == '''close: lose\nhe: hen the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\noclock: clock\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\"\"\"\n) == \"oclock: clock\\nhen: hen the\\ntill: will\\nwhen: hen\\nwill: till\\ntill: clock\"\n\nassert solution(\"\"\"\nBetter Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n\"\"\") == \"in: inc is\\ninc: in\\nlose: close lost\\nthe: he\\nhe: the\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n''') == '''\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\\n\") == \"clock: oclock\\the: hen the\\till: will\\this: hen\\tin: in\\tis: it\\tthat: hen\\ttill: will\\tnot: till\\twhen: hen\\tclock: oclock\\toclock: clock\\tin: it\\tis: it\\tnot: till\\ttill: will\"\n\nSample Input 3:\nWelcome to the forest\n\"Some people are scared,\nbut the majority are not\" said a bear.\n\"It\u2019s hard to explain\nbut I bet it\u2019s a mystery\" he said.\n\"The answer is not that hard.\" he said.\n***\nSample Output 3:\nanswer: mystery\nhe: a bear\n\"It\u2019s hard to explain\" he said.\n\"The answer is not that hard.\" he said.\nThe: he\n\"explains\" he said.\nhe: a bear\n\"I bet it\u2019s a mystery\" he said.\nThe: he\n\"to explain\" he said.\nhe: that is a bear\n\"the answer is not that hard.\" he said.\nhe: the\n\"to explain\" he said.\nthe: he\n\"explains\" he said.\n\n'''\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\ntill: will\\nwhen: hen\\nwill: till'\n\nSample Input 3:\nThat clock is stopped, it will never strike.\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 3:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\"\"\"[:-1]\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"3 8 1 9 4 5 2 7 10 6\") == \"2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"10\"\nprint(\"You're all set!\")"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n10\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '1'\nassert solution('4\\n3 1 5 8 9 2') == '2'\nassert solution('3\\n1 5 2 3') == '3'\nassert solution('5\\n3 4 8 5 2 1') == '2'"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution('''\n3\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 7 3 8 9 4 5 10 6\") == \"1\"\nassert solution(\"10\\n3 8 1 9 4 5 2 7 10 6\") == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('10\\n3 8 1 9 4 5 2 7 10 6') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"3 8 1 9 4 5 2 7 10 6\") == \"3 8 1 9 4 5 2 7 10 6\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('0.142857 1') == '1/7'\nassert solution('1.6 2') == '1/2'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n\"\"\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0.142857 6\n''') == '1/7'\nassert solution('''\n1.6 1\n''') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint(\"Congratulations! All test cases passed\")\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\""
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint(solution(input()))\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '6', 'Should return 6 for n = 1'\nassert solution('2') == '10', 'Should return 10 for n = 2'\nassert solution('3') == '10', 'Should return 10 for n = 3'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n0 1 0') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6', 'First'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10', 'Second'\nassert solution('''\n2\n0 0 0\n0 0 1\n0 0 2\n''') == '12', 'Third'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 0 0\n0 0 1\n''') == '10', 'First Test'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '6', 'Second Test'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 0 0\n''') == '6'\nassert solution('''\n2\n0 0 0\n0 0 1\n''') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"10\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"7\") == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''4\n-1 4 -1 -1\n2 2\n1 -1 1\n0 2\n''') == '2'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\n\n'''"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n-1 2 -1\\n2 2\\n1 -1 1\") == \"1\"\nassert solution(\n    \"7\\n-1 4 5 1 0 -1 -1\\n-1 3 2 0 0 1\\n-1 4 -1 1 0 -1 -1\\n1 3 4 2 2 4\\n0 2 3 -1 4 4 2\\n-1 4 4 3 3 2\\n1 -1 -1 -1 4 2 -1\"\n) == \"1\""
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '2'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n-1 2 -1\n2 2\n1 -1 1\nSample Output 1:\n1\nSample Output 2:\n1''') == \"1\"\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\nSample Output 1:\n1\nSample Output 2:\n1''') == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('7') == '1'"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''0\n1''') == '2'\nassert solution('''1\n1''') == '1'\nassert solution('''11\n11''') == '2'\nassert solution('''100\n11''') == '4'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n\"\"\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n\nstdin = sys.stdin.read()\nn = int(stdin)\n\nprint(solution(n))\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3\\n1 1 1\"\n    ) == \"LLL\"\nassert solution(\n    \"5\\n1 2 2 1 2\"\n    ) == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1 1\n''') == \"LLL\"\n\nassert solution('''\n5\n1 2 2 1 2\n''') == \"LLRLR\"\n\nassert solution('''\n4\n1 1 1 2\n''') == \"LLRLRR\"\n\nassert solution('''\n6\n1 1 1 2 2 1\n''') == \"LLRRLRLRRRLRLRR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"no dance\"\nassert solution(\"1\") == \"no dance\"\nassert solution(\"1 1 1\") == \"LLL\"\nassert solution(\"1 2 2 1\") == \"LLR\"\nassert solution(\"1 1 1 1\") == \"LLRR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"LLL\"\nassert solution(\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'LLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'LLRLR'\nassert solution
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"LLRLLRLLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == ''\nassert solution(\"1\") == 'L'\nassert solution(\"1 1 1\") == 'LLL'\nassert solution(\"1 2 2 1 2\") == 'LLRRR'\nassert solution(\"1 2 3 1 2\") == 'LLRR'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 5') == '5000000000020'\nassert solution('5 2 7') == '50000000000001'\nassert solution('5 5 10') == '5000000000040'\nassert solution('5 5 6') == '5000000000050'\nassert solution('5 5 5') == '5000000000060'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == '49000000000070'\nassert solution('''6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000''') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"5 5 5\") == \"Poor girl!\"\nassert solution(\"1 2 1000000\") == \"Poor girl!\"\nassert solution(\"3 3 2000000\") == \"Poor girl!\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\n\nassert solution('''\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '25000000000021'\n\nassert solution('''\n2 2 7\n1 3 2\n2 3 2\n3 1 2\n4 5 2\n5 6 3\n''') == 'Poor girl'\n\nassert solution('''\n3 6 7\n1 3 2\n2 3 2\n3 4 3\n4 5 2\n5 6 2\n''') == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 1') == 'Poor girl!'\nassert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\nassert solution('100 100 100') == 'Poor girl!'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == \"49000000000070\"\nassert solution('''6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000''') == \"25000000000021\"\nassert solution('''5 5 7\n1 3 1000000\n3 4 3000000\n4 6 4000000\n5 2 5000000\n2 1 5000000''') == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n4 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '25000000000021'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('4 3') == '3'\nassert solution('4 5') == '5'\nassert solution('5 5') == '5'\nassert solution('5 4') == '5'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"Yeah!\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n0 1\n1 0\n2 3\n3 3\n''') == \"yeah!\\n\""
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n0 1\n1 0\n2 3\n3 2\n''') == '2'\nassert solution('''\n4 4\n0 1\n1 0\n2 3\n3 3\n''') == 'yeah!'\nassert solution('''\n4 4\n0 1\n1 0\n2 3\n3 3\n''') == 'yeah!'\nassert solution('''\n4 4\n0 1\n1 0\n2 3\n3 3\n''') == 'yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"2\\n2\\n0\\n1\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1 2\nSample Input 3:\n1\n1\nSample Output 3:\nIMPOSSIBLE\n''') == 'POSSIBLE'\n\nassert solution('''\n2\n1 2\nSample Input 4:\n1\n1\nSample Output 4:\nPOSSIBLE\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3\n1 1 2\n1 2\nSample Input 5:\n3\n1 1 2\n1 2\nSample Output 5:\nIMPOSSIBLE\n''') == 'POSSIBLE'\n\nassert solution('''\n2\n1 2\nSample Input 6:\n2\n1 1\nSample Output 6:\nPOSSIBLE\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3\n1 1 2\n2 2\nSample Input 7:\n3\n1 1 2\n1 2\nSample Output 7:\nIMPOSSIBLE\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('1 2') == 'POSSIBLE'\nassert solution('2 3') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 2\n1 2\n2 3\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n3\n1 1 2\n1 2\n2 3\n''') == 'POSSIBLE'\n\nassert solution('''\n4\n1 3 1 2\n1 2\n3 2\n2 3\n''') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n10\n1 1 2\n2 2 3\n3 4 4\n4 5 5\n5 6 6\n6 7 7\n7 8 8\n8 9 9\n9 10 10\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"\n10\n2 2 3\n2 4 4\n3 5 5\n3 6 6\n4 7 7\n4 8 8\n5 9 9\n5 10 10\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n3\n1 1 2\n2 2 3\n3 3 3\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"POSSIBLE\", \"First\"\nassert solution(\"2\") == \"IMPOSSIBLE\", \"Second\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 1 2\nSample Input 3:\n2\n1 2\nSample Output 3:\nPOSSIBLE\n1 3\n2 3\n''') == 'POSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n1 2\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\n1 1 2\nSample Output 2:\nIMPOSSIBLE\n1 3\n2 3\n\n''') == 'POSSIBLE'\nassert solution('''\n5\n1 1 2 2 2\nSample Output 2:\nPOSSIBLE\n1 3\n2 3\n4 3\n2 4\n''') == 'POSSIBLE'\nassert solution('''\n5\n2 2 2 2 2\nSample Output 2:\nIMPOSSIBLE\n1 3\n2 3\n4 3\n2 4\n''') == 'IMPOSSIBLE'\nassert solution('''\n5\n1 2 2 2 2\nSample Output 2:\nIMPOSSIBLE\n1 3\n2 3\n4 3\n2 4\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == 'IMPOSSIBLE'\nassert solution('3\\n1 1 2') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"1\") == \"POSSIBLE\"\n\nassert solution(\"3\\n1 1 2\") == \"POSSIBLE\"\nassert solution(\"1\\n1 2\") == \"IMPOSSIBLE\"\n\nassert solution(\"1\\n3\\n2\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == '0.5 0.5 0.5'\nassert solution(input_string_2) == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n\") == \"0.5 0.5 0.5\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.5 0.5 0.5\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nprint(\"All test cases passed!\")"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\") == \"0.0 0.0 -0.0\"\nassert solution(\"-1 0 0\\n1 0 0\\n0 -1 0\\n0 0 -1\") == \"1.0 1.0 0.0\"\nassert solution(\"0 0 0\\n1 0 0\\n0 1 0\\n0 0 -1\") == \"0.5 0.5 0.5\"\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3 4 5 6 7 8\\n\") == \"3 4 5 6 7 8\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n3 6 2 3 2 2 2 1 5 6\n''') == '2'\n\nassert solution('''\n3\n17 17 17\n''') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 2 2\\n\") == \"0\\n3 2 2\\n\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('2') == '3 1'\nassert solution('6') == '2 5 6'\nassert solution('4') == '1 5 2 3 4'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 4 3\n3 2 4\n5 2 2\n3 3 3\n2 2 2\n6 6\n2 2 4''') == '4'\n\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1''') == '6'"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n5\n2 3\n7 1\n''') == '3 2 1'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 2 3\\n\") == \"1 2 3\"\nassert solution(\"2\\n3 3 2\\n\") == \"1 3 2\"\nassert solution(\"1\\n3 2 3\\n\") == \"2 3\"\nassert solution(\"5\\n3 5 2 5 3\\n\") == \"2 3 5 3 2\"\nassert solution(\"6\\n3 2 4 3 4 1\\n\") == \"4 2 3 1 3 4\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n6 2 3 2 2 2 1 5 6\n3 2 2\n6 6\n''') == '2\\n3 2 2\\n6 6\\n'''"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"IMPOSSIBLE\"\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\nassert solution(\"5 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"74.6666666667\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE', solution.__doc__\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n3 2') == '74.6666666667'\nassert solution('5 1 3\\n3 5 6\\n1 4 2\\n2 3 1\\n4 5\\n1 4\\n1 5') == '1.0'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"IMPOSSIBLE\"\n\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"74.6666666667\"\n\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == \"IMPOSSIBLE\"\n\nassert solution('''\n5 2 1\n1 3 7\n2 4 8\n1\n4 3\n''') == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE', 'First'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667', 'Second'\nprint('All test cases passed!')"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    3 2 1\n    1 2 7\n    2 3 8\n    1\n    3 2\n    \"\"\"\n) == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('3 2 5') == '67.3333333333'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE'\nassert solution(\n'''\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\n''') == '74.6666666667'\n'''\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4') == '2'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4') == '1'\nassert solution('10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 7') == '1'\nassert solution('16 16\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 7') == '1'\nassert solution('23 24\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101\\n101 102\\n102 103\\n103 104\\n104 105\\n105 106\\n106 107\\n107 108\\n108 109\\n109 110\\n110 111\\n111 112\\n112 113\\n113 114\\n114 115\\n115 116\\n116 117\\n117 118\\n118 119\\n119 120\\n120 121\\n121 122\\n122 123\\n123 124\\n124 125\\n125 126\\n126 127\\n127 128\\n128 129\\n129 130\\n130 131\\n131 132\\n132 133\\n133 134\\n134 135\\n135 136\\n136 137\\n137 138\\n138 139\\n139 140\\n140 141\\n141 142\\n142 143\\n143 144\\n144 145\\n145 146\\n146 147\\n147 148\\n148 149\\n149 150\\n150 151\\n151 152\\n152 153\\n153 154\\n154 155\\n155 156\\n156 157\\n157 158\\n158 159\\n159 160\\n160 161\\n161 162\\n162 163\\n163 164\\n164 165\\n165 166\\n166 167\\n167 168\\n168 169\\n169 170\\n170 171\\n171 172\\n172 173\\n173 174\\n174 175\\n175 176\\n176 177\\n177 178\\n178 179\\n179 180\\n180 181\\n181 182\\n182 183\\n183 184\\n184 185\\n185 186\\n186 187\\n187 188\\n188 189\\n189 190\\n190 191\\n191 192\\n192 193\\n193 194\\n194 195\\n195 196\\n196 197\\n197 198\\n198 199\\n199 200\\n200 201\\n201 202\\n202 203\\n203 204\\n204 205\\n205 206\\n206 207\\n207 208\\n208 209\\n209 210\\n210 211\\n211 212\\n212 213\\n213 214\\n214 215\\n215 216\\n216 217\\n217 218\\n218 219\\n219 220\\n220 221\\n221 222\\n222 223\\n223 224\\n224 225\\n225 226\\n226 227\\n227 228\\n228 229\\n229 230\\n230 231\\n231 232\\n232 233\\n233 234\\n234 235\\n235 236\\n236 237\\n237 238\\n238 239\\n239 240\\n240 241\\n241 242\\n242 243\\n243 244\\n244 245\\n245 246\\n246 247\\n247 248\\n248 249\\n249 250\\n250 251\\n251 252\\n252 253\\n253 254\\n254 255\\n255 256\\n256 257\\n257 258\\n258 259\\n259 260\\n260 261\\n261 262\\n262 263\\n263 264\\n264 265\\n265 266\\n266 267\\n267 268\\n268 269\\n269 270\\n270 271\\n271 272\\n272 273\\n273 274\\n274 275\\n275 276\\n276 277\\n277 278\\n278 279\\n279 280\\n280 281\\n281 282\\n282 283\\n283 284\\n284 285\\n285 286\\n286 287\\n287 288\\n288 289\\n289 290\\n290 291\\n291 292\\n292 293\\n293 294\\n294 295\\n295 296\\n296 297\\n297 298\\n298 299\\n299 300\\n300 301\\n301 302\\n302 303\\n303 304\\n304 305\\n305 306\\n306 307\\n307 308\\n308 309\\n309 310\\n310 311\\n311 312\\n312 313\\n313 314\\n314 315\\n315 316\\n316 317\\n317 318\\n318 319\\n319 320\\n320 321\\n321 322\\n322 323\\n323 324\\n324 325\\n325 326\\n326 327\\n327 328\\n328 329\\n329 330\\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1\\n2\\n1\\n2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"1\\n2\\n1\\n2\\n1\"\nassert solution(\"7 7\") == \"1\\n2\\n1\\n2\\n1\\n2\\n1\"\n\n\"\"\"\n\n\nn, e = map(int, input().split())\nmatrix = []\nfor i in range(e):\n    matrix.append(list(map(int, input().split())))\n\nroads = []\nfor i in range(n):\n    roads.append([])\n\nfor i in range(e):\n    if matrix[i][0] not in roads[matrix[i][1] - 1]:\n        roads[matrix[i][1] - 1].append(matrix[i][0])\n    else:\n        roads[matrix[i][1] - 1].remove(matrix[i][0])\n\nfor i in range(n):\n    if len(roads[i]) == 1:\n        print(roads[i][0])\n    else:\n        print('0')"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n\") == \"1\\n2\\n1\\n2\\n2\\n1\""
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n''') == '1'\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '2'\nassert solution('''3 4\n1 2\n2 3\n1 4\n''') == '1'\nassert solution('''2 2\n1 2\n1 3\n''') == '0'\nassert solution('''2 2\n1 2\n1 3\n3 4\n''') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '2'\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n3 5\n4 5\n''') == '1'\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n3 5\n4 5\n''') == '2'\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n3 5\n4 5\n''') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '2'\nassert solution('7 7') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '1\\n2\\n1\\n2\\n1'\nassert solution('10 20\\n1 2\\n1 4\\n3 5\\n4 1\\n4 5\\n5 3\\n5 1\\n5 4\\n5 6\\n6 4\\n6 5\\n6 2\\n') == '2\\n2\\n1\\n2\\n2\\n1'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '2'\nassert solution('7 7\\n1 2\\n2 3\\n3 1\\n4 5\\n5 6\\n6 7\\n7 4\\n') == '1'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 10 2\") == \"10\"\nassert solution(\"4 10 3\") == \"5\"\nassert solution(\"1 10 2\") == \"10\"\n\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\")"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(t1) == \"10\"\nassert solution(t2) == \"5\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\n\nassert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '5'\n\nassert solution('''\n4 10 3\n0\n15\n30\n45\n''') == '10'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n1\\n2\\n') == '1'\nassert solution('2\\n3\\n2\\n3\\n') == '4'\nassert solution('3\\n2\\n2\\n2\\n') == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 2') == '6'\nassert solution('2 3 2') == '4'\nassert solution('3 3 3') == '4'\nassert solution('6 1 2') == '4'\nassert solution('6 0 3') == '6'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 10 2') == '10'\nassert solution('4 10 3') == '5'\nassert solution('4 10 4') == '10'\nassert solution('4 10 5') == '5'\nassert solution('4 10 6') == '10'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\") == \"2\"\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\") == \"1\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\nassert solution('''6 2\n100 100 100 100 100 100\n25 25 25 25 25 25 25\n''') == '6'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n50 50 25\") == \"1\"\nassert solution(\"4 2\\n50 50 75\") == \"3\"\nassert solution(\"4 2\\n50 50 75\\n25 25 25\") == \"2\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '1'\nassert solution('10\\n1\\n10\\n4\\n9\\n7\\n12\\n13\\n9\\n10\\n9\\n7\\n15\\n13\\n14\\n9\\n12\\n13\\n10\\n9\\n7\\n16\\n15\\n14\\n9\\n12\\n13\\n10\\n9\\n7\\n') == '16'\nassert solution('10\\n1\\n1\\n10\\n9\\n7\\n12\\n13\\n9\\n10\\n9\\n7\\n15\\n13\\n14\\n9\\n12\\n13\\n10\\n9\\n7\\n16\\n15\\n14\\n9\\n12\\n13\\n10\\n9\\n7\\n') == '15'\nassert solution('10\\n1\\n2\\n1\\n9\\n7\\n12\\n13\\n9\\n10\\n9\\n7\\n15\\n13\\n14\\n9\\n12\\n13\\n10\\n9\\n7\\n16\\n15\\n14\\n9\\n12\\n13\\n10\\n9\\n7\\n') == '10'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '2'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '1'\nassert solution('''\n4 2\n50 50 50 50\n25 25 25 25\n''') == '3'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\nassert solution(\"4 2\") == \"2\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n100 50\\n25 25 25\\n50 50 50 50\\n') == '1'\nassert solution('2\\n100 100\\n25 25 25\\n50 50 50 50\\n') == '2'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n\"\"\""
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"4 4\n.LX.\n.X..\n....\n.L..\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n.X.\n.X.\n.X.\n.X.''') == '1'\n\nassert solution('''4 4\n.X.\n.X.\n.X.\n.X.''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\".LX.\\n.X..\\n...L\\n.X..\") == \"1\"\nassert solution(\".XLX\\n.X..\\n...L\\n.X..\") == \"2\"\nassert solution(\".XLX\\n.X..\\n.L..\\n.X..\") == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n....\n.L..''') == '1', 'First'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..''') == '2', 'Second'\n\"\"\"\n\nstdin = \"\"\"4 4\n.LX.\n.X..\n....\n.L..\"\"\".splitlines()\n\nfrom collections import deque"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\n.LX.\\n.X..\\n....\\n.L..\\n') == '1'\nassert solution('4 4\\n.LX.\\n.X..\\n...L\\n.X..\\n') == '2'\nassert solution('4 4\\n.LX.\\n.X..\\n.X..\\n.X..\\n') == '2'\nassert solution('4 4\\n.LX.\\n.X..\\n...L\\n.X..\\n') == '2'\nassert solution('4 4\\n.LX.\\n.X..\\n.L..\\n.X..\\n') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '4 4\\n.LX.\\n.X..\\n....\\n.L..') == '1', 'Wrong answer'\nassert solution(\n    '4 4\\n.XLX\\n.X..\\n...L\\n.X..') == '2', 'Wrong answer'\nassert solution(\n    '6 6\\nL.X.X\\nX...X\\n.X..X\\n..X..\\n...X.\\n.L.X.\\n') == '2', 'Wrong answer'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4\n.L.X\nX..X\n...X\n...X\nX...''') == '1'\nassert solution('''5 5\n.L.X\nX..X\n...X\n...X\nX...''') == '2'\nassert solution('''10 10\n...X.\n..X..\n.X...\nX...X\nX....\n...X\nX....\n....X\nX...X\nX...X\n''') == '0'\nassert solution('''10 10\n...X.\n..X..\n.X...\nX...X\nX....\n...X\nX....\n....X\nX...X\nX...X\n''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4\\n.LX.\\n.X..\\n....\\n.L..') == '1'\nassert solution('3 5\\n.X..\\n..X.\\n.X..\\n.X..\\n.X..') == '1'\n\n\"\"\"\n\nR, C = map(int, input().split())\nseats = []\nfor _ in range(R):\n    seats.append(input())\n\nboard = [[0 for _ in range(C)] for _ in range(R)]\n\nfor row in range(R):\n    for col in range(C):\n        if seats[row][col] == 'L':\n            if row == 0:\n                if col == 0:\n                    board[row][col] = 1\n                else:\n                    board[row][col] = board[row][col-1] + 1\n            else:\n                if col == 0:\n                    board[row][col] = board[row-1][col] + 1\n                else:\n                    board[row][col] = board[row-1][col] + board[row][col-1] - 1\n        if seats[row][col] == 'X':\n            board[row][col] = 0"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\") == \"1\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n''') == 'home', f\"({solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n''')})\"\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n''') == 'detention', f\"({solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n''')})\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"home\"\nassert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == 'home'\nassert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'detention'\nassert solution('''4 3 3\n1 1 1\n2 2 2\n3 3 3\n1 2''') == 'detention'\nassert solution('''5 3 1\n1 1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\") == \"home\"\nassert solution(\n\"\"\"\n4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\") == \"detention\"\nassert solution(\n\"\"\"\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n\"\"\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"home\"\n\nassert solution(\"6 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n2 3 3\\n1 4\\n\") == \"detention\"\n\nassert solution(\"6 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n2 3 3\\n1 4\\n1 5\\n\") == \"detention\"\n\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n1 4\\n\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2 1') == \"home\"\nassert solution('5 2 1') == \"detention\"\n\nstdin = \"\"\"\n4 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"home\"\nassert solution(\"2 2 1\") == \"2 0 1\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'home'\nassert solution('1\\n1\\n1\\n') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == \"home\"\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3''') == \"detention\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"alala\") == \"allala\", \"First\"\nassert solution(\"tralalal\") == \"allatral\", \"Second\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"zzzz\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tralalal') == 'allatral', f'Expected: allatral, got: {solution(\"tralalal\")}'\nassert solution('zzzz') == '-1', f'Expected: -1, got: {solution(\"zzzz\")}'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == '-1'\nassert solution('z') == 'z'\nassert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\nprint('solution() is working!')\n\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"tralalal\") == \"allatral\", \"Wrong!\"\nassert solution(\"zzzz\") == \"zzzz\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''tralalal\n''') == 'allatral'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\nba\n''') == 'b'\nassert solution(\n'''\nzcz\n''') == 'z'\nassert solution(\n'''\nzzzz\n''') == '-1'\n'''\nThis solutions requires a lot of memory/time and is not accepted\n'''\nassert solution(\n'''\nzb\n''') == 'zb'\nassert solution(\n'''\nzz\n''') == 'zz'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"5\"\nassert solution(\"6\\n3 2 1 6 4 5\\n\") == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2 3 4 5''') == '5'\nassert solution('''3 2 1 6 4 5''') == '8'\nassert solution('''2 4 6 3 1''') == '5'\nassert solution('''2 6 3 1''') == '5'\nassert solution('''2 6''') == '5'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\"\nassert solution(stdin=\"5\\n1 2 3 4 5\") == \"5\"\nassert solution(stdin=\"6\\n3 2 1 6 4 5\") == \"8\"\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '5'\nassert solution('''6\n3 2 1 6 4 5\n''') == '8'\nprint('You passed all tests!')"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '5'\nassert solution('''6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '1'\nassert solution('10') == '1'\nassert solution('100') == '2'\nassert solution('1000') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    5\n    ''') == '1'\n\nassert solution('''\n    16\n    ''') == '2'\n\nassert solution('''\n    23\n    ''') == '3'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '1'\nprint('all tests passed')"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('6') == '2'\nassert solution('5') == '1'\nassert solution('10') == '2'\nassert solution('13') == '3'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '2\\n'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n4\n5\n''') == '2'\nassert solution('''1\n1\n1\n''') == '2'\nassert solution('''1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '1'\nassert solution('42') == '0'\nassert solution('12') == '2'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 1\n0 0 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n0 1 20\n1 0 5\n\"\"\") == \"1 0 15\"\nassert solution(\"\"\"\n5 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n\"\"\") == \"1 0 15\"\nassert solution(\"\"\"\n2 1\n0 0 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1\\n0 1 15\\n'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n0 1 20\\n1 0 5\\n') == '1 0 15'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\nassert solution('''\n3 3\n0 1 10\n1 0 5\n0 2 10\n2 0 20\n''') == '1 2'\n'''\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1\n1 2 5\n0 3 5\"\"\") == \"0\"\n\nassert solution(\"\"\"\n2 2\n0 1 20\n1 0 5\"\"\") == \"1\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1 10\n0 2 10\n1 0 20\n''') == '1'\nassert solution('''\n3 3 10\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '0 1 15'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5') == '0'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 10\") == \"0\"\nassert solution(\"2 2 10\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 10') == '0'\nassert solution('4 5') == '0'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\nassert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"5\"\nassert solution(\"5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\nassert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3\\n2 3\\n1 4\\n3 5\\n4 5\\n2 5') == '5'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\\n2 5') == '1'\nassert solution('100000 3\\n100003 12\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\\n5 5\\n5 5\\n4 5\\n3 5\\n2 5\\n1 5') == '1000000000'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '5'\nassert solution('5 7') == '1'\nassert solution('5 8') == '3'\nassert solution('5 9') == '2'\nassert solution('6 9') == '4'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 3 2 1 5\\n1 3\") == \"5\"\nassert solution(\"5 3\\n1 3\\n2 3\") == \"1\"\nassert solution(\"4 3\\n4 4 8 12\\n1 2\\n2 3\\n3 4\\n3 4\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 6\\n'\n    '1 3 2 1 5\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '3 5\\n'\n    '4 5\\n'\n    '2 5\\n'\n) == '5'\nassert solution(\n    '4 3\\n'\n    '4 4 8 12\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '2 5\\n'\n) == '1'\nassert solution(\n    '3 4\\n'\n    '4 4 8 12\\n'\n    '1 2\\n'\n    '2 3\\n'\n    '3 4\\n'\n    '4 5\\n'\n    '2 5\\n'\n) == '2'\nassert solution(\n    '2 3\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 4\\n'\n    '3 5\\n'\n    '4 5\\n'\n    '2 5\\n'\n) == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\n\"\"\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '7'\nassert solution('13') == '24'\nassert solution('1') == '1'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"020302\") == \"7\"\nassert solution(\"1311\") == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\nassert solution('a') == '1'\nassert solution('0') == '1'\nassert solution('') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    1\n''') == '2'\nassert solution('''\n    2\n''') == '4'\nassert solution('''\n    3\n''') == '7'\nassert solution('''\n    1311\n''') == '24'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"010201\"\n) == \"1\"\nassert solution(\n    \"1311\"\n) == \"24\"\nassert solution(\n    \"011\"\n) == \"1\"\nassert solution(\n    \"111\"\n) == \"12\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"7\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('020302') == '7'\nassert solution('1311') == '24'\nassert solution('233345') == '58'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1311\") == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''0203\n0202''') == '7'\nassert solution('''02220\n02110''') == '7'\nassert solution('''02031\n0203''') == '7'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n##.#..#.\\n####.##.\\n###..##.\\n##.##..#\\n###.##.##\\n\") == \"1 1 3 3\"\nassert solution(\"3 3\\n...###\\n###.##\\n###.##\\n###.##\\n###.##\\n\") == \"1 1 3 3\"\nassert solution(\"3 10\\n#.##..#.\\n####.##.\\n###.##.#\\n##.#.#.#\\n##.###.#\\n###.##.#\\n###.#.#.#\\n##.####.\\n####.##.\\n##.##.#.\\n\") == \"3 3 3 3 3 3 3 3 3\"\nassert solution(\"6 6\\n##.##.#.\\n###.#.#.\\n#.#.#.#.\\n##.###.#\\n###.##.#\\n###.##.#\\n###.##.#\\n##.###.#\\n#.##.#.#\\n####.#.#\\n\") == \"3 3 3 3 3 3 3 3 3\"\nassert solution(\"6 6\\n###.##.#\\n#.#.#.#.\\n##.###.#\\n###.##.#\\n###.##.#\\n###.##.#\\n###.##.#\\n##.###.#\\n#.#.#.#.#\\n####.#.#\\n\") == \"6 6 6 6 6 6 6 6 6\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n') == '3 1 3 10'\nassert solution('5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.#.##.\\n###########.###...#.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\\n\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.##\\n###########.###...#.##\\n\") == \"1 15 5 15\""
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 20') == '3 1 3 10'\nassert solution('8 10') == '3 1 3 10'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 20') == '1 15 5 15'\nassert solution('8 10') == '3 1 3 10'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3\\n#.#..##..#') == '3 1 3 10'\nassert solution('5 20\\n###########.#.#.#.\\n##########..##.#..##\\n###########.###...#.\\n##########.###.#..##.\\n###########.###...#.\\n##########.###.###.\\n') == '1 15 5 15'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\nassert solution('''201 1.000\n50 0.125''') == '5.000000000'''\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''50 0.125\n201 1.000\n''') == '16.339203308'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''50 0.125\n201 1.000''') == \"16.339203308\"\n\nassert solution('''50 0.123\n201 1.0''') == \"6.33333333333\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"16.339203308\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"16.339203308\""
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\nprint('Almost done! Go ahead and submit your answer')\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\nassert solution('''201 1.000\n50 0.125''') == '5.000000000'\nassert solution('''20 0.125\n20 1.000''') == '1.000000000'\nassert solution('''50 0.125\n20 0.125''') == '0.000000000'\nassert solution('''20 0.125\n20 0.125''') == '0.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"50 0.125\"\n) == \"16.339203308\"\nassert solution(\n    \"201 1.000\"\n) == \"5.000000000\"\nassert solution(\n    \"105 0.00083\"\n) == \"105.00083000\""
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 10\n0.5 0.4 0.1 0.9 0.7 0.6 0.5 0.4 0.3\n\"\"\") == \"7\"\nassert solution(\"\"\"\n10 3\n0.5 0.3 1.1\n0.1 0.1 1.1\n0.7 0.4 1.1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n16 4\n0.6 0.1 0.2 0.4 0.3 0.1 0.2 0.4 0.1 0.3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n16 4\n0.2 0.1 0.8 0.4 0.3 0.1 0.8 0.4 0.3 0.1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2\n0.5 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3\n1 11\n0.4 1\n\"\"\") == \"3\"\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(\"\"\"\n2 2\n0.5 1\n\"\"\")\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"4 3\") == \"3\""
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2'\nassert solution('4 3') == '3'\nassert solution('4 2') == '4'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"3\""
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n0.5 1\\n1 11\\n0.4 1') == '2'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nprint('Solution:')\nprint(solution(*(input().split())))\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n0.5 1\\n') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n') == '3'\nassert solution('5 3\\n0.9 1\\n0.1 1\\n0.1 1\\n0.1 1\\n') == '4'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 1') == '10.5'\nassert solution('3 2') == '-1'\nassert solution('3 4') == '-1'\nassert solution('10 0') == '-1'\nassert solution('3 3') == '4.0'\n\nprint(solution(input()))"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    10\n    10 20 30 40\n    -5 0\n''') == '15.0000000000000'\nassert solution('''\n    5\n    10 20 30 40\n    -5 0\n''') == '-1.0000000000000'\n''')\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n7 1\n3 2\n10 0\n''') == '10.5'\nassert solution('''3\n2 1\n4 0\n0 3\n''') == '-1'\nprint('\"solution()\" is working!')\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n7 1\n3 2\n10 0\n''') == '10.5'\nassert solution('''\n3\n2 1\n4 0\n0 3\n''') == '-1'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n7 1\n3 2\n10 0\n''') == '10.5'\nassert solution('''\n3\n2 1\n4 0\n0 3\n''') == '-1'\nassert solution('''\n0\n0 0\n''') == '0.0'\nassert solution('''\n5\n1 2\n1 2\n1 1\n1 1\n1 2\n''') == '1.0'\nassert solution('''\n5\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '1.0'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1\n4 0\n0 3\n1 2''') == '10.5'\nassert solution('''10\n1 1\n4 0\n0 3\n1 2''') == '-1'\nassert solution('''4\n1 1\n4 0\n0 3\n1 2''') == '-1'\n\nInput\n5\n2 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n1\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n4\n1 1\n4 0\n0 3\n1 2\nOutput\n-1\n\nInput\n10\n1 1\n4 0\n0 3\n1 2\nOutput\n10.5\n\nInput\n3\n2 1"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n2 1\\n4 0\\n0 3') == '10.5'\nassert solution('3\\n3 1\\n4 0\\n0 3') == '-1'\nprint('All test cases passed.')\n\"\"\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == \"2\"\nassert solution('''1 1.1\n2 1.2\n3 1.3\n4 1.4''') == \"4\"\nassert solution('''1 0.1\n2 0.2\n3 0.3\n4 0.4''') == \"2\"\nassert solution('''1 1.1\n2 1.2\n3 1.3\n4 1.4''') == \"4\"\nassert solution('''1 0.01\n2 0.02\n3 0.03\n4 0.04''') == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'\nassert solution('2 0.5\\n2 0.51\\n1 0.5') == '2'\nassert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"2.5\\n3.5\\n4.5\") == \"2\"\nprint(\"YOUR CODE IS CORRECT!\")\nprint(\"Press ENTER to exit\")\ninput()\n\"\"\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 0.5\n2 0.51\n1 0.49''') == '1'\nassert solution('''3 0.51\n4 0.49\n3 0.49''') == '3'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 0.5\n4 0.5\n2 0.5\n5 0.5\n2 0.51\n2 0.49''') == '1'\nassert solution('''2 1 0.5\n2 0.5\n2 0.51\n2 0.49''') == '2'\nassert solution('''4 1 0.5\n4 0.5\n4 0.51\n4 0.49''') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 0.5\n2 0.51\n1 0.49\n''') == '1'\nassert solution('''\n2 0.51\n2 0.51\n1 0.49\n''') == '2'\nassert solution('''\n1 0.51\n2 0.51\n1 0.49\n''') == '2'\nassert solution('''\n1 0.5\n2 0.5\n1 0.5\n''') == '1'\nassert solution('''\n1 0.5\n1 0.51\n1 0.49\n''') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 0.5\\n2 0.5\\n1 0.49') == '1'\nassert solution('2 0.5\\n2 0.51') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 0.5') == '1'\nassert solution('2 0.5') == '2'\nassert solution('2 0.51') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('4 0.75\\n4 0.5\\n3 0.4\\n3 0.6') == '1'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n\"\"\") == \"yes\"\nassert solution(\"\"\"\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n\"\"\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n3 4\n4 2\n''') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"yes\"\nassert solution(\"3 3 3 3\\n1 1 2 2 2\\n0 1\\n2 3\\n3 4\\n4 2\\n\") == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'yes'\nassert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\nSample Output 3:\nno\n''') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3\\n\") == \"yes\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 4') == 'yes'\nassert solution('2 2 3') == 'no'\nassert solution('4 5 2') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 2') == 'no'\nassert solution('5 4 4') == 'yes'\nprint('all tests passed')\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n\"\"\") == \"yes\"\nassert solution(\"\"\"\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\nSample Output 3:\nno\n\"\"\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 4') == 'yes'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\n''') == 'no'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2 1 2 7\"\n\"\"\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2 1\\n1 2\\n2 3\\n'\nassert solution('4') == '5 8\\n3\\n5 6\\n7\\n9\\n2\\n4\\n'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n5\\n5') == '2'\nassert solution('4\\n20\\n15\\n17\\n14') == '5'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n5\n5\n''') == '2 1 2'\n\nassert solution('''\n4\n20\n15\n17\n14\n''') == '5 8 2 7'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2 1 3 4'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n5\n5\n5\n''') == '2 1 2 3'\n\nassert solution('''4\n20\n15\n17\n14\n''') == '5 8 7 2'\n\nassert solution('''8\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n''') == '2 5 7 1 4 6 8 3'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\\n2\\n1\\n2\\n3\"\nassert solution(\"2\") == \"2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\"\nassert solution(\"3\") == \"3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\"\nassert solution(\"4\") == \"4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('15') == '8'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n5\n5\n5\n\"\"\") == \"\"\"2 1 2\"\"\"\n\nassert solution(\"\"\"\n4\n20\n15\n17\n14\n\"\"\") == \"\"\"5 8 2 7\"\"\"\n\n\"\"\"\nThis challenge is worth $5.00 for me.\n\nFor those who have time, please refer to the \u201cSolutions\u201d tab and submit your solution.\n\"\"\""
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '2 1 1'\nassert solution('4') == '3 2 1 1'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\npython\\npython\\njava') == 'python\\npython\\npython\\njava'\nassert solution('2\\npython\\njava\\njava\\n') == 'python\\njava\\njava\\njava\\n'\nassert solution('3\\npython\\njava\\njava\\n') == 'python\\njava\\njava\\njava\\n'\nassert solution('4\\npython\\njava\\njava\\n') == 'python\\njava\\njava\\njava\\n'\nassert solution('5\\npython\\njava\\njava\\n') == 'python\\njava\\njava\\njava\\n'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\npython\\njava\\n') == 'python\\npython main.py\\npython main.py -n 10\\npython main.py -n 10 -n 20\\npython main.py -n 20\\npython main.py -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20 -n 20"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'python'\nassert solution('1') == 'python'\nassert solution('2') == 'python'\nassert solution('3') == 'python'\nassert solution('4') == 'python'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == \"python\\njava\\njava\\npython\\njava\"\nassert solution('3') == \"python\\npython\\npython\"\nassert solution('2') == \"python\\npython\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'python'\nassert solution('2') == 'java'\nassert solution('3') == 'python'\nassert solution('4') == 'java'\nassert solution('5') == 'java'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\npython\\npython\\npython\\njava\\njava\\njava\\njava\\npython\\n\") == \"python\\njava\"\nassert solution(\"1\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\n\") == \"java\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\n\"\nassert solution(\"1\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\n\") == \"java\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\njava\\n\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\npython\np^ main.py\n^ -n 10\n''') == \"python\\npython main.py\\npython main.py -n 10\\n\"\nassert solution('''\n5\npython\njava\n^\n^^^\n^^^\n''') == \"python\\njava\\njava\\npython\\njava\\npython\\n\"\n'''"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'python'\nassert solution('2') == 'python java'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"python\"\nassert solution(\"2\") == \"python\"\nassert solution(\"1\") == \"python\"\nassert solution(\"0\") == \"\"\nassert solution(\"-1\") == \"\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'python'\nassert solution('2') == 'python java'\nassert solution('3') == ''\nassert solution('4') == 'python main.py -n 10'\nassert solution('5') == 'python main.py -n 10'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\nassert solution('''hitehre\n2\nthere\nhello\n''') == 'impossible'"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"impossible\"\nassert solution(input()) == \"ambiguous\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hello\") == \"impossible\"\n\n'''"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\nSample Output 2:\nimpossible\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\", \"Wrong!\"\nassert solution(\"hello\") == \"impossible\", \"Wrong!\"\nassert solution(\"hello world\") == \"ambiguous\", \"Wrong!\"\nassert solution(\"hitehre\") == \"impossible\", \"Wrong!\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('hitehre') == 'impossible'\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\""
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('1 3') == '6'\nassert solution('2 3') == '18'\nprint(f'Solution: {solution(*TEST)}')\n\n\"\"\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('3 4') == '2640'\nassert solution('4 4') == '8192'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('2 2') == '12'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\nassert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('12 21') == '8212'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '4'\nassert solution('2 2') == '16'\n'''\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\n'''\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nprint(solution(input()))\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1\n2\n1 1''') == '16'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2', 'First'\nassert solution('4') == '2', 'Second'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\nbac\nbaba\n''') == '2'\n\nassert solution('''\n4\nabab\n2\nbac\nbaba\n''') == '4'\n'''\n\nN, S = input().split()\nN = int(N)\nS = list(S)\n\nM = int(input())\n\nPatterns = []\nfor i in range(M):\n    Patterns.append(input())"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"2\") == '2'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nabab\\n2\\nbac\\nbaba') == '4'\nassert solution('6\\nabcbab\\n2\\ncb\\ncbab') == '2'\nassert solution('5\\nabab\\n2\\ncb\\ncba') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nab\\nacb\\n') == '2'\nassert solution('5\\nabcb\\nab\\ncb\\n') == '5'\nassert solution('6\\nabab\\nbbb\\n') == '4'\nassert solution('5\\nabac\\nabc\\n') == '3'\n\nstdin = \\\n\"\"\"\n3\nabcbab\n2\ncb\nbac\nbaba\n\"\"\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"8\") == \"8\""
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"2\"\nassert solution(\"111\") == \"3\"\nassert solution(\"11111\") == \"4\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n'''\n\nimport math"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\nabcbab\n2\ncb\ncbab\n''') == '2'\n\nassert solution('''4\nabab\n2\nbac\nbaba\n''') == '4'\n\nassert solution('''10\naabacba\n2\ncba\nbac\nbca\n''') == '3'\n\nassert solution('''300000\na\n''') == '3174001'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6\\n85.0'\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4\\n17.071067\\n20\\n22.928932\\n'''"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"4\"\nassert solution(\"10\") == \"8\"\nassert solution(\"1000\") == \"959\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4\\n10 10\\n80 10\\n80 0\\n110 0\\n') == '6\\n85\\n90\\n95\\n100\\n105'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n4\n110 10\n80 10\n80 0\n110 0''') == '6\nassert solution('''12\n4\n10 10\n80 10\n80 0\n110 0\n90 90\n110 10\n90 0\n110 0\n80 10\n80 0\n90 0\n90 90\n90 80\n80 80\n90 80\n90 90''') == '7\nassert solution('''34\n3\n10 10\n80 10\n80 0\n110 0\n90 90\n110 10\n90 0\n110 0\n80 10\n80 0\n90 0\n90 90\n90 80\n80 80\n90 80''') == '9\n'''"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"6\"\nassert solution(\"50\") == \"6\"\nassert solution(\"4\") == \"17.071067\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\"\nassert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\") == \"4\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n3') == '4'\nassert solution('10\\n4') == '17.071067'\nassert solution('24\\n3') == '4'\nassert solution('50\\n4') == '6'\nassert solution('50\\n3') == '5.0'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"50\") == \"6\"\nassert solution(\"4\") == \"85\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '6'\nassert solution('3') == '4'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('9') == '-1'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'yes'\nassert solution('0 0') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"100 11\") == \"no\"\nassert solution(\"101 11\") == \"no\"\nassert solution(\"200 11\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\nassert solution('0 1') == 'yes'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"100000000\") == \"yes\"\nassert solution(\"100000000000\") == \"yes\"\nassert solution(\"10000000000000\") == \"yes\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n\"\"\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\"\n\"\"\"\nimport math\nimport random"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 11''') == 'yes'\nassert solution('''10 7''') == 'no'\n\n'''\nSample Input 1:\n10 7\nSample Output 1:\nno\n'''"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('20 15') == 'no'\nassert solution('100 111') == 'no'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n3 4\n2 5\n1 6''') == '3'\nassert solution('''5\n10 30\n20 40\n30 50\n10 60\n30 40''') == '3'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('2') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n3 4\n2 5\n1 6\n''') == '3'\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == '3'\n'''\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2 3'\nassert solution('1') == '1'\nassert solution('6') == '3 4'\nassert solution('100000') == '2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"5\") == \"10 20 30 40 50\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40\\n20 40\\n10 60'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('6') == '4'\nassert solution('10') == '3'\nassert solution('30') == '4'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\n\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n1 1\n2 2\n''') == '2'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5, 1, 10, 10, 5]) == 5836\nassert solution([5, 2, 10, 10, 5]) == 1828\nassert solution([5, 1, 10, 10, 5, 2, 5, 2, 5, 2]) == 5836\nassert solution([5, 1, 10, 10, 5, 2, 5, 2, 5, 2, 2, 2, 5, 2]) == 1828\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '5836', \"sample\"\nassert solution('5 2') == '1828', \"another\""
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\"\"\") == \"\"\"5836\"\"\"\nassert solution(\"\"\"5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\"\"\") == \"\"\"1828\"\"\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == \"5836\"\nassert solution(\n    '2 2\\n5 4 1\\n2 2 1\\n') == \"10\"\nassert solution(\n    '5 3\\n3 3 2\\n4 4 1\\n') == \"16\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"50\"\nassert solution(\"3\") == \"50\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n10 775 735 743\nSample Input 3:\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\nSample Output 3:\n50\n\nSample Input 4:\n4\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n10 775 735 743\nSample Output 4:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '50'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3]) == 'impossible'\nassert solution([7, 2401, 3299]) == '50'\nassert solution([6, 2401, 2399]) == 'impossible'\nassert solution([2, 750, 750, 99]) == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '50'\nassert solution('4') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\\n') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == \"50\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '50'\nassert solution('3') == 'impossible'\nassert solution('3') == 'impossible'\n\"\"\"\n\nfrom itertools import combinations_with_replacement\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99\") == \"50\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a single line, containing a real number P.\n\nOutput\nReturn a string consisting of five nonnegative integers, separated by spaces.\n\nSample Input 1\n5.0\nSample Output 1\n0 0 0 0 1\n\nSample Input 2\n4.5\nSample Output 2\n0 0 0 1 1\n---------------------------------------------------\n\nTask\nFind the minimum number of paper boxes used to hold the given number, \n and return it as a string in the format specified by the examples.\n\nNote: For a description of the number of boxes required, refer to the input/output section.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 P \u2264 9\n\nInput\nThe input consists of a"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5.0''') == '0 0 0 0 1'\nassert solution('''4.5''') == '0 0 0 1 1'\nprint('\"Run\" is good. Great job,'+ your_name + '!')''')"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\nassert solution(\"1.1\") == \"0 1 1 0 0\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\n\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\nassert solution('5.0') == '0 0 0 0 1'\nassert solution('8.0') == '0 0 0 0 1'\nassert solution('2.0') == '0 0 0 0 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(f) == '0 0 0 1 1'\n\nassert solution(f) == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"0 0 0 1 1\"\nassert solution(input) == \"0 0 0 1 1\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5.0') == '0 0 0 0 1', \"Wrong!\"\nassert solution('4.5') == '0 0 0 1 1', \"Wrong!\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 3 1\") == \"8\"\nassert solution(\"8 2 1\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5\\n') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5\\n') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5\n''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5\n''') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\nprint('You are a Data Scientist!\\n')\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n2 3 4 1\n''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4\n''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\nassert solution(\"5 4\") == \"1\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '3'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'\nassert solution('2 3') == '3'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\nassert solution('1000000000 4 10000000 4 10000000') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '1'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1.732050') == '1.732050810'\nassert solution('1 1 3.0') == '-1'\n'''"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nprint(solution())"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nprint(solution())"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.732050808\"\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\n'''\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n\n'''"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 3.0') == '1.732050808'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '2.4999999987500003'\nassert solution('1.5 3 2') == '3.5'\nassert solution('1.4 2 2') == '2.2'\nassert solution('2.1 1 2') == '1.1'\nassert solution('2 1 2') == '1.1'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 4 2') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n0 -2 1\n.75\n''') == '2.5000000000000002'\nassert solution('''\n2\n0 2 3\n.75\n''') == '5.000000000000003'\nassert solution('''\n1\n0 2 3\n.75\n''') == '1.2500000000000005'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == \"2.4999999987500003\"\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == \"9.999999999000002\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2.4999999987500003'\nassert solution('5') == '8.00000000000001'\nassert solution('7') == '9.000000000000028'\nassert solution('6') == '5.5'\nassert solution('8') == '6.5'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\nprint('all tests passed')\n\nInput\n8\n0 100 10\n100 -100 100\n1\n2\n0 100 10\n0 -100 100\n.80\nOutput\n2.4999999987500003\n9.999999999000002"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n\nassert solution('''4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1 6\n1 1 5 1 2''') == '0\nassert solution('''4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\nSample Output 2:\n3\n2\n1\n0\nSample Input 3:\n3 4\n3 2 4 1\n3 1 2\n2 2 1\nSample Output 3:\n2\n1\n0\n''') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n\"\"\") == \"2\""
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4\n3 1 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\n\nassert solution('''\n3 5\n1 1 5\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '0'\n\nassert solution('''\n6 4\n3 1 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 3') == '0'\nassert solution('5 2 4') == '3'\nassert solution('5 3 5') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1 4 3 4\") == \"3\"\nassert solution(\"2 1 1\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"2 3 3\") == \"1\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\nassert solution('''\n6 5\n1 2 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n''') == '1'\nassert solution('''\n6 5\n1 2 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n''') == '0'\nassert solution('''\n6 5\n2 4 4\n3 1 1\n2 3 3\n1 3 2\n1 2 2\n1 4 4\n''') == '1'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n''') == '0'\nassert solution('''\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\nassert solution('''\n5 1\n1 1\n1 2\n2 2\n2 3\n''') == '0'\nassert solution('''\n8 9\n2 1 4 3 4 1 4\n1 3 2\n2 4 5\n3 6 6\n4 7 7\n5 8 8\n6 9 9\n7 10 10\n8 11 11\n9 12 12\n10 13 13\n11 14 14\n12 15 15\n13 16 16\n14 17 17\n15 18 18\n16 19 19\n17 20 20\n18 21 21\n19 22 22\n20 23 23\n21 24 24\n22 25 25\n23 26 26\n24 27 27\n25 28 28\n26 29 29\n27 30 30\n28 31 31\n29 32 32\n30 33 33\n31 34 34\n32 35 35\n33 36 36\n34 37 37\n35 38 38\n36 39 39\n37 40 40\n38 41 41\n39 42 42\n40 43 43\n41 44 44\n42 45 45\n43 46 46\n44 47 47\n45 48 48\n46 49 49\n47 50 50\n48 51 51\n49 52 52\n50 53 53\n51 54 54\n52 55 55\n53 56 56\n54 57 57\n55 58 58\n56 59 59\n57 60 60\n58 61 61\n59 62 62\n60 63 63\n61 64 64\n62 65 65\n63 66 66\n64 67 67\n65 68 68\n66 69 69\n67 70 70\n68 71 71\n69 72 72\n70 73 73\n71 74 74\n72 75 75\n73 76 76\n74 77 77\n75 78 78\n76 79 79\n77 80 80\n78 81 81\n79 82 82\n80 83 83\n81 84 84\n82 85 85\n83 86 86\n84 87 87\n85 88 88\n86 89 89\n87 90 90\n88 91 91\n89 92 92\n90 93 93\n91 94 94\n92 95 95\n93 96 96\n94 97 97\n95 98 98\n96 99 99\n97 100 100\n98 101 101\n99 102 102\n100 103 103\n101 104 104\n102 105 105\n103 106 106\n104 107 107\n105 108 108\n106 109 109\n107 110 110\n108 111 111\n109 112 112\n110 113 113\n112 114 114\n113 115 115\n114 116 116\n115 117 117\n116 118 118\n117 119 119\n118 120 120\n119 121 121\n120 122 122\n121 123 123\n122 124 124\n123 125 125\n124 126 126\n125 127 127\n126 128 128\n127 129 129\n128 130 130\n129 131 131\n130 132 132\n131 133 133\n132 134 134\n133 135 135\n134 136 136\n135 137 137\n136 138 138\n137 139 139\n138 140 140\n139 141 141\n140 142 142\n141 143 143\n142 144 144\n143 145 145\n144 146 146\n145 147 147\n146 148 148\n147 149 149\n148 150 150\n149 151 151\n148 152 152\n147 153 153\n146 154 154\n145 155 155\n144 156 156\n143 157 157\n142 158 158\n141 159 159\n140 160 160\n139 161 161\n138 162 162\n137 163 163\n136 164 164\n135 165 165\n134 166 166\n133 167 167\n132 168 168\n131 169 169\n130 170 170\n129 171 171\n128 172 172\n127 173 173\n126 174 174\n125 175 175\n124 176 176\n123 177 177\n122 178 178\n121 179 179\n120 180 180\n119 181 181\n118 182 181\n117 183 183\n116 184 184\n115 185 185\n114 186 186\n113 187 187\n112 188 188\n111 189 189\n110 190 190\n109 191 191\n108 192 192\n107 193 193\n106 194 194\n105 195 195\n104 196 196\n103 197 197\n102 198 198\n101 199 199\n100 200 200\n99 201 201\n98 202 202\n97 203 203\n96 204 204\n95 205 205\n94 206 206\n93 207 207\n92 208 208\n91 209 209\n90 210 210\n89 211 211\n88 212 212\n87 213 213\n86 214 214\n85 215 215\n84 216 216\n83 217 217\n82 218 218\n81 219 219\n80 220 220\n79 221 221\n78 222 222\n77 223 223\n76 224 224\n75 225 225\n74 226 226\n73 227 227\n72 228 228\n71 229 229\n70 230 230\n69 231 231\n68 232 232\n67 233 233\n66 234 234\n65 235 235\n64 236 236\n63 237 237\n62 238 238\n61 239 239\n60 240 240\n59 241 241\n58 242 242\n57 243 243\n56 244 244\n55 245 245\n54 246 246\n53 247 247\n52 248 248\n51 249 249\n50 250 250\n49 251 251\n48 252 252\n47 253 253\n46 254 254\n45 255 255\n44 256 256\n43 257 257\n42 258 258\n41 259 259\n40 260 260\n39 261 261\n38 262 262\n37 263 263\n36 264 264\n35 265 265\n34 266 266\n33 267 267\n32 268 268\n31 269 269\n30 270 270\n29 271 271\n28 272 272\n27 273 273\n26 274 274\n25 275 275\n24 276 276\n23 277 277\n22 278 278\n21 279 279\n20 280 280\n19 281 281\n18 282 282\n17 283 283\n16 284 284\n15 285 285\n14 286 286\n13 287 287\n12 288 288\n11 289 289\n10 290 290\n9 291 291\n8 292 292\n7 293 293\n6 294 294\n5 295 295\n4 296 296\n3"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n1 1 5 1 2\n2 1 6\n2 2 2''') == \"3\"\nassert solution('''5 5\n1 1 5 1 2\n2 1 6\n2 2 2\n2 3 3\n2 4 4\n2 5 5''') == \"2\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5\n1 1 5 1 2\n2 1 6\n2 3 3\n2 4 4\n2 5 5\n''') == '3'\nassert solution('''\n4 5\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n''') == '2'\nassert solution('''\n4 5\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n''') == '1'\nassert solution('''\n4 5\n1 1 5 1 2\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n2 5 5\n''') == '0'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2 1000000007''') == '4'\nassert solution('''1 7 1000000007''') == '1'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 5 1000000007') == '4'\nassert solution('3 2 1000000007') == '4'\nassert solution('2 7 1000000007') == '3'\nassert solution('3 7 1000000007') == '3'\nassert solutionn-----\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\nassert solution('10 5 50000000') == '10'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(f\"3 2\") == \"4\", \"For example, the following should return 4: (3,2). If we add that answer to p, we would get 4 modulo 10^9+9 = 1, which is the only number that divides by 1 in the range.\"\n\"\"\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\nassert solution(\"5 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 10\n6''') == '5'\nassert solution('''3 5\n11''') == '8''')\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 10\n6\n''') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n6\") == \"8\"\nassert solution(\"5 5\\n11\") == \"8\"\nassert solution(\"10 10\\n6\") == \"5\"\nassert solution(\"10 10\\n11\") == \"8\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\"\nassert solution(\"2\\n3\") == \"1\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"10 10\") == \"5\"\nassert solution(\"3 5\") == \"8\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 10\n6\n''') == '5'\nassert solution('''\n3 5\n11\n''') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n10') == '5'\nassert solution('3 5\\n11') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 10\n6\n''') == '5'\nassert solution('''\n3 5\n11\n''') == '8'\nprint('all tests passed')\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5\\n11') == '8'"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 10\\n6') == '5'\nassert solution('3 5\\n11') == '8'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'\nassert solution('4 5 3') == '3'\nassert solution('6 5 3') == '3'\nassert solution('6 5 3') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"3\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\") == \"1\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == \"2\"\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == \"3\"\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == \"3\"\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == \"4\"\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"2\"\nassert solution(\"4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n\") == \"3\"\nassert solution(\"10 10 10\\n0 9 8 4 2 1 9 8 5 6\\n1 2 1\\n0 3 3\\n2 3 1\\n0 4 1\\n2 1 1\\n4 1 1\\n\") == \"7\"\nassert solution(\"10 10 10\\n0 9 8 4 2 1 9 8 5 6\\n1 2 1\\n0 3 3\\n2 3 1\\n0 4 1\\n2 1 1\\n4 1 1\\n\") == \"8\""
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1''') == '2'\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1''') == '3'\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\nSample Output 3:\n5\n''') == '5'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"2\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 3') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 2') == '1'\nassert solution('4 5 5') == '1'\nassert solution('1 1 2') == '1'\nassert solution('1 1 2') == '1'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\nassert solution_slow(stdin) == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 1\") == \"3\"\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '3'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == '3'\nassert solution('''3 1\n10\n10\n1 10\n1 10\n1 10\nSample Output 3:\n1''') == '1'\nassert solution('''10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '3'\nassert solution('3 1') == '3'\nassert solution('3 1') == '3'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1\\n10 20 30') == '3'\nassert solution('4 3\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32\\n3 120') == '3'\nassert solution('3 2\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32') == '3'\nassert solution('4 1\\n10 20 30\\n5 5 10\\n2 20\\n1 30') == '4'\nassert solution('5 1\\n10 20 30\\n5 5 10\\n2 20\\n1 30\\n1 32') == '5'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120''') == \"3\"\nassert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == \"3\"\nassert solution('''5 3\n20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == \"3\"\nassert solution('''4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == \"3\""
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 1') == '3'\nassert solution('3 10') == '3'\nassert solution('3 2') == '3'\nassert solution('3 12') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '2'\nassert solution('1 10') == '1'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '5'\n\"\"\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '5'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('6') == '4'\nassert solution('10') == '4'\n\nwith open('test_input.txt') as f:\n    assert solution(f.read()) == '4'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n2\n''') == '0'\nassert solution('''\n10\n5\n''') == '1'\nassert solution('''\n100\n11\n''') == '4'\nassert solution('''\n1000000\n1000000000\n''') == '2147483647'\nassert solution('''\n100000\n12\n''') == '1'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2'\n) == '1'\n\nassert solution(\n    '3'\n) == '5'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 1'\n) == '2'\nassert solution(\n    '3 1'\n) == '-1'\nassert solution(\n    '4 3'\n) == '2'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '-1'\nassert solution('3 1\\n0 11 9\\n1 0 10\\n0 0 0\\n') == '2'\nassert solution('4 3\\n0 1 0 19\\n0 0 2 0\\n0 5 0 3\\n0 0 0 0\\n') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1\n0 11 9\n1 0 10\n0 0 0''') == '2'\n\nassert solution('''4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0''') == '-1'\n\nassert solution('''2 2\n0 1 1\n1 0 1''') == '2'\n\nassert solution('''3 2\n0 1 0\n1 0 1\n0 0 0''') == '-1'\n\nassert solution('''3 2\n0 0 0\n0 0 0\n0 0 0''') == '2'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1\n0 11 9\n1 0 10\n0 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4 4\n0 1 1 1\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"1 1\") == '2'\nassert solution(\"3 1\") == '2'\nassert solution(\"4 3\") == '2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\nassert solution(\"10 10 0 0\") == \"10 10 0 0\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('4 3 0 3') == '4 3 3'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n''') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2'\nprint(solution('''2 1 0 1\n0 1 100000\n'''))\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 5 0 3\\n\"\n    \"0 1 10\\n\"\n    \"1 2 1\\n\"\n    \"1 3 1\\n\"\n    \"0 2 1\\n\"\n    \"2 3 10\\n\") == \"4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\"\"\") == \"\"\"4 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\"\"\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 0 3') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 10'\nassert solution('2 1 0 1') == '2 100000 1\\n0 1 100000\\n1 2 100000\\n1 3 100000\\n2 3 100000'\nassert solution('10 5 1 -3 4 3 -1 5 4 -2') == '10 3 2\\n1 -3 4\\n-1 5 4\\n-2 2'"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 1 2'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\nSMS\\nMMS') == '3 5'\nassert solution('2 1\\n.MS.\\n.MS.') == '1 0'\nprint('All test cases passed')\n\"\"\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\nSMS\nMMS\n''') == '3 5'\n\nassert solution('''2 3\nS.M\nM..\n''') == '2 0'\n\nassert solution('''8 1\nM.M.\nMS.\n.S\nM..\nM...\n.M\nMS..\nM...\n''') == '6 6'\n\nassert solution('''3 4\nSMS\nM.M\n.S\n''') == '1 0'\n\nassert solution('''5 5\n.SS\nSS.\n.S\n.S.\nS.M\n''') == '1 1'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\nSMS\\nMMS\\n') == '3 5'\nassert solution('2 1\\nM\\nM\\n') == '2 0'\nassert solution('2 3\\nSMS\\nMMS\\n') == '1 2'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '3 5'\nassert solution('2 3') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nSMMS\\nM..\") == \"3 5\"\nassert solution(\"2 3\\nSMS\\nM..\") == \"2 0\"\nassert solution(\"2 3\\nSMS\\nM.M\") == \"3 0\"\nassert solution(\"3 3\\nSMS\\nM.M\") == \"2 0\"\nassert solution(\"10 10\\nSMS\\nM.M\") == \"3 3\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2\nSMS\nM.S''') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\nSM\\nMS') == '3 5'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0 0'\nassert solution('1 1') == '0 1'\nassert solution('2 2') == '0 0'\nassert solution('3 4') == '0 1'\nassert solution('5 5') == '1 1'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\nSMS\nMMS\n''') == '3 5'\nassert solution('''\n1 2\nSS.\n''') == '0 1'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 G a') == '6 c'\nassert solution('10 E a') == '7 c'\nassert solution('0 B') == '1 b'\nassert solution('0 T') == '1 b'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '2'\n'''\n    n = int(stdin.readline().rstrip())\n    #big_branches = []\n    #small_branches = []\n    #leafs = []\n    for i in range(n):\n        line = stdin.readline().rstrip()\n        #if 'G' in line:\n        "
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1 c'\nassert solution('''\n8\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '4 c'\n\n'''"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '3 c'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 3:\n1\n6 b\n''') == '6 b'"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.readline()[:-1]\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\nassert solution('''\n7 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '3'\nassert solution('''\n0\n1\n2\n''') == '2'\nassert solution('''\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n7\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\nassert solution('''\n5\n0 B\n1 S\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 G a\\n'\n    '5 T a\\n'\n    '5 E a\\n'\n    '5 E b\\n'\n    '1 S\\n'\n    '10 E a\\n'\n    '10 G b\\n'\n    '1 T a\\n'\n    ) == '1'\n\nassert solution(\n    '13\\n'\n    '0 B\\n'\n    '1 B\\n'\n    '2 E a\\n'\n    '2 E b\\n'\n    '2 S\\n'\n    '5 G a\\n'\n    '5 T a\\n'\n    '5 E a\\n'\n    '5 E b\\n'\n    '"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S') == '3 c'\nassert solution('5\\ng G a\\ng T a\\n5 E a\\ng E b\\n1 S\\n10 E a\\n10 G b') == '6 c'\n\nimport collections\n\nimport pytest\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0 B') == '1'\nassert solution('2\\n0 B') == '1'\nassert solution('3\\n0 B') == '1'\nassert solution('4\\n0 B') == '1'\nassert solution('5\\n0 B') == '2'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"40\"\nassert solution(\"8 71\") == \"77\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == \"40\"\nassert solution('288 291') == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n5\n''') == '40'\nassert solution('''\n16\n10000\n''') == '11111'\nassert solution('''\n6\n5\n''') == '11'\nassert solution('''\n41\n2147483647\n''') == '0'\nassert solution('''\n2\n1\n''') == '0'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 2') == '8'\nassert solution('10 10') == '0'"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 3\") == \"10\"\nassert solution(\"1000 1001\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 5\n''') == '40'\n\nassert solution('''\n2 2\n''') == '1'\n\nassert solution('''\n7 3\n''') == '0'\n\nassert solution('''\n5 5\n''') == '5'\n\nassert solution('''\n1 2\n''') == '1'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'COG', 'The first one should be COG'\nassert solution('2') == '0', 'The second one should be 0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nDOG') == 'DOG'\nassert solution('3\\nCAT') == 'CAT'\nassert solution('5\\nCAT') == 'CAT'\nassert solution('1\\nA') == 'A'\nassert solution('1\\nB') == 'B'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('2\\nCAT\\nDOG') == '0'"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nCAT\nDOG\nCOT''') == 'COG'\nassert solution('''2\nCAT\nDOG\n''') == '0'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\") == 0\nassert solution(\"2\\nCAT\\nCOT\") == -1\n\n##"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"COG\"\nassert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COT\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\nCAT\\nDOG\\n') == 'CAT'\nassert solution('3\\nCAT\\nDOG\\nCOT\\n') == 'COG'\nassert solution('6\\nCAT\\nDOG\\nCOT\\nZOT\\n') == 'COG'\nassert solution('1\\nA\\n') == 'A'\nassert solution('2\\nA\\n') == 'A'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('6\\nCAT\\nDOG\\nCOT\\nBAR\\nBAR') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT\\nBAR\\nCAT') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT\\nBAR\\nCAT') == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == 'COG'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\nCAT\\nDOG\") == \"COG\"\nassert solution(\"3\\nCAT\\nDOG\\nCOT\") == \"COT\"\nassert solution(\"5\\nCAT\\nDOG\\nCOT\\nBUT\\nBUT\") == \"BUT\"\nassert solution(\"5\\nCAT\\nDOG\\nCOT\\nBUT\\nBUT\\nBUT\") == \"BUT\"\nassert solution(\"5\\nCAT\\nDOG\\nCOT\\nBUT\\nBUT\\nBUT\\nBUT\") == \"BUT\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n3 3\n3 4\n4 4\n4 5\n5 5\n6 6\n6 7\n7 7\n7 8\n8 8\n8 9\n9 9\n9 10\n10 10\n10 11\n11 11\n11 12\n12 12\n12 13\n13 13\n13 14\n14 14\n14 15\n15 15\n15 16\n16 16\n16 17\n17 17\n17 18\n18 18\n18 19\n19 19\n19 20\n20 20\n20 21\n21 21\n21 22\n22 22\n22 23\n23 23\n23 24\n24 24\n24 25\n25 25\n25 26\n26 26\n26 27\n27 27\n27 28\n28 28\n28 29\n29 29\n29 30\n30 30\n30 31\n31 31\n31 32\n32 32\n32 33\n33 33\n33 34\n34 34\n34 35\n35 35\n35 36\n36 36\n36 37\n37 37\n37 38\n38 38\n38 39\n39 39\n39 40\n40 40\n40 41\n41 41\n41 42\n42 42\n42 43\n43 43\n43 44\n44 44\n44 45\n45 45\n45 46\n46 46\n46 47\n47 47\n47 48\n48 48\n48 49\n49 49\n49 50\n50 50\n50 51\n51 51\n51 52\n52 52\n52 53\n53 53\n53 54\n54 54\n54 55\n55 55\n55 56\n56 56\n56 57\n57 57\n57 58\n58 58\n58 59\n59 59\n59 60\n60 60\n60 61\n61 61\n61 62\n62 62\n62 63\n63 63\n63 64\n64 64\n64 65\n65 65\n65 66\n66 66\n66 67\n67 67\n67 68\n68 68\n68 69\n69 69\n69 70\n70 70\n70 71\n71 71\n71 72\n72 72\n72 73\n73 73\n73 74\n74 74\n74 75\n75 75\n75 76\n76 76\n76 77\n77 77\n77 78\n78 78\n78 79\n79 79\n79 80\n80 80\n80 81\n81 81\n81 82\n82 82\n82 83\n83 83\n83 84\n84 84\n84 85\n85 85\n85 86\n86 86\n86 87\n87 87\n87 88\n88 88\n88 89\n89 89\n89 90\n90 90\n90 91\n91 91\n91 92\n92 92\n92 93\n93 93\n93 94\n94 94\n94 95\n95 95\n95 96\n96 96\n96 97\n97 97\n97 98\n98 98\n98 99\n99 99\n99 100\n100 100\n100 101\n101 101\n101 102\n102 102\n102 103\n103 103\n103 104\n104 104\n104 105\n105 105\n105 106\n106 106\n106 107\n107 107\n107 108\n108 108\n108 109\n109 109\n109 110\n110 110\n110 111\n111 111\n111 112\n112 112\n112 113\n113 113\n113 114\n114 114\n114 115\n115 115\n115 116\n116 116\n116 117\n117 117\n117 118\n118 118\n118 119\n119 119\n119 120\n120 120\n120 121\n121 121\n121 122\n122 122\n122 123\n123 123\n123 124\n124 124\n124 125\n125 125\n125 126\n126 126\n126 127\n127 127\n127 128\n128 128\n128 129\n129 129\n129 130\n130 130\n130 131\n131 131\n131 132\n132 132\n132 133\n133 133\n133 134\n134 134\n134 135\n135 135\n135 136\n136 136\n136 137\n137 137\n137 138\n138 138\n138 139\n139 139\n139 140\n140 140\n140 141\n141 141\n141 142\n142 142\n142 143\n143 143\n143 144\n144 144\n144 145\n145 145\n145 146\n146 146\n146 147\n147 147\n147 148\n148 148\n148 149\n149 149\n149 150\n150 150\n150 151\n151 151\n151 152\n152 152\n152 153\n153 153\n153 154\n154 154\n154 155\n155 155\n155 156\n156 156\n156 157\n157 157\n157 158\n158 158\n158 159\n159 159\n159 160\n160 160\n160 161\n161 161\n161 162\n162 162\n162 163\n163 163\n163 164\n164 164\n164 165\n165 165\n165 166\n166 166\n166 167\n167 167\n167 168\n168 168\n168 169\n169 169\n169 170\n170 170\n170 171\n171 171\n171 172\n172 172\n172 173\n173 173\n173 174\n174 174\n174 175\n175 175\n175 176\n176 176\n176 177\n177 177\n177 178\n178 178\n178 179\n179 179\n179 180\n180 180\n180 181\n181 181\n181 182\n182 182\n182 183\n183 183\n183 184\n184 184\n184 185\n185 185\n185 186\n186 186\n186 187\n187 187\n187 188\n188 188\n188 189\n189 189\n189 190\n190 190\n190 191\n191 191\n191 192\n192 192\n192 193\n193 193\n193 194\n194 194\n194 195\n195 195\n195 196\n196 196\n196 197\n197 197\n197 198\n198 198\n198 199\n199 199\n199 200\n200 200\n200 201\n201 201\n201 202\n202 202\n202 203\n203 203\n203 204\n204 204\n204 205\n205 205\n205 206\n206 206\n206 207\n207 207\n207 208\n208 208\n208 209\n209 209\n209 210\n210 210\n210 211\n211 211\n211 212\n212 212\n212 213\n213 213\n213 214\n214 214\n214 215\n215 215\n215 216\n216 216\n216 217\n217 217\n217 218\n218 218\n218 219\n219 219\n219 220\n220 220\n220 221\n221 221\n221 222\n222 222\n222 223\n223 223\n223 224\n224 224\n224 225\n225 225\n225 226\n226 226\n226 227\n227 227\n227 228\n228 228\n228 229\n229 229\n229 230\n230 230\n230 231\n231 231\n231 232\n232 232\n232 233\n233 233\n233 234\n234 234\n234 235\n235 235\n235 236\n236 236\n236 237\n237 237\n237 238\n238 238\n238 239\n239 239\n239 240\n240 240\n240 241\n241 241\n241 242\n242 242\n242 243\n243 243\n243 244\n244 244\n244 245\n245 245\n245 246\n246 246\n246 247\n247 247\n247 248\n248 248\n248 249\n249 249\n249 250\n250 250\n250 251\n251 251\n251 252\n252 252\n252 253\n253 253\n253 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254\n254 254"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n2\n3''') == '2'\nassert solution('''4\n3\n2\n1''') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('10') == '9'\nassert solution('1 2 3 4') == '6'"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''10 1\n4 3\n''') == '6'\nassert solution('''3 1\n3 2\n''') == '3'\n'''\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\\n1 3 4 5\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"2 5\\n1 2 3 4 5\\n\") == \"5\"\nassert solution(\"5 5\\n1 2 3 4 5\\n\") == \"0\"\nassert solution(\"5 4\\n1 2 3 4 5\\n\") == \"1\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '6'\nassert solution('10 1') == '9'\nassert solution('12 1') == '12'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1\") == \"9\"\nassert solution(\"4 3\") == \"6\"\n\"\"\"\n\nstdin = \"10 1\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '1'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(t1) == '2'\nassert solution(t2) == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '3'\nassert solution('5 3') == '4'\nassert solution('2 3') == '3'\nassert solution('5 3') == '-1'\nassert solution('1 4') == '-1'\n\n---\nclass Solution:\n    def solution(self, stdin):\n        pass"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n.V.\n.V.\n..V''') == '3'\n\nassert solution('''5 5\n.V.\n.V.\n..V\n.V.\n.V''') == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\nV.V.V.V.\\nV.V.V.V.\\n..#..\\n.V.#.\\n.V./\") == \"3\"\nassert solution(\"3 4\\n.V..V.\\n.V..V.\\n..#..\\n.V.#.\") == \"0\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\nV...\\nH...V\\n') == '3'\nassert solution('5 5\\nV...V\\n.V.#.\\n./.V.\\n.V.#.\\n') == '1'\nassert solution('3 3\\n..V..\\n..V..\\n') == '2'\nassert solution('3 3\\n.V.V.\\n.V.V.\\n') == '1'\nassert solution('5 5\\n.V.\\n.V.\\n.V.\\n.V.\\n') == '1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\\n') == '3'\nassert solution(\n    '4 4\\n.V.\\n.V.\\n..#..\\n.V.#.\\n.V./\\n') == '-1'\nassert solution(\n    '1 1\\n#\\n') == '-1'\nassert solution(\n    '1 1\\nV\\n') == '0'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./\\n') == '3'\nassert solution('5 5\\nV...\\nH...V\\n') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 5\\n\"\n    \".V.\\n\"\n    \"..#.\\n\"\n    \".V.\\n\"\n    \".V.\\n\"\n    \"V.V.V\\n\"\n) == \"3\"\nassert solution(\n    \"2 5\\n\"\n    \"V...\\n\"\n    \"H...V\\n\"\n) == \"-1\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"AMBIGUOUS\"\n\"\"\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"cdefghi\\nefghijk\\nefghijx\\nabcdefg\"\n) == \"AMBIGUOUS\"\n\"\"\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7\\n' + 'n fox jumps ove\\n' + 'uick brown f\\n' + 'The quick b\\n' + 'y dog.\\n' + 'rown fox\\n' +'mps over the l\\n' + 'the lazy dog\\n') == 'AMBIGUOUS'\nassert solution('4\\n' + 'cdefghi\\n' + 'efghijk\\n' + 'efghijx\\n' + 'abcdefg\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\ncdefghi\nefghijk\nefghijx\nabcdefg\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'AMBIGUOUS'\nassert solution('''\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"AMBIGUOUS\"\nassert solution(\"\"\"\nmps over the l\nthe lazy dog\n\"\"\") == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\nabcd\n1\nbcd\n''') == 'AMBIGUOUS'\nassert solution('''\n2\nb\n1\na\n''') == 'AMBIGUOUS'\nassert solution('''\n5\naa\naa\naa\naa\naa\n''') == 'AMBIGUOUS'\nassert solution('''\n6\naa\naa\naa\naa\naa\naa\n''') == 'AMBIGUOUS'\nassert solution('''\n7\naa\naa\naa\naa\naa\naa\naa\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"n fox jumps ove\\n uick brown f\\n The quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog\\n\") == \"AMBIGUOUS\"\n\nassert solution(\"7\\nfox jumps ove\\n uick brown f\\nThe quick brown fox jumps over the lazy dog\\n\") == \"The quick brown fox jumps over the lazy dog\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\\nn fox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog\\n\") == \"The quick brown fox jumps over the lazy dog.\"\nassert solution(\"7\\nfox jumps ove\\nuick brown f\\nThe quick b\\ny dog.\\nrown fox\\nmps over the l\\nthe lazy dog\\n\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg') == \"AMBIGUOUS\"\nassert solution('9\\nugugtduvjz\\nqdzgfkxneu\\ngjujzfd\\njzdsf\\nqagf\\nqzjs') == \"AMBIGUOUS\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n\"\"\") == \"--+0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '--+0-'\nassert solution('3 2') == '0+-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '+-+-'\nassert solution('5 6') == '--+0-'\nassert solution('3 2') == '0+-\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5,6],[-3,-2,3,-2,4],[2,3,3],[-1,-1,1,1,2],[0,1,4,5,1]) == '+--+'\nassert solution([2,4],[1,-1,1],[2,3],[1,-1,1],[2,3,4]) == '-0+'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '--+0-', 'First Test'\nassert solution('''5 2\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '0+--+', 'Second Test'\nassert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == 'impossible', 'Third Test'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == \"--+0-\", \"First Test Case\"\nassert solution('''\n2 2\n1 2\n-1 -1\n''') == \"0+-+\", \"Second Test Case\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"--+0-\", solution.__doc__\nassert solution(\"3 2\\n1 2 1\\n-2 0 2\\n\") == \"0+-\", solution.__doc__"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"--+0-\"\nassert solution(\"3 2\") == \"0+-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\\n') == '--+0-'\nprint('Yay, you solved it!')\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '--+0-', solution('5 6')\nassert solution('3 2') == '0+-', solution('3 2')\nassert solution('1 2 1') == '+-0', solution('1 2 1')\nassert solution('2 5 1') == '+-+0', solution('2 5 1')\nassert solution('0 1 4') == '+-+0', solution('0 1 4')\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 1\n1 1\n1\n1 1 1\n2 2 2\n''') == '4'\n\nassert solution('''\n2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\n''') == '4'\n\nassert solution('''\n2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\n''') == '4'\n\nassert solution('''\n2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\n''') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n    \"1 1\\n\"\n    \"1\\n\"\n    \"1 1 1\\n\"\n    \"2 2 2\\n\"\n    \"2 2 2\\n\"\n) == \"4\\n\"\nassert solution(\n    \"2 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"2\\n\"\n    \"1 2 2\\n\"\n    \"2 2 2\\n\"\n) == \"4\\n\"\nassert solution(\n    \"2 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"2\\n\"\n    \"1 2 2\\n\"\n    \"2 2 2\\n\"\n) == \"4\\n\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4\n1 2\n3 2\n2 1\n1''') == '2'\nprint('PASSED')\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1 1\") == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1 1\n1 1 1 1 1\n''') == '2\\n3\\n4\\n'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == 'YES'\nassert solution('''\n3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\nassert solution('''\n3 3\nWWWW\nRRRR\nRRRR\n''') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'NO', 'First'\nassert solution('2') == 'NO', 'Second'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5\nRWRR\nRWRR\nRWRR\nBWWW\n''') == 'YES'\n\nassert solution('''\n5 5\nWRRR\nWRRR\nWRRR\nBWWW\n''') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\nassert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\\n\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"WRRRG\") == \"YES\"\nassert solution(\"WRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRRGWRRR"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == 'YES'\nassert solution('''3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'NO', \"13\"\nassert solution('4 5') == 'YES', \"14\"\nassert solution('7 5') == 'YES', \"15\"\nassert solution('4 3') == 'NO', \"16\""
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 5') == '1'\nassert solution('6 3 5') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"6 3 5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"6 3 5\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3 3 5\n    1\n    2\n    3\n    ''') == '1'\n    assert solution('''\n    6 3 5\n    1\n    2\n    3\n    3\n    2\n    1\n    Sample Output 3:\n    3\n    ''') == '3'"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 4 4') == '2'\nassert solution('5 5 5') == '2'"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 3 5') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 5\n1\n2\n3\n''') == '1', 'First'\nassert solution('''\n6 3 5\n1\n2\n3\n3\n2\n1\nSample Output 3:\n3\n''') == '3', 'Second'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2 3 4\") == \"1\"\nassert solution(\"2 2 3\") == \"2\"\nassert solution(\"1 1 2\") == \"3\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\nassert solution('3 1 2') == '2'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 2\n1 3\n3 3\n''') == '3 2'\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\nassert solution('''\n0\n1\n''') == '1 1'\nassert solution('''\n5\n1\n0\n3\n7\n9\n''') == '10 10'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 2\n1 3\n3 3\n''') == '3 2'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0 2\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"3 2\") == \"2 1\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\nSample Output 3:\n12 3\n\"\"\") == \"12 3\"\n\nassert solution(\"\"\"\n7\n0 2\n1 3\n3 3\n7 5\n9 5\nSample Output 4:\n12 3\n\"\"\") == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n1\n2\n2\n2\n3\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n2\n1 4\n1 3\n2 1\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2 1'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3 2'\nassert solution('5') == '12 3'\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0 2\n1 2\n3 3\n\"\"\") == \"3 2\"\nassert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 2\n1 2\n3 3\n''') == '3 2'\nassert solution('''\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n''') == '12 3'\nassert solution('''\n7\n0 1\n3 3\n8 9\n13 14\n16 17\n18 19\n''') == '21 7'\nassert solution('''\n15\n0 1\n7 7\n7 8\n7 9\n7 10\n7 11\n7 12\n7 13\n7 14\n7 15\n7 16\n7 17\n7 18\n7 19\n7 20\n7 21\n7 22\n7 23\n7 24\n7 25\n7 26\n7 27\n7 28\n7 29\n7 30\n7 31\n7 32\n7 33\n7 34\n7 35\n7 36\n7 37\n7 38\n7 39\n7 40\n''') == '41 7'"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1\n0\n0\n3\n''') == '100'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Input 3:\n6\n1\n1 1\n1\n1 1\n1\n1\nSample Output 3:\n0101\n''') == '001'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '100'\nassert solution('3') == '1001'\nassert solution('5') == '0010'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '100'\nassert solution('2') == '00'\nassert solution('4') == '0000'\nassert solution('5') == '10010'"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == \"100\"\nassert solution('2') == \"001\"\nassert solution('3') == \"00100\"\nassert solution('4') == \"01001\"\nassert solution('5') == \"010000\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n\nprint(f\"{solution(input_data)}\")\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"100100\"\nassert solution(\"2\\n1 0\\n0\\n3\\n\") == \"100100\"\nassert solution(\"3\\n0 1 1\\n1\\n1 1\\n1\\n1\\n\") == \"001101\""
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"100\"\nassert solution(\"3\") == \"0000\"\nassert solution(\"1\") == \"100\"\nassert solution(\"0\") == \"100\"\nassert solution(\"0 0\") == \"100\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1') == '100'\nassert solution('2\\n0\\n0') == '000'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1\n0\n2\n\"\"\") == \"10010\"\n\nassert solution(\"\"\"\n4\n0\n2\n0\n1\n\"\"\") == \"10101\"\n\nassert solution(\"\"\"\n5\n0\n2\n1\n1\n1\n\"\"\") == \"111100\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"6 1\") == \"4\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution(\"\"\"\n1 2\n2 3\n2 3\n\"\"\") == '2'\nassert solution(\"\"\"\n2 1\n1 3\n\"\"\") == '1'\nassert solution(\"\"\"\n2 5\n7 8\n4 6\n\"\"\") == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3\\n') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5\\n') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('4 1') == '3'\n\nimport timeit\nprint(timeit.timeit(solution, number=1))\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\""
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 3') == '2'\nassert solution('4 1\\n1 3\\n4 6\\n7 8\\n2 5') == '3'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 450') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 250\") == \"125.00000000\"\nassert solution(\"5 6 1000\") == \"124.00000000\"\nassert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 400\") == \"Impossible\""
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 450\") == \"126.86989765\"\nassert solution(\"5 6 500\")!= \"Impossible\"\nassert solution(\"5 6 500\")!= \"Imposible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500 -100 0') == '90.00000000'\nassert solution('5 6 500 -100 100') == '90.00000000'\nassert solution('5 6 500 0 200') == '90.00000000'\nassert solution('5 6 500 100 100') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '90.00000000'\nassert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '126.86989765'\nassert solution('''\n5 6 1000\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == 'Impossible'\nassert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '90.00000000'\nassert solution('''\n5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '90.00000000'\nassert solution('''\n5 6 900\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 1000') == '128.500001168'\nassert solution('4 7 500') == '0.0'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '90.00000000'\nassert solution('5 6 450\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == '126.86989765'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5''') == '90.00000000'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''37\n30014\n''') == '7'\nassert solution('''30014\n''') == '7'\nassert solution('''30014\n''') == '7'\nassert solution('''37\n''') == '7'\nassert solution('''37\n''') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == '7'\nassert solution(solution.__name__) == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''37''') == '4'\nassert solution('''30014''') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"7\""
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '7'\nassert solution() == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''37\n30014''') == '7'\nassert solution('''37\n37''') == '0'\nassert solution('''37\n37''') == '0'\nassert solution('''37\n37''') == '0'\nassert solution('''37\n37''') == '0'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"37\") == \"4\"\nassert solution(\"37\") == \"4\"\nassert solution(\"30014\") == \"7\"\nassert solution(\"30014\") == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n\"\"\"\n\nn, d, r = map(int, input().split())\n\na = []\n\nfor i in range(1, n+1):\n    a.append(i)\n\ntotal = n\n\nwhile total > 1:\n    n = len(a)\n    n_first = len(a[0:n:1])\n    if n_first > r:\n        total -= (n_first-r)\n    a = a[n_first:]\n\nprint(total/n)"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 1\n''') == '3.5'\nassert solution('''\n3 3 2\n''') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2') == '3.5'\nassert solution('2 2 2') == '5.0'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5 1\n''') == '3.5'\nassert solution('''3 3 2\n''') == '4.9'\nassert solution('''1 10 1\n''') == '10.00'\nassert solution('''15 15 1\n''') == '18.00'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 1''') == '3.5'\nassert solution('''3 3 2''') == '4.9'\nassert solution('''8 3 3''') == '5.9'\nprint('all tests passed')"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2 3 1\n5 4 2\n7 9 2\"\"\") == \"3.5\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1\\n') == '3.5\\n'\nassert solution('3 3 2\\n') == '4.9\\n'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 5 3\n\"\"\") == \"3.5\"\nassert solution(\"\"\"\n3 3 2\n\"\"\") == \"4.9\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\nassert solution('0 5 0 5') == '5'\nassert solution('0 0 0 5') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\nassert solution('''\n5 5 1 5\n''') == '3'\nassert solution('''\n15 10 1 12\n''') == '3'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 1 5') == '19'\nprint(solution())\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n\n'''"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 1 5') == \"19\"\nassert solution('12 12 1 12') == \"4\""
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n') == '4'\nassert solution('1 12\\n') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 10') == '1'\nassert solution('1 20') == '2'\nassert solution('1 30') == '2'\nassert solution('1 100') == '1'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 5''') == '4'\nassert solution('''1 12''') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\nassert solution('2 3') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 5\n    ''') == '4'\nassert solution('''1 10\n    ''') == '4'\nassert solution('''1 20\n    ''') == '4'\nassert solution('''1 30\n    ''') == '4'\nassert solution('''1 40\n    ''') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    1 5\n    ''') == '4'\n    assert solution('''\n    1 12\n    ''') == '4'"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n'''"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n\n'''"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n\n'''"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n\n'''"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('car') == 1\nassert solution('cocar') == 2\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '8'\nassert solution('5') == '0'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2') == '1'\nassert solution('4\\n1 2 4') == '2'\nassert solution('6\\n1 2 3 1 2') == '3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '4'\nassert solution('10\\n1 2 3 1 2') == '3'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n1000000 1 1 1 1\n''') == '0'\nassert solution('''\n6\n1000000 1 1 1 1 1\n''') == '8'\nassert solution('''\n4\n0 2 0 1\n''') == '8'\nassert solution('''\n5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n0 2 0 1\n''') == '8'\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n10000000 10000000 10000000 10000000') == '6'\nassert solution('6\\n100000010000001000000 10000000100000001') == '5'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1000000 1 1 1 1\n''') == '8'\n\nassert solution('''\n10\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1000000 1 1 1 1\n''') == '0'\nprint(solution('''\n5\n1000000 1 1 1 1\n'''))\nprint(solution('''\n4\n1000000 1 1 1 1\n'''))\nprint(solution('''\n10\n
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '0'\nprint('Solution:')\nprint(solution(*tuple(map(int, input().split()))))\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 2 0 1\n''') == '8'\nassert solution('''\n5\n1000000 1 1 1 1\n''') == '0'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 0') == 'b'\n\nassert solution('1 1') == 'zyz'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nassert solution('1 -2') == '-1'"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"ab\"\nassert solution(\"3\") == \"aba\"\nassert solution(\"4\") == \"aba\"\nassert solution(\"5\") == \"ba\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"zyz\"\nassert solution(\"2 1\") == \"zyz\"\nassert solution(\"2 3\") == \"zyz\"\nassert solution(\"3 3\") == \"zyz\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"zyz\"\nassert solution(input()) == -1\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n''') == '4'\nassert solution('''\n10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1\n''') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == \"4\"\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\\n') == \"8\"\nprint('Tests passed')"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '4'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4 1 1\\n0 2 0\\n2 1 1\\n6 1 1\") == \"8\"\nassert solution(\"3\\n10 4 4\\n3 1 1\\n1 1 1\\n2 2 2\\n3 3 3\") == \"1\"\nassert solution(\"100\\n10 1 1\\n3 1 1\\n4 1 1\\n1 1 1\\n1 1 1\\n5 5 5\\n8 4 4\\n5 5 5\") == \"14\"\nassert solution(\"5\\n0 1 1\\n3 1 1\\n4 1 1\\n3 1 1\\n1 1 1\\n2 2 2\\n3 3 3\\n5 5 5\") == \"1\"\nassert solution(\"0\\n1 2 1\\n1 1 1\\n2 3 0\\n4 2 1\\n3 2 1\\n2 2 1\\n3 3 0\\n4 2 1\\n5 5 5\") == \"1\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n1\\n1\\n') == '4'\nassert solution('4\\n1 1 1\\n0 2 0\\n2 1 1\\n1 1 1\\n1 1 1\\n') == '3'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n\") == \"4\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '4'\nassert solution('10\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '8'\nassert solution('20\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '8'\nassert solution('30\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '8'\nassert solution('40\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '4'\nassert solution('10') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1') == '8'\nassert solution('1\\n0 10 0\\n10 0 1') == '4'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4 3\\n3 4 5 7') == '0'\nassert solution('3 5 2\\n1 4 7 9 11') == '2'\nassert solution('3 4 7 3\\n1 2 10') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"2\"\nassert solution(\"2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"1\"\nassert solution(\"3\\n2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"0\"\nassert solution(\"4\\n2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"3\"\nassert solution(\"5\\n2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"1\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('10 1 100') == '2'\nassert solution('1000 2 10') == '-1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 3\") == \"0\"\nassert solution(\"3 5 2\") == \"2\"\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 4 5 7\n1 2 10\n1''') == '0'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\n3 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\n2 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 2\n2 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 3\n3 2\n\"\"\") == \"1\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\n3 4\n''') == '1'\nassert solution('''\n1 2\n3 4\n''') == '3'\nassert solution('''\n1 2\n3 4\n''') == '3'\nassert solution('''\n1 2\n3 4\n''') == '3'\nassert solution('''\n1 2\n3 4\n''') == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"1\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3\n3 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2 2\n2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == None, 'Test 1 Failed'\nassert solution('2 3') == '1'\nassert solution('1 2') == '0 -1'\nassert solution('3 2') == '0 -1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '3'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n3 2') == '1'\nassert solution('1 2\\n3 4') == '3'\nassert solution('1 2\\n1 1') == '2'\nassert solution('1 2\\n1 2') == '0'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"3\""
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n3 2\n''') == '1'\nassert solution('''\n1 2\n3 4\n''') == '3'\nassert solution('''\n2 1\n3 2\n''') == '2'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\nIVO\nJASNA\nJOSIPA\n''') == '4', 'First'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA\n''') == '24', 'Second'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\", \"Wrong solution\"\nassert solution(\"5\") == \"24\", \"Wrong solution\"\nprint(\"A) All tests passed\")\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\nIVO\nJASNA\nJOSIPA\n''') == '4'\nassert solution('''\n2\nMARIA\nMARTA\nMATO\nMARA\nMARTINA\n''') == '24'\nassert solution('''\n3\nIVO\nMARTA\nMARIA\n''') == '3'\nassert solution('''\n4\nMARIA\nMARTA\nMATO\nIVO\n''') == '6'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '24'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA') == '4', solution('5\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA')\nprint(f'\\033[92m{\"Solution\":=^40}\\033[0m')\nimport codewars_test as test\ntest.assert_equals(solution('1\\nIvan'), 1)\ntest.assert_equals(solution('2\\nIvan\\nPetrovich'), 2)\ntest.assert_equals(solution('3\\nMarija\\nIvan\\nPetrovich'), 4)\ntest.assert_equals(solution('4\\nMarija\\nPetrovich\\nIvan\\nMarija'), 5)\ntest."
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nIVO\\nJASNA\\nJOSIPA\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\", \"Wrong answer\"\nassert solution(\"3\") == \"1\", \"Wrong answer\"\nassert solution(\"5\") == \"24\", \"Wrong answer\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\nIVO\nJASNA\nJOSIPA''') == '4'\nassert solution('''5\nMARICA\nMARTA\nMATO\nMARA\nMARTINA''') == '24'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\nIVO\\nJOSIPA\") == \"4\"\nassert solution(\"2\\nMARIA\\nJASNA\\nMARA\\nMATO\") == \"24\"\nassert solution(\"3\\nMARC\\nJOS\\nJOSEP\\nJOSER\\nMAR\\nMAR\") == \"32\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '24'"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    3\n    2 2 3 1\n    3 1 5 6\n    1 9 4 7\n    '''\n) == '39'\nassert solution(\n    '''\n    10\n    3 3 3 3 3 3 3 1 1 1 2 2 2 1\n    1 2 2 1 1 2 1 1 2 1 2 1 1 1 1 1 1\n    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    1 2 2 1 1 2 1 1 2 1 2 1 1 1 1 1 1 1\n    1 2 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1\n    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n    '''\n) == '107'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 2 3\n2 3 4\n3 4 5\n''') == '3'\nassert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2 2 3 1\n3 3 4 1\n1 9 4 7''') == '39'\nassert solution('''3\n2 2 3 1\n3 1 5 6\n1 9 4 7''') == '39'\nassert solution('''3\n2 2 3 1\n3 1 5 6\n1 9 4 7''') == '3'\nassert solution('''3\n2 2 3 1\n3 1 5 6\n1 9 4 7''') == '0'\nassert solution('''3\n3 1 2 1\n2 3 4 1\n1 9 5 7''') == '37'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 1\") == \"3\"\nassert solution(\"2 2 3 8\") == \"39\""
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('2 2 3 1') == '3'\nassert solution('3 2 3 1') == '39'\nassert solution('3 2 3 1') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3'\nassert solution('1 2 3 1') == '3'\nassert solution('2 3 4 1') == '39'\nassert solution('3 4 5 1') == '39'\nassert solution('1 9 4 7') == '39'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n8 9 3 -14 -14 14 -14 0 20\\n\") == \"9.2696518641\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n8 4 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''1\n8 9 3 -14 -14 14 -14 0 20\n''') == '9'\nassert solution('1\\n2\\n1\\n5\\n10\\n10\\n5\\n10\\n10\\n5\\n') == '5'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '9.0'\nassert solution('2') == '8.0'\nassert solution('3') == '0.0'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n''') == '5.2696518641'\nassert solution('''\n1\n8 9 3 -14 -14 14 -14 0 20\n''') == '9'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\nassert solution('20') == '0'\nprint(solution(''))\nprint(solution('20'))\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9.0'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.000'\nassert solution('2') == '1.000'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'\n\n'''\n\nimport math\nimport random"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '5.2696518641'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\\n3\\n4\\n\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1\n2 0 2\n3 1 1\n''') == '1'\n\nassert solution('''\n4 1 1\n5 2 3\n5 0 3\n''') == '8'\n\nassert solution('''\n3\n4 1 1\n5 2 3\n5 0 3\n''') == '4'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n3\n5 1 1\n5 2 3\n5 0 3\n\"\"\") == \"24\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 2 3\n2 0 2\n3 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"-1\""
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 1 1\") == \"1\"\nassert solution(\"3\\n4 1 1\") == \"4\"\nassert solution(\"3\\n5 2 3\") == \"24\"\nprint(solution(\"3\\n1 1 1\"))\nprint(solution(\"3\\n4 1 1\"))\nprint(solution(\"3\\n5 2 3\"))\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n1 1 1\n2 0 2\n3 1 1\"\"\") == \"1\"\nassert solution(\"\"\"5\n4 1 1\n5 2 3\n5 0 3\nSample Input 3:\n4\n1 1 1\n2 0 2\n3 1 1\nSample Output 3:\n1\n4\n8\n24\"\"\") == \"8\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1 1\n2 0 2\n3 1 1\n''') == '8'\nassert solution('''\n4 1 1\n5 2 3\n5 0 3\n''') == '4'"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 1 1\n2 0 2\n3 1 1''') == '1'\nassert solution('''3\n4 1 1\n5 2 3\n5 0 3''') == '8'\nprint('All test cases passed...')"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"4\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"6\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"24\"\n\nassert solution(\"\"\"6\n4 2 0\n5 0 2\n5 1 0\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1\n2 0 2\n3 1 1\n''') == '1'\nassert solution('''\n4 1 1\n5 2 3\n5 0 3\n''') == '8'\nassert solution('''\n5 1 1\n6 2 3\n5 0 3\n''') == '24'\n\nassert solution('''\n5 1 1\n6 2 3\n5 0 3\n''') == '6'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 5') == '1'\nassert solution('3 3') == '6'\nassert solution('4 5') == '1'\nassert solution('5 4') == '1'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('1 2 3 4') == '240'\nprint('You are a smart engineer!')"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 2]) == '3'\nassert solution([6, 6]) == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '2'\nassert solution('4 6\\n1 2 3 4') == '240'\nassert solution('6 6\\n1 2 3 4 5 6') == '240'\nassert solution('30 30\\n2 3 4') == '18'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n3\n5\n2\n1\n4\n''') == '3'\nassert solution('''2 7\n1\n2\n3\n4\n5\n6\n''') == '240'\nassert solution('''4 4\n1\n2\n3\n4\n''') == '80'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\nassert solution('16 16') == '4294967296'\nassert solution('22 2') == '22'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 4\") == \"24\"\nassert solution(\"4 4\") == \"24\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n5 4\n2 4 1 3 2\n3 2 3 2 3\n''') == '240'\nassert solution('''6 6\n8 5 4 3 2 1\n3 2 3 2 3 2\n''') == '239'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nprint('PASSED')\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"impossible\"\nassert solution(\"A+A=A\") == \"9567+1085=10652\"\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(tuple(stdin.splitlines(keepends=False))) == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\nassert solution('''A+A=A''') == 'impossible'\nassert solution('''C+B=A''') == '2+1=3'\nassert solution('''C+B=A''') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652', 'Should be 9567+1085=10652'\nassert solution('A+A=A') == 'impossible', 'Should be impossible'"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution(\"0 1 2 3\") == '14'\nassert solution(\"1 1 2 1 1\") == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 3\") == \"14\"\nassert solution(\"0 1 2 3\") == \"1\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 1 2''') == '1'\nassert solution('''6\n1 1 1 1 1 2''') == '1'\nassert solution('''4\n0 1 2 3''') == '2'\nassert solution('''5\n1 1 1 1 1''') == '1'\nassert solution('''2\n1 1''') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '14'\nassert solution('5') == '1'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 2 3') == '14'\nassert solution('5\\n1 1 2 1 1') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '14'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '14'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n0\\n') == \"88\"\nassert solution('1\\n2\\n3\\n4\\n') == \"88\"\nassert solution('4\\n4\\n4\\n4\\n') == \"88\"\nassert solution('4\\n4\\n4\\n4\\n') == \"88\"\nassert solution('1\\n1\\n1\\n1\\n') == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 0\") == \"88\"\nassert solution(\"4 4\") == \"88\"\nassert solution(\"6 6\") == \"86\"\nassert solution(\"3 4\") == \"-1\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '-1'\nassert solution('''\n5 5\n2 5 8 0 0\n0 5 2 9 0\n0 0 0 3 4\n2 4 3 0 5\n''') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10\n''') == '88', 'First'\nassert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 0 7 8\n7 0 0 10\n''') == '-1', 'Second'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(open('input.txt')) == '-1'\nassert solution(open('sample_input_1.txt')) == '88'\nassert solution(open('sample_input_2.txt')) == '-1'\n\"\"\"\n\nn, m = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n    s = set()\n    for j in range(m):\n        if c[j] not in s:\n            if c[j] % 2 == 0:\n                s.add(c[j] + 1)\n            else:\n                s.add(c[j] - 1)\n    if len(s) < n:\n        ans += sum(s)\n\nprint(ans)\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4') == '88'\nassert solution('4\\n4\\n5\\n6') == '-1'"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"5 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"5 4\\n1 2 3 0\\n0 0 5 6\\n0 8 7 8\\n7 0 0 10\\n\") == \"0\"\nassert solution(\"5 4\\n1 2 3 0\\n0 0 5 6\\n0 8 7 8\\n7 0 0 10\\n\") == \"88\"\nassert solution(\"5 4\\n1 2 3 0\\n0 0 5 6\\n0 8 7 8\\n7 0 0 10\\n\") == \"0\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == '88'\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == -1\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == 1366\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == 1490\nassert solution('''3 3\n3 3\n3 3\n3 3\nSample Output 3:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 4:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 5:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 6:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 7:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 8:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 9:\n\n-----Input-----\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\nSample Output 10:\n\n-----Input-----\n3 3\n1 1 1 0\n0 0 0 0\n1 0 1 1\nSample Output 11:\n\n-----Input-----\n3 3\n1 2 1 0\n0 0 0 0\n1 0 1 1\nSample Output 12:\n\n-----Input-----\n3 3\n1 2 1 0\n0 0 0 0\n1 0 1 1\nSample Output 13:\n\n-----Input-----\n3 3\n1 2 1 0\n0 0 0 0\n1 0 1 1\nSample Output 14:\n\n''') == -1\nprint('All test cases passed.')"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == '88', 'First'\nassert solution('''4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10''') == '-1', 'Second'\n\n'''"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 3\n0 0 1 1 1 2 2 2 3 3 3\n0 0 2 2 3 3 3 3 3 3\n0 0 1 2 2 3 3 3 3 3\n0 0 1 1 1 2 2 2 2 3\n0 0 2 3 3 3 3 3 3 3\n0 0 2 2 3 3 3 3 3 3\n0 0 1 2 3 3 3 3 3 3\n0 0 1 2 3 3 3 3 3 3\n0 0 1 1 1 2 2 2 2 3\n0 0 1 1 2 3 3 3 3 3\n0 0 1 1 2 2 2 2 2 3\n0 0 1 1 2 2 2 2 2 3\n0 0 1 1 1 2 2 2 2 2\n0 0 1 2 1 2 2 2 2 2\n0 0 1 1 1 1 2 2 2 2\n0 0 1 1 2 2 2 2 2 2\n0 0 1 1 2 2 2 2 2 2\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 2 1 2 1 2 1 2\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1 1 1 1 1 1\n0 0 1 1 1"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n\nassert solution('''\n2\n99999 99999\n9999 99999\n''') == '9999700002.000'\n\nassert solution('''\n1\n0 0\n''') == '0.000'\n\nassert solution('''\n3\n2 3\n3 2\n2 1\n''') == '6.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0.000'\nassert solution('1') == '0.000'\nassert solution('1 99999') == '0.000'\nassert solution('99999 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.000\"\nassert solution(\"1 99999\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0.000\"\nassert solution(\"2\") == \"9999700002.000\"\nassert solution(\"2\") == \"0.000\""
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0.000'\nassert solution('2 1') == '1.000'\nassert solution('2 2') == '0.000'"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n''') == '0.000'\nassert solution('''\n3\n1 99999\n99999 99999\n1 99999\n''') == '9999700002.000'\nassert solution('''\n3\n1 99999\n99999 99999\n1 99999\n''') == '9999700002.000'\nassert solution('''\n3\n1 99999\n99999 99999\n1 99999\n''') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0.000'\nassert solution('10') == '3.000'\nassert solution('1') == '0.000'\nassert solution('0') == '1.000'\nassert solution('0 0') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n2 1\n1 1\n1 2\n\"\"\") == \"0.000\"\nassert solution(\"\"\"\n5\n0 1\n1 1\n1 1\n1 2\n1 2\n\"\"\") == \"1.000\"\nassert solution(\"\"\"\n4\n1 1\n1 1\n1 2\n1 3\n\"\"\") == \"1.000\"\n\"\"\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 1\\n1 1') == '0.000'\nassert solution('2\\n1 99999\\n99999 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1\\n1 1\") == \"0.000\"\nassert solution(\"3\\n1 3\\n1 1\\n1 3\") == \"1.000\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"4\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"Infinity\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\") == \"3\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\") == \"Impossible\"\nassert solution(\"3 4 1 2\\n1 2 6\\n1 3 2\\n2 3 3\\n2\") == \"Impossible\"\nassert solution(\"6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5\") == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"6 8 1 6\\n\"\n    \"1 2 5\\n\"\n    \"1 3 1\\n\"\n    \"2 6 6\\n\"\n    \"2 3 6\\n\"\n    \"4 2 3\\n\"\n    \"3 4 1\\n\"\n    \"4 5 1\\n\"\n    \"5 6 1\\n\"\n    \"5\") == \"3\"\nassert solution(\n    \"3 4 1 2\\n\"\n    \"1 2 6\\n\"\n    \"1 3 2\\n\"\n    \"1 2 7\\n\"\n    \"2 3 3\\n\"\n    \"2\") == \"Infinity\"\nassert solution(\n    \"6 4 1 2\\n\"\n    \"1 2 5\\n\"\n    \"1 3 1\\n\"\n    \"2 6 6\\n\"\n    \"2 3 6\\n\"\n    \"4 2 3\\n\"\n    \"3 4 1\\n\"\n    \"4 5 1\\n\"\n    \"5 6 1\\n\"\n    \"5\") == \"3\""
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Infinity'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\nassert solution(\"2 4 1 2\") == \"3\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1\n0\n1\n0\n1\n0\n1''') == '000'\n\nassert solution('''4 1\n0\n1\n1\n1\n0\n0''') == '101'\n\nassert solution('''4 2\n1\n1\n1\n1\n1\n1\n1''') == '111'\n\nassert solution('''4 3\n1\n1\n1\n1\n0\n1\n1''') == '111'\n\nassert solution('''4 4\n1\n1\n1\n1\n1\n1\n1\n1''') == '111'"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1') == 'impossible'\nassert solution('3 1') == '000'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 1\n1\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"impossible\"\nassert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\nassert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 1\n1\nSample Output 1:\nimpossible\n\nSample Output 2:\n000\n001\n011\n010\n110\n111\n101\n100\n''') == 'impossible'\nassert solution('''\n3 1\n1\nSample Output 1:\nimpossible\n\nSample Output 2:\n000\n001\n011\n010\n110\n111\n101\n100\n''') == 'impossible'\n\nstdin = \"\"\"\n5 1\n1\nSample Output 1:\n11111\n\nSample Output 2:\n11111\n\"\"\"\nassert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"impossible\"\nassert solution(\"6 1\") == \"000\"\nassert solution(\"4 1\") == \"111\"\nassert solution(\"10 1\") == \"10110\"\nassert solution(\"13 1\") == \"100111\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n6 1\n1\n''') == 'impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\nassert solution(\"4 1\") == \"001\"\nassert solution(\"5 1\") == \"010\"\nassert solution(\"6 1\") == \"111\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('6 1') == '000 001 010 011 100 101 110 111'"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"1\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n90\") == \"1\"\nassert solution(\"10\\n99\") == \"2\"\nassert solution(\"99\\n10\") == \"2\"\nassert solution(\"99\\n99\") == \"1\""
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '10'\nassert solution('90') == '1'\nassert solution('999') == '100'\n\nSample Input 1:\n909\n123\nSample Output 1:\n2\n\nSample Input 2:\n1210\n1\nSample Output 2:\n3\n\nSample Input 3:\n1000000000\n123\nSample Output 3:\n9999999999\n\nSample Input 4:\n999999999999999999\n999\nSample Output 4:\n999999999999999999\n'''\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '1'\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\nassert solution('''\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '2'\nassert solution('''\n5\n2 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '2'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\n\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 3\\n4 1 10\\n2 7 3') == '2'\nassert solution('4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\\n') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('6') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n5 6 9\\n3 1 3 3') == '2'\nassert solution('4\\n5 1 5 10\\n3 1 3 3') == '1'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('6') == '0'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '7'\nassert solution('9 3') == '11'\n\nimport sys\nfrom collections import deque, defaultdict\nfrom enum import Enum\nfrom itertools import permutations, product, combinations\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 9)\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9 3') == '5'\nassert solution('6 1') == '7'\n'''\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1\\nvelvet') == '7'\nassert solution('6 2\\nvelvet') == '9'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5\\n4 8\\n1 9\\n') == '5'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 6\\nvelvet') == '7'\n\nassert solution('6 1\\nvelvet') == '7'\n\nassert solution('9 3\\nbeginning') == '11'\n\nassert solution('9 3\\nbeginning') == '11'\n\nassert solution('10 2\\ntwo') == '10'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1') == '7'\nassert solution('8 1') == '16'\nassert solution('2 3') == '1'\nassert solution('6 9') == '11'\nassert solution('10 20') == '49'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nbeginning\n1 5\n4 8\n1 9\n''') == '11'\n\nassert solution('''\n4 1\nvelvet\n1 6\nSample Output 2:\n7\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nbeginning\n1 5\n4 8\n1 9\n''') == '7'\n\nassert solution('''\n6 1\nvelvet\n1 6\n''') == '7'\n\nassert solution('''\n9 3\nbeginning\n1 5\n4 8\n1 9\n''') == '11'\n\nassert solution('''\n6 1\nvelvet\n1 6\n''') == '11'\n\nassert solution('''\n7 5\nhello\n5 7\n2 4\n1 9\n''') == '16'"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1') == '7'\n\nSample Input 3:\n6 1\natty\n1 7\nSample Output 3:\n6\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '7'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '23'\nprint(solution())\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\nassert solution('1 23') == '23'\nassert solution('2 17') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 1\n2 2\n1 1\n1 2\n1 3''') == '23'\nassert solution('''5 1\n1 2\n1 3\n1 4\n1 5''') == '3'\n\n\"\"\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5\n5 2\n2 2\n2 1\n2 4\n''') == '23'\n\nassert solution('''\n100 100\n5 5\n4 2\n3 6\n2 2\n1 1\nSample Output 3:\n110\n''') == '110'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n2') == '23'\nassert solution('2\\n2\\n1') == '23'\nassert solution('3\\n3\\n1') == '23'\nassert solution('1\\n1\\n1') == '1'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"23\"\nassert solution(\"1 2\") == \"2\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n1 2\\n1 3') == '2'\nassert solution('1\\n3\\n1 2\\n1 3') == '1'\nassert solution('2\\n3\\n1 2\\n1 3') == '3'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 23\\n2 17') == '23'\nassert solution('3 2\\n1 1\\n2 2') == '2'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 23\\n2 17') == '23'\nassert solution('5 3\\n1 2\\n2 1\\n3 2\\n4 4') == '4'\nassert solution('1000000 50000\\n1 2\\n2 4\\n3 5\\n4 2\\n5 1') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\nassert solution('1 1') == '2'\nassert solution('2 2') == '2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\n\nassert solution('''\n10\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.476048311178'\n\nassert solution('''\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n''') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"0.0000000000\"\nassert solution(\"6\") == \"9.4760483111789\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0.0000000000'\nassert solution('3') == '0.111111111'\nassert solution('100') == '0.0000000000'\nassert solution('25') == '0.977777778'\nassert solution('3000000000') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.0000000000'\nassert solution('2') == '9.476048311178'\nassert solution('3') == '8.672066316282'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0'\nassert solution('6') == '9.476048311178'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n0 0\n2 0\n2 2\n\"\"\") == \"0.0000000000\"\nassert solution(\"\"\"\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n\"\"\") == \"9.476048311178\"\nassert solution(\"\"\"\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n\"\"\") == \"9.476048311178\"\nassert solution(\"\"\"\n11\n0 1\n1 -3\n1 4\n1 1\n-5 -3\n-4 4\n0 5\n0 7\n0 0\n0 0\n1 3\n0 0\n0 0\n\"\"\") == \"39.66495894\"\n\nimport math"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0''') == '0.0000000000'\nassert solution('''4\n0 0\n2 0\n2 2\n0 2''') == '1.0000000000'\n\nassert solution('''1\n0 0\n3 5\n0 4\n2 2\n7 0''') == '1.0000000000'\nassert solution('''12\n0 0\n1 1\n0 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n0 8\n9 9\n10 10\n11 11\n12 12\n0 13\n14 14\n15 15\n16 16\n0 17\n18 18\n19 19\n20 20\n21 21\n0 22\n23 23\n24 24\n25 25\n0 26\n27 27\n28 28\n29 29\n0 30\n31 31\n32 32\n33 33\n0 34\n35 35\n36 36\n37 37\n0 38\n39 39\n40 40\n41 41\n0 42\n43 43\n44 44\n45 45\n0 46\n47 47\n48 48\n49 49\n0 50\n51 51\n52 52\n53 53\n0 54\n55 55\n56 56\n57 57\n0 58\n59 59\n60 60\n61 61\n0 62\n63 63\n64 64\n65 65\n0 66\n67 67\n68 68\n69 69\n0 70\n71 71\n72 72\n73 73\n0 74\n75 75\n76 76\n77 77\n0 78\n79 79\n80 80\n81 81\n0 82\n83 83\n84 84\n85 85\n0 86\n87 87\n88 88\n89 89\n0 90\n91 91\n92 92\n93 93\n0 94\n95 95\n96 96\n97 97\n0 98\n99 99\n100 100\n101 101\n102 102\n103 103\n0 104\n105 105\n106 106\n107 107\n0 108\n109 109\n110 110\n111 111\n0 112\n113 113\n114 114\n115 115\n0 116\n117 117\n118 118\n119 119\n0 120\n121 121\n122 122\n123 123\n0 124\n125 125\n126 126\n127 127\n0 128\n129 129\n130 130\n131 131\n0 132\n133 133\n134 134\n135 135\n0 136\n137 137\n138 138\n139 139\n0 140\n141 141\n142 142\n143 143\n0 144\n145 145\n146 146\n147 147\n0 148\n149 149\n150 150\n151 151\n0 152\n153 153\n154 154\n155 155\n0 156\n157 157\n158 158\n159 159\n0 160\n161 161\n162 162\n163 163\n0 164\n165 165\n166 166\n167 167\n0 168\n169 169\n170 170\n171 171\n0 172\n173 173\n174 174\n175 175\n0 176\n177 177\n178 178\n179 179\n0 180\n181 181\n182 182\n183 183\n0 184\n185 185\n186 186\n187 187\n0 188\n189 189\n190 190\n191 191\n0 192\n193 193\n194 194\n195 195\n0 196\n197 197\n198 198\n199 199\n0 200\n201 201\n202 202\n203 203\n0 204\n205 205\n206 206\n207 207\n0 208\n209 209\n210 210\n211 211\n0 212\n213 213\n214 214\n215 215\n0 216\n217 217\n218 218\n219 219\n0 220\n221 221\n222 222\n223 223\n0 224\n225 225\n226 226\n227 227\n0 228\n229 229\n230 230\n231 231\n0 232\n233 233\n234 234\n235 235\n0 236\n237 237\n238 238\n239 239\n0 240\n241 241\n242 242\n243 243\n0 244\n245 245\n246 246\n247 247\n0 248\n249 249\n250 250\n251 251\n0 252\n253 253\n254 254\n255 255\n0 256\n257 257\n258 258\n259 259\n0 260\n261 261\n262 262\n263 263\n0 264\n265 265\n266 266\n267 267\n0 268\n269 269\n270 270\n271 271\n0 272\n273 273\n274 274\n275 275\n0 276\n277 277\n278 278\n279 279\n0 280\n281 281\n282 282\n283 283\n0 284\n285 285\n286 286\n287 287\n0 288\n289 289\n290 290\n291 291\n0 292\n293 293\n294 294\n295 295\n0 296\n297 297\n298 298\n299 299\n0 300\n301 301\n302 302\n303 303\n0 304\n305 305\n306 306\n307 307\n0 308\n309 309\n310 310\n311 311\n0 312\n313 313\n314 314\n315 315\n0 316\n317 317\n318 318\n319 319\n0 320\n321 321\n322 322\n323 323\n0 324\n325 325\n326 326\n327 327\n0 328\n329 329\n330 330\n331 331\n0 332\n333 333\n334 334\n335 335\n0 336\n337 337\n338 338\n339 339\n0 340\n341 341\n342 342\n343 343\n0 344\n345 345\n346 346\n347 347\n0 348\n349 349\n350 350\n351 351\n0 352\n353 353\n354 354\n355 355\n0 356\n357 357\n358 358\n359 359\n0 360\n361 361\n362 362\n363 363\n0 364\n365 365\n366 366\n367 367\n0 368\n369 369\n370 370\n371 371\n0 372\n373 373\n374 374\n375 375\n0 376\n377 377\n378 378\n379 379\n0 380\n381 380\n382 381\n383 383\n0 384\n385 385\n386 386\n387 387\n0 388\n389 389\n390 390\n391 391\n0 392\n393 393\n394 395\n395 396\n0 397\n397 397\n398 398\n399 399\n0 400\n401 400\n402 402\n403 403\n0 404\n405 405\n406 406\n407 407\n0 408\n409 409\n410 410\n411 411\n0 412\n412 413\n414 414\n415 415\n0 416\n417 417\n418 418\n419 419\n0 420\n421 421\n422 422\n423 423\n0 424\n425 425\n426 426\n427 427\n0 428\n429 429\n430 430\n431 431\n0 432\n433 433\n434 434\n435 435\n0 436\n437 437\n438 438\n439 439\n0 440\n441 440\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"0.0000000000\"\nassert solution(\"6\") == \"9.476048311178\""
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0.0000000000'\nassert solution('6') == '9.476048311178'\nassert solution('10') == '9.849550039062'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0000000000\""
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n2 0\n1 1\n0 2\n-2 0\n0 -2\n''') == '8.0000000000'\nassert solution('''\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'\nassert solution('5\\n0 0\\n1 0\\n0 1\\n-2 0\\n0 -2\\n') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5 2 0') == '7.0000000000'\nassert solution('5 1 1') == '10.0000000000'\nassert solution('5 -2 0') == '10.0000000000'\nassert solution('5 0 -2') == '10.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 0\n1 1\n0 2\n-2 0\n0 -2\n''') == '8.0000000000'\nassert solution('''\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\n''') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'\nassert solution('5\\n0.2 0.00\\n0 0.2\\n0 0.0\\n0 0.2\\n0 -0.2\\n') == '0.0200000000'\nassert solution('5\\n-2 0\\n1 1\\n0 2\\n0 -2\\n0 0\\n') == '5.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\") == \"8.0000000000\"\nassert solution(\"5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\") == \"0.0200000000\"\nprint('All test cases passed.')\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '8.0000000000'\nprint(solution('''5\n2 0\n1 1\n0 2\n-2 0\n0 -2'''))\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3 1\n3 3 3 3 3\n''') == '2'\nassert solution('''\n8 4 3\n6 6 6 6 6 5 6 6 5 6\n''') == '3'\nassert solution('''\n10 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 1 1 1\\n') == '2'\nassert solution('10 4 2\\n1 1 1 1 1 2 2 2 2 2\\n') == '4'\nassert solution('4 2\\n1 1 1 1\\n') == '3'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"2\""
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\nassert solution('''\n4 5 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''\n9 7 3\n1 1 1 1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9 4 3') == '2'\nassert solution('10 2 2') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(samples[0]) == '2'\nassert solution(samples[1]) == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2''') == '2'\nassert solution('''50 50 50\n
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 2\") == \"3.666666667\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\") == \"3.666666667\"\nassert solution(\"4 11 4\") == \"20.000000000\""
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nassert solution('''\n3 7 7\n3 2 1 2 1 2\n''') == '14.957354982'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 2 3\n\"\"\") == \"3.666666667\"\nassert solution(\"\"\"\n4 11 4\n10 10 10 10\n\"\"\") == \"20.000000000\"\nassert solution(\"\"\"\n3 3 2\n1 2 3\n\"\"\") == \"3.666666667\"\nassert solution(\"\"\"\n4 11 4\n10 10 10 10\n\"\"\") == \"20.000000000\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10\n''') == '20.000000000'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '3.3333333333'\nassert solution('4 11 4') == '20.000000000'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 100000000000000\n''') == '16317634'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\""
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"16317634\"\nassert solution(\"8\") == \"8\"\nassert solution(\"12\") == \"12\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 42\") == \"2\"\nassert solution(\"5 123456789\") == \"16317634\"\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'\nprint(solution(stdin))"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\"\"\") == \"0\"\nassert solution(\"\"\"3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\"\"\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 0 0 2\") == \"0\"\nassert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"0 1 1 1 8\") == \"4\"\nassert solution(\"0 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\"\nassert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n\"\"\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\n\"\"\"\nimport sys\nimport math\nimport itertools"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\nassert solution(\"3 1 0 0 2\\n1 2 2\") == '0'\nassert solution(\"3 1 1 1 8\\n0 1 1\\n1 0 1\\n2 1 1\\n1 2 1\\n1 2 2\\n2 2 3\\n0 2 5\\n1 2 6\") == '4'\nassert solution(\"1\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3\\n2\\n4\\n3"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n\nn, e, sx, sy, c = map(int, stdin.readline().split())\ncans = list(map(int, stdin.readline().split()))\n\ncan_map = {}\nfor x, y in cans:\n    if (x, y) not in can_map:\n        can_map[(x, y)] = []\n    can_map[(x, y)].append((e, 0))"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n0\n''') == '0'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n5\n''') == '5'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n5\n''') == '5'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\nassert solution('5 1 10 10\\n8 8\\nt5 1\\n4 6\\n4 7\\n7 9\\n') == '3'\nassert solution('5 1 10 10\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n') == '3'"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\nassert solution_fast() == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5 1 100 100\n8 8\n5 1\n4 6\n4 7\n7 9\n\"\"\") == \"3\"\nassert solution(\"\"\"5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n\"\"\") == \"3\"\nassert solution(\"\"\"1 1\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"3 1\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"5 1\n8 8\n5 1\n4 6\n4 7\n7 9\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 10 10\\n8 8\\n5 1') == '3'\nassert solution('5 1 100 100\\n27 75\\n79 77\\n40 93\\n62 41\\n52 45\\n') == '3'\nprint('PASSED')"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\"\nassert solution
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nprint(solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n'''))\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''ABC\nABC\nABC''') == \"2\"\nassert solution('''ABBBAAAA\nBBBCCCBB\nCCCCAAAC''') == \"3\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '4'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '3'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"2\"\nassert solution(\"ABBBAAAA\") == \"3\"\nassert solution(\"BBBCCCBB\") == \"3\"\nassert solution(\"CCCCAAAC\") == \"4\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"2\"\nassert solution(\"ABBBAAAA\") == \"3\"\nassert solution(\"BBBCCCBB\") == \"3\"\nassert solution(\"CCCCAAAC\") == \"3\""
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 4\n\ninput()"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == -1\nassert solution('BBBCCCBB') == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 2\nassert solution(\"CCCCAAAC\") == 3\nassert solution(\"A\") == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"2\"\nassert solution(\"ABC\") == \"2\"\nassert solution(\"ABBBAAAA\") == \"3\"\nassert solution(\"BBBCCCBB\") == \"3\"\nassert solution(\"CCCCAAAC\") == \"3\""
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '3'"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\nA\\nA\\nB\") == \"3\"\nassert solution(\"5\\nA\\nA\\nB\\nAA\\nBBB\") == \"3\"\nassert solution(\"5\\nA\\nAA\\nBBB\\nAA\\nAAA\") == \"2\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '5\\n'\n    'A\\n'\n    'AA\\n'\n    'BBB\\n'\n    'AAA\\n'\n    ) == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '3'\n\nassert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '3'\n\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == '2'\n\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == '2'\n\nassert solution('''5\nA\nAAB\nBBB\nABABA\nAAAAAB\n''') == '4'"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\n'''\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"5\\nA\\nB\\nAA\\nBBB\\nAAA\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\n\"\"\"\n\n\"\"\"\nTEST CASES:\n1. If the string is empty, then the answer is 0.\n2. If the string is of length 1, then the answer is 1.\n3. If the string is 2, then the answer is 2.\n4. If the string is of length 3, then the answer is 1.\n5. If the string is of length 4, then the answer is 2.\n6. If the string is of length 5, then the answer is 3.\n7. If the string is of length 6, then the answer is 3.\n8. If the string is of length 7, then the answer is 3.\n9. If the string is of length 8, then the answer is 3.\n10. If the string is of length 9, then the answer is 3.\n11. If the string is of length 10, then the answer is 3.\n12. If the string is of length 11, then the answer is 4.\n13. If the string is of length 12, then the answer is 4.\n14. If the string is of length 13, then the answer is 4.\n15. If the string is of length 14, then the answer is 4.\n16. If the string is of length 15, then the answer is 4.\n17. If the string is of length 16, then the answer is 5.\n18. If the string is of length 17, then the answer is 5.\n19. If the string is of length 18, then the answer is 5.\n20. If the string is of length 19, then the answer is 5.\n21. If the string is of length 20, then the answer is 5.\n\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nA\\nB\") == \"3\"\nassert solution(\"4\\nA\\nBAA\\nABABA\") == \"3\"\n\"\"\""
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\nA\nB\nAA\nBBB\nAAA\n''') == '3'\nassert solution('''5\nA\nABA\nBBB\nABABA\nAAAAAB\n''') == '3'\n\n'''"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nA\\nAA\\nB\\nAAAB') == '3'\nassert solution('5\\nA\\nABA\\nBBB\\nABABA') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA') == '3'\nassert solution('5\\nA\\nB\\nAA\\nBBBB') == '4'\nassert solution('5\\nA\\nABA\\nBBBB\\nBBBA') == '2'\nassert solution('5\\nA\\nAAABBBA\\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 10 2 1') == '0.10000000000000004'\nassert solution('100 10 2 2') == '0.1909090909090909'\nprint(solution(input()))\n'''"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '0.25'\nassert solution('2 3 4 1') == '0.33333333333'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4') == '0.25'"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.1'\nassert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"100 10 2 1\") == \"0.1\", \"Should be 0.1\"\nassert solution(\"100 10 2 2\") == \"0.1909090909\", \"Should be 0.1909090909\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0.1'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 2 1') == '0.10000000000000004'\nassert solution('20 10 1 1') == '0.9999999999999999'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7'''\n) == '5'\nassert solution(\n'''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n0 0'''\n) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"AAABBAABBcABAABbaABaaABabaaaaAABaaABaaab\") == \"3\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAB\") == \"0\"\nprint('\u2705')\nprint('')"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"5\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '4'\nassert solution('''ABABABcABABAbAbab\n1\n2 2\n1 6\n0 7\n''') == '0'\nassert solution('''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '5'\nassert solution('''ABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\n''') == '5'"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(ABABABcABABAbAbab) == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABABABAbABABAbAbab') == '5'\nassert solution('ABABABABABABAbAbaABABABAb
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8\n1\n2\n3\n5\n6\n8\n10\n11\n13\n15\n17\n18\n20\n\n\"\"\") == \"4\"\nassert solution(\"\"\"\n9\n5\n4\n7\n9\n4\n3\n6\n10\n14\n10\n11\n12\n11\n9\n5\n1\n3\n4\n5\n6\n7\n8\n5\n4\n4\n1\n\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n0\n0\n1\n1\n    \"\"\") == \"2\", f\"actual: {solution(stdin)}\"\n\nassert solution(\n    \"\"\"\n0\n0\n1\n2\n    \"\"\") == \"1\", f\"actual: {solution(stdin)}\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2', f'actual: {solution(\"1\\n2\\n3\\n4\")}'\nassert solution('5\\n2\\n4\\n1\\n4') == '3', f'actual: {solution(\"5\\n2\\n4\\n1\\n4\")}'\nassert solution('12\\n8\\n4\\n0\\n16\\n2\\n32\\n1\\n16\\n64\\n1\\n2\\n32\\n2\\n64') == '8', f'actual: {solution(\"12\\n8\\n4\\n0\\n16\\n2\\n32\\n1\\n16\\n64\\n1\\n2\\n32\\n2\\n64\")}'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"3 3\\n0\\n1\\n1\") == \"1\"\nassert solution(\"4 5\\n0\\n0\\n0\\n0\\n1\") == \"4\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '2'\nassert solution('2 3') == '2'\nassert solution('4 4') == '1'\nassert solution('2 2') == '1'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0\\n1') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n0\\n1') == '2'\nassert solution('5\\n2\\n3\\n4\\n1') == '3'\n\n\"\"\""
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 3 4\") == \"2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('2 2 2 2') == '2'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8 8 8') == '1\\nP0: 22 1 4 2 6 -1 0\\n'\nassert solution('6 4 3 3 1 3 1') == '0\\nP0: 6 4 3 3 1 3 1\\n'\nassert solution('3 8 9 4') == '2\\nP0: 3 8 9 4\\n'\nassert solution('3 5 1 2') == '2\\nP0: 3 5 1 2\\n'\nassert solution('6 7 9 1') == '1\\nP0: 6 7 9 1\\n'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('12 4 1 4 5 3 -2') == '0'\nassert solution('10 1 2 1 8 -6 1') == '0'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n3 5 4 3\n10 20 40 20\n12 13 -1 15\n16 18 -1 18\n13 16 -1 19\n''') == '0'\nassert solution('''\n2 3 3 3\n1 2 2 3\n''') == '0'\nassert solution('''\n4 3 5 3\n1 3 2 2\n1 1 -2 1\n1 -1 1 -2\n''') == '4'\nassert solution('''\n5 5 5 5\n1 5 1 5\n1 1 5 5\n1 5 -1 1\n1 1 5 -1\n1 5 1 1\n1 -1 5 -1\n1 -1 -1 1\n1 5 1 5\n''') == '8'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 8 8 8\\n12 4 1 4 5 3 -2\\n10 1 2 1 8 -6 1\\n') == '1'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('12 4 1 4 5 3 -2') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\nprint(solution(input))"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '1'\nassert solution('5 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '1'\nassert solution('2 4 3 1 1 2 1 2 3 2') == '1'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"5 2\") == \"3\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 7') == '1\\n2\\n3\\n5\\n'\nassert solution('10 5') == '1\\n2\\n3\\n4\\n5\\n'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 1\n1 2 3\n1 3 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 2\n1 2\n1 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 2\n1 2\n1 3\n1 4\n2 4\n2 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 2\n1 2\n1 3\n1 4\n2 4\n2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1'\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1'\n'''"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\"\nassert solution(\"6 5\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\"\nassert solution(\"6 5\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n\") == \"1\\n2\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"6 5\") == \"2\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\\n2 3\\n\") == \"1\\n2\\n3\\n\""
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7') == '2'\nassert solution('5 7') == '3'\nassert solution('10 20') == '2'\nassert solution('100 100') == '1'\nassert solution('100 50') == '2'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n3\n3\n\"\"\") == \"\"\"1\n2\n3\n3\n\"\"\".strip()\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3''') == '3'\nassert solution('''4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3''') == '2'\nassert solution('''4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3''') == '4'\nassert solution('''4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3''') == '1'"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '8'\nassert solution('13') == '8'\nassert solution('1') == '0'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2 5 4 6') == '2'\nassert solution('1 2 3 5 4 6') == '1'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"6\\n\"\n    \"1 5 4 3 2 6\\n\"\n    \"1 2 5 4 3 6\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"\"\"2\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '2'\nassert solution('1 1 2 2 3 3 4 4') == '3'\n'''\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6\\n1 5 4 3 2 6\\n1 2 5 4 3 6\\n\") == \"2\"\nassert solution(\n    \"5\\n1 2 5 4 3 6\\n1 2 5 4 3 6\\n\") == \"1\"\nassert solution(\n    \"3\\n1 2 5 4 3 6\\n1 2 5 4 3 6\\n\") == \"0\"\nassert solution(\n    \"1\\n2\\n1\\n2\\n3\\n1\\n2\\n3\\n\") == \"0\"\nassert solution(\n    \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"0\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 5 4 3 2 6\n1 2 5 4 3 6\n''') == '2\\n'\nassert solution('''\n3\n1 2 3\n2 3 1\n''') == '3\\n'\nassert solution('''\n5\n1 2 3 4 5\n2 3 1 4 5\n3 1 2 4 5\n4 1 3 2 5\n5 1 4 3 2\n''') == '2\\n'\nassert solution('''\n7\n1 2 3 4 5 6 7\n2 3 1 4 5 6 7\n3 1 2 4 5 6 7\n4 1 3 2 5 6 7\n5 1 4 3 2 6 7\n6 1 5 4 3 2 7\n7 1 6 5 4 3 2\n''') == '4\\n'\n'''\n\nstdin = input()\nn = int(stdin)\n\nl = list(range(1, n + 1))\nstart = list(map(str, l[:n // 2]))\nresult = list(map(str, l[n // 2:]))\n\nprint(len(start))\nfor r in result:\n    for i in start:\n        if int(i) > int(r):\n            start.remove(i)\n            break\n    else:\n        start.append(r)\n\nprint('\\n'.join(start))\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '60'"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('1 3 2') == '-1'"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == '-1'\nassert solution('1 3 2') == '30'\nassert solution('3 3 2') == '60'\nassert solution('3 3 3') == '-1'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '60'\nassert solution('3 3 2') == '-1'\nassert solution('5 5 2') == '20'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 3, 2]) == '-1'\nassert solution([5, 2, 1]) == '-1'\nassert solution([1, 2, 1]) == '-1'\nassert solution([1, 1, 1]) == '1'\nassert solution([6, 5, 2]) == '15'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\") == \"60\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\") == \"60\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Case #1: 1'\nassert solution('2') == 'Case #2: 2'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2'"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\\n\"\nassert solution(\"3\") == \"Case #1: 1\\nCase #2: 2\\nCase #3: 3\\n\"\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000\") == \"Case #1: 1\\nCase #2: 2\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n10000 0 0\n0 10000 0\n0 0 10000''') == \"Case #1: 1\\nCase #2: 2\\nCase #3: 3\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == \"Case #1: 1\\nCase #2: 2\"\nassert solution('''\n1\n5\n0 0 0\n0 1 0\n0 0 0\n''') == \"Case #1: 5\\nCase #2: 0\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 3'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Case #1: 1\\nCase #2: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 C 1 O 2') == '6 6 6 1'\nassert solution('-1 1 O 2') == '2 2 2 1'\nassert solution('-1 3 C 6 H 12 O 6') == '4 4 4 4 4'\nassert solution('0 0') == '0 0'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\"\nassert solution(\"+1 2 C 1 O 2\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\") == \"1 1 1 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"1 1 1 1\"\nassert solution(\"0 0\") == \"0 0\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_sample_01) == '6 6 6 1'\nassert solution(input_sample_02) == '6 6 6 1'\nassert solution(input_sample_03) == '6 6 6 1'\nassert solution(input_sample_04) == '6 6 6 1'\nassert solution(input_sample_05) == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\") == \"2 1 2 2\"\nassert solution(\"+1 2 C 1 O 2\") == \"6 6 6 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"6 6 6 1\""
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\nassert solution('''\n+1 6 O 2\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n\nassert solution('''\n+1 6 O 2\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n\nassert solution('''\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n\n'''\n<5.3.3>\nWrite a function, which takes a string of chemical formula (i.e., of the form C4H6O4) and returns the corresponding volume.\n\n'''"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\nassert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n') == '6 6 6 1\\n'"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 C 1 O 2') == '6 6 6 1'\nassert solution('-1 1 O 2') == '1 1 1 1'\nassert solution('-1 3 C 6 H 12 O 6') == '1 1 1 1 1 1 1 1'\nassert solution('0 0') == '1 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 C 1 O 2') == '6 6 6 1'\nassert solution('-1 1 O 2') == '6 6 6 1'\nassert solution('-1 3 C 6 H 12 O 6') == '6 6 6 1'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n\"\"\"\n) == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"5.00\"\nassert solution(\"100\") == \"100.00\"\nassert solution(\"5\") == \"10.00\"\nassert solution(\"10\") == \"10.00\"\nassert solution(\"15\") == \"10.00\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40') == '20.83'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 20 30 40 50\") == \"40.00\"\nassert solution(\"7\\n5 20 0 0 50 0 0\") == \"50.00\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n2 1\n1 2\n1 3\n2 3\n2 1''') == \"1.5\"\n\nassert solution('''10\n5 0\n10 5\n20 -4\n20 4\n3 -3\n3 3\n-2 3\n-4 4\n0 4\n0 -4\n-5 -4\n-10 4\n-5 0\n5 5\n-2 2\n5 -1\n-5 -4\n-5 0\n5 4\n-5 -4\n0 0\n1 4\n2 4\n2 0\n1 -1\n1 -1\n1 -2\n0 4\n-2 -2\n-1 0\n2 1\n1 2\n1 3\n2 2\n2 1\n2 0\n2 -1\n2 -2\n0 -1\n-1 0\n1 -2\n2 0\n0 2\n1 3\n1 4\n2 3\n2 1\n1 1\n2 0\n3 2\n1 3\n2 2\n1 2\n0 0\n0 2\n1 3\n1 4\n2 3\n2 1\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n0 2\n1 3\n1 4\n2 3\n2 1\n1 1\n2 0\n0 2\n1 3\n1 4\n2 3\n2 1\n1 1\n2 0\n3 2\n1 3\n2 2\n1 2\n0 0\n0 2\n1 3\n1 4\n2 3\n2 1\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n2 0\n2 -1\n2 -2\n1 0\n0 2\n2 3\n1 3\n2 2\n1 2\n1 1\n1 0\n2 0\n0 2\n2 3\n1 3\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n2\n3\n2\n3\n1\n2''') == '2.25'\nassert solution('''3\n2\n3\n2''') == '1.5'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n30 50\n20 0\n100 0\n100 40\n20 40''') == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n30 50\n20 0\n100 0\n100 40\n20 40\n''') == '20.83', 'TEST CASE ERROR'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == '20.83'\nassert solution('''8\n1\n1\n1\n1\n1\n1\n1\n1''') == '3.33'\nprint('All tests passed')\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"49\"\nassert solution(\"\"\"\n2 2\n1 2\n1 2\n\"\"\") == \"49\"\nassert solution(\"\"\"\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\nassert solution('''\n2 2\n5 5\n''') == '10'\nassert solution('''\n5 5\n1 1 2 2 5\n2 3 3 4 4\n5 5 6 6 5\n''') == '15'\nassert solution('''\n3 3\n1 2 5\n7 6 4\n9 8 3\n''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '49'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n1\\n1\\n\") == \"1\"\nassert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\\n\") == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('4 4\\n7 8 3 2\\n9 5 1\\n2 1 9') == '10'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('10 0\\n9 8 3\\n6 5 4\\n4 7 2\\n2 8 1\\n5 7 3\\n7 4 6\\n8 3 5\\n6 4 7\\n1 4 5\\n3 6 2\\n5 7 1\\n9 8 0') == '41'\nassert solution('1 1\\n1 2\\n1 3') == '1'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('1\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('2\\n3 2 5\\n7 6 4\\n9 8 3') == '0'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '49'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    3 3\n    1 2 5\n    7 6 4\n    9 8 3\n\"\"\") == '49', \"First\"\n\nassert solution(\"\"\"\n    4 4\n    1 2 3 4\n    5 2 1 3\n    3 4 1 2\n    2 3 4 1\n\"\"\") == '61', \"Second\"\n\nassert solution(\"\"\"\n    7 7\n    1 2 3 4 5 6 7\n    8 9 10 11 12 13 14 15\n    16 17 18 19 20 21 22 23\n    24 25 26 27 28 29 30 31\n    32 33 34 35 36 37 38 39\n    40 41 42 43 44 45 46 47\n\"\"\") == '7', \"Third\"\n\nassert solution(\"\"\"\n    3 3\n    1 2 3\n    4 5 6\n    7 8 9\n\"\"\") == '1', \"Forth\"\n\nassert solution(\"\"\"\n    5 3\n    1 2 3 4 5\n    6 7 8 9 10\n    11 12 13 14 15\n    16 17 18 19 20\n    21 22 23 24 25\n\"\"\") == '1', \"Fifth\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\nassert solution('3 3\\n7 2 5\\n3 6 4\\n1 7 8\\n1 6 1\\n3 1 1\\n1 3 4\\n7 4 5\\n1 8 7\\n1 2 2') == '17'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 15\n##.........####\n1\nCROSSWORD\n''') == '##CROSSWORD####'\nassert solution('''\n2 10\n..............\n1\nCROSSWORD\n''') == '..............#CROSSWORD#'\n''')\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 15\") == \"###CROSSWORD###\"\nassert solution(\"2 5\") == \"####CROSSWORD####\"\nassert solution(\"3 10\") == \"####CROSSWORD####\"\nassert solution(\"4 3\") == \"####CROSSWORD####\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 7\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 15\\n#.#...#.#.\\n##.##.#.#.\\n.#.#.#....\\n###.#.#.#.\\n##...##.#.\\n..#...#...\\n#.#.#....#\\n##....#...\\n#.#.###...\\n#.##.#..#.') == '#.##.#..#.'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'CROSSWORD'"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"#######\"\nassert solution(\"1 20\") == \"*****\"\nassert solution(\"3 4 5\") == \"#####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 15') == '##CROSSWORD####'\nassert solution('1 5') == '###CROSSWORD'\n\n\"\"\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 10\\n#.#.#.#\\n######.#\") == \"###.#.#.\\n.####.##\\n#.###.#.\\n.####.#.\\n######.#\\n#.#.###.\\n#.####.#\\n#.####.#\\n.#####.#\\n#####.##\\n#.####.#\\n#.####.#\\n#.####.#\\n####.##.\\n###.##.#\\n#.####.#\\n#.####.#\\n#.####.#\""
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n2 7 6\\n9 5 1\\n4 3 8') == '31'"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n    \"\"\") == \"31\"\nassert solution(\n    \"\"\"\n2 2\n1 0\n3 2\n1 2\n\"\"\") == \"5\"\nassert solution(\n    \"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n    \"\"\") == \"31\"\nassert solution(\n    \"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n    \"\"\") == \"31\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nassert solution('''\n2 1\n2 4 3\n1 5 6\n''') == '11'\nassert solution('''\n9 1\n2 5 4\n3 5 6\n7 4 8\n8 5 9\n''') == '11'\n''')"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 7 6\n9 5 1\n4 3 8''') == '31'\n\nassert solution('''3\n3 8 2\n1 2 7\n4 1 3''') == '17'\n\nassert solution('''20\n2 2 4\n3 3 4\n3 4 5\n1 1 2\n1 3 3\n5 5 5\n3 6 7\n3 4 2\n3 7 5\n2 1 5\n2 2 2\n2 6 6\n2 7 2\n1 5 7\n1 5 3\n1 2 2\n1 2 3\n2 1 4\n2 1 4\n1 2 5\n1 3 3\n1 3 1\n2 2 3\n2 3 1\n3 2 3\n3 3 1\n3 1 3\n1 2 1\n2 3 4\n3 2 4\n1 1 4\n1 3 5\n1 5 2\n2 2 4\n2 3 4\n2 4 4\n2 5 4\n2 6 4\n1 1 5\n1 4 1\n1 1 6\n1 1 3\n1 3 2\n1 6 1\n1 5 5\n3 2 2\n3 2 1\n3 2 3\n3 4 5\n3 1 2\n2 3 4\n2 2 3\n2 3 5\n2 3 4\n3 3 5\n3 4 5\n2 1 3\n2 1 2\n3 1 4\n3 3 4\n2 4 3\n2 5 5\n3 2 5\n2 3 4\n3 4 5\n1 5 5\n1 5 4\n2 3 4\n1 1 5\n1 5 4\n2 4 3\n1 2 1\n1 3 5\n1 3 4\n1 3 4\n1 3 3\n1 2 3\n1 5 5\n3 2 3\n2 3 5\n1 3 3\n1 3 3\n1 3 4\n1 2 3\n3 2 1\n2 3 5\n2 1 5\n1 1 4\n2 1 4\n3 5 5\n1 5 5\n2 1 1\n2 4 5\n2 4 4\n2 4 5\n1 3 2\n2 1 4\n1 3 2\n1 5 1\n1 2 2\n2 1 3\n2 2 5\n1 2 3\n1 4 2\n1 3 1\n2 1 4\n1 4 1\n3 2 4\n1 4 2\n1 4 3\n1 3 4\n1 2 4\n1 1 5\n1 5 5\n2 1 1\n2 5 4\n1 1 4\n1 4 3\n1 2 2\n1 5 2\n2 2 3\n2 1 4\n3 3 4\n1 1 4\n1 2 1\n1 3 2\n2 3 3\n2 4 5\n2 4 4\n3 4 5\n1 4 3\n2 3 2\n1 5 3\n2 3 4\n1 3 2\n2 4 3\n2 5 2\n2 2 2\n2 3 3\n2 4 5\n1 5 4\n1 5 3\n1 1 4\n2 2 3\n2 2 2\n2 2 4\n2 4 4\n3 2 4\n3 3 4\n3 3 3\n3 3 2\n2 2 4\n2 3 2\n1 4 3\n2 2 5\n2 3 3\n2 4 4\n2 2 2\n2 5 2\n3 4 5\n1 1 4\n1 4 1\n1 5 5\n1 2 4\n1 5 1\n2 1 2\n2 4 2\n3 4 2\n3 4 2\n3 4 3\n3 5 3\n1 4 3\n2 3 3\n2 3 3\n2 4 4\n2 5 4\n2 4 5\n3 2 4\n3 2 2\n2 5 4\n1 2 3\n1 1 3\n2 3 4\n2 3 3\n2 4 3\n1 1 2\n2 1 4\n1 2 1\n2 5 2\n2 2 2\n2 5 2\n1 5 4\n1 2 3\n2 4 5\n1 3 2\n1 2 4\n1 3 5\n1 4 1\n1 5 2\n3 1 4\n2 3 4\n2 3 4\n1 2 2\n1 4 1\n1 3 4\n1 5 3\n1 3 4\n2 2 5\n1 4 2\n2 1 1\n1 2 5\n2 3 2\n3 5 2\n3 1 1\n2 1 4\n3 5 4\n4 5 5\n2 3 2\n2 3 4\n2 4 2\n2 5 1\n1 1 2\n2 2 1\n2 2 2\n1 1 5\n1 1 4\n2 1 3\n2 4 2\n2 1 2\n2 2 2\n3 1 1\n2 2 2\n3 3 1\n2 3 3\n1 1 4\n1 5 4\n3 3 3\n2 2 2\n2 4 5\n2 4 4\n2 5 4\n1 2 2\n3 2 3\n1 4 3\n1 3 4\n1 2 3\n2 1 2\n1 5 5\n1 3 4\n2 4 2\n3 4 4\n1 4 5\n1 4 4\n1 5 4\n2 4 4\n2 4 2\n3 3 2\n1 3 4\n1 5 4\n1 4 2\n2 5 4\n1 4 4\n1 4 5\n2 4 4\n2 5 4\n3 4 5\n2 5 5\n3 4 5\n3 4 5\n2 4 4\n2 5 4\n2 4 3\n1 1 5\n2 1 4\n3 1 4\n2 1 4\n1 1 5\n2 3 3\n2 2 2\n2 1 2\n1 2 2\n1 2 1\n2 5 3\n3 4 4\n2 4 3\n2 4 4\n2 5 3\n3 3 4\n2 3 4\n3 5 2\n2 2 2\n3 4 5\n1 5 4\n1 5 3\n2 4 4\n3 5 3\n2 5 3\n3 4 5\n1 2 1\n3 5 4\n1 2 5\n1 3 1\n1 2 3\n2 1 5\n3 2 5\n1 1 3\n1 1 3\n1 1 2\n1 1 2\n2 2 3\n1 2 2\n1 3 2\n2 4 5\n2 4 5\n3 1 4\n2 3 1\n2 3 5\n2 2 5\n2 2 2\n3 2 5\n2 5 2\n2 3 2\n2 2 2\n3 4 3\n1 3 5\n1 2 3\n1 3 2\n2 4 5\n2 4 5\n2 3 4\n3 2 5\n3 2 4\n2 4 2\n3 3 4\n3 5 4\n2 5 4\n3 4 4\n2 5 2\n3 4 2\n1 3 2\n1 4 1\n1 5 5\n1 2 1\n1 5 1\n2 4 2\n1 1 4\n1 3 2\n2 2 5\n1 2 4\n1 4 2\n2 3 3\n1 4 3\n2 2 4\n1 3 4\n1 4 4\n1 5 4\n2 3 3\n1 3 4\n2 3 2\n2 3 5\n2 4 2\n1 2 3\n2 4 5\n3 3 4\n2 5 2\n1 2 4\n2 4 4\n3 3 4\n2 2 3\n2 5 2\n1 2 5\n1 4 1\n2 3 2\n1 4 1\n1 1 5\n1 2 4\n1 3 3\n1 3 5\n1 1 4\n1 4 1\n2 3 4\n2 4 4\n2 5 4\n1 4 2\n1 4 4\n2 5 2\n1 4 3\n1 4 1\n2 4 5\n1 4 3\n2 4 4\n1 5 4\n1 5 3\n1 5 4\n1 1 4\n2 4 3\n2 3 4\n1 4 4\n2 3 5\n1 5 4\n2 4 5\n1 5 4\n2 4 4\n2 4 5\n2 4 5\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n3 1\n2 7 6\n9 5 1\n4 3 8\n\"\"\") == \"31\""
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"31\"\nassert solution(\"3 2\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"67\"\nassert solution(\"3 3\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"0\"\nassert solution(\"3 2\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"31\"\nassert solution(\"3 3\\n2 7 6\\n9 5 1\\n4 3 8\\n\") == \"67\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n7\n6\n''') == '31'\nassert solution('''\n3\n1\n9\n5\n4\n3\n8\n''') == '13'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('2 5') == '3'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\nBBW\n''') == '2'\n\nassert solution('''\n3 2\nBBWBB\n''') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nWWWWWB') == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('BBW') == '2'\nassert solution('BBWW') == '3'\nassert solution('BBWWWWWWWW') == '4'\nassert solution('BBWWWWWWWWWWW') == '2'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '2'\nassert solution(\"1\") == '1'\nassert solution(\"BBW\") == '2'\nassert solution(\"BWW\") == '2'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"BBW\"\n) == \"2\"\n\nassert solution(\n    \"5 1\\n\"\n    \"WBWBWBWB\"\n) == \"1\"\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nBBW') == '1'\nassert solution('2\\nWWWW') == '0'\nassert solution('3\\nWWWW') == '1'\nassert solution('3\\nWWWW') == '1'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '2'\nassert solution('3 1') == '1'\nassert solution('5 1') == '1'\nassert solution('5 3') == '1'\nassert solution('5 3') == '1'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '0.0'\nassert solution('1 1') == '0.5'\nassert solution('2 2') == '0.5'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == '0.333'\nassert solution('2 5') == '0.666'\nassert solution('3 3') == '0.666'\nassert solution('4 6') == '0.333'\nassert solution('5 10') == '0.666'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\nassert solution(\"\"\"\n3 2\n1 2 1\n\"\"\") == \"0.56\"\nassert solution(\"\"\"\n3 4\n4 1 1 1\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n5\n3 3 2 2 1\n\"\"\") == \"3.36\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3\\n3 2 1\\n1 2 3') == '0.556'\nassert solution('6 3\\n6 2 3 3 2\\n1 2 3 1 2') == '0.144'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3\n2 1 2 3 4 5\n''') == '0.556', \"Wrong\"\nassert solution('''\n6 3\n2 1 2 3 4 5\n''') == '0.556', \"Wrong\"\nassert solution('''\n9 5\n5 5 5 5 5 5 5 5 5 5\n5 8 7 3 4 6 5 7\n5 4 8 1 6 1 4 2\n1 3 1 3 1 3 3\n3 3 1 3 3 3 3\n''') == '4.637', \"Wrong\"\nassert solution('''\n5 3\n2 2 2 3 2\n1 1 1 1 1\n1 1 1 1 1\n2 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '0.539', \"Wrong\"\nassert solution('''\n5 2\n2 1 2 3 2\n1 1 1 1 1\n1 1 1 1 1\n2 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '0.561', \"Wrong\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('3 1') == '0.556'\n'''\nfrom math import floor\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0.5'\nassert solution('5 3') == '1.667'\nassert solution('10 1') == '1.0'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n1 2 3\n''') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n3 2 1\n1 2 3''') == '0.556'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 1\n3 2 1\n1 2 3\n\"\"\") == \"0.556\"\nassert solution(\"\"\"\n4 4\n2 3 6 7\n1 2 3 4\n1 1 1 1\n3 4 1 2\n\"\"\") == \"5.000\"\nassert solution(\"\"\"\n4 4\n2 3 6 7\n1 2 3 4\n1 1 1 1\n3 4 1 2\n\"\"\") == \"3.000\"\nassert solution(\"\"\"\n5 1\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"3.000\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\nassert solution('1 1 1 1') == '2'\nassert solution('5 4 3 2') == '3'\n\"\"\"\n\na, b, c, d = stdin.split()\na = int(a)\nb = int(b)\nc = int(c)\nd = int(d)\n\nprint((a-1)*(b-1)*(c-1)*(d-1) + (a-1)*(b-1)*(d-1) + (a-1)*(c-1)*(b-1))\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\nassert solution(\"5 5 5 5\") == \"5\"\nassert solution(\"5 5 5 5 5\") == \"10\"\nassert solution(\"100 1 0 0\") == \"100\"\nassert solution(\"1 0 0 0\") == \"1\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1') == '3'\nassert solution('10 1 1 1') == '11'\nassert solution('20 4 2 1') == '12'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4 3 2\n3 4 5 1\n''') == '3'\nassert solution('''10 3 10 1\n5 4 5 1\n''') == '10'\nassert solution('''30 30 10 1\n5 5 10 1\n''') == '30'\nassert solution('''30 30 10 1\n10 5 5 1\n''') == '30'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4 3 2') == '3'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 7 2\n5 4 3 2\n''') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('2 1 1 1') == '2'\nassert solution('5 2 5 4') == '3'\nassert solution('4 1 4 1') == '4'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 3 2') == '3'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6\\n') == '13'\nassert solution('3\\n5 1\\n5 2\\n5 3\\n') == '11'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == \"13\""
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == \"13\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n6\n1 2 5\n3 4 3\n5 4 7\n6 4 3\n7 4 7\n8 4 1\n''') == '21'\nassert solution('''\n5\n1 1 1 1 1\n1 1 2 2 1\n1 1 1 3 3\n1 1 2 3 1\n1 2 1 2 1\n1 2 3 1 1\n1 3 1 1 1\n''') == '33'\nassert solution('''\n1\n1\n1\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\n\nassert solution('''\n5\n1 3 5\n2 3 4\n3 4 4\n4 6 4\n5 5 4\n''') == '16'\n\nassert solution('''\n3\n1 5 2\n2 4 4\n3 4 4\n''') == '11'\n\nassert solution('''\n2\n1 5 2\n2 4 4\n''') == '9'\n\nassert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n\"\"\") == \"13\"\n\"\"\"\nSample Input:\n1\n2\n1 2\n2 2\nSample Output:\n2\n\"\"\"\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 6') == '11'\nassert solution('5 1 5') == '4'\nassert solution('5 3 5') == '4'\nassert solution('4 1 5') == '3'\nassert solution('4 5 3') == '4'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 3\n3 3\n3 4\n4 5\n4 2\n''') == '4'\nassert solution('''\n5\n5 6\n5 3\n6 3\n2 3\n''') == '5'\nassert solution('''\n4\n1 1\n1 2\n2 3\n2 3\n''') == '0'\nassert solution('''\n3\n1 6\n3 4\n2 3\n''') == '0'"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n    2\n    2\n    \"\"\") == \"2.00000\"\nassert solution(\"\"\"\n    1\n    10\n    5\n    \"\"\") == \"10.0000\"\nassert solution(\"\"\"\n    2\n    12\n    6\n    \"\"\") == \"12.00000\"\nassert solution(\"\"\"\n    1\n    10\n    6\n    \"\"\") == \"10.0000\"\nassert solution(\"\"\"\n    1\n    10\n    5\n    \"\"\") == \"10.0000\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nassert solution('1\\n13.141593 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nassert solution('5.00000000 2.00000000\\n5.00000000 2.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000 1.00000000\\n1.00000000"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10.000000 20.123456\\n1\") == \"3.141593\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5.000000 5.000000\") == \"4.000000\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"15.650108 13.141593\") == \"2.666225\"\nassert solution(\"3.350001 10.123456\") == \"1.671499\"\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0.000000 1.000000\\n-1.000000 1.000000') == '3.141593'\nassert solution('1\\n0.000000 1.000000\\n2.000000 1.000000') == '2.000000'\nassert solution('1\\n0.000000 1.000000\\n-5.000000 1.000000') == '3.141593'\nassert solution('1\\n0.000000 1.000000\\n5.000000 1.000000') == '2.000000'\nassert solution('1\\n0.000000 1.000000\\n0.000000 1.000000') == '1.000000'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\\n\") == \"3.141593\"\n\"\"\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10.000000 20.123456\\n1\\n13.141593 20.123456\\n\") == \"3.141593\"\nprint(solution(\n\"\"\"\n3.141593\n5.0\n8.0\n4.0\n5.0\n\"\"\".strip()))\n\"\"\"\nBinary Search\n\"\"\"\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \n        m, n = len(nums1), len(nums2)\n        if m > n:\n            return self.findMedianSortedArrays(nums2, nums1)\n        \n        imin, imax, half_len = 0, m, (m+n+1) // 2\n        while imin <= imax:\n            i = (imin+imax) // 2\n            j = half_len - i\n            if i < m and nums2[j-1] > nums1[i]:\n                # i is too small, must increase it\n                imin = i + 1\n            elif i > 0 and nums1[i-1] > nums2[j]:\n                # i is too big, must decrease it\n                imax = i - 1\n            else:\n                # i is perfect\n\n                if i == 0: max_of_left = nums2[j-1]\n                elif j == 0: max_of_left = nums1[i-1]\n                else: max_of_left = max(nums1[i-1], nums2[j-1])\n\n                if (m+n)%2 == 1:\n                    return max_of_left\n\n                if i == m: min_of_right = nums2[j]\n                elif j == n: min_of_right = nums1[i]\n                else: min_of_right = min(nums1[i], nums2[j])\n\n                return (max_of_left + min_of_right) / 2.0\n\n\"\"\"\nThe largest number is 4.1666...1667.  So we can't say that this is 4.5, we need to find the closest number, we can see that the number 6.5 is smaller than 4.5, so we can keep moving 6.5 towards the right, and we will find that 6.5 < 4.5.  To get the closest number, we need to move the left pointer closer to the right, so we need to keep moving 4.5 towards the left, and we will find that 4.5 < 6.5.\n\nSo we have two pointers, one to move left and one to move right.  To move left, we start from the right, and move 4.5 towards the left.  To move right, we start from the left, and move 6.5 towards the right.  We move both pointers, and if we see a larger number, we keep moving it closer to the right, and if we see a smaller number, we keep moving it closer to the left, and we get a conclusion that we need to move both of them.  We can use a while loop to do that, and we use 4.5 and 6.5 as variables to track left and right, so we know that left > right.  To know how far we need to move left and right, we can use 1 - 2*left.  So we have to do 1 - 2*left, which is left + (1 - 2*left).\n\n\"\"\"\n\n\"\"\"\nThe largest number is 4.1666...1667.  So we can't say that this is 4.5, we need to find the closest number, we can see that the number 6.5 is smaller than 4.5, so we can keep moving 6.5 towards the right, and we will find that 6.5 < 4.5.  To get the closest number, we need to move the left pointer closer to the right, so we need to keep moving 4.5 towards the left, and we will find that 4.5 < 6.5.\n\nSo we have two pointers, one to move left and one to move right.  To move left, we start from the right, and move 4.5 towards the left.  To move right, we start from the left, and move 6.5 towards the right.  We move both pointers, and if we see a larger number, we keep moving it closer to the right, and if we see a smaller number, we keep moving it closer to the left, and we get a conclusion that we need to move both of them.  We can use a while loop to do that, and we use 4.5 and 6.5 as variables to track left and right, so we know that left > right.  To know how far we need to move left and right, we can use 1 - 2*left.  So we have to do 1 - 2*left, which is left + (1 - 2*left).\n\n\"\"\"\n\n\"\"\"\nThe largest number is 4.1666...1667.  So we can't say that this is 4.5, we need to find the closest number, we can see that the number 6.5 is smaller than 4.5, so we can keep moving 6.5 towards the right, and we will find that 6.5 < 4.5.  To get the closest number, we need to move the left pointer closer to the right, so we need to keep moving 4.5 towards the left, and we will find that 4.5 < 6.5.\n\nSo we have two pointers, one to move left and one to move right.  To move left, we start from the right, and move 4.5 towards the left.  To move right, we start from the left, and move 6.5 towards the right.  We move both pointers, and if we see a larger number, we keep moving it closer to the right, and if we see a smaller number, we keep moving it closer to the left, and we get a conclusion that we need to move both of them.  We can use a while loop to do that, and we use 4.5 and 6.5 as variables to track left and right, so we know that left > right.  To know how far we need to move left and right, we can use 1 - 2*left.  So we have to do 1 - 2*left, which is left + (1 - 2*left).\n\n\"\"\"\n\"\"\"\nSolution:\n\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        \n        m, n = len(nums1), len(nums2)\n        if m > n:\n            return self.findMedianSortedArrays(nums2, nums1)\n        \n        imin, imax, half_len = 0, m, (m+n+1) // 2\n        \n        while imin <= imax:\n            i = (imin+imax) // 2\n            j = half_len - i\n            if i < m and nums2[j-1] > nums1[i]:\n                # i is too small, must increase it\n                imin = i + 1\n            elif i > 0 and nums1[i-1] > nums2[j]:\n                # i is too big, must decrease it\n                imax = i - 1\n            else:\n                # i is perfect\n\n                if i == 0: max_of_left = nums2[j-1]\n                elif j == 0"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 4\n2\nSample Input 2:\n1\n10\nSample Output 2:\n10.0\n\n''') == '10.0'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3\\n\"\n    \"4 4\\n\"\n    \"2\\n\"\n) == \"2.13333333333333\"\n\nassert solution(\n    \"5\\n\"\n    \"7 7\\n\"\n    \"3\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"4\\n\"\n) == \"impossible\""
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n3') == '2.13333333333333'\nassert solution('1\\n3') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"2.13333333333333\"\nassert solution(\"3\") == \"3.14285714285714\"\nassert solution(\"4\") == \"3.14285714285714\"\nassert solution(\"5\") == \"3.14285714285714\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n4\") == \"2.13333333333333\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n4 4\n2\nSample Input:\n1\n1\nSample Output:\n1.0\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n3 3\n1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3\n5 9\n3\n4\n\"\"\") == \"6.3416666666666667\"\n\nassert solution(\"\"\"\n2\n4 5\n2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2\n8 2\n2\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n') == 'impossible'\nassert solution('4\\n') == '2.13333333333333'\nassert solution('5\\n') == 'impossible'\nassert solution('2\\n') == 'impossible'\n\n\"\"\"\n\nn = int(input())\nd = {}\nfor i in range(n-1):\n    p, q = map(int, input().split())\n    d[p] = q\n    d[q] = p\n\nc = 0\nans = 0\nfor i in range(1, n):\n    q = d[i]\n    if q in d:\n        c += 1\n        ans += 1/d[q]\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\\n1\") == \"impossible\"\nassert solution(\"2\\n1 2\") == \"2.13333333333333\"\nassert solution(\"3\\n4 3\\n2 2\\n1 2\") == \"2.13333333333333\"\nassert solution(\"5\\n10 10\\n4 2\\n1 2\\n2 2\") == \"impossible\"\nassert solution(\"9\\n100 100\\n5 2\\n1 2\\n2 2\") == \"impossible\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\\n2\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '2'\nassert solution('10') == '4'\nassert solution('50') == '27'\n\"\"\""
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '18'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('5') == '0'\nassert solution('10') == '0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '18'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"18\"\nassert solution('5') == \"1\"\nassert solution('2') == \"1\"\nassert solution('3') == \"0\"\nassert solution('12') == \"1\""
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('1000000') == '18'\nassert solution('5000000') == '15396720'\nassert solution('50000000') == '298211592'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n3\n4\n5\n6''') == '2'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"3\") == '2'\nassert solution(\"4\") == '1'\nassert solution(\"5\") == '4'\nassert solution(\"10\") == '6'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('4') == '5'\nassert solution('5') == '5'\nassert solution('6') == '7'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1', 'First testcase failed'\nassert solution('2') == '1', 'Second testcase failed'\nassert solution('3') == '3', 'Third testcase failed'\nassert solution('4') == '1', 'Fourth testcase failed'\nassert solution('5') == '0', 'Fifth testcase failed'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n35 F classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\n\n\"\"\"\n\nn = int(input())\npersons = {}\nfor i in range(n):\n    h, sex, music, sport = input().split()\n    h = int(h)\n    if sex == 'M':\n        if sport == 'baroque':\n            if (h, 'M') not in persons:\n                persons[h, 'M'] = 1\n            else:\n                persons[h, 'M'] += 1\n        else:\n            if (h, 'F') not in persons:\n                persons[h, 'F'] = 1\n            else:\n                persons[h, 'F'] += 1\n    else:\n        if sport == 'baroque':\n            if (h, 'F') not in persons:\n                persons[h, 'F'] = 1\n            else:\n                persons[h, 'F'] += 1\n        else:\n            if (h, 'M') not in persons:\n                persons[h, 'M'] = 1\n            else:\n                persons[h, 'M'] += 1\n\nm = 0\nfor h, m in persons:\n    if persons[h, m] >= 2:\n        m += 1\n\nprint(m)"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\") == \"3\"\nassert solution(\"5\\n0 M baroque skiing\\n43 M baroque chess\\n25 F baroque soccer\\n35 F baroque writing\\n30 M baroque dancing\") == \"3\"\nassert solution(\"2\\n36 M baroque chess\\n37 F baroque dancing\\n36 F baroque writing\") == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n''') == '3'\n''')\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n5 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    35 M classicism programming\n    0 M baroque skiing\n    43 M baroque chess\n    30 F baroque soccer\n    ''') == '3'\n\nassert solution('''\n    35 M classicism programming\n    0 F baseball\n    43 M classicism baseball\n    30 F baroque skiing\n    0 F baroque baseball\n    ''') == '2'\n\n'''\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == \"3\"\nassert solution('2\\n60 M classicism programming\\n10 M baroque skiing\\n41 M baroque chess') == \"2\"\nassert solution('1\\n41 F baroque skiing\\n42 F baroque chess') == \"2\"\nassert solution('4\\n43 F baroque skiing\\n50 M baroque chess\\n40 F baroque soccer') == \"1\"\nassert solution('3\\n50 M baroque chess\\n40 F baroque soccer') == \"0\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n') == '3'\nassert solution('2\\n35 F baroque skiing\\n0 M baroque chess\\n43 M baroque chess\\n30 F baroque soccer\\n') == '3'\nassert solution('3\\n35 F baroque chess\\n0 M baroque chess\\n43 M baroque chess\\n30 F baroque soccer\\n') == '2'\nassert solution('4\\n35 F baroque skiing\\n0 M baroque chess\\n43 M baroque chess\\n30 F baroque soccer\\n') == '1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4') == '2 1'\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin.read()\n\nn = int(stdin)\n\nm = n - 1\n\nstack = [[0]]\n\nfor i in range(1, n + 1):\n    stack.append([i])\n\nfor _ in range(n):\n    if _ % 2 == 0:\n        i = int(stdin.split()[0])\n        stack[m].append(i)\n        m -= 1\n    else:\n        i = int(stdin.split()[0])\n        j = int(stdin.split()[0])\n        m = i - 1\n        while stack[m][-1]!= j:\n            stack[m].pop()\n            m -= 1\n        stack[m].append(j)\n\nfor i in range(n):\n    print(len(stack[i]))"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''a 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2 1'\nassert solution('''b 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1 1'\nassert solution('''a 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1 0'\n''')"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nb 0\na 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\nb 1\na 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\na 1\na 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\nc 2 3\nb 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\na 1\nb 2\nc 2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2 1'\n'''\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n') == '2\\n1\\n2'\n\"\"\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2\\n1\\n2\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nb 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"1\\n2\\n1\"\nassert solution(\"\"\"\nb 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"2\\n1\\n2\"\nassert solution(\"\"\"\nb 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"3\\n2\\n2\"\nassert solution(\"\"\"\nb 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"3\\n2\\n2\"\nassert solution(\"\"\"\nb 0\na 1\nb 2\nc 2 3\nb 4\n\"\"\") == \"2\\n1\\n2\"\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n4\\n1 a 2\\n2 a 1\\nb 2\\nc 1 a 3\\n') == '2\\n3\\n'\nassert solution('1\\n2\\n2\\n1 b 2\\n2 a 1\\nb 2\\nc 1 a 3\\n') == '2\\n1\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1\n1\n2\n2''') == '1\\n1\\n2\\n'\nassert solution('''2\n2\n2\n2''') == '1\\n1\\n1\\n'\nassert solution('''3\n3\n2\n3''') == '3\\n2\\n3\\n'\nassert solution('''4\n4\n3\n3\n3''') == '2\\n3\\n3\\n2\\n'\nassert solution('''5\n4\n3\n2\n1\n2''') == '2\\n2\\n1\\n1\\n2\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\\n0\\n0\\n\"\nassert solution(\"a 0\") == \"1\\n1\\n1\\n\"\nassert solution(\"a 1\") == \"0\\n0\\n0\\n\"\nassert solution(\"b 2\") == \"2\\n1\\n1\\n\"\nassert solution(\"c 2 3\") == \"3\\n1\\n1\\n\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'\nassert solution('2 2\\n12 6 10 9\\n0 0 0 0\\n1 2 3 4\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0\\n') == '4'"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"5\"\nassert solution(\"6 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\") == \"1\"\nassert solution(\"6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\") == \"1\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n8 2\\n8 3 5 6 4\\n8 2 5 6 4 3\\n4 4 7 7\\n8 1 4 4 5\\n8 3 5 6 4\\n3 5 6 7 4\\n4 2 2 7 7\\n8 6 5 6 5 6\\n8 6 5 6 7 6\\n5 4 4 4 7 7\\n6 8 5 6 5 6\\n3 2 1 5 4 6\\n5 6 4 7 4 8\\n6 7 6 7 7\\n3 3 3 5 5\\n6 5 5 6 5 5\\n6 5 5 6 5 5\\n5 3 6 6 6 3\\n6 2 6 3 6 3\\n8 4 5 7 5 5\\n8 3 5 7 5 5\\n3 5 7 5 5 5\\n3 6 6 6 6 3\\n6 2 6 3 6 3\\n8 5 7 5 5 5\\n5 3 6 6 6 3\\n3 2 1 5 4 6\\n8 3 5 6 6 4\\n8 3 5 6 6 4\\n5 3 5 6 6 4\\n3 5 5 6 6 4\\n5 4 4 7 7 7\\n6 8 5 6 5 6\\n8 1 4 4 5\\n8 3 5 6 6 4\\n3 5 6 7 7\\n6 4 4 6 4 4\\n3 5 5 6 6 4\\n4 2 2 7 7\\n5 7 5 6 6\\n7 7 7 7 7\\n8 3 5 6 6 4\\n6 6 6 7 7 7\\n8 3 5 6 6 4\\n8 6 5 6 7 7\\n5 6 6 7 7 7\\n8 1 4 4 5\\n3 6 6 7 7 7\\n8 2 4 4 5\\n8 6 5 6 7 7\\n5 6 6 7 7 7\\n6 4 4 7 7 7\\n6 6 6 7 7 7\\n8 2 4 4 5\\n6 5 5 6 5 6\\n3 2 1 5 4 6\\n6 4 4 7 7 7\\n3 3 3 5 5\\n6 8 5 6 5 6\\n5 4 4 7 7 7\\n6 7 6 7 7\\n8 2 5 5 5 5\\n5 3 5 6 6 4\\n8 5 5 6 6 6\\n3 6 6 6 6 6\\n8 6 5 6 5 6 6\\n6 4 4 7 7 7 7\\n8 2 5 5 5 5 5\\n4 2 2 7 7 7\\n3 3 3 5 5\\n4 3 3 6 6 4\\n6 5 6 6 6 3\\n7 5 5 6 6 3\\n8 6 5 6 6 3\\n5 4 4 7 7 7\\n8 3 5 5 6 4\\n8 3 5 5 6 4\\n8 3 5 5 6 4\\n8 6 5 6 5 6\\n3 5 6 6 6 6\\n5 3 6 6 6 6\\n6 6 6 6 6 6\\n8 6 5 6 6 5 6\\n5 6 6 6 6 6 6\\n5 3 6 6 6 6 6\\n5 6 6 6 6 6 6\\n6 3 6 6 6 6 6\\n8 3 5 5 5 5 5\\n8 3 5 5 5 5 5\\n8 3 5 5 5 5 5\\n5 6 6 6 6 6 6\\n3 6 6 6 6 6 6\\n3 6 6 6 6 6 6\\n6 6 6 6 6 6 6\\n6 6 6 6 6 6 6\\n6 6 6 6 6 6 6\\n6 6 6 6 6 6 6\\n3 6 6 6 6 6 6\\n6 6 6 6 6 6 6\\n5 6 6 6 6 6 6\\n6 6 6 6 6 6 6\\n5 5 5 6 6 6 6\\n6 6 6 6 6 6 6\\n8 4 5 7 5 5 5\\n8 3 5 7 5 5 5\\n8 2 5 5 7 5 5\\n3 5 5 5 7 5 5\\n8 5 5 7 5 5 5\\n5 3 5 7 5 5 5\\n8 6 5 6 6 6 5 6\\n7 6 6 6 6 6 6\\n8 3 5 6 6 6 5 6\\n8 3 5 6 6 6 5 6\\n3 5 6 6 6 6 6 5\\n8 3 5 6 6 6 5 6\\n8 6 5 6 6 6 6 6\\n8 3 5 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 3 5 6 6 6 6 6\\n8 6 5 6 6 6 6 6\\n5 6 6 6 6 6 6 6\\n8 3 5 6 6 6 6 6\\n8 3 5 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 5 5 5 6 6 6 6\\n8 3 5 6 6 6 6 6\\n5 3 5 6 6 6 6 6\\n3 6 6 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 5 5 5 6 6 6 6\\n8 3 5 6 6 6 6 6\\n5 6 6 6 6 6 6 6\\n3 6 6 6 6 6 6 6\\n3 6 6 6 6 6 6 6\\n3 6 6 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 6 5 6 6 6 6 6\\n8 2 5 5 6 6 6 6\\n8 3 5 5 6 6 6 6\\n8 3 5 5 6 6 6 6\\n8 2 5 5 6 6 6 6\\n8 5 5 6 6 6 6 6\\n8 3 5 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 6 5 6 6 6 6 6\\n5 6 6 6 6 6 6 6\\n8 5 5 6 6 6 6 6\\n8 2 5 5 6 6 6 6\\n8 6 5 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 2 5 5 6 6 6 6\\n8 2 5 5 6 6 6 6\\n5 3 5 6 6 6 6 6\\n3 5 5 6 6 6 6 6\\n6 6 6 6 6 6 6 6\\n8 6 5 6 6 6 6 6\\n8 5 5 6 6 6 6 6\\n8 3 5 6 6 6 6 6\\n8 2 5 6 6 6 6 6\\n3 6 6"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '5'\nassert solution('20 11') == '2'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\nassert solution('1 2\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '7'"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1') == '5'\nassert solution('7 10') == '5'\nassert solution('20 20') == '4'\nassert solution('20 1') == '4'\nassert solution('20 2') == '4'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n\") == \"5\\n\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"4\"\nassert solution(\"4 6\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '2'\nassert solution('4 5') == '2'\nassert solution('5 5') == '2'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"4 5\\n\", \"1 2\\n\", \"1 3\\n\", \"1 4\\n\", \"2 3\\n\", \"2 4\\n\"]) == \"4\"\nassert solution([\"9 5\\n\", \"1 2\\n\", \"1 3\\n\", \"1 4\\n\", \"2 3\\n\", \"2 4\\n\", \"3 4\\n\", \"4 5\\n\"]) == \"8\"\nassert solution([\"1 1\\n\", \"1 2\\n\"]) == \"1\"\nassert solution([\"9 5\\n\", \"1 2\\n\", \"1 3\\n\", \"1 4\\n\", \"2 3\\n\", \"2 4\\n\"]) == \"8\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4'\n\nassert solution('''\n2 1\n1 2\n''') == '2'\n\nassert solution('''\n4 6\n1 2\n2 3\n1 4\n3 4\n2 5\n''') == '4'\n\nassert solution('''\n6 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 5\n4 5\n4 6\n''') == '1'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '0'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '4'\nassert solution('10 9') == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '1'\nprint(solution('''1\n2\n1 2\n1 3\n1 4\n2 3\n2 4'''))"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '4'\n\nassert solution('5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4') == '2'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"4\"\nassert solution(\"10 10\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 5\\n3 6\\n3 7\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n6 8\\n7 8\\n7 9\\n8 9\") == \"19\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1 2\n2 3\n3 4\n''') == '2 4'\n\nassert solution('''4\n1 2\n2 3\n3 4\n''') == '2 3'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '2 4'\nassert solution('''10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n''') == '1 4'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2 3 4\""
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == \"2 3\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n\") == \"2 3\\n4 2\\n3 4\\n\"\nassert solution(\"10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n\") == \"7 4\\n3 2\\n19 20\\n\"\nassert solution(\"10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n15 16\\n17 18\\n19 20\\n\") == \"7 4\\n3 2\\n19 20\\n\"\nassert solution(\"100\\n0 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n65 67\\n66 68\\n66 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n\") == \"9 46\\n8 45\\n6 29\\n5 24\\n4 22\\n4 23\\n3 21\\n3 22\\n\"\nassert solution(\"13\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n7 8\\n9 10\\n11 12\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n65 67\\n66 68\\n66 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n\") == \"1 3\\n3 5\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n65 67\\n66 68\\n66 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n77 79\\n78 80\\n78 81\\n79 82\\n79 83\\n80 84\\n80 85\\n81 86\\n81 87\\n82 88\\n82 89\\n83 89\\n83 90\\n84 91\\n84 92\\n85 93\\n85 94\\n86 95\\n86 96\\n87 97\\n87 98\\n88 99\\n88 99\\n89 100\\n89 100\\n\")\n\n---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---===---==="
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n3 4\\n\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\\n3\\n2\\n\"\nassert solution(\"3\") == \"2\\n2\\n2\\n\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2 3'\n\nassert solution('''4\n1 2\n3 4\n2 3\n''') == '1 4'\n\nassert solution('''8\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 11\n8 12\n9 13\n10 14\n11 15\n12 16\n13 17\n14 18\n15 19\n16 20\n17 21\n18 22\n19 23\n20 24\n21 25\n22 26\n23 27\n24 28\n25 29\n26 30\n27 31\n28 32\n29 33\n30 34\n31 35\n32 36\n33 37\n34 38\n35 39\n36 40\n37 41\n38 42\n39 43\n40 44\n41 45\n42 46\n43 47\n44 48\n45 49\n46 50\n47 51\n48 52\n49 53\n50 54\n51 55\n52 56\n53 57\n54 58\n55 59\n56 60\n57 61\n58 62\n59 63\n60 64\n61 65\n62 66\n63 67\n64 68\n65 69\n66 70\n67 71\n68 72\n69 73\n70 74\n71 75\n72 76\n73 77\n74 78\n75 79\n76 80\n77 81\n78 82\n79 83\n80 84\n81 85\n82 86\n83 87\n84 88\n85 89\n86 90\n87 91\n88 92\n89 93\n90 94\n91 95\n92 96\n93 97\n94 98\n95 99\n96 100\n''') == '36 28'"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n3 4') == '2 4'\nassert solution('3\\n1 2\\n2 3') == '3 2'\n\n----\nTo solve this problem, I will implement Dijkstra's Algorithm.\n\n1. Create a graph object\n2. Create a dictionary mapping cities to their associated weights.\n3. Create a priority queue for the graph\n4. Add the first node to the priority queue\n5. For the i-th node, for each weight w that node has, add the weight to the priority queue.\n6. Get the minimum weight in the priority queue\n7. Pop the city with minimum weight\n8. Set the distance of the node from the source to 1\n9. Iterate over the graph, and for each edge, multiply the weight of the edge by the distance from the source to the destination, and add it to the priority queue.\n10. Get the minimum weight in the priority queue\n11. Pop the city with minimum weight\n12. Add the new city to the graph\n13. If the next node is not already in the graph, add it to the graph.\n14. Set the distance of the node from the source to 1\n15. Repeat for the next node in the priority queue\n16. When the priority queue is empty, the path has been found\n\n\"\"\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '0'\nassert solution('3 5') == '2'\nassert solution('7 2') == '4'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n4 4\n1 2\n2 5\n5 3\n1 6\n''') == '6'\n''')\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples['1']) == '1'\nassert solution(samples['2']) == '2'\nassert solution(samples['3']) == '0'\nassert solution(samples['4']) == '0'\n\n'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 5') == '5'\nassert solution('7 2') == '4'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n5\\n') == '5'\nassert solution('2\\n1\\n3\\n5\\n') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '5'\nassert solution('2 1') == '0'\nassert solution('3 5') == '5'\nassert solution('7 2') == '5'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n1 1\n2 1\n3 5\n7 2\n''') == '0'\nassert solution('''\n2 1\n1 3\n2 1\n3 5\n7 2\n''') == '3'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('5 3 4') == '3'\nassert solution('1 1') == '1'\nassert solution('3 1 0') == '0'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"2\"\nassert solution(\"5 4 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"3\"\nassert solution(\"5 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"3\"\nassert solution(\"10 10 4\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\") == \"2\"\nassert solution(\"10 10 4\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n4 4\") == \"0\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\"\"\") == \"2\"\nassert solution(\"\"\"4 4 4\n0 0\n1 1\n2 2\n3 3\n3 0\n3 2\n2 0\n3 1\n3 3\n0 3\n1 4\n1 3\n0 0\n3 0\n2 2\n1 3\n3 1\n2 2\n2 1\n0 3\n0 1\n1 2\n0 2\n2 0\n1 2\"\"\") == \"0\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5 4\n4 1\n5 2\n5 5\n1 6\n3 2\n3 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '1'\nassert solution('1 3') == '1'\nassert solution('0 0') == '1'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 3') == \"2\"\nassert solution('1 1') == \"1\"\nassert solution('2 2') == \"2\"\nassert solution('1 3') == \"1\"\nassert solution('0 0') == \"1\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 3 2\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\"\n) == \"2\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 5 5\n1 1\n2 2\n1 3\n1 4\n2 5\n1 4\n3 3\n3 0\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4 4 4\n0 0\n0 3\n1 4\n2 5\n3 4\n3 2\n\"\"\") == \"3\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'GHOST'\nassert solution('6 1') == 'SAFE'\nassert solution('12 3') == 'SAFE'\nassert solution('30 6') == 'SAFE'\nassert solution('100 4') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''4 3\n3 C\n2 C\n1 C\n2 C\n''') == 'SAFE'\nassert solution('''4 3\n2 C\n1 C\n2 C\n''') == 'SAFE'\nassert solution('''4 3\n1 C\n3 C\n2 C\n''') == 'GHOST'\nassert solution('''4 3\n2 C\n1 C\n3 C\n''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 C\\n1 C\\n3 C\\n') == 'GHOST'\nassert solution('4 3\\n3 C\\n2 C\\n1 C\\n') == 'SAFE'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\n\nassert solution('''\n2 5\n5 E\n1 E\nSample Output:\nSAFE\n''') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\nC C\\nC C') == 'GHOST'\nassert solution('7 4\\nC C\\nC C\\nC C\\nC C\\nC C\\nC C') == 'SAFE'\nassert solution('7 4\\nC C\\nC C\\nC C\\nC C\\nC C\\nC C') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 C\n2 C\n3 C''') == 'SAFE'\nassert solution('''8\n0 C\n1 C\n2 C\n3 C\n4 C\n5 C\n6 C\n7 C''') == 'GHOST'\nassert solution('''5\n2 C\n1 C\n3 C\n4 C\n5 C\n6 C''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 3\n3 C\n2 C\n1 C\n\"\"\") == \"GHOST\"\nassert solution(\"\"\"\n4 2\n1 C\n2 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n5 2\n2 C\n1 C\n2 C\n3 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n4 1\n1 C\n2 C\n3 C\n\"\"\") == \"SAFE\"\nassert solution(\"\"\"\n5 1\n1 C\n3 C\n2 C\n4 C\n\"\"\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n3 C\n2 C\n1 C\nSample Output:\nSAFE''') == 'SAFE'\nassert solution('''7 10\n7 C\n6 C\n5 C\n4 C\n3 C\n2 C\n1 C\nSample Output:\nGHOST''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'SAFE'\nassert solution('2 4') == 'SAFE'\nassert solution('2 5') == 'GHOST'\nassert solution('2 6') == 'GHOST'\nassert solution('2 7') == 'GHOST'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('4 5\\n0.00 0.00\\n0.00 0.00\\n0.00 0.00\\n0.00 0.00') == '4'\nassert solution('3 2\\n0.00 2.00\\n1.00 2.00\\n2.00 2.00') == '1.00'\nassert solution('5 6\\n0.00 0.00\\n1.00 0.00\\n2.00 0.00\\n3.00 0.00\\n4.00 0.00\\n5.00 0.00') == '5.00'\nassert solution('8 7\\n0.00 0.00\\n1.00 0.00\\n2.00 0.00\\n3.00 0.00\\n4.00 0.00\\n5.00 0.00\\n6.00 0.00\\n7.00 0.00') == '7.00'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0.1 0.1') == '2'\nassert solution('2\\n1 2') == '1'\nassert solution('3\\n1 2.1') == '2'\nassert solution('4\\n1 2.5') == '2'\nassert solution('5\\n1 1.5') == '2'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2 3\n0.00 2.00\n\"\"\") == \"2\"\nassert solution(\"\"\"2 3\n0.00 2.01\n\"\"\") == \"no fika\"\nassert solution(\"\"\"2 3\n0.00 2.00\n\"\"\") == \"no fika\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2'\n\nSample Input:\n2 3\n0.00 0.00\nSample Output:\nNo fika\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('2 1\\n0.00 2.00') == 'no fika'\nassert solution('3 1\\n0.00 2.00') == '1.99'\nprint('\u2705')\n\n'''\n\n\nimport re"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('10 10\\n0.00 0.00') == '10'\nassert solution('10 10\\n0.00 0.00') == 'no fika'\nassert solution('10 10\\n0.00 0.00') == 'no fika'\n\n----"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 4') == 'no fika'\n'''\n\nimport math\nimport sys\nimport os\nsys.path.append(os.path.dirname(__file__))\nimport unittest"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\nassert solution('1000000000 3\\n0.00 2.00') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"2\"\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n0.00 0.00\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\n\nassert solution('5\\n0 0\\n10 0\\n5 0\\n0 0') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n0 0\n10 0\n2\n30 0\n15 0\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n0 0\n10 0\n2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0\\n2\\n30 0\\n15 0\\n') == \"10\""
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '10'\nassert solution('2 0') == '10'\nassert solution('2 0 0') == '10'\nassert solution('2 0 0 0') == '10'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10'\nassert solution('1') == '2'\nassert solution('10') == '20'\nassert solution('1000000') == '1999999'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n0 0\n2\n30 0\n15 0\n''') == '10'\n\nassert solution('''\n3\n0 0\n10 0\n2\n30 0\n15 0\n''') == '15'\n\nassert solution('''\n4\n0 0\n10 0\n2\n30 0\n15 0\n''') == '10'\n\nassert solution('''\n5\n0 0\n10 0\n2\n30 0\n15 0\n''') == '15'\n\nassert solution('''\n6\n0 0\n10 0\n2\n30 0\n15 0\n''') == '0'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"10\"\nassert solution(input_string=\"\"\"\n2\n0 0\n10 0\n2\n30 0\n15 0\n\"\"\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n10 0\n2\n30 0\n15 0\n''') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"10.0000000000\"\nSample Input:\n3\n0 0\n10 0\n0 5\n0 10\nSample Output:\n2\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\\n') == '10'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join(['2 4', 'W 10 0', 'W 10 3', 'E 17 4'])) == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\nE 16 4\nE 16 3\nE 17 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\nW 10 0\nW 10 1\nE 17 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\nE 12 4\nE 11 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\nE 12 4\nE 12 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\nW 10 0\\ne 10 3\\nE 17 4') == '0'\nassert solution('2\\n2\\nW 2 3\\ne 3 1\\nE 1 2') == '0'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n    1\n    0\n    1\n    1\n    0\n    1\n    0\n    \"\"\") == \"0\"\n    assert solution(\"\"\"\n    1\n    0\n    1\n    1\n    0\n    0\n    1\n    \"\"\") == \"2\"\n    assert solution(\"\"\"\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    \"\"\") == \"4\"\n    assert solution(\"\"\"\n    1\n    1\n    0\n    0\n    0\n    0\n    0\n    \"\"\") == \"0\"\n    assert solution(\"\"\"\n    1\n    1\n    0\n    0\n    0\n    0\n    0\n    \"\"\") == \"0\"\n    "
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 3\nW 8 9\nE 8 8\nW 9 1\nE 9 3\nE 1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"8 3\\nW 10 0\\nW 10 3\\nE 17 4\") == \"0\"\nassert solution(\n    \"10 3\\nW 10 0\\nE 10 3\\nW 17 4\") == \"1\"\nassert solution(\n    \"8 3\\nW 10 0\\nW 10 3\\nW 10 6\\nE 17 4\\nE 10 5\\nE 10 5\\nW 10 2\\nW 10 7\\nE 17 4\\nE 10 5\\nE 10 5\\nE 10 4\\nE 10 4\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 17 4\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nE 17 4\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nW 10 2\\nE 10 4\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nW 10 2\\nE 10 4\\nW 10 7\\nW 10 6\\nW 10 2\\nE 10 4\\nW 10 7\\nW 10 6\\nW 10 2\\nE 10 4\\nE 10 5\\nE 10 5\\nE 10 4\\nE 10 4\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nW 10 2\\nE 10 4\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nE 10 5\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 5\\nW 10 2\\nW 10 7\\nW 10 6\\nE 10 4\\nW 10 2\\"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"8 3\\nW 10 0\\nW 10 3\\nE 17 4\"\n    ) == \"0\"\nassert solution(\n    \"0 1\\nW 10 0\\nW 10 3\\nE 17 4\\n0 2\\nE 10 1\\nE 10 2\\n\"\n    ) == \"1\"\nassert solution(\n    \"6 3\\nW 10 0\\nW 10 3\\nW 10 5\\nE 17 4\\nE 17 5\\nE 10 2\\n\"\n    ) == \"1\"\nassert solution(\n    \"1 1\\nW 10 0\\nW 10 3\\nE 17 4\\nE 17 5\\nE 10 2\\n\"\n    ) == \"2\"\nassert solution(\n    \"3 1\\nW 10 0\\nE 10 1\\nE 10 2\\n\"\n    ) == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0\\n1\\n\") == \"0\"\nassert solution(\"2\\n1\\n2\\n\") == \"1\"\nassert solution(\"5\\n0\\n0\\n0\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'\n\"\"\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\nassert solution('''\n5\n5 4\n2 6\n3 7\n1 8\n1 9\n''') == '2'\n\n'''\n\uc815\ud655\uc131  \ud14c\uc2a4\ud2b8\n\ud14c\uc2a4\ud2b8 1 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 2 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 3 \u3009    \ud1b5\uacfc (0.03ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 4 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 5 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 6 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 7 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 8 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 9 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 10 \u3009    \ud1b5\uacfc (0.06ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 11 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 12 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 13 \u3009    \ud1b5\uacfc (0.08ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 14 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 15 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 16 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 17 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 18 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 19 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 20 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 21 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 22 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 23 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 24 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 25 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 26 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 27 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 28 \u3009    \ud1b5\uacfc (0.08ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 29 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 30 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 31 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 32 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 33 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 34 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 35 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 36 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 37 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 38 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 39 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 40 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 41 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 42 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 43 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 44 \u3009    \ud1b5\uacfc (0.07ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 45 \u3009    \ufffd"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\n\nassert solution('''\n4\n3 4\n4 5\n2 3\n6 4\n''') == '4'\n\nassert solution('''\n3\n4 5\n1 4\n2 3\n''') == '4'\n\nassert solution('''\n3\n1 3\n2 2\n''') == '2'\n\nassert solution('''\n1\n3\n5\n''') == '3'"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '3'\nassert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '2'\nassert solution('5') == '1'\nassert solution('100') == '3'\nassert solution('1000000') == '2'"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n8\\n5 6') == '3'\nassert solution('5\\n8\\n5 6') == '3'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '3'\nassert solution('5 6') == '4'\nassert solution('3 4') == '1'\nassert solution('5 13') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('100\\n5000000\\n1\\n100\\n5000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1000000\\n1"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n8\n5 6\n3 4\n5 13\n6 10''') == '3'\nassert solution('''5\n5 6\n3 4\n5 13\n6 10''') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10') == '6'"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"5 1 2\") == \"3\"\nassert solution(\"5 1 2 3\") == \"4\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n10 3 3\n''') == 'impossible'\n\nassert solution('''5 5\n8 3 3 3 4\n''') == '''B B A B A\nA A A A A\nC A A A A\nA A A A A\nC A A A A\n'''\n\nassert solution('''6 4\n6 1 1 1\n''') == '''B A A A A\nA A A A A\nB A A A A\nA A A A A\nC A A A A\n'''\n\nassert solution('''5 4\n10 3 3 3 3\n''') == '''B A A A A\nA A A A A\nC A A A A\nA A A A A\nC A A A A\n'''\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"ABBBA\"\nassert solution(\"5 2\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4 4\n10 3 3\n\"\"\"\n) == \"\"\"\nAABB\nABAB\nABAB\nABAB\nABAB\nABAB\nABAB\n\"\"\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n10 3 3') == \"ABC\"\nassert solution('5 10 3\\n7 3 3\\n5 5 3\\n5 5 3') == \"BAAAB\"\nassert solution('4 4\\n20 3 3\\n5 5 3\\n5 5 3') == \"BAAAB\"\nassert solution('4 4\\n15 3 3\\n5 5 3\\n5 5 3') == \"CABAB\"\nassert solution('4 4\\n40 3 3\\n5 5 3\\n5 5 3') == \"CABAB\"\n\"\"\"\n\nR = int(input())\nC = int(input())\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"ABC\"\nassert solution(\"4 4\") == \"ABCABC\"\nassert solution(\"10 3 3\") == \"AABCAABCAABC\""
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4 4\n10 3 3\n\"\"\") == \"\"\"2\n1\n0\n\"\"\"[:-1]\n\nassert solution(\"\"\"5 5\n2 2 2 2 2\n\"\"\") == \"\"\"impossible\n\"\"\"[:-1]\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 1') == 'ABBCABB'\nassert solution('10 10') == 'AAABBBAAAAABBBAAAB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\nA') == 'AB'\nassert solution('2\\n5\\nABC') == 'CAB'\nassert solution('4\\n8\\nABABC') == 'ABABC'\nassert solution('4\\n8\\nABCD') == 'ABCD'\nassert solution('4\\n8\\nABCB') == 'ABCB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"ABC\"\nassert solution(\"1 1 1\") == \"ABCD\"\nassert solution(\"2 2 2\") == \"ABCDABCD\"\nassert solution(\"3 3 3\") == \"ABCDAAB\"\nassert solution(\"4 4\") == \"ABCDAAB\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n10 3 3\n''') == 'impossible'\n\nassert solution('''\n5 5\n11 2 5 6\n''') == 'BAD'\n\nassert solution('''\n10 9\n10 1 9 3\n''') == 'A'\n\nassert solution('''\n10 9\n10 8 9 1\n''') == 'BAD'\n\nassert solution('''\n10 9\n10 8 9 1\n''') == 'BAD'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\\n\") == \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\n'''"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"11\\n\"\n    \"BETWEEN\\n\"\n    \"SUBTLE\\n\"\n    \"SHADING\\n\"\n    \"AND\\n\"\n    \"THE\\n\"\n    \"ABSENCE\\n\"\n    \"OF\\n\"\n    \"LIGHT\\n\"\n    \"LIES\\n\"\n    \"NUANCE\\n\"\n    \"IQLUSION\\n\"\n    \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('''\n3\nBTWNS\nBTHSDG\nNDTHBSN\nCFLHHT\nLSTHNNCFQLSN\n''') == 'BTWNS BTWNS BTWNS'\nassert solution('''\n3\nBTWNS\nBTHSDG\nNDTHBSN\nCFLHHT\nLSTHNNCFQLSN\n''') == 'BTWNS BETWEEN'\nassert solution('''\n3\nBTWNS\nBTHSDG\nNDTHBSN\nCFLHHT\nLSTHNNCFQLSN\n''') == 'BTWNS BETWEEN BETWEEN'\nassert solution('''\n10\nSATIN\nNUDGED\nCAT\nCATS\nSATIN\nCAT\nCAT\nCAT\nCAT\nCAT\nSATIN\nCAT\nSATIN\nCAT\nCAT\nSATIN\nCAT\nCAT\nCAT\nCAT\nCAT\nSATIN\nCAT\nCAT\nSATIN\nCAT\nSATIN\nCAT\nCAT\nCAT\nCAT\nCAT\nSATIN\nCAT\nCAT\nSATIN\nCAT\nCAT\nSATIN\nCAT\nCAT\nSATIN\nCAT\nCAT\nCAT\nCAT\nCAT\nSATIN\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\OF\\LIGHT\\LIES\\NUANCE\\IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('1\\nA') == 'A'\nassert solution('1\\nAB') == 'AB'\nassert solution('1\\nABCD') == 'ABCD'\nassert solution('1\\nABCDEFGHIJK') == 'ABCDEFGHIJK'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n''')\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"AB\"\nassert solution(\"5\") == \"BE\"\nassert solution(\"5\") == \"BE\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('9\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION') == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('7\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION') == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"abrahele\nhlehleh\n\"\"\") == \"12\"\nprint(solution(r\"\"\"abrahelleh\nlehlehleh\n\"\"\") == \"12\")\nprint(solution(r\"\"\"abrahele\nhlehleh\n\"\"\") == \"0\")\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abrahellehhelleh') == '12'"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abrahellehhelleh') == '12'\nprint(solution(input()))\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abrahellehhelleh') == '12'\n\"\"\"\n\nfrom itertools import permutations\n\ns = list(stdin)\n\nfor i in permutations(s):\n    if ''.join(i) == stdin:\n        print(len(i))\n        exit()\n\nprint(0)"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"12\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\nabra\nhe\nll\nle\n\"\"\") == \"12\"\n\nassert solution(\n\"\"\"\naaa\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\nabc\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\ncba\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\nzxy\n\"\"\") == \"0\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"12\"\nassert solution(\"abrahell\") == \"12\"\nassert solution(\"abracadabra\") == \"0\"\nassert solution(\"abrahe\") == \"0\"\nassert solution(\"hell\") == \"0\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n35\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 1 1 1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"70\"\nassert solution(\n    \"\"\"\n3\n1 3 1\n2 2 1\n3 1 1\n\"\"\") == \"35\"\n\nassert solution(\n    \"\"\"\n5\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"70\"\n\nassert solution(\n    \"\"\"\n3\n1 2\n2 3\n3 1\n\"\"\") == \"34\"\n\nassert solution(\n    \"\"\"\n9\n1 2 3 4 5 6 7 8 9\n2 3 5 8 9 1 4 7 6\n3 7 9 8 1 4 5 6 2\n4 6 9 8 1 5 3 7 2\n5 8 1 4 7 9 3 6 2\n6 1 5 3 7 9 8 4 2\n7 2 9 6 1 8 5 3 4\n8 9 1 6 2 5 3 7 4\n9 3 6 1 8 5 7 4 2\n\"\"\") == \"6787\""
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '70'\n\nassert solution('''\n5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '70'\n\nassert solution('''\n3\n1 1 1\n1 1 1\n1 1 1\n''') == '50'\n\nassert solution('''\n3\n2 2 2\n2 2 2\n2 2 2\n''') == '50'\n\nassert solution('''\n2\n3 3\n3 3\n''') == '0'"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '70'\nassert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1 1 1 1 1 1\n2 2 2 2 2 2\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1''') == '70'\nassert solution('''1\n1 1 1\n1 1 1''') == '0'\nassert solution('''6\n1 1 1 1 1 1\n2 2 2 2 2 2\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1''') == '180'\nassert solution('''12\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n2 2 2 2"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n7\n6\n5\n6\n''') == '7'\n\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n7\n7\n6\n5\n''') == '7'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '7\\n7\\n9\\n7'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '8'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '8'\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n''') == '7'\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n0 1\n0 4\n'''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"8\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"8\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8'\nprint('Done!')"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\"\"\") == \"7\"\n\nassert solution(r\"\"\"\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n10\n''') == '10'\n\nassert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n1 3 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 5') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('0 1') == '1'\nassert solution('0 4') == '4'\nassert solution('1 4') == '4'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"7\"\nassert solution([\"10 5\", \"1 2 3 4 5 6 7 8 9 10\", \"0 1\", \"0 4\", \"1 4\", \"0 1\", \"0 4\", \"1 4\", \"0 1\", \"0 4\"]) == \"10\"\nassert solution([\"10 5\", \"1 2 3 4 5 6 7 8 9 10\", \"0 1\", \"0 4\", \"1 4\", \"0 1\", \"0 4\", \"1 4\", \"0 1\", \"0 4\"]) == \"7\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"2 4 7\\n-2 -1\\n-1 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"2 4 7\\n-2 -1\\n-1 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"2\"\nassert solution(\"10 4 7\\n-2 -1\\n-1 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"2 4 7\\n-2 -1\\n-1 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"2\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"-2 0\") == \"0\"\nassert solution(\"0 -1\") == \"0\"\nassert solution(\"-2 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"1\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 7') == '6'\nassert solution
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('1 2 5') == '4'\nassert solution('2 3 3') == '3'\nassert solution('1 2 3') == '3'\nassert solution('1 1 3') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\"\"\") == \"6\"\n\nassert solution(\n\"\"\"2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\"\"\") == \"8\"\n\nassert solution(\n\"\"\"1 2 4 8 2 1 5 0 7 6 0 0 3 5 1 7 0 0 4 0 0 0 1 2 2 0 0 2 0 0 1 2 3 0 0 5 0 0 0 3 4 1 1 3 3 0 0 0 1 1 2 0 0 2 3 0 1 5 0 0 2 3 1 2 0 1 0 0 0 2 3 3 0 1 0 2 0 0 1 3 1 0 1 2 1 1 1 2 1 0 0 2 2 0 0 0 0 3 0 0 1 2 2 0 0 1 0 1 1 1 1 3 0 1 1 1 3 1 0 1 2 1 2 0 1 0 1 1 1 2 3 2 0 1 1 0 1 2 1 1 1 1 1 3 3 0 0 1 2 3 0 1 0 1 0 2 2 0 0 3 2 1 0 0 2 2 1 2 1 0 2 3 2 0 1 0 0 1 1 1 1 1 1 2 0 1 0 0 2 1 2 0 1 1 1 1 3 0 1 2 1 0 0 2 2 0 0 1 2 2 0 0 1 1 1 1 1 1 1 3 1 1 0 0 1 0 1 1 1 1 1 1 1 3 1 0 1 2 1 2 0 1 1 1 1 1 1 1 3 2 3 0 1 1 2 3 1 2 2 3 2 0 1 1 2 3 0 1 1 1 1 1 2 3 1 0 1 1 1 1 1 2 0 1 1 1 1 1 1 3 1 0 1 1 1 1 1 1 1 1 3 1 1 1 1 1 3 2 2 1 0 0 1 2 3 0 1 1 1 1 1 1 1 1 1 3 2 1 0 0 1 1 1 1 1 1 1 1 2 1 0 0 2 1 2 0 1 1 1 1 1 1 1 1 1 1 3 0 1 1 1 1 1 1 1 1 1 1 1 1 2 0 1 1 1 1 1 1 1 1 1 1 1 1 1 3 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 1 0 2 1 2 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == '6'\n\nassert solution('''\n1 3\n3 2\n1 2\n1 2\n2 0\n''') == '1'\n\nassert solution('''\n1 4\n4 1\n4 2\n2 1\n1 0\n''') == '4'\n\nassert solution('''\n2 5\n5 5\n5 6\n5 7\n6 4\n''') == '5'\n\nassert solution('''\n3 4\n4 4\n4 6\n4 8\n4 9\n4 3\n3 8\n''') == '5'"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('10 5 7') == '9'\nassert solution('1 1000000000') == '1'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"1 2 3\\n-2 1\\n-2 1\\n0 -1\") == \"1\"\nassert solution(\"4 4 6\\n-2 1\\n-2 1\\n0 -1\\n1 -1\\n1 -1\\n1 -1\") == \"1\"\nassert solution(\"3 4 8\\n-2 1\\n-2 1\\n0 -1\") == \"2\"\nassert solution(\"4 4 8\\n-2 1\\n-2 1\\n0 -1\\n1 -1\\n1 -1\\n1 -1\") == \"2\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1''') == '6'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1 1 1 1\"\n) == \"3\"\nassert solution(\n    \"1 1 1 1\"\n) == \"1\"\nassert solution(\n    \"1 0.99 1 0.99 1\"\n) == \"0\"\nassert solution(\n    \"3 1 2 2 2 2 2 2 2\"\n) == \"2\"\nassert solution(\n    \"0 0 1 0 0 0 0 1\"\n) == \"0\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\n\nassert solution(\"1 3 4 40\") == \"3\"\n\nassert solution(\"1 4 1.001 4 40\") == \"4\"\n\nassert solution(\"3 1 3 4 40\") == \"4\"\n\nassert solution(\"10 3 1.001 4 40\") == \"3\""
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 4 40') == '3'\n\"\"\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('5 2 3 40') == '2'\nassert solution('5 3 4 40') == '3'\n'''\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 4 5 6') == '2'\nassert solution('1 2 2 1 3') == '4'\nassert solution('4 5 6 7 8 9') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 4 40\") == \"3\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 2 1 8') == '1'\n\ns, r, n, z = map(int, stdin.strip().split(' '))\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n4 5 6') == '2'\nassert solution('1.1 1.1 2.2 1.1\\n2 2 4 2\\n3 3 1\\n3 4 2') == '4'\nassert solution('100 100 20\\n1 2 3\\n3 2 4') == '1'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('10 5 1 40') == '5'\nassert solution('2 1 1 5') == '2'\nassert solution('2 1 2 2') == '2'\nassert solution('3 3 1 6') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 1 4 40''') == '3'\nassert solution('''3 4 1 40''') == '4'\nassert solution('''3 7 1 40''') == '3'\nassert solution('''3 10 1 40''') == '3'\nassert solution('''3 10 1 40''') == '3'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99\\n3\\n1 2 3\\n'\nassert solution('''\n2 7\n1 2 3\n4 1 2\n''') == '6\\n1 2 3\\n4\\n'\nassert solution('''\n4 8\n0 1 5\n1 2 3\n3 2 4\n5 2 1\n''') == '4\\n1 2 3\\n2\\n'\nassert solution('''\n2 5\n0 0 1\n1 1 2\n2 2 3\n''') == '2\\n0 1 2\\n1\\n2 3\\n'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''2 1\n3\n1 1 2''') == '1 2'\nassert solution('''8\n20 21\n5 6\n4 6\n4 6\n1 5\n2 5\n4 5\n8 9\n5 6\n2 6\n4 4\n3 4\n2 5\n''') == '8 2'\nassert solution('''7\n20 21\n5 6\n4 6\n4 6\n1 5\n2 5\n4 5\n8 9\n5 6\n2 6\n4 4\n3 4\n2 5\n''') == '8'\nassert solution('''10\n2 3\n5 3\n5 6\n3 3\n3 6\n6 3\n5 6\n6 5\n3 6\n2 6\n3 7\n3 5\n5 3\n6 4\n4 6\n7 4\n6 5\n3 6\n5 7\n4 6\n7 5\n7 4\n''') == '5'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\"\n) == \"99\"\nassert solution(\n\"\"\"\n3 2\n50 20 10\n2 5 2\n\"\"\"\n) == \"\"\nassert solution(\n\"\"\"\n3 2\n1 2 3\n2 3 1\n\"\"\"\n) == \"\"\nassert solution(\n\"\"\"\n2 3\n1 1\n\"\"\"\n) == \"\"\nassert solution(\n\"\"\"\n3 2\n2 2 1\n2 1 2\n\"\"\"\n) == \"\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n  1 2 3\n  5 2 4\n  0 1 2\n  0 2 0\n  ''') == '99'\nassert solution('''\n  2 5 1\n  2 0 2\n  2 4 0\n  ''') == '0'\nassert solution('''\n  4 5 1\n  3 3 4\n  1 0 2\n  2 1 3\n  2 3 2\n  ''') == '99'\nassert solution('''\n  6 6 2\n  6 5 4\n  6 7 0\n  4 5 5\n  0 2 5\n  1 4 0\n  2 6 2\n  0 4 1\n  ''') == '99'\nassert solution('''\n  6 3 2\n  5 5 3\n  6 7 0\n  2 4 5\n  4 5 2\n  ''') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\nassert solution('''\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '0'\nassert solution('''\n6 10\n1 2 3 4 5 6 7 8 9 10\n2 1 3\n2 3 2 2\n1 0 2 2\n0 0 1 1\n0 0 0 0\n0 0 0 0\n1 1 1 0\n2 3 2 0\n2 3 2 1\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '10'\nassert solution('''\n1 1\n1 2\n2 3\n0 0\n''') == '0'\nassert solution('''\n3 2\n1 2 1\n1 1 0\n2 0 2\n''') == '1'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"84\"\nassert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == \"99\"\nassert solution('''\n2 1 0\n0 1 0\n''') == \"0\"\nassert solution('''\n3 8\n96 22 1\n10 40 5\n32 55 0\n83 45 2\n98 22 0\n79 22 0\n66 40 -1\n66 20 -1\n''') == \"99\"\nassert solution('''\n2 0\n-1 0\n''') == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"1 10\") == \"1 2\"\nassert solution(\"1 -1\") == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3\\n1 2 3\\n1 2 3\\n') == '0'\nassert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\nassert solution('2 3\\n1 2 3\\n1 2 3\\n') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == ''\nassert solution('0 2\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2 4\"\nassert solution() == \"3 4\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2 3 4'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '4 5 2'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '3 4 5'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n2 3\\n3 4') == '2 3\\n4 2'\nassert solution('4\\n3 1 4\\n1 2\\n2 3\\n3 4') == '3 4\\n2 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2 4'\nassert solution('''4\n1 2\n2 3\n3 4\n''') == '3 4'\nassert solution('''4\n1 2\n2 3\n3 4\n''') == '3 4'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4 2 3 4'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('1') == '1'\nassert solution('2 3') == '1 2 3'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2 3\"\nassert solution(\"4\\n1 2\\n3 4\\n2 3\") == \"4 3\"\nassert solution(\"4\\n1 2\\n3 4\\n2 3\") == \"4 3\"\nassert solution(\"4\\n1 2\\n1 3\") == \"2 1\"\nassert solution(\"4\\n2 1\\n2 3\") == \"3 2\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('100') == '10'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2 3\n3 4\n''') == '4 2'\nassert solution('''5\n2 3\n3 4\n4 1\n1 2\n''') == '3 4'\nassert solution('''6\n2 3\n3 4\n4 1\n1 2\n2 5\n5 6\n''') == '4 1'\nassert solution('''7\n2 3\n3 4\n4 1\n1 2\n2 5\n5 6\n6 7\n''') == '6 7'\nassert solution('''8\n2 3\n3 4\n4 1\n1 2\n2 5\n5 6\n6 7\n7 8\n''') == '6 7'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n1 2\\n2 3\\n3 4\\n'\n    ) == '2 4\\n3 2\\n'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n2 2\n3 2\n4 1\nSample Output:\n9.0000\n12\n12.00000\n9.0''') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '12.0'\nassert solution('5') == '12.0'\nassert solution('1') == '9.0'\nassert solution('2') == '12.0'\nassert solution('4') == '12.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1\n2 2\n3 2\n''') == '9.0'\nassert solution('''\n4\n1 1\n2 2\n3 2\n4 1\n''') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 1\n2 2\n3 2\n4 1\n5 1''') == '9.0000'\n\nassert solution('''4\n1 1\n2 2\n3 2\n4 1\n5 1''') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4') == '9.0000'\nassert solution('3\\n2\\n1\\n4') == '12.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.00000\"\nassert solution(\"3\\n1 1\\n2 1\\n3 1\") == \"9.0\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1\n2 2\n3 2\n4 1\n''') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\"\n    \"1 1\"\n    \"2 2\"\n    \"3 2\"\n    \"4 1\"\n    ) == \"9.0000\"\n\nassert solution(\n    \"5\"\n    \"1 1\"\n    \"2 2\"\n    \"3 2\"\n    \"4 1\"\n    \"5 1\"\n    ) == \"12.00000\"\n\nassert solution(\n    \"1\"\n    \"1\"\n    ) == \"9.0000\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1 1\n2 2\n3 2\n4 1''') == '9.0'\nprint(solution('''1\n1 1'''))\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1\n2 2\n3 2\n''') == '9.00000'\n\nassert solution('''4\n1 1\n2 2\n3 2\n4 1\n''') == '12.00000'\n\nassert solution('''5\n1 2\n1 3\n2 4\n2 3\n3 4\n''') == '12.00000'\n\nassert solution('''3\n1 1\n2 2\n3 2\n''') == '9.00000'\n\nassert solution('''10\n1 1\n2 2\n3 2\n4 3\n5 2\n6 2\n7 2\n8 2\n9 2\n10 2\n''') == '10.0'"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'DI'\nassert solution('2') == 'ST Y'\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'DI A\\nDI X'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"ST A\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'DI Y'\nassert solution('101') == 'DI Y'\nassert solution('10') == 'DI Y'\nassert solution('1') == 'DI Y'\nassert solution('000') == 'DI Y'"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'DI A\\n'\nassert solution('2') == 'DI X\\n'\nassert solution('3') == 'DI Y\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\nDI Y\\n'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == \"ST A\\nPL Y\\nDI Y\"\nassert solution('10') == \"ST A\\nST X\\nPH X\\nAD\\nPL Y\\nDI Y\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == \"DI A\\nDI X\\nPH A\\nPH X\\nAD\\nDI A\\nDI X\"\n'''\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n\n'''\nimport sys\nimport itertools\n\nstdin = sys.stdin.read()\n\nlst = []\nlst = stdin.split(\"\\n\")\nprint(*[f\"ST {i}\" for i in lst])\nprint(*[f\"PH {i}\" for i in lst])\nprint(*[f\"AD\\nPL {i}\\nDI {i}\"])"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"DI A\\n\"\n\"\"\""
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"2 1 2\") == \"1\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 4 5') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n''') == '2'\nassert solution('''\n1 7 5\n00000000 00111111 00000001 00111111 00010000\n11111111 00010000 00000001 00111111 00010000\n11111111 00010000 00000001 00111111 00010000\n11111111 00010000 00000001 00111111 00010000\n11111111 00000001 00111111 00000001 00010000\n00000000 00000001 00111111 00000001 00010000\n00000000 00111111 00000001 00111111 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000\n00000000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00010000\n00000000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000 00010000 00000001 00111111 00000001 00010000 00000001 00010000\n00000000"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 1') == '1'\nassert solution('2 1 5') == '4'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n''') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5 6\\n0000 FFFF 0000 0000 0000 0000\\nFFFF FFFF 0000 FFFF FFFF 0000\\n0000 0000 0000 FFFF 0000 0000\\n0000 FFFF FFFF FFFF FFFF 0000\\n0000 0000 0000 0000 0000 0000\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n10 7 10\n
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 1') == '1'\n\"\"\"\n\nimport itertools\nfrom functools import reduce\n\nn, r, c = [int(x) for x in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append([int(x) for x in input()])\n\nregions = list(itertools.product(range(n), range(n)))\nregion_counts = {region: 0 for region in regions}\n\nfor row in range(n - r + 1):\n    for col in range(n - c + 1):\n        for region in regions:\n            # check for the white region\n            current_region = (region[0] + row, region[1] + col)\n            region_start = 0\n            region_end = c\n            while region_start <= region_end:\n                current_region_start = current_region[0] + region_start\n                current_region_end = current_region[0] + region_end\n                current_region_start_col = current_region[1] + region_start\n                current_region_end_col = current_region[1] + region_end\n                if current_region_start < 0 or current_region_end < 0 or current_region_start_col < 0 or current_region_end_col < 0:\n                    region_counts[region] = 0\n                    break\n                elif current_region_end > n or current_region_start > n:\n                    region_counts[region] = 0\n                    break\n                elif not grid[current_region_start][current_region_start_col] and not grid[current_region_end][current_region_end_col]:\n                    region_counts[region] = region_counts[region] + 1\n                    break\n                elif grid[current_region_start][current_region_start_col] or grid[current_region_end][current_region_end_col]:\n                    region_counts[region] = 0\n                    break\n                region_start += 1\n                region_end -= 1\n\nprint(len(region_counts))\n\nfor region, count in region_counts.items():\n    print(region, count)"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('2 4 2') == '2'\nassert solution('2 5 2') == '1'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"\"\"abaaba\"\"\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"abaaba\"\nassert solution(\"5\\nS -> a\\nS -> b\\nS ->     where are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"abaaba\"\nassert solution(\"5\\nS -> aSa\\nS -> bSb\\nS ->     where are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"abaaba\"\nassert solution(\"5\\nS -> a\\nS -> b\\nS ->     a\\nS -> b\\nS ->\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"a\"\nassert solution(\"5\\nS -> a\\nS -> b\\nS ->     a\\nS -> b\\nS ->\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"b\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'NONE'\nassert solution('''S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'a'\n'''\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abbbbbbbbbbbbbbbbba'\nassert solution('10\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\nwhere are the abaaba palindromes on this line\\nnone on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\nSample Output:\nababababbbababababa\nababababbbbababababa\nSample Input:\n5\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\nSample Output:\nabaaba\na\nabaaba\nabaaba\na\nb\nb\na\na\na\na\nb\nNONE\na\nNONE\nb\nNONE\nSample Input:\n6\nS -> aSb\nS -> cSd\nS -> a\nS -> b\nS -> c\nS -> d\nSample Output:\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\nb\na\na\na\na\na\na\na\na\na\nb\na\na\na\na\na\na\na\na\na\na\na\na\na\na\nb\nb\na\na\na\na\na\nb\nb\na\na\nb\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n\") == \"abaaba\"\n\"\"\""
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome\\n') == 'abaaba'"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"\"\"abaaba\nNONE\nabbbbbbbbbbbbbbbbba\na\n\"\"\""
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nS->aS\\nS->bS\\nS->a\\nS->b\\nS->\\n\") == \"abaaba\"\nassert solution(\"5\\nS->aS\\nS->bS\\nS->a\\nS->b\\nS->\\n\") == \"a\"\nassert solution(\"1\\nS->a\\nS->\\n\") == \"a\"\nassert solution(\"1\\nS->\\n\") == \"None\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\n\") == \"abaaba\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n5\n4\n5\n0\n2\n''') == '4'\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200''') == '4'\nassert solution('''20\n4\n5\n5\n2\n1\n2\n3\n5\n2\n5\n5\n5\n5\n4\n3\n1\n4\n3\n5\n2\n4\n1\n2\n5\n3\n1\n1\n2\n4\n5\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n4\n3\n5\n4\n3\n4\n2\n4\n3\n5\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0\\n4\\n') == '4\\n'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\n\"\"\"\nfrom typing import List\nimport unittest"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n\nassert solution('''\n5\n1 2 5 3 7\n5 0\n4\n''') == '6'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n\nassert solution('''5\n4 2 1 4\n2 4 0\n0\n4\n''') == '2'\n\nassert solution('''5\n4 2 1 4\n2 4 0\n0\n4\n''') == '0'\n\nassert solution('''3\n2 2 1\n1 3\n3 4\n''') == '2'\n\nassert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '2'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n\n'''\n\n\n'''"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"GO FOR IT\"\nassert solution(\"3 3\") == \"GO FOR IT\"\nassert solution(\"1 1\") == \"NO CHANCE\"\n\"\"\"\n\nimport math\nimport sys\n\nA, F = map(int, input().split())\nW, L = map(int, input().split())\n\ntiles = []\nfor line in sys.stdin:\n    tiles += line.rstrip().split(' ')"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'SUCCESS'\nassert solution('2 3') == 'GO FOR IT'\nassert solution('2 3') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\") == \"SUCCESS\"\nassert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\\n\") == \"NO WAY\"\nassert solution(\"2 4\\n4 4\\nWSBB\\nWSBB\\n\") == \"NO WAY\"\nassert solution(\"2 3\\n4 4\\nWSBB\\nWSBB\\n\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\nassert solution('''3 2\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'SUCCESS'\nassert solution('''3 2\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'NO WAY'\nassert solution('''3 3\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'NO WAY'\nassert solution('''10 10\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWBWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWWWWWWWWWWWW\n''') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 3\") == \"GO FOR IT\"\nassert solution(\"2 3\\n3 3\") == \"NO WAY\"\nassert solution(\"1 3\\n3 3\") == \"SUCCESS\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"GO FOR IT\"\n\nSample Input:\n3 3\n1 2\nWWWW\nWBW\nWWWW\nSample Output:\nGO FOR IT\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'GO FOR IT'\nassert solution('''2 4\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\n\nassert solution('''\n2 1\n3 3\nWGW\nSBB\n''') == 'NO CHANCE'\n\nassert solution('''\n2 1\n3 4\nWBW\nGWW\n''') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'GO FOR IT'\n\nassert solution('''\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n''') == 'SUCCESS'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('10 4\\n8 5 9 3') == '19'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n900\n800\n700\n400\n300\n200\n''') == '2243'\nassert solution('''\n5\n800\n900\n900\n900\n900\n''') == '0'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 900\n800 700 400 300 200''') == '2243'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n900\\n800\\n700\\n400\\n300\\n200') == '2243'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2243\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''5 900\n800 700 400 300 200\n''') == '2243'\nassert solution(\n'''2 2\n1\n''') == '2'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n3 4\n7 8 5\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"5 3\") == \"4\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n10 100\n300 300 300 300 300 300 300 300 300 300 300\n''') == '306960'\nassert solution('''\n12 4\n201 402 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202 202\n''') == '17762804896'\nassert solution('''\n14 1\n
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''5 3\n1\n2\n3\n4\n''') == '11'\nassert solution('''5 3\n1\n2\n3\n4\n''') == '2'\nassert solution('''5 1\n1\n''') == '1'\nassert solution('''5 3\n1\n2\n3\n4\n''') == '1'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n? 1 3\\n') == 'no\\nyes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes\\nno\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n= 1 2\n? 1 2\nyes\n= 1 2\nno\n= 1 2\n? 1 2\nyes\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno\n= 1 2\nno"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'yes\\nyes\\nyes\\nno\\nno\\nno\\nno\\nyes\\nno\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n? 1 3\\n= 1 8\\n? 1 3\\n\") == \"yes\\n\"\nassert solution(\"10 4\\n? 1 3\\n= 1 8\\n? 1 3\\n= 3 8\\n? 1 3\\n\") == \"no\\no\\no\\no\\no\\no\\no\\n\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n\") == \"yes\\nno\\n\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4') == 'no\\nyes\\nno\\nyes\\nno\\nno\\nyes\\nyes\\nno\\nno\\nno\\nno\\nyes\\nno'\n\n--Input--\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\nSample Output:\nyes\nno\nyes\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nyes\nno\nyes\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nyes\nyes\nyes\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nyes\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nyes\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\nno\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n= 1 2\\n? 1 2') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 4\\n= 1 3\\n= 1 3\") == \"yes\"\nassert solution(\"1 4\\n= 3 3\") == \"no\"\nassert solution(\"10 10\\n= 2 2\\n= 2 3\") == \"yes\"\nassert solution(\"1 3\\n? 4 5\\n= 1 4\\n? 2 5\\n= 3 5\") == \"no\"\nassert solution(\"1 4\\n? 4 5\\n= 1 5\\n? 3 5\\n= 1 5\") == \"yes\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input(\"\")) == \"0\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 3\n''') == '0'\nassert solution('''\n6 6\n1 2 3 1 4 3 1\n''') == '2'\nassert solution('''\n3 3\n5 6 1 3\n''') == '0'\n''')\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\n\n\"\"\"\n\n\"\"\"\n\nThe previous problem was not very easy to solve. Try to think of a way to solve it by creating a function that takes in an array of integers and returns the maximum score achievable with these integers.\n\n-----Ideas-----\n\nThe only way to solve this problem is to do an exhaustive enumeration on the whole sequence.\n\nSee if you can do that. How?\n\nSort the sequence first.\n\nFind the middle element.\n\nCheck if it's a prime. If so, the score for this middle element is $n-1$. If not, then it's a 0.\n\nIncrement left pointer, unless it reaches the end.\n\nIncrement right pointer, unless it reaches the end.\n\nLet's see how it works:\n\n\"\"\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 3 4 5 6 7 8 9') == '10'\nassert solution('1 3 4 5 6 7 8 9 0') == '1'\nassert solution('5 3 2 5 2 3 5 5 4 3 1') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 0') == '0'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"10 5 4 8 3\") == \"2\"\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n10 5 4 8 3''') == '2'\nassert solution('''100 12\n1 2 4 8 12''') == '2'\nassert solution('''1\n10''') == '1'\nassert solution('''5\n5''') == '0'\nassert solution('''10 1\n1''') == '1'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n2 3 4 7 8 9 10\n''') == \"6\"\nassert solution('''\n11\n1 2 3 4 5 6 7 8 9 10 11\n''') == \"0\"\n\n'''\n============================================================================================================================\n30. Search Insert Position\nhttps://leetcode.com/problems/search-insert-position/\n\nYou are given two sorted arrays nums1 and nums2 of length m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\nYou may assume nums1 and nums2 cannot be both empty.\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n\n============================================================================================================================\n31. Next Permutation\nhttps://leetcode.com/problems/next-permutation/\n\nGiven a list of integers, return the next permutation of that list.\nIf such a permutation does not exist, it should return the list unchanged.\n\nExample 1:\n\nInput: [1,2,3]\nOutput: [1,3,2]\n\nExample 2:\n\nInput: [1,1,5]\nOutput: [1,5,1]\n\n============================================================================================================================\n32. Remove Element\nhttps://leetcode.com/problems/remove-element/\n\nGiven an array nums and a value val, remove all instances of that value in-place and return the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n\nExample 1:\n\nGiven nums = [3,2,2,3], val = 3,\n\nYour function should return length = 2, with the first two elements of nums being 2.\n\nIt doesn't matter what you leave beyond the returned length.\nExample 2:\n\nGiven nums = [0,1,2,2,3,0,4,2], val = 2,\n\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\n\nNote that the order of those five elements can be arbitrary.\n\nIt doesn't matter what values are set beyond the returned length.\n============================================================================================================================\n33. Search in Rotated Sorted Array\nhttps://leetcode.com/problems/search-in-rotated-sorted-array/\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).\n\nFind the minimum element.\n\nThe array may contain duplicates.\n\nExample 1:\n\nInput: [1,3,5]\nOutput: 1\n\nExample 2:\n\nInput: [2,2,2,0,1]\nOutput: 0\n\n============================================================================================================================\n34. Find First and Last Position of Element in Sorted Array\nhttps://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/\n\nGiven an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\n\nYour algorithm's runtime complexity must be in the order of O(log n).\n\nIf the target is not found in the array, return [-1, -1].\n\nExample 1:\n\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n\nExample 2:\n\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n\n============================================================================================================================\n35. Search Insert Position\nhttps://leetcode.com/problems/search-insert-position/\n\nGiven an array of integers nums and an integer target, return the index if target is found. If not, return the index where it would be if it were inserted in order.\n\nYou may assume no duplicates in the array.\n\nExample 1:\n\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExample 2:\n\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\n============================================================================================================================\n36. Sort Colors\nhttps://leetcode.com/problems/sort-colors/\n\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\n\nNote: You are not suppose to use the library's sort function for this problem.\n\nExample:\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\n=========================================\nDynamic Programming / Recursion\n=========================================\n\nclass Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        def swap(i, j):\n            nums[i], nums[j] = nums[j], nums[i]\n        \n        n = len(nums)\n        \n        def dp(i, j):\n            # base case\n            if i >= j: return\n            \n            # if nums[i] == 0:\n            #     return dp(i + 1, j)\n            # if nums[i] == 2:\n            #     return dp(i + 1, j)\n            \n            # if nums[j] == 0:\n            #     return dp(i, j - 1)\n            # if nums[j] == 2:\n            #     return dp(i, j - 1)\n            \n            # if nums[i] == 0 and nums[j] == 0:\n            #     swap(i, j)\n            #     return dp(i + 1, j - 1)\n            # if nums[i] == 0 and nums[j] == 2:\n            #     swap(i, j)\n            #     return dp(i + 1, j)\n            # if nums[i] == 2 and nums[j] == 0:\n            #     swap(i, j)\n            #     return dp(i, j - 1)\n            # if nums[i]"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n10 5 4 8 3\n''') == '2'\nassert solution('''\n8\n10 5 4 8 3\n''') == '4'\nassert solution('''\n10\n10 5 4 8 3\n''') == '3'\nassert solution('''\n5\n10 5 4 8 3\n''') == '3'\nassert solution('''\n100\n10 5 4 8 3\n''') == '4'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\nassert solution('6 3\\n5 5 6 3 4 3') == '3'\nassert solution('1 2\\n3 4 5') == '4'\nassert solution('1 2\\n3 4 5\\n1') == '1'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '3'\nassert solution('1 4') == '7'\n\nimport collections\nimport math"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"7\"\nassert solution(\"1 2\") == \"1\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 127\") == \"1083\"\nassert solution(\"1 20\") == \"30\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n127') == '1083'\nassert solution('2\\n1') == '2'\nassert solution('10\\n8') == '1'\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 127') == '1083'"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 127\") == \"1083\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1083'\nassert solution('2 2') == '1083'\n\"\"\""
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"9\"\nassert solution(\"6\") == \"10\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 127') == '1083'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\nHow much is 6 times 9? 42\\n') == '2.0000000000'\nassert solution('3 3\\nWhat is the air speed velocity of an unladen swallow? African?\\n') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\nassert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n''')\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '2.0000000000'\nassert solution('5 5') == '3.0000000000'\n\"\"\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n\nassert solution('''4 4\nWhat is the air speed velocity of an unladen swallow? African?\nIs there intelligent life on Earth? Probably\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n\nassert solution('''1 4\nWhat is the air speed velocity of an unladen swallow? African?\nIs there intelligent life on Earth? Probably\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nHow many points does this strategy earn? ''') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4') == '1.000000'\nassert solution('3 3') == '1.50000'\nassert solution('4 1') == '0.50000'\nassert solution('5 5') == '2.50000'\nassert solution('10 10') == '20.000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2.0'\nassert solution('4 5') == '2.5'\nassert solution('6 4') == '3.0'\nassert solution('8 8') == '3.0'\nassert solution('10 5') == '4.0'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n'''"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '2.0000000000'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 6\\n'\n               'monkey 2 lion penguin\\n'\n                'lion 3 monkey penguin lion\\n'\n                'penguin 1 monkey') == 'POSSIBLE'\n\nassert solution('3 5\\n'\n                'lion 2 monkey\\n'\n                'lion 4 dog\\n'\n               'monkey 1 bird\\n'\n                'penguin 1 monkey') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 6') == 'POSSIBLE'\nassert solution('3 6') == 'IMPOSSIBLE'\nassert solution('1 2 3') == 'FALSE ALARM'\nassert solution('2 3 3') == 'FALSE ALARM'\nassert solution('3 2 3') == 'FALSE ALARM'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n2 3 monkey\n3 1 lion\n1 4 penguin\n4 5 monkey\n3 5\n3 5\n''') == 'POSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"POSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6') == \"POSSIBLE\"\nassert solution('2 3') == \"POSSIBLE\"\nassert solution('3 2') == \"IMPOSSIBLE\"\nassert solution('1 2') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 6\\nmonkey 2 lion penguin\\nlion 3 monkey penguin lion\\npenguin 1 monkey') == 'POSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\nmonkey 2 lion\\ngeneral\") == \"POSSIBLE\"\nassert solution(\"1 3\\nmonkey 2\\ngeneral\") == \"IMPOSSIBLE\"\nassert solution(\"1 3\\ngeneral\") == \"FALSE ALARM\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 2 1\") == \"FALSE ALARM\"\nassert solution(\"1 2 3 4\") == \"FALSE ALARM\"\nassert solution(\"1 1 1 1\") == \"POSSIBLE\"\n\nSample Input 2:\n3 6\nzebra 1 cat\ndog 4 elephant\ncat 6 dog\nSample Output 2:\nPOSSIBLE\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"POSSIBLE\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == 'POSSIBLE'\nassert solution('2 2') == 'IMPOSSIBLE'\nassert solution('2 1') == 'IMPOSSIBLE'\nassert solution('2 4') == 'POSSIBLE'\nassert solution('3 1') == 'IMPOSSIBLE'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    100\n    4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n    4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n    0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n    2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n    8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n    \"\"\"\n) == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\n    \"\"\"\n    100\n    4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n    4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n    0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n    2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n    8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n    \"\"\"\n) == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\n    \"\"\"\n    100\n    4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n    4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n    0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n    2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n    8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n    \"\"\"\n) == \"triple correlation 2(4)3(2)5 found\"\nassert solution(\n    \"\"\"\n    100\n    4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n    4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n    0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n    2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n    8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n    \"\"\"\n) == \"triple correlation 2(4)1(2)5 found\"\nassert solution(\n    \"\"\"\n    100\n    4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n    4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n    0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n    2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n    8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n    \"\"\"\n) == \"triple correlation 2(1)3(2)5 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n\nassert solution('''\n4\n4\n6\n3\n2\n1\n1\n4\n3\n2\n''') == 'random sequence'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('101') == 'random sequence'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"triple correlation 4(1)4(3)3 found\"\n\n'''"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n4 3 2 5 6 7 2 8 9 3 5 1\\n') == '4(1)3(2)3(5)(6)7(2)2(8)9(5)1(3)2(6)(7)(2)(9)(3)(5)(1)(2)(8)(9)(3)(6)(5)(1)4(3)3(2)2(6)(6)(8)5(2)4(4)4(2)(3)1(5)(5)(1)2(3)2(7)(2)(6)(6)(8)(5)(4)3(5)(1)(2)(3)(2)7(2)7(6)(2)(5)(1)(8)(7)(5)(4)(5)(1)(2)(3)(2)(6)(8)(5)(4)(4)(2)(3)(1)(5)(5)(1)6(3)(2)7(2)8(2)7(6)(2)(5)(4)(5)(1)(2)(3)(2)(6)(6)(8)9(2)7(6)(5)(4)(5)(1)(2)(3)(2)(6)(8)(5)(4)(4)(2)(3)(2)(6)(6)(8)(5)(4)(4)(2)(3)(1)(5)(5)(1)'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4') == 'triple correlation 4(1)4(3)3 found'\nassert solution('2\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\" ) == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n5 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\" ) == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 2 5 4 7 2 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n''') == 'triple correlation 4(1)4(3)3 found'\n\nprint(solution('''\n1\n6\n'''))\nprint(solution('''\n4\n1 4 1 4 1 4 1\n'''))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"39\\n\"\n    \"10\\n\"\n) == \"40.5\"\n\nassert solution(\n    \"3 2\\n\"\n    \"18.9\\n\"\n    \"29.9\\n\"\n) == \"30.5\"\n\nassert solution(\n    \"3 3\\n\"\n    \"6.1\\n\"\n    \"2.6\\n\"\n    \"0.1\\n\"\n) == \"0.5\"\n\nassert solution(\n    \"3 5\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\\n\"\n) == \"5.5\"\n\nassert solution(\n    \"10 2\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0.1\\n\"\n    \"0.9\\n\"\n    \"0.9\\n\"\n    \"0"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n39\n10\n40''') == '40.5'\nassert solution('''5 3\n2 9 5 9\n10 12 13 20''') == '20.0'\nassert solution('''1\n1\n1\n1\n1''') == '1.0'\nprint(solution(input()))\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n39\n10\n40''') == '40.5', 'First'\n\nassert solution('''3 2\n40\n20\n50''') == '40.25', 'Second'\n\nassert solution('''5 5\n78\n45\n89\n40\n79''') == '73.81', 'Third'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 1\n39\n10\n40\n40\n40\n40''') == \"40.5\"\nassert solution('''5 1\n39\n10\n40\n40\n40''') == \"40\"\nassert solution('''10 1\n39\n10\n40\n40\n40\n40\n40\n40\n40\n40''') == \"40\"\nassert solution('''3 1\n39\n10\n40\n''') == \"40.5\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n39\\n10\\n\") == \"40.5\"\nassert solution(\"100 10\\n1 2.5\\n2 1.5\\n3 0.5\\n1 2.5\\n2 1.5\\n3 0.5\\n\") == \"4.5\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '5'\nassert solution('1') == '1.5'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\n30\n60\n40\n50\n20\n''') == '40.5'\n\nassert solution('''10\n2.5\n-1\n10\n10\n2\n''') == '20.0'\n\nassert solution('''4\n1\n2\n3\n4\n''') == '3.0'\n\nassert solution('''1\n1\n1\n1\n1\n1\n''') == '1.0'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '40.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n39\\n10\\n40') == '40.5'\nassert solution('4 3\\n4 5 6\\n3 2 4\\n10 11 12\\n5 3 5\\n6 2 5\\n9 7 8\\n3 2 2\\n4 6 6\\n11 11 11\\n5 6 5\\n6 8 8\\n4 2 1\\n7 7 7\\n5 5 5\\n10 5 10\\n8 8 8\\n11 11 11\\n12 12 12\\n8 5 10\\n10 1 10\\n12 9 9\\n10 2 4\\n9 1 9\\n3 3 3\\n6 6 6\\n7 7 7\\n8 8 8\\n1 1 1\\n3 3 3\\n2 2 2\\n4 4 4\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n6 6 6\\n5 5 5\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n10 10 10\\n4 4 4\\n11 11 11\\n6 6 6\\n9 7 7\\n7 7 7\\n8 8 8\\n12 12 12\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n9 9 9\\n9 9 9\\n10 10 10\\n6 6 6\\n7 7 7\\n8 8 8\\n11 11 11\\n7 7 7\\n8 8 8\\n4 4 4\\n3 3 3\\n2 2 2\\n1 1 1\\n3 3 3\\n5 5 5\\n6 6 6\\n5 5 5\\n6 6"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '33.5'\nassert solution('3 1') == '37.5'\nassert solution('3 1 1') == '37.5'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"1 5\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 11\\n11 12\\n12 13\\n13 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n30 31\\n31 32\\n32 33\\n33 34\\n34 35\\n35 36\\n36 37\\n37 38\\n38 39\\n39 40\\n40 41\\n41 42\\n42 43\\n43 44\\n44 45\\n45 46\\n46 47\\n47 48\\n48 49\\n49 50\\n50 51\\n51 52\\n52 53\\n53 54\\n54 55\\n55 56\\n56 57\\n57 58\\n58 59\\n59 60\\n60 61\\n61 62\\n62 63\\n63 64\\n64 65\\n65 66\\n66 67\\n67 68\\n68 69\\n69 70\\n70 71\\n71 72\\n72 73\\n73 74\\n74 75\\n75 76\\n76 77\\n77 78\\n78 79\\n79 80\\n80 81\\n81 82\\n82 83\\n83 84\\n84 85\\n85 86\\n86 87\\n87 88\\n88 89\\n89 90\\n90 91\\n91 92\\n92 93\\n93 94\\n94 95\\n95 96\\n96 97\\n97 98\\n98 99\\n99 100\\n100 101\\n101 102\\n102 103\\n103 104\\n104 105\\n105 106\\n106 107\\n107 108\\n108 109\\n109 110\\n110 111\\n111 112\\n112 113\\n113 114\\n114 115\\n115 116\\n116 117\\n117 118\\n118 119\\n119 120\\n120 121\\n121 122\\n122 123\\n123 124\\n124 125\\n125 126\\n126 127\\n127 128\\n128 129\\n129 130\\n130 131\\n131 132\\n132 133\\n133 134\\n134 135\\n135 136\\n136 137\\n137 138\\n138 139\\n139 140\\n140 141\\n141 142\\n142 143\\n143 144\\n144 145\\n145 146\\n146 147\\n147 148\\n148 149\\n149 150\\n150 151\\n151 152\\n152 153\\n153 154\\n154 155\\n155 156\\n156 157\\n157 158\\n158 159\\n159 160\\n160 161\\n161 162\\n162 163\\n163 164\\n164 165\\n165 166\\n166 167\\n167 168\\n168 169\\n169 170\\n170 171\\n171 172\\n172 173\\n173 174\\n174 175\\n175 176\\n176 177\\n177 178\\n178 179\\n179 180\\n180 181\\n181 182\\n182 183\\n183 184\\n184 185\\n185 186\\n186 187\\n187 188\\n188 189\\n189 190\\n190 191\\n191 192\\n192 193\\n193 194\\n194 195\\n195 196\\n196 197\\n197 198\\n198 199\\n199 200\\n200 201\\n201 202\\n202 203\\n203 204\\n204 205\\n205 206\\n206 207\\n207 208\\n208 209\\n209 210\\n210 211\\n211 212\\n212 213\\n213 214\\n214 215\\n215 216\\n216 217\\n217 218\\n218 219\\n219 220\\n220 221\\n221 222\\n222 223\\n223 224\\n224 225\\n225 226\\n226 227\\n227 228\\n228 229\\n229 230\\n230 231\\n231 232\\n232 233\\n233 234\\n234 235\\n235 236\\n236 237\\n237 238\\n238 239\\n239 240\\n240 241\\n241 242\\n242 243\\n243 244\\n244 245\\n245 246\\n246 247\\n247 248\\n248 249\\n249 250\\n250 251\\n251 252\\n252 253\\n253 254\\n254 255\\n255 256\\n256 257\\n257 258\\n258 259\\n259 260\\n260 261\\n261 262\\n262 263\\n263 264\\n264 265\\n265 266\\n266 267\\n267 268\\n268 269\\n269 270\\n270 271\\n271 272\\n272 273\\n273 274\\n274 275\\n275 276\\n276 277\\n277 278\\n278 279\\n279 280\\n280 281\\n281 282\\n282 283\\n283 284\\n284 285\\n285 286\\n286 287\\n287 288\\n288 289\\n289 290\\n290 291\\n291 292\\n292 293\\n293 294\\n294 295\\n295 296\\n296 297\\n297 298\\n298 299\\n299 300\\n300 301\\n301 302\\n302 303\\n303 304\\n304 305\\n305 306\\n306 307\\n307 308\\n308 309\\n309 310\\n310 311\\n311 312\\n312 313\\n313 314\\n314 315\\n315 316\\n316 317\\n317 318\\n318 319\\n319 320\\n320 321\\n321 322\\n322 323\\n323 324\\n324 325\\n325 326\\n326 327\\n327 328\\n328 329\\n329 330\\n330 331\\n331 332\\n332 333\\n333 334\\n334 335\\n335 336\\n336 337\\n337 338\\n338 339\\n339 340\\n340 341\\n341 342\\n342 343\\n343 344\\n344 345\\n345 346\\n346 347"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 4\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"Impossible\"\nassert solution(\"7 6\\n1 2 1984\\n2 3 1985\\n1 3 1984\\n2 4 1986\\n1 4 1986\\n3 4 1985\\n\") == \"1985\"\nprint(solution(input()))\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 6') == \"Impossible\"\nassert solution('4 1') == \"1848\"\n\"\"\"\n\nstdin = \"\"\"\n7 2\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\nSample Output:\nImpossible\n\"\"\""
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"2\""
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"4 6\") == \"2008\"\nassert solution(\"1 2 1987\") == \"1 2008\"\nassert solution(\"2 3 1987\") == \"2 2008\"\nassert solution(\"1 3 1987\") == \"1 2008\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n2 3\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n\"\"\") == \"Impossible\""
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987''') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 6, 1, 2, 3, 4, 5, 5]) == \"Impossible\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"2008\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([4,0,1],[1,2,3]) == \"impossible\"\nassert solution([4,0,1],[1,2,3]) == \"impossible\"\nassert solution([4,0,1],[1,2,3]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 0 1\n1 1 2\n1 2 3\n2 3 1''') == 'impossible'\n\nassert solution('''3 0 1\n1 1 2\n1 2 3\n2 3 1''') == '4'\n\nprint('all tests passed')"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"impossible\"\nprint(solution())\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"impossible\"\nassert solution(\"4 0 1\") == \"3\"\nassert solution(\"4 0 1\") == \"impossible\"\nassert solution(\"4 1 2\") == \"3\""
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '4'\nassert solution('''\n6 0 4\nN 1 2\nC 1 3\nN 3 4\nC 4 2\nN 5 3\nC 5 1\nN 6 3\nC 6 2\nN 7 4\nC 7 3\nN 8 5\nC 8 4\nN 9 6\nC 9 1\nN 10 4\nC 10 3\nN 11 5\nC 11 1\nN 12 4\nC 12 3\nN 13 5\nC 13 1\nN 14 4\nC 14 3\nN 15 5\nC 15 1\n''') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"impossible\"\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 3 1\nC 1 1\n''') == \"3\"\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == \"4\"\nassert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 3 3\nC 1 1\n''') == \"1\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == 'impossible'\nassert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\\n') == '3'\nassert solution('4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 3\\n') == 'impossible'\nprint('All tests passed')"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 0 1\") == \"impossible\"\nassert solution(\"4 0 2\") == \"2\"\nassert solution(\"4 0 3\") == \"3\"\nassert solution(\"4 0 1\") == \"impossible\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == 0,'should return 0'\nassert solution('()') == 1,'should return 1'\nassert solution('((()))') == 10,'should return 10'\nassert solution('(()(()))') == 16,'should return 16'\nassert solution('(()(())((()))') == 21,'should return 21'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n()''') == 0\nassert solution('''2\n()()''') == 5\nassert solution('''3\n()()\n()''') == 9\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 10\nassert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 10\nassert solution('4') == 0\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('())') == '0'\nassert solution('((()') == '1'\nassert solution('((()))') == '2'\nassert solution('((())((()))') == '3'\nassert solution('(()(()))') == '2'"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n()\n(())\n''') == 10\nassert solution('''\n3\n(())\n()()\n''') == 6\nassert solution('''\n4\n()()\n()(\n''') == 8\nassert solution('''\n4\n(())\n())(\n''') == 10\nassert solution('''\n5\n((()\n)())\n((())\n()(\n''') == 9\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n))\n((()\n)()\n''') == '6', 'Should be \"6\"'\nassert solution('''\n3\n)()\n((()\n)()\n''') == '6', 'Should be \"6\"'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(()(())\") == 5\nassert solution(\"()(()(()(())\") == 10\nassert solution(\"(())(((()())(())))\") == 10\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 10"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n()\n((()\n)()\n''') == 10\nassert solution('''\n()\n((()\n)()\n''') == 5\nassert solution('''\n()\n(((()\n)()\n)()\n''') == 8\nassert solution('''\n()\n((((((()\n)()\n)()\n)()\n)()\n)()\n''') == 11\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '10'\nassert solution('5') == '15'\nassert solution('3') == '10'"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\nassert solution('''\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n'''\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"85293\"\n\"\"\"\n\n__author__ ='skeena'\nfrom functools import reduce\n\nfrom itertools import combinations, cycle\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\nSample Output:\n85293\"\"\") == \"85293\"\n\"\"\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == '85293'\nassert solution('377 a') == '213'\n'''\n\nimport math\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == \"85293\"\nassert solution('10\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\nSample Output') == \"85350\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\nassert solution('4\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '0'\nassert solution('5\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '0'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '85293'\nassert solution('1\\n377\\na\\n455\\nh') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n377 a\n455 h\n180 a\n\"\"\") == \"85293\"\nassert solution(\"\"\"\n5\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"843859\"\nassert solution(\"\"\"\n3\n377 a\n455 h\n180 a\n\"\"\") == \"843859\"\n\"\"\"\nfrom sys import stdin\n\nn = int(input())\n\nalien = dict()\nhuman = dict()\nfor i in range(n):\n    system = input().split()\n    if system[1] == 'a':\n        alien[system[0]] = int(system[2])\n    else:\n        human[system[0]] = int(system[2])\n\nm = int(input())\nlinks = list(map(lambda i: i.split(), stdin))\nlinks = [[int(i[0]), int(i[1])] for i in links]\n\nlink_set = set()\nfor i in range(m):\n    link_set.add(links[i][0])\n    link_set.add(links[i][1])\n\nalien_set = set(alien.keys())\nhuman_set = set(human.keys())\n\nresult = []\n\nfor i in alien_set:\n    if i in link_set:\n        result.append(alien[i])\n\nfor i in human_set:\n    if i in link_set:\n        result.append(human[i])\n\nresult = sum(sorted(result))\n\nprint(result)\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"6 4\\n1 2\\n3 4\\n5 6\\n2 4\\n3 5\\n4 5\\n5 6\") == \"2\"\nassert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"2 5\\n1 2\\n3 4\\n5 6\\n2 4\\n3 5\\n4 5\\n5 6\") == \"1\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 6\\n2 4\\n3 5\\n4 5\\n5 6\") == \"0\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5\n1 2\n1 3\n2 3\n1 4\n2 4''') == '5'\nprint(solution('''4 5\n1 2\n1 3\n2 3\n1 4\n2 4'''))"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3\\n2 3') == '5'\n\"\"\""
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n1 3\n2 3\n''') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 3') == '3'\nassert solution('1 3') == '4'\nassert solution('2 4') == '1'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5\n1 2\n1 3\n2 3\n1 4\n2 4''') == '5'\nassert solution('''10 10\n1 2\n1 3\n2 3\n1 4\n2 4\n4 5\n3 6\n3 7\n4 8\n5 9''') == '10'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n') == '5'"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 2\\n2 3\\n1 3') == '5'\nassert solution('2 4\\n1 2\\n2 4\\n2 3') == '6'\nassert solution('3 5\\n1 2\\n2 4\\n2 3\\n3 4') == '5'\nassert solution('1 2\\n1 3') == '0'\nassert solution('5 1\\n1 2\\n2 3\\n1 4\\n2 5') == '6'\n\n'''\n\n'''\nThe Idea: \n    - For each pair of vertices (i, j), we can find the length of a path from i to j\n    - The length of the path can be any of these lengths:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n    - Each pair of these lengths can be used to form a spanning tree, so we take the union of all these spanning trees\n    - For all other pairs of vertices, we do the same procedure but also include the path from i to j\n    - Now the number of spanning trees is $|T|$\n    - So we can take $|T|-1$ number of pairs to find the number of spanning trees.\n    \n    Time complexity: O(V^3)\n    Space complexity: O(V)\n'''\n\nclass Solution:\n    def solve(self, n, m, u, v, edges):\n        # Initialize the spanning tree array\n        T = {}\n        for i in range(n):\n            T[i] = []\n        \n        # Compute the shortest paths from i to j\n        for i in range(m):\n            a, b = edges[i]\n            T[a].append(b)\n            T[b].append(a)\n        \n        # Fill all the paths from i to j\n        for i in range(n):\n            T[i].append(i)\n            \n        # Pruning based on the number of trees\n        numberOfTrees = 0\n        for j in range(m):\n            i, j = edges[j]\n            shortestPathFromI = len(T[i])\n            shortestPathFromJ = len(T[j])\n            for k in range(n):\n                if k!= i and k!= j:\n                    shortestPathFromK = len(T[k])\n                    if shortestPathFromK < shortestPathFromI and shortestPathFromK < shortestPathFromJ:\n                        shortestPathFromJ = shortestPathFromK\n            if shortestPathFromI!= shortestPathFromJ:\n                numberOfTrees += 1\n        \n        # Report the number of spanning trees\n        return numberOfTrees\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '500'\nassert solution('5') == '60000'\nassert solution('7') == '191000'\nassert solution('10') == '131316'\nassert solution('100') == '262336'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n''') == '5100'\n\nassert solution(\n'''5\n0 a\n10\n100\n1000\n10000\n0\n10\n100\n1000\n10000\n5\n-5\n10\n''') == '50'\n\nassert solution(\n'''\n3\n-3 p\n2 p\n-4 s\n''') == '0'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\"\"\") == \"500\"\n\nprint(solution(open(\"d3-input.txt\").read()))"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '5100'\nassert solution('4') == '0'\nassert solution('5') == '0'\n\nSample Input:\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n2000 aaabaaajss\n2500 pupa\n3000 butterfly\nSample Output:\n2600\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1000\"\nassert solution(\"3\") == \"1000\"\nassert solution(\"3\") == \"1000\"\nassert solution(\"3\") == \"1000\"\nassert solution(\"3\") == \"1000\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n\"\"\") == \"5100\"\n\nassert solution(\"\"\"\n10\n5 butterfly 1 pompous bird 1 long-tailed bird 3 spoonbill 1 bat 5 tit 1 tit 1 tit 1 albatross 5 trout 1 goose 4 ransy frog 4 spider 5 spider 1 spider 1 spider 1 bat 5 turtle 1 land 4 horse 1 horse 1 horse 1 fox 3 turtle 1 land 5 bat 5 bat 1 bat 3 bat 5 rabbit 1 rabbit 1 rabbit 1 rabbit 1 rabbit 3 rabbit 5 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 1 rabbit 1 bat 1 rabbit 1 rabbit 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 1 rabbit 1 bat 1 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5 rabbit 1 bat 3 bat 5 rabbit 1 bat 1 rabbit 1 bat 5"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 5\") == \"2\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"100\"\nassert solution(\"10\") == \"5000\"\nassert solution(\"1000000\") == \"50000\"\nassert solution(\"1000000000\") == \"500000000\""
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5''') == '6 1 2 3 1 4 5'\nassert solution('''10\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\nSample Output:\n8''') == '7 1 2 3 1 4 5'\nassert solution('''10\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\nSample Output:\n7''') == '7 1 2 3 1 4 5'\nassert solution('''10\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\nSample Output:\n7''') == '7 1 2 3 1 4 5'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '-1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n1\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0\n1 1\n1 4\n2 2''') == '-1'\nassert solution('''7\n0\n1 1\n1 2 3\n2 4 5\n3 6 7\n4 8 9\n5 10 11\n6 12 13''') == '12'\nassert solution('''10\n0\n1 2\n3 4 5\n6 7 8 9\n10 11 12 13 14''') == '14'\nassert solution('''14\n0\n1 2\n3 4 5\n6 7 8 9\n10 11 12 13 14 15''') == '15'\nassert solution('''15\n0\n1 2\n3 4 5\n6 7 8 9\n10 11 12 13 14 15 16''') == '16'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6 1 2 3 1 4 5'\n\nassert solution('''\n5\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '-1'\n\nassert solution('''\n3\n1\n1\n2\n''') == '2'\n\nassert solution('''\n3\n0\n0\n2\n''') == '0'\n\nassert solution('''\n4\n0\n0\n0\n''') == '0'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '6'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2 1\n2 1\n1 2 3\n1 4\n1 5\n''') == '1'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\nSample Output:\n6\n1\n2\n3\n1\n4\n5\n''') == '6'\nprint('all tests passed')"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n2 1 O 3\n1 2 R 5\n\"\"\") == \"2\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\nassert solution('4') == '0'\n'''\nimport unittest\nimport collections\n\nclass Solution(object):\n    def solution(self, stdin):\n        n, d = map(int, stdin.split())\n        tickets = collections.deque(map(int, stdin.split()))\n        answer = d * n + d\n        while tickets:\n            cnt = 0\n            for i in range(d):\n                if tickets[0] == tickets[-1]:\n                    cnt += 1\n                    del tickets[0]\n                    del tickets[-1]\n            answer -= cnt\n        return str(answer)\n\nclass Test(unittest.TestCase):\n    def test_result(self):\n        self.assertEqual(Solution().solution('2 5'), '10')\n        self.assertEqual(Solution().solution('4'), '0')"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n2 5\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\nSample Input 2:\n2 6\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n1 2 O 6\nSample Output 2:\n9\n\"\"\"\n) == \"10\"\n\nassert solution(\n    \"\"\"\n2 6\n1 2 1 2 1\n4\n1 2 O 3\n1 2 R 5\n1 2 O 6\nSample Output 2:\n6\n\"\"\"\n) == \"6\"\n\nassert solution(\n    \"\"\"\n3 10\n1 2 R 5\n1 2 O 3\n1 2 R 6\nSample Output 3:\n10\n\"\"\"\n) == \"10\"\n\nassert solution(\n    \"\"\"\n3 10\n1 2 O 3\n1 2 R 5\n1 2 O 6\nSample Output 3:\n10\n\"\"\"\n) == \"10\"\n\nassert solution(\n    \"\"\"\n4 10\n1 2 R 5\n1 2 O 3\n1 2 R 6\n1 2 O 3\nSample Output 4:\n7\n\"\"\"\n) == \"7\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 1 2\n4\n1 2 O 3\n1 2 R 5\n2 1 O 3\n1 2 R 6''') == '10'\n\nassert solution('''10\n1 2 1 2\n4\n1 2 O 3\n1 2 R 5\n2 1 O 3\n1 2 R 6''') == '5'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\nprint(solution(*tuple(input().split())))\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n1 2 1 2 1\\n4') == '10'\nassert solution('3\\n1 2 O 3') == '9'\nassert solution('2\\n1 2 O 3\\n1 2 R 5\\n2 1 R 5') == '10'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10\"\nassert solution(\"4\\n1 2 O 3\") == \"10\"\nassert solution(\"4\\n1 2 R 5\") == \"10\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**9)"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1'\nassert solution('0 1') == '2'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n0 1\\n1 2\\n2 3') == '1'\nassert solution('6 6\\n0 1 2 3 4 5\\n1 2\\n0 1\\n1 3\\n0 2\\n1 3\\n3 4\\n4 2\\n') == '2'\nassert solution('5 7\\n0 1 2 3 4\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '2'\n\nimport os\nimport sys\n\nfrom io import StringIO\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n0 1\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('6 6\\n0 1\\n0 2\\n0 3\\n2 4\\n3 5\\n4 6') == '3'\nassert solution('4 3\\n0 1\\n1 2\\n2 3') == '4'\nassert solution('4 3\\n0 1\\n1 2\\n2 3') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '1'\nassert solution('2 2') == '2'\nassert solution('3 2') == '2'\nassert solution('2 1') == '2'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '1'\nassert solution('4 5') == '3'\nassert solution('6 3') == '4'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '1'\nassert solution('''\n4 5\n1 0\n2 1\n3 2\n4 4\n5 5\n''') == '5'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 4\n0 1\n1 2\n2 3\n0 3\n1 4\n0 5\n''') == '1'\nassert solution('''\n9 2\n1 5\n1 4\n4 5\n4 6\n7 4\n1 3\n2 6\n3 6\n6 7\n4 2\n''') == '4'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '1'\nassert solution('''\n4 4\n0 1\n0 2\n0 3\n1 4\n''') == '2'\nassert solution('''\n4 4\n0 1\n0 2\n0 3\n1 4\n''') == '3'\n\n'''\n\n'''\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    6 5\n    0 1\n    1 2\n    2 3\n    3 4\n    4 5\n    5 4\n    ''') == \"1\"\nassert solution('''\n    10 9\n    0 1\n    0 2\n    0 3\n    0 4\n    0 5\n    0 6\n    1 2\n    2 3\n    2 4\n    2 5\n    3 4\n    3 5\n    4 6\n    5 6\n    6 7\n    7 8\n    8 9\n    9 10\n    10 9\n    ''') == \"5\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0.962962962963\"\nassert solution(\"4\") == \"0.6864406779661\"\nassert solution(\"5\") == \"0.2321428571429\"\nassert solution(\"6\") == \"0.1913593220338\"\nassert solution(\"8\") == \"0.117422680412\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0.5'\nassert solution('5') == '0.16666666666666666'\nassert solution('8') == '0.0'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.962962962963'\nassert solution('2') == '0.99999999926'\nassert solution('3') == '0.9999999999926'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"0.962962962963\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '0.962962962963'\nassert solution('2') == '0.9387755102040'\nassert solution('1') == '0.936363636364'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4') == '0.962962962963'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n\"\"\") == \"0.962962962963\"\nassert solution(\"\"\"\n3\n\"\"\") == \"0.000000000\"\nassert solution(\"\"\"\n4\n\"\"\") == \"0.962962962963\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8\n4\n4\n3\n1\n3\n4\n1\n2''') == '0.962962962963'\nassert solution('''8\n4\n3\n2\n1\n3\n4\n1\n2''') == '0.4000000059604645'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.5'\nassert solution('5') == '0.125'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('3') == '0.63157894736'\nassert solution('2') == '0.39726027397'\nassert solution('1') == '0.23416666666667'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000\\n'\nassert solution('8') == '0 0\\n40000000 0\\n0 40000000\\n0 40000000\\n0 40000000\\n40000000 0\\n'\nassert solution('16') == '0 0\\n40000000 0\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n'\nassert solution('32') == '0 0\\n40000000 0\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\"\nassert solution(\"2\") == \"1 1\\n2 2\\n1 3\\n2 3\"\nassert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\""
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"0 0\\n40000000 0\\n0 40000000\\n\"\nassert solution(\"2\") == \"0 0\\n0 40000000\\n\"\nassert solution(\"1\") == \"0\\n\"\nassert solution(\"2\") == \"0\\n\"\n\"\"\"\nimport math\nimport sys\nimport functools"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0 40000000\\n0 0\\n40000000 0\\n0 40000000\\n40000000 0\\n'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0 0\\n40000000 0\\n0 40000000\\n\"\nassert solution(\"2\") == \"0 0\\n0 40000000\\n40000000 40000000\\n\"\nassert solution(\"3\") == \"0 40000000\\n40000000 0\\n0 40000000\\n40000000 40000000\\n\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0 0\\n'\nassert solution('4\\n') == '0 40000000\\n0 40000000\\n0 40000000\\n0 40000000'\nassert solution('100\\n') == '0 0\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0 40000000\\n0"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0 0\\n40000000 0\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0 0'\nassert solution('2') == '40000000 0'\nassert solution('3') == '0 40000000'"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('100') == '0 0\\n40000000 0\\n0 40000000\\n40000000 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n40000000 0\n0 40000000\n0 40000000\n''') == '''\n0 0\n40000000 0\n0 40000000\n'''\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 1 2 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 5 2') == '1'\nassert solution('3 5 5 2') == 'impossible'\nassert solution('0 0') == '0'\nassert solution('1 1') == 'impossible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('2 3 4 6') == '1'\n\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 5 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"4 2 4 3\") == \"2\"\nassert solution(\"1 1 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 4 1\") == \"2\"\nassert solution(\"3 1 1 2\") == \"3\"\nassert solution(\"5 4 7 6\") == \"5\"\nassert solution(\"5 1 1 1\") == \"impossible\"\nassert solution(\"5 1 1 1\") == \"impossible\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"5 6 9 8\") == \"2\"\nassert solution(\"6 8 9 2 3\") == \"0\"\nassert solution(\"2 1 1 1\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"1 1 1 2\") == \"2\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0\n''') == '2'\nassert solution('''\n1000000 2 1000000\n100000 100000\n100000 100000\n''') == '1000000'\nassert solution('''\n10000000 2 10000000\n100000 100000\n100000 100000\n''') == '10000000'\nassert solution('''\n1000000 2 1000000\n100000 100000\n100000 100000\n''') == '10000000'\nassert solution('''\n10000000 2 10000000\n100000 100000\n100000 100000\n''') == '10000000'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"20 3 5 5\\n0 0 0\\n30 0 0\\n0 0 0\\n0 0 0\\n\") == \"2\"\n\nassert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\\nSample Output:\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 3 5 5\") == \"2\"\nassert solution(\"15 4 5 8\") == \"1\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '20 3 5 5'\n) == '2'\nassert solution(\n    '20 2 5 5'\n) == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\nassert solution('''2 4 5 2\n0 0 0\n-10 0 0\n3 0 0\n0 0 0''') == '3'\nassert solution('''5 10 5 2\n0 0 0\n-10 0 0\n0 0 0\n0 0 0\nSample Output:\n0''') == '0'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == \"2\"\nassert solution('''10 6 2\n5 4 6\n4 7 0''') == \"5\"\nassert solution('''20 1 6\n0 0 0\n0 0 0''') == \"0\"\nassert solution('''20 1 6\n0 0 0\n0 0 0''') == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"2\"\nassert solution(\"20 3 5 5\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 3 2\"\n) == \"2\"\nassert solution(\n    \"20 3 5 5\"\n) == \"4\"\nassert solution(\n    \"0 0 0\"\n) == \"0\"\nassert solution(\n    \"0 -10 0\"\n) == \"0\"\nassert solution(\n    \"30 0 0\"\n) == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 3 5 5') == '2'\nassert solution('20 3 5 5') == '1'\nassert solution('10 10 10 10') == '0'\nassert solution('20 10 10 10') == '1'\nassert solution('1000 1000 1000 1000') == '0'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\\n7777777777777777777\") == \"7777777777777777777\"\nassert solution(\"11\\n5555555555555555555\") == \"5555555555555555555\"\nassert solution(\"12\\n1122\") == \"1122\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n333\") == \"333\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('11') == '11'\nassert solution('12') == '12'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13') == '12 14'\nassert solution('10') == '11'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('15') == '12 14', \"12 14\"\nassert solution('12') == '12', \"12\"\nassert solution('1234') == '1214', \"1214\"\nassert solution('1234') == '1214', \"1214\"\nassert solution('1234') == '1214', \"1214\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('13') == '12 14'\nassert solution('12') == '13 14'\nassert solution('1') == '2'\nassert solution('11') == '12'\nassert solution('111') == '112'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '5'\nassert solution('12345') == '12345'\nassert solution('999') == '999'\nassert solution('123456789') == '123456789'\nassert solution('1234567890') == '1234567890'\n\"\"\""
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('13') == '12 14'\nassert solution('123') == '12 14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1534236469') == '1534236469'\nassert solution('13') == '14'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('13') == '12 14'\nassert solution('7714') == '7711'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('13') == '14'\nassert solution('14') == '14'\nassert solution('15') == '15'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0'\nassert solution('10') == '1'\nassert solution('11') == '0'\nassert solution('100') == '1'\nassert solution('101') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('10\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\nassert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 0 1\n1 0 1\n3 0 1\n''') == '0'\n\nassert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\n\nassert solution('''\n3\n0 1 2\n1 0 2\n3 0 1\n''') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 0 0 1 0\"\n) == \"0\"\n\nassert solution(\n    \"3 0 1 1 0\"\n) == \"0\"\n\nassert solution(\n    \"1 0 0 1\"\n) == \"2\"\n\nassert solution(\n    \"3 0 1 0\"\n) == \"0\"\n\nassert solution(\n    \"3 0 0 1\"\n) == \"1\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '0'\nassert solution('10\\n1 0 1\\n1 0 2\\n3 0 1\\n3 0 2\\n3 0 3\\n4 0 1\\n4 0 2\\n4 0 3\\n5 0 1\\n5 0 2\\n5 0 3\\n6 0 1\\n6 0 2\\n6 0 3\\n7 0 1\\n7 0 2\\n7 0 3\\n8 0 1\\n8 0 2\\n8 0 3\\n9 0 1\\n9 0 2\\n9 0 3\\n10 0 1\\n10 0 2\\n10 0 3\\n') == '1'\nassert solution('15\\n1 0 1\\n1 0 2\\n1 0 3\\n2 0 1\\n2 0 2\\n2 0 3\\n3 0 1\\n3 0 2\\n3 0 3\\n4 0 1\\n4 0 2\\n4 0 3\\n5 0 1\\n5 0 2\\n5 0 3\\n6 0 1\\n6 0 2\\n6 0 3\\n7 0 1\\n7 0 2\\n7 0 3\\n8 0 1\\n8 0 2\\n8 0 3\\n9 0 1\\n9 0 2\\n9 0 3\\n10 0 1\\n10 0 2\\n10 0 3\\n') == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\") == \"0\"\nassert solution(\"5\\n0 0 0\\n0 0 1\\n0 0 0\\n0 0 1\\n0 0 0\") == \"1\"\nprint(solution(input))\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 0 0\\n1 0 1\\n3 0 1\") == \"0\"\nassert solution(\"2\\n1 1\\n1 1\") == \"1\"\nassert solution(\"3\\n0 1 0\\n1 0 1\\n3 0 1\") == \"2\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\""
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '0'\nassert solution('''\n5\n0 0 0\n0 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '1'\nassert solution('''\n5\n0 0 0\n0 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '2'\nassert solution('''\n5\n0 0 0\n0 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '1'\nassert solution('''\n5\n0 0 0\n0 0 1\n3 0 1\n3 0 0\n3 0 1\n''') == '2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n1 2\n2 2\n''') == '1 2\\n1 1\\n1 2\\n2 1\\n1 2\\n2 3\\n1 3\\n2 1\\n2 3\\n1 2\\n2 3\\n'''\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 3') == '1 1\\n2 2'\nassert solution('2 3\\n1 1\\n2 3') == '1 2\\n1 3\\n2 1'"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\""
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 2\") == \"2 1\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"2 2\") == \"2 2\"\nassert solution(\"3 3\") == \"3 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\"\nassert solution(\"2 2\") == \"1 1\\n2 2\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n\n'''"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 1\n1 2\n1 3\n2 1''') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10') == '0.1000000000'\nassert solution('3 10') == '0.300000000'\nassert solution('3 10') == '0.500000000'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n\nassert solution('''\n3 10\n0 10 1\n0 10 1\n1 10 1\n''') == '1.83333333'\n\nassert solution('''\n3 10\n0 10 1\n0 10 1\n2 10 1\n''') == '2.5'\n\nassert solution('''\n3 10\n0 10 1\n0 10 1\n3 10 1\n''') == '0.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '1.33333333'\nassert solution('''\n2 2\n2 3\n''') == '0.5'\nassert solution('''\n4 4\n1 1 1 2\n1 2 2 3\n2 1 1 2\n3 1 1 2\n''') == '0.5 1.5 0.25'\nassert solution('''\n2\n3\n2 3\n3 2\n''') == '2.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1.0'"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10 1') == '2.33333333'\nassert solution('1 10 1') == '2.33333333'\nassert solution('3 10 1') == '3.33333333'\nassert solution('3 10 1') == '3.33333333'\n\n>>>"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n0 10 1\\n0 10 1\\n0 10 1\") == \"3.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    5 10\n    0 10 1\n    0 10 1\n    0 10 1\n    0 10 1\n    ''') == '4.400000000000004'\nassert solution('''\n    3 10\n    0 10 1\n    0 10 1\n    0 10 1\n    0 10 1\n    ''') == '3.333333333333333'\n''')"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n''')\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('10') == '1'\n\nSample Input:\n5\n3 2 1 2 1\nSample Output:\n2\n'''"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '2'\nassert solution('3 10') == '3'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 3 2\nSample Input 2:\n8\n2 5 1 7 6 8 7 5 6\nSample Output 2:\n3\n''') == '3'\n\nassert solution('''\n8\n3 5 1 7 6 8 7 5 6\nSample Input 3:\n10\n8 5 1 7 6 8 7 5 6 9 4\nSample Output 3:\n6\n''') == '6'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3 3 2\nSample Input:\n2\n3 1 2\nSample Output:\n0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n3 2 1\nSample Input:\n10\n2 1 2 2 3 2 2 1 2 1\nSample Output:\n2\n\"\"\") == \"2\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 2 3\n''') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 4 1\n''') == '2'\nassert solution('''\n3\n1 1 1\n''') == '3'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\naba\\n\") == \"1\"\nassert solution(\"2 2\\naba\\naba\\n\") == \"2\"\nassert solution(\"3 3\\naba\\naba\\nbaa\\n\") == \"4\"\nassert solution(\"10 1\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\naba\\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\nabba\") == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 2\") == \"2\""
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == \"2\""
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n\n---Input---\n4 3\nab\nba\nbc\ndb\n\n---Output---\n2\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\nabba\n''') == '2'\nassert solution('''\nabba\n''') == '2'\nassert solution('''\n2\nabb\n''') == '2'\nassert solution('''\n2\nbba\n''') == '2'\nassert solution('''\n2\nabb\n''') == '2'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''4 5\n1 2\n3 4\n2 5\n1 2\n3 4\n1 4\n2 5\n''') == '4'\nassert solution('''10 3\n4 6\n1 7\n3 2\n6 3\n2 2\n1 4\n1 5\n1 5\n3 4\n4 2\n3 4\n3 1\n2 3\n5 4\n''') == '4'\nassert solution('''10 5\n1 5\n1 2\n3 4\n2 4\n2 5\n1 4\n2 3\n1 4\n2 3\n3 4\n4 5\n4 3\n5 2\n5 4\n5 1\n5 4\n5 3\n2 4\n3 5\n3 1\n5 2\n2 4\n2 5\n4 4\n''') == '6'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n3\n3\n''') == '3'\nassert solution('''3\n1\n1\n1\n''') == '4'\nassert solution('''4\n1\n2\n3\n''') == '3'\nassert solution('''2\n1\n1\n''') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 5') == '1'\nassert solution('7 3') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 2\\n2 3') == '3'\nassert solution('4 5\\n2 4\\n3 5\\n4 5\\n5 3\\n') == '1'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4\n1 2\n2 3\n2 4\n''') == '4'\nassert solution('''\n4\n1 2\n2 3\n1 4\n''') == '4'\nassert solution('''\n10\n1 2\n1 3\n3 4\n4 5\n5 6\n4 7\n7 8\n8 9\n4 10\n5 11\n6 12\n5 13\n4 14\n3 15\n2 16\n2 17\n2 18\n3 19\n2 20\n2 21\n''') == '9'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3'\nassert solution('\\n'.join([\n    '4',\n    '3',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    '2',\n    "
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 3') == '1'\nassert solution('1 2\\n2 3\\n2 4') == '2'\nassert solution('10 20\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n3 10\\n3 11\\n3 12\\n3 13\\n3 14\\n4 15\\n4 16\\n4 17\\n4 18\\n4 19\\n4 20\\n5 21\\n5 22\\n5 23\\n5 24\\n6 25\\n6 26\\n6 27\\n6 28\\n7 29\\n7 30\\n7 31\\n7 32\\n8 33\\n8 34\\n8 35\\n8 36\\n9 37\\n9 38\\n9 39\\n9 40\\n10 41\\n10 42\\n10 43\\n10 44\\n11 45\\n11 46\\n11 47\\n11 48\\n12 49\\n12 50\\n12 51\\n12 52\\n13 53\\n13 54\\n13 55\\n13 56\\n14 57\\n14 58\\n14 59\\n14 60\\n15 61\\n15 62\\n15 63\\n15 64\\n16 65\\n16 66\\n16 67\\n16 68\\n17 69\\n17 70\\n17 71\\n17 72\\n18 73\\n18 74\\n18 75\\n18 76\\n19 77\\n19 78\\n19 79\\n19 80') == '4'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '3'\nassert solution('4 3') == '4'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('10 5') == '3'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"1000 1\") == \"1\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 2') == '0'\nassert solution('1 0') == '1'\nassert solution('0 1') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '1'\n\nassert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '0'\n\n''')\n\n\n\n'''"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '1'\nassert solution('''\n3 3\n0 1\n1 2\n1 3\n0 4\n2 4\n2 5\n''') == '1'\nassert solution('''\n6 2\n2 3\n3 4\n5 6\n5 7\n6 8\n''') == '2'\nassert solution('''\n6 6\n1 1\n0 0\n1 1\n1 1\n1 1\n0 1\n1 2\n''') == '0'\nassert solution('''\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 1 1') == '2'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n''') == '1'\nassert solution('''\n3 3\n1 1\n0 0\n0 1\n1 1\n2 0\n2 1\n2 2\n''') == '2'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n2 2\n0 0\n1 1\n1 2\n1 3\n1 4\n'''\n    ) == '2'\n    \nassert solution(\n    '''\n2 1\n1 1\n1 3\n2 3\n'''\n    ) == '0'\n    \nassert solution(\n    '''\n2 2\n0 0\n1 1\n1 2\n1 3\n1 4\n'''\n    ) == '1'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n2\n3\n1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n2\n2\n1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n1\n1\n\"\"\") == \"3\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3\") == \"7\"\nassert solution(\"1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3\") == \"7\"\nassert solution(\"1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3\\n1 2 3\\n1 2 1\\n1 2 3\\n1 2 1\\n1 2 3\\n1 2 1\\n1 2 3\") == \"12\"\nassert solution(\"1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3\\n1 2 3\\n1 2 1\\n1 2 3\\n1 2 1\\n1 2 3\\n1 2 1\\n1 2 3\") == \"12\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == \"7\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\") == '0'\nassert solution(\"1 2 3\") == '1'\nassert solution(\"3 2 2\") == '2'\nassert solution(\"5 2 1\") == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"7\"\nassert solution(input_string=\"\"\"\n3\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"7\"\nassert solution(input_string=\"\"\"\n100\n10000 100000 1000000 1000000000 100000000 10000000000\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"7\"\nSample Input 2:\n2\n4\n5 1 1\n1 5 1\n5 1 1\n5 1 1\nSample Output 2:\n7\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\n\n'''"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2 2\n2 2\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n5\n2 2 1 1 2\n1 2 3 3 2\n1 1 1 1 1\n1 2 1 1 2\n1 2 1 1 2\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\n5\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n100\n
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '20'\nassert solution('10 10') == '10'\nassert solution('20 20') == '30'\nassert solution('10 10 10') == '0'\nassert solution('20 20 10') == '20'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\nprint(solution(input()))\n\"\"\"\nfrom functools import reduce\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == '20'\nprint(solution('''\n7 5\ncaleb 1\n2\ncalculus 1\ncaleb 1\n2\ncaleb 1\n2\ncalculus 2'''))\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 4\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n''') == '20'\nassert solution('''\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\n''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"20\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"5 1\") == \"10\"\nassert solution(\"6 3\") == \"10\"\nassert solution(\"6 2\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"20\"\nassert solution(\"3 4\") == \"10\"\nassert solution(\"10\") == \"0\"\nassert solution(\"4\") == \"4\"\nassert solution(\"100\") == \"0\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '20'\nassert solution('10') == '10'\nassert solution('20') == '20'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n\") == \"20\"\nassert solution(\"3\\nlinearalgebra 1\\nlinearalgebra 2\\nlinearalgebra 3\\n\") == \"20\"\nassert solution(\"4\\ncalculus 1\\ncalculus 2\\ncalculus 3\\n\") == \"10\"\nassert solution(\"4\\ncalculus 1\\ncalculus 2\\ncalculus 3\\n\") == \"20\"\nassert solution(\"4\\ncalculus 1\\ncalculus 2\\ncalculus 3\\n\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n\") == \"4\"\nassert solution(\"2\\n5\\n2\\n\") == \"7\"\nassert solution(\"3\\n4\\n4\\n\") == \"6\"\nassert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == '2'\nassert solution('4 1 2') == '2'\nassert solution('4 2 2') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\") == \"6\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 3\\n1 2 3\") == \"3\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"6\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\nassert solution(stdin=\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\") == \"6\"\nassert solution(stdin=\"4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\") == \"7\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"4 1 2\") == \"3\"\nassert solution(\"3 4 1\") == \"3\"\nassert solution(\"4 1 2\") == \"3\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 2') == '6'\nassert solution('1 2 3') == '8'\nassert solution('3 4 1') == '5'\nassert solution('4 1 2') == '5'\nassert solution('4 1 3') == '5'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '6'"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n4\\n2 3\\n4 3 1') == '6'\nassert solution('3\\n2 3\\n2 2\\n3 2\\n1 2') == '1'\nassert solution('6\\n1 4 2\\n2 3 4\\n3 4 1\\n4 3 6\\n5 1 2') == '6'\nassert solution('3\\n3 2\\n1 2\\n2 3\\n2 2') == '1'\nassert solution('5\\n1 4 2\\n2 3 4\\n3 4 1\\n4 3 6\\n5 1 2') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4') == '6'\nassert solution('4 1 2') == '0'\nassert solution('3 3 3') == '6'\nassert solution('4 3 6') == '9'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1\\n1 1\\n') == '2'\nassert solution('3 1 1\\n3\\n2\\n1 2\\n2 3 1\\n1 1\\n') == 'impossible'\nassert solution('3 3 3\\n3\\n1 2\\n3\\n1 3 2\\n1 3 3\\n') == 'impossible'\nassert solution('10 10 10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n') == 'impossible'\nassert solution('3\\n') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1') == 'impossible'\nassert solution('3 1 1') == '2'\nassert solution('4 2 1') == 'impossible'\nassert solution('3 3 1') == '2'\nassert solution('4 4 1') == '2'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1') == '2'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == '2'\nassert solution('2\\n3\\n1 2\\n2 3 1') == 'impossible'\nassert solution('3 3\\n1 2 3\\n3 1 2') == 'impossible'\nassert solution('6\\n3\\n5 1 2 1 3\\n1 1 1 1 1\\n1 2 2 2 1\\n1 3 3 3 1\\n1 4 4 1 2\\n2 4 4 1 3\\n2 3 4 4 2\\n2 4 3 4 1\\n2 5 5 4 2\\n3 4 3 3 1\\n3 5 3 3 2\\n3 6 4 3 3\\n4 6 4 3 3\\n4 5 5 4 3\\n4 6 5 4 3\\n5 6 6 4 3\\n6 6 5 4 3\\n6 5 6 5 4\\n5 6 6 5 4\\n6 6 6 6 5') == '1'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == '2'\n\nassert solution('''3 1 1\n2\n3\n1 2\n2 3 1\n1 1''') == 'impossible'"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('3 2') == 'impossible'\nassert solution('2 2') == '2'\nassert solution('3 3') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 1 1\n1\n2\n1 1\n1 2\n1 1\n2 1''') == '2'\n\nassert solution('''8 5 1\n3\n5\n1 4\n1 5\n4 6\n5 7\n6 8\n7 9\n8 10\n3 8\n7 2\n6 1\n5 4\n4 7\n1 3\n10 8\n2 9\n9 1\n1 10\n2 5\n3 6\n8 1\n9 4\n''') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '2'\nassert solution('1 1') == '2'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\nassert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == 'impossible'\n\n'''\n--- Part Two ---\n\nTo be able to build soldiers, you need to build one of each resource type. You can start with iron and coal. The board you are given consists of only cells that have either a resource, either none of them. You can start from any cell and construct any soldier.\n\nAt the beginning of the game, you need to construct one soldier that owns no resources. The cells are represented by digits from $1$ to $n$, so if you are building soldiers at the beginning of the game you need to construct a soldier that owns no resources.\n\nIf you want to construct one of each of the resources, you have to construct as many soldiers as possible. To construct a soldier you need to take as many resources as possible. In any given move you are allowed to move a maximum of $2$ resources, but you can\u2019t build more than one.\n\nAt the beginning of the game you need to construct a soldier with at least one resource. The soldier you construct will own at least one resource.\n\nThe soldier you construct will be in a cell that has either no resources, or both resources. In other words, the soldier will be in a cell with at least one of the two resources it needs. You will have to take as many resources as possible to construct the soldier. The soldier you construct will own the resources and not have to leave it.\n\nIf you own an empty cell, you can move to it as many times as you want.\n\nThe game ends when you have no more resources to construct a soldier. You win if you have a cell with no resources.\n\nIf you start by constructing a soldier that owns a resource, you lose.\n\nGiven an integer $n$, the number of cells on the playing field, and the two integers $m$ and $k$ (respectively, the number of cells containing iron ore and coal), write a function that returns the minimum number of soldiers that you need to construct to guarantee victory.\n\nSample Input:\n5 1 1\n4\n3\n4\n4\n1 2\nSample Output:\n4\n'''"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5 7\n0 0\n0 8\n0 7\n0 6\n2''') == '500.00'\n'''"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    1\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    3\n    3 3\n    3 6\n    4\n    1 3\n    2\n    1 4\n    3\n    2 4\n    5\n    2 5\n    5 5\n    3\n    1 1\n    1 2\n    1 3\n    1 4\n    2\n    1 2\n    3\n    1 5\n    "
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"500.00\""
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0.00\"\nassert solution(\"2\") == \"500.00\""
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n50 50\\n') == \"500.00\"\nassert solution('2\\n500 250\\n250 750\\n') == \"500.00\""
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '500.00'\nassert solution('5') == '750.00'\nassert solution('20') == '2000.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n5 5\n''') == '500.00'\nassert solution('''\n2\n3 3\n''') == '3.33'\nassert solution('''\n3\n4 4\n''') == '2.67'"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n250 250\n250 750\n\"\"\") == \"500.00\"\n\n\"\"\"\n4\n120 120\n120 120\n220 120\n220 120\n\"\"\n\"\"\"\nassert solution(\n\"\"\"\n2\n120 120\n120 120\n\"\"\") == \"200.00\"\n\"\"\"\n5\n25 25\n50 50\n75 75\n100 100\n\"\"\n\"\"\"\nassert solution(\n\"\"\"\n2\n100 100\n25 25\n\"\"\") == \"100.00\"\n\"\"\"\n\n\"\"\"\n5\n25 25\n50 50\n75 75\n100 100\n90 90\n\"\"\n\"\"\"\nassert solution(\n\"\"\"\n1\n2\n3\n4\n\"\"\") == \"4.00\"\n\"\"\"\n\n\"\"\"\n1\n2\n3\n4\n\"\"\n\"\"\"\nassert solution(\n\"\"\"\n2\n0\n100 100\n10 10\n\"\"\") == \"0.00\"\n\"\"\"\n\n\"\"\"\n1\n2\n3\n4\n\"\"\n\"\"\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution(\n    '''\n3\n250 250\n500 500\n500 700\n''') == '1000.00'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '0'\nassert solution('4 5') == '0'\nassert solution('10 20') == '0'\nassert solution('10 2') == '0'\nassert solution('100 1 10') == '0'\n\nimport math\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", \"x y\")"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n4 100 10\n100 1 10\n100 2 10\n100 3 10\n100 4 10''') == '0'\nassert solution('''\n4\n5 100 10\n100 1 10\n100 2 10\n100 3 10''') == '10'\nassert solution('''\n2\n100 200\n1 100''') == '191'\nassert solution('''\n1\n100000000000''') == '00000000000'\nassert solution('''\n4\n5 100 10\n100 1 10\n100 2 10\n100 3 10''') == '10'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '0'\nassert solution('2\\n1\\n2') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '0'\nassert solution('1') == '0'\n'''"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('2\\n2\\n') == '200'\nassert solution('3\\n3\\n') == '200'\nprint('Congratulations, have fun!')\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0\"\nassert solution('2 3') == \"0\"\nassert solution('1 2') == \"2\"\nassert solution('1 2 3') == \"4\"\nassert solution('1 3') == \"3\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"3 3\") == \"9\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '0'\nassert solution('5 5') == '10'\nassert solution('1 5') == '4.5'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    2 3\n    2 100 10\n    100 1 10\n    ''') == '0'\nassert solution('''\n    3 5\n    1 6 5\n    1 1 2\n    2 3 4\n    3 4 4\n    ''') == '6'\nassert solution('''\n    4 8\n    1 2 6\n    3 4 5\n    1 3 3\n    1 1 4\n    1 2 2\n    3 2 4\n    ''') == '18'\n''')\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '1'\nassert solution('40') == '3'\n\"\"\"\n\nn,r,c,m=map(int,input().split())\n\narr=[]\nfor i in range(n+m):\n    arr.append(list(map(int,input().split())))\n\nans=0\nfor i in range(n+m):\n    for j in range(n+m):\n        if(arr[i][j]==1):\n            ans=max(ans,(r-1)*2+(c-1)*2)\n\nprint(ans)\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\nassert solution(\n    \"1 1 1 1 1\") == \"1\"\nassert solution(\n    \"4 4 4 4\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n1 1 1 1\\n\") == \"4\"\n\nimport os, sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestThis(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        print(out)\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 1 1 1 1\"\"\"\n        output = \"\"\"1\"\"\"\n        self."
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 50''') == '2'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 50''') == '1'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 50 50''') == '1'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 50 50 50''') == '0'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n50 5 25 20 35''') == '1'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n50 5 25 20 35''') == '0'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 20 35''') == '0'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 20 35\n50 5 25 20 35''') == '0'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('80 50 3 2') == '2'\nassert solution('75 5 25 20 50 35') == '1'\nassert solution('110 50 2 50 20 50 35') == '2'\nassert solution('200 50 2 50 20 50 35') == '4'\nassert solution('300 50 2 50 20 50 35') == '5'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(r\"\"\"\n5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '2'\nassert solution('''160 40 4 3\n3 4 1 7\n1 5 3 5\n5 5 7 5\n4 5 7 7\n5 5 7 5\n3 4 5 7\n4 4 7 7\n4 5 7 5\n''') == '0'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '1'\nassert solution('''4 5 1 6\n2 4 6 7\n2 5 6 6\n4 5 6 6\n3 4 5 6\n1 5 6 6\n5 4 5 6\n4 4 6 6\n1 1 1\n''') == '2'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == '0'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == \"2\"\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 35''') == \"3\"\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n20 5 25 20 50 35\n20 5 35''') == \"4\"\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n20 5 25 20 50 35\n20 5 35''') == \"3\"\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n20 5 35''') == \"1\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\"\"\") == \"2\"\n\nassert solution(\"\"\"0 0 0 0\n0 0 0 0\"\"\") == \"1\"\n\nassert solution(\"\"\"2 2 2 2\n2 2 2 2\"\"\") == \"2\"\n\nassert solution(\"\"\"2 2 2 2\n1 2 2 2\"\"\") == \"1\"\n\nassert solution(\"\"\"2 2 2 2\n1 2 2 2\n2 2 2 2\"\"\") == \"1\""
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\nSample Output:\nAAAA\n...A\n....\n\nBB..\nBBBB\n...B\n\n....\n...C\nCCCC\n''') == 'BBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == \"AAAA\\n...A\\n....\""
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4\n2211\n1112\n1112''') == 'AAAABBBBBBCCCCCC'\nprint(solution('''3 4\n2211\n1112\n1112'''))"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4\n2211\n1112\n1112''') == 'AAAA'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"BBBB\"\nassert solution(\"3 3\") == \"A...B\"\nassert solution(\"4 4\") == \"A...B....CCCC\"\nassert solution(\"8 2\") == \"BBBBBBBBBBBBBBBB\"\nassert solution(\"8 1\") == \"BBBBBBBBBBBBBBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"AAAA\\n...A\\n....\\n\"\nprint(solution(input))"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('5 5\\n0000\\n0000\\n0000\\n0000\\n0000') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('3 3\\n1112\\n2211\\n1') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('5 5\\n0000\\n0000\\n0000\\n0000\\n0000') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('5 5\\n0011\\n0001\\n1111\\n2222\\n0000\\n') == 'AAAA\\n...A\\n....\\n...C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAABBBB'\nassert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAABBBB'\nassert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAABBBB'\nassert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAABBBB'\nassert solution('''\n3 4\n1111\n1111\n1111\n''') == 'AAAABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 5\n2211\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n''') == 'BBBB'\nassert solution('''\n10 5\n2211\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n''') == 'BBBB'\nassert solution('''\n10 5\n2211\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n''') == 'BBBB'\nassert solution('''\n10 5\n2211\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n''') == 'BBBB'\nassert solution('''\n10 5\n2211\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n1112\n''') == 'BBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'AAAA'\nassert solution('1 2') == 'AA'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\nassert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '11'\nassert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '11'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1 2\") == \"9\"\nassert solution(\"2 1 1 3\") == \"6\"\nassert solution(\"2 5 2 1 3 3 2\") == \"12\"\nassert solution(\"3 2 2 3 2\") == \"12\"\nassert solution(\"3 3 3 3 3 3\") == \"27\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 3 2\") == \"4\"\n\nassert solution(\"2 1 3 1\") == \"6\"\n\nassert solution(\"3 2 2 2\") == \"9\"\n\nassert solution(\"3 2 2 2\") == \"9\"\n\nassert solution(\"10 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\""
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '9'\nassert solution(\"2 1 3 3\") == '9'\nassert solution(\"3 4 1 2 3 2\") == '5'\nassert solution(\"4 3 1 2 1\") == '5'\nassert solution(\"1 4 1 2 1 3\") == '8'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '8'\nassert solution('4 3 1 2 1 3') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1 3 3\") == \"9\"\nassert solution(\"3 4 1 2 3 2\") == \"7\"\nassert solution(\"4 3 1 2 1\") == \"4\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 1 1\n1 3 2 1 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 4 1 2 3 2\n3 4 1 2 1 3 2\n1 3 1 2 3 1\n1 4 1 2 3 1 3\n\"\"\") == \"9\"\nassert solution(\"\"\"\n5 2 1 3 3 2\n2 5 1 3 3 2\n2 3 1 3 3 2\n1 5 1 3 3 2\n3 4 1 2 1 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '9'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 3 3') == '9'\nassert solution('3 4 1 2 3 2') == '7'\nassert solution('4 3 1 2 1') == '6'\nassert solution('1 4 1 2 1 3') == '5'\nassert solution('3 5 1 2 1') == '5'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 2 6') == '20.396078'\nassert solution('6 2 2 8') == '20.396078'\nassert solution('6 2 2 8 0 0 6') == '20.396078'\nassert solution('6 2 2 8 0 8 8') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nprint('Tests passed')"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 2 2 8') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('1 1 2 3 4 5 6 7 8') == '0.0'\nassert solution('3 2 3 2 5 6 3 7 2') == '1.0'"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\nassert solution('3 4 7') == 'IMPOSSIBLE'\nassert solution('0 8 8') == '20.396078'\nassert solution('6 8 8') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"7 9 2 8\") == \"12.427678\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\nassert solution('3 4 7') == 'IMPOSSIBLE'\nassert solution('0 8 8') == '20.396078'\nassert solution('6 8 8') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('4 8 4 6') == '29.671875'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n3 3 1 9\n1 2 5\n2 5 1\n''') == '18.335968'\nassert solution('''\n1 1 1 2\n1 2\n1 3\n''') == '4.106865'\nassert solution('''\n3 3 1 9\n1 2 5\n2 5 1\n''') == '18.335968'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"0 0 6\") == \"0.071875\"\nassert solution(\"3 4 7\") == \"9.382718\"\nassert solution(\"0 8 8\") == \"0\"\nassert solution(\"6 8 8\") == \"20.396078\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8') == 'c'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\") == \"b\\nc\\nd\\ne\\nf\\ng\\nh\\ni\\nj\\nk\\nl\\nm\\no\\np\\q\\rr\\rs\\ss\\tt\\tu\\vv\\tw\\xx\\yy\\zz\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''abca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'b'\n\nassert solution('''kang the penguin has forgotten some letters of his password\n\nabcdefghijklmnopqrstuvwxyz"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'c'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"c\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"c\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'c'\nassert solution('aaabaaab') == 'a'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'z'\nassert solution('ii jj kk ll mm nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'z'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'a'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\"\n) == \"b\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\\n1 8'\n) == 'bcdeeffgghiijjkkllmm'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"robot\") == \"1\"\nassert solution(\"hobit\") == \"2\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrakija\\n') == '12'"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"2\") == \"10\"\nassert solution(\"1\") == \"16\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"12\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"3\"\nassert solution('9') == \"9\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == \"12\"\nassert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == \"16\"\nassert solution('1\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == \"7\"\nassert solution('7\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == \"7\"\nassert solution('10\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == \"0\"\n\n-----------------------------\n\nN=4\nc=0\nfor x in range(4):\n    c=c+len(max(word1,word2))+1\n    word1=word2\n    word2=str(stdin.readline()).replace('\\n','')\n    if word1==word2:\n        break\nprint(c)\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"3\\n\") == \"1\"\nassert solution(\"4\\n\") == \"2\"\nassert solution(\"5\\n\") == \"3\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija''') == '12\\n10\\n16\\n7'"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '''12\n10\n16\n7\n'''\n\nassert solution('''\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '''12\n10\n16\n7\n'''\n\nassert solution('''\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '''12\n10\n16\n7\n'''"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '12'\nassert solution('10') == '10'\nassert solution('20') == '10'\nassert solution('10') == '10'\nassert solution('14') == '11'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"12\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('1 1\\nA B C D') == 'A B C D'\nassert solution('2 2\\nA A') == 'AA'\nassert solution('2 2\\nA A') == 'AA'\nassert solution('1 1\\nA A') == 'A A'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"THIS IS A TEST\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nSample Input:\n12 4\nQTYVEAMPQQQS\nSample Output:\nQTYVEAMPQQQS'''\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nprint(solution('14 4\\nJQ IRKEYFG EXQ'))\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\"\nassert solution(\n    \"KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS KGS K"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('14 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\nWKVZPJWKG QTLABJWZHUZQJGJKXQQQPXQQXQXQ\n''') == 'THIS IS A TEST'\n\nassert solution('''9\nHKPQJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJTUZUUJZTHRMUJZTJFJT"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.6') == '135'\nassert solution('2.7') == '270270'\nassert solution('2.8') == 'No solution'\nassert solution('2.9') == 'No solution'\nassert solution('3.0') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3.6') == '135'\nassert solution('5.6') == '270'\nassert solution('25.6') == '135135'\nassert solution('15.6') == '270270'\nassert solution('11.6') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1.7') == '135'\nassert solution('2.6') == '270'\nassert solution('3.5') == '270270'\nassert solution('4.3') == 'No solution'\n\nLukas does not like numbers with more than 8 digits. If he is to write a program to check if a number has more than 8 digits he does not want to do so, so he can test your program as follows:"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.6') == '135', \"3rd example\"\nassert solution('10.8') == '21080', \"4th example\"\n\n\"\"\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2.6') == '135'\nassert solution('4.6') == '270'\nassert solution('2.3') == '3135'\nassert solution('10.12') == '1024521'\nassert solution('10.8') == '1024521'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    1.6\n    2.6\n    135\n    270\n    135135\n    270270\n''') == '''\n135\n270\n135135\n270270\n'''\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1.00000000000\") == \"1\"\nassert solution(\"1.0000000000000000001\") == \"1\"\nassert solution(\"1.000000000000000001\") == \"1\"\nassert solution(\"1.00000000000000000001\") == \"1\"\nassert solution(\"1.000000000000000000001\") == \"1\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2.6\") == \"135\\n270\""
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.2') == '135'\nassert solution('1.6') == '135135'\nassert solution('1.1234') == '135135135'\nassert solution('0.1234') == 'no solution'\nassert solution('0.1') == 'no solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1.2\") == \"No solution\"\nassert solution(\"0.5\") == \"No solution\"\nassert solution(\"0.2\") == \"No solution\"\nassert solution(\"0.000001\") == \"No solution\"\nassert solution(\"1.2\") == \"135\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '4'\nassert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '0'\nassert solution('20\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '1'\nassert solution('100\\n0 1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 7\\n4 5\\n6 5\\n9\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '4'\nassert solution('4\\n1 2\\n2 1\\n3 4\\n4 3\\n5 5\\n6 4\\n7 5\\n8 3\\n9 5\\n9 5\\n10 4\\n11 2\\n12 4\\n12 5\\n13 5\\n14 5\\n15 5\\n16 5\\n17 5\\n18 5\\n19 5\\n20 5\\n21 5\\n22 5\\n23 5\\n24 5\\n25 5\\n26 5\\n27 5\\n28 5\\n29 5\\n30 5\\n31 5\\n32 5\\n33 5\\n34 5\\n35 5\\n36 5\\n37 5\\n38 5\\n39 5\\n40 5\\n41 5\\n42 5\\n43 5\\n44 5\\n45 5\\n46 5\\n47 5\\n48 5\\n49 5\\n50 5\\n51 5\\n52 5\\n53 5\\n54 5\\n55 5\\n56 5\\n57 5\\n58 5\\n59 5\\n60 5\\n61 5\\n62 5\\n63 5\\n64 5\\n65 5\\n66 5\\n67 5\\n68 5\\n69 5\\n70 5\\n71 5\\n72 5\\n73 5\\n74 5\\n75 5\\n76 5\\n77 5\\n78 5\\n79 5\\n80 5\\n81 5\\n82 5\\n83 5\\n84 5\\n85 5\\n86 5\\n87 5\\n88 5\\n89 5\\n90 5\\n91 5\\n92 5\\n93 5\\n94 5\\n95 5\\n96 5\\n97 5\\n98 5\\n99 5\\n100 5\\n101 5\\n102 5\\n103 5\\n104 5\\n105 5\\n106 5\\n107 5\\n108 5\\n109 5\\n110 5\\n111 5\\n112 5\\n113 5\\n114 5\\n115 5\\n116 5\\n117 5\\n118 5\\n119 5\\n120 5\\n121 5\\n122 5\\n123 5\\n124 5\\n125 5\\n126 5\\n127 5\\n128 5\\n129 5\\n130 5\\n131 5\\n132 5\\n133 5\\n134 5\\n135 5\\n136 5\\n137 5\\n138 5\\n139 5\\n140 5\\n141 5\\n142 5\\n143 5\\n144 5\\n145 5\\n146 5\\n147 5\\n148 5\\n149 5\\n150 5\\n151 5\\n152 5\\n153 5\\n154 5\\n155 5\\n156 5\\n157 5\\n158 5\\n159 5\\n160 5\\n161 5\\n162 5\\n163 5\\n164 5\\n165 5\\n166 5\\n167 5\\n168 5\\n169 5\\n170 5\\n171 5\\n172 5\\n173 5\\n174 5\\n175 5\\n176 5\\n177 5\\n178 5\\n179 5\\n180 5\\n181 5\\n182 5\\n183 5\\n184 5\\n185 5\\n186 5\\n187 5\\n188 5\\n189 5\\n190 5\\n191 5\\n192 5\\n193 5\\n194 5\\n195 5\\n196 5\\n197 5\\n198 5\\n199 5\\n200 5\\n201 5\\n202 5\\n203 5\\n204 5\\n205 5\\n206 5\\n207 5\\n208 5\\n209 5\\n210 5\\n211 5\\n212 5\\n213 5\\n214 5\\n215 5\\n216 5\\n217 5\\n218 5\\n219 5\\n220 5\\n221 5\\n222 5\\n223 5\\n224 5\\n225 5\\n226 5\\n227 5\\n228 5\\n229 5\\n230 5\\n231 5\\n232 5\\n233 5\\n234 5\\n235 5\\n236 5\\n237 5\\n238 5\\n239 5\\n240 5\\n241 5\\n242 5\\n243 5\\n244 5\\n245 5\\n246 5\\n247 5\\n248 5\\n249 5\\n250 5\\n251 5\\n252 5\\n253 5\\n254 5\\n255 5\\n256 5\\n257 5\\n258 5\\n259 5\\n260 5\\n261 5\\n262 5\\n263 5\\n264 5\\n265 5\\n266 5\\n267 5\\n268 5\\n269 5\\n270 5\\n271 5\\n272 5\\n273 5\\n274 5\\n275 5\\n276 5\\n277 5\\n278 5\\n279 5\\n280 5\\n281 5\\n282 5\\n283 5\\n284 5\\n285 5\\n286 5\\n287 5\\n288 5\\n289 5\\n290 5\\n291 5\\n292 5\\n293 5\\n294 5\\n295 5\\n296 5\\n297 5\\n298 5\\n299 5\\n300 5\\n301 5\\n302 5\\n303 5\\n304 5\\n305 5\\n306 5\\n307 5\\n308 5\\n309 5\\n310 5\\n311 5\\n312 5\\n313 5\\n314 5\\n315 5\\n316 5\\n317 5\\n318 5\\n319 5\\n320 5\\n321 5\\n322 5\\n323 5\\n324 5\\n325 5\\n326 5\\n327"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == \"4\"\nassert solution('''\n5\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == \"0\"\nassert solution('''\n2\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n''') == \"0\"\nassert solution('''\n6\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n''') == \"0\"\nassert solution('''\n10\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == \"0\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('2\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3') == '0'"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1\\n3 7\\n4 5\\n6 5\\n9') == '4'\nassert solution('2\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    4\n    0 1\n    3 7\n    4 5\n    6 5\n    9\n    1 4\n    1 6\n    2 3\n    2 5\n    3 5\n    3 6\n    4 8\n    5 4\n    6 3\n''') == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\nassert solution('7') == '2'\nassert solution('8') == '2'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2') == '0.0000000 0.0000000'\nassert solution('5\\n1 3') == '1.0000000 0.0000000'\nassert solution('5\\n1 4') == '-1.0000000 0.0000000'\nassert solution('5\\n1 5') == '0.0000000 1.0000000'\nassert solution('5\\n1 3 2') == '1.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\""
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"0.0000000 0.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution(\"10\") == '-2.99999994 -2.99999994\\n-1.99999994 -2.99999994\\n0.99999994 -1.99999994\\n1.99999994 -2.99999994\\n2.99999994 -1.99999994\\n3.99999994 -2.99999994\\n4.99999994 -1.99999994\\n5.99999994 -2.99999994\\n6.99999994 -1.99999994\\n7.99999994 -2.99999994\\n8.99999994 -1.99999994\\n9.99999994 -2.99999994\\n10.99999994 -1.99999994'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.0 0.0'\nassert solution('2') == '0.0 0.0'\nassert solution('3') == '0.0 0.0'\nassert solution('4') == '0.0 0.0'\nassert solution('5') == '0.0 0.0'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"1\"\nassert solution(\"aa\") == \"2\"\nassert solution(\"a*\") == \"2\"\nassert solution(\"a*a\") == \"1\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\na*a\n''') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4\\naaa\\nabc\\naba') == '2'\nassert solution('3\\n2\\naba\\naba\\na*a') == '1'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba\\na*a\\naaa*\\n*aaa\\n') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == \"2\"\n\nassert solution('''\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == \"1\"\n\nassert solution('''\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == \"1\"\n\nassert solution('''\n4\n*aa*a\naa*a\naa*a\na*a\n''') == \"4\"\n\nassert solution('''\n1\n*aaa\n''') == \"0\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\naaa*\") == \"2\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\na*a\\nabc*\") == \"1\"\nassert solution(\"3 3\\naaa\\nabc\\naba\\nab*c\\naca*\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 4') == '1'\nassert solution('10 3') == '0'\nassert solution('3 5') == '1'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\n''') == '2\\n1\\n1\\n'\n\n\n----SOLUTION----\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"aaa\") == '1'\nassert solution(\"abc\") == '2'\nassert solution(\"aba\") == '1'\nassert solution(\"a*a\") == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nOX\nOX\n''') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"0\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\nOXXOXXO') == '1'\nassert solution('5 5\\nOXXOXOXXO') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 2\\nOO\\nOO\\nXO\\nXO\\nXO\\nOX\\n') == '1'\nassert solution('3 2\\nXX\\nXO\\n') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO''') == '1'\n'''"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 3\\nXO OO\\nOX XO\\nXO XO\\nOX OX\\nXO OX\\nOX XO\\n\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"0\"\nassert solution(\"4 3\\nXO OO\\nOX XO\\nXO XO\\nOX OX\\nXO OX\\nOX XO\\n\") == \"0\"\nassert solution(\"4 4\\nXO OO\\nOX XO\\nXO XO\\nOX OX\\nXO OX\\nOX XO\\n\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '1'\nassert solution('5 1') == '0'\nassert solution('5 2') == '1'\nassert solution('5 3') == '1'\nassert solution('5 4') == '1'\n\"\"\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\"\nassert solution(\"3 2\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\") == \"0\"\nassert solution(\"3 2\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\\nXX\") == \"1\"\nassert solution(\"10 20\\nOXXOOOXX\\nOXXOOOXO\\nOOOXXOOO\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nOOOXOXXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\nXXOOOXOXX\\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n') == '1'\n\n\"\"\"\n\n\"\"\"\nTime: O(rc)\nSpace: O(rc)\n\"\"\"\n\nn, r = map(int, input().split())\nboard = [[0]*r for _ in range(r)]\n\nfor i in range(r):\n    line = list(input())\n    for j in range(len(line)):\n        if line[j] == 'O':\n            board[i][j] = 1"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 0\\n0 2\\n-2 0\\n0 -2\") == \"16\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2\\n') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '2 0\\n'\n    '0 2\\n'\n    '-2 0\\n'\n    '0 -2\\n'\n) == '16'\n\nassert solution(\n    '1\\n'\n) == '1'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == '16'\nassert solution('10\\n1 2\\n2 2\\n3 4\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10') == '17'\nprint('all test cases passed')\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n0 2\n-2 0\n0 -2\n0 2\n5 1\n''') == '15'\nassert solution('''7\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n''') == '25'\nassert solution('''5\n0 -1\n1 -1\n0 0\n-1 -1\n0 -1\n''') == '16'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0') == '16'\nassert solution('0 2') == '16'\nassert solution('-2 0') == '16'\nassert solution('0 -2') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n-2 0\n0 2\n-2 0\n''') == '8'\nassert solution('''\n8\n0 2\n-2 0\n0 -2\n-2 0\n0 2\n-2 0\n''') == '15'\nassert solution('''\n12\n-2 0\n0 2\n0 -2\n-2 0\n0 2\n-2 0\n0 2\n-2 0\n0 -2\n-2 0\n0 2\n0 -2\n-2 0\n0 2\n-2 0\n0 2\n-2 0\n0 -2\n-2 0\n0 2\n''') == '29'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 2\\n-2 0\\n0 -2') == '16'\nassert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == '16'\nassert solution('9\\n-4 0\\n0 -4\\n-4 0\\n-4 0') == '44'\nassert solution('100\\n-5 0\\n0 -5\\n-5 0\\n-5 0') == '5050'\nassert solution('1000\\n-100 0\\n0 -100\\n-100 0\\n-100 0') == '500000'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 0\\n0 2\\n-2 0\\n0 -2') == \"16\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n2 0\n0 2\n-2 0\n0 -2\n\"\"\") == \"16\"\nassert solution(\"\"\"\n3\n1 2\n1 -2\n1 -2\n\"\"\") == \"5\"\n\"\"\"\nOutput\n\n-5\n\"\"\") == \"5\"\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 10 50\n8 8 2 -2''') == '80'\nassert solution('''4 10 50\n8 8 4 -2''') == '95'\nassert solution('''4 10 50\n8 8 2 3''') == '95'\nassert solution('''4 10 50\n8 8 2 3 4''') == '95'\nassert solution('''4 10 50\n8 8 4 4 2''') == '95'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 10 50') == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 10 50\n8 8 2 -2''') == '80'\nassert solution('''10 10 10 10\n10 10 10 10''') == '10'\nassert solution('''6 5 5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5\n-5 -5 -5''') == '10'\nassert solution('''9 8 7\n6 5 -1\n3 4 -4\n-4 5 6\n7 8 -2\n9 8 -5\n4 2 8\n-5 -8 -9\n-6 8 7\n-5 -6 -7\n-4 -9 -8\n-7 -9 -1\n-6 -7 -4''') == '50'\nassert solution('''8 8 2\n8 8 2''') == '80'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\nassert solution('''\n3 1 10\n-1\n''') == '51'\n''')"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 10 50\n8 8 2 -2''') == '80'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1') == '80'\nassert solution('4 3 1') == '80'\nassert solution('4 4 1') == '100'\nassert solution('4 5 1') == '100'\nassert solution('4 4 4') == '200'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 10 50\\n8 8 2 -2\\n') == '80'\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 10 50\\n8 8 2 -2') == '80'\nassert solution('3 0 5\\n-1 -1 -1 -1 -1\\n1 1 1 1 1') == '3'\nassert solution('6 5 10\\n2 -2 -1 -1 -1\\n-2 -2 -1 -1 -1\\n-2 -2 -1 -1 -1\\n1 1 1 1 1 1') == '3'\nassert solution('3 10 50\\n-1 -1 -1 -1\\n-2 -2 -2\\n1 1 1 1 1\\n1 1 1 1 1\\n2 2 2 2 2') == '10'\nassert solution('5 2 5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '10'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '80'\nassert solution('''\n10 5 10 1\n2\n''') == '80'\nassert solution('''\n3 10 20 10\n1\n''') == '30'\nassert solution('''\n5 10 10 10\n1\n''') == '50'\n''')\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 8') == '3.000000000'\n\"\"\"\n\nx = int(input())\ny = int(input())\nv = int(input())\nd = int(input())\n\nx = int(input())\ny = int(input())"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1\n0 0 10 10\n5 9\n3\n5 8\n2 2\n9 6\n''') == '4.450000000000001'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '4.800000000'\nassert solution('5 9') == '4.800000000'\nassert solution('3') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 8\") == \"3.000000000\"\nassert solution(\"0 0 10 10\") == \"3.000000000\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 9\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '4.0'\nassert solution('5 1') == '4.0'\nassert solution('5 9') == '4.0'\nassert solution('3') == '0.0'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 8') == '1.000000000'\nassert solution('0 0 10 10') == '1.000000000'\nassert solution('5 1') == '1.000000000'\nassert solution('5 9') == '1.000000000'\nassert solution('3') == '1.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.000000000\"\nassert solution(\"\"\"\n1 3\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.000000000\"\nassert solution(\"\"\"\n1 2\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"2.236067977\"\nassert solution(\"\"\"\n1 5\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.5\"\nassert solution(\"\"\"\n1 4\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"5.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1.000000000'\nassert solution(\"\"\"\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == '1.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '6.0000000000'\nassert solution('5 9') == '8.000000000'\nassert solution('3') == '7.9999999999'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"4 3\") == \"2\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('10 10') == '4'\nassert solution('10 10 1') == '8'\nassert solution('100 10 1') == '108'\nassert solution('100 10 1 1') == '1008'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"1 5\") == \"2\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"1 5\") == \"3\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n0 1\n1 2\n2 3''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0 1 0 0\\n1 2\\n2 3\\n2 4\\n') == '1'\nassert solution('8 3\\n0 1 0 0\\n0 1 1 0\\n1 2\\n2 3\\n2 4\\n2 5\\n1 6\\n6 7\\n7 8\\n') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n2 4\\n\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1'\n\nassert solution('''\n3 3\n0 0 0\n0 1\n1 2\n''') == '0'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n0 1 0\n1 2\n2 3\n2 4\nSample Input 2:\n5 3\n0 1 0 0\n1 2\n2 3\n2 4\n2 5\nSample Output 2:\n4\n''') == '4'\nassert solution('''\n5 4\n0 1 0 0\n1 2\n2 3\n2 4\n2 5\nSample Output 3:\n4\n''') == '3'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '12.857142857142856'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"6.283185\"\nassert solution(\"3 6\") == \"5.393219\"\nassert solution(\"20 100000\") == \"8452720.393219\"\nassert solution(\"4 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('1 1') == '0.0'\nassert solution('2 2') == '1.5707963267948966'\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('2 2') == '1.5707963267948966'\nprint('all tests passed')\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n\"\"\"\n) == \"6.283185\"\nassert solution(\n    \"\"\"\n1\n0\n0\n\"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"\n1\n0\n0\n\"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"\n1\n0\n0\n\"\"\"\n) == \"0\"\nassert solution(\n    \"\"\"\n1\n0\n0\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '0.7853981633974483'\nassert solution('2 2') == '0.0'\nassert solution('1') == '0.0'\nassert solution('0') == '0.0'\nassert solution('0') == '0.0'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '6.283185'\nassert solution('''20\n0 0\n1 1\n0 2\n0 3\n1 3\n2 4\n1 5\n1 6\n2 7\n2 8\n3 9\n4 10\n3 11\n4 12\n5 13\n4 14\n3 15\n2 16\n1 17\n0 18\n0 19\n0 20\n1 21\n0 22\n1 23\n0 24\n0 25\n1 26\n0 27\n0 28\n0 29\n2 30\n1 31\n2 32\n3 33\n4 34\n5 35\n4 36\n3 37\n2 38\n1 39\n2 40\n''') == '94.714286'\nassert solution('''1\n0\n''') == '0.0'\nassert solution('''5\n0 0\n1 0\n0 1\n0 2\n1 2\n''') == '0.0'\nassert solution('''3\n0 0\n1 0\n2 0\n''') == '3.141592653589793238462643383279502884197169399375105820974944592'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6.283185'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 1\\n0 0\\n0 1\\n0 2') == '6.283185'\nassert solution('2 4\\n1 1\\n0 0\\n1 2\\n0 1\\n1 2') == '1.570796'\nassert solution('10 10\\n0 1\\n0 3\\n1 2\\n0 2\\n1 0\\n2 0\\n0 1\\n1 1\\n1 2\\n2 1\\n2 2\\n2 3\\n1 3\\n2 4\\n0 4\\n1 5\\n1 6\\n1 7\\n2 5\\n2 6\\n2 7\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n0 7') == '6.283185'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 2 3\""
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1 2'\n\nSample Input:\n3\nSample Output:\n1 1 1\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"1 1\"\nassert solution(\"22\") == \"1 2\"\nassert solution(\"33\") == \"1 3 1\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n''') == '1 2 3'\nassert solution('''5\n1 2 3 4 5\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '1 2 3 4 5'\nassert solution('15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1 2 3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"5\") == \"1 2 3 4 5\"\nassert solution(\"15\") == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 3\n1 3\n2 4\n3 4\n\"\"\") == \"1 2 3 4\"\nassert solution(\"\"\"\n10 10\n\"\"\") == \"1 2 3 4 5 6 7 8 9 10\nassert solution(\"\"\"\n0\n\"\"\") == \"\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\nassert solution('''\n10 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 3 4 5 6 7 8 9 10\n1 3 4 5 6 7 8 9 10\n1 4 5 6 7 8 9 10\n1 5 6 7 8 9 10\n1 6 7 8 9 10\n1 7 8 9 10\n1 8 9 10\n1 9 10\n1 10\n''') == '3 1 4 2 6 7 8 9 10'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 4\n1 2\n1 3\n2 4\n3 4''') == '1'\nassert solution('''8 8\n2 2\n1 3\n2 4\n3 6\n4 8\n5 5\n6 6\n7 7''') == '1 4 5 6 7'''"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1'\nassert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1 2 3 4'\nassert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n1 3\n2 4\n3 4\n''') == '1'\n\nassert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('4 4') == '1 2 3 4'\nassert solution('6 7') == '1 3 6 7'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\nassert solution('2 4') == '2 4'\nassert solution('3 4') == '1 2'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 4\n1 2\n1 3\n2 4\n3 4\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"\n4 5\n1 2\n1 3\n2 4\n3 4\n4 5\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"\n10 5\n10 3\n9 8\n8 7\n7 6\n6 5\n5 4\n4 3\n3 2\n2 1\n\"\"\") == \"2 1 3 2 4\"\n\nassert solution(\"\"\"\n10 10\n2 6\n2 7\n6 8\n3 9\n4 10\n3 9\n5 8\n6 7\n8 4\n7 9\n\"\"\") == \"3 9\"\n\nassert solution(\"\"\"\n10 10\n5 2\n1 3\n8 9\n7 6\n3 4\n4 5\n3 6\n4 7\n6 8\n8 7\n7 6\n\"\"\") == \"2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n1 2\\n1 3\") == \"1\"\nassert solution(\"3 1\\n1 2\\n1 3\\n4 2\\n4 3\") == \"2\"\nassert solution(\"3 1\\n2 3\\n4 5\\n6 6\\n7 5\") == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2\n2 3\n2 4\n1 3\n''') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 2') == '1'\nassert solution('4 2\\n1 2 3 4') == '2'\nassert solution('3 3\\n1 2 3\\n2 3 1') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\nassert solution('2 100\\n2 1\\n1 2\\n1 3\\n2 4\\n4 2\\n2 2\\n3 4\\n3 5\\n4 5\\n') == '2'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 2\\n\") == \"1\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2\\n2 3\\n3 4\\n4 5') == '1'\nassert solution('5 5\\n1 2\\n2 4\\n4 3\\n3 5\\n5 4') == '4'\nassert solution('7 5\\n1 2\\n2 4\\n4 3\\n3 6\\n6 5\\n5 4') == '4'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '45'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n1''') == '1'\nassert solution('''2\n1\n2\n2''') == '45'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '45'\nprint(solution())\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '45'\n\nassert solution('1') == '45'\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''15\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n''') == '45'\n\nassert solution('''11\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n''') == '135'\n\nassert solution('''1\n\n''') == '1'\n\nassert solution('''0\n\n''') == '0'\n\nassert solution('''30\n\n''') == '0'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\n\nassert solution('2') == '45'\n\nassert solution('20') == '5000000'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"45\"\nassert sorted(solution()) == sorted([\"12\", \"345\"])\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\", \"Wrong answer\"\nassert solution(\"10\") == \"20\", \"Wrong answer\"\nassert solution(\"100\") == \"1000000\", \"Wrong answer\"\nassert solution(\"100000000\") == \"1000000000000\", \"Wrong answer\"\nassert solution(\"10000000000\") == \"100000000000000\", \"Wrong answer\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('100') == '1000'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('100') == '100'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 20 20\\n\"\n    \"7 11 9 12 2\"\n    ) == \"4\""
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20 20') == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''\n10 20 20\n1 1 1 1 1 1 1 1 1\n''') == '1'\nassert solution('''\n10 20 20\n1 1 1 1 1 1 1 1 1\n''') == '0'\n'''\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == \"4\"\nassert solution('''\n3 20 20\n8 8 8\n''') == \"1\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\nprint('Congratulations! Your submission has been accepted.')\n\n'''\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''\n3 2\n1 3\n1 2\n1 4\n''') == '3'\nassert solution('''\n5 2\n7 5\n3 3\n1 6\n1 4\n''') == '4'\nassert solution('''\n5 20\n1 20\n2 20\n3 20\n4 20\n5 20\n6 20\n7 20\n8 20\n9 20\n10 20\n11 20\n12 20\n13 20\n14 20\n15 20\n16 20\n17 20\n18 20\n19 20\n20 20\n21 20\n22 20\n23 20\n24 20\n25 20\n26 20\n27 20\n28 20\n29 20\n30 20\n31 20\n32 20\n33 20\n34 20\n35 20\n36 20\n37 20\n38 20\n39 20\n40 20\n41 20\n42 20\n43 20\n44 20\n45 20\n46 20\n47 20\n48 20\n49 20\n50 20\n51 20\n52 20\n53 20\n54 20\n55 20\n56 20\n57 20\n58 20\n59 20\n60 20\n61 20\n62 20\n63 20\n64 20\n65 20\n66 20\n67 20\n68 20\n69 20\n70 20\n71 20\n72 20\n73 20\n74 20\n75 20\n76 20\n77 20\n78 20\n79 20\n80 20\n81 20\n82 20\n83 20\n84 20\n85 20\n86 20\n87 20\n88 20\n89 20\n90 20\n91 20\n92 20\n93 20\n94 20\n95 20\n96 20\n97 20\n98 20\n99 20\n''') == '46'"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 20 20\") == \"4\"\nassert solution(\"7 11 9 12 2\") == \"5\"\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('5 2') == '5'\nassert solution('10 20') == '10'\nassert solution('1 10') == '11'\nassert solution('5 10') == '10'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('4 5 4') == '3'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 20 20\n7 11 9 12 2\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"2\"\n\nassert solution(\"1 1\") == \"1\"\n\nassert solution(\"2 2\") == \"1\""
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n2 4\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings') == '2'\n\n----------------------------------------"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\n\") == \"2\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n'''"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\nkenny 1\ncharlie 1\njenny 1\nlaura 1\nharrypotter1\nharrypotter1\nlordoftherings1\nlordoftherings1\nharrypotter1\nharrypotter1\nkenny 1\n''') == '2'\n\nassert solution('''\n2\nharrypotter1\ncharlie 1\nkenny 1\nharrypotter1\nharrypotter1\nkenny 1\nlaura 1\nharrypotter1\nharrypotter1\nharrypotter1\nlaura 1\ncharlie 1\n''') == '3'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('6 1 1') == '1'\n\nSTDIN_SINGLE_NUMBER_1 = '2 2'\nassert solution(STDIN_SINGLE_NUMBER_1) == '2'\n\nSTDIN_SINGLE_NUMBER_2 = '6 1 1'\nassert solution(STDIN_SINGLE_NUMBER_2) == '1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n01\n\"\"\") == \"2 1\", \"First\"\n\nassert solution(\"\"\"\n1\n00\n\"\"\") == \"1 0\", \"Second\"\n\nassert solution(\"\"\"\n1\n11\n\"\"\") == \"1 1\", \"Third\"\n\nassert solution(\"\"\"\n3\n100\n101\n110\n\"\"\") == \"2 2\", \"Fourth\"\n\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"1 2\", \"Fifth\""
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"10\") == \"1 1\"\nassert solution(\"1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 1 0 1 0 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 0 1 0 1 0 0 0 1 1 0 0 1 1 0 1 1 0 1 0 1 1 1 0 0 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 1 1 0 0 0 1 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 0 0 0 1 0 0 1 0 1 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 1 1 0 0 1 1 0 1 0 1 0 1 1 0 1 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 1 1 0 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 0 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 0 1 0 0 0 0 1 1 0 0 0 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 1 1 0 0 0 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 0 1 1 0 0 0 1 1 0 1 1 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 0 0 1 0 0 0 0 1 0 1 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 0 1 0 1 0 0 0 1 1 0 1 0 0 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 1 1 0 1 0 0 1 1 1 1 0 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 0 0 0 0 1 0 0 0 1 1 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 1 1 1 0 0 0 0 0 1 0 1 0 0 1 0 1 0 0 0 0 1 1 0 1 1 1 1 0 0 0 0 1 1 0 0 1 1 1 0 0 1 0 1 1 1 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 1 0 0 0 1 0 0 1 1 0 0 0 0"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n1\n\"\"\") == \"1 1\"\n\nassert solution(\"\"\"1\n1\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"1\n1\n\"\"\") == \"1 3\"\n\nassert solution(\"\"\"1\n1\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"1\n0\n\"\"\") == \"1 1\""
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n01\n''') == '2 1'\n\nassert solution('''\n2\n01\n''') == '2 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"01\") == \"1 1\"\nassert solution(\"01010101\") == \"1 2 1\"\nassert solution(\"010100010001\") == \"1 3 1 2 1\"\nassert solution(\"0101010101\") == \"1 3 1 2 1\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1') == '2 1'\nassert solution('1\\n0') == '1 2'\nassert solution('0\\n1') == '2 1'\nassert solution('0\\n0') == '1 1'\nassert solution('1\\n1 0') == '1 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0\\n1 0') == '1 1'\nassert solution('1\\n0 1\\n0 0') == '2 1'\nassert solution('1\\n1 0\\n0 0') == '1 2'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('00110110') == '2 1'\nassert solution('11001011') == '3 3'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n00\n0\n0\n1\n0\n0\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n0\n1\n1\n0\n0\n1\n0\n0\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n1\n0\n0\n0\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"4 3\"\nassert solution(\"4 1\") == \"4 3\"\nassert solution(\"4 1\") == \"4 3\"\nassert solution(\"4 1\") == \"4 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Input 2:\n4 1\n3 2\n123\n112\n21\n1\n1 1\n1 1\nSample Output 2:\n4 3\n2233\n2233\n1111\n----\n3 2\n123\n123\n----\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4 3'\nassert solution('10') == '1111'"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n4 1\n2 123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2 3'\nassert solution('4 1') == '2 1'\nassert solution('3') == '3 3'\nassert solution('3') == '4 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n3 1\n2 2\n23\n12\n''') == '2 3'\nassert solution('''\n2 1\n1 2\n''') == '1 2'\nassert solution('''\n2 2\n3 3\n''') == '2 2'\nassert solution('''\n1 1\n1 1\n''') == '1 1'\nassert solution('''\n3 3\n2 2\n4 3\n''') == '3 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n''') == '4 3'\n\nassert solution('''\n2\n4 1\n2 1\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n''') == '2 1'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\\\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n4 4\n1 1\n2 2\n1 2\n''') == '2 4 3 1'\nassert solution('''\n1\n3 3\n1 1\n1 1\n''') == '3 3 1'\nassert solution('''\n3\n5 5\n1 1\n1 2\n2 1\n''') == '5 5 2 1'\nassert solution('''\n7\n10 7\n1 1\n1 1\n2 1\n1 2\n3 1\n2 2\n''') == '10 7 2 1 2 1'\nassert solution('''\n5\n6 6\n1 1\n1 1\n1 1\n1 1\n1 1\n''') == '6 6 1 1'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n4 1\\n2123\\n2 2') == '4 3\\n2123\\n1012'\nassert solution('2\\n4 1\\n2 123\\n2 2') == '4 3\\n2123\\n1012'\nassert solution('3\\n4 1\\n2 123\\n2 2') == '2123\\n1012'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n20\nlibc\nposix\nruby\nxen\npython\njava\nmcel\npug\ntornado\nc\nc-c++\ncpp\nc++\ncpp-tensorflow\ncpp-torch\nc-golang\nc#\nclojure\ndotnet\nflask\ngo\njava-java\njavascript\nlisp\nmatlab\nmatlab-engine\nnumpy\nperl\nphp\nruby\nrust\nscala\nscala-lang\nspark\ntensorflow\nx86_64\n''') == 'c-c++\\njava-java\\nmatlab-engine\\nmatlab\\nphp\\nruby\\nscala-lang\\nspark\\nx86_64\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\ngtk2\\nvim-X11\\n'''"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"emacs atk pango glib2\"\nassert solution(\"4\") == \"xorg-x11 lisp vim-common\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg atk\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\nfreetype\\n3\\nemacs xorg-x11 lisp\\nxorg-x11\\nlisp emacs\\n0') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\nxorg-x11-libs\\npango\\ngtk2\\nvim-common\\nxorg-x11\\n'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n12\nliba\nlibb\nlibc\nlibd\nlibe\nlibf\nlibg\nlibh\nlibi\nlibj\nlibk\nlibl\nlibm\nlibn\nlibo\nlibp\nlibq\nlibr\nlibs\nlibt\nlibu\nlibv\nlibw\nlibx\nliby\nlibz\n2\nlibx\nliby\nlibz\n''') == 'liba libb libc libd libe libf libg libh libi libj libk libl libm libn libo libp libq libr libs libt libu libv libw libx liby libz'\n\nassert solution('''\n5\nliba\nlibb\nlibc\nlibd\nlibe\n2\nlibb\n3\nlibc\n4\nlibe\n5\nliba\n6\nlibc\nlibd\nlibe\n''') == 'libc libb liba libd libe libc'\n\nassert solution('''\n5\nabc\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\ngtk-doc-html\ngtk-doc\nzlib\nlisp\n0\n''') == 'gtk-doc-html'\n\nassert solution('''\n3\nfreetype\nemacs\ngtk-doc-html\n0\n''') == 'gtk-doc-html'\n\nassert solution('''\n6\natk\nlisp\ngtk-doc-html\npcre\nzlib\nxorg-x11-libs\n''') == 'atk'\n\nassert solution('''\n5\nemacs\natk\ngtk-doc-html\nxorg-x11-libs\npcre\n''') == 'emacs'\n\nassert solution('''\n6\nzlib\nfreetype\npango\ngtk-doc-html\nlisp\nxorg-x11-libs\npcre\n''') == 'lisp'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\n''') == 'atk\\ngtk2\\nfreetype\\nlibattr\\nlibjpeg\\npcre\\ngrep\\nxorg-x11-libs\\npango\\nzlib\\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nfreetype\\nglib2\\nlibjpeg\\npcre\\nfreetype\\npango\\ngtk2\\nglib2\\nxorg-x11-libs\\nxorg-x11\\nlisp\\nvim-common\\ngtk2\\nvim-X11\\n'''"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'pango atk'\nassert solution() == 'gtk2 libtiff xorg-x11 lisp freetype atk'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('14\\nlibattr\\nvim-X11 vim-common gtk2 libattr\\nvim-common\\ngtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg atk\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\ngrepp\\nfreetype\\n3\\n') == 'atk\\nfreetype\\nglibtiff\\ngtk2\\nlibattr\\nlibjpeg\\npango\\npcre\\nxorg-x11-libs\\n'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"32 20\") == \"16\"\nassert solution(\"256 32\") == \"8\"\nassert solution(\"-0.5 -0.5\") == \"0\"\nassert solution(\"15.3 -0.5\") == \"16\"\nassert solution(\"31.13\") == \"10\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('32 20') == '16'\nassert solution('22 9') == '9'\nassert solution('5 7') == '2'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20 21') == '16', \"First\"\nassert solution('32 20') == '16', \"Second\"\nassert solution('32 21') == '17', \"Third\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"32 20\") == \"16\"\nassert solution(\"17 44\") == \"32\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('32 20') == '16'\nassert solution('36 123') == '36'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"32 20\") == \"16\""
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('32 20') == '16'\nassert solution('10 10') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '2'\nassert solution('10 20') == '16'\nassert solution('1 1') == '0'\nassert solution('1 0') == '0'\nassert solution('1 10') == '10'"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n32 20\n''') == '16'\nassert solution('''\n1\n''') == '1'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('32 20') == '16'\nassert solution('10 20') == '10'\nassert solution('3.2 2') == '5'\nassert solution('4.1 1') == '6'\nassert solution('3.16 1.2') == '5'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 4\n....\n.#.#\n....\n\"\"\") == \"5 13\"\n\nassert solution(\"\"\"6 6\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n.#\\n.##') == '1'\nassert solution('2 3\\n.##\\n.#') == '0'\nassert solution('2 3\\n.##\\n.#') == '1'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 4\n...\n...\n\"\"\") == \"5 13\"\nassert solution(\"\"\"\n3 4\n...\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == \"5 13\"\nassert solution('2 3') == \"1 1\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n....\n.#.#\n....\n''') == '13'\n\n'''"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4\n....\n.#.#\n....\n''') == '5 13'\nassert solution('''3 5\n....\n...#\n...##\n.##.#\n''') == '4 14'\nassert solution('''3 2\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3 4\\n...#\\n...#\\n'\n    ) == '5 13'\n\nassert solution(\n    '3 4\\n...#\\n.##\\n'\n    ) == '5 13'\n\nassert solution(\n    '3 3\\n...#\\n...#\\n'\n    ) == '0 0'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4\n...##\n...###\n...##''') == '13'\n\nassert solution('''\n8 10\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n''') == '29'\n\nassert solution('''\n6 7\n.#..\n..#\n.....\n...#\n.##.#\n##...\n''') == '11'\n\nassert solution('''\n8 10\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n''') == '12'\n\nassert solution('''\n4 4\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == '5 13'\nassert solution('6 7') == '13 6'\nassert solution('5 5') == '8 5'\nassert solution('6 6') == '7 6'\nassert solution('5 5') == '8 5'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '5'\nassert solution('5') == '0'\nassert solution('3 1') == '3'\nassert solution('10 10') == '0'\nassert solution('1') == '?'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n\"\"\") == \"5\"\nprint(solution(input()))\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\nassert solution('6 6\\n1 2 3 1 2 3\\n1 2 3 1 3\\n1 3 2 3 1 2\\n2 2 3 1 2 3\\n2 3 2 3 1 3\\n3 1 2 3 1 2\\n3 2 3 1 2 3\\n3 3 1 2 3 1 2\\n') == '15'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0') == '5'\nassert solution('4 4\\n1 2 6 1\\n2 3 2 1\\n3 2 5 1\\n1 4 1 1\\n4 3? 0') == '6'\nassert solution('10 10\\n1 2 5 1\\n2 3 3 1\\n3 4 4 1\\n4 5 5 1\\n5 6 6 1\\n6 7 7 1\\n7 8 8 1\\n8 9 9 1\\n9 10 10 1\\n1 11 11 1\\n11 12 12 1\\n12 13 13 1\\n13 14 14 1\\n14 15 15 1\\n15 16 16 1\\n16 17 17 1\\n17 18 18 1\\n18 19 19 1\\n19 20 20 1\\n20 21 21 1\\n21 22 22 1\\n22 23 23 1\\n23 24 24 1\\n24 25 25 1\\n25 26 26 1\\n26 27 27 1\\n27 28 28 1\\n28 29 29 1\\n29 30 30 1\\n30 31 31 1\\n31 32 32 1\\n32 33 33 1\\n33 34 34 1\\n34 35 35 1\\n35 36 36 1\\n36 37 37 1\\n37 38 38 1\\n38 39 39 1\\n39 40 40 1\\n40 41 41 1\\n41 42 42 1\\n42 43 43 1\\n43 44 44 1\\n44 45 45 1\\n45 46 46 1\\n46 47 47 1\\n47 48 48 1\\n48 49 49 1\\n49 50 50 1\\n50 51 51 1\\n51 52 52 1\\n52 53 53 1\\n53 54 54 1\\n54 55 55 1\\n55 56 56 1\\n56 57 57 1\\n57 58 58 1\\n58 59 59 1\\n59 60 60 1\\n60 61 61 1\\n61 62 62 1\\n62 63 63 1\\n63 64 64 1\\n64 65 65 1\\n65 66 66 1\\n66 67 67 1\\n67 68 68 1\\n68 69 69 1\\n69 70 70 1\\n70 71 71 1\\n71 72 72 1\\n72 73 73 1\\n73 74 74 1\\n74 75 75 1\\n75 76 76 1\\n76 77 77 1\\n77 78 78 1\\n78 79 79 1\\n79 80 80 1\\n80 81 81 1\\n81 82 82 1\\n82 83 83 1\\n83 84 84 1\\n84 85 85 1\\n85 86 86 1\\n86 87 87 1\\n87 88 88 1\\n88 89 89 1\\n89 90 90 1\\n90 91 91 1\\n91 92 92 1\\n92 93 93 1\\n93 94 94 1\\n94 95 95 1\\n95 96 96 1\\n96 97 97 1\\n97 98 98 1\\n98 99 99 1\\n99 100 100 1') == '6'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 5 1\\n2 3 3 1\\n3 1? 0\\n') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n'''\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n\nassert solution('''\n4 4\n1 2 7 1\n2 3 3 1\n3 4 4 1\n4 5 5 1\n1 5 7 1\n5 2? 0\n''') == '3'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '3'\n\nassert solution('''\n1 2\n1 2\n''') == '2'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3 3\\n'\n    '1 2 5 1\\n'\n    '2 3 3 1\\n'\n    '3 1? 0\\n'\n) == '5'\nassert solution(\n    '3 3\\n'\n    '1 2 5 1\\n'\n    '2 3 3 1\\n'\n    '3 1? 0\\n'\n    '4 2? 0\\n'\n    '4 2? 0\\n'\n) == '4'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\nassert solution('''\n4 4\n1 2 3 2\n2 3?\n3 4?\n3 4\n''') == '5'\n\n'''\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 5 1\n2 3 3 1\n3 1? 0\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"./test_sample.in\") == \"0\"\nassert solution(\"./input.in\") == \"3\"\n\"\"\"\n\n\nimport sys\nfrom collections import deque, defaultdict\nfrom itertools import product\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3\\n-1 0\\n-1 1\\n0 1\"\n) == \"3\"\n\nassert solution(\n    \"2 5\\n-1 0\\n-1 1\\n0 1\\n-1 2\\n0 2\\n-1 3\\n0 3\"\n) == \"5\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '0'\n\n\"\"\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 3\n-1 0\n-1 1\n0 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 100\n1 -1\n\"\"\") == \"100\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"10 10\") == \"9\"\nassert solution(\"3 5\") == \"3\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n-1 0\\n-1 1') == '0'\nassert solution('2\\n3\\n-1 0\\n-1 1') == '1'\nassert solution('3\\n4\\n-1 0\\n-1 1') == '2'\nassert solution('4\\n5\\n-1 0\\n-1 1') == '3'\nassert solution('5\\n6\\n-1 0\\n-1 1') == '4'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 3\n-1 0\n-1 1\n0 1\n''') == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '0'\nassert solution('''\n3 4\n-1 0\n-1 1\n0 2\n''') == '2'\nassert solution('''\n3 4\n-1 0\n1 1\n2 2\n''') == '2'\nassert solution('''\n2 5\n-1 0\n-1 1\n1 3\n0 2\n2 4\n''') == '4'\nassert solution('''\n3 4\n-1 0\n-1 1\n0 2\n''') == '2'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 5') == '4'\nassert solution('2 3') == '2'\nassert solution('5 6') == '4'\nassert solution('5 7') == '4'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n9 6 2 4''') == '6'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n1''') == '6'\nassert solution('''4\n1\n3\n2''') == '7'\nassert solution('''5\n4\n2\n4\n1''') == '4'\nassert solution('''3\n2\n1''') == '3'\nassert solution('''7\n1\n2\n2\n1\n2\n2\n1''') == '6'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\nassert solution('2\\n1') == '1'\nassert solution('6\\n1') == '0'\nassert solution('4\\n4') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n7 8 5 4 3\n''') == '6'\nassert solution('''\n9\n7 8 5 4 3\n''') == '4'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '3'\nassert solution('8') == '7'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\n\"\"\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n\") == \"2\"\nassert solution(\"4\\n1 2 3 5\\n\") == \"4\""
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n4\\n1\\n3\\n5\\n2\\n') == '6'\nassert solution('1\\n1\\n2\\n3\\n4\\n5\\n') == '10'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n') == '2'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2.000000\"\nassert solution(input(\"\")) == \"0.000000\"\nassert solution(input(\"3,3,0.5,1,1\")) == \"1.800000\"\n\"\"\"\n\nfrom math import log\nimport sys\nimport time\n\nsys.setrecursionlimit(10 ** 6)\n\nstart_time = time.time()\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1.0\"\nassert solution(\"5 1\") == \"5.0\"\nassert solution(\"2 5 1\") == \"2.0\"\nassert solution(\"2 5 2\") == \"1.0\"\nassert solution(\"2 5 1.9\") == \"1.9\""
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '2.000000'\nassert solution('2 5 1 -2') == '1.000000'\nassert solution('2 5 1 -2 2') == '1.000000'\nassert solution('2 5 1 -2 2 -1') == '0.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\n\n---Input---\n2\n3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n\"\"\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"3 3 1 5 3\") == \"6.000000\"\nassert solution(\"5 2 3 5 3\") == \"2.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"4.000000\"\nassert solution(\"5 5 1\") == \"1.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('1') == '1.000000'\n\"\"\"\n\nfrom math import sin, cos, sqrt, pi\n\nx_s, y_s, s_s, r_i, r_f = map(int, input().split())\nx_a, y_a, s_a = map(int, input().split())\n\nR_s = r_i + r_f"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 3 5 1') == '2.200000'\nassert solution('10 0 0 0') == '10.000000'\nassert solution('1 1 1 0') == '1.000000'\nassert solution('0 0 0 0') == '0.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('1 1 1 1') == '1.000000'\nassert solution('0 0 1 1') == '0.000000'\nassert solution('0 0 0.0000001') == '0.000000'"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n4 8\n\"\"\") == \"\"\"96\"\"\"\nassert solution(\"\"\"\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n4 8\n\"\"\") == \"\"\"48\"\"\"\nassert solution(\"\"\"\n7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n33 35\n34 36\n35 37\n36 38\n37 39\n38 40\n39 41\n40 42\n41 43\n42 44\n43 45\n44 46\n45 47\n44 48\n43 49\n42 50\n41 51\n40 52\n39 53\n38 54\n37 55\n36 56\n35 57\n34 58\n33 59\n32 60\n31 61\n30 62\n29 63\n28 64\n27 65\n26 66\n25 67\n24 68\n23 69\n22 70\n21 71\n20 72\n19 73\n18 74\n17 75\n16 76\n15 77\n14 78\n13 79\n12 80\n11 81\n10 82\n9 83\n8 84\n7 85\n6 86\n5 87\n4 88\n4 89\n4 90\n3 91\n3 92\n3 93\n3 94\n3 95\n3 96\n3 97\n2 98\n2 99\n2 100\n\"\"\") == \"\"\"38\"\"\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4') == '96'\nassert solution('2\\n1 2\\n3') == '80'\nassert solution('5\\n1 2\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8') == '336'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n2 3\n4\n1 2\n1 3\n1 4''') == \"96\"\n\nassert solution('''3\n1 2\n2 3\n4\n1 2\n1 3\n1 4''') == \"128\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4') == '96'\nassert solution('7\\n3 1\\n2 4\\n5 2\\n1 6\\n4 5\\n6 7') == '72'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '96'\nassert solution('2') == '97'\nassert solution('3') == '100'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '96'\nassert solution('2') == '1'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == \"96\"\nassert solution('''\n5\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == \"96\"\nassert solution('''\n5\n1\n2\n3\n4\n1\n2\n3\n1\n''') == \"72\"\nassert solution('''\n4\n2\n1 3\n1 2\n3\n1\n2\n3\n''') == \"24\"\nassert solution('''\n2\n2\n1 3\n1 2\n''') == \"4\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '96'\nassert solution('2') == '28'\nassert solution('4') == '22'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 3') == '96\\n', \"3\"\nassert solution('4\\n1 2\\n2 3\\n3 4') == '97\\n', \"4\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n1 1\n1 1\nSample Output:\n3\n''') == '3'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1', \"All test cases passed!\""
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0\n0 1\n1 0\n1 1\n''') == '3', 'ERROR'\nassert solution('''\n0 0\n0 1\n1 1\n''') == '0', 'ERROR'\nassert solution('''\n1 0\n1 1\n''') == '1', 'ERROR'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('2\\n1 1\\n0 0\\n0 1\\n1 0\\n1 1') == '4'\nassert solution('3\\n0 0\\n0 1\\n1 0\\n1 1\\n2 0\\n2 1\\n2 1') == '4'"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('2\\n3 2\\n2 1\\n1 3') == '1'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 0\\n1 1') == '3'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n7 8\\n8 5\\n10 5') == '13\\n18\\n13'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 8\\n3 1\\n1 4\\n') == '10'\nassert solution('10\\n2 8\\n3 1\\n1 4\\n') == '10'\nassert solution('5\\n1 1 1 1 1\\n1 2 2 2\\n1 3 3 3\\n1 4 4 4\\n') == '8'\nassert solution('4\\n4 4 4 4\\n1 1 1 1\\n1 2 2 2\\n1 3 3 3\\n1 4 4 4\\n') == '5'\nassert solution('100\\n100 100 100 100\\n100 100 100 100\\n100 100 100 100\\n') == '0'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '10'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 8\n3 1\n1 4\n''') == '10'\n\nassert solution('''\n2\n2 2\n1 1\n''') == '5'\n\nassert solution('''\n1\n1 1\n''') == '0'\n\nassert solution('''\n10\n100\n1 2 3 4 5 6 7 8 9 10\n''') == '50'\n\nassert solution('''\n10\n2 2\n3 1\n1 4\n''') == '10'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2 8\n3 1\n1 4\n''') == '10'\n\nassert solution('''\n2\n1\n''') == '10'\n\nassert solution('''\n1\n1\n''') == '10'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4') == '4'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n8\\n3 1\\n1 4\\n') == '10'\nassert solution('1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n') == '1'\nassert solution('3\\n1 2\\n1 3\\n') == '10'\nassert solution('3\\n1 1\\n1 4\\n') == '6'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"10\"\nassert solution(\"2 8\") == \"10\"\nassert solution(\"3 1\") == \"10\"\nassert solution(\"1 4\") == \"10\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 8\n3 1\n1 4\n''') == '10'\n\nassert solution('''\n4\n4 4\n4 4\n4 4\n''') == '4'\n\nassert solution('''\n5\n2 8\n2 6\n5 2\n5 2\n3 1\n2 5\n''') == '5'\n\nassert solution('''\n6\n1 1\n1 1\n1 1\n2 1\n2 1\n''') == '5'\n\nassert solution('''\n3\n3 1\n1 1\n2 3\n''') == '5'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '9\\n9\\n8\\n7\\n6\\n'\nassert solution('1\\n5\\n6\\n4\\n3\\n2\\n') == '10\\n10\\n9\\n8\\n7\\n6\\n'\nassert solution('1\\n5\\n6\\n3\\n4\\n2\\n') == '9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == 'IMPOSSIBLE'\nassert solution('4 1') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == 'IMPOSSIBLE'\nassert solution('4 3') == '3'\n\n'''\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'IMPOSSIBLE'\nassert solution('1 2') == '2'"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"IMPOSSIBLE\"\nassert solution(\"#J##\") == \"IMPOSSIBLE\"\nassert solution(\"#.#\") == \"1\"\nassert solution(\"#.F\") == \"1\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 4\n..#\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('4 4\\n####\\n#JF#\\n#..#\\n#..#\\n###') == '3'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n####\\n####\\n####\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n####\\n#.J\\n####\\n#.#\") == \"1\"\nassert solution(\"4 4\\n#####\\n#.J\\n#####\\n#.J\") == \"2\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n####\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nassert solution('5 5 5\\n1 2\\n1 1\\n1 2') == '0.166666666667'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('1 2 3') == '0.3333333333'\nassert solution('1 2 3 4') == '0.3333333333'\nassert solution('1 2 3 4 5') == '0.3333333333'\nassert solution('1 2 3 4 5 6') == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 2\\n2\\n1 1') == '0.3333333333'\nassert solution('1 2 1\\n1 1\\n1 1') == '0.66666666667'\nassert solution('3 2 4\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '1.0'\nassert solution('1\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '0.0'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n1 2 2\n1\n1 1\n\"\"\") == \"0.2222222222\"\nassert solution(\"\"\"\n1 2 2\n1\n1 1\n\"\"\") == \"0.25\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2\") == \"0.3333333333\"\nprint(solution(input()))\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\n\nassert solution(\"\"\"\n1 2 2\n1\n1 1\n\"\"\") == \"1.0\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 2') == '0.33333333333333333333333333333333333333333333333333'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n111''') == '1023'\nassert solution('''1\n1''') == '1023'\nassert solution('''10\n11*''') == '1024'\nassert solution('''30\n11*1*''') == '1025'\nassert solution('''30\n1*1*1*1*1''') == '1026'"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '1023'\nassert solution('2') == '25'\n'''"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '1023'\nassert solution('10') == '1023'\nassert solution('10') == '1023'\nassert solution('10') == '1023'\nassert solution('10') == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10\\n1') == '1023'\nassert solution('10\\n11') == '1023'\nassert solution('10\\n11') == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n111''') == '1'\nassert solution('''1\n111''') == '0'\nassert solution('''101\n111''') == '0'\nassert solution('''101\n111''') == '0'\nassert solution('''101\n111''') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1023\"\nassert solution(\"1\") == \"1023\"\nassert solution(\"11\") == \"1023\"\nassert solution(\"1111\") == \"1023\"\nassert solution(\"0101110\") == \"1023\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1''') == \"1023\"\nassert solution('''\n2\n1\n''') == \"1023\"\nassert solution('''\n3\n1\n''') == \"1023\"\nassert solution('''\n5\n1010111\n''') == \"1023\"\nassert solution('''\n5\n110111\n''') == \"1023\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('01') == '2'\nassert solution('11') == '3'\nassert solution('111') == '4'\nassert solution('110111') == '5'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1,1,1,1,1''') == '12'\nassert solution('''4\n1,1,1,1''') == '2'\nassert solution('''5\n1,1,1,1,1,1''') == '123'\nassert solution('''10\n1,1,1,1,1,1,1,1,1,1''') == '1467'\nassert solution('''50\n1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\n11') == '2'\nassert solution('5\\n100') == '50'\nassert solution('6\\n0101') == '3'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"0 0\") == \"0\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '1'\nassert solution('5 5') == '1'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5 5\n\"\"\") == \"28\"\n\nassert solution(\"\"\"\n8 4\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n-5 -5\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n-1 -1\n\"\"\") == \"0\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '6'\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n''') == '6'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 1\\n2 2\") == \"6\"\nassert solution(\"1 1\\n2 2\\n2 1\") == \"6\"\nassert solution(\"1 1\\n2 1\\n2 2\") == \"6\"\nassert solution(\"2 1\\n2 1\\n1 1\") == \"6\"\nassert solution(\"1 1\\n2 2\\n2 1\") == \"6\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 0') == '0'\nassert solution('1 1') == '1'\nassert solution('2 2') == '6'\nassert solution('1 1') == '0'\n\"\"\"\n\nx, y = [int(x) for x in input().split()]"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '6'\nassert solution('3 3') == '1'"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 2') == '3'\nassert solution('4 4') == '7'\n\"\"\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 6') == '10'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n10 2000 2\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\"\n) == \"2930\"\nassert solution(\n\"\"\"\n10 2000 2\n100\n480\n500\n550\n1000\n1500\n\"\"\"\n) == \"Impossible\"\n\nassert solution(\n\"\"\"\n10 2000 2\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\"\n) == \"Impossible\"\n\nassert solution(\n\"\"\"\n10 2000 2\n100\n480\n500\n550\n1000\n1400\n1500\n\"\"\"\n) == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\n\"\"\""
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1200') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1000 2000 7\\n100\") == \"2930\"\nassert solution(\"1000 2000 7\\n480\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n500\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n550\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n1000\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000 2000 7\") == \"2930\"\nassert solution(\"100\") == \"Impossible\"\nassert solution(\"480\") == \"Impossible\"\nassert solution(\"500\") == \"Impossible\"\nassert solution(\"550\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\nSample Input 2:\n100 1000 200\n100\n200\nSample Output 2:\nImpossible\n''') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n' +\n'1400\\n1500') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n1500\\n1500') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1400\\n1500\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n1500\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1 1 1 1') == 'Impossible'\nassert solution('3 3 1 1') == 'Impossible'\nassert solution('1 2 3 4') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 0 0') == '0'\nassert solution('1 2 3 4') == '2'\nassert solution('0') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 2 3') == '1'\nassert solution('0 1 2') == '1'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n0\\n0\\n1') == '2'\n\n\"\"\"\n\nfrom math import floor\nimport sys\ninput = sys.stdin.read()\nn, a, c = map(int, input.split())\nn = n - 1\na = list(map(int, input.split()))\n\ncache = [0 for i in range(n + 1)]\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 3\n0\n0\n1\n''') == '2'\nassert solution('''1 2 3\n0\n0\n1\n''') == '1'\nassert solution('''5 2 3\n0\n0\n1\n2\n3\nSample Output:\n2\n''') == '0'\nassert solution('''5 2 3\n0\n0\n1\n2\n3\nSample Output:\n0\n''') == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\n\nprint(solution('''1 2 3\n0\n0\n1'''))\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n0') == '2'\nassert solution('1 2 3\\n0\\n1') == '1'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n0\\n0 1\") == \"2\"\nassert solution(\"1 2 3\\n0\\n0 1\\n0 1\") == \"1\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2 3\\n0\\n1\\n0\") == \"1\"\nassert solution(\"1 2 3\\n1\\n1\\n1\") == \"3\"\nassert solution(\"1 2 3\\n0\\n1\\n2\") == \"1\"\nassert solution(\"1 2 3\\n0\\n1\\n2\\n0\") == \"2\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 1 2 2 2 2 2 2 2\") == \"1\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4 -5\n-1 -2 -1\n5 4 -5''') == '10'\n'''"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == \"10\"\nassert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5') == \"50\"\nassert solution('1\\n-1\\n1') == \"0\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n2 2\n3\n''') == '4'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n\n'''\n----SOLUTION----\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\\n2 2\\n') == '10'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5''') == '10'\nassert solution('''3 3\n-1 2 3\n-5 2 -5\n-1 -2 -1''') == '6'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\"\"\") == \"10\"\nassert solution(\"\"\"1 5\n1 2 2\n2 1 1\n1 2 1\n1 1 1\n2 1\"\"\") == \"16\"\nassert solution(\"\"\"1 1\n-1\"\"\") == \"0\"\nassert solution(\"\"\"3 2\n-1 1\n1 1\n-1\"\"\") == \"9\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\nassert solution('''\n100 50\n-100 -100 -100\n-50 -50 -50\n50 50 50\n-50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n-50 50 -50\n50 50 -50\n50 50 50\n-50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50\n-50 50 50\n50 50 -50"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    5 3\n    1 2 1000\n    2 3 1000\n    4 5 500\n    2\n    1 4 300\n    3 5 300\n    ''') == '3100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n1 10\n1 2 3\n''') == '9'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '23100'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"3300\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n5 5\n3 2\n1 2 3 4\n4 2\n1 3 4\n5 3\n''') == '1000'\nassert solution('''\n1 5\n3 2\n1 3 4\n4 2\n1 2 3\n5 3\n''') == '1000'\nassert solution('''\n3 3\n1 1 5\n1 2 3\n1 4 5\n2 3 4\n2 4 5\n2 5 3\n3 4 5\n''') == '200'"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"3100\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n5 1\n5 1 2 3 4 5\n1 2\n1 2\n1 4\n1 2\n3 4 5\n''') == '5200'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100', 'Test #1 Failed'\nassert solution('''\n6 2\n3 4 100\n1 2 100\n2 5 100\n3 6 100\n4 5 100\n1\n2 4 300\n3 5 300\n''') == '4800', 'Test #2 Failed'\nassert solution('''\n6 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100', 'Test #3 Failed'"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300''') == '3100'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n5 5 500''') == '5800'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n5 5 500\n2\n1 4 300\n3 5 300\n4 5 500''') == '4800'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n5 5 500\n2\n1 4 300\n3 5 300\n4 5 500''') == '4800'\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n5 5 500\n2\n1 4 300\n3 5 300\n4 5 500''') == '4600'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2\n0 1\n0 2\n2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 2\n0 1\n0 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n0 1\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 3\n0 1\n0 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([2,1]) == '0'\nassert solution([2,1,0,1]) == '0'\nassert solution([1,1,1,1]) == '4'\nassert solution([2,1,0,1,0,1,1]) == '4'"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n0 1''') == '0'\nassert solution('''\n2 1\n0 0\n''') == '1'\nassert solution('''\n2 2\n0 0 1\n''') == '2'\nassert solution('''\n3 3\n0 0 1 2\n''') == '3'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '0'\nassert solution('3 5') == '3'\nassert solution('2 2') == '1'\nassert solution('6 6') == '6'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0\"\nassert solution([\n    \"2 1\",\n    \"0 1\",\n    \"1 1\",\n    \"1 0\",\n    \"1 0\",\n    \"1 1\"\n]) == \"3\"\nassert solution([\n    \"2 2\",\n    \"0 1\",\n    \"1 1\",\n    \"1 0\",\n    \"1 1\",\n    \"1 0\",\n    \"1 1\",\n    \"1 0\"\n]) == \"3\"\nassert solution([\n    \"2 2\",\n    \"0 1\",\n    \"0 2\",\n    \"1 0\",\n    \"1 1\",\n    \"1 0\",\n    \"1 1\",\n    \"1 0\"\n]) == \"3\"\nassert solution([\n    \"3 3\",\n    \"0 1\",\n    \"1 0\",\n    \"1 2\",\n    \"1 0\",\n    \"1 0\",\n    \"1 0\",\n    \"1 0\"\n]) == \"0\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1') == '0'\nassert solution('20 6\\n0 1\\n0 2\\n3 5\\n4 4\\n5 5\\n0 5\\n2 5\\n3 4\\n5 5\\n0 3\\n5 2\\n4 5\\n5 1\\n3 4\\n2 3\\n4 3\\n5 5\\n2 4\\n5 2\\n0 1\\n5 3\\n4 5\\n3 1\\n0 1\\n0 4\\n0 2\\n2 1\\n1 2\\n1 1\\n2 2\\n2 2\\n1 1\\n1 1\\n0 2\\n1 2\\n0 4\\n4 4\\n3 4\\n5 4\\n0 4\\n1 3\\n4 2\\n4 1\\n5 5\\n1 3\\n5 3\\n2 1\\n4 5\\n3 4\\n0 4\\n5 4\\n1 1\\n0 3\\n0 4\\n2 4\\n3 2\\n1 3\\n4 4\\n5 2\\n0 2\\n2 3\\n3 4\\n5 4\\n2 3\\n0 4\\n0 2\\n1 2\\n0 1\\n3 3\\n0 2\\n0 1\\n0 1\\n1 2\\n2 2\\n0 3\\n0 3\\n0 4\\n4 5\\n0 3\\n1 4\\n3 4\\n2 4\\n5 1\\n0 1\\n0 2\\n4 5\\n0 2\\n2 2\\n0 2\\n2 4\\n1 5\\n0 1\\n0 5\\n0 4\\n4 3\\n5 2\\n0 1\\n5 5\\n1 1\\n5 1\\n4 4\\n1 5\\n0 4\\n0 4\\n3 3\\n4 1\\n0 1\\n0 2\\n0 4\\n2 3\\n1 4\\n2 1\\n0 2\\n0 4\\n0 1\\n0 2\\n1 3\\n1 4\\n0 4\\n0 5\\n0 2\\n2 4\\n1 1\\n0 4\\n1 1\\n1 4\\n1 3\\n0 2\\n1 1\\n1 3\\n4 4\\n3 2\\n0 4\\n0 4\\n0 3\\n1 5\\n0 4\\n4 5\\n4 4\\n5 4\\n0 5\\n0 5\\n0 5\\n5 4\\n0 3\\n4 2\\n5 3\\n1 4\\n1 5\\n0 4\\n1 2\\n1 4\\n2 4\\n2 3\\n0 4\\n2 1\\n0 3\\n0 3\\n1 5\\n0 5\\n5 3\\n0 5\\n0 3\\n2 1\\n1 2\\n1 2\\n0 3\\n2 3\\n1 4\\n0 4\\n0 5\\n0 3\\n0 2\\n1 2\\n0 2\\n0 3\\n2 1\\n0 4\\n4 4\\n0 4\\n0 1\\n2 5\\n0 2\\n0 1\\n1 4\\n3 4\\n5 5\\n0 3\\n0 3\\n1 3\\n4 3\\n3 1\\n0 1\\n5 4\\n0 4\\n0 3\\n1 3\\n2 4\\n0 4\\n1 4\\n0 3\\n4 3\\n0 4\\n0 4\\n2 4\\n3 4\\n0 4\\n5 4\\n0 5\\n0 2\\n1 5\\n0 4\\n4 5\\n3 2\\n0 4\\n2 3\\n1 5\\n2 5\\n0 4\\n0 3\\n0 4\\n0 5\\n2 4\\n1 5\\n0 4\\n0 3\\n1 4\\n0 5\\n1 5\\n0 4\\n1 5\\n4 2"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\nassert solution('''\n2 2\n0 0\n1 1\n''') == '1'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 2') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2'\nassert solution('100 100') == '10'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n20 1\n''') == '10', 'First sample'\nassert solution('''\n1 10\n''') == '10', 'Second sample'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 10') == '10'\nassert solution('5 10') == '1'\n\"\"\"\n\nX, Y = map(int, stdin.split())"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10') == '10'\nassert solution('3 50') == '2'\nassert solution('8 15') == '6'\n\n\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 10\") == \"10\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 10\") == \"1\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 10') == \"10\"\nassert solution('0 3') == \"3\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1 10') == '10'\nassert solution(\n    '17 55') == '15'\nassert solution(\n    '21 42') == '1'\nassert solution(\n    '2 2') == '1'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '10'\nassert solution('5 10') == '2'\nassert solution('15 15') == '0'\nassert solution('3 3') == '3'\n\nclass TestSolution:\n    def test(self):\n        assert solution('''1 10''') == '10'\n        "
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10') == '10'\nassert solution('0 2') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n0 0\n1000 0\n0 1000\n1000 1000\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n0 0\n1000 0\n0 1000\n1000 1000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10\n100 -300\n-200 -100\n-100 -300\n-200 -100\n-300 -100\n-200 -100\n-100 -100\n-100 -300\n-200 -100\n-300 -100\n-300 -100\n\"\"\") == \"0\"\nassert solution(\"\"\"\n20\n200 -200\n0 0\n-300 -300\n0 0\n-200 0\n0 0\n0 0\n-300 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-300 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-300 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n-300 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n-200 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == 0\nassert solution('') == 0\nassert solution('0 0') == 0\nassert solution('1000 0') == 0\nassert solution('0 1000') == 0\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '0'\nassert solution('10') == '6'\nassert solution('100') == '1'\nassert solution('1000') == '3'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\nassert solution(\"8\\n0 0\\n10 0\\n0 10\\n10 10\\n0 0\\n10 0\\n0 10\\n10 10\\n\") == \"1\"\nassert solution(\"7\\n0 0\\n10 0\\n0 10\\n10 10\\n0 0\\n10 0\\n0 10\\n10 10\\n\") == \"2\"\nassert solution(\"10\\n0 0\\n10 0\\n0 10\\n10 10\\n0 0\\n10 0\\n0 10\\n10 10\\n\") == \"1\"\nassert solution(\"3\\n0 0\\n-100 0\\n0 -100\\n-100 0\\n0 100\\n100 100\\n\") == \"2\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n0 0\\n1000 0') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('100\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '100'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1000 0\n0 1000\n1000 1000\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10\n-1000 -500\n-1500 -200\n-2000 -100\n-2000 100\n-1500 200\n-1000 500\n-1000 1000\n-500 1000\n-500 500\n-500 100\n-500 50\n-500 10\n-500 0\n-500 -10\n-500 -100\n-500 -200\n-1000 -500\n-1000 -1000\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n8\n-2000 -500\n-2000 -1000\n-2000 -1000\n-2000 -1000\n-2000 -1000\n-2000 -1000\n-2000 -1000\n-2000 -1000\n-2000 -500\n-2000 -1000\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 1\n0 1 0.5\n0 1 0.5\n0 2 0.5\n0 2 0.5\n0 3 0.5\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\".strip()\nassert solution(\"\"\"\n10 3\n0 1 0.5 0.5\n0 1 0.5 0.5\n0 2 0.5 0.5\n0 3 0.5 0.5\n0 3 1 0.5\n0 3 2 0.5\n0 3 3 0.5\n0 4 3 0.5\n0 4 2 0.5\n0 4 1 0.5\n0 4 0.5 0.5\n0 5 0.5 0.5\n0 5 1 0.5\n0 5 2 0.5\n0 5 3 0.5\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\".strip()\nassert solution(\"\"\"\n2 2\n0 1 0.5 0.5\n0 2 0.5 0.5\n0 3 0.5 0.5\n\"\"\") == \"\"\"0.500000000 1.000000000\"\"\".strip()"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('1 2\\n0 1 0.5') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"0.500000000 1.000000000\"\nassert solution(\"3 1\") == \"0.500000000 1.000000000\"\nassert solution(\"3 2\") == \"0.33333333 0.33333333\"\nassert solution(\"4 3\") == \"0.2500000000 0.500000000\"\nassert solution(\"3 3\") == \"0.6666666666 0.6666666666\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n0 1 0.5') == '0.500000000 1.000000000'\nassert solution('5 5\\n0 0 0.5 1 0 0.5') == '0.500000000 1.000000000'\nassert solution('5 5\\n0 1 0.5 1 0 0.5') == '0.500000000 1.000000000'\nassert solution('5 5\\n0 1 0.5 1 0.5') == '0.500000000 1.000000000'\nassert solution('5 5\\n1 0 0.5 1 0 0.5') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000', 'First example'\nassert solution('''\n3 1\n0 1 0.5\n0 2 0.6\n0 3 0.5\n''') == '0.499999999 0.499999999 0.499999999', 'Second example'\nassert solution('''\n4 1\n0 1 0.5\n0 2 0.6\n0 3 0.5\n0 4 0.6\n''') == '0.500000000 1.000000000 1.000000000 0.499999999', 'Third example'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n0 0 1\n0 0 1\n0 0 1''') == '0.500000000 1.000000000'\nassert solution('''\n3 3\n0 1 0.5\n0 0 1\n0 0 1''') == '0.500000000 1.000000000'\n\nassert solution('''\n1 0\n0 1''') == '0.500000000 1.000000000'\nassert solution('''\n1 1\n0 0.5''') == '0.500000000 1.000000000'\n\nassert solution('''\n1 0\n1 0.5''') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000'\nassert solution('1 1\\n1 1 0.5\\n') == '0.500000000 1.000000000'\nassert solution('2 1\\n0 1 0.8\\n') == '0.800000000 1.000000000'\nassert solution('1 1\\n1 1 0.8\\n') == '0.800000000 1.000000000'\nassert solution('2 1\\n0 0.8\\n') == '-1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '0.500000000 1.000000000'\nassert solution('4 1') == '0.10000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 5\n0 1 0.5\n0 1 0.5\n0 2 0.2\n''') == '0.500000000 1.000000000'\nassert solution('''\n5 5\n0 2 0.4\n1 3 0.3\n2 4 0.2\n0 1 0.5\n''') == '0.400000000 1.000000000'\nassert solution('''\n5 5\n0 0.4 0.3\n1 2 0.2\n2 3 0.1\n0 1 0.5\n''') == '-1.000000000 -1.000000000'\nassert solution('''\n10 10\n0 0.4 0.3\n1 2 0.2\n2 3 0.1\n0 1 0.5\n0 2 0.3\n1 3 0.2\n2 4 0.1\n3 5 0.2\n''') == '0.400000000 1.000000000'\nassert solution('''\n10 10\n0 2 0.4\n1 3 0.3\n2 4 0.2\n0 1 0.5\n0 2 0.3\n1 3 0.2\n2 4 0.1\n3 5 0.2\n''') == '0.400000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1\n0 1 0.5\nSample Output:\n0.500000000 1.000000000\n''') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\n\"\"\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"7\"\nassert solution(\"5\") == \"7\"\nassert solution(\"5 3\") == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n1 1\\n4 1\\n1 5\\n10 10\\n10 8\\n7 10') == '7'\nassert solution('1\\n5\\n1 2\\n3 4\\n2 3\\n5 2\\n2 1\\n5 3') == '2'\nassert solution('20\\n2 4\\n2 1\\n3 1\\n3 3\\n2 2\\n1 1\\n4 2\\n4 1\\n1 5\\n1 2\\n1 3\\n1 4\\n3 3') == '4'\nassert solution('100000\\n1 1\\n1 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '7'\nassert solution('1 1') == '1'\nassert solution('4 1') == '4'\nassert solution('1 5') == '1'\nassert solution('10 10') == '9'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10''') == '7'\nassert solution('''2\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10''') == '8'\n'''\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '5'\nassert solution('7') == '4'\n\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n1\n1\n1\n5\n10 10\n10 8\n7 10\n\"\"\"\n) == \"7\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 1\\n4 1\") == \"7\"\nassert solution(\"6\\n1 1\\n4 1\\n7 1\\n10 10\\n10 8\\n7 10\\n\") == \"7\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba\\n0\\n') == '9-b'\n\n'''\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\n2\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == 'b'\n\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\nbba\naba\n''') == 'b'\n\nassert solution('''\na b\na-b\n5-b\n''') == 'a'\n\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == 'b'\n\nassert solution('''\na b\nb-a\n5-b\n''') == 'b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"9-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == 'bba'\n\nassert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '6-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\na b\\n3-b 5-b\\n6-a 2-b\\n0') == '9-b'\nassert solution('4\\naa\\naa\\nbb\\nbb') == '5-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n\"\"\") == \"8-a\"\nassert solution(\"\"\"\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n\"\"\") == \"9-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\na\n2-a\n3-a\n\"\"\") == \"1-a\"\n\nassert solution(\"\"\"\n2\na\nb\n\"\"\") == \"1-b\"\n\nassert solution(\"\"\"\n3\na\nb\nb\na\n2-b\n\"\"\") == \"1-a\"\n\nassert solution(\"\"\"\n5\nb\nb\na\na\n3-b\n\"\"\") == \"9-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\na b') == 'ba'\nassert solution('2\\na b') == 'ba'\nassert solution('1\\na b') == 'ba'\nassert solution('1\\na b') == 'ba'\nassert solution('2\\na b') == 'b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nb b\na b\na b\n2-a 2-b\n5-b 5-a\na a\na a\n''') == '8-a'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"32\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0\\n\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"0\\n0\\n\") == \"0\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3\\n1\\n2\\n4\") == \"3246R3246\"\nassert solution(\"1\\n2\\n1\\n2\\n4\") == \"123456\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('1') == '3'\nassert solution('2') == '3'\nassert solution('2') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"R2D2\"\nassert solution(\"10\") == \"RDD2D2D2D2D2\"\nassert solution
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n2\n2\n3\n2\n4\n3\n3\n2\n
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\nBANANA\n1\nBANANA\n''') == '1U1U1U1'\n\nassert solution('''\n2\nBANANA\n1\nBANANA\n''') == '1R3R3U1U1U1U1U1U1U1R3R3'\n\nassert solution('''\n3\nBANANA\n1\nBANANA\n
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246'\nassert solution('3') == '3246'\nassert solution('4') == '3246'\nassert solution('5') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nabcd\\neghi\\n') == '3246'\nassert solution('1\\nabcd\\neghi\\n') == '3246R3246'\nassert solution('3\\nabcd\\neghi\\n') == '3246U3246'\nassert solution('4\\nabcd\\neghi\\n') == '3246U3246D3246U3246D3246U3246D3246U3246D3246U3246D3246U3246D3246U3246D3246U3246D3246U3246D3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '3246'\nassert solution('1 1') == '3246'\nassert solution('1 1 1') == '3246'\nassert solution('1 1 1 1') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\necho\n1\nechoecho\n''') == '3246R3246'\n\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n') == 'YES\\n1 2\\n1 3\\n', 'Should return \"YES\" for each input.'\nassert solution('3 1\\n') == 'NO\\n', 'Should return \"NO\" for each input.'\nassert solution('3 1\\n') == 'NO\\n', 'Should return \"NO\" for each input.'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n3\n1 2''') == 'YES'\nassert solution('''3\n2\n1 1''') == 'NO'\nassert solution('''10\n5\n1 1 2 2 2 3 3 3 4 4 5''') == 'YES'\nassert solution('''3\n1\n2 2''') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('3 1') == 'NO'\nassert solution('10 5') == 'YES'\nassert solution('10 5') == 'NO'\nassert solution('10 5') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"YES\\n1 2\\n1 3\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == 'YES'\nassert solution('4 3') == 'YES'\nassert solution('5 1') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n1 2\n2 3\n3 4\n4 5\n5 6''') == 'YES'\n\nassert solution('''10 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n11 13\n10 14\n9 15\n8 16\n7 17\n6 18\n5 19\n4 20\n3 21\n2 22\n1 23''') == 'YES'\n\nassert solution('''3 3\n1 2\n2 3\n3 4\n4 5''') == 'NO'\n\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n6 6''') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'YES\\n1 2\\n1 3'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES\\n1 2\\n1 3\\n'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '176'\nassert solution('3') == '0'"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"2\"\nassert solution(\"11\") == \"6\"\nassert solution(\"13\") == \"8\"\nassert solution(\"1\") == \"4\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1\n1\n1\n1\n1\n1\n1''') == '46'\nassert solution('''2\n4\n6\n9\n5\n1\n5\n2\n5''') == '0'\nassert solution('''2\n5\n1\n2\n4\n1\n3''') == '86'\nassert solution('''11\n3\n8\n7\n6\n7\n7\n8\n9\n3\n3\n4\n7\n2\n5\n8\n9''') == '385'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n''') == '176'\n\nassert solution('''15\n1\n4 4\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n111111\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == '176'\nassert solution('1') == '0'\nassert solution('6 6') == '176'\nassert solution('333333') == '0'\nassert solution('300003') == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7') == '176'\nassert solution('8') == '176'\n\nstdin = \"\"\"9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9') == \"176\"\nassert solution('1') == \"0\"\nassert solution('6') == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"176\"\nassert solution(\"1\") == \"11\"\nassert solution(\"6\") == \"176\"\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9\\n1\\n6 6') == '176'\nassert solution('300003\\n300003\\n300003\\n300003\\n300003\\n333333') == '186'"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"6\") == \"012\"\nassert solution(\"7\") == \"111\"\nassert solution(\"8\") == \"8\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4!') == '24'\nassert solution('5!') == '120'\nassert solution('10!') == '3628800'"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '1'\nassert solution('12\\n') == '012'\nassert solution('321\\n') == '321'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '333'\nassert solution('123') == '333'\nassert solution('12') == '312'\nassert solution('12345') == '31335'\nassert solution('123456') == '313456'"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"43\") == \"4\"\nassert solution(\"123456789\") == \"123\"\nassert solution(\"1344\") == \"13\"\nassert solution(\"4\" * 1000000) == \"12345\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12') == '012'\nassert solution('101') == '101'\nassert solution('10000') == '100'"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1'\nassert solution('12\\n') == '12'\nassert solution('123\\n') == '123'\nassert solution('10\\n') == '10'\nassert solution('1000000\\n') == '12'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '12'\nassert solution('123') == '123'\nassert solution('12345') == '12345'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('12') == '012'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5 10 3 5 4 -2 -3 -4 -5') == '18'\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '?', \"Should return '?' if the problem can be solved\"\nassert solution('4 1') == '?', \"Should return '?' if the problem can be solved\"\nassert solution('2 1') == '?', \"Should return '?' if the problem can be solved\"\nassert solution('1 1') == '?', \"Should return '?' if the problem can be solved\"\nassert solution('1 2') == '?', \"Should return '?' if the problem can be solved\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1\n(((()\n480\n-20\n610\n-570\n-928\n\nSample Input:\n4 2\n(((()\n480\n-20\n-928\n-600\n910\nSample Output:\n0\n''') == '0')\nassert solution('''5 1\n(((()\n480\n-20\n610\n-570\n-928\n\nSample Input:\n4 2\n(((()\n480\n-20\n910\n-600\n-928\nSample Output:\n480\n''') == '480')\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n(((\n-1\n-1\n-1\n?''') == '-1')\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"??\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"?\\n\"\nassert solution(\"2\") == \"?\\n\"\nassert solution(\"3\") == \"?\\n\"\nassert solution(\"4\") == \"?\\n\"\nassert solution(\"5\") == \"?\\n\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n0') == '?'"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3\\n-3') == '?'\nassert solution('3\\n6\\n-200') == '-200'\nassert solution('4\\n2\\n3') == '3'\nassert solution('4\\n3\\n5') == '5'\nassert solution('4\\n7\\n-550') == '-550'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7\") == \"??\"\nassert solution(\"(2(3))((4(5))\") == \"18\"\nassert solution(\"((2(3))((4(5))\") == \"18\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n(()) (())\") == \"??\"\nassert solution(\"5 3\\n(((())) (()))\") == \"??\"\nassert solution(\"5 3\\n((((((((()))))))))\") == \"??\"\nassert solution(\"6 4\\n(((((()()())))))\") == \"??\"\nassert solution(\"7 3\\n(()(())())\") == \"??\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"\"\nassert solution(\"2\") == \"2 4\"\nassert solution(\"3\") == \"2 4 5 6 7 8 9 10 11 12 13\"\nassert solution(\"4\") == \"2 4 6 7 8 10 11 12 13\"\nassert solution(\"5\") == \"2 4 6 7 8 10 11 12 13\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"\"\"\n5 6\n7 8 9 10 11 12 13\n\"\"\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''13\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '5 6'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == ''\nassert solution('2') == '5 6'\nassert solution('3') == '7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"2 4\"\nassert solution(\"12\") == \"1\"\nassert solution(\"13\") == \"2 4\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2 4'\nassert solution() == '5 6'\nassert solution() == '7 8 9 10 11 12 13'"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1 2 3\\n1 4\\n2 4 3\\n2 4 1\\n1 5 6\\n2 4 5\\n2 4 1\\n1 6 7\\n2 4 6\\n2 4 7\\n2 5 6\\n2 4 5\\n2 4 1\\n1 7 8\\n2 4 7\\n2 4 8\\n2 5 6\\n2 4 5\\n2 4 1') == '1 4 6 7 8 10 11 13\\n2 4 6 7 8 10 11 13\\n'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n') == '2 4\\n5 6\\n7 8 9 10 11 12 13'"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\\n\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('10 10') == '0 0'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '35 39 36 27 29'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '35 39 36 27 29'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '35 39 36 27 29'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('1 2 3') == '35 39 36 27 29'\nassert solution('1 4 8') == '35 39 36 27 29'\nassert solution('2 3 12') == '35 39 36 27 29'\nassert solution('3 5 4') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\"\nassert solution(\"5 8\") == \"2 2 2 2 1 1 1 1 1 1\"\nassert solution(\"10\") == \"1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"20\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"200 20\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nprint(solution(input()))"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2') == '35 39 36 27 29'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n3 2 1\n''') == '0 672'\n\nassert solution('''\n1 1\n2 2\n''') == '1 28'\n\nassert solution('''\n1 1\n2 2\n''') == '0 84'\n\nassert solution('''\n1 2\n3 2 1\n''') == '0 672'\n\nassert solution('''\n3 1\n2 2\n''') == '0 28'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n3 2 1\\n') == '0 672'\nassert solution('5 4\\n2 2 4 4 4\\n') == '0 2460'\nassert solution('10 8\\n1 1 2 2 3 5 6 7 8 9\\n') == '9142458'\nassert solution('5 3\\n3 2 1\\n') == '0 672'\nassert solution('3 3\\n3 2 1\\n') == '0 672'\n'''\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"0 672\"\nassert solution(\"5 5\") == \"120 49\"\nassert solution(\"3 3\") == \"0 672\"\n\"\"\"\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 1\\n') == '672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '0 672'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '0 672'\nassert solution('10 20 4 2') == '1 1214'\nassert solution('30 20 5 4') == '2 1213'\nassert solution('10 1 1') == '0 1'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n3 2 1') == '0 672'\n\nassert solution('3 3\\n3 2 1') == '0 672'\n\nassert solution('3 5\\n10 9 3 2 1') == '0 672'\n\nassert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8') == '0 672'\n\nassert solution('8 8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9') == '0 672'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0 672'\nassert solution('1 2') == '1 0'\nassert solution('10 1') == '10 1'\n\"\"\"\nimport math"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n3 2 1\n\"\"\") == \"0 672\"\nassert solution(\"\"\"\n5 5\n3 2 2 3 2\n\"\"\") == \"12\"\nassert solution(\"\"\"\n3 3\n1 1 3\n\"\"\") == \"0 672\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Impossible\"\nassert solution(\"2\") == \"2.500000\"\nprint(solution(input()))\n\"\"\"\nimport math\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.50000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"Impossible\"\nassert solution(\"5 5 1\") == \"1.0\"\nassert solution(\"4 5 100\") == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n\") == \"2.500000\"\nassert solution(\"2 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n\") == \"Impossible\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50''') == '2.500000'\nassert solution('''5 4 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50''') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n') == '2.500000'\nprint('AC')"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n-----Input-----\n4 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n''') == '2.500000'\n\n'''\n    The Autonomous Car Manufacturer (ACM) needs to design algorithms to control their cars. One particular problem is lane switching\u2014if the car needs to switch lanes, it wants to do so in the safest manner.\n\n    Initially the car is in the leftmost lane, and the car needs to switch to the rightmost lane. The car has a variety of sensors and can obtain the locations of all cars in a section of the highway. When the car needs to switch lanes, it takes a snapshot of the sensor readings and design a plan to switch lanes based on the snapshot. The sensors have limited range. All sensor readings will be distances from the start of the sensor range. For safety reason, the areas outside of the sensor range are assumed to be occupied by cars.\n\n    You may assume that all other cars are travelling at exactly the speed limit. However, the ACM would like to set itself apart by producing cars that may drive at any speed regardless of the speed limit, as long as it does not hit any other car. For safety reasons, a lane switch is always done while driving at the speed limit.\n\n    When a lane switch occurs, the destination must have unoccupied space for the car to move into (a perfect fit is allowed). We define the safety factor of the plan as the closest distance to any car while executing the plan. We are only concerned about cars in the same lane, and will ignore distances between cars in different lanes. Obviously, the ACM wants its cars to choose a plan that has the highest safety factor.\n\n    The first sample input is illustrated below.\n    \n    -----Input-----\n    4 5 100\n    0 10 10\n    1 10 5\n    1 20 35\n    2 2 18\n    2 40 50\n    \n    \n    -----Output-----\n    2.500000\n\n    \n'''"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 10\\n0 10 10\\n1 10 5\\n1 20 35\") == \"2.500000\"\nassert solution(\"3 2 10\\n0 10 10\\n1 10 5\\n1 20 35\") == \"Impossible\"\nassert solution(\"4 2 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\") == \"2.500000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 100\") == \"2.500000\"\nassert solution(\"4 3 100\") == \"Impossible\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3 4\"\n) == \"3\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '6'\nassert solution('4') == '1'\nassert solution('6') == '4'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\""
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n5\\n3\\n4\\n2\\n5\\n2\\n4') == '4'\nassert solution('2\\n5\\n1\\n4\\n1\\n4\\n3\\n5\\n5') == '3'\nassert solution('4\\n4\\n2\\n4\\n5\\n2\\n4\\n4') == '2'\nassert solution('7\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n2') == '4'\nassert solution('7\\n3\\n2\\n3\\n4\\n1\\n1\\n2\\n4') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n5 3 4\\n') == '3'\nassert solution('3\\n3 2 5\\n') == '4'\nassert solution('3\\n5 3 4\\n') == '4'\nassert solution('3\\n3 2 5\\n') == '4'\nassert solution('3\\n3 2 5\\n') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n5 3 4\\n') == '3'\nassert solution('4\\n5 2 5 1\\n') == '4'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 4') == '3'\nassert solution('1 1 1 1 1 1') == '1'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5 3 4\") == \"3\"\nassert solution(\"3\\n5 5 4\") == \"2\"\nassert solution(\"3\\n5 5 2\") == \"1\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\nassert solution([2, 1, 1]) == \"2\"\nassert solution([3, 3, 3]) == \"2\"\n\"\"\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"10 1 10\") == \"4\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1 1\n''') == '2'\nassert solution('''\n5 5 3\n''') == '6'\nassert solution('''\n12 5 3\n''') == '11'\nassert solution('''\n4 2 4\n''') == '9'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1\\n') == '2'\nassert solution('1 1 1\\n') == '2'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1 1''') == '2'\nassert solution('''100 100 100''') == '22'\nassert solution('''9 9 9''') == '1'\n\n------Hints------\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"2 2 1\") == \"1\"\nassert solution(\"2 3 1\") == \"0\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1\\n') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '2'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2 4 3''') == '0'\n\nassert solution('''4\n1 2 3 4''') == '3'\n\nassert solution('''9\n1 2 3 4 5 6 7 8''') == '6'\n\nassert solution('''5\n1 2 3 4 5''') == '4'\n\nassert solution('''2\n1 3''') == '3'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 5') == '7'\n\n\"\"\"\n\nn = int(input())\nnumbers = list(map(int, input().split()))\n\nmax_xor_sum = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            xor_sum = (numbers[i] ^ numbers[j]) ^ (numbers[i] ^ numbers[k])\n            if xor_sum > max_xor_sum:\n                max_xor_sum = xor_sum\nprint(max_xor_sum)"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2') == '1'\nassert solution('10\\n2 4 6 5 2') == '10'\n\n\"\"\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 4 2') == '8'\nassert solution('5 2 4 1 3') == '6'\nassert solution('3 4 5 6 7') == '12'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '7'\nassert solution('1 1 3 3') == '5'\nassert solution('1 2 3 4') == '8'"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3 5\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2\n1\n5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"7\"\nassert solution(\"\"\"\n5\n1 2 5 4 3\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == 7\nassert solution('4 2 2') == 4\nassert solution('4 2 1') == 3\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"7\""
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 3 4') == '6'\nassert solution('10 10 10') == '12'\nassert solution('10 10 10') == '12'\nassert solution('10 10 10') == '12'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\njohn rhinocerous 2 jets\nruth platypus 1 rockets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n\"\"\") == \"john jets\"\nassert solution(\"\"\"\n4\nruth platypus 1 rockets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\nmary rhinocerous 2 jets\n\"\"\") == \"ruth\"\nassert solution(\"\"\"\n4\nmary rhinocerous 2 jets\nruth platypus 1 rockets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n\"\"\") == \"Impossible\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n2\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets\\n\") == \"john jets\\nmary rockets\\nruth plates\""
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == 'fred jetsons\\njohn jets\\nruth rockets'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"john jets\\n\"\nassert solution(\"3\") == \"john jets\\n\"\nassert solution(\"4\") == \"john jets\\n\"\nassert solution(\"5\") == \"john jets\\n\"\nassert solution(\"6\") == \"john jets\\n\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n4\\nfred dinosaur 2 jets jetsons\\njohn rhinocerous 2 jets rockets\\nmary rhinocerous 2 jetsons rockets\\nruth platypus 1 rockets') == 'fred jetsons\\njohn jets\\nruth rockets'\nassert solution('1\\n3\\njohn rhinocerous 2 jetsons\\nmary rhinocerous 2 jetsons') == 'Impossible'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == '''\nfred jetsons\njohn jets\nruth rockets\n'''\nassert solution('''\n10\nbob artichoke 2 arts vlc\nsteve palmer 2 sjs vlc\nbob juliet 4 sjs vlc\nsteve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nbob steve palmer 2 sjs\nsteve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nbob steve palmer 2 sjs\nsteve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nbob juliet 4 arts vlc\nsteve palmer 2 sjs\nbob steve palmer 2 sjs vlc\nsteve palmer 2 sjs\nbob juliet 4 arts vlc\nbob artichoke 2 arts\nsteve palmer 2 sjs\nbob steve"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\njohn rhinocerous 2\n''') == \"john rhinocerous 2 jetsons rockets\"\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'Impossible'\nassert solution('2') == 'ruth platon'\nassert solution('3') == 'john platon'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n6\\njohn rhinocerous 2 jets rockets\\n\\nmary rhinocerous 2 jetsons rockets\\n\\nruth platypus 1 rockets') == 'john jets\\nmary jets\\nruth rockets'\nassert solution('4\\n6\\njohn rhinocerous 2 jetsrons\\n\\nmary rhinocerous 2 jetsons\\n\\nruth platypus 1 rockets') == 'john jets\\nmary jets\\nruth rockets'\nassert solution('5\\n7\\njohn rhinocerous 2 jets\\n\\nmary rhinocerous 2 jets\\n\\nruth platypus 1 rockets') == 'john jets\\nmary jets\\nruth rockets'\nassert solution('5\\n7\\njohn rhinocerous 2 jets\\n\\nmary rhinocerous 2 jets\\n\\nruth platypus 1 rockets') == 'john jets\\nmary jets\\nruth rockets'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"john rhinocerous 2 jetsons\\n\"\nassert solution(\"3\") == \"ruth platypus 1 rockets\\n\"\nassert solution(\"4\") == \"ruth platypus 1 rockets\\n\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n5 3\\n1 2\\n-10 9\\n-2 3') == '1 2 1 2'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 2') == '1 2 1'\nassert solution('3\\n2 1') == '2 1 1'\nassert solution('5\\n3 2 3 1') == '5 1 1 1 1'\nassert solution('1\\n10 0') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 3\\n-10 9\\n-2 3\") == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('1\\n1') == '1'\nassert solution('3') == '2 1 1'\nassert solution('3\\n4 3') == '1 2 1'\nassert solution('3\\n-10 9') == '1 2 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1\\n-2 -1') == '2 2 2'\nassert solution('5\\n-2 3\\n-2 4\\n1 5\\n2 -1') == '1 2 1 2 1 2'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4 3\\n-10 9\\n-2 3') == '1 2 1'\nprint(solution('3\\n4 3\\n-10 9\\n-2 3'))\n\n\n\"\"\""
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n4 3\n-10 9\n-2 3\n\"\"\") == \"1 2 1\""
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1 2 1'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\n\nassert solution('''1\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\n\nassert solution('''3\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\n\nassert solution('''1\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\n\nassert solution('''1\n1 1 7\n2 2 3\n3 2 3\n5 1 4\n6 10 10''') == '2.125'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\nassert solution('''5\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 7 5''') == '3.8125'\n\n---Input---\n1\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 7 5\n3\n7\n1\n10\n2\n\n---Output---\n2.125\n3.8125\n4.375\n6.875\n7.5\n8.625\n12.25\n14.375\n15.875\n17.5\n18.625\n20.375\n22.625\n24.875\n26.5\n27.625\n30.625\n33.875\n35.875\n37.5\n40.625\n43.375\n45.875\n47.5\n50.625\n52.875\n55.875\n57.5\n60.625\n63.375\n65.875\n68.5\n70.625\n72.875\n75.875\n77.5\n80.625\n83.375\n85.875\n87.5\n90.625\n93.375\n95.875\n97.5\n100.625\n\n'''"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125'\nassert solution('''10\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 11 11\n9 9 9\n12 12 12\n15 15 15\n18 18 18\n21 21 21\n24 24 24''') == '5.0'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('5\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10') == '2.125'\nassert solution('10\\n1 1 7\\n3 2 3\\n5 1 4\\n6 10 10\\n8 7 6\\n9 8 8\\n11 10 10') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125', 'First Example'\nassert solution('''10\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 1 1\n9 2 2\n10 1 1\n11 3 3\n13 5 5\n14 3 3\n15 1 1\n16 5 5\n18 3 3''') == '5.8125', 'Second Example'\nassert solution('''6\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 1 1\n9 2 2\n10 1 1\n11 3 3\n13 5 5\n14 3 3\n15 1 1\n16 5 5\n18 3 3\n21 2 2\n23 3 3\n25 1 1\n27 3 3\n29 3 3''') == '4.25', 'Third Example'\nassert solution('''10\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 1 1\n9 2 2\n10 1 1\n11 3 3\n13 5 5\n14 3 3\n15 1 1\n16 5 5\n18 3 3\n21 2 2\n23 3 3\n25 1 1\n27 3 3\n29 3 3\n31 3 3\n33 3 3\n35 1 1\n37 3 3\n39 3 3\n41 3 3\n43 3 3''') == '6.15', 'Fourth Example'\nassert solution('''10\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n7 1 1\n9 2 2\n10 1 1\n11 3 3\n13 5 5\n14 3 3\n15 1 1\n16 5 5\n18 3 3\n21 2 2\n23 3 3\n25 1 1\n27 3 3\n29 3 3\n31 3 3\n33 3 3\n35 1 1\n37 3 3\n39 3 3\n41 3 3\n43 3 3\n45 3 3\n47 3 3''') == '5.8125', 'Fifth Example'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([1,1,7],[3,2,3],[5,1,4],[6,10,10]) == \"2.125\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\nSample Input:\n5\n1 3 5\n3 6 8\n2 3 9\n3 5 3\nSample Output:\n2.0625\n''') == '2.0625'\nassert solution('''\n5\n1 1 2\n1 3 1\n3 1 4\n3 2 1\n2 1 6\nSample Input:\n7\n1 1 1\n1 3 1\n3 1 4\n3 2 1\n2 1 4\n3 1 6\n3 2 3\nSample Output:\n2.0625\n''') == '2.0625'\nassert solution('''\n7\n1 1 1\n1 3 1\n3 1 4\n3 2 1\n2 1 6\n3 1 6\n3 2 3\nSample Output:\n2.0625\n''') == '2.0625'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 1 7\n3 2 3\n5 1 4\n6 10 10''') == '2.125', 'TOO SMALL'\n\nassert solution('''1\n1 10\n5 1 4''') == '1.0', 'NO START TIMES'\n\nassert solution('''5\n1 1 1\n3 2 3\n5 1 4\n6 10 10\n7 11 11''') == '1.25', 'BELOW MINIMUM LENGTH'\n\nassert solution('''7\n1 1 1\n3 2 3\n5 1 4\n6 10 10\n7 11 11\n2 12 12''') == '2.0625', 'OVERLAPPING TIMES'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'First'\nassert solution('''\n4\n1 2 3\n1 3 4\n1 5 6\n3 6 7\n''') == '0.6875', 'Second'\nassert solution('''\n4\n1 1 2\n2 3 4\n3 5 6\n5 6 7\n''') == '0.25', 'Third'\nassert solution('''\n3\n1 1 2\n2 2 2\n2 3 2\n''') == '1.75', 'Fourth'\nassert solution('''\n3\n1 1 2\n2 2 2\n2 3 2\n''') == '0.75', 'Fifth'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"*.*\") == \"main.c, a.out, yacc\"\nassert solution(\"*.c, *.out, *.py\") == \"main.c, a.out, readme, yacc\"\nassert solution(\"*.c, *.out\") == \"main.c, a.out, readme\"\nassert solution(\"*.c\") == \"main.c\"\nassert solution(\"*.out\") == \"a.out\"\n\nimport sys\nimport os\n\nP = sys.argv[1]\nN = int(sys.argv[2])\n\nfilenames = list(os.listdir())\nmatching = []\n\nfor filename in filenames:\n    if filename.startswith(P):\n        matching.append(filename)\n\nprint(\"\\n\".join(matching))"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"*.*\") == \"main.c a.out\\n\"\nassert solution(\"*.c\") == \"main.c a.out\\n\"\nassert solution(\"*.c\") == \"main.c a.out\\n\"\nassert solution(\"*.c\") == \"main.c a.out\\n\"\nassert solution(\"*.c\") == \"main.c a.out\\n\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('*.*') == ['main.c', 'a.out', 'defination']\nassert solution('*.[pP][aA]') == ['main.c', 'defination']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"*.*\") == \"main.c\\na.out\\ndef solution(stdin: str) -> str:\"\nassert solution(\"*.c\") == \"main.c\\na.out\\ndef solution(stdin: str) -> str:\"\nassert solution(\"*.c*\") == \"main.c\\na.out\\ndef solution(stdin: str) -> str:\"\nassert solution(\"*.c*.*\") == \"main.c\\na.out\\ndef solution(stdin: str) -> str:\"\nassert solution(\"*.*.*\") == \"\"\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == [\"main.c\", \"a.out\"]\n\nSample Input:\n*.c\n3\nhello.c\nreadme\na.c\nSample Output:\nhello.c\nreadme\na.c\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\nassert solution(\"*.*.py\") == [\"main.c\", \"a.out\", \"yacc\"]\n\nassert solution(\"*.py\") == [\"main.c\", \"a.out\", \"yacc\"]\n\nassert solution(\"*.c\") == [\"main.c\"]\n\nassert solution(\"*.c.py\") == [\"main.c\", \"a.out\", \"yacc\"]"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a.out') =='main.c', solution('a.out')\n\nassert solution('*.*') =='main.c', solution('*.*')\n\nassert solution('*') =='main.c', solution('*')\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\", \"def solution(stdin: str) -> str:\"]\nSample Input:\n*.c\n10\na.c\nb.c\nSample Output:\na.c\nb.c"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(open(0).read()) == \"main.c\\na.out\\ndef solution(stdin: str) -> str:\"\n\nimport os, re\n\np = input()\nn = int(input())\n\nfor _ in range(n):\n    s = input()\n    if re.match(p, s):\n        print(s)\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"ls\\*.py\") == [\"ls\\readme.py\"]\nassert solution(r\"ls\\*.c\") == [\"ls\\main.c\"]\nassert solution(r\"ls\\*.c\\*\") == [\"ls\\main.c\"]\nassert solution(r\"ls\\*.c\\*\\*\") == []\nassert solution(r\"ls\\*\") == [\"ls\\main.c\", \"ls\\readme.py\"]\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '0.2', solution('3 1')\nassert solution('2 0.1') == '0.9', solution('2 0.1')\nassert solution('1.000000') == '0.500000', solution('1.000000')\nassert solution('3 2') == '0.2', solution('3 2')\nprint('All test cases passed!')\n\"\"\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\nassert solution('1 1\\n0.8333333\\n') == '0.8333333'\n\n\"\"\""
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n0.500000\n1.000000''') == '0.500000'\n\nprint(solution('''\n1 1\n0.500000\n1.000000\n0.000000\n1.000000\n0.000000\n0.000000\n1.000000\n0.000000\n1.000000'''))\n\n\nprint(solution('''\n1 1\n0.50\n0.50\n0.50\n0.50\n0.50\n0.50\n0.50\n0.50\n0.50'''))\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('1.0 1.0') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('0.504747') == '0.504747'\nassert solution('0.504747 ') == '0.504747'\nassert solution('0.5047475') == '0.504747'\nassert solution('0.504747.504747.504747') == '0.504747'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '0.50000', 'CorrectnessCheck'\nassert solution('2 1') == '0.50000', 'CorrectnessCheck'\nassert solution('2 1') == '0.50000', 'CorrectnessCheck'\nassert solution('2 1') == '0.50000', 'CorrectnessCheck'\nassert solution('2 1') == '0.50000', 'CorrectnessCheck'"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 1\n0.500000\nSample Input:\n1 2\n0.450000\nSample Output:\n0.450000\n\"\"\") == \"0.450000\"\n\nassert solution(\"\"\"1 1\n0.500000\nSample Input:\n10 10\n0.450000\nSample Output:\n0.004500\n\"\"\") == \"0.004500\"\n\nassert solution(\"\"\"1 1\n0.500000\nSample Input:\n10 10\n0.450000\nSample Output:\n0.004500\n\"\"\") == \"0.004500\"\n\nassert solution(\"\"\"1 1\n0.500000\nSample Input:\n10 10\n0.450000\nSample Output:\n0.004500\n\"\"\") == \"0.004500\"\n\nassert solution(\"\"\"1 1\n0.500000\nSample Input:\n1000 1000\n0.450000\nSample Output:\n0.004500\n\"\"\") == \"0.004500\""
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0.01\") == \"0.01\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 1\\n0.501000') == '0.500000'\nassert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 1\\n0.500000') == '0.500000'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 49.9\n''') == '0.0'\n'''\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 0\\n\") == \"0.0\"\nassert solution(\"1 50\\n\") == \"0.0\"\nassert solution(\"20 30\\n\") == \"3.2\"\nassert solution(\"20 30\\n\") == \"3.2\"\n\n----------------"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"0.0\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([0, 49.9]) == \"0.0\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2.0\"\nassert solution(\"2.1\") == \"2.0\"\nassert solution(\"2.001\") == \"2.0\"\nassert solution(\"0.99\") == \"0.99\"\nassert solution(\"0.99999\") == \"0.99\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 49.9') == '0.0'\nassert solution('0 49.9') == '0.0'\nassert solution('0 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"20 21.5\") == \"3.2\"\nassert solution(\"2.2 1.5\") == \"2.2\"\nassert solution(\"2.2 2.2\") == \"1.0\"\nassert solution(\"20 2.2\") == \"1.6\""
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('10 10') == '0.01'\nassert solution('0 2.7') == '0.0'\nassert solution('0.3 5.9') == '0.32'\nassert solution('0.4 9.9') == '0.40'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 59.9') == '-3.8'\n\nSample Input 2:\n54.9 1.2\nSample Output 2:\n2.4\n\nSample Input 3:\n-13.1 1.2\nSample Output 3:\n-2.5\n\nSample Input 4:\n-2.9 1.2\nSample Output 4:\n2.8\n\nSample Input 5:\n-100.9 1.2\nSample Output 5:\n-111.7\n\nSample Input 6:\n0 49.9\nSample Output 6:\n0.0\n\nSample Input 7:\n0 59.9\nSample Output 7:\n-3.8\n\nSample Input 8:\n0 -13.1 1.2\nSample Output 8:\n-2.5\n\nSample Input 9:\n-0 -2.9 1.2\nSample Output 9:\n2.8\n\nSample Input 10:\n-0 -100.9 1.2\nSample Output 10:\n-111.7\n\nSample Input 11:\n0 54.9 1.2\nSample Output 11:\n0.0\n\nSample Input 12:\n0 59.9 1.2\nSample Output 12:\n-3.8\n\nSample Input 13:\n0 -13.1 1.2\nSample Output 13:\n-2.5\n\nSample Input 14:\n0 -2.9 1.2\nSample Output 14:\n2.8\n\nSample Input 15:\n0 -100.9 1.2\nSample Output 15:\n-111.7\n\nSample Input 16:\n0 -54.9 1.2\nSample Output 16:\n-0.0\n\nSample Input 17:\n0 -59.9 1.2\nSample Output 17:\n-3.8\n\nSample Input 18:\n0 -13.1 1.2\nSample Output 18:\n-2.5\n\nSample Input 19:\n0 -2.9 1.2\nSample Output 19:\n2.8\n\nSample Input 20:\n0 -100.9 1.2\nSample Output 20:\n-111.7\n\nSample Input 21:\n0 -54.9 1.2\nSample Output 21:\n-0.0\n\nSample Input 22:\n0 -59.9 1.2\nSample Output 22:\n-3.8\n\nSample Input 23:\n0 -13.1 1.2\nSample Output 23:\n-2.5\n\nSample Input 24:\n0 -2.9 1.2\nSample Output 24:\n2.8\n\nSample Input 25:\n0 -100.9 1.2\nSample Output 25:\n-111.7\n\nSample Input 26:\n0 -54.9 1.2\nSample Output 26:\n-0.0\n\nSample Input 27:\n0 -59.9 1.2\nSample Output 27:\n-3.8\n\nSample Input 28:\n0 -13.1 1.2\nSample Output 28:\n-2.5\n\nSample Input 29:\n0 -2.9 1.2\nSample Output 29:\n2.8\n\nSample Input 30:\n0 -100.9 1.2\nSample Output 30:\n-111.7\n\nSample Input 31:\n0 -54.9 1.2\nSample Output 31:\n-0.0\n\nSample Input 32:\n0 -59.9 1.2\nSample Output 32:\n-3.8\n\nSample Input 33:\n0 -13.1 1.2\nSample Output 33:\n-2.5\n\nSample Input 34:\n0 -2.9 1.2\nSample Output 34:\n2.8\n\nSample Input 35:\n0 -100.9 1.2\nSample Output 35:\n-111.7\n\nSample Input 36:\n0 -54.9 1.2\nSample Output 36:\n-0.0\n\nSample Input 37:\n0 -59.9 1.2\nSample Output 37:\n-3.8\n\nSample Input 38:\n0 -13.1 1.2\nSample Output 38:\n-2.5\n\nSample Input 39:\n0 -2.9 1.2\nSample Output 39:\n2.8\n\nSample Input 40:\n0 -100.9 1.2\nSample Output 40:\n-111.7\n\nSample Input 41:\n0 -54.9 1.2\nSample Output 41:\n-0.0\n\nSample Input 42:\n0 -59.9 1.2\nSample Output 42:\n-3.8\n\nSample Input 43:\n0 -13.1 1.2\nSample Output 43:\n-2.5\n\nSample Input 44:\n0 -2.9 1.2\nSample Output 44:\n2.8\n\nSample Input 45:\n0 -100.9 1.2\nSample Output 45:\n-111.7\n\nSample Input 46:\n0 -54.9 1.2\nSample Output 46:\n-0.0\n\nSample Input 47:\n0 -59.9 1.2\nSample Output 47:\n-3.8\n\nSample Input 48:\n0 -13.1 1.2\nSample Output 48:\n-2.5\n\nSample Input 49:\n0 -2.9 1.2\nSample Output 49:\n2.8\n\nSample Input 50:\n0 -100.9 1.2\nSample Output 50:\n-111.7\n\nSample Input 51:\n0 -54.9 1.2\nSample Output 51:\n-0.0\n\nSample Input 52:\n0 -59.9 1.2\nSample Output 52:\n-3.8\n\nSample Input 53:\n0 -13.1 1.2\nSample Output 53:\n-2.5\n\nSample Input 54:\n0 -2.9 1.2\nSample Output 54:\n2.8\n\nSample Input 55:\n0 -100.9 1.2\nSample Output 55:\n-111.7\n\nSample Input 56:\n0 -54.9 1.2\nSample Output 56:\n-0.0\n\nSample Input 57:\n0 -59.9 1.2\nSample Output 57:\n-3.8\n\nSample Input 58:\n0 -13.1 1.2\nSample Output 58:\n-2.5\n\nSample Input 59:\n0 -2.9 1.2\nSample Output 59:\n2.8\n\nSample Input 60:\n0 -100.9 1.2\nSample Output 60:\n-111.7\n\nSample Input 61:\n0 -54.9 1.2\nSample Output 61:\n-0.0\n\nSample Input 62:\n0 -59.9 1.2\nSample Output 62:\n-3.8\n\nSample Input 63:\n0 -13.1 1.2\nSample Output 63:\n-2.5\n\nSample Input 64:\n0 -2.9 1.2\nSample Output 64:\n2.8\n\nSample Input 65:\n0 -100.9 1.2\nSample Output 65:\n-111.7\n\nSample Input 66:\n0 -54.9 1"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3 5\\n1 2\\n2 3\\n3 1') == '4 1'\nassert solution('3\\n2 4\\n3 1\\n1 2') == '4 2'\nassert solution('2\\n3 2\\n1 2\\n2 1') == '1 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\") == \"1 2\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n1 3') == '2 1\\n3 1'\nassert solution('4 1\\n1 3\\n2 1\\n3 2') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 3\\n3 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4') == '1 2\\n2 3\\n3 1\\n4 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1 2\\n2 1'\nassert solution('3 2') == '1 2\\n2 1\\n1 3'\nassert solution('1 2') == '1 2\\n2 1'\nassert solution('4 1') == '1 3\\n3 2\\n2 1\\n1 4'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n2 3\\n3 1\\n4 1\\n') == '1 2\\n2 3\\n3 1\\n4 1\\n'\nassert solution('6\\n1 2\\n2 3\\n3 1\\n4 1\\n5 1\\n6 1\\n') == '1 2\\n2 3\\n3 1\\n4 1\\n5 1\\n6 1\\n'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 1\\n4 1') == '1 2\\n3 1\\n2 1\\n4 1'\nassert solution('5\\n1 2\\n2 3\\n3 1\\n4 1\\n5 2\\n5 3\\n') == '1 2\\n3 1\\n5 3\\n2 1\\n4 1\\n5 2\\n'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 1\\n4 1\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n') == '1'\nassert solution('4 3\\n2 1 3 2\\n1 1 1\\n') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\nassert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5''') == '5'\nassert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5''') == '0'\n\n'''\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\n\nassert solution('''\n7 6\n2 1 5 2 3 6 6\n1 2 5 2 3\n1 2 5 2 3\n1 2 5 2 3\n1 2 5 2 3\n1 2 5 2 3\n''') == '1'\n\nassert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5\n1 2 5 3 5\n''') == 'infinity'\n\nassert solution('''\n3 3\n3 1 2\n1 2 1\n''') == '1'\n\nassert solution('''\n5 5\n2 1 2 3 1\n3 2 1\n1 2 1\n1 2 1\n1 2 1\n''') == '2'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n2 1 5 3 5 3\\n1 2 5 3 5') == '2'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '3'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n1 2 5 3 5') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 5\n2 1 6 3 5 3\n1 2 5 3 5\n''') == '1'\nassert solution('''\n6 10\n1 1 4 6 3 5 7 2 2 2\n1 2 3 4 5 5 6 6\n''') == '1'\nassert solution('''\n1\n1\n''') == '2'\n'''\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 5\") == \"1\"\nassert solution(\"6 6\") == \"inf\""
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\") == \"1\""
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\nassert solution('''3 5\n2 1 6 3 5\n1 2 5''') == '2'\nassert solution('''5 5\n2 1 6 3 5\n1 2 5''') == 'forever'\nassert solution('''5 5\n1 2 5 3 5\n1 2 5''') == 'forever'\nassert solution('''3 5\n2 1 6 3 5\n1 2 5''') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 5\n2 1 6 3 5 3\n1 2 5 3 5''') == '1'\n\"\"\""
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 6 3 5 3\") == \"1\"\nassert solution(\"10 1 2 3 4 5 6 7 8 9 10 10 10 10 10 10 10 10 10 10\") == \"0\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\") == \"0\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 10') == '3'\nassert solution('1 1 10\\n0 1 1 2 6') == '3'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 10\n0 1 1 2 6\n''') == '3'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 10\") == \"3\"\nassert solution(\"1 1 2 1 2\") == \"2\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\nassert solution(\"3 2 5\\n0 1 1 3 5\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 10') == '3'\nassert solution('2 1 10 10 5') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\nassert solution('2 2 2 3 2\\n') == 'impossible'\nassert solution('2 2 2 3 2\\n') == 'impossible'\nassert solution('2 2 2 3 2\\n') == 'impossible'\nassert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n6\n1 5\n4 7\n3 8''') == '1 2 3 4 5 6'\n\nassert solution('''4\n1\n2\n3\n4''') == '2 1 3 4'\n\nassert solution('''10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '1 2 3 4 5 6 7 8 9 10'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 100\n99 1\n1 99\n''') == '2 1 2'\nassert solution('''\n4 100\n1 1\n3 2\n1 1\n''') == '1 1 1 1'\nassert solution('''\n4 100\n1 1\n3 2\n1 1\n''') == '1 1 1 1'\nassert solution('''\n2 100\n99 1\n1 99\n''') == '1 1'\nassert solution('''\n2 100\n99 1\n1 99\n''') == '1 1'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"2 1 2\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n1 100\n99 1\n1 99\n\n2 100\n99 1\n1 99\n\n3 100\n99 1\n1 99\n1 99\n\n4 100\n99 1\n1 99\n1 99\n1 99\n\n5 100\n99 1\n1 99\n1 99\n1 99\n1 99\n\n6 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n\n7 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n8 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n9 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n10 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n11 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n12 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n13 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n14 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n15 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n16 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n17 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n18 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n19 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n20 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n21 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n22 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n23 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n24 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n25 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n26 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n27 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n28 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n29 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n30 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n31 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n32 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n33 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n34 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n35 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n36 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n1 99\n\n37 100\n99 1\n1 99\n1 99\n1 99\n1 99\n1"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 99\") == \"1 2\"\nassert solution(\"2 100\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 100\n99 1\n1 99\n''') == '2 1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 100\\n99 1\\n1 99') == '2 1 2'\nassert solution('2 100\\n99 1\\n1 99\\n2 99') == '2 1 2'\nassert solution('2 100\\n99 1\\n1 99\\n1 99') == '1 2'\nassert solution('2 100\\n99 1\\n1 99\\n1 99\\n1 99') == '1 1 1'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5\\n1 1\\n2 99\\n3 99\") == \"1 2\"\nassert solution(\"2 5\\n1 1\\n2 99\\n3 99\") == \"3 2\"\nassert solution(\"3 5\\n1 1\\n2 99\\n3 99\") == \"3 1 2\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 100\n99 1\n1 99\n''') == '1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 99\n1 99\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('H') == 'H'\nassert solution('T') == 'H'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"H\") == \"H\"\nassert solution(\"H\") == \"H\"\nassert solution(\"HT\") == \"H\"\nassert solution(\"TH\") == \"H\"\nassert solution(\"HT\") == \"H\""
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\"\nassert solution(\"G\\nT\\n0.5\") == \"0.5\"\nassert solution(\"H\\nT\\n0.7\") == \"0.7\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('H') == '1'\nassert solution('T') == '0'\nassert solution('0.5') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"H\\nT\\n0.5\") == \"0.5\"\nassert solution(\"H\\nT\\n0.6\") == \"0.5\"\nassert solution(\"H\\nT\\n0.07\") == \"0.5\"\nassert solution(\"H\\nT\\n0.08\") == \"0.4\"\nassert solution(\"H\\nT\\n0.09\") == \"0.3\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nH\nT\n0.5\n''') == '0.5'\nassert solution('''\nH\nT\n0.75\n''') == '0.75'\nassert solution('''\nH\nT\n0.75\n''') == '0.75'\nassert solution('''\nH\nT\n0.25\n''') == '0.25'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H' * 20) == '0.5', \"Goldilocks!\"\nassert solution('T' * 20) == '0.5', \"Kilimans!\"\nassert solution('H' * 20 + 'T' * 20) == '0.5', \"Goldilocks and Kilimans!\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join([\n    '1',\n    '2',\n    '3',\n])) == '2'\n\nassert solution('\\n'.join([\n    '4',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    '10',\n    '11',\n    '12',\n    '13',\n    '14',\n    '15',\n    '16',\n    '17',\n    '18',\n    '19',\n    '20',\n    '21',\n    '22',\n    '23',\n    '24',\n    '25',\n    '26',\n    '27',\n    '28',\n    '29',\n    '30',\n    '31',\n    '32',\n    '33',\n    '34',\n    '35',\n    '36',\n    '37',\n    '38',\n    '39',\n    '40',\n    '41',\n    '42',\n    '43',\n    '44',\n    '45',\n    '46',\n    '47',\n    '48',\n    '49',\n    '50',\n    '51',\n    '52',\n    '53',\n    '54',\n    '55',\n    '56',\n    '57',\n    '58',\n    '59',\n    '60',\n    '61',\n    '62',\n    '63',\n    '64',\n    '65',\n    '66',\n    '67',\n    '68',\n    '69',\n    '70',\n    '71',\n    '72',\n    '73',\n    '74',\n    '75',\n    '76',\n    '77',\n    '78',\n    '79',\n    '80',\n    '81',\n    '82',\n    '83',\n    '84',\n    '85',\n    '86',\n    '87',\n    '88',\n    '89',\n    '90',\n    '91',\n    '92',\n    '93',\n    '94',\n    '95',\n    '96',\n    '97',\n    '98',\n    '99',\n    '100',\n    '101',\n    '102',\n    '103',\n    '104',\n    '105',\n    '106',\n    '107',\n    '108',\n    '109',\n    '110',\n    '111',\n    '112',\n    '113',\n    '114',\n    '115',\n    '116',\n    '117',\n    '118',\n    '119',\n    '120',\n    '121',\n    '122',\n    '123',\n    '124',\n    '125',\n    '126',\n    '127',\n    '128',\n    '129',\n    '130',\n    '131',\n    '132',\n    '133',\n    '134',\n    '135',\n    '136',\n    '137',\n    '138',\n    '139',\n    '140',\n    '141',\n    '142',\n    '143',\n    '144',\n    '145',\n    '146',\n    '147',\n    '148',\n    '149',\n    '150',\n    '151',\n    '152',\n    '153',\n    '154',\n    '155',\n    '156',\n    '157',\n    '158',\n    '159',\n    '160',\n    '161',\n    '162',\n    '163',\n    '164',\n    '165',\n    '166',\n    '167',\n    '168',\n    '169',\n    '170',\n    '171',\n    '172',\n    '173',\n    '174',\n    '175',\n    '176',\n    '177',\n    '178',\n    '179',\n    '180',\n    '181',\n    '182',\n    '183',\n    '184',\n    '185',\n    '186',\n    '187',\n    '188',\n    '189',\n    '190',\n    '191',\n    '192',\n    '193',\n    '194',\n    '195',\n    '196',\n    '197',\n    '198',\n    '199',\n    '200',\n    '201',\n    '202',\n    '203',\n    '204',\n    '205',\n    '206',\n    '207',\n    '208',\n    '209',\n    '210',\n    '211',\n    '212',\n    '213',\n    '214',\n    '215',\n    '216',\n    '217',\n    '218',\n    '219',\n    '220',\n    '221',\n    '222',\n    '223',\n    '224',\n    '225',\n    '226',\n    '227',\n    '228',\n    '229',\n    '230',\n    '231',\n    '232',\n    '233',\n    '234',\n    '235',\n    '236',\n    '237',\n    '238',\n    '239',\n    '240',\n    '241',\n    '242',\n    '243',\n    '244',\n    '245',\n    '246',\n    '247',\n    '248',\n    '249',\n    '250',\n    '251',\n    '252',\n    '253',\n    '254',\n    '255',\n    '256',\n    '257',\n    '258',\n    '259',\n    '260',\n    '261',\n    '262',\n    '263',\n    '264',\n    '265',\n    '266',\n    '267',\n    '268',\n    '269',\n    '270',\n    '271',\n    '272',\n    '273',\n    '274',\n    '275',\n    '276',\n    '277',\n    '278',\n    '279',\n    '280',\n    '281',\n    '282',\n    '283',\n    '284',\n    '285',\n    '286',\n    '287',\n    '288',\n    '289',\n    '290',\n    '291',\n    '292',\n    '293',\n    '294',\n    '295',\n    '296',\n    '297',\n    '298',\n    '299',\n    '300',\n    '301',\n    '302',\n    '303',\n    '304',\n    '305',\n    '306',\n    '307',\n    '308',\n    '309',\n    '310',\n    '311',\n    '312',\n    '313',\n    '314',\n    '315',\n    '316',\n    '317',\n    '318',\n    '319',\n    '320',\n    '321',\n    '322',\n    '323',\n    '324',\n    '325',\n    '326',"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1 3'\nassert solution('6') == '1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == '8\\n1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n5\n1 2 3 4 5\n5 1 2\n4 3 5\n3 4\n2 5''') == '8 5 1 3 5 7 9 11 13 15'\nassert solution('''5\n5\n1 2 3 4 5\n3 5 1\n2 4\n1 3\n5 4''') == '8 5 1 3 5 7 9 11 13 15'\nassert solution('''5\n5\n1 2 3 4 5\n4 2 3\n3 4\n1 5\n5 4''') == '8 5 1 3 5 7 9 11 13 15'\nassert solution('''5\n5\n1 2 3 4 5\n3 5 2\n2 4 1\n1 5\n5 4''') == '8 5 1 3 5 7 9 11 13 15'\nassert solution('''6\n6\n1 2 3 4 5 6\n5 1 2\n4 3 5\n3 4\n2 5\n1 6\n6 5''') == '5 1 2 3 4 5 6 7 9 11 13 15'"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\\\n3\n''') == '8 1 3 5 7 9 11 13 15'\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '8 1 3 5 7 9 11 13 15'\nassert solution('6') == '8 1 3 5 7 9 11 13 15'\nassert solution('12') == '12'\nassert solution('14') == '12 13 14'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\n\nsolution('6') == '7 5 4 9 8 1 2 3'\n\nsolution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3') == '8'\nassert solution('3\\n1\\n2') == '3'\nassert solution('5\\n1\\n2\\n3\\n4') == '5'\nassert solution('15\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15') == '1 3 5 7 9 11 13 15'\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3') == '1 3 5 7 9 11 13 15'\nassert solution('6') == '1 3 5 7 9 11 13 15'\n\"\"\"\n\nn = int(input())\nprint(8 - n)\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n8\n8 8\n8 8 8 8\n8 8 8 8 8\n8 8 8 8 8 8\n8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 5 7') == '3', \"One\"\nassert solution('3\\n1 3 5 7') == '3', \"Two\"\nassert solution('2\\n2 2') == '0', \"Three\"\nassert solution('2\\n2 3') == '1', \"Four\"\nassert solution('2\\n3 5') == '0', \"Five\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n'''\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '3\\n1\\n0\\n'\nassert solution('4\\n1 2\\n2 4\\n3 6\\n5 9\\n') == '5\\n9\\n'\nassert solution('4\\n1 2\\n2 4\\n3 6\\n5 9\\n') == '9\\n'\nassert solution('3\\n2 4\\n1 2\\n') == '0\\n'\nassert solution('5\\n2 4\\n1 2\\n3 6\\n5 9\\n') == '0\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 5 7') == '3'\n\n'''\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '3\\n1\\n0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '3\\n1\\n0\\n', \"First\"\n\nassert solution('''\n3\n0\n1\n''') == '3\\n0\\n1\\n', \"Second\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('2') == '1'\nassert solution('2') == '0'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '1'\nassert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '0'\nassert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5') == '1'"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n1 1 -2 0''') == '0'\n'''"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 -2 0\\n') == '0'\nassert solution('3 2\\n1 2 1 -2 0\\n2 -1 2 1\\n') == '1'\nprint('solution() is working!')"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 1\n1 1 -2 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 1 -2 0\n''') == '0'\nassert solution('''\n2 1\n-2 -1 0 -1\n''') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n1 2 -2 0\n''') == '0'\n\nassert solution('''3 1\n1 -1 -2 0\n''') == '1'\n\nassert solution('''3 1\n1 1 -2 0\n''') == '1'\n\nassert solution('''3 2\n-1 1 -2 0\n-1 2 -2 0\n''') == '2'\n\nassert solution('''5 3\n1 -1 -2 0\n-1 1 -2 0\n-1 2 -2 0\n''') == '3'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 -2 0') == '0'\nassert solution('10 10 0 -2 0') == '1'\nassert solution('100 100 0 -2 0') == '4'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('3 1\\n1 1 -2 0\\n-1 1 -2 0\\n-1 1 -2 0') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"3 3\\n-1 1 1\\n-1 -1 1\\n-1 -1 -1\") == \"1\"\nassert solution(\"10 10\\n1 1 1\\n0 0 0\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\") == \"4\"\nassert solution(\"15 15\\n1 1 1\\n0 0 0\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -1 -1\\n-1 -"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\nassert solution(input_data=\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(input_data=\"12 1\\n-1 -3 2 3\") == \"4\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"194\"\nassert solution(\"4\") == \"10\""
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '194'\nassert solution('3') == '2380'\nassert solution('4') == '242520'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == \"194\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '100'\nassert solution('2') == '1020'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '194'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n2019 10 18\\n2019 10 19\\n2020 10 02') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '194'\nassert solution('5') == '2987'\nassert solution('1') == '2787'\nassert solution('2') == '4874'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\nassert solution('''\n3\n2019 10 18\n2019 10 19\n2020 10 02\n''') == '37'\nassert solution('''\n1\n2019 10 18\n2019 10 19\n2019 10 20\n2020 10 02\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n-100 100\n-100 100\n-100 100\n-100 100\n-100 100\n\"\"\") == \"negative-infinity -5\"\n\nassert solution(\"\"\"\n-100 100\n-100 100\n-100 100\n-100 100\n-100 100\n\"\"\") == \"negative-infinity -5\"\n\nassert solution(\"\"\"\n-100 100\n-100 100\n-100 100\n-100 100\n-100 100\n\"\"\") == \"negative-infinity -5\"\n\nassert solution(\"\"\"\n-100 100\n-100 100\n-100 100\n-100 100\n-100 100\n\"\"\") == \"negative-infinity -5\"\n\nassert solution(\"\"\"\n-100 100\n-100 100\n-100 100\n-100 100\n-100 100\n\"\"\") == \"negative-infinity -5\""
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 13.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\nassert solution(\"10 10 10 10 10 0\") == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 10 10 10 0\\n5 10 10 5 10 0\\n6 10 10 10 10 0\\n\") == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\\n\"\nassert solution(\"1 1 1 2 1 0\\n3 3 3 5 3 0\\n5 5 5 5 5 0\\n\") == \"negative-infinity -5\\n-5 -5 -5 -5 -5\\n\"\nassert solution(\"4 5 5 4 5 0\\n10 0 10 10 0 0\\n12 0 12 0 0 0\\n10 10 10 10 0 0\\n\") == \"5 12.5\\n\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"5 13.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"positive-infinity -5\\npositive-infinity 0\\nnegative-infinity 0\\nnegative-infinity -5\\nnegative-infinity 0\\nnegative-infinity 0\\nnegative-infinity -5\\nnegative-infinity 0\\nnegative-infinity 0\\nnegative-infinity 0\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\npositive-infinity 0\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\nnegative-infinity -5\\"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 10 10 0\") == \"5 12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\""
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"-1\"\nassert solution(\"5 10 10 5 10 0\") == \"12.5\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\""
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 10 10 10 10 0''') == 'negative-infinity 0'\nassert solution('''5 10 10 5 10 0''') == '5 12.5'\nassert solution('''6 10 10 10 10 0''') == '6 12.5'\nprint('PASSED!!')\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 4 2\") == \"-infinity -infinity\"\nassert solution(\"3 0 0 5\") == \"negative-infinity -infinity\"\nassert solution(\"0 -2 0 3\") == \"negative-infinity -infinity\"\nassert solution(\"0 -2 0 3\") == \"negative-infinity -infinity\"\nassert solution(\"0 -2 0 3\") == \"negative-infinity -infinity\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\n\"\"\"\n) == \"negative-infinity 0\\n5 12.5\\nnegative-infinity -5\\n\"\n\n\"\"\"\n--- Part Two ---\nIt is a rare chance that you miss an opportunity to sneak past any opponents. So you go on a short-circuit in front of the wall before running your last shot. You can either stand right in front of the wall or back behind it.\n\nThe mirror is completely infinitesimally thin, so you can either step forward or step backward at any rate. You need to avoid the wall if possible, but you have to stand in front of it in order to shoot.\n\nBecause you are running to the wall, you can either go forward or backward. This is the only place where you can actually stand before you shoot. The mirror is exactly 5 units tall, so you can either step forward or backward by at most 5 units.\n\nIf you step forward, you might miss the wall if the wall is closer than 5 units to you. To avoid this, you decide to step backward. If you step forward, you can hit the wall if the wall is closer than 5 units to you. However, if you step backward, you might not know whether you missed the wall or not. If you don't know whether you missed the wall, you may need to run the whole test again.\n\nAfter one round of running either forward or backward, you are standing at the end of the wall. When you get to the end, you can tell that you've missed the wall if it is < 5 units in front of you.\n\nInput\nInput consists of up to $1000$ test cases. Each test case consists of one line:\n\nThe first line consists of a single integer, $T$, denoting the number of test cases. The second line consists of $T$ space-separated integers, $x_1~ y_1~ x_2~ y_2~ x_3~ y_3$ which represents your position. The first four numbers represent the endpoints of the mirror, and the last two represent your position. You can be sure that $x_1 \\neq x_2$, or $y_1 \\neq y_2$, or both. You can also be sure that $x_1\\cdot x_2>0$. You are not standing on the mirror. All coordinates are in the range $[-100,100]$ with at most $5$ digits past the decimal point. Input ends at end of file.\n\nOutput\nFor each test case, report the $y$-coordinates of the range of locations on the wall that you can hit if you shoot at the mirror. Hitting either side of the (infinitely thin) wall is considered a hit. Report the coordinates from least to greatest. If you can hit an infinitely-long section of the mirror, use the terms negative-infinity or positive-infinity as appropriate. Ignore any potential occlusions, such as the laser hitting you, or the laser hitting the wall before getting to the mirror. Numeric answers should be accurate to within $0.0001$ units. If you can\u2019t hit the wall at all, output can't hit the wall.\n\nSample Input:\n3\n1 1 1 1 0\n3 2 1 1 0\n4 3 1 1 0\nSample Output:\nnegative-infinity 0\n3 5\nnegative-infinity -5\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4') == '2'\nassert solution('2 2') == 'IMPOSSIBLE'\nassert solution('3 1') == 'IMPOSSIBLE'\nassert solution('4 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'IMPOSSIBLE'\nassert solution('4 2') == '1'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"10 30000\") == \"IMPOSSIBLE\"\nassert solution(\"10 20000\") == \"1\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '2'\nassert solution('3 3 3 2 2 3 2 2 3') == '2'\nassert solution('2 3 2 2 3 3') == 'IMPOSSIBLE'\nassert solution('1 1 3 1 3 2 1 3 2 3') == '4'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n3\n1 5\n2 3\n1 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n5\n10 10\n1 1\n1 5\n1 5\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n5\n3\n1 5\n2 2\n1 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n10\n1 1\n1 2\n1 3\n1 5\n1 6\n2 2\n2 3\n2 5\n3 4\n4 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n100 30000\n200 20000\n300 10000\n400 0\n50 10000\n75 20000\n400 -40000\n''') == '2'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"5 0\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 3 2 1 0\") == \"3\"\nassert solution(\"3 3 4 4 1 2 3\") == \"3\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\nassert solution(\"2 1 1\") == \"2\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '345 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotR 3 2\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotR 3 2\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotR 3 2\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nrotS 2 1\\nnegR"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100''') == '345 2'\n\nassert solution('''3 4\n1 2 3\n4 5 6\n7 8 9\n10 11 12''') == '345 5'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\nrotS 2 1\nnegR 2''') == '345 2'\nassert solution('''10 8\n3 8 -5 0 -1\n-8 -4 2 -2\n6 1 -6 -1\nrotS 2 3\nrotS 1 5\nrotS 3 4\nrotS 1 4\nrotS 1 2\nrotS 3 5\nrotS 1 1\nrotS 2 3\nnegR 3\nnegR 1\nnegR 2\nnegS 5\nnegS 3\nnegS 1\nnegS 2\nnegS 4\nnegS 3\nrotS 1 1\nrotS 1 2\nrotS 1 3\nrotS 1 4\nnegR 1\nnegR 2\nnegR 3\nnegR 4\nrotS 1 1\nrotS 1 2\nrotS 1 3\nrotS 1 4\nrotS 1 5\nrotS 1 6\nnegS 2\nnegS 3\nnegS 4\nnegS 5\nnegS 6\nnegS 7\nnegS 8\nnegS 9\nnegS 10\nnegS 11\nnegS 12\nrotS 1 5\nrotS 1 1\nrotS 1 2\nrotS 1 3\nrotS 1 4\nrotS 1 5\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 2 1\nrotS 2 2\nrotS 3 1\nrotS 4 2\nnegR 3\nrotS 1 1\nrotS 1 2\nrotS 1 3\nrotS 1 4\nrotS 1 5\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 2 2\nrotS 3 1\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 5\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 2 2\nrotS 3 1\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 2 2\nrotS 3 2\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 3 1\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 5\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 2 2\nrotS 3 2\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13 2\nrotS 1 5\nrotS 1 6\nrotS 1 7\nrotS 1 8\nrotS 1 9\nrotS 1 10\nrotS 1 11\nrotS 1 12\nrotS 1 13\nrotS 2 2\nrotS 3 2\nrotS 4 2\nrotS 5 2\nrotS 6 2\nrotS 7 2\nrotS 8 2\nrotS 9 2\nrotS 10 2\nrotS 11 2\nrotS 12 2\nrotS 13"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"345 2\"\nassert solution('''\n5 5\n-2 1 0 -4 1\n1 -5 1 0 1\n1 -2 -1 0 1\n1 -2 -1 1 0\n1 1 -1 0 1\n''') == \"345 2\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 4\\n'\n    '1 -2 5 200\\n'\n    '-8 0 -4 -10\\n'\n    '11 4 0 100'\n) == '345 2\\n'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100\") == \"345 2\"\nassert solution(\"2 2\\n1 1\\n1 -2\") == \"5\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2'\n\nassert solution('''\n4 5\n1 1 -2 -3\n5 -4 1 -3\n3 -1 5 -4\n-4 -2 -1 1\n''') == '346 1'\n\nassert solution('''\n4 3\n1 2 3 -4\n-5 -6 -7 -8\n-9 -10 -11 -12\n-13 -14 -15 -16\n''') == '65 -1'\n\nassert solution('''\n4 3\n1 2 3 -4\n-5 -6 -7 -8\n-9 -10 -11 -12\n-13 -14 -15 -16\n''') == '54 -1'\n\nassert solution('''\n2 5\n1 2 3 -4\n5 -6 -7 -8\n-9 -10 -11 -12\n-13 -14 -15 -16\n''') == '12 -1'"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2\\nrotS 2 1\\nnegR 2\\n'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    3 4\n    1 -2 5 200\n    -8 0 -4 -10\n    11 4 0 100\n''') == '345 2\\nrotS 2 1\\nnegR 2'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 5') == '1.25'\nassert solution('6 3 5') == '1.5'"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n3 1 1\") == \"0.5\"\nassert solution(\"2 4\\n1 2 1 3\") == \"4\"\n\"\"\"\n\nfrom math import sqrt\n\nn, m = list(map(int, input().split()))\ne = []\n\nfor _ in range(n):\n    e.append(int(input()))\n\na = list(map(int, input().split()))\n\nres = 0\n\nfor i in range(n):\n    tmp = 0\n    for j in range(m):\n        tmp += abs(e[i] - a[j])\n    res = max(res, tmp)\n\nprint(res)\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"0.5\"\nassert solution(\"2 3\") == \"1.5\"\nassert solution(\"3 3\") == \"1.0\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"5 3 4\") == \"0.25\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 2\n3 1 1\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n3 1 1') == '0.5'\nassert solution('3 3\\n5 5 5') == '1.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n5 2\n3 1 1\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n4\n4 2\n1 2 3\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('3 2') == '0.5'\nassert solution('3 1 1') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"0.5\"\nassert solution(\"1000000 5\") == \"1.0\"\nassert solution(\"5 3\") == \"4.0\"\nassert solution(\"1000000 2\") == \"1.0\"\nassert solution(\"2 3\") == \"0.5\""
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '2 6 7\\n3 8 9'\nassert solution('9 10\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5'\nassert solution('9 20\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n10 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n10 11\\n1 2\\n1 3\\n5 6\\n5 8\\n1 9\\n1 10\\n5 11\\n10 11\\n5 12\\n10 12\\n5 13\\n10 13\\n5 14\\n10 14\\n6 15\\n10 15\\n5 16\\n10 16\\n6 17\\n10 17\\n5 18\\n10 18\\n6 19\\n10 19\\n5 20\\n10 20\\n6 21\\n10 21\\n5 22\\n10 22\\n6 23\\n10 23\\n5 24\\n10 24\\n6 25\\n10 25\\n5 26\\n10 26\\n6 27\\n10 27\\n5 28\\n10 28\\n6 29\\n10 29\\n5 30\\n10 30\\n6 31\\n10 31\\n5 32\\n10 32\\n6 33\\n10 33\\n5 34\\n10 34\\n6 35\\n10 35\\n5 36\\n10 36\\n6 37\\n10 37\\n5 38\\n10 38\\n6 39\\n10 39\\n5 40\\n10 40\\n6 41\\n10 41\\n5 42\\n10 42\\n6 43\\n10 43\\n5 44\\n10 44\\n6 45\\n10 45\\n5 46\\n10 46\\n6 47\\n10 47\\n5 48\\n10 48\\n6 49\\n10 49\\n5 50\\n10 50\\n6 51\\n10 51\\n5 52\\n10 52\\n6 53\\n10 53\\n5 54\\n10 54\\n6 55\\n10 55\\n5 56\\n10 56\\n6 57\\n10 57\\n5 58\\n10 58\\n6 59\\n10 59\\n5 60\\n10 60\\n6 61\\n10 61\\n5 62\\n10 62\\n6 63\\n10 63\\n5 64\\n10 64\\n6 65\\n10 65\\n5 66\\n10 66\\n6 67\\n10 67\\n5 68\\n10 68\\n6 69\\n10 69\\n5 70\\n10 70\\n6 71\\n10 71\\n5 72\\n10 72\\n6 73\\n10 73\\n5 74\\n10 74\\n6 75\\n10 75\\n5 76\\n10 76\\n6 77\\n10 77\\n5 78\\n10 78\\n6 79\\n10 79\\n5 80\\n10 80\\n6 81\\n10 81\\n5 82\\n10 82\\n6 83\\n10 83\\n5 84\\n10 84\\n6 85\\n10 85\\n5 86\\n10 86\\n6 87\\n10 87\\n5 88\\n10 88\\n6 89\\n10 89\\n5 90\\n10 90\\n6 91\\n10 91\\n5 92\\n10 92\\n6 93\\n10 93\\n5 94\\n10 94\\n6 95\\n10 95\\n5 96\\n10 96\\n6 97\\n10 97\\n5 98\\n10 98\\n6 99\\n10 99\\n5 100\\n10 100\\n6 101\\n10 101\\n5 102\\n10 102\\n6 103\\n10 103\\n5 104\\n10 104\\n6 105\\n10 105\\n5 106\\n10 106\\n6 107\\n10 107\\n5 108\\n10 108\\n6 109\\n10 109\\n5 110\\n10 110\\n6 111\\n10 111\\n5 112\\n10 112\\n6 113\\n10 113\\n5 114\\n10 114\\n6 115\\n10 115\\n5 116\\n10 116\\n6 117\\n10 117\\n5 118\\n10 118\\n6 119\\n10 119\\n5 120\\n10 120\\n6 121\\n10 121\\n5 122\\n10 122\\n6 123\\n10 123\\n5 124\\n10 124\\n6 125\\n10 125\\n5 126\\n10 126\\n6 127\\n10 127\\n5 128\\n10 128\\n6 129\\n10 129\\n5 130\\n10 130\\n6 131\\n10 131\\n5 132\\n10 132\\n6 133\\n10 133\\n5 134\\n10 134\\n6 135\\n10 135\\n5 136\\n10 136\\n6 137\\n10 137\\n5 138\\n10 138\\n6 139\\n10 139\\n5 140\\n10 140\\n6 141\\n10 141\\n5 142\\n10 142\\n6 143\\n10 143\\n5 144\\n10 144\\n6 145\\n10 145\\n5 146\\n10 146\\n6 147\\n10 147\\n5 148\\n10 148\\n6 149\\n10 149\\n5 150\\n10 150\\n6 151\\n10 151\\n5 152\\n10 152\\n6 153\\n10 153\\n5 154\\n10 154\\n6 155\\n10 155\\n5 156\\n10 156\\n6 157\\n10 157\\n5 158\\n10 158\\n6 159\\n10 159"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n1 3\\n2 3\\n') == '1 2 3'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n') == '1 4 5\\n2 6 7\\n3 8 9\\n'\n\n\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n3 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 3\n1 2\n4 3\n1 3\n4 2\n1 5\n\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"\n4 3\n1 2\n1 3\n2 4\n\"\"\") == \"2 3 4 1\"\nassert solution(\"\"\"\n8 10\n1 4\n5 4\n6 7\n1 7\n6 4\n8 6\n3 9\n3 9\n4 7\n2 6\n1 8\n\"\"\") == \"1 4 7 6 8 2 3 9\""
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9 11') == '1 4 5 2 6 7 3 8 9 6 8'\n\"\"\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1 4 5 2 6 7 3 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 2') == '1 5'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\") == \"1 4 5 2 6 7 8 9\"\n\n\"\"\""
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4') == '1 2 3 4'\nassert solution('11 11') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n\nassert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n\nassert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13499'\n\nassert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13499'\n\nassert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13599'"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"11 2\\n12000\") == \"13500\"\nassert solution(\"9000\") == \"100000\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\nassert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"13500\""
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\nassert solution('''30 20\n9999999999999\n7 9999999999999\n139999999999999\n7 4999999999999\n15 9999999999999\n15 4999999999999\n3 9999999999999\n13999999999999\n3 4999999999999\n13999999999999\n3 500000000000000\n7 9999999999999\n139999999999999\n7 4999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n139999999999999\n3 500000000000000\n7 9999999999999\n15 9999999999999\n3 4999999999999\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500', solution\nassert solution('''\n3 1\n3\n1\n2\nSample Output:\n1\n''') == '1', solution\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0'\nassert solution('11 2') == '6'\nassert solution('12000') == '13750'\nassert solution('4500') == '0'\nassert solution('10000') == '10500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '13500'\n\nstdin = \"\"\"\n3 2\n12000\n9000\n4500\n10\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n\"\"\"\n\nassert solution(stdin) == '13500'\n\nstdin = \"\"\"\n5 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n\"\"\"\n\nassert solution(stdin) == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"13500\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 16\\nHot cross buns! =\\n4 4 4 4 4 4 4 4\\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\nHot___cross____buns!"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 4 4 4 4\n''') == '''\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n0 0 5\n3 4 5\n1 5\n3 2 5''') == '3\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nOne_a_pen-ny,Two_a_pen-ny,Hot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns!_=\\nHot_cross_buns!_=________Hot_cross_buns"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n2 2\\n3 4') == '1_1_2_2_3_4'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\nA 8 5\\nB 9 1\\nC 3 3\\nD 2 8\\nE 1 1\\nF 1 5\\nG 1 3\\nH 8 9\\nI 8 5\\nJ 8 8\\nK 9 9\\nL 9 1\\nM 9 3\\nN 8 5\\nO 9 1\\nP 8 8\\nQ 9 9\\nR 9 9\\nS 8 9\\nT 8 8\\nU 9 9\\nV 9 5\\nW 9 3\\nX 8 8\\nY 8 8\\nZ 8 8\\n\") == \"\"\"1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 228 225 225 225 225 225 225 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 4') == '2_4_=_____2_4_=_____\\n________________2_4_=_____2_4_=_____'\nassert solution('1 10\\n10 4') == '10_4_=_____10_4_=_____\\n________________10_4_=_____10_4_=_____'\nassert solution('4 10\\n10 2') == '4_10_=_____4_10_=_____\\n________________4_10_=_____4_10_=_____'\nassert solution('4 16\\n16 2') == '4_16_=_____4_16_=_____\\n________________4_16_=_____4_16_=_____'\nassert solution('20 10\\n10 4') == '20_10_=_____20_10_=_____\\n________________20_10_=_____20_10_=_____'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________________Hot_cross_buns!_=\\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n'''\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 16') == 'Hot cross buns! =\\nHot cross buns! =\\n'\nassert solution('1 1') == '\\n'\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2 1\n1 2 10\n1 4 6 6\n1 6 10 5''') == '33'\nassert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5''') == '33'\nassert solution('''3 3 1\n1 2 10\n1 4 6 6\n1 6 10 5''') == '99'\nassert solution('''3 4 1\n1 2 10\n1 4 6 6\n1 6 10 5''') == '84'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\n\"\"\""
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"33\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''5 2 10\n1 5 2 8\n1 5 3 6\n1 5 3 6\n1 5 3 6\n1 5 3 6\n''') == '27'\nassert solution('''8 2 10\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n''') == '35'\nassert solution('''8 2 10\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n1 5 2 8\n''') == '29'\nassert solution('''4 4 10\n1 5 2 6\n2 3 3 5\n1 3 5 2\n1 3 3 5\n2 3 3 5\n1 3 5 2\n1 3 3 5\n2 3 3 5\n''') == '30'"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 5\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '20'\nassert solution('''\n3 10\n1 2 3 4 5\n1 4 5 6\n1 6 7 8\n2 10 30 33\n''') == '33'\nassert solution('''\n2 1\n1 2\n1 3\n2 3\n''') == '2'\n\n'''\nThis can be solved with the use of the dynamic programming approach. For a given time, and for each venue, we know the best cost to get to the venue is either the previous best cost + gig cost, or the current best cost + gig cost (depending on which end of the road the gig is played).\n\nSo we can iterate over all the venues to find the maxiumum. We can do this by finding the optimal time to travel to all the venues. Then we can find the optimal gig cost in one fell swoop and see the minimum.\n\nThe time of travel of all the gigs is given by time + time + time + time + time. So we are calculating time by time + time + time + time + time. We can iterate over all the gigs and find the time by time + time + time + time + time.\n\nFor each venue, we can calculate the maxiumum time by time + time + time + time + time. Then we can iterate over all the gigs and calculate the maxiumum by time + time + time + time + time.\n\nIf we are calculating the maxiumum, we can calculate the maxiumum by maxing out the maxiumum for the previous step, and the minumum for the current step.\n\n'''\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 2') == '10'\nassert solution('3 3 2') == '-1'\nassert solution('3 3 3') == '-1'\nassert solution('10 2 2') == '-1'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 1\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"33\"\nassert solution(\"\"\"\n5 6 1\n3 1 10\n4 1 20\n5 1 50\n3 4 10\n\"\"\") == \"55\"\nassert solution(\"\"\"\n3 1 1\n1 2 10\n2 4 20\n2 5 20\n\"\"\") == \"50\"\nassert solution(\"\"\"\n3 1 1\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"20\"\nassert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''\n3\n20 20 20\n0 0\n30 30 30\n''') == '365'\nassert solution('''\n3\n20 20 20\n1 1\n30 30 30\n''') == '1829'\nassert solution('''\n3\n20 20 20\n0 0\n30 30 30\n''') == '1020'\nassert solution('''\n1\n1\n0\n''') == '1'\n'''\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '405'\nassert solution('4') == '1385'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n\"\n    \"20 15 10\\n\"\n    \"7 7\\n\"\n    \"30 0\\n\"\n) == \"405\"\nassert solution(\n    \"4\\n\"\n    \"2 1 1 1\\n\"\n    \"5 2 3\\n\"\n    \"7 5\\n\"\n    \"4 1\\n\"\n) == \"543\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n20 15 10\\n7 7\\n30 0') == '405'"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == \"405\"\nassert solution('1') == \"0\"\nassert solution('2') == \"0\""
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '405'\nassert solution('2') == '401'\nassert solution('2') == '401'\nassert solution('5') == '605'\nassert solution('5') == '605'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\n20 15 10\\n7 7\\n30 0\"\n    ) == \"405\""
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n20 15 10\n7 7\n30 0\n''') == \"405\"\nprint('check passed')\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n20 15 10\\n7 7') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n3 3\n1 3 2\n''') == '4'\nassert solution('''\n3\n3 7 8\n1 3\n3 4\n2 4\n''') == '18'\nassert solution('''\n3\n20 15 10\n7 7\n30 0\n''') == '405'\n'''\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"10 1 6\"\nassert solution(\"4\") == \"24 12 20\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.0'\nassert solution('''\n4\n4 3 1 7\n''') == '4 4 4 0.000000'\n'''\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 4 7\n''') == '28 4 21 14.0'\n\n'''\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 7') == '28 4 21 14.0'\nprint('Solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n1 2 4 7\n\"\"\") == \"\"\"28 4 21 14.0\"\"\", \"\"\"should return [28, 4, 21, 14.0]\"\"\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"\"\"8 5 5.0\"\"\", \"\"\"should return [8, 5, 5.0]\"\"\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"\"\"12 5 5.0\"\"\", \"\"\"should return [12, 5, 5.0]\"\"\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n1\n3 5\n''') == '12 4 17.0'\nassert solution('''\n3\n3 3 4\n''') == '36 4 12.0'\nassert solution('''\n5\n3 5 5 4 1\n''') == '54 21 12.0'\nassert solution('''\n3\n4 3 4\n''') == '42 4 14.0'\nassert solution('''\n5\n1 1 1 3 3\n''') == '1 1 4 1.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2 4 7\n''') == '28 4 21 14.0'\nassert solution('''4\n1 2 4 7\n''') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6 6 6'\nassert solution('1') == '2 2 2'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n4 2\n4 2\n3 2\n3 1\n4 1\n\"\"\") == \"28 4 21 14.0\"\n\nassert solution(\"\"\"\n7\n5 1\n5 1\n4 1\n4 1\n4 1\n4 1\n4 1\n\"\"\") == \"17 5 8 11.0\"\n\nassert solution(\"\"\"\n3\n7 3\n5 1\n6 2\n\"\"\") == \"10 6 2 14.0\"\n\nassert solution(\"\"\"\n4\n6 4\n5 3\n6 2\n\"\"\") == \"10 7 8 11.0\"\n\nassert solution(\"\"\"\n4\n2 3\n3 4\n2 1\n1 2\n\"\"\") == \"13 4 9 11.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n5 4 5\\n') == '4 4 1.0'\nassert solution('4\\n10 5 4 9 7\\n') == '28 4 21 14.0'\nassert solution('5\\n3 4 5\\n') == '4 4 1.0'\nassert solution('4\\n2 1 3\\n') == '3 3 1.0'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == 'yes\\n1 2 3 4\\n2 3 4 1'\n'''"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 2 3\n2 3 4 1\n''') == 'yes'\nassert solution('''\n2 3\n1 2 3\n2 3 4 1\n''') == 'no'\nassert solution('''\n3 3\n1 2 3\n2 3 4 1\n4 1 2 3\n''') == 'no'\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n'''\n\nimport itertools\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'''"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\n\nassert solution('''\n3 2\n1 2 3\n2 3 4\n3 4 1\n''') == 'no'\n\nassert solution('''\n4 4\n1 1 2 2\n2 2 4 4\n3 3 4 4\n4 4 1 2\n''') == 'no\\nno\\nno\\nno'\n\nassert solution('''\n2 2\n1 2 3\n2 3 4\n''') == 'yes\\n1 2 3\\n2 3 4'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 2 3 4') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2'\nassert solution('10 1\\n2 3 4 1 5 2 6 3 7 1\\n8 9 10 1 12 13 1 14 1\\n15 16 17 1 18 19 1 20 1\\n21 22 23 1 21 24 1 25 1\\n26 27 28 1 26 29 1 30 1\\n31 32 33 1 31 34 1 35 1\\n36 37 38 1 36 39 1 40 1\\n41 42 43 1 41 44 1 45 1\\n46 47 48 1 46 49 1 50 1\\n51 52 53 1 51 54 1 55 1\\n56 57 58 1 56 59 1 60 1\\n61 62 63 1 61 64 1 65 1\\n66 67 68 1 66 69 1 70 1\\n71 72 73 1 71 74 1 75 1\\n76 77 78 1 76 79 1 80 1\\n81 82 83 1 81 84 1 85 1\\n86 87 88 1 86 89 1 90 1\\n91 92 93 1 91 94 1 95 1\\n96 97 98 1 96 99 1 100 1\\n101 102 103 1 101 104 1 105 1\\n106 107 108 1 106 109 1 110 1\\n111 112 113 1 111 114 1 115 1\\n116 117 118 1 116 119 1 120 1\\n121 122 123 1 121 124 1 125 1\\n126 127 128 1 126 129 1 130 1\\n131 132 133 1 131 134 1 135 1\\n136 137 138 1 136 139 1 140 1\\n141 142 143 1 141 144 1 145 1\\n146 147 148 1 146 149 1 150 1\\n151 152 153 1 151 154 1 155 1\\n156 157 158 1 156 159 1 160 1\\n161 162 163 1 161 164 1 165 1\\n166 167 168 1 166 169 1 170 1\\n171 172 173 1 171 174 1 175 1\\n176 177 178 1 176 179 1 180 1\\n181 182 183 1 181 184 1 185 1\\n186 187 188 1 186 189 1 190 1\\n191 192 193 1 191 194 1 195 1\\n196 197 198 1 196 199 1 200 1\\n201 202 203 1 201 204 1 205 1\\n206 207 208 1 206 209 1 210 1\\n211 212 213 1 211 214 1 215 1\\n216 217 218 1 216 219 1 220 1\\n221 222 223 1 221 224 1 225 1\\n226 227 228 1 226 229 1 230 1\\n231 232 233 1 231 234 1 235 1\\n236 237 238 1 236 239 1 240 1\\n241 242 243 1 241 244 1 245 1\\n246 247 248 1 246 249 1 250 1\\n251 252 253 1 251 254 1 255 1\\n256 257 258 1 256 259 1 260 1\\n261 262 263 1 261 264 1 265 1\\n266 267 268 1 266 269 1 270 1\\n271 272 273 1 271 274 1 275 1\\n276 277 278 1 276 279 1 280 1\\n281 282 283 1 281 284 1 285 1\\n286 287 288 1 286 289 1 290 1\\n291 292 293 1 291 294 1 295 1\\n296 297 298 1 296 299 1 300 1\\n301 302 303 1 301 304 1 305 1\\n306 307 308 1 306 309 1 310 1\\n311 312 313 1 311 314 1 315 1\\n316 317 318 1 316 319 1 320 1\\n321 322 323 1 321 324 1 325 1\\n326 327 328 1 326 329 1 330 1\\n331 332 333 1 331 334 1 335 1\\n336 337 338 1 336 339 1 340 1\\n341 342 343 1 341 344 1 345 1\\n346 347 348 1 346 349 1 350 1\\n351 352 353 1 351 354 1 355 1\\n356 457 458 1 356 459 1 360 1\\n361 462 463 1 361 464 1 365 1\\n366 467 468 1 366 469 1 470 1\\n471 472 473 1 471 474 1 475 1\\n476 477 478 1 476 479 1 480 1\\n481 482 483 1 481 484 1 485 1\\n486 489 486 1 487 490 1 489 1\\n492 492 493 1 492 494 1 495 1\\n496 496 497 1 495 498 1 499 1\\n500 500 500 1 499 500 1\\n-----"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'yes\\n1 2 3 4 \\n2 3 4 1 \\n3 4 1 2 \\n4 1 2 3'\nassert solution('''2 5\n5 7 9\n3 6 8\n1 2 4\n4 5 6\n2 5 7\n4 3 6\n7 6 5\n8 6 3\n5 2 1\n3 7 4''') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'''\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 2 3 4\\n2 3 4 1') == 'yes\\n1 2 3 4\\n2 3 4 1'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.000000000\"\nassert solution(\"1\\n10 10 -10 -4 10\") == \"0.000000000\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n10 10 -10 -4 10''') == '10.0'\nassert solution('''1\n1''') == '0.0'\nassert solution('''3\n-10 -5 -1''') == '-2.0'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 10 -10 -4 10\") == \"10.000000000\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n-2 3\\n3 4\\n6 7\\n-10 10\\n10 -10 -4 -10 10') == '10.000000000'\nassert solution('5\\n-10 10\\n10 -10 -4 -10 10') == '0.0'\nassert solution('5\\n-10 10\\n10 -10 -4 -10 10\\n-5 -10\\n10 -10 -4 -10 10') == '0.0'\nassert solution('1\\n-2 3\\n3 4\\n6 7\\n-10 10\\n10 -10 -4 -10 10\\n10 -10 10\\n-5 -10\\n10 -10 -4 -10 10') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"10.000000000\"\nassert solution(\"1\") == \"0.000000000\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('4') == '0.000000000'\nassert solution('10') == '10.000000000'\n'''\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n10 10 -10 -4 10') == '10.000000000'\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0434\u043b\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438:\n\n\u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f, \u043d\u043e \u043e\u043d\u0430 \u043d\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0430. \u0412 \u043a\u0430\u043a\u043e\u043c \u0432\u0438\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430?\n\n\u041f\u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430\u043c \u043d\u0430 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043e\u0431\u043e\u0439\u0442\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u043c\u0430\u0441\u0442\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041a\u0430\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b?\n\n1. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n2. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n3. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n4. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n5. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n6. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n7. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n8. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n9. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n10. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n11. __init__() - \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u043b\u044f.\n\n12. __"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.0'\nassert solution('3') == '1.500000000000001'\nassert solution('4') == '2.000000000000004'\nassert solution('5') == '2.500000000000005'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('20') == '1.000000000'\nassert solution('100') == '10.000000000'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '1'\nassert solution('30') == '1'\nassert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('45') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n30\n3\n2\n45\n''') == '1'\n\nassert solution('''\n2\n20\n18\n''') == '4'\n\nassert solution('''\n2\n3\n8\n''') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4') == 1\nassert solution('10\\n15\\n30\\n40') == 2\nassert solution('100\\n200\\n300\\n400') == 4\nassert solution('1000000\\n2000000\\n3000000\\n4000000') == 6\nassert solution('1000000\\n2000000\\n3000000\\n4000000') == 6\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n1\n2\n2\n''') == '0'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('30') == '1'\nassert solution('3') == '0'\nassert solution('2') == '0'\nassert solution('45') == '0'\n'''\n\n'''\ncode\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('30') == '1'\nassert solution('45') == '2'\nassert solution('4') == '1'\nprint('\"Run\" is good. Great job!')\n\"\"\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n30\\n3\\n2') == '1'\nassert solution('4\\n30\\n3\\n2') == '2'\nassert solution('8\\n30\\n3\\n2') == '1'\nassert solution('4\\n30\\n3\\n2') == '2'"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n30\\n3\\n2') == '1'\nassert solution('4\\n30\\n3\\n2') == '1'\nassert solution('4\\n2\\n3\\n2') == '2'\nassert solution('10\\n999\\n5\\n10') == '9'"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.000000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 0.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"-0.000000000 -0.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"1.02037965897\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n4 5 1\\n1 5 1\\n2 5 5\\n3 5 1\\n1 5 3\\n3 5 3') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n4 5 1\\n1 5 1\\n2 5 5\\n3 5 1\\n1 5 3\\n3 5 3') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n4 5 1\\n1 5 1\\n2 5 5\\n3 5 1\\n1 5 3\\n3 5 3\\n4 5 3\\n5 6 8') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n4 5 1\\n1 5 1\\n2 5 5\\n3 5 1\\n1 5 3\\n3 5 3\\n4 5 3\\n5 6 8') == '0.000000000 1.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\n\nassert solution('''\n4 6 1\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\n\nassert solution('''\n4 6 1\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 -1.000000000'\n\nassert solution('''\n7 8 2.2\n1 1 1\n2 1 1\n3 1 2\n3 1 1\n4 1 2\n4 1 1\n5 1 3\n''') == '0.000000000 1.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2.0 0.66\\n2 4 8\") == \"0.360000000 0.000000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\"\nassert solution(\"4 5 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 -1.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 0.360000000\"\nassert solution(\"4 5 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 -1.360000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == '0.000000000 1.360000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == '0.000000000 1.000000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == '0.000000000 -1.000000000'\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == '1.02037965897'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 -1.000000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 0.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 -0.360000000'\n'''\nIn this example, the value obtained for each Flubber pipe is 0.36, and the value obtained for each water pipe is -0.36. However, we have three pipes that connect the same location, so that the value should be 0.000000000.\n\nWe have a Flubber factory, and a water source. The water source has a capacity of $1. The Flubber factory has a capacity of $3. The number of pipes is $n-1, with $1$ being the Flubber factory, $2$ being the water source, and $3$ being the FD. The pipes have capacities $1$, $1$, and $1$ respectively.\n\nFor each pipe, we have three parameters: the rate of Flubber in liters/second, the rate of water in liters/second, and the real value of $1$ ($v$). The Flubber and water are given as real values, and the real value of $a$ is a given constant. We have $3$ pipes, and the real values of $v$ and $a$ are given as real values and have an absolute error of $10^{-4}$.\n\nThe maximum value of $F^a \\cdot W^{1-a}$ is then the maximum value of $F^a \\cdot W^{1-a}$ for each pipe that can achieve the maximum value, given a value of $1$ for the Flubber and water pipes.\n\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n''') == '''0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n'''"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\"\nassert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n5 7 3\\n3 8 4\\n2 2 5\\n5 1 3\\n4 2 5\\n5 3 4\"\n                 \"\\n4 4 3\\n4 5 4\\n3 6 4\\n2 6 4\\n5 5 3\\n3 2 5\\n4 5 4\\n4 4 2\\n3 8 3\\n5 4 1\\n3 6 2\\n2 4 1\\n6 5 2\"\n                 \"\\n2 3 2\\n2 5 4\\n2 5 3\\n2 4 5\\n2 5 1\\n2 4 3\\n2 2 4\\n1 3 3\\n3 3 4\\n3 2 3\\n1 4 4\\n3 4 5\\n1 5 3\"\n                 \"\\n2 3 5\\n5 2 4\\n2 2 5\\n5 3 4\\n2 4 1\\n3 5 2\\n2 4 4\\n3 3 4\\n2 5 4\\n2 5 4\\n2 4 1\\n3 4 4\\n2 4 4\\n4 2 4\"\n                 \"\\n5 4 3\\n2 5 1\\n2 4 3\\n2 5 3\\n2 4 1\\n5 3 2\\n2 5 4\\n3 5 3\\n5 3 2\\n2 5 2\\n2 5 4\\n3 3 5\\n5 4 3\\n2 4 5\\n3 4 4\"\n                 \"\\n3 6 4\\n1 2 4\\n2 6 4\\n2 5 4\\n3 4 5\\n4 4 3\\n3 6 4\\n2 5 2\\n5 1 4\\n3 5 4\\n2 3 4\\n4 5 3\\n3 5 4\\n4 4 5\\n4 5 3\\n3 6 4\"\n                 \"\\n1 5 3\\n2 6 3\\n3 8 2\\n2 2 5\\n5 1 3\\n4 5 4\\n4 4 3\\n3 6 4\\n2 6 4\\n5 5 3\\n3 2 5\\n4 5 4\\n4 4 2\\n3 8 3\\n5 4 1\\n3 6 2\\n2 4 1\\n6 5 2\"\n                 \"\\n2 3 2\\n2 5 4\\n2 5 3\\n2 4 5\\n2 5 1\\n2 4 3\\n2 4 5\\n2 5 3\\n2 4 4\\n2 2 4\\n1 3 3\\n3 3 4\\n3 2 3\\n1 4 4\\n3 4 5\\n1 5 3\\n2 3 5\\n5 2 4\\n2 2 5\\n5 3 4\\n2 4 1\\n3 5 2\\n2 4 4\\n3 3 4\\n2 5 4\\n2 5 4\\n2 4 1\\n3 4 4\\n2 4 4\\n4 2 4\\n5 4 3\\n3 2 5\\n2 5 4\\n2 4 1\\n3 4 4\\n2 4 4\\n3"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 6 3.0 0.66') == '0.000000000 1.360000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\nassert solution('4 5 5') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n\"\"\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '4'\nassert solution(\"\"\"\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''\n5\n0 0\n1 1\n0 2\n3 3\n2 0\n''') == '3'\n'''\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '4'\n\nSample Input:\n5\n3 0\n1 2\n2 1\n0 0\n0 0\nSample Output:\n2"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == \"4\"\n\nSample Input:\n6\n-4 5\n2 -4\n-2 4\n0 0\n1 1\n2 2\n3 3\nSample Output:\n2\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 0\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n\") == \"4\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == \"4\"\nassert solution('''\n1\n-1\n0\n''') == \"2\"\nassert solution('''\n3\n1 1\n2 2\n3 3\n''') == \"2\"\n\n------------------or------------------\nimport sys\n\nn = int(input())\n\ncoor = list(map(int, input().split()))\n\nk = int(input())\n\ndata = list(map(int, input().split()))"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 0\\n0 1\\n0 2\\n0 3\\n\") == \"2\\n3 2\\n3 1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 0\\n0 1\\n0 2\\n0 3') == '2\\n3 2\\n3 1'\nassert solution('4 0\\n0 1\\n0 2\\n0 3\\n0 4\\n1 3') == '1\\n3 2'\nassert solution('4 0\\n0 1\\n0 2\\n0 3\\n1 3') == '2\\n3 1'\nassert solution('4 0\\n0 1\\n0 2\\n1 3\\n2 4') == '3\\n1 2'\nassert solution('4 0\\n0 1\\n0 2\\n1 3\\n2 4\\n3 5') == '1\\n3 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 0\n0 1\n0 2\n''') == '''2\n1 2\n'''\nassert solution('''\n5 0\n0 1\n0 2\n0 3\n0 4\n''') == '''2\n4 4\n'''\nassert solution('''\n10 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n0 10\n0 11\n0 12\n0 13\n0 14\n0 15\n0 16\n0 17\n0 18\n0 19\n0 20\n0 21\n0 22\n0 23\n0 24\n0 25\n0 26\n0 27\n0 28\n0 29\n0 30\n0 31\n0 32\n0 33\n0 34\n0 35\n0 36\n0 37\n0 38\n0 39\n0 40\n0 41\n0 42\n0 43\n0 44\n0 45\n0 46\n0 47\n0 48\n0 49\n0 50\n0 51\n0 52\n0 53\n0 54\n0 55\n0 56\n0 57\n0 58\n0 59\n0 60\n0 61\n0 62\n0 63\n0 64\n0 65\n0 66\n0 67\n0 68\n0 69\n0 70\n0 71\n0 72\n0 73\n0 74\n0 75\n0 76\n0 77\n0 78\n0 79\n0 80\n0 81\n0 82\n0 83\n0 84\n0 85\n0 86\n0 87\n0 88\n0 89\n0 90\n0 91\n0 92\n0 93\n0 94\n0 95\n0 96\n0 97\n0 98\n0 99\n0 100\n0 101\n0 102\n0 103\n0 104\n0 105\n0 106\n0 107\n0 108\n0 109\n0 110\n0 111\n0 112\n0 113\n0 114\n0 115\n0 116\n0 117\n0 118\n0 119\n0 120\n0 121\n0 122\n0 123\n0 124\n0 125\n0 126\n0 127\n0 128\n0 129\n0 130\n0 131\n0 132\n0 133\n0 134\n0 135\n0 136\n0 137\n0 138\n0 139\n0 140\n0 141\n0 142\n0 143\n0 144\n0 145\n0 146\n0 147\n0 148\n0 149\n0 150\n0 151\n0 152\n0 153\n0 154\n0 155\n0 156\n0 157\n0 158\n0 159\n0 160\n0 161\n0 162\n0 163\n0 164\n0 165\n0 166\n0 167\n0 168\n0 169\n0 170\n0 171\n0 172\n0 173\n0 174\n0 175\n0 176\n0 177\n0 178\n0 179\n0 180\n0 181\n0 182\n0 183\n0 184\n0 185\n0 186\n0 187\n0 188\n0 189\n0 190\n0 191\n0 192\n0 193\n0 194\n0 195\n0 196\n0 197\n0 198\n0 199\n0 200\n0 201\n0 202\n0 203\n0 204\n0 205\n0 206\n0 207\n0 208\n0 209\n0 210\n0 211\n0 212\n0 213\n0 214\n0 215\n0 216\n0 217\n0 218\n0 219\n0 220\n0 221\n0 222\n0 223\n0 224\n0 225\n0 226\n0 227\n0 228\n0 229\n0 230\n0 231\n0 232\n0 233\n0 234\n0 235\n0 236\n0 237\n0 238\n0 239\n0 240\n0 241\n0 242\n0 243\n0 244\n0 245\n0 246\n0 247\n0 248\n0 249\n0 250\n0 251\n0 252\n0 253\n0 254\n0 255\n''') == '''3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n4 0\n0 1\n0 2\n0 3\n\"\"\") == \"\"\"\n2\n3 2\n\"\"\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '3 2 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 0\\n0 1\\n0 2') == '2'\nassert solution('4 0\\n0 1\\n0 2\\n0 3') == '3 2'\nassert solution('5 0\\n0 1\\n0 2\\n0 3\\n0 4') == '3 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 0\") == \"2\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"0 2\") == \"3\"\nassert solution(\"0 3\") == \"3\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n0 1\\n0 2\\n0 3\") == \"2\\n3 2\\n\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '3 2\\n3 1'\nassert solution('''\n2 3\n2 1\n''') == '2 2'\nassert solution('''\n3 4\n0 1\n0 3\n0 2\n''') == '2 3'\nassert solution('''\n4 4\n0 1\n0 2\n0 3\n0 4\n''') == '4 3'\nassert solution('''\n6 5\n0 1\n0 2\n1 3\n3 2\n2 3\n2 4\n3 4\n''') == '1 3\\n1 2\\n1 3\\n2 3\\n2 4'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'ok'\nassert solution('3') == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\nassert solution(\n\"\"\"\n1\n0 0 0\n1 1 1\n\"\"\") == \"ok\"\nassert solution(\n\"\"\"\n1\n1 1 1\n\"\"\") == \"ok\"\nassert solution(\n\"\"\"\n3\n-100 -100 0\n-100 0 1\n-100 1 0\n\"\"\") == \"ok\"\nassert solution(\n\"\"\"\n6\n0 0 0\n0 1.5 0\n1.5 1.5 1.5\n1.5 0 0\n0 0 -1\n-1 -1 -1\n\"\"\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n1\n1 0 0\n    \"\"\"\n) == \"ok\"\nassert solution(\n    \"\"\"\n2\n0 0 0\n0 1.5 0\n    \"\"\"\n) == \"crash\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\"0 0 0\", \"0 1.5 0\"]) == \"ok\"\n\"\"\"\n\nfrom itertools import combinations\nimport math"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'ok'\nassert solution('0 0 0') == 'ok'\nassert solution('0 1.5 0') == 'ok'\nassert solution('0.5 0 0') == 'ok'\nassert solution('-0.1 0 0') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 0 0\n''') == 'ok'\nassert solution('''\n2\n1 1 0\n2 1 0\n''') == 'crash'\nassert solution('''\n4\n0 0 0\n0 1.5 0\n1 2.4 0\n1 3.3 0\n''') == 'crash'\nassert solution('''\n5\n0 0 0\n0 1.5 0\n1 2.4 0\n1 3.3 0\n1 4.5 0\n''') == 'crash'\nassert solution('''\n5\n0 0 0\n0 1.5 0\n1 2.4 0\n1 3.3 0\n1 4.5 0\n1 5.5 0\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '''\n    0 0 0\n    0 1.5 0\n    ''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n0 0 0\n0 1.5 0\n\"\"\") == \"ok\"\nassert solution(\"\"\"\n1\n-3.2 1\n\"\"\") == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'ok'\nassert solution('1 2 3 4') == 'ok'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '5'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == '2'\nassert solution('3 5') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4') == '2'"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '4'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '5'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nprint(solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n'''))\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"5 4\") == \"3\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '5'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5 2\nA B C\nD E F\n1 A E G\n2 G D E\n3 F C D\n''') == '1'\nassert solution('''\n10 20 5\nA B C\nD E F\nG H I J\nK L M N\nO P Q R S\nT U V W\nX Y Z\n''') == '5'\nassert solution('''\n5 6 3\nX Y Z\nA B C\nD E F\nG H I\nJ K L\nM N O\n''') == '1'\nassert solution('''\n10 1 2\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\n''') == '3'\nassert solution('''\n3 3 3\nA B\nC\nD\n''') == '3'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == '2'\nassert solution('5 3 5 3\\nA B C\\nD E F\\nG H I\\n3 A E G\\n3 A C E\\n3 B D F') == '1'\nassert solution('4 3 2 3\\nA B C\\nD E F\\n1 G H\\n3 A C E\\n3 B D F') == '4'\nassert solution('5 5 5 5\\nA B C\\nD E F\\nG H I\\n3 A E G\\n3 A C E\\n3 B D F') == '3'\nassert solution('2 2 2 2\\nA B C\\nD E F\\nG H I\\n3 A E G\\n3 A C E\\n3 B D F') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\nA B C\\nD E F\\n1 A E\\n2 B D\\n3 C E\\n3 C E\\n3 B D\\n') == '2'\n\n'''\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == \"2\"\nassert solution('''\n7 3 3 3\nA B C\nD E F\n1 A E G\n1 A C E\n1 B D F\n''') == \"3\"\nassert solution('''\n7 3 3 3\nA B C\nD E F\n1 A E G\n1 A C E\n1 B D F\n1 A D G\n''') == \"3\"\nassert solution('''\n7 3 3 3\nA B C\nD E F\n1 A E G\n1 A C E\n1 B D F\n1 A D G\n''') == \"4\"\n'''\nSample Input:\n13 3 3 3\nA B C\nD E F\n1 A E G\n1 A C E\n1 B D F\n1 A D G\n2 G E H\n2 F E H\n1 G H F\n1 E G F\n1 H E F\n1 H F G\n'''\n\n'''\nstdin = '''\n13 3 3 3\nA B C\nD E F\n1 A E G\n1 A C E\n1 B D F\n1 A D G\n2 G E H\n2 F E H\n1 G H F\n1 E G F\n1 H E F\n1 H F G\n'''"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('3 5 3 2') == '1'\n\"\"\"\nimport unittest"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\nassert solution('''\n1 1 1 1\nA\n''') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''5 1 5 3\nA\nB\nC\nD\nE\n''') == '1'\n\n\"\"\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n\nSample Input:\n7 6 6 6\nABCDEF\nABCDEF\nCDEFGH\nDEFGHI\nCDEFGJ\nEFGHIJ\nDEFGHJK\nABCDEFGHK\nSample Output:\n2"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\nYYY\nNYY\nYNY\n''') == '1 2 3'\nassert solution('''\n3\nYYY\nNYY\nYNY\n''') == '2 1 3'\n'''"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\nYYY\\nNYY') == '2\\n1 2 3\\n3 1 2'\nassert solution('3\\nYYY\\nNYY\\nYNY') == '3\\n1 2 3\\n3 1 2'\nassert solution('4\\nYYY\\nNYY\\nYNY\\nYNY') == '4\\n1 2 3\\n3 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '0'\nassert solution('20') == '1 1 2 2 3 3 4 4 5 5 5'\nassert solution('100') == '0 1 1 2 2 3 3 4 4 5 5 5'\nassert solution
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3\n    YYY\n    NYY\n    YNY\n    ''') == '1 2 3'\n\nassert solution('''\n    1\n    ''') == '0'\n\nassert solution('''\n    1\n    YYY\n    ''') == '2'\n''')\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\nYYY\\nNYY\\nYNY\") == \"2\\n1 2 3\"\nassert solution(\"3\\nYYY\\nNYY\\nYNY\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nY\nNY\nY\n''') == '1 2 3'\nassert solution('''\nY\nY\nYY\n''') == '2'\nassert solution('''\nY\nN\nY\n''') == '0'\nassert solution('''\nY\nN\nN\n''') == '2'\nassert solution('''\nY\nN\nY\n''') == '2'\n'''"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"Y\") == \"0\"\nassert solution(\"N\") == \"1\"\nassert solution(\"YYY\") == \"2\"\nassert solution(\"NYY\") == \"2\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nYYY\nNYY\nYNY\n''') == '1 2 3'\nassert solution('''\nYYY\nNYY\nYNY\n''') == '1 2 3'\n'''\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\n###############################################################################\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\nYYY\nNYY\nYNY\n\"\"\") == \"\"\"\n2 1 3\n3 1 2\n\"\"\", \"\"\"\n4\nYYY\nNYY\nYNY\n\"\"\")\n\nassert solution(\"\"\"\n8\nYYYYYY\nYYYYYY\nYYYYYY\nYYYYYY\nYYYYYY\nYYYYYY\nYYYYYY\nYYYYYY\n\"\"\") == \"\"\"\n2 3 2\n2 3 2\n2 3 2\n2 3 2\n2 3 2\n2 3 2\n2 3 2\n\"\"\", \"\"\"\n4\nYYYYYY\nYYYYYY\nYYYYYY\nYYYYYY\n\"\"\")\n\nassert solution(\"\"\"\n7\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\n\"\"\") == \"\"\"\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n\"\"\", \"\"\"\n4\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\nYYYYYYY\n\"\"\")\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\nx..\\n...\\n...\\n3\\n1 3\\n1 1\\n3 2') == '4 0 5'\nassert solution('10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10\\n10 10 10 10 10 10 10') == '40 0 40 40 40 40 40 40 40 40 40 40 40 40'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '5 0'\nassert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '5 0'\n'''"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r'''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == r'4\\n0\\n5\\n'\nassert solution(r'''\n2 4\nx..\n..x\n..x\n.x.\n.x.\n.x.\n''') == r'0\\n'\nassert solution(r'''\n10 3\nx..\n...\n...\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\nx..\n...\n''') == r'30\\n'\nassert solution(r'''\n10 3\nx..\n..x\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\nx..\n...\n''') == r'8\\n'\nassert solution(r'''\n10 3\nx..\n...\n...\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\n.x.\nx..\n...\n''') == r'0\\n'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"3 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\nx.x.x.\\nxxx.x.x.\\n') == '4'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\nx..\\nx..\\n\") == \"4\\n0\\n\"\nassert solution(\"3 3\\nx.x\\n...\\nx.x\\n\") == \"5\\n0\\n\"\nassert solution(\"3 3\\n...x\\n...x\\nx.x\\n\") == \"5\\n0\\n\"\nassert solution(\"2 1\\n1 2\\n3 1\\n\") == \"5\\n0\\n\"\nassert solution(\"2 2\\nx.x\\nx.x\\n\") == \"4\\n0\\n\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2''') == '4 0 5'\n\n\"\"\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == \"4\\n0\\n5\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == ''\nassert solution(\"1\") == ''\nassert solution(\"1 2\") == ''\nassert solution(\"1 2 3\") == '1.0'\nassert solution(\"1 2 3 4\") == '1.0'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4\\n0\\n5\\n\"\nassert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"0\\n\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n3\\n4\\n5 3') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\nassert solution('2\\n2\\n1\\n4\\n5\\n') == '2.000 -0.000\\n5.000 3.000'\nassert solution('2\\n2\\n1\\n4\\n3\\n') == '2.000 -0.000\\n3.000 3.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '3.100 4.100'\nassert solution('5') == '1.118 2.037'\nassert solution('3') == '4.114 -2.842'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n10\n3\n1 2\n6 7\n3\n6\n5 5\n5 7\n4 6\n1 5\n2 5\n5 1\n5 7\n3 5\n2 5\n''') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\nassert solution('''\n6\n3\n10\n2\n7\n1 6\n1 7\n9 2\n3\n10\n4\n3\n8\n7\n6\n2\n3\n3\n9\n5\n1\n4\n7\n3\n5\n2\n5\n5\n''') == '5.000 -0.784\\n6.297 -0.784\\n2.014 -0.784\\n3.000 -0.784\\n6.000 -0.784\\n5.000 3.000\\n5.000 1.000\\n'''\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == \"4.114 -2.842\"\nassert solution('''\n3\n5\n3\n4\n5 3\n''') == \"6.297 -0.784\"\n'''\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3.023 -1.823'\nassert solution('3') == '1.923 0.100'\nassert solution('4') == '5.000 2.000'\nassert solution('5') == '6.000 -0.784'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"4.114 -2.842\"\nassert solution(\"5\") == \"6.297 -0.784\"\nassert solution(\"10\") == \"8.000 -1.000\"\nassert solution(\"20\") == \"0.000 0.000\"\nassert solution(\"20\") == \"0.000 0.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"0.000\"\nassert solution(\"6\") == \"4.000\"\nassert solution(\"1\") == \"0.000\"\nassert solution(\"2.3\") == \"0.000\"\nassert solution(\"5.8\") == \"4.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\") == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nassert solution(\"10\\n40\\n60\\n80\\n100\\n120\\n140\\n160\\n180\\n200\") == \"8.841 -5.000\\n10.000 5.000\\n13.000 6.000\\n15.000 8.000\\n16.000 11.000\\n17.000 14.000\\n18.000 17.000\\n19.000 20.000\\n20.000 24.000\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0.006 -0.000\"\n\nassert solution(\"3\") == \"2.000 -0.000\"\n\nassert solution(\"4\") == \"2.000 0.000\"\n\nassert solution(\"5\") == \"3.000 0.000\"\n\nassert solution(\"6\") == \"5.000 -0.000\""
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\nassert solution('3') == '1.118 2.037'\nassert solution('2') == '4.114 -2.842'\nassert solution('2') == '4.114 -2.842'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"3\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"5\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"8\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"10\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n\") == \"13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n2 3 5 7\\n2\\n3\") == \"5\"\nassert solution(\"5 5\\n2 3 5 7\\n2\\n3\") == \"8\"\nassert solution(\"5 5\\n2 3 5 7\\n2\\n3\") == \"10\"\nassert solution(\"5 5\\n2 3 5 7\\n2\\n3\") == \"13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\n\nassert solution('''5 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '8'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 5\\n\"\n    \"2 3 5 7\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"8\\n\"\n) == \"13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2\n3\n5\n''') == \"6\"\n\nassert solution('''\n3\n1\n5\n''') == \"7\"\n\nassert solution('''\n10\n1\n1\n2\n2\n2\n3\n3\n3\n4\n4\n4\n5\n5\n6\n''') == \"8\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '13'\nassert solution('''\n5 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '8'\n\n'''\n\nfrom typing import List\nimport math"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8\") == \"3\\n5\\n8\"\nassert solution(\"4 5\\n2 3 5 7\\n3\\n5\\n6\\n8\") == \"5\\n8\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n4\\n8\\n10\\n13\") == \"10\\n13\"\nassert solution(\"4 5\\n2 3 5 7\\n2\\n4\\n8\\n10\\n13\") == \"10\\n13\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5 7\") == \"3\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"8\"\nprint('tests pass')"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '2'\nassert solution('4 5') == '3'\nassert solution('2 3') == '5'\nassert solution('2') == '3'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5\n''') == '0'\n\nassert solution('''\n7 2\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n1 6\n''') == '4'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 3') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0'\nassert solution('0 1\\n') == '1'\nassert solution('1 2\\n') == '1'\nassert solution('2 3\\n') == '2'\nassert solution('2 4\\n') == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 3\n2 4\n''') == '0'\n\nassert solution('''\n3\n0 1\n0 2\n2\n''') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"0\"\nassert solution(\"5 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"1\"\nassert solution(\"5 6\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"2\"\nassert solution(\"5 7\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"2\"\nassert solution(\"5 8\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\") == \"2\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '0'\nassert solution('6 4\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '2'\nassert solution('6 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '3'\nassert solution('6 5\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '1'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n\"\n) == \"106\\n107\\n71\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"106\\n107\\n71\"\nassert solution(\"3 1\\n1 1 5 C1 L1 C1 U1 C1\") == \"106\\n107\\n71\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '106'\nassert solution('1 1 5 C1 L1 C1 U1 C1') == '107'\nassert solution('70 3 1 C1') == '71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1') == '106'\nassert solution('6 1') == '106'\nassert solution('7 1') == '107'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\nassert solution(\n    '3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\nassert solution(\n    '3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\nassert solution(\n    '3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\nassert solution(\n    '3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '106\\n107\\n71\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1\\n') == '106\\n107\\n71\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n8 3 5 C1 L1\n3 4 5 C1 L1\n3 5 C1\n\"\"\") == \"107\"\nassert solution(\"\"\"\n3 3\n8 3 5 C1 L1\n3 4 5 C1 L1\n3 5 C1\n\"\"\") == \"107\"\nassert solution(\"\"\"\n2 3\n1 2 5 C1 L1\n3 4 5 C1 L1\n\"\"\") == \"107\"\nassert solution(\"\"\"\n2 3\n1 2 5 C1 L1\n3 4 5 C1 L1\n\"\"\") == \"107\"\nassert solution(\"\"\"\n3 3\n1 2 5 C1 L1\n3 4 5 C1 L1\n3 5 C1\n\"\"\") == \"107\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '106'\nassert solution('1 1 5 C1 L1 C1 U1 C1') == '107'\nassert solution('70 3 1 C1') == '71'"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n5 2 5 L1 C1 C1 U1 C1\n1 1 5 C1 L1 C1 U1 C1\n70 3 1 C1\nSample Input 2:\n1 1\n1 1 2 C1 L1 C1\nSample Output 2:\n0\n''') == '107\\n'"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 5 C1 L1 C1 U1 C1') == '106'\nassert solution('1 1 5 C1 L1 C100 U1 C1') == '107'\nassert solution('3 1') == '71'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"A\") == 1\nassert solution(\"AA\") == 2\nassert solution(\"AAAA\") == 8\nassert solution(\"AAAAA\") == 17\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AA\") == \"51\"\nassert solution(\"BAA\") == \"6\"\nassert solution(\"BAB\") == \"6\"\nassert solution(\"BAC\") == \"6\"\nassert solution(\"BCC\") == \"13\"\n\"\"\"\n\n\"\"\"\n---SOLUTION---\nwe can use the fact that if we start from the first letter, and the last letter of the substring, and the palindrome can be made from the middle letters of the string, then it is easy to see that we can use the same logic for palindromic subsequences of any length.\n\nSince we already know that the number of palindromic subsequences of length $2N$ that contain $S$ as a subsequence is $0$ or more, we can create a table $O(2N)$ and store these in a dictionary.\n\nInitialize $odds = 0$.\n\nIterate through all characters in $S$.\n\nIf the current character is a letter, $odds$ would simply increase by 1.\n\nElse, if the current character is an underscore,\nthen we know that we have two cases. We can either have an odd number of even characters or an even number of odd characters.\n\nWe check if the odds number is even. If so, we decrement odds by one and we multiply the odds by 4.\n\nElse, we check if the odds number is odd. If so, we increment odds by one and we multiply the odds by 2.\n\nWe need to make sure that we are only using a single reference to the odds, which would be useful for the palindromic subsequences that are not palindromic.\n\nOnce we are done with all the characters in $S$, we update the odds by subtracting the total odd number from the total odd number.\n\n\"\"\"\n\nn = int(input())\ns = input()\nodds = 0\n\nfor i in range(len(s)):\n    if s[i].isalpha():\n        odds += 1\n    else:\n        if s[i] == \"_\":\n            if odds % 2 == 0:\n                odds -= 1\n            else:\n                odds += 1\n\nodds *= 4\nodds %= 10**9 + 7\nprint(odds)"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"51\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(open('input.txt', 'r').read()) == '51'\n\nimport math\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AA') == 51"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AA') == '51'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AA') == '51'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AA') == '51'\nassert solution('AAB') == '51'\nassert solution('AAAA') == '51'\nassert solution('AAAAAA') == '51'\nassert solution('AAAAAAA') == '51'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"A\") == \"1\"\nassert solution(\"AA\") == \"51\"\nassert solution(\"AAAA\") == \"20\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AA') == '51'\nprint(solution('AA'))\n\"\"\"\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n\nassert solution('''\n4 6\n1 5\n2 3\n8 6\n''') == '0'\n\nassert solution('''\n3\n1 5\n3 2\n4\n''') == '2 3'\n\nassert solution('''\n6\n8 5\n4 3\n1 2\n7 6\n''') == '1 2'\n\nassert solution('''\n1\n2 1\n2 1\n1\n''') == '1'"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n\nassert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 3'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '2 1'\n\nassert solution('''3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '2 1'\n\nassert solution('''7 10\n2 9\n5 1\n2 9\n1 2\n5 8\n1 1\n6 7\n''') == '1 1'\n\nassert solution('''3 5\n2 1\n3 5\n3 5\n1 2\n''') == '1 1'\n\nassert solution('''5 2\n2 3\n3 2\n2 4\n2 2\n4 1\n''') == '4 2'"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\nassert solution('3\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\nassert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63') == '1'\nassert solution('3\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63') == '2'\nassert solution('3\\n2 5 1 5\\n1 4 2 3\\n1 2 2 3') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"no ties\", \"No ties\"\nassert solution(\"1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n\nassert solution('''\n5 4 5 5 5\n1 2 3 4 5\n2 2 1 2 3\n2 1 2 3 4\n3 2 1 2 4\n2 1 2 3 4\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71\\n') == '1 2'\nassert solution('2\\n14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\\n') == '1 2'\nassert solution('2\\n23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68\\n') == '1 2'\n\n\"\"\"\n\nimport itertools\nfrom collections import defaultdict\nfrom math import sqrt\n\nfrom test_utils import IterativeThinkingMachine\nfrom utils import print_table\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\nprint(solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71'))\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n2\n2 3 4 5 6\n9 8 7 6 5\n''') == '9 8'\nassert solution('''\n1\n3 5 7\n8 9 10\n''') == '3 9'\n'''\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\n\nprint(solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n'''))\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4\n1 2 3\n1 2\n1 1\n4 5\n3 3 3 1 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n7\n4 3 2 1\n1 1 2 2\n1 1 3 1\n1 1 3\n2 3 1 1\n3 3 1 2\n3 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6\n3 3 2 1\n1 1 2 2\n1 1 3 1\n1 1 3\n1 2 2 1\n1 2 1 1\n1 2\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n4 3 2 1\n1 1 2 2\n1 1 3\n1 1\n1 2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n1 2 3\n1 2\n1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1\\n1 1\\n1 1\\n\") == \"1\", \"Test #1 Failed\"\nassert solution(\n    \"2\\n2 3\\n3 1\\n\") == \"0\", \"Test #2 Failed\"\nassert solution(\n    \"3\\n2 3\\n1 2\\n\") == \"2\", \"Test #3 Failed\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('3\\n1 2 3\\n2 3 1\\n3 1 2') == '3'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '0'\nassert solution('''3\n3 2 1\n1 2 3\n1 2 3''') == '1'\n''')\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n2 1\n3\n1 2 3''') == '0'\nassert solution('''5\n3 4 2 1\n4 3 2 3 1\n5 3 3 5 3 1\n1 2 3 4\n1 1 1 1''') == '0'\nassert solution('''2\n2 2\n2 1\nSample Output:\n1\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\n\nSample Input:\n1\n1\n1\nSample Output:\n1\n'''\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '0.428571428571'\nassert solution('6 2 3') == '0.285714285714'\nassert solution('10 2 3') == '0.217142857143'\nassert solution('16 3 4') == '0.0684931506849'"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\") == \"0.4\\n0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n') == '0.4\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n\") == \"0.4\\n0\"\nprint(solution(\"2\\n3 4 2\\n1 4 3\\n2 3 4\\n\"))\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n10 2 3\\n16 3 4\\n') == '0.171428571429'\nassert solution('6\\n2 3\\n3 4\\n') == '0.2'\nassert solution('2\\n3 4\\n') == '0.071428571429'"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n4 2 3\") == \"0.8\\n0.2\\n\"\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0'\nassert solution('''\n5\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n18 4 5\n''') == '0.243902439024'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0.2'\nassert solution('10 2 3') == '0.171428571429'\nassert solution('16 3 4') == '0.228571428571'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2 3\\n6 2 3') == '0.2\\n0'\n\"\"\"\nfrom math import factorial, gcd, sqrt"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.4'\nassert solution('2') == '0'\nassert solution('5') == '0.2'\nassert solution('6') == '0.171428571429'"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\n\nassert solution('''\n6\n4 5\n-2 3\n-1 -6\n3 4\n5 5\n-1 -6\n''') == '4 + 5 = 9\\n-2 * 3 = -6\\n-1 - -6 = 5\\n3 * 4 = 12\\n5 * 5 = 30\\n-1 - -6 = 5'\n\nassert solution('''\n3\n1 5\n3 3\n4 5\n-1 -6\n''') == 'impossible'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 5\\n2 3\") == \"1 + 5 = 6\\n3 * 3 = 9\"\nassert solution(\"3\\n3 3\\n4 5\") == \"3 * 3 = 9\\n4 - 5 = -1\"\nassert solution(\"4\\n-1 -6\\n-3 -2\\n1 3\") == \"-1 - -6 = 5\\n1 + 3 = 4\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1 = 1\"\nassert solution(\"3 3\") == \"3 * 3 = 9\"\nassert solution(\"4 - 5\") == \"4 - 5 = -1\"\nassert solution(\"-1 - 6\") == \"5 = -1\"\nassert solution(\"1\") == \"impossible\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == \"1 + 5 = 6\"\nassert solution(\"3 3\") == \"3 * 3 = 9\"\nassert solution(\"4 - 5\") == \"4 - 5 = -1\"\nassert solution(\"-1 - 6\") == \"5 - -6 = 1\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1'\nassert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == 'impossible'"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n3 4 5\\n4 5 6\\n') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1'\nassert solution('4\\n-1 - 6\\n5\\n3 3\\n') == '-1 - -6 = 5\\n5 * 3 = 15\\n3 * 3 = 9'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 5\n3 3\n4 5\n-1 -6\n''') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\\n'\nassert solution('''\n2\n-2 5\n3 3\n4 5\n-1 -6\n''') == 'impossible\\n'\nassert solution('''\n1\n-2 5\n3 3\n4 5\n-1 -6\n''') == 'impossible\\n'\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n-5 3\n1 -4\n-3 -1\n-6 4\n''') == '-5 * -3 = -45\\n3 * 3 = 9\\n1 -4 = -4\\n-3 -1 = -2\\n-6 4 = -4\\n'\nassert solution('''\n2\n-1 -2\n1 -3\n3 -4\n''') == 'impossible\\n'\nassert solution('''\n5\n-5 3\n1 -4\n-3 -1\n-6 4\n-3 -1\n''') == '-5 * -3 = -45\\n3 * 3 = 9\\n1 -4 = -4\\n-3 -1 = -2\\n-6 4 = -4\\n-3 -1 = -2\\n'\n'''\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('3\\n1 5\\n3 3\\n4 5\\n-1 -6') == '1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5'\nassert solution('2\\n1 5\\n3 3\\n4 5\\n-1 -6') == 'impossible'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\"\nassert solution(\"5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\") == \"4\\n1\\n4\\n6\\n0\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1\\n') == '4\\n1\\n4\\n6\\n0'\nassert solution('8 2\\n1 2\\n3 2\\n4 2\\n4 4\\n4 4\\n4 4\\n4 4\\n') == '0\\n1\\n4\\n4'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0\\n'\nassert solution('4 3') == '0\\n1\\n4\\n6\\n0\\n'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '4'\nassert solution('1 2') == '0'\nassert solution('1 4') == '1'\nassert solution('6 8') == '0'\nassert solution('5 2') == '4'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '4\\n1\\n4\\n6\\n0'\nprint('Solution: {}'.format(solution(*(list(map(int, stdin.split()))))))\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\nassert solution('5 3\\n5 2\\n3 2\\n5 5\\n2 5\\n1 2\\n3 4\\n4 4\\n1 1\\n3 3') == '1\\n4\\n1\\n3\\n3'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"4 4\") == \"3\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"4\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"5 5\") == \"8\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1 8\\n0\\n2 3\\n4\\n'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('4 5 6') == '4'\nassert solution('-10 3 -2 -9 -8 -7') == '2'"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('5\\n1 2 3 5') == '14'"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('10\\n1 2 3 5 6 7 8 9 10') == '54'\nprint('Congratulations! All test cases passed!')\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 2\n1 3\n3 1\n''') == '1'\nassert solution('''\n3\n2 4 3\n1 2 3\n1 3 2\n''') == '2'\nassert solution('''\n3\n-1 -1 1\n2 3 4\n2 3 4\n1 -1 -1\n''') == '0'\nassert solution('''\n5\n-3 -3 1 -2 -1\n-4 -4 -2 -4 1\n-5 -5 4 4 4\n-4 -4 1 1 2\n-3 -3 1 -2\n''') == '3'\nassert solution('''\n10\n-5 -5 -2 -2 -4 -4 -4 -5 -5 -6 -6 -6 -7 -7 -7 -8 -8 -8 -9 -9 -9 -10 -10\n-9 -9 -8 -8 -7 -7 -6 -6 -5 -5 -4 -4 -3 -3 -2 -2 -1 -1 -1 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0\n-0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -0 -"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"4\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 2 3 4') == '4'\nassert solution('4 2 3 1 4') == '6'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '4'\nassert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n3\n2 1 3\n''') == '3'\nassert solution('''\n3\n2 2 2\n''') == '1'\nassert solution('''\n3\n2 3 1\n''') == '2'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 31 2\n20 60\n50 90\n\"\"\") == \"4 3\"\nassert solution(\"\"\"1 16 2\n20 60\n50 90\n\"\"\") == \"0 0\"\nassert solution(\"\"\"1 12 2\n20 60\n50 90\n\"\"\") == \"5 3\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 32 2\\n20 60\\n50 90') == '4 3'\nassert solution('1 33 2\\n20 60\\n50 90') == '2 3'\nassert solution('1 34 2\\n20 60\\n50 90') == '1 3'\nassert solution('1 35 2\\n20 60\\n50 90') == '1 2'\nassert solution('1 36 2\\n20 60\\n50 90') == '2'\n\n'''"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '5 5'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '2 3'\nassert solution('50 90') == '2 3'\n\nn, t, m = [int(x) for x in stdin.split()]\n\noutput = []\n\nfor i in range(m):\n    a, b = [int(x) for x in stdin.split()]\n    if b > t:\n        output.append(a)\n    if b <= t:\n        b = t\n    if a < b:\n        b = a\n    if a == b:\n        output.append(a)\n\nprint(len(output) - len(set(output)))\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 31 2\\n20 60\") == \"3 2\"\nassert solution(\"1 80 8\\n10 40\") == \"6 4\"\nassert solution(\"1 40 20\\n2 50\") == \"3 1\"\nassert solution(\"10 10 10\\n0 1\") == \"10 10\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3 4'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 31 2') == '4 3'\nassert solution('20 60') == '4 3'\nassert solution('50 90') == '6 5'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 20 2\") == \"4 3\"\nassert solution(\"20 60\") == \"1 7\"\nassert solution(\"20 60 50\") == \"1 7\"\n\"\"\"\nfrom collections import deque\n\nn, t, m = map(int, input().split())\ncheerleaders = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    cheerleaders.append((a, b))\n\ncheerleaders = sorted(cheerleaders, key=lambda x: x[0])\ncheerleaders = sorted(cheerleaders, key=lambda x: x[1])\n\ncheerleaders = deque(cheerleaders)"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 20 2\n20 60\n50 90\n''') == '4 3'\n\nassert solution('''\n1 30 2\n20 60\n50 90\n''') == '3 4'\n\nassert solution('''\n1 20 2\n20 50\n50 60\n''') == '1 0'\n\nassert solution('''\n1 20 2\n20 50\n50 60\n''') == '0 1'\n\nassert solution('''\n1 20 2\n20 60\n50 90\n''') == '1 0'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n2 1\n''') == '1 3\n\nassert solution('''\n1 1\n1 1\n''') == '0 2\n\nassert solution('''\n1 1\n''') == '0 2\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '0'\nassert solution('2 1 1') == '1'\nassert solution('2 2 1') == '2'\nassert solution('3 2 1') == '3'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('2 2 2') == '0'\nassert solution('1 1 1') == '1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 1\n3 2 2\n3 2 3\n3 1 3\n2 1 2\n2 1 3\n3 2 2\n3 2 2\n2 2 3''') == '5'\nassert solution('''8 1 3\n8 2 2\n8 3 1\n7 5 2\n2 8 1\n2 8 3\n7 6 2\n4 7 5\n4 6 2\n3 6 2\n4 6 1''') == '5'\nprint(solution('''2 2 1\n2 2 2\n2 2 3\n2 1 3\n3 1 3\n3 2 2'''))\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''1 1 2''') == '2'\nassert solution('''1 2 2''') == '1'\nassert solution('''2 2 2''') == '0'\nassert solution('''1 2 3''') == '0'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 1') == '3'\n\nassert solution('3 2 1') == '6'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"3\"\nassert solution(\"2 2 1\") == \"6\""
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''5 5 1''') == '10'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2 1\n2 2 2\n3 2 1\n''') == '3'\nassert solution('''2 2 1\n2 2 3\n3 2 2\n''') == '7'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"2 2 2\") == \"6\"\nassert solution(\"2 1 0\") == \"2\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('5 3 2') == '7'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1341 2412 1200 3112 2391\n\"\"\") == \"3 1\"\nassert solution(\"\"\"4\n1\n\"\"\") == \"1 2\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10\n1000000 99999 88888 7777 6666 4444 3333 2222 1\n\"\"\") == '3 1'\n\nassert solution(\"\"\"\n10\n99999999 999999 988888 77777 66666 44444 3333 2222 1\n\"\"\") == '1 3'\n\nassert solution(\"\"\"\n5\n999999 999999 98888 7777 6666 4444 3333 2222 1\n\"\"\") == '3 1'"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1341\\n2412\\n1200\\n3112\\n2391\\n') == '3 1'\nassert solution('2\\n1341\\n12\\n') == '0 2'\n\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\\n\"\n    \"4\\n\"\n    \"3\\n\"\n    \"0 1 2 3\"\n) == \"1 1 1 3\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1341 2412 1200 3112 2391\nSample Input:\n8\n7 7 7 7 7 7 7 7\nSample Output:\n4 1\n\"\"\") == \"\"\"3 1\"\"\"\nassert solution(\"\"\"\n3\n1518 2032 1356 986 2244 667 552 778\nSample Output:\n1 2\n\"\"\") == \"\"\"2 1\"\"\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\n1000\n1500\n2000\n1700\n1750\n1850\n1910\n1950\n1950\n2080\n2180\n2150\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2170\n2180\n2"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'\nassert solution('5\\n1 1 1 1 1') == '3 1'\nassert solution('5\\n1 1 1 1 1\\n1 1 1 1 1') == '3 1'\nassert solution('5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '3 1'\nassert solution('5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1') == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '2 1'\nassert solution('10') == '4 1'\nassert solution('8') == '3 2'\nassert solution('13') == '2 4'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1341 2412 1200 3112 2391\") == \"3 1\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"1 1\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 20') == '6'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '5'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '0'\nassert solution('10 20\\n5 3\\n1 1 1\\n1 3 1\\n1 1 1\\n1 3 2\\n2 3 2\\n2 4 4\\n') == '13'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 20') == '6'\nassert solution('3 5') == '10'\nassert solution('1 3 7') == '3'\nassert solution('2 1 1') == '1'\nassert solution('2 3 2') == '3'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\"\n) == \"6\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 20') == '6'\nassert solution('15 50') == '5'\n\"\"\""
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n3\\n5\") == \"2\"\nassert solution(\"10\\n20\") == \"5\"\nassert solution(\"3\\n5\\n7\") == \"2\"\nassert solution(\"3\\n5\\n6\") == \"0\"\nassert solution(\"3\\n5\\n6\\n7\") == \"0\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 20') == '6'\nassert solution('30 10') == '15'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 10\\n2 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"2 ab b 1\") == \"0 1\"\nassert solution(\"2 ab b 1 2\") == \"0 1\"\nassert solution(\"2 ab b 1 2 3\") == \"0 1\"\nassert solution(\"2 ab b 1 2 3 4\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 ab b') == '0 1 -1'\nassert solution('1 b') == '-1 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 ab b\") == \"0 1\"\nassert solution(\"1 b\") == \"-1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1\\n-1 0'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 ab b') == '0 1'\nassert solution('1 b') == '-1 0'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 ab b\\n1 b\\n') == '0 1 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0 1\"\nassert solution(\"\"\"\n5 ab a b\n3 b\n\"\"\") == \"0 0 0 0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '0 1'\nassert solution('''\n2 ab\n1 b\n''') == '-1 0'\nassert solution('''\n2 ab\n1 b\n''') == '0 1'\nassert solution('''\n1\n''') == '0 -1'\nassert solution('''\n0\n''') == '0 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 ab b\\n1 b') == '1 0'\nassert solution('2 ab b\\n1 b') == '1 1'\nassert solution('3 ab b\\n1 b') == '1 -1'\nassert solution('4 ab b\\n1 b') == '1 1'\nassert solution('5 ab b\\n1 b') == '1 -1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 1\\n-1 -1\\n0 1\\n-1 0\\n0 -1\\n-1 -1\\n1 0\\n0 -1\\n-1 0\\n-1 -1\\n0 -1\\n0 -1\\n-1 -1'"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 1 2\n1\n1 1 2\n2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n1\n1 1 2\n2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n1 1 2\\n2') == '3'\nassert solution('2 4\\n1 1 2\\n2') == '8'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1\\n3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4\n1 1 2\n2''') == '1'\nassert solution('''2 4\n1 1 2\n2\n''') == '3'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2\\n2') == '1'\nassert solution('2\\n1 1 2\\n2') == '3'\nassert solution('2\\n1 1 2\\n2\\n2') == '6'\nassert solution('2\\n1 1 2\\n2\\n2\\n2') == '6'\nprint('all tests passed')\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1\\n3'\nassert solution('2') == '2\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 1 2') == '0.5\\n3'\nassert solution('1 2\\n1 1 2') == '0.5\\n4'\nassert solution('1 2\\n2 1 2') == '0.5\\n4'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"1\\n3\"\n\"\"\"\nTask\n\nYou are given a string S of length N consisting of lowercase English alphabets.\n\nYour task is to write a program to check if the string is a palindrome or not.\n\nConstraints\n\n1 <= N <= 10^5\n\nThe string is guaranteed to be a palindrome.\n\nInput Format\n\nFirst line contains the length of the string S.\n\nSecond line contains the string S.\n\nOutput Format\n\nPrint True or False.\n\nSample Input\n\n6\naba\nSample Output\n\nTrue\nExplanation\n\nThe string aba is a palindrome.\n\"\"\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n1 1 2\n2\n
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input) == \"1\\n3\"\nassert solution(other_sample_input) == \"0.666667\\n1.0\"\nassert solution(mine_input) == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 5 2\\n5 0 4\\n2 4 0') == '7'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n0 5 2\n5 0 4\n2 4 0''') == '7'\n\"\"\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n2\\n3\") == \"3\", 'Case not handled'\nassert solution(\n    \"4\\n2 4\\n2 4\\n2 4\\n2 4\") == \"7\", 'Case not handled'\nassert solution(\n    \"1\\n4\\n3\\n4\\n5\") == \"5\", 'Case not handled'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n10\n2\n5\n0 4\n5 0 4\n2 4 0\n''') == '10'\n\n'''\n1\n10\n0\n0\n5\n0\n4\n2\n0\n4\n0\n5\n2\n'''\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n5 2\n5 0 4\n2 4 0\n''') == '7'\n\nassert solution('''\n5\n3 1 2\n2 0 1\n1 3 2\n0 3 2\n3 2 1\n''') == '4'\n\nassert solution('''\n6\n6 4 5 0 1 1\n5 5 4 0 1\n4 0 2 3 1\n0 0 1 2 2\n1 2 3 3\n3 3 1 0\n''') == '10'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1,2,3') == '1,3,2,1,3,2,1'\nassert solution('5,0,4') == '5,0,4,0,4,0,0,4,0,4'\nassert solution('3,2,1') == '3,2,1,3,2,1,3,2,1'\nassert solution('5,4,3') == '5,3,2,1,3,2,1,3,2,1'\nassert solution('5,4,1') == '5,1,3,2,1,3,2,1,3,2,1'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0 5 2\\n5 0 4\\n2 4 0\\n') == '7'\nassert solution('5\\n0 5 2\\n5 0 4\\n2 4 0\\n') == '7'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\nassert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\n'''"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 2 5\\n5 0 4\\n2 4 0\\n') == '7'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('1234567891011121314151617181920212223242526272829') == '9'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('13') == '3'\nassert solution('110111') == '3'\n\"\"\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('13') == '5'\nassert solution('1010') == '9'\nassert solution('1000000000000') == '2'"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1099511627776') == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('14') == '8'\nassert solution('123456789') == '8'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '1'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('-9') == '0'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10000000000000000000000000000\") == \"8\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"8\"\nassert solution(\"1000000000000000\") == \"1200000000000000\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input().strip()) == '8'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('\\n'.join(['x..', 'x.', 'x.x'])) == '2'\nassert solution('\\n'.join(['x..', 'x.', 'x..'])) == '1'\nassert solution('\\n'.join(['x.x', 'x.', 'x..'])) == '1'\nassert solution('\\n'.join(['x.x', 'x.', 'x.x'])) == '2'\nassert solution('\\n'.join(['x.x', 'x..', 'x.'])) == '3'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nxx\") == \"1\"\nassert solution(\"5 5\\n.x.\\n.x..\") == \"4\"\nassert solution(\"4 4\\nxx.\\n.x.\") == \"2\"\nassert solution(\"100 100\\nx.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\\nx.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n.x.\nx.x\nx.x''') == '2'\n\n\nassert solution('''3 3\n.x.\nx.x\nx.x''') == '1'\n\n\nassert solution('''3 3\n.x.\nx.x\nx.x''') == '0'\n\n\nassert solution('''3 3\nx..\nx.x\nx.x''') == '1'\n\n\nassert solution('''5 5\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\nx.x\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3 3\n    x..\n    .x.\n    x.x\n    ''') == \"2\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 3\\nx..\\n.x.\\nx.x') == '2'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 1') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == \"2\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n.x.\nx.x\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6 7\n.xx.\n...x\n.xx.\n...x\n...x\nx..x\nx.x.\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n.x.\\nx.x\") == \"2\""
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"\"\"9\n5\n6\n-1\n\"\"\".strip()\n\nassert solution(\"\"\"\n7\n0 1 1\n1 2 2\n2 3 3\n3 4 4\n4 5 5\n5 6 6\n6 7 7\n\"\"\") == \"\"\"16\n16\n16\n16\n16\n16\n-1\n\"\"\".strip()\n\nassert solution(\"\"\"\n8\n0 2 2\n1 3 2\n2 4 1\n3 5 0\n4 6 4\n5 7 4\n6 8 2\n7 9 0\n\"\"\") == \"\"\"31\n31\n31\n31\n31\n31\n31\n31\n\"\"\".strip()\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '9\\n5\\n6\\n'\nassert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n') == '9\\n5\\n6\\n'\nprint('SUCCESS')\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\nassert solution('''4\n1 2 1\n1 3 3\n1 4 4\n1 5 5\n''') == '1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    5\n    1 3 2\n    2 5 2\n    3 0 0\n    4 2 4\n    5 3 0\n''') == '9'\nassert solution('''\n    10\n    2 5 2\n    3 0 0\n    4 2 4\n    5 3 0\n    6 7 5\n    7 0 0\n    8 4 4\n    9 0 0\n    10 2 2\n''') == '5'\nassert solution('''\n    6\n    2 5 2\n    3 0 0\n    4 2 4\n    5 3 0\n    6 7 5\n    7 0 0\n    8 4 4\n    9 0 0\n    10 2 2\n''') == '6'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\nassert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '-1'\n''')\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '9'\nassert solution('''\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '-1'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '9 -1\\n5 6\\n'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"9\\n-1\"\nassert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"6\\n5\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_lines) == '9\\n5\\n6\\n-1'\nassert solution(input_lines) == '-1'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\n\"\"\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"91\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '91'\nassert solution('4') == '63'\nassert solution('5') == '91'\n\"\"\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\"\n) == \"91\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n3 1 95 100 50 20\n2 1 95 100 50 20\nSample Input 2:\n10\n1 1 4 1 6 5 7 3 5 3 3 6 2 3\nSample Output 2:\n45\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1 1 40 30 20 10') == '91'\nassert solution('3\\n1 1 40 30 20 10\\n3 1 95 95 95 10\\n2 1 95 50 30 20') == '112'\nassert solution('1\\n2 1 100') == '100'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\nassert solution('''\n1\n1 1 40 30 20 10\n''') == '40'\nassert solution('''\n1\n2 1 95 50 30 20\n''') == '95'\n'''"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '91'\nassert solution('2') == '90'\nassert solution('3') == '92'\nassert solution('3') == '92'\nassert solution('2') == '90'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\"\"\") == \"91\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '15'\nassert solution('3') == '10'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1\\n2 1\\n0') == '17'\nassert solution('5\\n2 1\\n2 1\\n0\\n0') == '5'\nassert solution('5\\n4 1\\n5 2\\n5 3\\n5 4\\n5 5') == '16'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '15'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 2 1 2 2\\n0 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n') == '11'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '15'\nassert solution('2') == '20'\nassert solution('3') == '25'\nassert solution('4') == '25'\nassert solution('5') == '25'\n\"\"\"\n\nfrom typing import List, Any\nimport sys"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"15\"\nassert solution(\"1\") == \"20\"\nassert solution(\"15 20\") == \"15\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '15'\nassert solution('4') == '5'\nassert solution('5') == '1'\n\n'''\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n15 20\\n0') == '15'\nassert solution('1\\n1\\n1') == '0'\nassert solution('5\\n1 3 5 2\\n2 3 1 2\\n2 4 3 3\\n1 5 4 3\\n1 4 6 5\\n1 4 5 4') == '9'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"15\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98''') == 'impossible'\nassert solution('''3 1\n2 5\n1 4 716\n3 4 98''') == '69'\nassert solution('''3 1\n2 5\n1 4 716\n3 4 98''') == 'impossible'\nassert solution('''4 1\n2 5\n1 4 716\n3 4 98''') == '69'\nassert solution('''5 3\n2 4\n1 3 716\n2 4 98\n2 5 283''') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\") == \"impossible\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'\nassert solution('''\n4 5\n2 3 6 5\n5 4 5 5\n3 2 5 3\n1 5 5 2\n5 4 4 4\n''') == '19'\nassert solution('''\n5 6\n3 4 5 4\n2 4 5 3\n1 5 5 2\n5 4 4 4\n1 4 4 2\n''') == '18'\nassert solution('''\n10 11\n1 3 4 5 6 7 8 9 10\n3 5 8 1 4 7 9 2 6\n4 6 5 2 9 3 7 1 8\n5 9 4 7 3 8 2 6 1\n6 8 7 4 1 9 3 2 5\n9 2 1 4 5 8 6 7 3\n8 4 7 3 9 2 1 6 5\n7 4 1 5 9 6 3 8 2\n2 1 4 5 8 6 7 3 9\n6 5 2 9 3 7 1 8 4\n9 2 1 4 5 8 6 7 3\n4 7 3 9 2 1 6 5 8\n5 9 4 7 3 8 2 6 1\n4 6 5 2 9 3 7 1 8\n1 4 5 8 6 7 9 3 2\n5 9 4 7 3 8 2 6 1\n8 7 4 1 9 3 2 5 6\n3 5 8 1 4 7 9 2 6\n''') == 'impossible'\nassert solution('''\n10 11\n1 3 4 5 6 7 8 9 10\n3 5 8 1 4 7 9 2 6\n4 6 5 2 9 3 7 1 8\n5 9 4 7 3 8 2 6 1\n6 8 7 4 1 9 3 2 5\n9 2 1 4 5 8 6 7 3\n8 4 7 3 9 2 1 6 5\n7 4 1 5 9 6 3 8 2\n2 1 4 5 8 6 7 3 9\n6 5 2 9 3 7 1 8 4\n9 2 1 4 5 8 6 7 3\n4 7 3 9 2 1 6 5 8\n5 9 4 7 3 8 2 6 1\n4 6 5 2 9 3 7 1 8\n1 4 5 8 6 7 9 3 2\n5 9 4 7 3 8 2 6 1\n8 7 4 1 9 3 2 5 6\n3 5 8 1 4 7 9 2 6\n''') == '18'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"impossible\"\nassert solution(\"3 1 375\") == \"375\"\nassert solution(\"2 5 283\") == \"283\"\nassert solution(\"1 4 716\") == \"716\"\nassert solution(\"3 4 98\") == \"98\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('10 10\\n5 1\\n1 1 1\\n5 3\\n6 5\\n2 1\\n1 3\\n1 2\\n1 5\\n1 6\\n4 2\\n4 6\\n3 4\\n2 4\\n2 2\\n2 4\\n3 6\\n4 6\\n3 1\\n3 2\\n1 2\\n5 5\\n6 1\\n5 1\\n6 3\\n3 4\\n3 3\\n1 1\\n5 5\\n4 4\\n3 5\\n6 5\\n3 5\\n4 5\\n3 2\\n4 4\\n2 3\\n1 5\\n6 5\\n4 4\\n2 3\\n2 5\\n2 4\\n4 1\\n3 2\\n3 3\\n4 4\\n6 5\\n5 2\\n2 5\\n1 4\\n4 4\\n1 5\\n5 1\\n3 1\\n4 1\\n1 4\\n4 6\\n4 3\\n3 2\\n4 5\\n1 3\\n2 3\\n4 3\\n1 3\\n4 6\\n4 4\\n1 5\\n1 6\\n2 6\\n3 3\\n5 6\\n3 4\\n4 4\\n5 4\\n2 5\\n4 4\\n6 5\\n5 2\\n3 4\\n2 6\\n2 4\\n2 4\\n2 4\\n2 3\\n2 3\\n2 2\\n2 2\\n1 3\\n1 4\\n2 1\\n1 3\\n1 4\\n3 1\\n1 4\\n2 4\\n2 1\\n2 3\\n3 3\\n2 4\\n3 2\\n1 3\\n1 2\\n2 3\\n3 3\\n2 3\\n3 3\\n3 3\\n4 4\\n3 5\\n3 5\\n3 5\\n4 4\\n4 5\\n4 4\\n2 2\\n3 4\\n4 4\\n4 4\\n5 3\\n5 3\\n4 3\\n4 3\\n2 5\\n1 2\\n1 3\\n1 5\\n3 2\\n1 3\\n4 1\\n2 5\\n1 2\\n2 5\\n4 4\\n1 3\\n2 4\\n3 5\\n1 4\\n4 5\\n3 5\\n4 4\\n1 5\\n4 1\\n2 5\\n3 4\\n2 4\\n3 4\\n2 4\\n1 6\\n2 5\\n1 4\\n2 5\\n1 1\\n2 5\\n1 4\\n2 5\\n4 2\\n4 3\\n4 5\\n2 2\\n3 2\\n2 4\\n4 5\\n1 2\\n1 4\\n2 2\\n2 5\\n1 4\\n2 4\\n2 3\\n2 4\\n1 6\\n1 4\\n1 6\\n1 6\\n2 5\\n2 6\\n3 4\\n2 5\\n3 3\\n1 2\\n1 3\\n2 5\\n1 5\\n3 4\\n4 6\\n5 2\\n2 5\\n2 4\\n3 4\\n1 2\\n1 3\\n4 4\\n4 3\\n5 4\\n3 5\\n4 4\\n2 4\\n2 4\\n1 6\\n3 5\\n2 4\\n1 2\\n1 5\\n1 6\\n2 5\\n2 4\\n2 4\\n2 4\\n2 3\\n2 5\\n1 6\\n1 6\\n1 6\\n2 5\\n3 4\\n3 3\\n1 3\\n1 4\\n1 5\\n2 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 4\\n1 3\\n1 5\\n1 6\\n2 5\\n1 4\\n1 5\\n2 3\\n1 4\\n2 3\\n2 3\\n1 5\\n1 4\\n2 4\\n3 2\\n3 5\\n2 6\\n1 4\\n2 4\\n3 4\\n4 4\\n2 5\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n1 3\\n2 4\\n3 5\\n4 5\\n2 4\\n3 4\\n3 4\\n4 4\\n2 4\\n2 3\\n2 4\\n2 4\\n2 4\\n3 4\\n1 4\\n3 5\\n2 5\\n3 4\\n2 4\\n2 3\\n3 4\\n2 4\\n1 4\\n4 5\\n1 5\\n2 4\\n2 4\\n2 4\\n2 5\\n1 2\\n3 3\\n2 3\\n2 4\\n1 4\\n3 4\\n4 5\\n1 4\\n1 3\\n1 5\\n3 5\\n2 4\\n3 4\\n2 4\\n1 5\\n2 5\\n1 5\\n2 5\\n1 4\\n1 6\\n2 4\\n2 5\\n2 6\\n1 4\\n2 5\\n1 3\\n2 4\\n1 4\\n1 6\\n2 5\\n2 4\\n2 4\\n2 3\\n2 4\\n1 6\\n1 6\\n2 5\\n2 5\\n2 4\\n1 4\\n2 4\\n2 4\\n2 3\\n1 5\\n2 4\\n1 6\\n2 4\\n1 4\\n1 6\\n1 5\\n2 5\\n2 4\\n1 5"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 4\n1 1 375\n2 2 283\n3 3 98\n4 4 716\n5 5 797\n''') == 'impossible'\n\nassert solution('''\n3 6\n1 2 400\n2 3 400\n2 4 500\n1 5 600\n3 5 600\n''') == '50000000'\n\nassert solution('''\n5 5\n1 1 300\n1 2 500\n2 3 300\n2 4 500\n3 4 300\n''') == '4000000000'\n\nassert solution('''\n5 6\n1 1 200\n2 2 200\n3 3 100\n4 4 100\n5 5 100\n6 6 100\n''') == 'impossible'\n\nassert solution('''\n5 4\n1 1 200\n2 2 200\n3 3 100\n4 4 100\n5 5 100\n6 6 100\n''') == 'impossible'"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3 2\\n2 4\\n4 5') == 'impossible'\nassert solution('1\\n3 2\\n2 4\\n4 5') == '75'\nassert solution('5\\n4\\n1 2\\n3 4\\n2 3') == '75'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n3\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n4\n4 1 374\n2 5 282\n1 4 716\n3 4 98\n\"\"\"\n) == \"250\"\nassert solution(\n\"\"\"\n5\n4 1 374\n2 5 282\n1 4 716\n3 4 98\n\"\"\"\n) == \"250\"\nassert solution(\n\"\"\"\n5\n4 1 374\n2 5 282\n1 4 716\n3 4 98\n\"\"\"\n) == \"250\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98''') == 'impossible'\nassert solution('''5 6\n3 1 1\n2 4 3\n1 4 7\n3 4 98\n2 4 9''') == '18'\nprint('all tests passed')"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n\") == \"impossible\"\nassert solution(\"10 10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n\") == \"547\"\n\n--Input is a puzzle input and I have provided an example solution to check this--\n\nSample Input:\n3\n\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\nSample Output:\n4\n\n--\n\"\"\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1.000000000'\nassert solution('3') == '1.99999999'\nassert solution('4') == '1.99999000'\nassert solution('5') == '1.99999000'\nassert solution('6') == '1.99999000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1.000000000'\n\nprint(solution(input()))\n\"\"\"\nfrom itertools import permutations\nn = int(stdin())\n\nm = 10**-6\n\nprint(len([k for k in permutations(list(range(1,n+1))) if k[0]==k[1] ]), m)"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\nassert solution('3') == '2.000000000'\nassert solution('4') == '3.000000000'\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.0000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1.000000000'\nassert solution('7') == '1.000000001'\nassert solution('16') == '1.999999999'\n\"\"\"\n\nfrom math import sqrt\n\nn = int(input())"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('1.1') == '1.1000000000000001'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '1.0000000000'\nassert solution('3') == '1.0000000000'\nassert solution('4') == '1.0000000000'\nassert solution('5') == '1.0000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0.500000'\n\"\"\""
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n''') == '0.999999999'\nassert solution('''\n10\n''') == '13.999999999'\nassert solution('''\n1000\n''') == '6.6666666667'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('15 99 98') == '115.000000000'\nassert solution('40 3 2') == '78.000000000'\nprint(solution(input()))"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 10\n3 20\n4 30\n''') == '115.000000000'\nassert solution('''\n1 20\n3 60\n2 40\n''') == '148.00000'\nassert solution('''\n2 1\n1 0\n1 1\n''') == '1'\nassert solution('''\n4 4\n4 5\n3 5\n3 4\n''') == '6'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''100 3 10\n15 99 98\n40 3 2\n90 10 9''') == '115.000000000'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n1 3\n1 3\n''') == '1'\nassert solution('''\n5\n3 5 2\n1 5 1\n5 6 1\n5 5 1\n4 5 2\n''') == '7.44921875'\nassert solution('''\n100\n1 3\n1 3\n''') == '100'\nassert solution('''\n100\n1 99 98\n40 3 2\n90 10 9\nSample Output:\n200.000000000\n''') == '107.5'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 10') == '115.000000000'\nassert solution('100 3 10') == '119.000000000'\nassert solution('1 2 4') == '10.0000000000'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"115.000000000\"\nassert solution(\"3 1 1\") == \"4.000000000\"\nassert solution(\"10 10 5\") == \"36.000000000\"\nprint(\"Congratulations! All test cases passed!\")\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '102.043439452'\nassert solution('40 3 2') == '71.108571274'\nassert solution('90 10 9') == '94.962841509'\nassert solution('10.1') == '10.100000001'\n\"\"\""
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"1.00000000\"\nassert solution(\"2 2 2\") == \"2.00000000\"\nassert solution(\"3 3 3\") == \"3.00000000\"\n\n\"\"\""
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 3 10\\n15 99 98\\n40 3 2\\n90 10 9') == '115.000000000'\nassert solution('100000 3 10\\n15 99 98\\n40 3 2\\n90 10 9') == '116.000000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 1\\n1.5 1') == '199.500000'\nassert solution('2\\n100 1\\n100 1.5') == '199.500000'\n\n\"\"\"\n\nfrom math import pi\n\nN = int(input())\n\nstars = []\nfor _ in range(N):\n    stars.append(tuple(map(float, input().split())))\n\nstars = sorted(stars, key=lambda star: star[1]*star[2] - star[0])\n\nprint(round(stars[0][0] + (stars[0][1]*2 - stars[0][2])*stars[0][0], 6))"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '199.500000'\nassert solution('2') == '199.500000'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n100 1 1\\n100 1 1\\n') == '199.500000'\nassert solution('3\\n100 1 1.5\\n100 1 1\\n') == '199.500000'\nprint('a')\nassert solution('10\\n10 10\\n1 1 0.5\\n10 1 0.5\\n') == '10.5'\nprint('b')\nassert solution('100\\n100 100\\n1 1 1\\n100 1 1\\n') == '199.5'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n100 1 1\n100 1 1.5\nSample Input 2:\n4\n9 9.5 3 1\n9 9.5 3 1.5\n9 9.5 3 2\n9 9.5 3 2.5\nSample Output 2:\n76.50000\n\"\"\") == \"76.500000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '199.500000'\nassert solution('1') == '199.500000'\nassert solution('4') == '50.000000'\nassert solution('5') == '101.000000'\nassert solution('6') == '51.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5\\n') == '199.500000'\nassert solution('6\\n1 1 1.5\\n2 2 1\\n3 3 1\\n4 4 1\\n5 5 1.5\\n') == '4.0'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 3\\n1 2\\n3 4') == '199.500000'\nassert solution('6\\n10 4\\n4 5\\n7 5\\n5 5\\n3 5\\n6 5') == '144.09375'"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n2 1\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n'''\n)"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nprint(solution('''2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n'''))\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n\nassert solution('''\n3 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\n\nassert solution('''\n3 2\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\n'''\n'''\n\nfrom collections import deque"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n2 2\n1 2 3\n''') == '1'\nassert solution('''\n2 5\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '6'\n'''\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"1\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n2 3\n1 1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n\n'''"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"1\"\nassert solution(\"2 4 2 5 6 7 8 9 10 11 12\") == \"3\"\nassert solution(\"2 5 3 4 6 7 8 9 10 11 12\") == \"4\"\nassert solution(\"2 7 3 6 4 5 9 8 10 11 12\") == \"3\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"1\"\nassert solution([2,4,1,2,6,8,3,9,4,7,5,10,11]) == \"0\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\nassert solution('3 2\\n4 5 6 7 8 9 10 11 12') == '0'\nassert solution('3 4\\n4 3 2 1') == '0'"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n'''\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('13\\n3 2 1 1') == '5'\nassert solution('1\\n2 1 1') == 'Impossible'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'Impossible'\nassert solution('13') == '5'\nassert solution('3 2 1 1') == '5'\nassert solution('1000') == '2'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('13 2 1 1') == '5'\nassert solution('6') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13\\n2 2 1 1') == '5'\nassert solution('10\\n1 1 2 1') == 'Impossible'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1 1') == '5'\nassert solution('19 5 2 3') == '5'\nassert solution('10 5 2 2') == '4'\nassert solution('13 3 3 3 3') == '0'\nassert solution('10000 5 2 2') == '5'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1 1') == 'Impossible'\nassert solution('13') == '5'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 2 1 1\n''') == 'Impossible', 'Should be impossible'\n\nassert solution('''\n5\n2 1 1 1\n''') == '3', 'Should be 3'\n\nassert solution('''\n5\n2 1 1 1\n''') == '4', 'Should be 4'\n\nassert solution('''\n6\n1 1 1 1 1 1\n''') == '2', 'Should be 2'\n\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1\n''') == '3', 'Should be 3'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 1 1') == '5'\nassert solution('10\\n3 1 1') == '3'\nassert solution('100\\n3 1 1') == '10'\nassert solution('10000\\n3 1 1') == '25'\nassert solution('9999\\n3 1 1') == '100'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n3 2 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n8\n2 1 1 1 2 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n8\n1 1 1 1 1 1 1\n\"\"\") == \"0\""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'yes', \"Should be 'yes'\"\n\n## Input:\n\n'''\naabcad\naba\nacd\n\n'''\n## Output:\n'''\nyes\n'''\n## Solution Explanation:\n\n'''\n[4][2]\n[2][0]\n[1][4]\n[0][3]\n'''\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    'aabcad') == 'yes'\nassert solution(\n    'aba') == 'no'\nassert solution(\n    'acd') == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"yes\"\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n\n'''"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'yes'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"no\"\nassert solution(\"acd\") == \"no\"\n\n\n* Input:\n* Output:\n* Explanation:\n* Input:\n* Output:\n\"\"\"\nimport sys\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        answer = \"yes\" if len(stdin)%2 == 0 else \"no\"\n        # str1 = list(stdin)\n        # str2 = []\n        # for i in range(len(str1)):\n        #     if i%2 == 0:\n        #         str2.append(str1[i])\n        #     else:\n        #         str2.append(str1[i+1])\n        # str2 = ''.join(str2)\n        # if str1 == str2:\n        #     answer = \"yes\"\n        # else:\n        #     answer = \"no\"\n        # return answer\n        \n        str1 = stdin.replace('\\n', '')\n        str1 = collections.deque(str1)\n        str2 = collections.deque()\n        for i in range(len(str1)):\n            if i%2 == 0:\n                str2.append(str1[i])\n            else:\n                str2.append(str1[i+1])\n        str2 = ''.join(str2)\n        if str1 == str2:\n            answer = \"yes\"\n        else:\n            answer = \"no\"\n        return answer"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''aabcad''') == 'yes'\nassert solution('''aba''') == 'no'\nassert solution('''acd''') == 'no'''')\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\"\n\n\"\"\"\n\ns = input()"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'yes'\nassert solution(input()) == 'no'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"yes\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 10\") == \"5\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 1 1 6\") == \"2\"\nassert solution(\"3 4 7 10\") == \"2\"\nassert solution(\"2 4 3 5\") == \"1\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n') == \"5\"\n\n-----Explanation-----\nThis is a little more difficult than others, but it is a little different.\n\nThe door on each side of the door can be keyed differently. So a person who is allowed to pass through the door in the first direction could not have been able to return once the door closed behind them.\n\nThe door is closed behind you, so you cannot pass through the door.\n\nThis is not a legitimate solution, but I think it's still a reasonable one.\n\n-----Idea------\nFor each room, we are interested in keeping track of the top-left and bottom-right of the range that a lock occupies.\n\nThen we have to search for the range that a lock occupies.\n\nThen we do the same for each room, and continue until we are done.\n\nThen we can simply check the bounds of each room and print the number of badges within it.\n\nWe could have also do the same for each room, and go through each room and find the range that it occupies. But that would be a lot more complicated.\n\nWe can then try to add a constraint that the number of badges that can be entered should be greater than or equal to the number of badges allowed at that room.\n\nIt would have to be a constraint that a badge number can only be entered if it is within the correct range of the room it is in. So we can just run a loop over each room and check each range.\n\nIf a room is encountered, then check if it has the same range as any room it is in. If it does, increment the counter.\n\nIt is quite straightforward to write the program.\n\n\"\"\""
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nprint(solution(input()))"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\nassert solution(\"4 5 5\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"0\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5 10\") == \"5\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 1 1 6\") == \"1\"\nassert solution(\"3 4 7 10\") == \"1\"\nassert solution(\"2 4 3 5\") == \"3\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 10') == '5'\nassert solution('3 2') == '2'\nassert solution('3 1 1 6') == '6'\nassert solution('3 4 7 10') == '7'\nassert solution('2 4 3 5') == '4'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n'''\n) == '5'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\nassert solution('100000\\n010001\\n000100\\n000101\\n001001\\n000110\\n111011\\n001101\\n001100\\n111111') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '4'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 same\") == \"4\"\nassert solution(\"3 5 same\") == \"0\"\nassert solution(\"10 2 same\") == \"1\"\nassert solution(\"12 3 same\") == \"4\"\nassert solution(\"100 5 same\") == \"8\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same') == '4'\nassert solution('3 1\\n3 1 same\\n3 1 different') == '2'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 true\") == \"1\"\nassert solution(\"5 2 true\") == \"4\"\nassert solution(\"5 2 false\") == \"0\"\nassert solution(\"3 5 true\") == \"0\"\nassert solution(\"5 5 false\") == \"4\""
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\nassert solution('5 2\\n2 4 true\\n3 5 true\\n') == '0'\nassert solution('5 2\\n2 4 same\\n3 5 same\\n') == '1'\n'''\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 2 same\n2 4 same\n3 5 same\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n1 2 same\n2 4 same\n3 5 same\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n2 2 same\n4 2 same\n3 5 same\n\"\"\") == \"1\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\nassert solution('''\n5 2\n0 1\n2 1\n''') == '2'\nassert solution('''\n4 2\n0 1\n0 2\n''') == '1'\n'''\nsolution([input() for _ in range(int(input()))])''')"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6 4\n0 1\n0 2\n3 4\n3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\n0 1\n0 2\n2 4\n3 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 4\\n0 1\\n0 2\\n3 4\\n3 5\\n\") == \"3\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '3'\nassert solution('2 2') == '1'\nassert solution('7 7') == '6'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 4') == '3'\nassert solution('10 5') == '2'\nassert solution('100 10') == '1'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n0 1\\n0 2\\n3 4\\n3 5\\n\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 3') == '3'\nassert solution('7 7') == '8'\nassert solution('5 5') == '4'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 4') == \"3\"\nassert solution('6 5') == \"2\""
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\nassert solution('3 4\\n0 1\\n0 2\\n3 4') == '2'\nassert solution('5 4\\n0 1\\n0 2\\n3 4\\n3 5') == '4'\nassert solution('3 4\\n0 1\\n0 2\\n3 4\\n3 5') == '1'\nassert solution('4 4\\n0 1\\n0 2\\n3 4\\n3 5') == '4'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3') == '9.0\\n6.5\\n2.5\\n'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '9.0'\nassert solution('1000000000') == '10000000000.0'"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\\n') == '9.0\\n6.5\\n2.5\\n'\nassert solution('1\\n4\\n2\\n5\\n3\\nUUDD\\n') == '4.0\\n8.0\\n3.0\\n4.0\\n'\nassert solution('5\\n1 2\\n2 1\\n3 2\\n2 1\\n1 3\\n5 3\\nLUDD\\n') == '6.0\\n8.0\\n3.0\\n4.0\\n'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\\n\") == \"9.0\\n6.5\\n2.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 4\n2 2\n4 1\n3 5\n5 3\n''') == '''9.0\n6.5\n2.5'''\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n2\n3\n4\n5\nLUR\n''') == '9.0'\n\nassert solution('''3\n3\n3\n5\n5\n3\nU\nD\n''') == '5.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.5'\n\"\"\"\n\nimport math\n\nn = int(input())\n\npoints = [(int(i), int(j)) for i, j in zip(stdin.split(), stdin.split())]\n\nleft_x = min(points, key=lambda x: x[0])[0]\nright_x = max(points, key=lambda x: x[0])[0]\n\ntop_y = max(points, key=lambda x: x[1])[1]\nbottom_y = min(points, key=lambda x: x[1])[1]\n\narea = (right_x - left_x) * (top_y - bottom_y)\n\nfor i in range(n - 2):\n    x1, y1 = points[i]\n    x2, y2 = points[i + 1]\n    area -= (abs(x1 - x2) + abs(y1 - y2))\n\nprint(round(area, 1))\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\n\"\"\") == \"9.0\"\nassert solution(\"\"\"\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nUDDLR\n\"\"\") == \"6.5\"\nassert solution(\"\"\"\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLLUU\n\"\"\") == \"2.5\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\n\"\"\") == \"9.0\\n6.5\\n2.5\"\n\nassert solution(\"\"\"\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLU\n\"\"\") == \"9.0\\n6.5\\n2.5\"\n\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n4 5\nLU\n\"\"\") == \"5.0\\n5.0\\n5.0\\n5.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '9.0'\nassert solution('2') == '6.5'\nassert solution('4') == '2.5'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 4 3\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 6 4\nB 1 2\nB 2 3\nR 3 4\nR 4 5\nB 5 6\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 5 2\nB 1 2\nB 2 3\nR 3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"5 5 3\nR 3 1\nR 3 2\nR 3 3\nB 1 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"5 5 4\nB 1 2\nB 2 3\nR 3 1\nB 1 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"5 5 4\nR 3 1\nR 3 2\nB 1 2\nB 1 3\nR 3 3\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 2\\nB 1 2\\nB 2 3\\nR 3 1') == '1'\nassert solution('2 3 1\\nR 3 1\\nB 2 3') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n\"\"\"\n--- Day 1: The Tyranny of the Rocket Equation ---\nSanta has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.\n\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\nThe Elves quickly load you into a spacecraft and prepare to launch.\n\nAt the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper. They haven't determined the amount of fuel required yet.\n\nFuel required to launch a given module is based on its mass. Specifically, to find the fuel required for a module, take its mass, divide by three, round down, and subtract 2.\n\nFor example:\n\n    For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.\n    For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.\n    For a mass of 1969, the fuel required is 654.\n    For a mass of 100756, the fuel required is 33583.\nThe Fuel Counter-Upper needs to know the total fuel requirement. To find it, individually calculate the fuel needed for the mass of each module (your puzzle input), then add together all the fuel values.\n\nWhat is the sum of the fuel requirements for all of the modules on your spacecraft?\n\"\"\"\n\nimport aoc\n\ndata = aoc.read(1, 'input.txt')\ndata = [int(x) for x in data]"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1', \"test 1 failed\"\nassert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '0', \"test 2 failed\"\nassert solution('''\n4 4 2\nB 1 2\nB 2 3\nB 3 4\nR 3 1\n''') == '1', \"test 3 failed\"\nassert solution('''\n4 4 2\nB 1 2\nB 2 3\nB 3 4\nR 3 1\n''') == '0', \"test 4 failed\"\nassert solution('''\n4 4 2\nB 1 2\nB 2 3\nB 3 4\nR 3 1\n''') == '0', \"test 5 failed\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('3 4 2') == '0'\nassert solution('8 4 2') == '1'\nassert solution('1 6 2') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3 2\nB 1 2\nB 2 3\nR 3 1''') == '1'\nassert solution('''5 3 2\nB 1 2\nB 2 3\nR 3 1\nR 3 2\nR 1 4''') == '0'\nassert solution('''8 3 2\nB 1 2\nB 2 3\nR 3 1\nB 3 4\nR 1 5\nR 5 3\nB 1 6\nR 5 2\nR 1 4\nR 6 2''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n5 7 2\nR 1 2\nR 2 3\nR 3 1\nB 4 6\nB 5 6\n''') == '0'\n'''\nYou are guaranteed that the graph given will be connected and that there will be at most one edge between any pair of nodes.\n'''"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\nassert solution('''\n2 4 2\nR 1 3\nR 1 2\nR 2 3\n''') == \"0\"\n'''"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n5 0 5') == '88'\nassert solution('3\\n0 0 0') == '0'\nassert solution('4\\n5 6 5') == '5'\nassert solution('5\\n0 1 0 1 1\\n1 0 1 1') == '1'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4,]) == \"5\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"5\") == \"88\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n1\\n1\\n2\\n3') == '1'\nassert solution('2\\n3\\n2\\n1\\n3\\n2') == '3'\nassert solution('3\\n3\\n1\\n2\\n3\\n2') == '3'\nassert solution('4\\n1\\n2\\n3\\n4\\n3') == '4'\nassert solution('5\\n0\\n0\\n0\\n0\\n0') == '0'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '5'\nassert solution('4') == '7'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5,0,5]) == '88'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4,]) == \"5\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5, 0, 5]) == \"88\"\nassert solution([7, 0, 7]) == \"5\"\nassert solution([4,]) == \"7\"\n\"\"\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\") == \"88\\n5\\n5\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\nassert solution('''2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '5'\nassert solution('''8\n0 0 0\n5 1 0\n1 2 0\n0 3 0\n1 3 0\n2 4 0\n3 4 0\n4 5 0\n5 6 0\n6 7 0\n7 8 0\n''') == '8'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\nassert solution(\"\"\"\n4 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\nSample Input 2:\n3 4 3 1\n2\n1 3 1\n1 2 2\n2 3 3\nSample Output 2:\n6\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 2 1 3\n1 2 2\n2 3 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 2 1 3\n3 1 2\n1 2 3\nSample Input 3:\n3 4 3 1\n2\n1 3 1\n1 2 2\n2 3 3\nSample Output 3:\n6\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 4 3 1\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 4 3 1\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 4 1 3\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\") == \"5\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 1 2\n1 2 1\n''') == '-1'\nassert solution('''\n3 3 1 2\n1 2 2\n1 3 1\n2 3 3\nSample Input:\n5 3 1 2\n1 2 2\n2 3 1\n1 3 1\n2 3 3\nSample Output:\n4\n''') == '-1'\nassert solution('''\n3 3 1 2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\nassert solution('''\n3 2 1 2\n1 2 1\n''') == '-1'\nassert solution('''\n5 3 1 2\n1 2 2\n2 3 1\n1 3 1\n2 3 3\n''') == '4'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 1 2\") == \"5\"\nassert solution(\"2 2 1 1\") == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n1 2\\n1 3 1') == '-1'\n\nassert solution('2\\n3\\n1 2\\n1 3 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4 1 2\n1 2 1\n3 3 1\n2 4 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 4 1 2\n1 2 1\n3 3 1\n2 4 3\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\nassert solution(\n'''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '-1'\nassert solution(\n'''\n4 4 2 1\n4\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n1 3 2\n3 4 4\n4 3 1\n1 2 4\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('mirko') == 'FRULA'\n\nSample Input:\nmirkoC4nizCC44\nCC\nSample Output:\nmirkoC4nizCC44\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\""
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'\nassert solution('C4') == 'C4'\nassert solution('C4nizCC44') == 'C4nizCC44'\n\"\"\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"C4\", solution(__import__('sys').stdin.read())\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''mirkovC4nizCC44''') =='mirkovniz'\nassert solution('''C4''') == 'C4'\nassert solution('''mirkoC4nizCC44''') =='mirkoC4nizCC44'\n''')\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\""
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().rstrip()\nprint(solution(input()))\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkniz\""
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"32\""
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"32\"\nassert solution([3, 65, 45, 10, 60, 25]) == \"32\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n3\\n45\\n10\\n60\\n25') == '32'\nassert solution('4\\n4\\n10\\n6\\n9\\n6\\n3\\n6\\n') == '4'\nassert solution('10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '32'\nassert solution('2') == '1'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n20 10\\n30 30') == '32'\nassert solution('1\\n15 10\\n10 15') == '31'\nassert solution('1\\n15 10\\n10 15') == '31'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 65\n45 10\n60 25\n''') == '32'\n\nassert solution('''3\n3 3\n1\n2\n3\n''') == '4'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n3 65\n45 10\n60 25\n\"\"\") == \"32\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"32\"\nassert solution(\"3\\n3\\n3\") == \"32\"\nassert solution(\"3\\n3\\n3\\n3\") == \"32\"\nassert solution(\"3\\n3\\n3\\n3\\n3\") == \"32\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '2'\nassert solution('''\n5\n2 2 2 3 3\n''') == '2'\nassert solution('''\n2\n1 1\n''') == '1'\nassert solution('''\n2\n2 2\n''') == '2'\nassert solution('''\n2\n2 2\n''') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '2'\nassert solution('10\\n1 1 1 2 2 3 3 3 3 4 4 4 4 4 4 4 4\\n') == '5'\nassert solution('1\\n1\\n') == '1'\nassert solution('2\\n0 1\\n') == '0'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 1 2') == '2'\nassert solution('5\\n1 2 0 3 1') == '2'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 0 3 1\n''') == '3'\nassert solution('''\n3\n2 1 0 1\n''') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2\\n'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 0 3 1') == '3'\nassert solution('4\\n2 4 2 4') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '2'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n') == '5'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 0 3 1\") == \"2\"\nassert solution(\"5 1 2 0 3 1\") == \"3\"\nassert solution(\"4 3 2 1 0\") == \"1\""
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 0 3\n''') == '3'\nassert solution('''5\n2 2 2 2 2\n''') == '4'\nassert solution('''10\n3 4 5 7 3 9 6 6 7\n''') == '5'\nassert solution('''20\n1 1 2 1 3 1 4 1 2 2 3 1 3\n''') == '7'"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 4\") == \"2\"\nassert solution(\"2 5 4\") == \"1\"\nassert solution(\"2 3 4\") == \"4\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 2\n+ 1 1\n+ 1 3\n- 1 4\n''') == '1', 'Should return 1'\nassert solution('''\n2 2 2\n+ 1 1\n+ 1 3\n- 1 4\n''') == '0', 'Should return 0'\n\n''')\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n') == '1'\nassert solution('2\\n4\\n2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 4') == '2'\nassert solution('3 3 3') == '0'\nassert solution('2 4 4') == '2'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n') == '2'\nassert solution('2 5 3\\n- 1 2\\n+ 1 3\\n- 1 4\\n+ 1 5\\n') == '3'\nassert solution('2 10 2\\n- 1 1\\n+ 1 2\\n- 1 5\\n+ 1 6\\n') == '6'\nassert solution('1 1000 2\\n+ 1 1\\n- 1 100\\n+ 1 101\\n- 1 102\\n+ 1 103\\n+ 1 104\\n+ 1 105\\n') == '-1'\nassert solution('1 8 3\\n+ 1 2\\n- 1 5\\n+ 1 6\\n- 1 7\\n+ 1 8\\n') == '0'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\") == \"2\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n') == '2'\nassert solution('2 3 3\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n') == '3'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 4') == '2'\nassert solution('- 1 1\\n+ 1 2\\n- 1 3\\n+ 1 4') == '2'\nassert solution('1 1\\n2 2\\n1 3\\n4 4') == '0'\nassert solution('4 5\\n3 4\\n3 5\\n4 4\\n4 5') == '1'\nassert solution('1 1\\n3 3\\n3 3\\n4 4\\n4 4') == '1'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4''') == '1'\nassert solution('''2 2 2\n+ - 1\n- + 1\n+ - 1''') == '3'\nassert solution('''1 5 5\n+ + 1\n- + 1\n+ - 1\n- + 1\n+ - 1\n- - 1\n- - 1''') == '8'\nassert solution('''1 1\n+ - 1''') == '1'\nassert solution('''1 10\n+ - 1\n+ - 1''') == '6'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1.00000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('3') == '0.000000000000000'\n\"\"\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.1'\nassert solution('2') == '0.1'\nassert solution('4') == '0.1'\nassert solution('5') == '0.1'\nassert solution('6') == '0.1'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('2\\n1000000000 0\\n1000000000 1\\n') == '500000004'\nprint('all tests passed')\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0.35...'\nassert solution('20') == '0.1656...'\n\n'''"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1000000000 0\\n1000000000 1') == '500000004'\nassert solution('2\\n10000000000 0\\n10000000000 1') == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5000000000 0') == '500000004'\nassert solution('1000000000 1') == '30000000'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 0\\n1 3 0') == '1.00000000000001\\n'\nassert solution('4\\n1 2 0\\n1 3 0\\n1 4 0') == '0.25000000099999994\\n'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"500000004\"\nassert solution(\"6 1000000000 1\") == \"150000000\"\nassert solution(\"5 1000000000 0\") == \"250000000\"\n\"\"\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 8') == '12'\nassert solution('3 2') == '3'\nassert solution('4 3') == '2'\nassert solution('5 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([\n    '5', '8',\n    '1 2 1 10', '2 4 11 16', '2 1 9 12', '3 5 28 100',\n    '1 2 3 8', '4 3 20 21', '1 3 13 27', '3 5 23 24'\n]) == '12'\n\"\"\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 8\") == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 8') == '12'\nassert solution('5 5') == '10'\nassert solution('1 2 3 4') == '7'\n\n'''"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 8\") == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 2 3 8\\n4 3 20 21\\n1 3 13 27\\n3 5 23 24') == '12'\nassert solution('3 5 1 10\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 3 13 27\\n3 5 23 24') == '16'\nassert solution('3 5 1 10\\n1 2 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 3 13 27\\n3 5 23 24') == '16'\nassert solution('5 5 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 3 13 27\\n3 5 23 24') == '15'\nassert solution('1 1 1 10\\n2 4 11 16\\n2 1 9 12\\n3 5 28 100\\n1 3 13 27\\n3 5 23 24') == '5'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n''') == '12'\nprint(solution('''\n4 5\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n'''))"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8') == '12'\nassert solution('10 9') == '3'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n\"\"\"\n    ) == \"12\"\nassert solution(\n\"\"\"\n5 2\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n\"\"\"\n    ) == \"18\"\nassert solution(\n\"\"\"\n1 1\n1 1\n1 1\n1 1\n\"\"\"\n    ) == \"0\"\nassert solution(\n\"\"\"\n5 2\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n\"\"\"\n    ) == \"18\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1 3\n4 3 2\n3 2 1\n2 1 1\n1 1 1\n''') == '1'\nassert solution('''\n5 2 5\n6 3 2\n3 3 3\n2 1 1\n1 1 2\n''') == '3'\nassert solution('''\n4 3 3\n4 3 3\n4 3 2\n4 3 2\n''') == '4'\nassert solution('''\n4 4 2\n1 2 1\n1 1 2\n1 3 2\n''') == '0'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2\n1 5 1\n3 2 4\n3 3 5\n2 4 1\n3 3 2''') == '3'\nassert solution('''\n8 4\n1 2 2\n2 3 1\n2 2 5\n4 3 3\n4 2 1\n3 4 1\n3 2 1''') == '4'\nassert solution('''\n3 5\n4 5 2\n2 5 3\n2 4 2\n4 1 3\n''') == '0'\nprint('You passed all the tests!')"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5\\n') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'\nassert solution('5 1 5\\n2 2 2\\n4 1 2\\n6 2 1\\n8 5 1\\n8 2 4') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3\\n15 5 3') == '3'\nassert solution('2\\n5\\n12 4 4') == '2'\nassert solution('3\\n10\\n20 10 5') == '3'\nassert solution('4\\n10\\n15 5 3') == '0'\nassert solution('5\\n10\\n20 10 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n15 5 3\n12 4 4\n20 10 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n3 2 1 4 5\n4 2 3 5 1\n5 2 4 3 1\n6 2 5 3 4\n\"\"\") == \"6\"\nassert solution(\"\"\"\n20\n1 2 3 4 5\n3 2 1 4 5\n4 2 3 5 1\n5 2 4 3 1\n6 2 5 3 4\n7 2 5 3 1\n8 2 5 3 1\n9 2 5 3 1\n10 2 5 3 1\n11 2 5 3 1\n12 2 5 3 1\n13 2 5 3 1\n14 2 5 3 1\n15 2 5 3 1\n16 2 5 3 1\n17 2 5 3 1\n18 2 5 3 1\n19 2 5 3 1\n20 2 5 3 1\n\"\"\") == \"19\"\nassert solution(\"\"\"\n3\n2 1 3\n1 1 1\n3 2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n5 6 4\n1 3 6 4\n1 1 1 1\n2 2 2 1\n3 3 3 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\n5 2 4\n5 2 4\n3 4 6\n2 5 8\n''') == \"3\"\nassert solution('''\n3 3\n1 2 3\n2 3 4\n''') == \"2\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n19\\n15\\n5\\n3') == '3'\nassert solution('4\\n4\\n4\\n4') == '0'\nassert solution('4\\n1\\n2\\n3') == '1'\nassert solution('4\\n3\\n2\\n1') == '4'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n4 3 2\n3 2 1\n2 1 2\n1 2 1\n1 1 2\n''') == '3'\nassert solution('''\n4 1\n2 2 1\n3 1\n4 1\n''') == '0'\nassert solution('''\n10 4\n5 5 1\n4 2 2\n3 3 1\n5 2 2\n2 2 1\n1 2 1\n6 2 1\n1 1 2\n5 2 3\n1 2 1\n3 1 2\n4 2 1\n1 3 2\n''') == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n1 2''') == '2'\nassert solution('''1 10\n1 9\n1 8\n1 7\n1 6\n1 5\n1 4\n1 3\n1 2\n1 1\n1 0\n1 -1\n1 -2\n1 -3''') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2 1\n3 1''') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('10 2') == '2'\nassert solution('10 2') == '2'\nassert solution('1 0 0') == '1'\n\nimport io\nimport os\nimport sys\n\nclass Graph:\n    def __init__(self, V):\n        self.V = V\n        self.graph = [[] for i in range(self.V)]\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def DFSUtil(self, temp, v, visited):\n        visited[v] = True\n        temp.append(v)\n\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.DFSUtil(temp, i, visited)\n\n    def fillOrder(self, v, temp, visited):\n        visited[v] = True\n        for i in self.graph[v]:\n            if visited[i] == False:\n                self.fillOrder(i, temp, visited)\n\n    def find_parent(self, parent, node):\n        if parent[node] == node:\n            return node\n        return self.find_parent(parent, parent[node])\n\n    def union(self, parent, rank, x, y):\n        xroot = self.find_parent(parent, x)\n        yroot = self.find_parent(parent, y)\n\n        if rank[xroot] < rank[yroot]:\n            parent[xroot] = yroot\n        elif rank[xroot] > rank[yroot]:\n            parent[yroot] = xroot\n        else:\n            parent[yroot] = xroot\n            rank[xroot] += 1\n\n    def is_connected(self, parent, rank, x, y):\n        return self.find_parent(parent, x) == self.find_parent(parent, y)\n\n    def vertices_in_common(self, parent, rank, x, y):\n        root_x = self.find_parent(parent, x)\n        root_y = self.find_parent(parent, y)\n\n        if root_x == root_y:\n            return True\n        return False\n\n    def countComponents(self):\n        # Do a DFS traversal.\n        result = 0\n        parent = []\n        rank = []\n\n        for i in range(self.V):\n            parent.append(i)\n            rank.append(0)\n\n        for i in range(self.V):\n            for j in range(self.V):\n                if self.graph[i] and self.graph[j] and self.is_connected(parent, rank, i, j):\n                    result += 1\n\n        return result\n\nclass Solution:\n    def __init__(self):\n        self.sol = 0\n\n    def get_number_of_solutions(self, N, a, b):\n        g = Graph(N)\n        for i in range(1, a+1):\n            for j in range(1, b+1):\n                g.addEdge(i, j)\n\n        visited = [False]*(N)\n        count = 0\n        ans = []\n        for i in range(1, N+1):\n            if visited[i-1]:\n                continue\n            temp = []\n            g.DFSUtil(temp, i, visited)\n            count += 1\n            ans.append(temp)\n        self.sol = count\n\n        return self.sol"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nassert solution('1 2') == \"2\"\nassert solution('1 2 1') == \"2\"\nassert solution('1 2 1 2') == \"2\"\n\nstdin = \"\"\"\n4\n1 2\n1 3\n2 4\n2 3\n\"\"\"\nassert solution(stdin) == \"1\"\n\nstdin = \"\"\"\n6\n1 2\n1 3\n1 5\n1 6\n3 4\n2 4\n3 5\n3 6\n2 6\n\"\"\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"5\\n2 1 3 1\\n3 4 5 2\") == \"2\"\nassert solution(\"2\\n3 1 2\\n2 1\") == \"0\"\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '2'\nassert solution('4 3') == '4'\nassert solution('5 4') == '0'\nassert solution('100 1') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '7'\nassert solution('10') == '5'"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"RGGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"4\"\nassert solution(\"YRYR\") == \"0\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('RGGR') == '3'\nassert solution('GBGB') == '3'\nassert solution('BYBY') == '3'\nassert solution('YRYR') == '3'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('RGGR') == '2'\nassert solution('GBGB') == '2'\nassert solution('BYBY') == '1'\nassert solution('YRYR') == '1'\n\nstdin = 'RGRG'\nstdin = 'GBGB'\nstdin = 'BYBY'\nstdin = 'YRYR'"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"4\"\nassert solution(\"BYBY\") == \"1\"\nassert solution(\"YRYR\") == \"5\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('RGGGB') == '3'\nassert solution('GBGBY') == '5'\nassert solution('BYBYR') == '7'\nassert solution('RGRGY') == '4'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('RGGR') == '3'\nassert solution('GBGB') == '4'\nassert solution('BYBY') == '2'\nassert solution('YRYR') == '2'"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('RGGR') == '3'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    'RGRG\\nGGBG\\nBYBY\\nYRYR') == '3'\nassert solution(\n    'RGGB\\nGGBG\\nBYBY\\nYRYR') == '3'\nassert solution(\n    'RGRG\\nGGBG\\nBYBY\\nYRYR') == '3'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = self.right = None\n\nclass Tree:\n    def __init__(self):\n        self.root = None\n\n    # Insert the node with given data\n    def insert(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._insert(data, self.root)\n\n    def _insert(self, data, node):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._insert(data, node.left)\n        elif data > node.data:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._insert(data, node.right)\n        else:\n            print(\"Duplicate value. {}\".format(data))\n\n    # Print the tree inorder\n    def print_tree(self):\n        if self.root:\n            self._print_tree(self.root)\n\n    def _print_tree(self, node):\n        if node:\n            self._print_tree(node.left)\n            print(node.data)\n            self._print_tree(node.right)\n    \n    # Given a node with data x, return True if the tree contains a node with value x.\n    def search(self, x):\n        if self.root:\n            return self._search(x, self.root)\n        else:\n            return False\n\n    def _search(self, x, node):\n        if node:\n            if node.data == x:\n                return True\n            elif x < node.data:\n                return self._search(x, node.left)\n            elif x > node.data:\n                return self._search(x, node.right)\n        return False\n\n    # Given a node with data x, replace it with the new data.\n    def replace(self, x, new_data):\n        if self.root:\n            self._replace(x, new_data, self.root)\n        else:\n            return None\n\n    def _replace(self, x, new_data, node):\n        if node:\n            if node.data == x:\n                node.data = new_data\n            else:\n                self._replace(x, new_data, node.left)\n                self._replace(x, new_data, node.right)\n\n    # Given a node with data x, delete it.\n    def delete(self, x):\n        if self.root:\n            self._delete(x, self.root)\n        else:\n            return None\n\n    def _delete(self, x, node):\n        if node:\n            if node.data == x:\n                if node.left:\n                    # Replace left child with right child\n                    node.data = node.left.data\n                    self._delete(node.data, node.left)\n                else:\n                    # Replace node with right child\n                    node.data = node.right.data\n                    self._delete(node.data, node.right)\n                return None\n            elif x < node.data:\n                self._delete(x, node.left)\n            elif x > node.data:\n                self._delete(x, node.right)\n        else:\n            return None"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"RGGR\") == \"4\"\nassert solution(\"GBGB\") == \"3\"\nassert solution(\"BYBY\") == \"2\"\nassert solution(\"YRYR\") == \"1\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(open(0).read()) == 'AAAB'"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'AAABB'\nassert solution('9') == 'AABAAABBAABB'\nassert solution('-9') == 'BBAAA'\nassert solution('100') == 'ABBBB'\nassert solution('-100') == 'AABBB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAA'\nassert solution('''5\n-2 -1 0 1 2\n0 1 0 -1 -2\n''') == 'AAABBAA'\nassert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAABBAA'\nassert solution('''5\n-2 -1 0 1 2\n0 1 0 -1 -2\n''') == 'AAABBAA'\nassert solution('''5\n0 0 0 0 0\n0 0 0 0 0\n''') == 'AAAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"AB\"\nassert solution(\"5\") == \"ABABABAB\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\", \"Invalid test case\"\nassert solution(\"-2 -1 0 1 2\") == \"AABAA\", \"Wrong answer\"\nassert solution(\"2 1 0 -1 -2\") == \"ABABA\", \"Wrong answer\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAAAA', 'First'\nassert solution('''3\n-2 1 -1\n2 1 -1\n''') == 'BAAAB', 'Second'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == 'AAABB'\nassert solution('4') == 'AAAB'"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'ABA'\nassert solution('''3\n-1 1 1\n1 1 -1\n-1''') == 'AB'\nassert solution('''9\n-5 -1 0 1 2 3 -1 -2 -3\n1 2 3 4 5 2 2 -1 -2 -3\n-1 -2 -3 -4 -5 -4 -3 -2 -1\n''') == 'ABBAD'\nassert solution('''13\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAA'\nassert solution('''3\n-2 -1 0 1\n2 1 0 -1\n''') == 'AA'\nassert solution('''8\n0 -3 -1 -2 1 -2 -3 -2\n1 -3 -2 0 1 2 -2\n2 -2 0 -1 1 -3 -2\n3 1 0 -2 -3 -2\n4 2 -1 -3 0 -2\n5 -2 -2 -3 -1 -2\n6 -3 -1 2 -2 -3\n7 -1 -2 -3 -2 -3\n''') == 'AAA'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\") == \"IMPOSSIBLE\"\nassert solution(\"10 10\\n0 2\\n1 2\\n2 2\\n2 5\\n4 5\\n5 4\\n6 6\\n6 5\\n6 6\\n7 6\\n7 7\\n4 7\\n6 7\") == \"3\"\nassert solution(\"10 10\\n0 2\\n1 2\\n2 2\\n2 5\\n4 5\\n5 4\\n6 6\\n6 5\\n6 6\\n7 6\\n7 7\\n4 7\\n6 7\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n10 4\n1 5\n4 8\n8 4\n2 3\n1 9\n8 1\n''') == '6'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n0 0\\n2 2\\n0 2\\n2 2\\n2 2\") == \"IMPOSSIBLE\"\nassert solution(\"6 3\\n2 3\\n4 0\\n0 2\\n6 1\\nSample Output:\") == \"2\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\n3\n2\n4\n0\n6\n1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n10\n3\n4\n0\n6\n1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n10\n3\n0\n2\n4\n1\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n0 0\\n5 5\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\n\nassert solution('''\n6 3\n1 1\n1 3\n0 1\n0 3\n6 1\n''') == '1'\n\nassert solution('''\n5 3\n1 1\n1 3\n2 2\n1 0\n2 0\n''') == '2'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n1 1\n1 1\n''') == '1'\nassert solution('''\n5 5\n0 0\n3 4\n1 1\n2 2\n3 3\n''') == '2'\nassert solution('''\n4 5\n0 0\n3 4\n1 1\n2 2\n3 3\n''') == '2'\nassert solution('''\n4 5\n0 0\n3 4\n1 1\n2 2\n3 3\n4 4\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\nassert solution('5 7\\n4 1\\n0 3\\n1 3\\n2 3\\n') == '2'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1') == 'IMPOSSIBLE'\nprint(solution(input()))\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n1\na\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n10\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"19\""
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '12'\nassert solution('3 2') == '11'\nassert solution('1 10') == '10'\nassert solution('1 10') == '10'"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5') == '12'\nassert solution('7 7') == '22'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '''12\n4\n11\n3\n2\n'''\nassert solution('''\n5 1\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '''12\n4\n11\n3\n2\n'''\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx') == '12'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12\\n4\\n11\\n3\\n2\\n'\n\nassert solution('''\n5 10\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '7\\n5\\n'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5') == '12'\nassert solution('4 5') == '11'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\ndummy\nhello\nworld\n''') == '''4\n6\n6\n'''\nassert solution('''3\ndummy\nhello\nworld\n''') == '''7\n5\n7\n'''\nassert solution('''1\nabcd\n''') == '''0\n2\n'''\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12'\nassert solution('''5 1\naustria\nautocorrelation\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '4'\nassert solution('''4\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '11'\n'''\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12'\nassert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '10'\nassert solution('''1 1\nprogram''') == '0'\nassert solution('''1 1\nprogram''') == '1'\nassert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria''') == '12'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0\\n0') == '1'\nassert solution('1\\n0\\n1') == '3'\nassert solution('1\\n1\\n1') == '2'\nassert solution('3\\n2\\n2') == '4'\nassert solution('4\\n2\\n2') == '5'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 1 1') == '3'\nassert solution('10\\n0 1 2 3 4 5 6 7 8 9') == '5'\nassert solution('20\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '6'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n2\\n3') == '0'\nassert solution('1\\n4\\n3\\n3') == '1'\nassert solution('1\\n8\\n5\\n7') == '4'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\\n2 1 2\") == \"3\"\nassert solution(\"3\\n1 2 3\") == \"3\"\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 1 1\n''') == '3'\nassert solution('''\n4\n0 2 3 4\n''') == '4'\nassert solution('''\n3\n3 2 5\n''') == '3'\nassert solution('''\n10\n0 1 1 1 1 1 1 1 1 1\n1\n''') == '1'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n0 1 1\\n') == '3'\nassert solution('4\\n2 1 3 2\\n') == '4'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 1\n''') == '3'\nassert solution('''\n5\n2 1 1 1 1\n''') == '3'\nassert solution('''\n12\n
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '12'\nassert solution('5') == '11'\nassert solution('6') == '6'\nassert solution('7') == '7'\nassert solution('8') == '7'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1 1\\n') == '3'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 1 1\n''') == '3'\nassert solution('''\n5\n0 2 3 1 2\n''') == '6'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('HFBIGEDCJA') == 'HFBJCDEGIA', \"First Test Case Failed\"\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH', \"Second Test Case Failed\"\nassert solution('BIGEDCJFAH') == 'HFBJCDEGIA', \"Third Test Case Failed\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"HFBJCDEGIA\") == \"Pre In In Pre In In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In In In In In Post\"\nassert solution(\"IGEDCJBAFH\") == \"In In In In In In In\"\nassert solution(\"HFBIGEDCJA\") == \"Pre In In In In In In\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n''') == 'Pre In Post In Pre'\n\"\"\"\nTask\n\nYour task is to reconstruct the source code of the function prePrint(TNode t) that is being tested for the #4 problem. You are given a single input consisting of a single test case. The task is to find all possible reconstructions of the function, and to find the alphabetically first tree of its output for each of these reconstructions.\n\nThe input consists of a single test case consisting of a single string on four lines, as described above. Each of these strings consists of $n$ uppercase letters ($4 \\le n \\le 26$), with no repeated letters in any string. The test case is guaranteed to have at least one solution.\n\nYour task is to print all possible reconstructions for the test case, ordered as described in the last paragraph below. The output for each reconstruction consists of two lines and describes the first test tree that could have generated the observed outputs. The first line is the correct preorder print of the tree, and the second and third lines contain the correct inorder and postorder prints, respectively. The first tree is the one with the alphabetically first preorder print. If there are multiple such trees, the first of these is the one with the alphabetically first inorder print.\n\nEvery reconstructions is a sequence of 6 tokens chosen from Pre, In, and Post. The ordering of reconstructions is lexicographic with respect to the following ordering of tokens: Pre < In < Post.\n\nSample Input\n\nHFBIGEDCJA\nBIGEDCJFAH\nBIGEDCJFAH\nSample Output\n\nPre Post In Post In Pre\nHFBJCDEGIA\nBIGEDCJFAH\nIGEDCJBAFH\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input) == 'Pre In In Post In Pre'\n\nSample Input:\nAFADMDFNHP\nMAHDFNFDPP\nMDFNPVFPH\nSample Output:\nPre In In Post In Pre\nAFADMAHDFNP\nMAHDFNFPHDP\nDNFNPVFMAH\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"HFBJCDEGIA\") == \"Pre Post In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In Pre\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HFBBIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'BIGEDCJFAH'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\n'''"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HFBIGEDCJA') == 'HFBJCDEGIA'\nassert solution('BIGEDCJFAH') == 'IGEDCJBAFH'\n\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Pre'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre In Post In Pre\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HFBIGEDCJA') == 'Pre In Post In Post In Pre'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre In'\nassert solution('BIGEDCJFAH') == 'Pre In Post In Pre In'"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('5') == '11'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\nprint(solution('''5\n3\n20 1 1 1 2\n'''))"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n5 0\n2 1 1\n1\n2 1 0\n''') == \"10\"\nassert solution('''\n3\n8 1 2\n3\n4\n2\n1\n2\n''') == \"8\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '10'\nassert solution('2') == '10'\nassert solution('1') == '10'\nassert solution('1') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\nassert solution('''\n10\n
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"2\") == \"10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '12'\nassert solution('1') == '10'\nassert solution('4') == '14'\n'''\nimport math\nimport itertools\nimport functools\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n0 0 100 100\n''') == \"10000.00\"\nassert solution('''\n1\n0 0 200 200\n''') == \"50000.00\"\nassert solution('''\n2\n0 0 100 100\n30 30 60 60\n''') == \"50000.00\"\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n1 0 0 100\n10 10 30 30\n''') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\nprint(solution(input()))"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 0 100 100\n30 30 60 60\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n3\n0 0 100 100\n10 10 60 60\n30 30 60 60\n''') == '200000.00'\nassert solution('''\n1\n10 10 60 60\n''') == '36.00'\nassert solution('''\n1\n10 10 60 60\n''') == '36.00'\nassert solution('''\n1\n10 10 60 60\n''') == '36.00'\n''')"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00\n''')"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('3\\n1 1 100 100\\n1 1 1 1\\n3 1 2 3') == '4.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 0 100 100\n30 30 60 60\n''') == \"10000.00\"\nassert solution('''\n3\n-1000 -1000 10000 10000\n0 0 100 100\n-2000 -2000 10000 10000\n100 100 -2000 2000\n''') == \"10000.00\""
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0 100 100\\n30 30 60 60\") == \"10000.00\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\n1 3\n2 4''') == '7'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"5\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '5'\nassert solution('3 2') == '8'\nassert solution('3 3') == '10'\nassert solution('4 4') == '12'\nassert solution('4 5') == '8'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4\\n1 2') == '5'\nassert solution('10\\n4\\n4 4 4 2 4') == '0'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4') == '5'\nassert solution('10 7\\n3 4\\n1 2\\n6 5\\n8 9') == '6'\nassert solution('5 3\\n2 4\\n1 2') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '5'\nassert solution('5 4') == '6'\nassert solution('5 5') == '6'\nassert solution('4 5') == '6'\nassert solution('4 5') == '6'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3\\n2 4\\n3 4\\n') == '5'\nassert solution('3 3\\n2 4\\n1 3\\n') == '5'\nassert solution('3 3\\n2 4\\n1 3\\n') == '6'\nassert solution('10 1\\n2 4\\n3 4\\n') == '0'"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 311 311 312 313 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2009 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2009 2009 2010 2011 20122013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2009 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2009 2009 2010 2011 20122013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2009 2009 2010 2011 20122013 1415 2016 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 20"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('8 11 13 17') == '2096'\nassert solution('2 2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n11 13 17\n5 2 4\n0 0 0\n''') == '2095'\nprint('SUCCESS')"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([11, 13, 17]) == \"2095\"\nassert solution([5, 2, 4]) == \"2095\"\nassert solution([0, 0, 0]) == \"0\"\nassert solution([0, 0, 0]) == \"0\"\nassert solution([0, 0, 0]) == \"0\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11 13 17\\n5 2 4\\n0 0 0\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('\\n'.join([\n    '11 13 17',\n    '5 2 4',\n    '0 0 0'\n])) == '2095'\n\nassert solution('\\n'.join([\n    '6 13 17',\n    '7 2 4',\n    '0 0 0'\n])) == '2950'\n\nassert solution('\\n'.join([\n    '6 17 13',\n    '7 4 2',\n    '0 0 0'\n])) == '2950'\n\nassert solution('\\n'.join([\n    '11 17 13',\n    '5 2 4',\n    '0 0 0'\n])) == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('11 13 17') == '2095'\nassert solution('1 1 2') == '1'\nassert solution('1 1 2') == '1'\nassert solution('11 1 2') == '3'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2095\"\nassert solution(\"5 2 4\") == \"2095\"\nassert solution(\"10 1 9\") == \"1\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n''') == 'My name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n''') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    var a = \"Gon\";\n    var b = a;\n    var c = `My name is ${a}`;\n    print c;\n    print `My name is ${b}`;\n    end.\n    ''') == '''My name is Gon\n    My name is Gon'''\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\\n\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\\n\") == \"My name is Gon\\nMy name is Gon\"\nassert solution(\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\\n\") == \"My name is Gon\\nMy name is Gon\"\n\n\"\"\"\n\nimport re\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"input_s, expected\",\n                         [\n                             (\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\",\n                              \"My name is Gon\\nMy name is Gon\"),\n                             (\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\",\n                              \"My name is Gon\\nMy name is Gon\"),\n                             (\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\",\n                              \"My name is Gon\\nMy name is Gon\"),\n                             (\"var a = \\\"Gon\\\"; var b = a; var c = `My name is ${a}`; print c; print `My name is ${b}`; end.\",\n                              \"My name is Gon\\nMy name is Gon\"),\n                         ])\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == \"My name is Gon\"\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == \"My name is Gon\"\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == \"My name is Gon\"\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n\nassert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint(c);\nprint(`My name is ${b}`);\nend.''') == '''My name is Gon\nMy name is Gon'''"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''\n\n'''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n'''\n'''\nMy name is Gon\nMy name is Gon\n'''"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"var a = \\\"Gon\\\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.\") == \"My name is Gon\"\n\nYour task:\nYou should write a function solution that, given a sequence of commands in NenScript, outputs the value of each of the expressions, where each expression is a sequence of characters, so that the total number of characters does not exceed $10^4$.\n\nSignature:\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n\nassert solution('print `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'discard 2'\nassert solution('3') == 'fill 2'\nassert solution('3') == 'discard 2'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 4 5 6 7 8\\n10\\n') == 'discard 8\\ndiscard 7\\ndiscard 6\\ndiscard 5\\ndiscard 4\\ndiscard 3\\ntransfer 2 3\\ntransfer 2 2\\ntransfer 1 1\\ntransfer 0 0\\ntransfer 2 0\\ntransfer 2 2\\nfill 2\\ntransfer 2 2\\ntransfer 1 1\\ntransfer 1 0\\ntransfer 0 0\\ntransfer 2 0\\nfill 2\\nfill 2\\ndiscard 3\\nfill 2\\ntransfer 2 3\\ntransfer 2 2\\ntransfer 2 1\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ntransfer 2 1\\ndiscard 1\\ntransfer 0 0\\ntransfer 2 0\\nfill 2\\ndiscard 0\\ntransfer 2 2\\ndiscard 2\\ntransfer 1 1\\ntransfer 0 0\\ntransfer 1 0\\ndiscard 1\\ndiscard 2\\ntransfer 1 1\\ntransfer 0 0\\ntransfer 2 0\\nfill 2\\ndiscard 1\\ntransfer 0 0\\ntransfer 2 1\\ndiscard 2\\ntransfer 2 1\\ntransfer 1 1\\ndiscard 1\\nfill 2\\nfill 2\\nfill 2\\ntransfer 2 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\ndiscard 1\\ntransfer 2 0\\ntransfer 0 0\\ntransfer 2 1\\ntransfer 1 1\\ntransfer 2 0\\ntransfer 2 0\\ntransfer 2 0\\ntransfer 2 2\\nfill 2\\ndiscard 1\\ntransfer 2 2\\ntransfer 1 1\\ntransfer 0 0\\ntransfer 2 0\\ndiscard 1\\ntransfer 2 2\\nfill 2\\ntransfer 2 2\\ndiscard 2\\ntransfer 2 2\\ndiscard 2\\ntransfer 2 2\\ntransfer 2 1\\ntransfer 2 1\\ntransfer 1 1\\ndiscard 1\\ntransfer 0 0\\ntransfer 2 0\\ntransfer 0 0\\ntransfer 2 1\\ndiscard 1\\nfill 2\\nfill 2\\nfill 2\\ntransfer 2 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill 2\\nfill"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'fill 0 discard 0'\nassert solution('10') == 'fill 1 discard 2'\nassert solution('100') == 'fill 2 discard 2'\nassert solution('1') == 'fill 2 discard 2'\nassert solution('8') == 'fill 2 discard 2'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2') == 'fill 0\\ntransfer 1 1\\ndiscard 1\\n'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n2\n7 8\n10\n\"\"\",\n    \"\"\"\n2\n0\n1\n\"\"\",\n) == \"\"\"\ndiscard 1\ndiscard 1\n\"\"\",\n    \"\"\"\n3\n4 5\n6 7 8\n\"\"\",\n) == \"\"\"\ndiscard 2\ndiscard 3\ndiscard 1\n\"\"\",\n    \"\"\"\n10\n8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n\"\"\",\n    \"\"\"\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('1\\n1\\n0\\n2\\n1\\n0\\n1') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\nassert solution('5\\n0 1 3 2\\n5 1 3 2\\n4 0 1 3 2\\n1 0 1 3 2\\n1 0 1 3 2') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7 8\\n10\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\"\nassert solution(\"3\\n5 3\\n7\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ndiscard 1\"\nassert solution(\"5\\n5 1\\n2\\n\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ndiscard 1\"\nassert solution(\"1\\n7\\n\") == \"impossible\"\nassert solution(\"2\\n2\\n\") == \"impossible\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\n'\nassert solution('3\\n0 4\\n10\\n0\\n100\\n1\\n99\\n0\\n50\\n1\\n100\\n1\\n99\\n1\\n100\\n1\\n0\\n100\\n1\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n100\\n1\\n0\\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n10\n10''') == '''\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\ndiscard 1\nfill 2\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\n\nassert solution('10\\n100') == 'fill 10\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10 7\\ntransfer 10 8\\ntransfer 10 9\\ntransfer 10 0\\ntransfer 10 1\\ntransfer 10 2\\ntransfer 10 3\\ntransfer 10 4\\ntransfer 10 5\\ntransfer 10 6\\ntransfer 10"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    10 4 3\n    \"\"\"\n) == \"27\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 4 3\n''') == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4 3') == '27'\nassert solution('16 7 5') == '14'\nassert solution('1000000000 1000000000 1000000000') == '1000000000'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"27\"\nprint(solution())\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 4 3\n''') == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('10 20 3') == '6'\nassert solution('100 10 3') == '101'\nassert solution('100 20 3') == '101'\nassert solution('1000 10 3') == '1'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    10 4 3\n    \"\"\") == \"\"\"\n27\n\"\"\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"10 4 3\"\n) == \"27\"\n\nassert solution(\n    \"1 1 1\"\n) == \"1\"\n\nassert solution(\n    \"10 10 10\"\n) == \"10\"\n\nassert solution(\n    \"10 10 10\"\n) == \"10\"\n\nassert solution(\n    \"100 100 100\"\n) == \"100\""
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('1 1 1') == '1'\nassert solution('1000 2 3') == '1000'\n\"\"\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '27'\n\nSample Input:\n20 3 1\nSample Output:\n20\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1''') == '4'\nassert solution('''5 2 2\n1 3 1\n2''') == '-1'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '3'\n\nassert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '-1'\n\nassert solution('''\n4 3 5\n4 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '4'\n\nassert solution('''\n10 2 5\n8 2 7 6 3 4 1\n2\n1 2 1\n2\n1 1 1\n2\n''') == '3'\n\nprint('All test cases passed!')"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3 5\") == \"3\", \"Wrong\"\nassert solution(\"4 3 5\") == \"3\", \"Wrong\"\nassert solution(\"4 3 5\") == \"3\", \"Wrong\"\nassert solution(\"4 3 5\") == \"3\", \"Wrong\"\n\nfrom typing import List\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2') == '3'\nassert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '4'"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '4'\nassert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '-1'\nassert solution('''\n4 3 5\n1 2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '2'\nassert solution('''\n4 3 5\n1 2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '4'\nassert solution('''\n4 3 5\n1 2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 5\n2 3 1 2\n2\n1 3 3\n2''') == \"3\"\nassert solution('''5 4 2\n2 3 1 2\n1 3 3\n2\n1 1 1\n2''') == \"4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 3 1 2\\n2\\n1 3 3\\n2') == '3'\nassert solution('10 20 30 40 50 60 70 80 90 100\\n4 5\\n5\\n3\\n5\\n5\\n4\\n1 2 3\\n2') == '10'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5\") == \"3\"\nassert solution(\"4 3 5 4 3 1 2\") == \"3\"\nassert solution(\"4 3 5 3 3 1 2\") == \"2\"\nassert solution(\"4 3 5 3 3 1 2\") == \"4\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n\"\"\") == \"4\"\nassert solution(\"\"\"4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 5') == '4'\nassert solution('1 2 3') == '-1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1000\\n1000\\n') == '533.3333333333'\nassert solution('1\\n1000\\n1001\\n') == '522.5'\nassert solution('1\\n1000\\n2000\\n') == '488.0'\nassert solution('1000\\n1000\\n1000\\n') == '1000.0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 3 9\n\"\"\") == \"22.5\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 100 1000') == '533.3333333333'\nassert solution('1000 10000 1') == '1054.3333333333'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\nassert solution('1000000 1000000 1000000\\n') == '10000000000'\nprint('PASSED')\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1000 3000 1000\n\"\"\") == \"533.3333333333\"\nassert solution(\"\"\"\n5000 10000 5000\n\"\"\") == \"1000000000.000000\"\nassert solution(\"\"\"\n10000 10000 10000\n\"\"\") == \"1000000000000.000000\"\nassert solution(\"\"\"\n0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1000') == '533.3333333333'\nassert solution('1 2 500') == '500.0'\nassert solution('1 3 200') == '200.0'\nassert solution('1 4 1000') == '533.3333333333'\nassert solution('2 2 500') == '500.0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1000 3000 1000\n'''\n) == '533.3333333333'\nassert solution(\n'''\n1000 5000 1000\n'''\n) == '-1'\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    ('input_s', 'expected'),\n    (\n        (\n            '''\n            1000 3000 1000\n            ''',\n            533.3333333333,\n        ),\n    ),\n)\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 1000 1000') == '533.3333333333'\nassert solution('1000 200 1000') == '66.6666666666666'\nassert solution('1000 1000 1000') == '666.66666666666'\nassert solution('1000 2000 1000') == '666.66666666666'\nassert solution('1000 2000 2000') == '666.66666666666'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '533.3333333333'\nassert solution('1000 3000 1000') == '533.3333333333'\nassert solution('-1') == '0'\nassert solution('1000 -1000 1000') == '0'\nassert solution('-1 -1') == '0'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n5\\n') == '533.3333333333'\nassert solution('3\\n5\\n6\\n') == '566.6666666667'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 0\n10 0\n10 10''') == '14.14'\n\nassert solution('''5 0\n0 0\n0 0\n0 0\n0 0\n0 0''') == '10.00'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 0\\n10 10') == '14.14'\nassert solution('1000000000 0\\n10000000000 1000') == '10000001'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2 0\n10 0\n10 10\n\"\"\") == \"14.14\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 0\n10 0\n10 10\n''') == '14.14'\n\nassert solution('''\n1 0\n10 0\n10 10\n''') == '14.14'\n\nassert solution('''\n1 0\n2 5\n2 10\n''') == '4.07'\n\nassert solution('''\n3 3\n1 3\n0 4\n''') == '2.20'\n\nassert solution('''\n3 3\n1 3\n3 3\n''') == '2.27'"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0\\n10 0\\n10 10') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n2 2\n4 4\n3 3\n5 5\n1 2\n4 3\n2 4''') == \"14.14\"\nassert solution('''10 10\n10 10\n1 1\n1 1\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n3 2\n3 2\n3 3\n3 3\n4 4\n2 2\n2 2\n3 2\n3 3\n3 3\n3 3\n4 4\n2 2\n2 2\n2 2\n2 2\n2 2\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 0\n10 10\n''') == '14.14'\nassert solution('''\n8 0\n8 9\n''') == '17.79'\n\nassert solution('''\n5 0\n0 0\n0 0\n0 0\n0 0\n''') == '11.81'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '8.06'\nassert solution('5') == '12.34'\nassert solution('6') == '7.27'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 0\\n0 0\\n1 1\\n2 0\\n') == '14.14'\nassert solution('3 3\\n0 0\\n1 1\\n2 2\\n') == '20.20'"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0\\n2 0') == '2.00'\nassert solution('2 0\\n2 0') == '1.00'\nassert solution('1 0\\n1 0') == '1.00'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '0 2\\n0 0\\n1 2\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"\"\"123457 0\n0 2\n\"\"\"\"\n\nassert solution(\"\"\"\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n\"\"\") == \"\"\"123457 0\n0 2\n\"\"\"\"\n\nassert solution(\"\"\"\n3 2\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n\"\"\") == \"\"\"123457 0\n0 2\n\"\"\"\"\n\nassert solution(\"\"\"\n3 2\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n\"\"\") == \"\"\"123457 0\n0 2\n\"\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"123457 0\\n0 2\\n123458 1\\n\"\nassert solution(\"\"\"\n1\n3\n5\n7\n\"\"\") == \"3 0\\n0 1\\n3 1\\n\"\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"3 1\\n0 2\\n\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 5\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"123457 0\\n0 2\\n123458 1\\n\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"123457 0\"\nassert solution(\"3 1\") == \"123456 2\""
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n', 'Wrong result'"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1 2'\nassert solution('1\\n1\\n') == '1 0'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123456\\n123458\\n123457') == '123457 0\\n1 2'\nassert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123456\\n123458\\n123457') == '123457 0\\n1 2'\nassert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123456\\n123458\\n123457') == '123457 0\\n1 2'\nassert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123456\\n123458\\n123457') == '123457 0\\n1 2'\nassert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123456\\n123458\\n123457') == '123457 0\\n1 2'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"123457 0\\n0 2\\n123458 1\\n\", \"You are wrong!\""
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '123457 0\\n0 2\\n123458 1\\n'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == '90'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 5 10 2 5\\n2 4 5 1 3') == \"90\"\nassert solution('5\\n1 2 3 4 5\\n5 2 1 3 4\\n4 5 3 2 1\\n3 1 4 2 5\\n3 4 5 1 2') == \"180\"\nassert solution('5\\n1 2 3 4 5\\n5 2 1 3 4\\n4 5 3 2 1\\n3 1 4 2 5\\n3 4 5 1 2') == \"360\"\n\"\"\"\n\nimport sys\nfrom itertools import permutations\n\ninput = sys.stdin.read()"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"90\"\nassert solution(\"2 4 5 1 3\") == \"20\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nassert solution('''\n1\n2 3 5 4\n''') == '0'\nassert solution('''\n2\n1 1 1 1\n''') == '2'\n'''"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 5 1 3') == 90\nassert solution('10 5 10 2 5 1 3') == 150"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '90'\nassert solution('100') == '891'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n3 10 5 2 5\") == \"90\"\nassert solution(\"5\\n3 10 5 2 5\\n2 4 5 1 3\") == \"90\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"90\"\nassert solution(['3', '5', '10', '2', '5', '10', '2', '5', '1', '3']) == \"90\"\nassert solution(['1', '2', '3', '4', '5']) == \"10\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"90\"\nassert solution(\"3 3 1 3 5 1 2 1 2 3\") == \"27\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3 5 10 2 5') == '90'\nassert solution('5\\n3 5 10 2 5') == '90'\nassert solution('6\\n4 3 1 5 2 8') == '104'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n') == '6.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1 2 3\n0 2 2\n''') == \"3.0\"\nassert solution('''\n2\n0 1 5\n1 0 1\n''') == \"1.5\"\nassert solution('''\n3\n1 2 3\n0 4 3\n0 8 2\n''') == \"6.0\"\n'''"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nassert solution('''\n3 10\n1 2 6\n0 4 3\n1 5 6\n''') == '8.000000'\n'''\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\nassert solution(\"10 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\nassert solution(\"3 10\\n1 2 6\\n0 4 3\\n0 8 2\") == \"6.000000\"\nassert solution(\"3 5\\n2 3 3\\n0 2 3\") == \"4.333333\"\nassert solution(\"6 6\\n3 3 2\\n0 2 1\") == \"5.0\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 6') == '6.000000'\n\nstdin = \"\"\"\n3 2\n1 0\n0 2\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n2 5\n1 2\n1 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n3 3\n1 2\n1 3\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n2 3\n0 0\n1 0\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 0 1\") == \"1\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 10') == '6.000000'\nassert solution('100 5 2') == '15.000000'\nassert solution('4 2 3') == '3.000000'\nassert solution('1 0 5') == '3.000000'\nassert solution('1 1 2') == '2.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6.000000\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 10\\n\"\n    \"1 2 6\\n\"\n    \"0 4 3\\n\"\n    \"0 8 2\\n\"\n    ) == \"6.000000\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2 6\n0 4 3\n0 8 2''') == '6.000000'\nassert solution('''3 5\n1 2 6\n0 4 3\n0 8 2\n''') == '10.000000'\nassert solution('''4 4\n0 1 2\n1 3 4\n1 1 4\n0 2 4''') == '10.000000'\nassert solution('''5 2\n1 2 6\n0 4 3\n0 8 2\n0 2 4\n''') == '9.000000'\nassert solution('''6 5\n1 2 6\n0 4 3\n0 8 2\n0 2 4\n0 1 4\n''') == '9.000000'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n1\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n1.\n..\n0\n\"\"\"\n\nassert solution(\n    \"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n1.\n..\n0\n\"\"\"\n\nassert solution(\n    \"\"\"\n3\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n1.\n..\n0\n\"\"\"\n\nassert solution(\n    \"\"\"\n4\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n1.\n..\n0\n\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1.\\n..\\n0\"\nassert solution(\"0\") == \".\\n.\\n\"\nassert solution(\"1\") == \".\\n.\\n.\\n\"\nassert solution(\"2\") == \"1.\\n..\\n0\"\nassert solution(\"3\") == \"1.\\n.\\n.\\n.\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1\n..\n0\nSample Output:\n1\n..\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 0\n1 1\n2\n\"\"\") == \"\"\"\n..\n.\n.\n\"\"\".strip()\n\nassert solution(\"\"\"\n6\n1 0\n1 1\n1 2\n1 3\n2 1\n2 2\nSample Input:\n11\n0 0\n1 0\n0 1\n0 1\n1 1\n0 0\nSample Output:\n1.\n2.\n3.\n4.\n5.\n6.\n7.\n8.\n9.\n10.\n11.\n12.\n13.\n14.\n15.\n16.\n17.\n18.\n19.\n20.\n21.\n22.\n23.\n24.\n25.\n26.\n27.\n28.\n29.\n30.\n\"\"\".strip()) == \"\"\"\n1.\n2.\n3.\n4.\n5.\n6.\n7.\n8.\n9.\n10.\n11.\n12.\n13.\n14.\n15.\n16.\n17.\n18.\n19.\n20.\n21.\n22.\n23.\n24.\n25.\n26.\n27.\n28.\n29.\n30.\n31.\n32.\n33.\n34.\n35.\n36.\n37.\n38.\n39.\n40.\n41.\n42.\n43.\n44.\n45.\n46.\n47.\n48.\n49.\n50.\n51.\n52.\n53.\n54.\n55.\n56.\n57.\n58.\n59.\n60.\n61.\n62.\n63.\n64.\n65.\n66.\n67.\n68.\n69.\n70.\n71.\n72.\n73.\n74.\n75.\n76.\n77.\n78.\n79.\n80.\n81.\n82.\n83.\n84.\n85.\n86.\n87.\n88.\n89.\n90.\n91.\n92.\n93.\n94.\n95.\n96.\n97.\n98.\n99.\n100.\n101.\n102.\n103.\n104.\n105.\n106.\n107.\n108.\n109.\n110.\n111.\n112.\n113.\n114.\n115.\n116.\n117.\n118.\n119.\n120.\n121.\n122.\n123.\n124.\n125.\n126.\n127.\n128.\n129.\n130.\n131.\n132.\n133.\n134.\n135.\n136.\n137.\n138.\n139.\n140.\n141.\n142.\n143.\n144.\n145.\n146.\n147.\n148.\n149.\n150.\n151.\n152.\n153.\n154.\n155.\n156.\n157.\n158.\n159.\n160.\n161.\n162.\n163.\n164.\n165.\n166.\n167.\n168.\n169.\n170.\n171.\n172.\n173.\n174.\n175.\n176.\n177.\n178.\n179.\n180.\n181.\n182.\n183.\n184.\n185.\n186.\n187.\n188.\n189.\n190.\n191.\n192.\n193.\n194.\n195.\n196.\n197.\n198.\n199.\n200.\n201.\n202.\n203.\n204.\n205.\n206.\n207.\n208.\n209.\n210.\n211.\n212.\n213.\n214.\n215.\n216.\n217.\n218.\n219.\n220.\n221.\n222.\n223.\n224.\n225.\n226.\n227.\n228.\n229.\n230.\n231.\n232.\n233.\n234.\n235.\n236.\n237.\n238.\n239.\n240.\n241.\n242.\n243.\n244.\n245.\n246.\n247.\n248.\n249.\n250.\n251.\n252.\n253.\n254.\n255.\n256.\n257.\n258.\n259.\n260.\n261.\n262.\n263.\n264.\n265.\n266.\n267.\n268.\n269.\n270.\n271.\n272.\n273.\n274.\n275.\n276.\n277.\n278.\n279.\n280.\n281.\n282.\n283.\n284.\n285.\n286.\n287.\n288.\n289.\n290.\n291.\n292.\n293.\n294.\n295.\n296.\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.') == '1.\\n..'\nassert solution('2\\n1 1\\n1 1\\n1.') == '2.\\n2.\\n3.'\nassert solution('2\\n1 1\\n1 1\\n1.') == '2.\\n2.\\n3.'\nassert solution('2\\n1 2\\n1 2\\n2.') == '2.\\n2.\\n3.'\nassert solution('2\\n1 3\\n1 3\\n1.') == '2.\\n2.\\n2.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('2.5') == '1'\nassert solution('5') == '3.7'\n'''"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"2.1.1..1.2.1.1..2.1.1.1..1.2.1.1..2.1.1.2..2.1.1.2..2.1.2..1.2.2..1.2.2..1.1.2.1..1.1.2.2..1.2.2.1..2.1.2.2..2.1.2.1..1.1.2.1..1.2.1.1..1.1.2.2..1.1.2.2..2.1.1.1..1.2.2.1..1.2.1.1..1.1.2.2..1.1.2.2..2.1.1.1..2.1.2..1.2.2.1..1.1.2.2..1.2.1.2..1.1.2.1..1.2.2.1..1.2.2.1..2.1.2.1..1.1.2.1..1.2.1.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.2.2..1.2.1.2..1.2.2.1..1.1.2.1..1.1.1.1..1.2.2.1..1.2.1.1..1.2.1.1..1.1.1.1..1.1.2.1..1.2.1.1..1.1.2.1..1.1.2.1..1.2.1.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.2.1..1.2.2.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.2.2..1.1.2.2..1.2.2.1..1.1.2.1..1.1.2.1..1.1.1.1..1.1.1.1..1.1.1.2..1.1.2.1..1.2.2.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.2.1..1.2.2.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.1.2..1.1.2.1..1.1.2.1..1.1.2.2..1.1.1.2..1.1.1.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.1.1..1.1.2.1..1.1.1.1..1.1.1.1..1.1.1.2..1.1.2.1..1.1.2.1..1.1.2.2..1.1.1.2..1.1.1.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.2.1..1.1.2.1..1.1.1.1..1.1.2.1..1.1.2.1..1.1.1.2..1.1.1.2..1.1.2.1..1.1.2.1..1.1.2.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.1.1..1.1.2.1..1.1.2.1..1.1.2.1.."
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"1.\n..\n10\n0 0\n0 0\n1.\n..\n0\n\"\"\")\n\nassert solution(\"\"\"\n1\n0 0\n0 0\n10\n0 0\n1.\n..\n0\n\"\"\") == \"1.\n..\n1\n0 0\n0 0\n10\n0 0\n1.\n..\n0\n\"\"\")\n\nassert solution(\"\"\"\n5\n2 2\n2 2\n1.\n..\n1.\n1.\n\"\"\") == \"1.\n..\n2\n2 2\n2 2\n1.\n..\n1.\n1.\n\"\"\")"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\") == \"1.\\n0.\\n\"\n\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"1.\n..\n2.\n\"\"\".strip()\n\nassert solution(\"\"\"\n3\n0 0\n0 0\n1\n.\n2\n.\n\"\"\") == \"\"\"2.\n3.\n3.\n\"\"\".strip()\n\nassert solution(\"\"\"\n6\n0 0\n0 0\n1\n.\n2\n.\n\"\"\") == \"\"\"3.\n4.\n5.\n\"\"\".strip()\n\nassert solution(\"\"\"\n8\n0 0\n0 0\n1\n.\n2\n.\n3\n.\n4\n.\n5\n.\n6\n.\n7\n.\n\"\"\") == \"\"\"7.\n8.\n7.\n6.\n5.\n4.\n3.\n2.\n1.\n0.\n0.\n\"\"\".strip()\n\nimport sys\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nabca\\nabc\\nabc\\nabc\\nabc') == '1'\nassert solution('1\\nabca\\nabc\\nabc\\nabc\\nabc') == '1'\nassert solution('1\\nabca\\nabc\\nabc\\nabc\\nabc') == 'def'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    6\n    a\n    bc\n    abc\n    ''') == '1'\nassert solution('''\n    6\n    a\n    bc\n    abc\n    ''') == '1'\nassert solution('''\n    6\n    a\n    bc\n    abc\n    ''') == '0'\nassert solution('''\n    6\n    a\n    bc\n    abc\n    ''') == '1'\nassert solution('''\n    6\n    a\n    bc\n    abc\n    ''') == '0'\n''') == '2'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 2\n\"\"\") == \"1\""
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\na\\nbc\\nabc\\n3\\n1 abca\\n2 1\\n2 3') == '1'\nassert solution('4\\nabc\\ndef\\nabc\\nabc\\ndef\\nabc\\nabc\\nabc\\nabc\\nabc\\ndef\\nabc\\nabc\\nabc\\nabc\\nabc\\ndef') == '3'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\"\n\nSample Input:\n8\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyz\n3\n1 abca\n2 1\n3 3\nSample Output:\n0\n1\n0\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1', 'First'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1', 'Second'\n\n'''\nThis is an example test case. You can also write your own input and output to test the results.\n'''\n\n\"\"\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n'\n    'a\\n'\n    'bc\\n'\n    'abc\\n'\n    '3\\n'\n    '1 abca\\n'\n    '2 1\\n'\n    '2 3\\n'\n    ) == '1'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('10') == '1'\nassert solution('20') == '1'\nassert solution('100') == '1'\nassert solution('1000') == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\na\nbc\nabc\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n\nSample Input:\n2\na\nab\nSample Output:\n0\n0\n\"\"\"\n\nn = int(input())\n\nwords = {}\nfor i in range(n):\n    words[i+1] = list(input())\n\nq = int(input())\nfor i in range(q):\n    type = int(input())\n    if type == 1:\n        print(len(words[int(input())]) - len(words[int(input())])%2)\n    else:\n        print(words[int(input())].count(words[int(input())]) )"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1 1\n0''') == 'YES'\nassert solution('''1 1 1 1\n0''') == 'NO'\nassert solution('''0\n2''') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1 1') == 'YES'\nassert solution('2 1 1 1') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution([1, 1, 1, 1]) == \"YES\"\nassert solution([1, 1, 1, 1, 1]) == \"YES\"\nassert solution([1, 1, 1, 1, 1, 1]) == \"YES\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"2 2 2 3\") == \"YES\"\nassert solution(\"2 2 3 2\") == \"NO\""
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 1 1') == 'YES'\nassert solution('0 0 0 0') == 'NO'\nassert solution('0 0 0 0') == 'YES'\nassert solution('0 1 0 1') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('0 0 0 0') == 'NO'\nassert solution('0 0 0 1') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == \"YES\"\nassert solution('3 2 5 1') == \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1 1 1\n''') == 'YES'\nassert solution('''\n1 1 1 1\n''') == 'NO'\nassert solution('''\n5 5 5 5\n''') == 'NO'\n'''\nThe number of items in the boat is $K$, the sum of the items in the boat is $W$ and the sum of the items in the bank is $S$.\n\nA 1 is the first item and so on. The items of the bank are all different. The $i$th item is of type $j$. The output should be 'YES' if it\u2019s possible to transport the items using the given constraints. Otherwise, it should be 'NO'.\n\n''')\nassert solution('''\n3 3 3 3\n''') == 'NO'\n'''\nYou have $W$ wolfs and $S$ sheep. You are willing to take only $C$ cabbages. Your boat can carry up to $K$ cabbages at once. The items on your boat are separated by $S$ places. In one step, you may take one wolf, one sheep, or two cabbages. Which is the best route?\n\nYour objective is to bring the number of items in the boat as low as possible while maximizing the distance.\n\nIf it\u2019s possible to transport the items using the given constraints, print the number of sheep and the number of wolf. If it\u2019s not possible, print the number of sheep and -1.\n\n''') == '2 2'\nassert solution('''\n5 6 5 1\n''') == '1 -1'\n'''\nIf all the items are present in the bank, print the number of sheep and the number of wolf. If it\u2019s not possible, print the number of sheep and -1.\n\n''') == '3 2'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == 'YES'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 96') == \"80.5696000000\"\nassert solution('10 5') == \"89.26666666666666\"\nassert solution('5 5') == \"97.0\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 96 -0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000\") == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\"\nassert solution(\"5 5 5\") == \"95.0\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('-0.0080 1.5417 25.0000') == '80.5696000000'\nassert solution('-0.0080 1.5417 25.0000') == '80.5696000000'\n\"\"\"\n\nimport math\nimport re"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('1 100') == '101.0'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('6 3 -1.9999999999999 -0.99999999999999') == '97.20000000000000'\n\"\"\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n\"\"\"\n) == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == \"80.5696000000\"\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 96 -0.0080 1.5417 25.0000 -0.0080 1.5417 25.0000\") == \"80.5696\"\nprint(solution(*[*map(float, stdin.split())]))\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1\\n') == '2'\nassert solution('4 2 1 2 3 2 3 1 2 3\\n') == '2'\nassert solution('4 2 4 5 7 7 5 3 2\\n') == '4'\nassert solution('8 1 5 3 3 1 2 1 4 2\\n') == '5'\nassert solution('8 0 0 1 5 3 2 4 1 2\\n') == '1'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"4 -1 1 -1 -1 1 1 -1 1\") == \"3\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '2'\nassert solution('6 1 0 0 0 0 1 1') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"0 0 0 1 1 1 0 0 1\n0 1\n1 2\n2 3\n2 4\n3 5\n3 6\n4 7\n4 8\"\"\") == \"2\"\nassert solution(\"\"\"5 2\n3 4 5 6 7 8 9\n9 8 7 6 5 4 3\n1 2 3 4 5 6\n7 8 9 10 11 12\n1 2 3 4 5 6\n9 8 7 6 5 4\n3 4 5 6 7 8\n2 1 3 4 5 6\n5 4 3 2 1\"\"\") == \"6\"\n\nassert solution(\"\"\"5 3\n0 0 0 1 1 1\n1 1\n0 2\n0 3\n1 4\n3 2\"\"\") == \"3\"\n\nassert solution(\"\"\"10\n5 6 7 8 9\n9 8 7 6 5 4\n1 2 3 4 5 6\n7 8 9 10 11 12\n1 2 3 4 5 6\n9 8 7 6 5 4\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1 2 3 4 5 6\n3 2 1 0 0 0\n0 0 1 1 1 1\n0 0 1 1 1 1\n5 6 7 8 9\n1"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('4 1 1 1 1 1 1 1 1') == '5'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\nassert solution('5 0 1 0 0 1 1 0 0 1') == '3'\nassert solution('1 0 0 1 1 1 0 0 1') == '1'\nassert solution('3 0 0 0 0 0 0 1 1 1') == '3'\nassert solution('0 0 0 0 0 0 0 1 0 1') == '1'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0 0 1 1 1 0 0 1') == '2'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '1'\nassert solution('1 1') == '1'\nassert solution('1 0 1 1 1 1 1 0 1') == '2'\nassert solution('1 0 0 1 0 1 0 0 1') == '1'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"1\"\nassert solution(\"3 1 2\") == \"2\"\nassert solution(\"1 4 2 0 0 0 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"6 3 2\") == \"impossible\"\nassert solution(\"2 1 2\") == \"impossible\"\nassert solution(\"8 2 2\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 3') == '1400'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\") == \"impossible\"\nassert solution(\"3 2 3\") == \"1400\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 2 1\n0 0 400\n10 0 400\n10 0 400\n4 0 200\n1 0 200\n\"\"\") == \"1400\"\nassert solution(\"\"\"\n4 2 2\n0 0 800\n1000 0 800\n2000 0 800\n3000 0 800\n1300 0 800\nSample Output:\n15000\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 2 2\n0 0 400\n1000 0 400\n3000 0 400\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n\"\"\") == \"1400\"\nassert solution(\"\"\"\n1 3 2\n0 0 400\n1000 0 400\n2000 0 400\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 1 1\n0 0 400\n1000 0 400\n2000 0 400\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 3') == '1400'\nassert solution('5 3 2') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n\"\"\") == \"1400\"\nassert solution(\"\"\"\n3 3 3\n0 0 400\n1000 0 400\n2000 0 400\n3000 0 400\n1300 0 400\n1500 0 400\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n2 3 3\n0 0 400\n1000 0 400\n2000 0 400\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1 3\n0 0 400\n1000 0 400\n2000 0 400\n3000 0 400\n1300 0 400\n1500 0 400\n\"\"\") == \"1400\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150''') == '1400'\nassert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150''') == 'impossible'\nassert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150''') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 1 1\n0 0 300\n1000 0 300\nSample Input:\n1 1 1\n0 0 300\nSample Output:\nimpossible\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2 2 2\n0 0 300\n1000 0 300\nSample Input:\n3 3 2\n-1 0 1000\n0 0 400\n1000 0 400\n0 -500 1000\nSample Output:\n1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2 3 2\n-1 0 1000\n0 0 300\n1000 0 300\n0 -500 1000\nSample Input:\n1 2 1\n0 0 300\n1000 0 300\nSample Output:\nimpossible\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2 2 2\n0 0 300\n1000 0 300\nSample Input:\n3 2 1\n-1 0 1000\n0 0 400\n1000 0 400\n0 -500 1000\nSample Output:\nimpossible\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n2 2 2\n-1 0 1000\n0 0 300\n1000 0 300\nSample Input:\n3 3 2\n-1 0 1000\n0 0 400\n1000 0 400\n-500 1000\nSample Output:\n1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 3') == 'impossible'\nassert solution('1 1 1') == 'impossible'\nassert solution('4 4 6') == '0'\nassert solution('5 5 5') == '1400'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 10\") == \"3907\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\\nstockholm\\namsterdam\\nlondon\\nberlin\\ncopenhagen\\noslo\\nhelsinki\\ndublin\\nreykjavik\\nbrussels\\noslo stockholm\\noslo london\\noslo reykjavik\\noslo brussels\\noslo copenhagen\\noslo helsinki\\noslo amsterdam\\noslo dublin\\noslo berlin\\noslo stockholm\\noslo brussels\\noslo copenhagen\\noslo helsinki\\noslo amsterdam\\nlondon amsterdam\\nstockholm amsterdam\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo brussels\\nlondon brussels\\noslo stockholm\\noslo amsterdam\\noslo dublin\\noslo reykjavik\\noslo helsinki\\noslo copenhagen\\noslo amsterdam\\noslo helsinki\\noslo amsterdam\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\noslo brussels\\noslo brussels\\noslo brussels\\noslo brussels\\noslo reykjavik\\noslo reykjavik\\nlondon amsterdam\\nstockholm amsterdam\\noslo london\\noslo reykjavik\\noslo dublin\\noslo brussels\\noslo helsinki\\noslo amsterdam\\noslo dublin\\noslo amsterdam\\nlondon amsterdam\\nstockholm amsterdam\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\nlondon berlin\\nstockholm berlin\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo brussels\\nlondon brussels\\nstockholm brussels\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo brussels\\noslo helsinki\\noslo amsterdam\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\nlondon amsterdam\\nstockholm amsterdam\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo brussels\\noslo helsinki\\noslo amsterdam\\noslo dublin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo berlin\\nlondon amsterdam\\nstockholm amsterdam\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo brussels\\noslo helsinki\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo reykjavik\\noslo dublin\\noslo berlin\\nlondon reykjavik\\nstockholm reykjavik\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo brussels\\noslo helsinki\\noslo amsterdam\\noslo dublin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo reykjavik\\nlondon reykjavik\\nstockholm reykjavik\\noslo london\\noslo reykjavik\\noslo dublin\\noslo berlin\\noslo amsterdam\\noslo dublin\\noslo brussels\\"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 15\") == \"3907\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 15') == '3907'\nassert solution('50 60') == '3907'\nassert solution('10 10') == '40'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 15\\n'\n               'stockholm\\n'\n                'amsterdam\\n'\n                'london\\n'\n                'berlin\\n'\n                'copenhagen\\n'\n                'oslo\\n'\n                'helsinki\\n'\n                'dublin\\n'\n               'reykjavik\\n'\n                'brussels\\n'\n                'oslo stockholm 415\\n'\n               'stockholm helsinki 396\\n'\n                'oslo london 1153\\n'\n                'oslo copenhagen 485\\n'\n               'stockholm copenhagen 522\\n'\n                'copenhagen berlin 354\\n'\n                'copenhagen amsterdam 622\\n'\n                'helsinki berlin 1107\\n'\n                'london amsterdam 356\\n'\n                'berlin amsterdam 575\\n'\n                'london dublin 463\\n'\n               'reykjavik dublin 1498\\n'\n               'reykjavik oslo 1748\\n'\n                'london brussels 318\\n'\n                'brussels amsterdam 173\\n'\n               'stockholm amsterdam\\n'\n                'oslo london\\n'\n               'reykjavik dublin') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 15') == '3907'\nassert solution('15 20') == '2920'\nassert solution('15 20') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n''') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 10\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n''') == '3907'\n\n\nassert solution('''15 10\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\n''') == '3797'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\nassert solution('''40 20\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\naa\nab\nac\nad\nae\naf\nag\nah\nai\naj\nak\nal\nam\nan\nao\nap\naq\nar\nas\nat\nau\nav\naw\nax\nay\naz\nba\nbb\nbc\nbd\nbe\nbf\nbg\nbh\nbi\nbj\nbk\nbl\nbm\nbn\nbo\nbp\nbq\nbr\nbs\nbt\nbu\nbv\nbw\nbx\nby\nbz\nca\ncb\ncc\ncd\nce\ncf\ncg\nch\nci\ncj\nck\ncl\ncm\ncn\nco\ncp\ncq\ncr\ncs\nct\ncu\ncv\ncw\ncx\ncy\ncz\nda\ndb\ndc\ndd\nde\ndf\ndg\ndh\ndi\ndj\ndk\ndl\ndm\ndn\ndo\ndp\ndq\ndr\nds\ndt\ndu\ndv\ndw\ndx\ndy\ndz\nea\neb\nec\ned\nee\nef\neg\neh\nei\nej\nek\nel\nem\nen\neo\nep\neq\ner\nes\net\neu\nev\new\nex\ney\nez\nfa\nfb\nfc\nfd\nfe\nff\nfg\nfh\nfi\nfj\nfk\nfl\nfm\nfn\nfo\nfp\nfq\nfr\nfs\nft\nfu\nfv\nfw\nfx\nfy\nfz\nga\ngb\ngc\ngd\nge\ngf\ngg\ngh\ngi\ngj\ngk\ngl\ngm\ngn\ngo\ngp\ngq\ngr\ngs\ngt\ngu\ngv\ngw\ngx\ngy\ngz\nha\nhb\nhc\nhd\nhe\nhf\nhg\nhh\nhi\nhj\nhk\nhl\nhm\nhn\nho\nhp\nhq\nhr\nhs\nht\nhu\nhv\nhw\nhx\nhy\nhz\nja\njb\njc\njd\nje\njf\njg\njh\nji\njj\njk\njl\njm\njn\njo\njp\njq\njr\njs\njt\nju\njv\njw\njx\njy\njz\nka\nkb\nkc\nkd\nke\nkf\nkg\nkh\nki\nkj\nkk\nkl\nkm\nkn\nko\nkp\nkq\nkr\nks\nkt\nku\nkv\nkw\nkx\nky\nkz\nla\nlb\nlc\nld\nle\nlf\nlg\nlh\nli\nlj\nlk\nll\nlo\nlp\nlq\nlr\nls\nlt\nlu\nlv\nlw\nlx\nly\nlz\nma\nmb\nmc\nmd\nme\nmf\nmg\nmh\nmi\nmj\nmk\nml\nmm\nmn\nmo\nmp\nmq\nmr\nms\nmt\nmu\nmv\nmw\nmx\nmy\nmz\nna\nnb\nnc\nnd\nne\nnf\nng\nnh\nni\nnj\nnk\nnl\nnm\nnn\nno\nnp\nnq\nnr\nns\nnt\nnu\nnv\nnw\nnx\nny\nnz\noa\nob\noc\nod\noe\nof\nog\noh\noi\noj\nok\nol\nom\non\noo\nop\noq\nor\nos\not\nou\nov\now\nox\noy\noz\npa\npb\npc\npd\npe\npf\npg\nph\npi\npj\npk\npl\npm\npn\npo\npq\npr\nps\npt\npu\npv\npw\npx\npy\npz\nqa\nqb\nqc\nqd\nqe\nqf\nqg\nqh\nqi\nqj\nqk\nql\nqm\nqn\nqo\nqp\nqq\nqq\nqr\nqs\nqt\nqu\nqv\nq"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"2\"\nassert solution(\"6 2\\n5 1 3 4 2 6\\n0 1\\n1 3\\n1 2\\n2 2\\n2 3\\n3 4\\n0 1\\n1 3\\n1 2\\n1 4\\n0 3\\n1 5\\n0 2\\n3 5\\n2 4\\n3 4\\n4 5\\n5 6\\n1 1\\n2 3\\n1 2\\n2 4\\n2 5\\n3 2\\n4 4\\n5 3\\n4 5\\n5 6\\n1 3\\n2 4\\n1 4\\n2 5\\n1 5\\n2 5\\n0 6\\n1 4\\n2 5\\n1 6\\n1 6\\n1 6\\n2 5\\n3 4\\n2 6\\n2 6\\n2 6\\n1 4\\n0 1\\n3 4\\n2 4\\n1 6\\n0 1\\n1 6\\n3 5\\n0 3\\n1 5\\n1 5\\n2 6\\n0 1\\n1 6\\n1 6\\n2 5\\n1 5\\n2 4\\n1 4\\n2 6\\n1 3\\n2 5\\n1 6\\n2 4\\n0 2\\n1 3\\n2 6\\n1 5\\n0 2\\n2 6\\n0 1\\n1 6\\n3 4\\n1 4\\n0 3\\n2 5\\n2 5\\n2 5\\n0 2\\n1 4\\n2 5\\n1 6\\n1 4\\n1 4\\n0 1\\n2 6\\n2 5\\n1 4\\n0 1\\n2 5\\n1 4\\n1 6\\n1 4\\n1 4\\n0 1\\n0 2\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n0 1\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n0 1\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n0 1\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n0 2\\n1 4\\n0 1\\n1 4\\n0 1\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n0 2\\n1 4\\n1 4\\n0 1\\n1 4\\n1 4\\n1"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\n\nassert solution('''\n5 7\n6 5 4 6 5 3 2 1\n2 1\n1 7\n7 1\n7 1\n7 1\n7 1\n''') == '1'\n\nassert solution('''\n6 5\n4 3 2 4 2 5 1\n2 1\n4 4\n5 3\n5 2\n5 4\n''') == '4'\n\nassert solution('''\n6 7\n6 3 2 4 3 3 2\n1 2\n1 2\n2 2\n2 1\n2 1\n3 1\n''') == '2'\n\nassert solution('''\n6 5\n4 2 3 3 4 4 3\n2 1\n1 2\n3 4\n2 3\n2 3\n1 2\n''') == '1'"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n10 20\n1 1 1 2 1 2 2 3 2 3 3\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\nassert solution('''6 3\n3 1 3 4 2\n1 1\n1 1\n0 5\n0 9\n4 5\n2 1\n''') == '2'\nassert solution('''8 3\n3 1 3 4 2\n1 1\n0 5\n0 9\n4 5\n2 1\n1 1\n2 1\n''') == '1'\nassert solution('''10 3\n3 1 3 4 2\n1 1\n1 1\n0 5\n0 9\n4 5\n2 1\n1 1\n2 1\n1 1\n''') == '2'\nassert solution('''12 3\n3 1 3 4 2\n1 1\n0 5\n0 9\n4 5\n2 1\n1 1\n2 1\n1 1\n0 5\n0 9\n4 5\n2 1\n1 1\n2 1\n1 1\n''') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '1'\nassert solution('5 4\\n4 2 3 1\\n0 5\\n0 9\\n4 5\\n2 1\\n') == '2'\nassert solution('5 4\\n4 2 3 1\\n0 5\\n0 9\\n3 1 3 4 2\\n') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n5 4\n1 2 1 2\n0\n0\n1 1\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n3 5\") == \"2\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n5 1\") == \"2\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n4 1\") == \"2\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n3 5\") == \"1\""
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\n\nassert solution('''\n7 5\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n5 3\n0 6\n''') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n10 2\n2 4\n''') == '1'\nassert solution('''\n5\n10 1 2 3 4\n4 5\n8 2\n0 2\n8 1\n''') == '3'\nassert solution('''\n3\n1 2\n0\n''') == '1'\nassert solution('''\n2\n3 1\n0\n''') == '1'\nassert solution('''\n2\n0 1\n''') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '1'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5') == '00010'\nassert solution('4 5') == '00100'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n1\n0\n''') == '01000'\nassert solution('''\n2\n1\n1\n''') == '00000'\nassert solution('''\n3\n1\n0\n''') == '00000'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '00010'\nassert solution('01') == '00010'\nassert solution('11') == '01101'\nassert solution('101') == '01101'\nassert solution('111') == '01010'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join([\n    '1 2',\n    '0 0',\n    '1 0',\n])) == '00010', 'Example Test'\n\nassert solution('\\n'.join([\n    '1 2',\n    '0 1',\n    '1 0',\n])) == '00100', 'Example Test'\n\nassert solution('\\n'.join([\n    '1 2',\n    '1 1',\n    '1 1',\n])) == '00001', 'Example Test'\n\nassert solution('\\n'.join([\n    '1 2',\n    '0 1',\n    '0 1',\n])) == '00010', 'Example Test'\n\nassert solution('\\n'.join([\n    '1 2',\n    '1 1',\n    '1 1',\n])) == '00010', 'Example Test'"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n00\n11\n''') == '00010','sample tests should print 1'\nassert solution('''\n3 2\n00\n10\n01\n''') == '0010','sample tests should print 10'\nassert solution('''\n4 1\n00\n11\n01\n10\n''') == '00010','sample tests should print 1'\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n0\n0''') == '0'\nassert solution('''4\n0\n1\n0\n1''') == '001'\nassert solution('''3\n1\n0\n0\n1''') == '010'\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5') == '00010'\nassert solution('1 1') == '11111'\nassert solution('1 2 3') == '1110101'\nassert solution('1 3') == '0111011'\nassert solution('2 5') == '11110111'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5') == '00010'\nassert solution('5 4') == '01101'\nassert solution('100 100') == '01101'\nassert solution('1000010000') == '01101'\nassert solution('0') == '01010'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6 5\n00100\n00011\n11101\n11111\n01010\n01001\n''') == '00100'\nassert solution('''\n5 5\n01010\n01000\n00100\n11110\n01001\n''') == '00100'\n'''\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0') == '0'\nassert solution('0\\n0') == '0'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n4 4\n4 1\n5 6\n6 1\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n7\n4 2\n0 2\n1 3\n1 4\n1 5\n1 6\n2 4\n2 5\n3 4\n3 5\n3 6\n4 2\n4 5\n5 2\n6 4\n6 5\n7 4\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n9\n4 1\n6 2\n1 6\n2 5\n2 4\n3 3\n1 7\n5 3\n4 4\n1 3\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n1\n10\n2 10\n10 2\n1 2\n3 10\n4 4\n5 5\n6 7\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\n10\n10 2\n10 5\n5 5\n4 4\n10 1\n\"\"\") == \"possible\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"possible\"\nassert solution(\"3\") == \"impossible\"\n\n'''\nfrom bisect import bisect_right\nclass Solution:\n    def solution(self, n):\n        def countingSort(lo, hi, freqs):\n            freqs.sort()\n            freqs = freqs[::-1]\n            for i in range(lo, hi):\n                freqs[freqs[i]], freqs[i] = freqs[i], freqs[lo]\n            return freqs\n\n        for i in range(0, len(n)):\n            n[i] = n[i].split(' ')\n        freqs = []\n        freqs.append(0)\n        n.sort()\n        freqs.append(n[-1][0])\n        n.sort()\n        count = 0\n        for i in range(1, len(n)):\n            count += 1\n            freqs = countingSort(0, len(freqs), freqs)\n        count = 0\n        for i in range(1, len(n)):\n            if n[i][1]!= n[i - 1][1]:\n                count += 1\n                freqs = countingSort(0, len(freqs), freqs)\n        if count == len(n):\n            return \"possible\"\n        return \"impossible\"\n\n\nfrom collections import deque\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = deque()\n        for i in stdin.split('\\n'):\n            n.append([int(i[0]), int(i[1])])\n        n = sorted(n, key=lambda x: x[0])\n        n = sorted(n, key=lambda x: x[1])\n        return \"impossible\" if n[0][0]!= n[-1][0] or n[0][1]!= n[-1][1] else \"possible\"\n\n\nfrom collections import deque\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = deque()\n        for i in stdin.split('\\n'):\n            n.append(list(map(int, i.split(' '))))\n        n.sort(key=lambda x: x[0])\n        n.sort(key=lambda x: x[1])\n        return \"impossible\" if n[0][0]!= n[-1][0] or n[0][1]!= n[-1][1] else \"possible\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n6 2') == 'possible'\nassert solution('1\\n6 12') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == 'possible'\nassert solution('6 2') == 'impossible'\n'''\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n5 4\\n6 12') == 'possible'\nassert solution('10\\n2 1\\n3 4\\n6 5\\n10 1\\n12 4\\n11 8\\n10 2\\n12 6\\n12 3\\n10 6\\n10 1\\n12 4\\n11 8\\n10 2\\n') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n3 4\n3 5\n3 6\n''') == 'impossible'\n\nassert solution('''\n2\n4 3\n3 4\n''') == 'possible'\n\nassert solution('''\n3\n1 1\n1 1\n''') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n6 2\n6 12\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n10\n1 1\n2 3\n2 4\n3 4\n4 5\n4 6\n5 7\n5 8\n6 9\n6 10\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n6\n0 4\n6 12\n\"\"\") == \"impossible\""
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == 'possible'\nassert solution('6 2') == 'impossible'\nassert solution('1 2') == 'impossible'\nassert solution('5 2') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n0 4\\n6 12') == 'possible'\nassert solution('1\\n6 1\\n0 4\\n6 12') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'possible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n-2 4 3\n-1 -2 3\n-1 -3 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n-3 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\nassert solution('5\\n0 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '1'\nassert solution('5\\n5 0 1\\n5 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '0'\nassert solution('5\\n5 0 1\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '0'"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\nassert solution('''10\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '1'\nassert solution('''5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '3'\n\n\"\"\"\nimport math"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == \"2\"\n\nassert solution('''\n3\n1 5 0\n0 5 1\n1 -5 1\nSample Output:\n1\n''') == \"1\"\n\nassert solution('''\n1\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == \"0\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5\\n\"\n    \"0 0 1\\n\"\n    \"10 0 1\\n\"\n    \"0 5 1\\n\"\n    \"0 -5 1\\n\"\n    \"-5 0 1\\n\"\n) == \"2\"\nassert solution(\n    \"3\\n\"\n    \"5 0 1\\n\"\n    \"0 5 1\\n\"\n    \"0 -5 1\\n\"\n    \"-5 0 1\\n\"\n) == \"3\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n3 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n0 10 1\n0 -10 1\nSample Input 2:\n3\n5 10 1\n0 5 1\n-5 -10 1\n-5 10 1\nSample Output 2:\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"3\"\nassert solution(\"5 0 0\") == \"1\"\nassert solution(\"5 1 -1\") == \"1\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"Yes\""
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nd\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n\") == \"Yes\"\nassert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3!bobby_dies\\nS 4!bobby_dies\\nS 5!bobby_dies\\nS 6!bobby_dies\\nS 7!bobby_dies\\nS 8!bobby_dies\\nS 9!bobby_dies\\nS 10!bobby_dies\\n\") == \"3 Just A Dream\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n'''\nSample Input:\n10\nE jr_died\nS 1 jr_died\nS 2 jr_died\nE stuff_happens\nE peter_gives_honey\nE morty_gives_honey\nE peter_gives_honey\nS 3 peter_gives_honey\nE peter_gives_honey\nS 4 peter_gives_honey\nS 5 peter_gives_honey\nE peter_gives_honey\nS 6 peter_gives_honey\nS 7 peter_gives_honey\nS 8 peter_gives_honey\nS 9 peter_gives_honey\nS 10 peter_gives_honey\nE all_just_a_dream\nS 1 all_just_a_dream\nS 2 all_just_a_dream\nS 3 all_just_a_dream\nS 4 all_just_a_dream\nS 5 all_just_a_dream\nS 6 all_just_a_dream\nS 7 all_just_a_dream\nS 8 all_just_a_dream\nS 9 all_just_a_dream\nS 10 all_just_a_dream\nE it_goes_on_and_on\nD 10\nS 1!peter_gives_honey\nS 2!peter_gives_honey\nS 3!peter_gives_honey\nS 4!peter_gives_honey\nS 5!peter_gives_honey\nS 6!peter_gives_honey\nS 7!peter_gives_honey\nS 8!peter_gives_honey\nS 9!peter_gives_honey\nS 10!peter_gives_honey\nS 11!peter_gives_honey\nS 12!peter_gives_honey\nS 13!peter_gives_honey\nS 14!peter_gives_honey\nS 15!peter_gives_honey\nS 16!peter_gives_honey\nS 17!peter_gives_honey\nS 18!peter_gives_honey\nS 19!peter_gives_honey\nS 20!peter_gives_honey\nE it_goes_on_and_on\nD 20\nS 21!peter_gives_honey\nS 22!peter_gives_honey\nS 23!peter_gives_honey\nS 24!peter_gives_honey\nS 25!peter_gives_honey\nS 26!peter_gives_honey\nS 27!peter_gives_honey\nS 28!peter_gives_honey\nS 29!peter_gives_honey\nS 30!peter_gives_honey\nS 31!peter_gives_honey\nS 32!peter_gives_honey\nS 33!peter_gives_honey\nS 34!peter_gives_honey\nS 35!peter_gives_honey\nS 36!peter_gives_honey\nS 37!peter_gives_honey\nS 38!peter_gives_honey\nS 39!peter_gives_honey\nS 40!peter_gives_honey\nS 41!peter_gives_honey\nS 42!peter_gives_honey\nS 43!peter_gives_honey\nS 44!peter_gives_honey\nS 45!peter_gives_honey\nS 46!peter_gives_honey\nS 47"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"10\\n\"\n    \"E business_as_usual\\n\"\n    \"E bobby_dies\\n\"\n    \"S 1 bobby_died\\n\"\n    \"E stuff_happens\\n\"\n    \"E jr_does_bad_things\\n\"\n    \"S 2!bobby_dies business_as_usual\\n\"\n    \"E it_goes_on_and_on\\n\"\n    \"D 4\\n\"\n    \"S 1!bobby_dies\\n\"\n    \"S 2!bobby_dies it_goes_on_and_on\"\n) == \"Plot Error\"\n\nassert solution(\n    \"1\\n\"\n    \"E\\n\"\n    \"S 1!\\n\"\n    \"S 2!\\n\"\n    \"S 3!\\n\"\n    \"S 4!\\n\"\n    \"S 5!\\n\"\n    \"S 6!\\n\"\n    \"S 7!\\n\"\n    \"S 8!\\n\"\n    \"S 9!\\n\"\n    \"S 10!\\n\"\n    \"D 1\\n\"\n    \"D 2\\n\"\n    \"D 3\\n\"\n    \"D 4\\n\"\n    \"D 5\\n\"\n    \"D 6\\n\"\n    \"D 7\\n\"\n    \"D 8\\n\"\n    \"D 9\\n\"\n    \"D 10\"\n) == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\ne\\nD\\nS 1!bobby_dies business_as_usual\\ne\\nS 2!bobby_dies\\nE stuff_happens\\nE jr_does_bad_things\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\\n') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies\\n') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Yes\"\nassert solution(\"10\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on\\nD 4\\nS 1!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on\") == \"Yes\"\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes\\n'\n\nassert solution('''\n3\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nS 3!bobby_dies\nS 4!bobby_dies\nS 5!bobby_dies\nS 6!bobby_dies\nS 7!bobby_dies\nS 8!bobby_dies\nS 9!bobby_dies\nS 10!bobby_dies\nS 11!bobby_dies\nS 12!bobby_dies\nS 13!bobby_dies\nS 14!bobby_dies\nS 15!bobby_dies\nS 16!bobby_dies\nS 17!bobby_dies\nS 18!bobby_dies\nS 19!bobby_dies\nS 20!bobby_dies\nS 21!bobby_dies\nS 22!bobby_dies\nS 23!bobby_dies\nS 24!bobby_dies\nS 25!bobby_dies\nS 26!bobby_dies\nS 27!bobby_dies\nS 28!bobby_dies\nS 29!bobby_dies\nS 30!bobby_dies\nS 31!bobby_dies\nS 32!bobby_dies\nS 33!bobby_dies\nS 34!bobby_dies\nS 35!bobby_dies\nS 36!bobby_dies\nS 37!bobby_dies\nS 38!bobby_dies\nS 39!bobby_dies\nS 40!bobby_dies\nS 41!bobby_dies\nS 42!bobby_dies\nS 43!bobby_dies\nS 44!bobby_dies\nS 45!bobby_dies\nS 46!bobby_dies\nS 47!bobby_dies\nS 48!bobby_dies\nS 49!bobby_dies\nS 50!bobby_dies\nS 51!bobby_dies\nS 52!bobby_dies\nS 53!bobby_dies\nS 54!bobby_dies\nS 55!bobby_dies\nS 56!bobby_dies\nS 57!bobby_dies\nS 58!bobby_dies\nS 59!bobby_dies\nS 60!bobby_dies\nS 61!bobby_dies\nS 62!bobby_dies\nS 63!bobby_dies\nS 64!bobby_dies\nS 65!bobby_dies\nS 66!bobby_dies\nS 67!bobby_dies\nS 68!bobby_dies\nS 69!bobby_dies\nS 70!bobby_dies\nS 71!bobby_dies\nS 72!bobby_dies\nS 73!bobby_dies\nS 74!bobby_dies\nS 75!bobby_dies\nS 76!bobby_dies\nS 77!bobby_dies\nS 78!bobby_dies\nS 79!bobby_dies\nS 80!bobby_dies\nS 81!bobby_dies\nS 82!bobby_dies\nS 83!bobby_dies\nS 84!bobby_dies\nS 85!bobby_dies\nS 86!bobby_dies\nS 87!bobby_dies\nS 88!bobby_dies\nS 89!bobby_dies\nS 90!bobby_dies\nS 91!bobby_dies\nS 92!bobby_dies\nS 93!bobby_dies\nS 94!bobby_dies\nS 95!bobby_dies\nS 96!bobby_dies\nS 97!bobby_dies\nS 98!bobby_dies\nS 99!bobby_dies\nS 100!bobby_dies\nS 101!bobby_dies\nS 102!bobby_dies\nS 103!bobby_dies\nS 104!bobby_dies\nS 105!bobby_dies\nS 106!bobby_dies\nS 107!bobby_dies\nS 108!bobby_dies\nS 109!bobby_dies\nS 110!bobby_dies\nS 111!bobby_dies\nS 112!bobby_dies\nS 113!bobby_dies\nS 114!bobby_dies\nS 115!bobby_dies\nS 116!bobby_dies\nS 117!bobby_dies\nS 118!bobby_dies\nS 119!bobby_dies\nS 120!b"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_died\nS 4!bobby_died\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nS 3!bobby_died\nS 4!bobby_died\n''') == 'Yes'\nassert solution('''\n2\nD\nD\nS 1!bobby_dies\nS 2!bobby_dies\nS 3!bobby_died\n''') == 'Plot Error'\nassert solution('''\n3\nD\nD\nS 1!bobby_dies\n''') == 'Plot Error'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\nS 3!bobby_died\nS 4!bobby_died\n''') == 'Yes'\n\n'''\nExplanation:\n\n10:\n\"E business_as_usual\"\n\"E bobby_dies\"\n\"S 1 bobby_died\"\n\"E stuff_happens\"\n\"E jr_does_bad_things\"\n\"S 2!bobby_dies\"\n\"E it_goes_on_and_on\"\n\"D 4\"\n\"S 1!bobby_dies\"\n\"S 2!bobby_dies it_goes_on_and_on\"\n\"S 3!bobby_died\"\n\"S 4!bobby_died\"\n\nThe first scenario is consistent with what has happened so far, so it is \"Yes\". However, the last scenario was inconsistent with what has happened so far.\n\n11:\n\"E business_as_usual\"\n\"E bobby_dies\"\n\"S 1 bobby_died\"\n\"E stuff_happens\"\n\"E jr_does_bad_things\"\n\"S 2!bobby_dies\"\n\"S 3!bobby_died\"\n\"S 4!bobby_died\"\n\"E it_goes_on_and_on\"\n\"D 4\"\n\"S 1!bobby_dies\"\n\"S 2!bobby_dies it_goes_on_and_on\"\n\"S 3!bobby_died\"\n\"S 4!bobby_died\"\n\n11 is a \"Plot Error\" because there is a \"D 1 bobby_died\" line, and \"D 2 bobby_dies\" line, but there are only 2 possible scenarios.\n\n12:\n\"E business_as_usual\"\n\"E bobby_dies\"\n\"S 1 bobby_died\"\n\"E stuff_happens\"\n\"E jr_does_bad_things\"\n\"S 2!bobby_dies\"\n\"S 3!bobby_died\"\n\"S 4!bobby_died\"\n\"E it_goes_on_and_on\"\n\"D 4\"\n\"S 1!bobby_dies\"\n\"S 2!bobby_dies it_goes_on_and_on\"\n\"S 3!bobby_died\"\n\"S 4!bobby_died\"\n\n12 is a \"Yes\" because there is a \"S 1!bobby_dies\" line, and \"S 2!bobby_dies it_goes_on_and_on\" line, but there are only 2 possible scenarios.\n\n13:\n\"E business_as_usual\"\n\"E bobby_dies\"\n\"S 1 bobby_died\"\n\"E stuff_happens\"\n\"E jr_does_bad_things\"\n\"S 2!bobby_dies\"\n\"S"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Yes'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == '3 Just A Dream'\nassert solution('''10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on''') == 'Plot Error'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\nE monday_is_good_day\nD 1\nS 1 monday_is_good_day\nE monday_is_good_day\nD 4\nS 1 monday_is_good_day\nS 2 monday_is_good_day\nS 3 monday_is_good_day\nS 4 monday_is_good_day\nS 5 monday_is_good_day\nE monday_is_good_day\nS 6 monday_is_good_day\nS 7 monday_is_good_day\nE monday_is_good_day\nS 8 monday_is_good_day\nS 9 monday_is_good_day\nS 10 monday_is_good_day\nE monday_is_good_day\nS 11 monday_is_good_day\nS 12 monday_is_good_day\nE monday_is_good_day\nS 13 monday_is_good_day\nE monday_is_good_day\nS 14 monday_is_good_day\nS 15 monday_is_good_day\nE monday_is_good_day\nS 16 monday_is_good_day\nS 17 monday_is_good_day\nE monday_is_good_day\nS 18 monday_is_good_day\nE monday_is_good_day\nS 19 monday_is_good_day\nS 20 monday_is_good_day\nS 21 monday_is_good_day\nE monday_is_good_day\nS 22 monday_is_good_day\nS 23 monday_is_good_day\nS 24 monday_is_good_day\nS 25 monday_is_good_day\nS 26 monday_is_good_day\nE monday_is_good_day\nS 27 monday_is_good_day\nS 28 monday_is_good_day\nE monday_is_good_day\nS 29 monday_is_good_day\nS 30 monday_is_good_day\nE monday_is_good_day\n''') == 'Yes':\n    print('Yes')\nelif solution('''\n4\nE bobby_dies\nD 1\nS 1 monday_is_good_day\nE monday_is_good_day\nD 4\nS 1 monday_is_good_day\nS 2 monday_is_good_day\nS 3 monday_is_good_day\nE monday_is_good_day\nS 4 monday_is_good_day\nE monday_is_good_day\n''') == 'Yes':\n    print('Yes')\nelif solution('''\n1\nE monday_is_good_day\nS 1 monday_is_good_day\n''') == 'Plot Error':\n    print('Plot Error')\nelif solution('''\n5\nE monday_is_good_day\nD 1\nS 1 monday_is_good_day\nE monday_is_good_day\nD 4\nS 1 monday_is_good_day\nS 2 monday_is_good_day\nS 3 monday_is_good_day\nS 4 monday_is_good_day\nS 5 monday_is_good_day\nE monday_is_good_day\nS 6 monday_is_good_day\nS 7 monday_is_good_day\nE monday_is_good_day\nS 8 monday_is_good_day\nS 9 monday_is_good_day\nS 10 monday_is_good_day\nE monday_is_good_day\nS 11 monday_is_good_day\nS 12 monday_is_good_day\nE monday_is_good_day\nS 13 monday_is_good_day\nE monday_is_good_day\nS 14 monday_is_good_day\nS 15 monday_is_good_day\nE monday_is_good_day\nS 16 monday_is_good_day\nS 17 monday_is_good_day\nE monday_is_good_day\nS 18 monday_is_good_day\nE monday_is_good_day\nS 19 monday_is_good_day\nS 20 monday_is_good_day\nS 21 monday_is_good_day\nE monday_is_good_day\nS 22 monday_is_good_day\nS 23 monday_is_good_day\nS 24 monday_is_good_day\nS 25 monday_is_good_day\nS"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"\"\"\n+-----------------------------+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+-----------------------------+\n\n\"\"\"\n\nassert solution(\"\"\"\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"\"\"\n+---------------------------------------+\n|1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n|1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n|1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n|1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n|1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1|\n+---------------------------------------+\n\"\"\",\n\"\"\"\n+-----------------+\n|1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"24 5 8 7\\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\\naliquip ex ea commodo consequat Duis aute irure dolor in\\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\npariatur Excepteur sint occaecat cupidatat non proident sunt in\\nculpa qui officia deserunt mollit anim id est laborum\") == \\\n    \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('24 5 8 7') == '+----------------+-+\\n|exercitation ullamco |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo | |consequat| |\\n|Duis aute irure dolor in| |\\n|reprehenderit in| |\\n+----------------+-+\\n'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum''') == '+------------------------+-+\\nexercitation ullamco    |^|\\nexcitation ullamco    |v|\\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\\nexeiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\\nex aliquip ex ea commodo consequat Duis aute irure dolor in\\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\npariatur excepteur sint occaecat cupidatat non proident sunt in\\nculpa qui officia deserunt mollit anim id est laborum'''\nassert solution('''5 1 2 3\nSUBTRACT 5 FROM H GIVING NUMERATOR.\nADD 4 3 4\nDIVIDE 4 BY NUMERATOR GIVING T REMAINDER LEFT OVER.\nMULTIPLY 2 BY 2 GIVING NUMERATOR.\nSUBTRACT 2 FROM H GIVING DENOMINATOR.\nADD 1 1 1\nMULTIPLY 1 BY 1 GIVING NUMERATOR.\nADD 1 1 1''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\nexcitation ullamco    |v|\\nSUBTRACT 5 FROM H GIVING    | |\\nNUMERATOR.\\nADD 4 3 4\\nDIVIDE 4 BY NUMERATOR    | |\\nGIVING T REMAINDER LEFT OVER.    | |\\nMULTIPLY 2 BY 2 GIVING    | |\\nNUMERATOR.\\nSUBTRACT 2 FROM H GIVING    | |\\nDENOMINATOR.\\nADD 1 1 1\\nMULTIPLY 1 BY 1 GIVING    | |\\nNUMERATOR.\\nADD 1 1 1'''\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+------------------------+-+\\n'"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conseptat | |\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n\nInput:\n4 5 8 7\n3 2 1 2\n3 3 5 4\n4 5 6 7\n4 2 8 6\n\nOutput:\n+-----------------+------+------+------+------+------+------+------+------+\n|                |^|     | |     | |     | |     | |     | |     | |     |\n+-----------------+------+------+------+------+------+------+------+------+\n|exercitation ullamco    |^|     | |     | |     | |     | |     | |     |\n|laboris nisi ut aliquip | |     | |     | |     | |     | |     | |     |\n|ex ea commodo conseptat | |     | |     | |     | |     | |     | |     |\n|Duis aute irure dolor in| |     | |     | |     | |     | |     | |     |\n|reprehenderit in        | |     | |     | |     | |     | |     | |     |\n+-----------------+------+------+------+------+------+------+------+------+\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"24 5 8 7\") == \"+------------------------+-+\"\nassert solution
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"impossible\"\nassert solution(\"4 10\") == \"possible\"\n\n'''"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\nassert solution('3 4\\n0 1 2 3\\n2 1 0 3\\n1 2 0 3') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'possible'\nassert solution('''\n5 11\n1 3 2 7 6\n1 4 0 7 8\n1 5 0 9 10\n3 1 0 6 4\n2 1 0 5\n1 5 6 7\n0 4 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9 0\n6 9 0 2\n4 6 0 3\n1 8 9 1\n3 5 7 6\n5 6 7 1\n7 8 9"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'impossible'\nassert solution('''\n4 10\n0 1 2 3\n3 0 1 2\n2 1 0 3\n1 3 2 0\n''') == 'possible'\nassert solution('''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'impossible'\nassert solution('''\n1 1\n1 2\n''') == 'impossible'\nassert solution('''\n2\n0 0\n''') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 10\") == \"possible\"\nassert solution(\"0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\nassert solution(\"3 5\\n0 1 2 1\\n1 3 2 0\\n2 0 1 1\") == \"impossible\"\nassert solution(\"5 5\\n0 1 2 1\\n1 3 2 0\\n2 0 1 1\\n3 4 2 0\") == \"impossible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 10\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'possible'\nassert solution('5 10\\n0 0 1 2 3\\n1 2 3 0\\n2 3 0 1\\n3 0 1 2\\n4 1 2 3\\n') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\"\n) == \"impossible\"\nassert solution(\n    \"3 2\\n1 0 2\\n2 1 0\\n1 3 2\"\n) == \"possible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'impossible'\nassert solution('5 6\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n4 5 2 1\\n1 3 4 0\\n') == 'impossible'\nassert solution('4 4\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'possible'\n\n'''"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0''') == 'possible'\nassert solution('''4 10\n0 1 2 3\n1 2 0 3\n2 3 0 1\n3 1 2 0''') == 'impossible'\nassert solution('''4 1\n1\n''') == 'impossible'\nassert solution('''7 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n1 2 3 0\n3 1 2 0\n2 3 0 1\n1 3 2 0''') == 'possible'\nassert solution('''7 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n1 2 3 0\n3 1 2 0\n2 3 0 1\n1 3 2 0''') == 'impossible'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1 1\n1\n2\n''') == '1.00000000'\nassert solution('''\n5 1 1\n3\n3\n''') == '1.999999'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.00000000'\nassert solution('2 1 2\\n1\\n2') == '1.99999999'\nassert solution('2 3 3\\n1\\n2') == '0.999999999'\n\"\"\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.00000000'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '1.00000000'\nassert solution('1') == '1.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1 1\n1\n2\n''') == '1.00000000', 'First Example'\nassert solution('''20 1 2\n1\n20\n''') == '1.00000000', 'Second Example'\nassert solution('''2 1 1\n1\n20\n''') == '0.99999995', 'Third Example'"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 1\\n1\\n2') == \"1.00000000\"\nassert solution('5 1 1\\n1 2\\n2 4\\n3 5\\n4 6\\n5 8') == \"4.99999994\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 1') == \"1\"\nassert solution('4 2 1') == \"1\"\nassert solution('5 2 1') == \"2\"\nassert solution('1 5 2') == \"1\"\nassert solution('2 1 4') == \"2\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1\\n1\\n2') == \"1.00000000\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 1 1\n1\n2\n\"\"\") == \"1.0\""
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 1 1\\n\"\n    \"1\\n\"\n    \"2\"\n) == \"1.00000000\"\nassert solution(\n    \"2 5 5\\n\"\n    \"5\\n\"\n    \"5\"\n) == \"1.00000000\"\nassert solution(\n    \"1 5 5\\n\"\n    \"5\\n\"\n    \"5\"\n) == \"1.00000000\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n    \"2\\n\"\n    \"7\\n\"\n    \"9\"\n) == \"0.0199906\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\\n\"\n    \"2\\n\"\n    \"7\\n\"\n    \"9\"\n) == \"0.0199906\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n4 3 3 2') == '3'\nassert solution('5\\n5 4 3 3 2') == '3'\nassert solution('5\\n5 4 3 3 2') == '2'\nassert solution('5\\n5 4 3 3 2') == '1'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n\") == \"1\\n2\\n3\\n\"\nassert solution(\"5\\n4 3 3 2\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\n\nassert solution('''\n3\n4 3 2\n3 3 3\n3 4 4\n''') == '1'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"1\"\nassert solution(\"7\\n3 4 1 2 3 5 6\\n5 4\\n1 2\\n2 3\\n4 1\\n3 2\\n\") == \"5\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1\\n1 1\\n\") == \"1\""
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10 1\\n5 4 3 3 2') == '2'\nassert solution('3\\n4 2 7\\n3 2 5\\n5 6 2') == '3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('5 4 3 3 2') == '1'\nassert solution('5 4 3 3 2') == '3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '2\\n1\\n3'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '1'\nassert solution('''\n5\n5 4 3 3 2\n3\n1 2\n1 1\n2 4\n''') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 3 3 2') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 3 3 2') == '2'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2\n0 1\n1 2\n0 2\n3 4\n3 1\nSample Input:\n1 2\n1 2\nSample Output:\n1\n''') == '1'\nassert solution('''\n1 2\n1 2\nSample Input:\n4 2\n0 1\n1 2\n0 2\n0 3\nSample Output:\n1\n''') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n5 5\\n1 2\\n0 1\\n0 2') == '1'\nassert solution('10\\n20 20\\n5 10\\n3 4\\n5 5\\n5 1\\n6 2\\n3 4\\n8 8\\n5 8\\n6 7\\n4 5\\n4 7\\n4 8\\n4 4\\n3 2\\n5 3\\n4 4\\n4 2\\n4 2\\n6 5\\n6 4\\n7 5\\n7 4\\n7 4\\n6 6\\n2 4\\n4 4\\n6 7\\n6 5\\n6 7\\n4 4\\n6 4\\n7 4\\n8 3\\n7 3\\n5 3\\n4 2\\n5 2\\n1 3\\n2 5\\n3 3\\n4 5\\n1 5\\n1 5\\n5 5\\n4 6\\n3 7\\n2 4\\n3 4\\n2 5\\n2 5\\n0 2\\n3 4\\n4 5\\n5 1\\n6 4\\n7 5\\n8 4\\n4 1\\n5 1\\n7 4\\n8 4\\n4 4\\n0 1\\n0 2\\n3 4\\n1 5\\n2 4\\n3 5\\n4 4\\n4 4\\n1 4\\n4 4\\n0 4\\n4 4\\n1 4\\n4 4\\n5 4\\n4 4\\n4 3\\n1 4\\n5 3\\n4 4\\n4 5\\n1 4\\n5 4\\n4 4\\n2 4\\n4 4\\n4 4\\n1 3\\n4 3\\n3 4\\n4 4\\n3 5\\n5 2\\n4 4\\n4 4\\n4 5\\n3 5\\n4 4\\n3 4\\n4 4\\n5 3\\n4 4\\n4 4\\n5 5\\n5 4\\n5 4\\n4 4\\n5 4\\n4 4\\n4 4\\n0 1\\n1 3\\n1 4\\n1 3\\n4 4\\n1 5\\n1 5\\n4 4\\n4 5\\n4 4\\n4 4\\n4 4\\n4 5\\n4 4\\n4 4\\n4 4\\n4 4\\n5 4\\n4 4\\n4 5\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n0 2\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n0 3\\n0 5\\n4 5\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4 4\\n4"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 2\n0 2\n''') == '1'\nassert solution('''\n4\n0 1\n1 2\n0 2\n''') == '0'\n'''\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 2\n0 1\n1 2\n0 2\n\"\"\") == \"1\", \"Case 1\"\nassert solution(\n\"\"\"\n3 2\n0 1\n1 2\n0 2\n\"\"\") == \"never meet\", \"Case 2\""
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\\n2 1\\n0 2\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\\n2 1\\n2 0\") == \"0\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n0 2\\n') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\n1 2\n2 3\n3 4\n0 2\n2 1\n0 1\n1 2\n''') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\nassert solution('5 2') == '2'\nassert solution('5 2') == '2'\nassert solution('15 1') == '4'\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2\\n0 1\\n1 2\\n0 2\\n') == '1'\nassert solution('6 1\\n1 0\\n1 1\\n2 0\\n3 2\\n5 2\\n') == '4'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 5') == '1'\nassert solution('10 5') == '5'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('15 12 2') == '1071530001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n10 1 10\n10 1\n1 2\n''') == '11'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 3') == '10'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3 2') == '14500000001'\nassert solution('5 3 2') == '2857142857'\nassert solution('100 10 2') == '1920928559'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 2') == '2'\nassert solution('4 4 2') == '1'"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 3\n''') == '1'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1\\n5\\n5\\n\"\n) == \"14500000001\"\n\nassert solution(\n    \"1\\n5\\n10\\n\"\n) == \"9911000001\"\n\nassert solution(\n    \"1\\n5\\n100\\n\"\n) == \"9911000001\"\n\nassert solution(\n    \"1\\n5\\n999\\n\"\n) == \"7154326001\"\n\nassert solution(\n    \"1\\n5\\n1000\\n\"\n) == \"7154326001\""
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == '14500000001'"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 4 2\nSample Input:\n5 5 2\nSample Output:\n141592645''') == '141592645'\nassert solution('''10 10 5\nSample Input:\n10 10 2\nSample Output:\n1''') == '1'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 2') == '14500000001'\nassert solution('25 4 2') == '183700000010'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n4 5\\n3 7\") == \"1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n3\") == \"1\"\nassert solution(\"3\\n5\\n6\") == \"2\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4\\n3 7\\n1 6\\n2 6\\n\") == \"0\\n1\\n1\\n2\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == '0\\n1\\n1\\n2'"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 4\\n3 7\\n1 6\\n2 6') == '2'\nassert solution('5\\n2 2\\n1 1\\n2 3\\n4 4') == '1'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0 1 1 2 2\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 4\n3 7\n1 6\n2 6\n''') == '0\\n1\\n1\\n2\\n'''\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n4\\n3 7\\n1 6\\n2 6') == '1\\n1\\n2\\n2\\n'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1000'\nassert solution('4 5') == '600'\nassert solution('1 4 300') == '450'\nassert solution('3 1 1000') == '1000'\nassert solution('5 3') == '3100'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 1000\") == \"2000\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '3100'\nassert solution('10 10') == '20000'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3100\""
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3100'\n\nassert solution('''10 3\n1 1 1000\n2 1 1000\n2 2 1000\n2 3 1000\n4 5 500\n2\n1 2 1000\n3 4 1000\n4 5 500\n5 6 1000\n3''') == '3500'\n\nassert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\nSample Output:\n3100\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n\nassert solution('''\n7 2\n1 2 10000\n3 2 10000\n3 4 10000\n4 2 10000\n1 3 10000\n4 5 10000\n5 2 10000\n''') == '5400'\n\nassert solution('''\n5 5\n1 2 60000\n1 3 10000\n2 4 10000\n3 4 10000\n4 5 10000\n''') == '50000'\n\nassert solution('''\n5 5\n1 2 10000\n3 4 10000\n4 2 10000\n2 3 10000\n1 4 10000\n''') == '10000'\n\nassert solution('''\n5 5\n1 2 100000\n2 3 100000\n3 4 100000\n4 2 100000\n1 4 100000\n''') == '50000'"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n5 5\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3500'\nassert solution('''\n5 5\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"3100\"\nassert solution(\"3 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"14900\"\nassert solution(\"4 5\\n1 2 1000\\n2 3 1000\\n3 4 500\\n2\\n1 4 300\\n3 5 300\") == \"14700\"\nassert solution(\"5 3\\n1 2 1000\\n2 3 1000\\n4 5 500\\n2\\n1 4 300\\n3 5 300\") == \"10300\"\nassert solution(\"5 5\\n1 2 1000\\n2 3 1000\\n3 4 500\\n2\\n1 4 300\\n3 5 300\") == \"12800\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\", \"Sample Test Failed: Your code produced {}\"\nprint(solution(input()))\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n4 3\\n2 5\\n6 5') == '5.25'\nassert solution('1\\n5 5\\n4 3\\n2 5\\n7 13') == '5.25'\nassert solution('1\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n10 10\\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1.5'\nassert solution('5 5') == '4.5'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.25'\nassert solution('4 4\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '7.5'\nassert solution('4 4\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '7.5'\nassert solution('4 4\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '7.5'\nassert solution('4 4\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '7.5'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '4.83333333'\nassert solution('15 4') == '11.05'\n\n\"\"\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.250000000'\nassert solution('7 2\\n1 2\\n1 2\\n2 2\\n2 2\\n2 2\\n1 2') == '2.50000000'"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1.5'\nassert solution('1 2 4') == '2.0'\nassert solution('10 1') == '8.0'\nassert solution('10 0') == '0.0'\nassert solution('1 2 3 4') == '3.0'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"5.250000000\"\nassert solution(\"1 8\") == \"5.5\"\nassert solution(\"6 5\") == \"5\"\nassert solution(\"2 5\") == \"5\"\nassert solution(\"2 9\") == \"5.5\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1.5\"\nassert solution(\"2 1\\n1 2\\n3 4\") == \"1.75\"\n\"\"\"\nfrom math import sqrt\nh, w = [int(i) for i in stdin.split()]\na, b = [int(i) for i in stdin.split()]\n\narea = 0\nl = []\nfor i in range(h):\n    for j in range(w):\n        area += 1\n        if j > a and j < b:\n            l.append(i)\n\nprint(sqrt(area/(h*w)-(len(l)//2)))\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2') == '2.00000'\nprint(solution('3\\n4\\n3\\n2'))"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\") == \"5.25\"\nassert solution(\"4 2\\n10 10\\n5 5\\n2 5\\n2 9\\n7 13\") == \"5.2\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3 1 2 1 1') == '7'\nassert solution('5') == '2'\nassert solution('1 2 3 1 2 1 1') == '7'\nassert solution('5') == '2'\nassert solution('1 2 3 1 2 1 1') == '7'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7'\nassert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '2'\n'''\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"7\\n2\\n2\\n0\\n4\\n\"\nassert solution() == \"7\\n2\\n2\\n0\\n4\\n\"\nassert solution() == \"7\\n2\\n2\\n0\\n4\\n\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n7\n2\n2\n0\n4\n''') == '2'\n\nassert solution('''7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n7\n2\n2\n0\n4\n''') == '2'\n\nassert solution('''9\n1 2 3 1 2 1 1 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n8\n0\n1\n1\n3\n''') == '3'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n0\\n4\\n'\nassert solution('''\n1\n2 2 2\n''') == '1\\n0\\n'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '7\\n3\\n2\\n0\\n4\\n'"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n5 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'''"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7'\nassert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '2'\nassert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '0'\nassert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '4'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7\\n2\\n2\\n0\\n4\\n'''"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"7\\n2\\n2\\n0\\n4\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '32.6405451448'\nassert solution('40 30 30 40 20 40 50 30 30 50') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\nassert solution('''\n4\n5 5 5 5\n0.2 0.2 0.2 0.2 0.2\n0.2 0.2 0.2 0.2 0.2\n0.2 0.2 0.2 0.2 0.2\n0.2 0.2 0.2 0.2 0.2\n0.4 0.4 0.4 0.4 0.4\n0.8 0.8 0.8 0.8 0.8\n''') == '23.834861'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n\"\"\"\n    ) == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.2') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(example_input_1) == '10.0'\nassert solution(example_input_2) == '10.0'\nprint(solution(stdin))\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1 2\n''') == '1 2'\n\nassert solution('''\n2\n3 4\n''') == '1 3 4'\n\nprint('Done!')\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(['3', '2 1 4 3'])) == '2 3 1 4'\nassert solution('\\n'.join(['5', '1 4 2 5 3 4'])) == '1 4 2 5 3 4'\nassert solution('\\n'.join(['4', '5 1 4 2 3'])) == '1 2 5 4 3'\nassert solution('\\n'.join(['4', '1 3 2 5'])) == '1 2 5 3'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2 1 4 3') == '2 3 4 1'\nassert solution('2\\n2 1 4 3') == '2 3 4 1'\nassert solution('3\\n2 1 4 3') == '2 3 4 1'\nassert solution('4\\n2 1 4 3') == '2 3 4 1'\nassert solution('5\\n2 1 4 3') == '2 3 4 1'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n1 1 3 2 5\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n5\n1 2 4 1 2\n\"\"\") == \"1 3 4 2 5\"\n\nassert solution(\"\"\"\n5\n1 3 2 1 3\n\"\"\") == \"1 3 2 4 5\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1 4 3') == '2 3 4 1'\nassert solution('3\\n1 2 3') == '1 2 3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 3\n1 3\n3 2\n3 2\n2 4\n3 1\n2 4\n''') == '2 4 3 1'\nassert solution('''\n1 4\n4 3\n3 1\n1 2\n''') == '1 3 2 4'\nassert solution('''\n1 4\n4 2\n4 1\n2 3\n3 4\n2 4\n''') == '3 4 1 4 2'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 4 3') == '2 3 4 1'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('5 2 1 3 4') == '1 2 3 4'\nassert solution('7 2 5 1 3 4') == '1 2 3 4'\nassert solution('100 100 100 100') == '100 100 100 100'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 4 3') == '3 2 1 4'\nassert solution('4 5 6 3 2 1') == '5 4 1 3 6'\nassert solution('2 3 4') == '3 4 2'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 2 1\n''') == '2 3 4 1'\nassert solution('''\n2 1 4 3\n''') == '2 3 4 1'\nassert solution('''\n4 5 1 2 4 3\n''') == '2 3 4 4 5 1'\nassert solution('''\n10 8 10 2 9 8 2 6 9 2\n''') == '2 6 5 9 8 1 8 3 9 4'\nassert solution('''\n2\n3\n1 2 3\n4 2\n''') == '2 3 4 1 2'\n''')"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 1 4 3\n''') == '2 3 4 1'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '2.0'\nassert solution('1 2 3') == '3.0'\nassert solution('2 4 3') == '6.0'\nassert solution('3 3 2') == '6.0'\nassert solution('3 2 1') == '6.0'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2.82842712475\"\nassert solution(\"1 2 3\") == \"7.0\"\nassert solution(\"1 2 3 4 5 6\") == \"13.0\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 2\n1 1\n1 1\n1 1\n2 2\n''') == '12.0000'\nassert solution('''\n5\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '9.0000'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '7.656854249492381'\nassert solution('10') == '8.915550889952'\nassert solution('20') == '9.652711870604384'\nassert solution('1000') == '10.652711870604384'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"3.0\"\nassert solution(\"1\") == \"3.0\"\nassert solution(\"3 2\") == \"4.0\"\nassert solution(\"3 2 3\") == \"4.0\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"3.14159265358979\"\nassert solution(\"1\") == \"3.14159265358979\"\nassert solution(\"10\") == \"9.899159265358979\"\nprint(\"Congratulations! All test cases passed!\")\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n1 3\\n2 4') == '7.656854249492381'\nassert solution('1 2\\n1 3\\n2 4\\n3 2\\n3 2\\n2 1\\n3 3') == '8.4375'\nassert solution('3\\n1 2\\n1 3\\n2 4\\n3 3') == '8.4375'"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1''') == '7.656854249492381'\nassert solution('''5\n3 3\n3 2\n2 1\n2 2\n1 3''') == '8.888888888888888'\nassert solution('''5\n1 2\n2 3\n1 3\n2 4\n3 3\n4 3\n3 2\n2 1''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1 2') == '7.656854249492381'\nassert solution('1\\n1 2\\n1 2') == '7.656854249492381'\nassert solution('1\\n2 4\\n1 3') == '7.656854249492381'\nassert solution('1\\n2 4\\n3 3') == '7.656854249492381'\n\n----Hints\n\n1. Use the four-sum algorithm to find the $x$-coordinate of the vertex that lies in the middle of the hexagon.\n2. Use the simplification property to determine whether a set of vertices forms a polygon.\n\n'''\nfrom math import pi, sqrt\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2 3\n0 0\n0 3\n1 4\n3 3\n''') == '2'\nassert solution('''\n10 5 3\n1 5\n2 4\n7 6\n9 8\n4 3\n8 9\n5 7\n6 5\n4 1\n3 8\n9 5\n7 7\n8 3\n3 2\n''') == '4'\nassert solution('''\n5 2 3\n1 2\n4 3\n6 2\n8 2\n2 8\n1 6\n0 0\n3 3\n4 6\n5 7\n''') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n2 1\\n') == '0'\nassert solution('3\\n3 3\\n1 2\\n2 3\\n0 0\\n0 0') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"0 0\") == \"1\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '2'\nassert solution('1 3 2') == '3'\nassert solution('1 1 1') == '1'\n\nimport sys\nfrom io import StringIO\nimport unittest\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n\nassert solution('2 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n\"\"\"\nimport math\n\nN, M, K = map(int, input().split())\n\nonions = list(map(int, input().split()))\n\nposts = []\nfor i in range(M):\n    posts.append([int(x) for x in input().split()])"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('3 3 3') == '2'\nassert solution('5 4 3') == '1'\n\n\"\"\""
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('3 5 5') == '2'\nassert solution('3 10 10') == '5'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\"\"\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1\\n') == '9'\nassert solution('3 5\\n') == '9'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == '9'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '9'\nassert solution('3 1') == '9'\nassert solution('2 10') == '-1'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '9'\nassert solution('12 20 10 30') == '180'\nassert solution('1 0 1') == '0'\nassert solution('1 1 1') == '0'"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '9'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1\n3 2\n4 5\n5 4\n1 1\n5 6\n4 4\n3 3''') == '9'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"9\"\nassert solution(\"2 2\") == \"9\"\nassert solution(\"2 1\") == \"10\""
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"9\""
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n\") == \"9\"\nassert solution(\"2 3\\n\") == \"1\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '9'\nassert solution('1 1') == '1'\nassert solution('10 1') == '1'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 5\\n7') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n10\n5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n5\n-5\n-4\n-3\n-2\n-1\n\"\"\") == \"\"\n\nassert solution(\"\"\"\n5\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n5\n3\n1\n2\n-3\n\"\"\") == \"2\""
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    3\n    2\n    5\n    \"\"\",\n) == \"5\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '3'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2\\n3\\n5\\n7\\n12\\n') == '12'\nassert solution('5\\n2\\n3\\n5\\n7\\n') == '\\n'\nassert solution('5\\n2\\n3\\n5\\n7\\n') == '12'\nassert solution('10\\n2\\n3\\n5\\n7\\n12\\n\\n') == '\\n'\n\"\"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n5\\n3\\n12') == '12'\nassert solution('5\\n1\\n5\\n3\\n12') == '12'\nassert solution('5\\n1\\n5\\n3\\n12') == '12'\nassert solution('5\\n1\\n5\\n3\\n12') == '12'\nassert solution('5\\n1\\n5\\n3\\n12') == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\nassert solution(\"5\\n2\\n3\\n5\\n7\\n\") == \"\"\nassert solution(\"1\\n3\\n5\\n7\\n\") == \"\"\nassert solution(\"5\\n7\\n5\\n7\\n\") == \"\"\nassert solution(\"2\\n3\\n5\\n7\\n\") == \"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3') == '12'\nassert solution('5\\n7') == '12'\nassert solution('5\\n-2') == '1'\nassert solution('12\\n5') == '-1'\nassert solution('10\\n5') == '9'"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2\n3\n5\n7\n12\n''') == \"12\"\nassert solution('''\n10\n6\n7\n10\n15\n''') == \"15\"\n'''"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n00\\n01\\n10\\n110\\n111\") == \"11\"\nassert solution(\"4\\n00\\n01\\n10\\n110\") == \"10\"\nassert solution(\"3\\n00\\n01\\n10\") == \"10\"\nassert solution(\"2\\n00\\n01\") == \"01\"\nassert solution(\"1\\n00\\n01\") == \"01\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n00\n01\n10\n110\n111\nSample Output\n11\n''') == '111'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '11'\nassert solution('20\\n0') == '1'\nassert solution('1000000') == '1'\nassert solution('1000000000') == '1'\nassert solution('1000000001') == '1'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '00'\nassert solution('1') == '0'\nassert solution('11') == '11'\nassert solution('10') == '01'\nassert solution('111') == '111'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"\"\nassert solution(\"011\") == \"0\"\nassert solution(\"1010\") == \"0\"\nassert solution(\"110110\") == \"1\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == -1\nassert solution(\"00\") == \"11\"\nassert solution(\"01\") == \"11\"\nassert solution(\"10\") == \"11\"\nassert solution(\"110\") == \"11\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '111'\nassert solution('4') == '00'\nassert solution('3') == '11'\nassert solution('2') == '11'"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"00\") == \"0\"\nassert solution(\"01\") == \"0\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n00\n01\n10''') == '11'\nassert solution('''5\n00\n01\n10\n110\n111''') == '11'\nassert solution('''15\n00000000000000000000000000000001\n01\n01\n00\n01\n00\n00\n00\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01\n01"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n20 100\n100 10\n1\n150 50\n1''') == '100 250 320'\n\n'''"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\\n') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\nassert solution('''1\n2\n5\n4\n''') == '4'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\\n20 100\\n100 10\\n1\\n150 50\\n1\\n150 100\") == \"100 250 320\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n20 100\\n1\\n150 50\\n\") == \"100 250 320\"\nassert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n\"\"\") == \"100 250 320\"\n\nassert solution(\"\"\"\n10\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\nassert solution('''1\n1\n100\n2\n100\n1\n100\n2\n1''') == '100 100'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"250 320\"\nassert solution(\"2\") == \"100 250\"\nassert solution(\"1\") == \"320\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320'\nprint(solution(input()))"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '100 250 320'\nassert solution('1') == '250 320'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\nassert solution(\"3 1\") == \"3 3 3 3\"\nassert solution(\"9 8\") == \"6 6 9 9 9 9 9 6 6 6 6 6 6 6\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n10\n''') == '3 7 4 6 5 7 2 15 2'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\nassert solution(\"1 1\") == \"1 1\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1234567890\") == \"9\"\nassert solution(\"1234567890123456789\") == \"9\"\nassert solution(\"12345678901234567890123456789\") == \"9\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n\nIn the above sample, only two products are produced: $20$ and $100$.\n\n---------------------\n\n### Using iterative method\n\n2. One can easily compute the product digit by digit, as long as $x$ is a positive integer.\n\n'''"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 7\") == \"3 7 4 6 5 7 2 15 2\"\nassert solution(\"25 100\") == \"3 7 4 6 5 7 2 15 2\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n3\n5\n10\n50\n''') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3 7 4 6 5 7 2 15 2\""
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3''') == '2 1 2 1'\n\nassert solution('''5\n1''') == '2 1 2 1 4'\n\nassert solution('''100\n1''') == '2 1 3 5 7 2 16 4 8'\n\nprint('Congratulations!')\n\n'''"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n6 1 1 5\\n7 7 7') == '40.0'\nassert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 2\n2 3\n''') == '40.0000000000'\nassert solution('''\n5\n0 0\n0 10\n10 10\n10 0\n5\n0 0\n0 10\n10 10\n10 0\n5\n0 0\n0 10\n10 10\n10 0\n5\n0 0\n0 10\n10 10\n10 0\n''') == '25.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000', 'First'\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '5.5555555555', 'Second'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\n\nassert solution('''\n6\n0 0\n0 8\n10 5\n10 0\n6\n0 2\n0 6\n4 3\n6 7\n''') == '22.0'\n\nassert solution('''\n6\n-1 -1\n-1 0\n0 1\n0 -1\n1\n0 -1\n''') == '16.0'\n\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n''') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n0 0\n0 14\n15 14\n15 0\n4''') == '40.0000000000', 'First'\nassert solution('''8\n3 4\n5 6\n8 9\n11 10\n7 9\n5 2\n4 1\n6 3''') == '30.0000000000', 'Second'\nassert solution('''4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\nSample Output:\n40.0000000000\n''') == '40.0000000000', 'Third'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\nassert solution('6\\n2 3\\n3 5\\n5 8\\n8 2\\n12 -2') == '32.0000000000'\nassert solution('8\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '32.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '40.0000000000'\nassert solution('8') == '40.0000000000'\nassert solution('10') == '42.0000000000'\nassert solution('1') == '0.0000000000'\nassert solution('5') == '0.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\"\n    ) == \"40.0000000000\"\nassert solution(\n    \"20\\n0 0\\n0 10\\n15 10\\n15 0\\n0 20\\n20 10\\n20 20\\n10 20\\n15 20\\n0 20\"\n    ) == \"40.0000000000\"\nassert solution(\n    \"15\\n0 0\\n0 10\\n20 10\\n20 0\\n0 15\\n15 10\\n0 20\\n20 10\\n15 20\\n0 20\\n20 20\\n20 15\\n15 20\\n0 15\\n15 10\\n20 20\\n20 20\\n15 20\\n20 15\\n0 20\\n20 15\\n20 20\"\n    ) == \"40.0000000000\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n0 0\n0 1\n3 2\n5 2\n7 1\n10 0\n0 0\n''') == '40.0000000000', solution('''\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\nSample Output:\n40.0000000000\n''')\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n4\\n1\\n1\\n1\\n1') == '4.0000000000'\nassert solution('3\\n0 4\\n0 8\\n3 0\\n0 1\\n4 1\\n8 0\\n8 2\\n4 2\\n4 1\\n5 1\\n3 1\\n5 2\\n4 2\\n4 3\\n5 3\\n8 3\\n9 1\\n7 3\\n8 1\\n9 3\\n5 1\\n9 2\\n6 2\\n9 1\\n9 2\\n6 2\\n9 2\\n5 1\\n6 2\\n7 2\\n8 2\\n7 2\\n8 2\\n8 2\\n7 3\\n6 3\\n9 2\\n9 3\\n5 3\\n8 2\\n9 3\\n5 3\\n9 3\\n8 3\\n9 3\\n9 2\\n6 2\\n9 2\\n6 2\\n9 2\\n5 3\\n6 2\\n7 2\\n7 2\\n8 2\\n8 2\\n7 3\\n5 2\\n9 2\\n9 3\\n5 3\\n8 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 3\\n6 3\\n5 2\\n7 3\\n8 3\\n7 3\\n6 3\\n5 3\\n4 2\\n8 2\\n9 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 3\\n6 3\\n5 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n8 3\\n7 3\\n6 3\\n5 3\\n4 2\\n8 2\\n9 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 2\\n7 2\\n7 2\\n8 2\\n8 2\\n7 3\\n6 2\\n9 2\\n9 3\\n5 3\\n8 2\\n9 3\\n5 3\\n9 3\\n8 3\\n7 3\\n6 2\\n9 3\\n6 3\\n5 2\\n7 3\\n8 3\\n7 3\\n6 3\\n5 3\\n4 2\\n8 2\\n9 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 3\\n6 3\\n5 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 2\\n7 2\\n7 2\\n8 2\\n8 2\\n7 3\\n6 2\\n9 2\\n9 3\\n5 3\\n8 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n5 3\\n4 2\\n8 2\\n9 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n6 2\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n5 3\\n8 3\\n9 3\\n5 3\\n8 3\\n8 2\\n9 2\\n7 2\\n8 2\\n9 2\\n6 2\\n9 2\\n9 2\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n6 2\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n5 3\\n8 3\\n9 3\\n5 3\\n9 3\\n8 3\\n7 3\\n6 2\\n9 3\\n6 3\\n5 3\\n7 3\\n8 3\\n7 3\\n6 2\\n9 3\\n6 3\\n5 2\\n7 3\\n8 3\\n7 3\\n6 2\\n9 3\\n6 3\\n5 3\\n4 2\\n8 2\\n9 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 3\\n6 3\\n5 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 2\\n7 2\\n7 2\\n8 2\\n8 2\\n7 3\\n6 2\\n9 2\\n9 3\\n5 3\\n8 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 3\\n6 3\\n5 3\\n9 2\\n9 3\\n8 3\\n7 3\\n6 2\\n9 2\\n9 3\\n7 3\\n8 2\\n9 3\\n8 2\\n9 2\\n5 2\\n6 2\\n7 2\\n7 2\\n8 2\\n8 2\\n7 3"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 3') == '1'\nassert solution('10\\n10 10 10 10 10 10 10 10 10 10 10 10 10') == '10 10'\n\n'''\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1 2') == '1\\n2\\n'\nassert solution('3\\n1 1 2\\n2 3 4') == '2\\n1\\n3\\n4\\n'\nassert solution('1\\n3\\n2 4\\n1 3') == '3\\n2\\n1\\n4\\n'\nassert solution('2\\n10 5\\n2 3 4\\n3 5') == '1\\n3\\n4\\n2\\n5\\n'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n3\n2 1 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1'\nassert solution('2\\n3\\n2 1 3') == '1 1'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1'\nassert solution('2\\n3\\n1 2 3') == '1'\nassert solution('3\\n3\\n1 2 3') == '0'\nassert solution('3\\n3\\n1 2 3') == '0'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n2 1 3') == '1\\n1'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 1 3\\n') == '2'\nassert solution('3\\n1 3 5\\n') == '1'\nassert solution('5\\n1 3 5 8 1\\n') == '2'\nassert solution('5\\n1 3 5 8 1\\n') == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2 1 2 3\n5\n1 2 1 3 3\n''') == '2'\n\nassert solution('''\n9\n2 1 2 3\n3 4 4 4 4 4\n3 4 4 4 4 4\n3 4 4 4 4 4\n4 4 4 4 4 4\n4 4 4 4 4 4\n''') == '6'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n3\n2 1 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n2\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n5\n5 3 5 4 7\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n3\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n3\n2\n\"\"\") == \"1\""
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('225.67 1.71 2.38') == 'none'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '182 163'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.00 1.71 2.38') == '199 162'\nassert solution('0.00 1.71 1.71 2.38') == '199 162'\nassert solution('0.00 1.71 1.71 1.71 2.38') == '199 162'\nassert solution('0.00 1.71 1.71 1.71 1.71 2.38') == '199 162'\nassert solution('0.00 1.71 1.71 1.71 1.71 1.71 1.71 2.38') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'none'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nassert solution('0 1 2') == 'None'\nassert solution('0 0 0') == 'None'\nassert solution('0 0 0.1') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0\\n0\\n0\\n') == 'none'\nassert solution('0\\n0.0\\n0\\n') == 'none'\nassert solution('0\\n0.0\\n0.0\\n') == 'none'\nassert solution('0\\n0.0\\n0.0\\n0.0\\n') == 'none'\nassert solution('2.0\\n0.1\\n0.1\\n0.2\\n') == 'both'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('925.65 1.91 2.73') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8.0 2.0 1.0\\n\") == \"199 162\"\nassert solution(\"10.0 2.0 1.0\\n\") == \"None\"\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '199 162'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"16\"\nassert solution(\"1 3 2\") == \"13\"\nassert solution(\"0 2 3\") == \"11\"\nassert solution(\"2 1 -1\") == \"9\"\nassert solution(\"3 3 0\") == \"5\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1 -1\") == \"0\"\nassert solution(\"3 2 1\") == \"0\"\nassert solution(\"2 1 1\") == \"0\"\nassert solution(\"2 0 2\") == \"2\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == '16'\n'''"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == \"16\"\nassert solution('0\\n1\\n2\\n3\\n4\\n5\\n6') == \"10\"\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7') == \"10\""
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\n\nassert solution('''\n4 3\n1 2 0\n2 3 0\n0 2 3\n1 3 0\n''') == '9'\n\nassert solution('''\n3 3\n-1 -1 -1\n0 1 2\n2 2 2\n''') == '7'\n\nassert solution('''\n5 7\n1 -1 0 0 1\n-1 -1 -1 -1 -1\n1 1 1 1 0\n1 1 1 1 -1\n1 1 1 1 -1\n1 1 1 1 0\n0 0 0 1 1\n0 0 0 1 1\n0 0 0 1 1\n0 0 0 1 1\n''') == '0'\n\nassert solution('''\n5 3\n-1 -1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '19'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\"\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\") == \"16\"\nassert solution(\"5 5\\n-3 1 -2\\n-3 0 1\\n-2 1 -1\\n-3 0 2\\n-1 0 -2\") == \"20\"\nassert solution(\"5 5\\n-3 1 -2\\n-3 0 1\\n-2 1 -1\\n-3 0 2\\n-1 0 -2\") == \"19\"\nassert solution(\"5 5\\n-3 1 -2\\n-3 0 1\\n-2 1 -1\\n-3 0 2\\n-1 0 -2\") == \"20\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\") == \"16\""
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\nassert solution('''\n2 5\n2 4 2\n1 2 2\n1 2 1\n0 0 2\n''') == '17'\nassert solution('''\n2 5\n1 2 2\n1 1 1\n0 2 3\n2 1 1\n3 3 0\n''') == '12'\nassert solution('''\n2 5\n2 4 2\n1 2 2\n1 2 1\n0 0 2\n''') == '7'\n'''\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"16\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == \"1 2 3\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nO 16\nO 8\nE 16\nI 8\nI 1\n''') == '1 1 4'\nassert solution('''\nO 1\nE 4\nO 8\nI 16\nI 4\n''') == '3 2 1'\nassert solution('''\nO 1\nE 16\nI 8\nI 4\n''') == '4 3 1'\n'''\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('O 6\\n') == '2 2 4'\nassert solution('E 4\\n') == '2 1 4'\nassert solution('I 3\\n') == '1 1 2'\n'''\n\nn = int(input())"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nO 5\\n') == '2 1 2'\nassert solution('1\\nO 5\\nI 1\\n') == '1 3 1'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO 1\nO"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2 1 4'\nassert solution('4') == '1 1 1 2'\nassert solution('5') == '1 2 2 3'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('O 4') == '2 1 4'\nassert solution('E 4') == '2 4 1'\nassert solution('I 4') == '4 2 1'\n'''\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nO 4\\n\") == \"2 1 4\\n\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1 1 1\"\nassert solution(\"3\") == \"2 1 1\"\nassert solution(\"5\") == \"2 1 1 2 2\"\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''O 2\nE 4\nI 3\nE 7''') == '1 2 4'\n\nassert solution('''O 7\nO 2\nI 7\nE 4''') == '1 2 7'\n\nassert solution('''O 1\nE 7\nI 7\nE 4''') == '4 1 7'\n\nassert solution('''O 3\nO 3\nI 4\nI 4''') == '1 1 4'\n\nassert solution('''O 2\nO 2\nO 2\nO 2''') == '1 2 2'"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '2'\nassert solution('4\\n') == '2'\nassert solution('10\\n') == '10'\n'''\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 8') == '4'\nassert solution('10 3') == '2'\nassert solution('10 10') == '2'\nassert solution('4 1') == '1'\nassert solution('10 10') == '1'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 5\n1 1 1 1\n1 2 1 1\n1 3 1 1\n1 4 1 1\n1 5 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 5\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1 5\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 1 12 4') == '4'\nassert solution('5 5 9 10') == '4'\nassert solution('1 6 4 10') == '5'\nassert solution('2 11 7 14') == '1'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('5 3') == '1'\nassert solution('5 5') == '5'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 2\n1 1 2\n2 2 3\n3 3 4\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n1 1 2\n2 2 3\n3 3 4\"\"\") == \"1\"\nassert solution(\"\"\"6 6\n1 1 1 1 1 1\n2 2 2 2 2 2\n3 3 3 3 3 3\n4 4 4 4 4 4\n5 5 5 5 5 5\n6 6 6 6 6 6\"\"\") == \"6\"\nassert solution(\"\"\"1 100\n
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"4\"\nassert solution(\"5 100\\n2 1 4 5\\n5 1 12 4\\n5 5 9 10\\n1 6 4 10\\n2 11 7 14\") == \"10\"\nassert solution(\"3 2\\n1 2 3\\n2 2 4\\n2 3 4\\n\") == \"0\"\nassert solution(\"5 2\\n1 2 3\\n2 2 4\\n2 3 4\\n3 4 5\\n3 2 5\\n\") == \"0\"\nassert solution(\"2 1\\n5 2 2\\n2 2 3\\n3 1 4\\n3 2 4\\n3 3 4\\n\") == \"4\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"9.489577\""
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('999 9 999 9999') == '9.585073'\nassert solution('9.585073') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.585073'\nassert solution('''\n-10.00 10.00 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.79323'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\") == \"9.585073\"\nassert solution(\"\"\"\n3.4999 5.5 6 7\n2 4 2 6\n\"\"\") == \"3.999\"\nassert solution(\"\"\"\n1.9 1.3 3.8 4.6\n3.7 2.4 4.8\n\"\"\") == \"3.9\"\nassert solution(\"\"\"\n-10 10 -1 -2 -3\n3 -2 -1 -3\n\"\"\") == \"6.0\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 999 9') == '9.585073'"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == '9.585073'\nassert solution(\"99 9 999 9999\") == '9.585073'\nassert solution(\"9 99 9 99 9\") == '9.585073'\nassert solution(\"1 0 0 0 0\") == '0'\nassert solution(\"2 1 0 0 0\") == '0'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\") == \"9.585073\"\n\"\"\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"-99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99 9 999 9999\") == \"10.516724\"\n\n\"\"\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 20 2 10 20 2 24 18 28 10\") == \"impossible\"\nassert solution(\"1 10 2 10 20 2 24 18 28 10\") == \"impossible\"\nassert solution(\"1 20 30\") == \"12.75 127.83\"\nassert solution(\"1 20\") == \"12.75 127.83\"\nassert solution(\"1 20 2 10 20 2 24 18 28 10\") == \"12.74 127.83\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"impossible\"\n\n'''\nfrom math import pi, atan, sqrt\n\nW, L = map(int, stdin.strip().split())\nH = int(input())"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 6\") == \"impossible\""
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"impossible\"\nassert solution(\"5 10\") == \"12.74\"\nassert solution(\"5 10\") == \"impossible\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"3 3\\n1 1 2 2 1 1\\n5 5 5 5 5 5\\n1 1 2 2 1 1\\n2 2 2 2 2 2\\n1 1 1 1 1 1\\n1 1 1 1 1 1\\n1 1 1 1 1 1\") == \"impossible\"\nassert solution(\"5 4\\n1 2 3 4 1\\n5 5 5 5 5\\n1 1 2 2 1 1\\n2 2 2 2 2 2\\n1 1 1 1 1 1\") == \"1.823\"\nassert solution(\"5 2\\n1 2 3 4 1\\n5 5 5 5 5\\n1 1 2 2 1 1\\n2 2 2 2 2 2\\n1 1 1 1 1 1\") == \"1.8\"\nassert solution(\"15 10\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6 7 8\\n1 2 3 4 1 5 6"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''\n20 30\n1 2 3\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n20 30\n2 10 20 2 24 18 28 10\n\"\"\") == \"12.74 127.83\"\nassert solution(\"\"\"\n20 30\n2 10 20 2 24 18 28\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''\n10\n1 2 3\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 10\\n2 10 20 2 24 18 28 10\\n') == '12.74 127.83'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('10 20 2 24 18 28 10') == '12.74 0.82'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n2\\n0') == '012'\nassert solution('10\\n3\\n1\\n4\\n5\\n8\\n6\\n1\\n1\\n6\\n8\\n9\\n8\\n7\\n6\\n1\\n3\\n4\\n1\\n1\\n9\\n7\\n7\\n6\\n7\\n1\\n1\\n1\\n1\\n6\\n6\\n8\\n7\\n9\\n3\\n8\\n6\\n7\\n3\\n8\\n1\\n1\\n1\\n4\\n2\\n1\\n2\\n2\\n7\\n7\\n8\\n1\\n4\\n6\\n7\\n1\\n4\\n6\\n7\\n1\\n7\\n7\\n8\\n6\\n8\\n6\\n6\\n9\\n1\\n6\\n7\\n7\\n8\\n7\\n6\\n7\\n7\\n1\\n4\\n1\\n2\\n1\\n4\\n1\\n7\\n8\\n9\\n7\\n7\\n1\\n2\\n1\\n9\\n6\\n8\\n9\\n1\\n1\\n1\\n1\\n7\\n4\\n2\\n1\\n1\\n6\\n7\\n7\\n4\\n7\\n9\\n7\\n7\\n1\\n1\\n4\\n1\\n3\\n1\\n1\\n1\\n6\\n6\\n7\\n9\\n7\\n8\\n1\\n4\\n6\\n7\\n1\\n4\\n6\\n7\\n1\\n7\\n7\\n8\\n6\\n8\\n6\\n6\\n9\\n1\\n6\\n7\\n7\\n8\\n7\\n6\\n7\\n7\\n1\\n4\\n1\\n2\\n1\\n4\\n1\\n7\\n8\\n9\\n7\\n7\\n1\\n2\\n1\\n9\\n6\\n8\\n9\\n1\\n1\\n1\\n1\\n7\\n4\\n2\\n1\\n1\\n6\\n7\\n7\\n4\\n7\\n9\\n7\\n7\\n1\\n1\\n4\\n1\\n3\\n1\\n1\\n1\\n6\\n6\\n7\\n9\\n7\\n8\\n1\\n4\\n6\\n7\\n1\\n4\\n6\\n7\\n1\\n7\\n7\\n8\\n6\\n8\\n6\\n6\\n9\\n1\\n6\\n7\\n7\\n8\\n7\\n6\\n7\\n7\\n1\\n4\\n1\\n2\\n1\\n4\\n1\\n7\\n8\\n9\\n7\\n7\\n1\\n2\\n1\\n9\\n6\\n8\\n9\\n1\\n1\\n1\\n1\\n7\\n4\\n2\\n1\\n1\\n6\\n7\\n7\\n4\\n7\\n9\\n7\\n7\\n1\\n1\\n4\\n1\\n3\\n1\\n1\\n1\\n6\\n6\\n7\\n9\\n7\\n8\\n1\\n4\\n6\\n7\\n1\\n4\\n6\\n7\\n1\\n7\\n7\\n8\\n6\\n8\\n6\\n6\\n9\\n1\\n6\\n7\\n7\\n8\\n7\\n6\\n7\\n7\\n1\\n4\\n1\\n2\\n1\\n4\\n1\\n7\\n8\\n9\\n7\\n7\\n1\\n2\\n1\\n9\\n6\\n8\\n9\\n1\\n1\\n1\\n1\\n7\\n4\\n2\\n1\\n1\\n6\\n7\\n7\\n4\\n7\\n9\\n7\\n7\\n1\\n1\\n4\\n1\\n3\\n1\\n1\\n1\\n6\\n6\\n7\\n9\\n7\\n8\\n1\\n4\\n6\\n7\\n1\\n4\\n6\\n7\\n1\\n7\\n7\\n8\\n6\\n8\\n6\\n6\\n9\\n1\\n6\\n7\\n7\\n8\\n7\\n6\\n7\\n7\\n1\\n4\\n1\\n2\\n1\\n4\\n1\\n7\\n8\\n9\\n7\\n7\\n1\\n2\\n1\\n9\\n6\\n8\\n9\\n1\\n1\\n1\\n1\\n7\\n4\\n2\\n1\\n1\\n6\\n7\\n7\\n4\\n7\\n9\\n7\\n7\\n1\\n1\\n4\\n1\\n3\\n1\\n1\\n1\\n6\\n6\\n7\\n9\\n7\\n8\\n1\\n4\\n6\\n7\\n1\\n4\\n6\\n7\\n1\\n7\\n7\\n8\\n6\\n8\\n6\\n6\\n9\\n1\\n6\\n7\\n7\\n8\\n7\\n6\\n7\\n7\\n1\\n4\\n1\\n2\\n1\\n4\\n1\\n7\\n8\\n9\\n7\\n7\\n1\\n2\\n1\\n9\\n6\\n8\\n9\\n1\\n1\\n1\\n1\\n7\\n4\\n2\\n1\\n1\\n6\\n7\\n7\\n4\\n7\\n9\\n7\\n7\\n1\\n1\\n4\\n1\\n3\\n1\\n1\\n1\\n6\\n6\\n7\\n9\\n7\\n8\\n1\\n4\\n6"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n110') == '1610', \"2\"\nassert solution('3\\n111') == '111', \"3\"\nassert solution('4\\n000') == '000', \"4\"\nassert solution('5\\n100') == '100', \"5\"\nassert solution('6\\n010') == '1010', \"6\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0116'\nassert solution('110') == '0116'\nassert solution('1106') == '011'\nassert solution('1108') == '0'\nassert solution('1109') == '00'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '16'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('11') == '11'\nassert solution('101') == '100'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n110\n6\n''') == '0116'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n110\\n6') == '0116'\n\nSample Input:\n3\n90\n9\n8\nSample Output:\n90\n9\n8\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n110\n6\nSample Input:\n1\n100\nSample Output:\n1\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1\n2\n3\n4\n\"\"\") == \"0116\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n110\n6\n''') == '0116'\n\nassert solution('''\n2\n110\n6\n''') == '0116'\n\nassert solution('''\n3\n110\n6\n''') == '0116'\n\nassert solution('''\n4\n110\n6\n''') == '0116'\n\nassert solution('''\n5\n110\n6\n''') == '0116'"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == \"0116\"\nassert solution('10') == \"1010\"\nassert solution('100') == \"1010\"\nassert solution('1000') == \"10100\"\nassert solution('10000') == \"1010\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 3\n4 4 4\n''') == '0 2 4'\nassert solution('''\n10 3\n0 4 4 4 4 4 4 4 4\n''') == '0 1 2 3 4'\nassert solution('''\n10 3\n1 2 2 4\n''') == '2 1 1'\nassert solution('''\n10 3\n2 2 2 3\n''') == '4 3 2'\nassert solution('''\n10 3\n3 4 4 4\n''') == '2 4 0 1'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0 2 4\""
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"8 3\\n\"\n    \"4 4 4\"\n) == \"0 2 4\"\nassert solution(\n    \"10 3\\n\"\n    \"5 4 3\"\n) == \"0 0 4 4\"\nassert solution(\n    \"15 3\\n\"\n    \"5 4 3\"\n) == \"4 0 0 4\"\nassert solution(\n    \"15 3\\n\"\n    \"1 4 3\"\n) == \"4 4 0 0\"\nassert solution(\n    \"20 3\\n\"\n    \"1 2 1\"\n) == \"3 1 1 1\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3\\n4 4 4') == '0 2 4'\nassert solution('5 1\\n1 1 1 1 1') == '2 1 1'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 3\n3\n\"\"\") == \"0 1 2\"\nassert solution(\"\"\"\n2 4\n3 4\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n2 2\n2\n\"\"\") == \"0 0\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n2 2 3\n''') == '0 2 4\\n0 2 3\\n1 2 4\\n1 2 3\\n1 3 4\\n'''\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 3') == '0 2 4'\nassert solution('15 3') == '1 2 3'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8 3\n4 4 4''') == '0 2 4'\nassert solution('''6 5\n1 2 3 4 5 6''') == '0 3 5 1 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '0 2 4'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n2 4\\n2 2') == '0 1 2'\nassert solution('8 3\\n4 4 4\\n2 2 2') == '0 0 2 2'\nassert solution('5 1\\n3 3\\n1 1\\n4 3\\n4 4') == '2 1 0 2 0'\nassert solution('12 20\\n4 8\\n4 8\\n8 4\\n20 20\\n5 8\\n2 4\\n8 4\\n4 20\\n2 4\\n1 4') == '0 1 2 1 2 0 0 4 4 0 1 4'\nassert solution('10 20\\n1 2\\n1 2\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '4 4 0 0 2 0 0 4 4 0 1 4'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == 'impossible'\nassert solution('1\\n2\\n3\\n4\\n') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2 4') == 'impossible'\nassert solution('4\\n7\\n2 2 4\\n3 1 3 5') == 'possible'\nassert solution('5\\n2\\n3\\n5\\n2 1 2\\n2 5\\n4 5\\n1 4 5') == 'impossible'"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\nassert solution(\"5\\n6 4\\n3 2\\n4 1\\n1 2\\n2 1\\n3 6\\n1 3\\n1 4\\n2 5\\n2 3\\n5 3\\n2 5\\n3 2\\n\") == \"possible\"\nassert solution(\"3\\n5\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"impossible\"\nassert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == \"impossible\"\n\n'''"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\n\nassert solution('''\n6\n10\n1 1 2 3 2 5\n2 3\n5 1\n1 3\n2 4\n3 4\n3 1\n5 3\n3 2\n4 3\n2 5\n3 6\n3 1\n5 2\n5 4\n5 3\n5 6\n''') == 'possible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == 'impossible'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"2\") == \"possible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3\n4 5 7 5\n1 2\n3 1\n3 2\n3 3\n3 4\n3 5''') == 'impossible'\nassert solution('''5\n3\n4 5 7 5\n1 2\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4 5 6\n4 6 7\n4 7 8\n4 8 9\n4 9 10\n4 10 11\n4 11 12\n4 12 13\n4 13 14\n4 14 15\n4 15 16\n5 3\n5 4 6\n5 6 7\n5 7 8\n5 8 9\n5 9 10\n5 10 11\n5 11 12\n5 12 13\n5 13 14\n5 14 15\n5 15 16\n5 16 17\n5 17 18\n5 18 19\n5 19 20\n5 20 21\n5 21 22\n5 22 23\n5 23 24\n5 24 25\n5 25 26\n5 26 27\n5 27 28\n5 28 29\n5 29 30\n5 30 31\n5 31 32\n5 32 33\n5 33 34\n5 34 35\n5 35 36\n5 36 37\n5 37 38\n5 38 39\n5 39 40\n5 40 41\n5 41 42\n5 42 43\n5 43 44\n5 44 45\n5 44 46\n5 44 47\n5 44 48\n5 44 49\n5 44 50\n5 44 51\n5 44 52\n5 44 53\n5 44 54\n5 44 55\n5 44 56\n5 44 57\n5 44 58\n5 44 59\n5 44 60\n5 44 61\n5 44 62\n5 44 63\n5 44 64\n5 44 65\n5 44 66\n5 44 67\n5 44 68\n5 44 69\n5 44 70\n5 44 71\n5 44 72\n5 44 73\n5 44 74\n5 44 75\n5 44 76\n5 44 77\n5 44 78\n5 44 79\n5 44 80\n5 44 81\n5 44 82\n5 44 83\n5 44 84\n5 44 85\n5 44 86\n5 44 87\n5 44 88\n5 44 89\n5 44 90\n5 44 91\n5 44 92\n5 44 93\n5 44 94\n5 44 95\n5 44 96\n5 44 97\n5 44 98\n5 44 99\n5 44 100\n5 44 101\n5 44 102\n5 44 103\n5 44 104\n5 44 105\n5 44 106\n5 44 107\n5 44 108\n5 44 109\n5 44 110\n5 44 111\n5 44 112\n5 44 113\n5 44 114\n5 44 115\n5 44 116\n5 44 117\n5 44 118\n5 44 119\n5 44 120\n5 44 121\n5 44 122\n5 44 123\n5 44 124\n5 44 125\n5 44 126\n5 44 127\n5 44 128\n5 44 129\n5 44 130\n5 44 131\n5 44 132\n5 44 133\n5 44 134\n5 44 135\n5 44 136\n5 44 137\n5 44 138\n5 44 139\n5 44 140\n5 44 141\n5 44 142\n5 44 143\n5 44 144\n5 44 145\n5 44 146\n5 44 147\n5 44 148\n5 44 149\n5 44 150\n5 44 151\n5 44 152\n5 44 153\n5 44 154\n5 44 155\n5 44 156\n5 44 157\n5 44 158\n5 44 159\n5 44 160\n5 44 161\n5 44 162\n5 44 163\n5 44 164\n5 44 165\n5 44 166\n5 44 167\n5 44 168\n5 44 169\n5 44 170\n5 44 171\n5 44 172\n5 44 173\n5 44 174\n5 44 175\n5 44 176\n5 44 177\n5 44 178\n5 44 179\n5 44 180\n5 44 181\n5 44 182\n5 44 183\n5 44 184\n5 44 185\n5 44 186\n5 44 187\n5 44 188\n5 44 189\n5 44 190\n5 44 191\n5 44 192\n5 44 193\n5 44 194\n5 44 195\n5 44 196\n5 44 197\n5 44 198\n5 44 199\n5 44 200\n5 44 201\n5 44 202\n5 44 203\n5 44 204\n5 44 205\n5 44 206\n5 44 207\n5 44 208\n5 44 209\n5 44 210\n5 44 211\n5 44 212\n5 44 213\n5 44 214\n5 44 215\n5 44 216\n5 44 217\n5 44 218\n5 44 219\n5 44 220\n5 44 221\n5 44 222\n5 44 223\n5 44 224\n5 44 225\n5 44 226\n5 44 227\n5 44 228\n5 44 229\n5 44 230\n5 44 231\n5 44 232\n5 44 233\n5 44 234\n5 44 235\n5 44 236\n5 44 237\n5 44 238\n5 44 239\n5 44 240\n5 44 241\n5 44 242\n5 44 243\n5 44 244\n5 44 245\n5 44 246\n5 44 247\n5 44 248\n5 44 249\n5 44 250\n5 44 251\n5 44 252\n5 44 253\n5 44 254\n5 44 255\n5 44 256\n5 44 257\n5 44 258\n5 44 259\n5 44 260\n5 44 261\n5 44 262\n5 44 263\n5 44 264\n5 44 265\n5 44 266\n5 44 267\n5 44 268\n5 44 269\n5 44 270\n5 44 271\n5 44 272\n5 44 273\n5 44 274\n5 44 275\n5 44 276\n5 44 277\n5 44 278\n5 44 279\n5 44 280\n5 44 281\n5 44 282\n5 44 283\n5 44 284\n5 44 285\n5 44 286\n5 44 287\n5 44 288\n5 44 289\n5 44 290\n5 44 291\n5 44 292\n5 44 293\n5 44 294\n5 44 295\n5 44 296\n5 44 297\n5 44 298\n5 44 299\n5 44 300\n5 44 301\n5 44 302\n5 44 303\n5 44 304\n5 44 305\n5 44 306\n5 44 307\n5 44 308\n5 44 309\n5 44 310\n5 44 311\n5 44 312\n5 44 313\n5 44 314\n5 44 315\n5 44 316\n5 44 317\n5 44 318\n5 44 319\n5 44 320\n5 44 321\n5 44 322\n5 44 323\n5 44 324\n5 44 325\n5 44 326\n5 44 327\n5 44 328\n5 44 329\n5 44 330\n5 44 331\n5 44 332\n5 44 333\n5 44 334\n5 44 335\n5 44 336\n5 44 337\n5 44 338\n5 44 339\n5 44 340\n5 44 341\n5 44 342\n5 44 343\n5 44 344\n5 44 345\n5 44 346\n5 44 347\n5 44 348\n5 44 349\n5 44 350\n5 44"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000', \"Wrong\"\nassert solution('''\n0 1\n1 1\n''') == '-1.00000', \"Wrong\"\nassert solution('''\n0 1\n1 1\n''') == '1.00000', \"Wrong\"\nassert solution('''\n1 0\n0 1\n''') == '2.00000', \"Wrong\"\nassert solution('''\n1 0\n0 1\n''') == '2.00000', \"Wrong\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nassert solution('3\\n2 0\\n0 0\\n2 0\\n3 1\\n1 2\\n2 1\\n3 2\\n2 2\\n1 3\\n3 3') == 'impossible'\nassert solution('2\\n0 0\\n0 10\\n2\\n1 2\\n1 3\\n2 1\\n3 2\\n2 2\\n1 3\\n3 3') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nassert solution('2\\n0 0\\n0 10') == 'Impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"\"\"2\n0 0\n0 10\n2\n4 10\n4 0\"\"\") == \"4.00000\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\nassert solution(\"\"\"\n4\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"Impossible\"\n\"\"\""
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 0\\n0 10') == '0.00000'\nassert solution('2\\n4 10\\n4 0') == 'impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\nassert solution('''\n5\n0 0\n0 10\n2\n4 10\n4 0\n5 5\n5 5\nSample Output:\n\n''') == 'Impossible'\n\n'''\n\nTests:\n\n>sample1\n>sample2\n>sample3\n>sample4\n>sample5\n\n'''"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"5.00000\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Impossible'\nassert solution('2') == 'Impossible'\nassert solution('3') == '1.00000'\nassert solution('4') == '1.00000'\nassert solution('5') == '1.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 10\n2\n4 10\n4 0\n\"\"\") == \"4.00000\"\nassert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"impossible\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''2 4 4\n1 1 1\n1 1 2\n2 1 1\n2 1 2\n1 2 1\n1 2 2\n2 2 1\n2 2 2\n''') == '1'\nassert solution('''2 2 4\n1 1\n1 2\n1 3\n1 4\n''') == '0'\nassert solution('''3 4 2\n1 1\n1 2\n1 3\n1 4\n2 1\n2 2\n''') == '0'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 5') == '1'\nassert solution('3 2 5') == '0'\nassert solution('3 3 3') == '0'\n\"\"\"\n\nstdin = \"\"\"2 4 3\n1 1\n3 3\n1 3\"\"\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n10 10 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 4\n4 4\n4 6\n6 6\n8 8\n8 9\n9 9\n9 10\n10 10\n''') == '0'\nassert solution('''\n10 10 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 4\n4 4\n4 6\n6 6\n8 8\n8 9\n9 9\n9 10\n10 10\n''') == '1'\nassert solution('''\n6 6 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 4\n4 4\n4 6\n6 6\n8 8\n8 9\n9 9\n9 10\n10 10\n''') == '0'\nassert solution('''\n6 6 5\n1 1\n1 3\n3 1\n3 3\n2 2\n2 4\n4 4\n4 6\n6 6\n8 8\n8 9\n9 9\n9 10\n10 10\n''') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1', \"Failed Sample\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n1 2 3\n1 2\n1 3\n1 3\n\"\"\") == \"1\", \"1\"\nassert solution(r\"\"\"\n3 2 5\n3 2\n3 2\n1 2\n1 3\n3 1\n\"\"\") == \"0\", \"0\"\nassert solution(r\"\"\"\n3 2 5\n1 2\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\", \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n5 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n5 5 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '0'\n''')"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 5') == '1'\nassert solution('1 2 3') == '0'\nassert solution('3 2 3') == '1'\nassert solution('2 2 2') == '1'\nassert solution('1 2 1') == '0'"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 2\n1 2\n2 1\n1 1\n3 3\n''') == '1', 'First'\n\nassert solution('''\n4 4 4\n1 2\n1 3\n3 1\n3 1\n3 3\n2 2\nSample Output:\n0\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4 7\n1 1\n1 3\n3 1\n3 3\n2 2\n2 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '3 4'\nassert solution('5 5') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n'''\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n'\n\nassert solution('''\n7 3\n0 1\n0 2\n1 3\n1 2\n1 3\n1 2\n0 1\n1 3\n2 2\n1 2\n''') == '7 1\\n0 0\\n2 2\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\") == \"5 3\\n1 0\\n2 4\"\n\nstdin = \"\"\"\n5 6\n1 0\n2 4\n1 2\n0 3\n4 3\n3 2\n\"\"\"\nassert solution(stdin) == \"0 3\\n1 0\\n2 4\""
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '3 1 0 4 3 2'\nassert solution('4 3') == '3 1 2'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3\\n') == '5 3\\n1 0\\n2 4'\nassert solution('10 10\\n0 1\\n1 1\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4\\n4 5\\n5 5\\n5 6\\n6 6\\n') == '10 10'\n\n'''"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '3 2'\nassert solution('''5 3\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '3 2'\nassert solution('''2 1\n0 1\n1 2\n1 2\n''') == 'impossible'\nassert solution('''4 5\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '5 3'\nassert solution('1 2') == '1 0'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0 1\\n1 0\\n2 4\\n'\nassert solution('5 6') == '0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"5 3\"\nassert solution(\"5 7\") == \"impossible\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 1\n0 0\n0 1\n1 0\n1 1''') == '2'\nassert solution('''4 5\n1 1\n0 0\n1 0\n0 1\n1 1''') == '3'\nassert solution('''3 3\n0 0\n0 1\n0 2\n1 1\n2 2''') == '2'\nassert solution('''10 5\n0 0\n0 1\n0 2\n0 3\n1 1\n1 2\n1 3\n1 4\n1 5\n2 2\n2 3\n2 4\n2 5\n3 3\n3 4\n3 5\n4 4\n4 5\n5 5''') == '6'\nassert solution('''4 4\n0 0\n0 1\n0 2\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n4 4\n4 5\n5 5''') == '2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"1 1\"\nassert solution(\"4 1\") == \"1 2\"\nassert solution(\"100 2\") == \"0 1\"\n\"\"\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 1\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 1\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 1\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 3\n0 0\n0 1\n1 0\n1 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2'\nassert solution('''\n2 4\n0 0\n1 1\n1 3\n0 0\n''') == '3'\nassert solution('''\n2 3\n0 0\n1 1\n1 2\n''') == '2'\n'''\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2'\nassert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '3'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 1') == '2'\nassert solution('5 3') == '2'\nassert solution('2 2') == '1'\n\n\"\"\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 3') == '2'\nassert solution('4 1') == '2'\nassert solution('4 3') == '4'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 1\n0 0\n0 1\n1 0\n1 1\nSample Output:\n3\n2 3\n''') == '3 2'\nassert solution('''\n5 1\n0 0\n0 1\n1 0\n1 1\nSample Output:\n4\n2 2\n''') == '4 1 2 1'\nassert solution('''\n7 1\n0 0\n0 1\n1 0\n1 1\n0 2\n0 3\nSample Output:\n3\n2 3\n2 2\n''') == '4 1 2 1'\nassert solution('''\n8 1\n0 0\n0 1\n1 0\n1 1\n0 2\n0 3\n1 2\n1 3\nSample Output:\n3\n2 2\n3 3\n''') == '4 1 2 1'"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"2\\n1 2\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\nassert solution('''\n4 2\n0 0\n0 1\n1 0\n1 1\n''') == '2\nassert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '3\nassert solution('''\n4 3\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n''') == '3\nassert solution('''\n4 3\n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\n''') == '1\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3 5 7 9 11 13 15 17 16\") == \"1\"\nassert solution(\"1 2 1 2 1 2 1 2 1 2 1 2\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\nassert solution('''\n10 3\n1 4 5 6 7 8 9 10\n''') == '1'\n'''\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('10 2') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input) == str(1)\nassert solution(input) == str(1)\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 3 5 7 9 11 13 15 17 16''') == '1'\nassert solution('''10 2\n1 3 5 7 9 11 13 15 17 16''') == '-1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"2 3\\n1 2 3\\n3 4 1\\n1 2 3\\n1 3 2\\n3 1 2\\n3 4 3\\n4 2 1\\n3 1 4\\n2 4 3\\n1 3 4\\n2 2 4\\n1 4 2\\n4 3 2\\n2 4 1\\n\") == \"1\""
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"1\"\nassert solution(\"4 7\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == \"1\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n5 7 9 11 13 15 17 16\\n1 3 5 7 9 11 13 15 17 16\\n') == '1'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7 4\"\nassert solution(\"2 5\") == \"6 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 5\\n' +\n                'ACDBB\\n' +\n                '5 6\\n' +\n                '8 9\\n' +\n                '4 13\\n' +\n                '1 10\\n' +\n                '7 4\\n' +\n                '10 9\\n' +\n                '3 7') == '7 4'\n\nassert solution('10 5\\n' +\n                'ACBBA\\n' +\n                '5 6\\n' +\n                '8 9\\n' +\n                '4 13\\n' +\n                '1 10\\n' +\n                '7 4\\n' +\n                '10 9\\n' +\n                '3 7') == '9 6'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n2\n1\n2\n1\n2\n\"\"\") == \"2 4\"\nassert solution(\"\"\"\n7\n5\n1\n5\n4\n5\n7\n3\n\"\"\") == \"7 5\"\nassert solution(\"\"\"\n1\n6\n1\n6\n4\n6\n7\n3\n\"\"\") == \"6 6\"\nassert solution(\"\"\"\n9\n12\n9\n12\n4\n11\n7\n3\n\"\"\") == \"12 12\"\nassert solution(\"\"\"\n5\n5\n1\n5\n4\n5\n7\n3\n\"\"\") == \"5 5\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 5\\nABDBB') == '7 4'\nassert solution('5 6\\nACDBB') == '5 4'\nassert solution('8 9\\nACDBB') == '8 9'\nassert solution('4 13\\nABDBC') == '4 10'\nassert solution('1 10\\nABDBC') == '1 10'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7'\n) == '7 4'\n\"\"\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\nA\\n4\\n2\\n1\\n3\\n') == '1 4'\nassert solution('7\\nCDAB\\n2\\n4\\n6\\n7\\n8\\n') == '8 7'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"1 4\"\nassert solution(\"5 4\") == \"6 5\"\nassert solution(\"6 5\") == \"5 6\"\nassert solution(\"6 6\") == \"6 7\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'\nassert solution('''\n20 12\nABBBABBABBAB\nBABBABABABBA\nAABAAABAABAA\nAABABABABAAB\nBAABAAABAAB\nBABABABBAAA\n''') == '17 4'\nassert solution('''\n10000 100000\nDDBDDB\nDBDDBD\nDBDDBD\nDDBDDD\nDDDBD\nDDDBD\n''') == '12345678901234'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '7 4'\nassert solution('''\n8 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '10 9'\nassert solution('''\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n''') == '8 9'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 5') == '7 4'\nassert solution('4 8') == '7 4'\nassert solution('10 9') == '7 4'\nassert solution('10 9') == '7 4'\nassert solution('4 13') == '7 4'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('100 LET A = 1\\n60 LET B = 2\\n70 LET C = 3\\n90 LET D = 4\\n90 LET E = 5\\n80 LET F = 6\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"\\n70 PRINT \"I \"\n    \" AM YO U \"\n    \"COZ THIS IS MY FATHER \"\n    \"PAPER DOESN'T HAVE A NAME\"\n    \"\\n90 LET A = A + 1\\n100 PRINT \"\n    \"LAST LETTER A \"\n    \"\\n100 LET A = A + 1\\n110 PRINT \"\n    \"HELLO THERE \"\n    \"\\n110 PRINT \"\n    \"MIDDLE LETTER A \"\n    \"\\n100 PRINT \"\n    \"FOUR \"\n    \"\\n100 PRINTLN A\"\n    \"\\n90 PRINT \"\n    \"A \"\n    \"\\n90 PRINTLN A\"\n    \"\\n80 PRINT \"\n    \"YO \"\n    \"\\n80 PRINTLN A\"\n    \"\\n70 PRINT \"\n    \"HAPPY \"\n    \"\\n70 PRINTLN A\"\n    \"\\n60 PRINT \"\n    \"DONE\"\n    \"\\n60 PRINTLN A\"\n    \"\\n40 PRINT \"\n    \"\\n40 PRINTLN A\"\n    \"\\n30 PRINT \"\n    \"\\n30 PRINTLN A\"\n    \"\\n20 PRINT \"\n    \"\\n20 PRINTLN A\"\n    \"\\n10 PRINT \"\n    \"\\n10 PRINTLN A\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('1 LET A = 1\\n0 LET A = A + 1\\n0 PRINT \"HELLO THERE\"') == 'HELLO THERE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 1\\n20 PRINTLN A\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 1\\n20 PRINTLN A\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN A\\n70 PRINTLN A\\n80 PRINTLN A\\n90 PRINTLN A\\n100 PRINTLN A\\n110 PRINTLN A\\n120 PRINTLN A\\n130 PRINTLN A\\n140 PRINTLN A\\n150 PRINTLN A\\n160 PRINTLN A\\n170 PRINTLN A\\n180 PRINTLN A\\n190 PRINTLN A\\n200 PRINTLN A\\n210 PRINTLN A\\n220 PRINTLN A\\n230 PRINTLN A\\n240 PRINTLN A\\n250 PRINTLN A\\n260 PRINTLN A\\n270 PRINTLN A\\n280 PRINTLN A\\n290 PRINTLN A\\n300 PRINTLN A\\n310 PRINTLN A\\n320 PRINTLN A\\n330 PRINTLN A\\n340 PRINTLN A\\n350 PRINTLN A\\n360 PRINTLN A\\n370 PRINTLN A\\n380 PRINTLN A\\n390 PRINTLN A\\n400 PRINTLN A\\n410 PRINTLN A\\n420 PRINTLN A\\n430 PRINTLN A\\n440 PRINTLN A\\n450 PRINTLN A\\n460 PRINTLN A\\n470 PRINTLN A\\n480 PRINTLN A\\n490 PRINTLN A\\n500 PRINTLN A\\n510 PRINTLN A\\n520 PRINTLN A\\n530 PRINTLN A\\n540 PRINTLN A\\n550 PRINTLN A\\n560 PRINTLN A\\n570 PRINTLN A\\n580 PRINTLN A\\n590 PRINTLN A\\n600 PRINTLN A\\n610 PRINTLN A\\n620 PRINTLN A\\n630 PRINTLN A\\n640 PRINTLN A\\n650 PRINTLN A\\n660 PRINTLN A\\n670 PRINTLN A\\n680 PRINTLN A\\n690 PRINTLN A\\n700 PRINTLN A\\n710 PRINTLN A\\n720 PRINTLN A\\n730 PRINTLN A\\n740 PRINTLN A\\n750 PRINTLN A\\n760 PRINTLN A\\n770 PRINTLN A\\n780 PRINTLN A\\n790 PRINTLN A\\n800 PRINTLN A\\n810 PRINTLN A\\n820 PRINTLN A\\n830 PRINTLN A\\n840 PRINTLN A\\n850 PRINTLN A\\n860 PRINTLN A\\n870 PRINTLN A\\n880 PRINTLN A\\n890 PRINTLN A\\n900 PRINTLN A\\n910 PRINTLN A\\n920 PRINTLN A\\n930 PRINTLN A\\n940 PRINTLN A\\n950 PRINTLN A\\n960 PRINTLN A\\n970 PRINTLN A\\n980 PRINTLN A\\n990 PRINTLN A\\n1000 PRINTLN A\\n1010 PRINTLN A\\n1020 PRINTLN A\\n1030 PRINTLN A\\n1040 PRINTLN A\\n1050 PRINTLN A\\n1060 PRINTLN A\\n1070 PRINTLN A\\n1080 PRINTLN A\\n1090 PRINTLN A\\n1100 PRINTLN A\\n1110 PRINTLN A\\n1120 PRINTLN A\\n1130 PRINTLN A\\n1140 PRINTLN A\\n1150 PRINTLN A\\n1160 PRINTLN A\\n1170 PRINTLN A\\n1180 PRINTLN A\\n1190 PRINTLN A\\n1200 PRINTLN A\\n1210 PRINTLN A\\n1220 PRINTLN A\\n1230 PRINTLN A\\n1240 PRINT"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"\"\"HELLO THERE 1\nHELLO THERE 2\nHELLO THERE 3\nHELLO THERE 4\nHELLO THERE 5\nDONE\"\"\"[::-1]\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n\nANSWER:\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 2\\n20 PRINT \") == \"HELLO THERE 2\"\nassert solution(\"10 LET A = 3\\n20 PRINT \") == \"HELLO THERE 3\"\nassert solution(\"10 LET A = 4\\n20 PRINT \") == \"HELLO THERE 4\"\nassert solution(\"10 LET A = 5\\n20 PRINT \") == \"HELLO THERE 5\"\n\n\"\"\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n\"\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\nassert solution('3 1') == '3'\nassert solution('3 0 1') == '3'\n\nassert solution('2') == '1'\nassert solution('2 0 1') == '2'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '6'\nassert solution('100') == '199999999'\n\nstdin = \"\"\"\n3\n3 0 1\n0 1\n\"\"\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n'\n    '3 0 1\\n'\n    '0 1\\n'\n    ) == '3'\n'''\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n3 0 1\\n0 1\") == \"3\"\nassert solution(\"2\\n1 0\\n0\") == \"2\"\nassert solution(\"1\\n2 0\") == \"2\"\nassert solution(\"2\\n2 0\") == \"4\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 0 1\n0 1\n''') == '3', 'First Test Case'\nassert solution('''\n4\n4 0 3 1\n3 1\n''') == '6', 'Second Test Case'\nassert solution('''\n5\n5 0 1 1\n1 1\n''') == '4', 'Third Test Case'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n3 0 1\n0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 0 1\n0 1\n0 2\n''') == '3'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 1\\n1 0\\n') == '3'\nassert solution('2\\n3 0 1\\n1 1\\n') == '5'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\n\nSample Input:\n2\n2 0 2\n1 0\nSample Output:\n6\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n10\n1 2\n2 5\n2 3\n3 4\n4 6\n5 2\n6 1\n6 5\n6 4\n5 3\n3 5\n1 3\n3 5\n''') == 'RRRRRRLLLLRRRRRRLLLLRRRRRRLLLLRRRRRRRRRRRRRRRRLL'\nassert solution('''\n4\n1 2\n2 3\n3 4\n3 1\n3 2\n
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 'LRLLRRRR'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8') == 'LRRLRRLL'\nassert solution('9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9') == 'RRRLLRLR'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == 'RRLRLRRR'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\nassert solution('6\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LRLLRRRLR'\nassert solution('7\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LRRRRRRLL'\nassert solution('8\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'RRRRRRLLR'\nassert solution('9\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'RRRRRRLLL'\n\n\"\"\"\n\n\"\"\"\nRuntime: 1068 ms, faster than 16.32% of Python3 online submissions for Union Find.\nMemory Usage: 18.6 MB, less than 14.75% of Python3 online submissions for Union Find.\n\"\"\"\n\nimport unittest\n\nclass UnionFind:\n    def __init__(self, N):\n        self.parent = [i for i in range(N)]\n\n    def find_set(self, p):\n        if p!= self.parent[p]:\n            self.parent[p] = self.find_set(self.parent[p])\n        return self.parent[p]\n\n    def union_set(self, p, q):\n        root_p, root_q = map(self.find_set, (p, q))\n        if root_p!= root_q:\n            self.parent[root_p] = root_q\n\nclass Solution:\n    def union(self, p, q):\n        if p < q:\n            self.parent[p] = q\n        else:\n            self.parent[q] = p\n\n    def find(self, p, q):\n        if self.parent[p] == self.parent[q]:\n            return True\n        if self.parent[p]!= self.parent[q]:\n            return False\n        return False\n\n    def is_union(self, p, q):\n        return self.find(p, q)\n\n    def solution(self, nums):\n        # print(nums)\n        N = len(nums)\n        uf = UnionFind(N+1)\n        for i in range(1, N+1):\n            uf.union(nums[i-1][0], nums[i-1][1])\n        for i in range(1, N+1):\n            for j in range(i+1, N+1):\n                if uf.is_union(nums[i-1][0], nums[j-1][0]):\n                    uf.union(nums[i-1][1], nums[j-1][1])\n        # print(uf.parent)\n        if uf.parent == uf.parent:\n            return 'impossible'\n        else:\n            return ''.join(map(lambda x: 'L' if x == 1 else 'R', uf.parent))\n\n\nclass Test(unittest.TestCase):\n    def test_one(self):\n        nums = [[1, 2], [2, 5], [2, 3], [1, 3], [3, 5], [4, 5], [3, 4], [1, 3]]\n        # Output = LLRRRRLL\n        output = Solution().solution(nums)\n        self."
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRLRRLR'\n\nassert solution('''\n5\n1 5\n2 3\n3 4\n4 5\n3 5\n''') == 'impossible'"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\n    \"1 2\",\n    \"2 5\",\n    \"2 3\",\n    \"1 3\",\n    \"3 5\",\n    \"4 5\",\n    \"3 4\",\n    \"1 3\",\n]) == \"LLRRRRLL\"\nassert solution([\n    \"1 2\",\n    \"2 5\",\n    \"2 3\",\n    \"1 3\",\n    \"3 5\",\n    \"4 5\",\n    \"3 4\",\n    \"1 3\",\n    \"1 1\",\n    \"1 2\",\n    \"1 1\",\n    \"1 1\",\n    \"1 2\",\n]) == \"RRRRRRRRLL\""
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRRRRLL\"\nassert solution(\"5\\n1 2\\n2 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"RRLLRLL\"\nassert solution(\"5\\n1 2\\n2 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"LLRLLRR\"\nassert solution(\"5\\n1 2\\n2 3\\n3 5\\n4 5\\n3 4\\n1 3\\n\") == \"RRLRLRL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == \"LLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\nassert solution(\"10\\n5 4 3 2 1\\n9 3 4 5 2\\n1 1 2 3 4 5 6\\n1 5 6 7 8 9 10\") == \"RLRRRRLLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'impossible'\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == 'LLRRRRLL'\nassert solution('1') == 'LLRLRRRL'\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n\"\"\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1\\n2011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'\n\"\"\"\nimport sys"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\nassert solution('3\\n1009 2011\\n1017 2011\\n2003 2011') == '2\\n2011\\n2011'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('10') == '10'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2\\n1009 2011\\n1017 2011\\n\"\n) == \"1\\n2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '1'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '5'\nassert solution('4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\nassert solution('4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\nassert solution('4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\nassert solution('4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3\\n') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3') == '0 3'\nassert solution('4 4\\n0 1 100\\n0 2 100\\n1 3 100\\n2 3 100\\n0 3') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '0 1 2'\nassert solution('4 4') == '0 1 2 3'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\nassert solution('''\n8 8\n0 0 1 100\n0 0 2 100\n0 0 3 100\n0 1 4 100\n1 1 5 100\n1 2 5 100\n2 2 6 100\n2 3 4 100\n3 3 7 100\n''') == '3 7'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n\nassert solution('''8 5\n0 1 100\n0 2 100\n1 3 100\n2 4 100\n2 4 100\n3 4 100\n3 4 100\n3 4 100\n''') == '0 3,0 4'\n\nassert solution('''20 20\n0 1 100\n0 2 100\n1 3 100\n1 4 100\n2 4 100\n2 5 100\n2 6 100\n2 7 100\n2 8 100\n2 9 100\n3 4 100\n3 5 100\n3 6 100\n3 7 100\n3 8 100\n3 9 100\n4 4 100\n4 5 100\n4 6 100\n4 7 100\n4 8 100\n4 9 100\n5 5 100\n5 6 100\n5 7 100\n5 8 100\n5 9 100\n6 6 100\n6 7 100\n6 8 100\n6 9 100\n7 7 100\n7 8 100\n7 9 100\n8 8 100\n8 9 100\n9 9 100\n''') == '0 3,1 4,5 6,7 8,9'\n\nassert solution('''1 100\n0 1 100\n1 3 100\n2 4 100\n3 4 100\n4 4 100\n0 5 100\n1 6 100\n2 7 100\n3 8 100\n4 9 100\n5 5 100\n6 6 100\n7 7 100\n8 8 100\n9 9 100\n0 10 100\n1 11 100\n2 12 100\n3 13 100\n4 14 100\n5 5 100\n6 6 100\n7 7 100\n8 8 100\n9 9 100\n10 10 100\n''') == '0 3,1 4,5 6,7 8,9'\n\nassert solution('''3 3\n0 1 100\n1 2 100\n2 3 100\n1 3 100\n1 4 100\n2 4 100\n''') == '0 3'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"0 3\"\nassert solution(\"4 3\") == \"0 2\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0 3'\nassert solution('2') == '1 2'\nassert solution('4') == '0 3'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"0 3\""
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('3 3 0 0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2.0 10.0') == \"20.0\"\nassert solution('3 3 0 0') == \"20.0\"\nassert solution('1001 1000 100') == \"20.0\"\nassert solution('1001 10000 200') == \"20.0\"\nassert solution('100 0 0') == \"20.0\""
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''0.0 10.0\n2 3 0 0\n1 1 1 1\n2 1 1 1\n1 1 1 1\n''') == '4'\nassert solution('''0.0 10.0\n1 1 1 1\n1 1 1 1\n2 2 2 2\n''') == '2'"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('3 3 0 0') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2.0 10.0\") == \"20\""
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n3 3 1 0\n5 0 0 0\n100 1000 100\n1001 10000 200\n100 0 0\n''') == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"10.0\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('3 3 0 0') == '20'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0 0 0 0 0\") == \"2\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"3\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('4\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n') == '5'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n\nassert solution('''\n7\n0 2 3 4 5 6 7\n0 1 3 4 5 6 7\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6 7\n2 1 2 3 4 5 6\n3 1 2 3 4 5 6 7\n''') == '4'\n\nassert solution('''\n4\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 1 2 3 4 5\n2 2 3 4 5 6\n1 1 1 2 3 4\n''') == '5'\n\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '3'\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '2'\nassert solution('''\n10\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9 10\n2 3 4 5 6 7 8 9 10 11\n3 4 5 6 7 8 9 10 11 12\n4 5 6 7 8 9 10 11 12 13\n5 6 7 8 9 10 11 12 13 14\n6 7 8 9 10 11 12 13 14 15\n7 8 9 10 11 12 13 14 15 16\n8 9 10 11 12 13 14 15 16 17\n9 10 11 12 13 14 15 16 17 18\n10 11 12 13 14 15 16 17 18 19\n11 12 13 14 15 16 17 18 19 20\n12 13 14 15 16 17 18 19 20 21\n13 14 15 16 17 18 19 20 21 22\n14 15 16 17 18 19 20 21 22 23\n15 16 17 18 19 20 21 22 23 24\n16 17 18 19 20 21 22 23 24 25\n17 18 19 20 21 22 23 24 25 26\n18 19 20 21 22 23 24 25 26 27\n19 20 21 22 23 24 25 26 27 28\n20 21 22 23 24 25 26 27 28 29\n21 22 23 24 25 26 27 28 29 30\n22 23 24 25 26 27 28 29 30 31\n23 24 25 26 27 28 29 30 31 32\n24 25 26 27 28 29 30 31 32 33\n25 26 27 28 29 30 31 32 33 34\n26 27 28 29 30 31 32 33 34 35\n27 28 29 30 31 32 33 34 35 36\n28 29 30 31 32 33 34 35 36 37\n29 30 31 32 33 34 35 36 37 38\n30 31 32 33 34 35 36 37 38 39\n31 32 33 34 35 36 37 38 39 40\n32 33 34 35 36 37 38 39 40 41\n33 34 35 36 37 38 39 40 41 42\n34 35 36 37 38 39 40 41 42 43\n35 36 37 38 39 40 41 42 43 44\n36 37 38 39 40 41 42 43 44 45\n37 38 39 40 41 42 43 44 45 46\n38 39 40 41 42 43 44 45 46 47\n39 40 41 42 43 44 45 46 47 48\n40 41 42 43 44 45 46 47 48 49\n41 42 43 44 45 46 47 48 49 50\n42 43 44 45 46 47 48 49 50 51\n43 44 45 46 47 48 49 50 51 52\n44 45 46 47 48 49 50 51 52 53\n45 46 47 48 49 50 51 52 53 54\n46 47 48 49 50 51 52 53 54 55\n47 48 49 50 51 52 53 54 55 56\n48 49 50 51 52 53 54 55 56 57\n49 50 51 52 53 54 55 56 57 58\n50 51 52 53 54 55 56 57 58 59\n51 52 53 54 55 56 57 58 59 60\n52 53 54 55 56 57 58 59 60 61\n53 54 55 56 57 58 59 60 61 62\n54 55 56 57 58 59 60 61 62 63\n55 56 57 58 59 60 61 62 63 64\n56 57 58 59 60 61 62 63 64 65\n57 58 59 60 61 62 63 64 65 66\n58 59 60 61 62 63 64 65 66 67\n59 60 61 62 63 64 65 66 67 68\n60 61 62 63 64 65 66 67 68 69\n61 62 63 64 65 66 67 68 69 70\n62 63 64 65 66 67 68 69 70 71\n63 64 65 66 67 68 69 70 71 72\n64 65 66 67 68 69 70 71 72 73\n65 66 67 68 69 70 71 72 73 74\n66 67 68 69 70 71 72 73 74 75\n67 68 69 70 71 72 73 74 75 76\n68 69 70 71 72 73 74 75 76 77\n69 70 71 72 73 74 75 76 77 78\n70 71 72 73 74 75 76 77 78 79\n71 72 73 74 75 76 77 78 79 80\n72 73 74 75 76 77 78 79 80 81\n73 74 75 76 77 78 79 80 81 82\n74 75 76 77 78 79 80 81 82 83\n75 76 77 78 79 80 81 82 83 84\n76 77 78 79 80 81 82 83 84 85\n77 78 79 80 81 82 83 84 85 86\n78 79 80 81 82 83 84 85 86 87\n79 80 81 82 83 84 85 86 87 88\n80 81 82 83 84 85 86 87 88 89\n81 82 83 84 85 86 87 88 89 90\n82 83 84 85 86 87 88 89 90 91\n83 84 85 86 87 88 89 90 91 92\n84 85 86 87 88 89 90 91 92 93\n85 86 87 88 89 90 91 92 93 94\n86 87 88 89 90 91 92 93 94 95\n87 88 89 90 91 92 93 94 95 96\n88 89 90 91 92 93 94 95 96 97\n89 90 91 92 93 94 95 96 97 98\n90 91 92 93 94 95 96 97 98 99\n91 92 93 94 95 96 97 98 99 100\n92 93 94 95 96 97 98 99 100 101\n93 94 95 96 97 98 99 100 101 102\n94 95 96 97 98 99 100 101 102 103\n95 96 97 98 99 100 101 102 103 104\n96 97 98 99 100 101 102 103 104 105\n97 98 99 100 101 102 103 104 105 106\n98 99 100 101 102 103 104 105 106 107\n99 100 101 102 103 104 105 106 107 108\n100 101 102 103 104 105 106 107 108 109\n101 102 103 104 105 106 107 108 109 110\n102 103 104 105 106 107 108 109 110 111\n103 104 105 106 107 108 109 110 111 112\n104 105 106 107 108 109 110 111 112 113\n105 106 107 108 109 110 111 112 113 114\n106 107 108 109 110 111 112 113 114 115\n107 108 109 110 111 112 113 114 115 116\n108 109 110 111 112 113 114 115 116 117\n109 110 111 112 113 114 115 116 117 118\n110 111 112 113 114 115 116 117 118 119\n111 112 113 114 115 116 117 118 119 120\n112 113 114 115 116 117 118 119 120 121\n113 114 115 116 117 118 119 120 121 122\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0 1 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5') == '4'\nassert solution('7\\n0 2 1 6 3 5 4\\n0 1 2 3 4 5 6\\n1 6 3 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5') == '5'\nassert solution('6\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5') == '3'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n\") == \"4\"\nassert solution(\"1\\n0 1 1 2 3 4\\n\") == \"5\"\nassert solution(\"2\\n0 1 1 2 3 4\\n\") == \"3\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n\nassert solution('''\n10\n0 5 4 2 9 1 3 6 10 8\n0 1 2 3 4 5 6 7 8 9\n1 1 3 2 4 5 6 7 8 9\n2 1 4 5 6 7 8 9 1\n3 1 6 7 8 9 1 2 4\n4 1 2 6 7 8 9 1 3\n5 1 3 6 8 9 1 2 4\n6 1 2 3 4 5 7 8 9\n7 1 2 3 4 6 8 9 1\n8 1 2 3 4 6 7 8 9\n9 1 2 3 4 6 7 8 9\n''') == '7'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == '4'\nassert solution('5\\n0 1 2 3 4\\n0 1 2 3 4\\n1 1 2 3 4\\n1 1 2 3 4\\n1 1 2 3 4\\n') == '1'"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '3'\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '2'\nassert solution('''\n6\n0 1 2 3 4 5\n0 1 2 3 4 5\n0 1 2 3 4 5\n0 1 2 3 4 5\n0 1 2 3 4 5\n0 1 2 3 4 5\n''') == '0'\n'''"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '3'\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '3'\n\n'''\nSample Input:\n3\n0 3 4 5 6 7 8 9\n0 1 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n2 1 3 4 5 6 7 8 9\n0 2 3 4 5 6 7 8 9\n1 1 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n2 1 3 4 5 6 7 8 9\n3 3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5 5\n6 6 6 6 6 6 6 6 6\n7 7 7 7 7 7 7 7 7\n8 8 8 8 8 8 8 8 8\n9 9 9 9 9 9 9 9 9\n'''\n'''\nSample Output:\n9\n'''\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n''') == '4'\nassert solution('''\n10\n1 1\n1 2 1\n2 2 1\n1 1 1\n2 2 1\n1 1 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n6 7 1\n5 6 1\n4 6 1\n3 5 1\n3 6 1\n2 5 1\n2 6 1\n''') == '5'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == \"2\"\nassert solution('6') == \"5\"\nassert solution('1') == \"1\"\n\nsolution(\"1\")\nsolution(\"3\")\nsolution(\"3 2\")\nsolution(\"3 3\")\nsolution(\"3 3 4\")\nsolution(\"3 3 4 5\")\nsolution(\"3 3 4 5 6\")\nsolution(\"3 3 4 5 6 7\")\nsolution(\"3 3 4 5 6 7 8\")\nsolution(\"3 3 4 5 6 7 8 9\")\nsolution(\"3 3 4 5 6 7 8 9 10\")\nsolution(\"3 3 4 5 6 7 8 9 10 11\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14 15\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14 15 16\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\")\nsolution(\"3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\")"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1\n1 2 3\n2 3 4''') == '4'\nprint('Solution: ', solution('''4\n1 1\n1 2 3\n2 3 4\n3 4 5'''))"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0'\nassert solution('12') == '3'\nassert solution('1 2') == '2'\nassert solution('2 1') == '1'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n\"\"\"\n\nimport sys\nimport math\nfrom math import ceil\n\nN = int(input())\nR, C = map(int, input().split())\n\nflower = list(map(int, input().split()))\nflower = sorted(flower, reverse=True)"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n''') == '7'\nassert solution('''2 2\n1 2 3\n1 3 4\n2 4 5\n''') == '4'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == \"4\"\nassert solution('4') == \"3\"\nassert solution('5') == \"5\"\nassert solution('6') == \"6\""
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\n\nassert solution('6') == '3'\n\nassert solution('7') == '6'\n\nassert solution('8') == '7'\n\nassert solution('9') == '8'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"5 3 4 5 2\") == \"5\"\nassert solution(\"5 4 7 5 3\") == \"7\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == '4'\nassert solution('5\\n2 1 3 5 7\\n5 2 3 4 6\\n6 3 4 1 5\\n3 5 4 2 6\\n4 6 5 3 1\\n') == '10'"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1.0 1.0\\n\"\n    \"3.1 1.0\\n\"\n    \"1.0 3.1\\n\"\n    \"3.1 3.1\\n\"\n    \"4.2 3.1\"\n) == \"6\"\n\nassert solution(\n    \"3\\n\"\n    \"0.9 0.9\\n\"\n    \"3.1 1.0\\n\"\n    \"4.1 2.0\\n\"\n    \"0.9 3.1\\n\"\n    \"2.1 4.1\\n\"\n) == \"6\"\n\nassert solution(\n    \"30\\n\"\n    \"0.8 0.8\\n\"\n    \"8.5 1.2\\n\"\n    \"2.1 3.2\\n\"\n    \"0.8 4.1\\n\"\n    \"2.1 6.1\\n\"\n    \"8.8 5.1\\n\"\n    \"4.5 7.2\\n\"\n    \"0.8 7.2\\n\"\n    \"4.2 5.4\\n\"\n    \"4.7 8.6\\n\"\n    \"6.9 8.7\\n\"\n    \"6.6 9.8\\n\"\n) == \"11\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6', 'Wrong Answer'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\"\nSample Input:\n100\n1.0 1.0\n1.0 3.1\n1.0 2.2\n2.0 2.2\n3.0 2.2\n4.0 2.2\n5.0 2.2\n6.0 2.2\n7.0 2.2\n8.0 2.2\n9.0 2.2\n10.0 2.2\n11.0 2.2\n12.0 2.2\n13.0 2.2\n14.0 2.2\n15.0 2.2\n16.0 2.2\n17.0 2.2\n18.0 2.2\n19.0 2.2\n20.0 2.2\n21.0 2.2\n22.0 2.2\n23.0 2.2\n24.0 2.2\n25.0 2.2\n26.0 2.2\n27.0 2.2\n28.0 2.2\n29.0 2.2\n30.0 2.2\n31.0 2.2\n32.0 2.2\n33.0 2.2\n34.0 2.2\n35.0 2.2\n36.0 2.2\n37.0 2.2\n38.0 2.2\n39.0 2.2\n40.0 2.2\n41.0 2.2\n42.0 2.2\n43.0 2.2\n44.0 2.2\n45.0 2.2\n46.0 2.2\n47.0 2.2\n48.0 2.2\n49.0 2.2\n50.0 2.2\n51.0 2.2\n52.0 2.2\n53.0 2.2\n54.0 2.2\n55.0 2.2\n56.0 2.2\n57.0 2.2\n58.0 2.2\n59.0 2.2\n60.0 2.2\n61.0 2.2\n62.0 2.2\n63.0 2.2\n64.0 2.2\n65.0 2.2\n66.0 2.2\n67.0 2.2\n68.0 2.2\n69.0 2.2\n70.0 2.2\n71.0 2.2\n72.0 2.2\n73.0 2.2\n74.0 2.2\n75.0 2.2\n76.0 2.2\n77.0 2.2\n78.0 2.2\n79.0 2.2\n80.0 2.2\n81.0 2.2\n82.0 2.2\n83.0 2.2\n84.0 2.2\n85.0 2.2\n86.0 2.2\n87.0 2.2\n88.0 2.2\n89.0 2.2\n90.0 2.2\n91.0 2.2\n92.0 2.2\n93.0 2.2\n94.0 2.2\n95.0 2.2\n96.0 2.2\n97.0 2.2\n98.0 2.2\n99.0 2.2\n100.0 2.2\n101.0 2.2\n102.0 2.2\n103.0 2.2\n104.0 2.2\n105.0 2.2\n106.0 2.2\n107.0 2.2\n108.0 2.2\n109.0 2.2\n110.0 2.2\n111.0 2.2\n112.0 2.2\n113.0 2.2\n114.0 2.2\n115.0 2.2\n116.0 2.2\n117.0 2.2\n118.0 2.2\n119.0 2.2\n120.0 2.2\n121.0 2.2\n122.0 2.2\n123.0 2.2\n124.0 2.2\n125.0 2.2\n126.0 2.2\n127.0 2.2\n128.0 2.2\n129.0 2.2\n130.0 2.2\n131.0 2.2\n132.0 2.2\n133.0 2.2\n134.0 2.2\n135.0 2.2\n136.0 2.2\n137.0 2.2\n138.0 2.2\n139.0 2.2\n140.0 2.2\n141.0 2.2\n142.0 2.2\n143.0 2.2\n144.0 2.2\n145.0 2.2\n146.0 2.2\n147.0 2.2\n148.0 2.2\n149.0 2.2\n150.0 2.2\n151.0 2.2\n152.0 2.2\n153.0 2.2\n154.0 2.2\n155.0 2.2\n156.0 2.2\n157.0 2.2\n158.0 2.2\n159.0 2.2\n160.0 2.2\n161.0 2.2\n162.0 2.2\n163.0 2.2\n164.0 2.2\n165.0 2.2\n166.0 2.2\n167.0 2.2\n168.0 2.2\n169.0 2.2\n170.0 2.2\n171.0 2.2\n172.0 2.2\n173.0 2.2\n174.0 2.2\n175.0 2.2\n176.0 2.2\n177.0 2.2\n178.0 2.2\n179.0 2.2\n180.0 2.2\n181.0 2.2\n182.0 2.2\n183.0 2.2\n184.0 2.2\n185.0 2.2\n186.0 2.2\n187.0 2.2\n188.0 2.2\n189.0 2.2\n190.0 2.2\n191.0 2.2\n192.0 2.2\n193.0 2.2\n194.0 2.2\n195.0 2.2\n196.0 2.2\n197.0 2.2\n198.0 2.2\n199.0 2.2\n200.0 2.2\n201.0 2.2\n202.0 2.2\n203.0 2.2\n204.0 2.2\n205.0 2.2\n206.0 2.2\n207.0 2.2\n208.0 2.2\n209.0 2.2\n210.0 2.2\n211.0 2.2\n212.0 2.2\n213.0 2.2\n214.0 2.2\n215.0 2.2\n216.0 2.2\n217.0 2.2\n218.0 2.2\n219.0 2.2\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('10\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 3.1\\n1.0 5.0\\n3.1 5.0\\n5.0 5.0\\n') == '7'"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\nassert solution(r\"\"\"\n1\n0.1 0.1\n0.1 1.0\n0.1 3.1\n1.0 0.1\n1.0 3.1\n1.0 3.1\n2.0 3.1\n3.1 1.0\n3.1 3.1\n3.1 1.0\n3.1 3.1\n3.1 1.0\n3.1 3.1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1''') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('3\\n1.0 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '2'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nassert solution(\"2\\n1.1 1.1\\n3.3 1.1\\n1.1 3.3\\n3.3 3.3\\n5.5 3.3\") == \"7\"\n\nNote: The $n$ input of your program may be large, up to 100,000 in length.\n'''\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('4\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1') == '3'\nassert solution('3\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1') == '2'\nassert solution('2\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1') == '1'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n    5\n    2\n    2\n    ''') == '6'\nassert solution('''\n    5\n    2\n    3\n    ''') == '4'\nassert solution('''\n    4\n    5\n    5\n    ''') == '6'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2\n2\n''') == '5'\nassert solution('''\n5\n2\n3\n''') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1\n1\n1\nSample Input 2:\n2\n2\n2\nSample Output 2:\n1\"\"\") == \"1\"\nassert solution(\"\"\"4\n1\n1\n1\n1\nSample Output 3:\n2\"\"\") == \"3\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\n2') == '5'\nassert solution('3\\n2\\n2') == '4'\nassert solution('4\\n2\\n2') == '2'\nassert solution('5\\n2\\n2') == '1'\nassert solution('6\\n2\\n2') == '3'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2\n1\n4\n4''') == '6'\nassert solution('''5\n2\n2\n2\n2\n3''') == '4'\nassert solution('''5\n4\n2\n2\n3''') == '6'\nassert solution('''4\n3\n2\n2\n3''') == '4'\n\nimport sys\nimport io\nimport os\nfrom typing import List"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('2\\n2') == '4'\nassert solution('2\\n2\\n2') == '6'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n2\\n2\\n\") == \"5\"\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\n2') == '5'\nassert solution('3\\n3\\n3') == '1'\nassert solution('1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n2\\n') == '5'\nassert solution('3\\n2\\n2\\n') == '7'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 2 2 1\n''') == '1 1'\n\nassert solution('''\n2\n2 2 2 1\n''') == '0 1'\n\nassert solution('''\n3\n2 1 2 1\n''') == '1 0'\n\nassert solution('''\n3\n2 1 1 1\n''') == '1 1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\n2 2 2 1\\n') == '1 1'\nassert solution('3 3\\n2 2 2 1\\n') == '0 0'\n\n'''\n\nimport math\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('2 3\\n2 2 2 1') == '2 1'\n\nSample Input:\n2 5\n7 3 4 6 2\nSample Output:\n1 1\n7 2\n\nassert solution('2 5\\n7 3 4 6 2') == '1 1'\nassert solution('7 3 4 6 2\\n1 1') == '7 2'\n\nassert solution('2 9\\n8 5 6 2') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '1 1'\nassert solution('5 5 5 2') == '1 1'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 3\n2 2 2 1''') == '1 1'\nassert solution('''10 10\n1 2 1 1 2 1 1 2 3 2 2 1''') == '3 1'''"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 3\n2 2 2 1\n''') == '1 1'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 2 1') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('2 4\\n5 2 5 1') == '2 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('1 2\\n5 2 1') == '1 4'\nassert solution('1 5\\n3 5 1') == '1 7'\nassert solution('1 5\\n4 5 1') == '1 10'\nassert solution('1 5\\n3 5 1') == '1 17'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 3\n2 2 2 1\n\"\"\") == \"1 1\"\nassert solution(\"\"\"\n1 1\n2 2 2 1\n\"\"\") == \"2 1\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('12') == '2'\nassert solution('8') == '2'\nassert solution('123') == '4'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '11'\nassert solution('10') == '22'\nassert solution('100') == '200'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '13'\nassert solution('4') == '15'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"100\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n''') == '14'\nassert solution('''\n10\n''') == '12'\nassert solution('''\n8\n''') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"20\"\nassert solution(\"101\") == \"0\"\nassert solution(\"2000\") == \"0\""
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '20'\nassert solution('3') == '60'\nassert solution('4') == '120'\nassert solution('5') == '200'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '10'\nassert solution('1') == '10'\nassert solution('123456789') == '12'\nassert solution('10') == '10'\nassert solution('100000000') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"100\"\nassert solution(\"123\") == \"1210\"\nassert solution(\"1234\") == \"1230\"\nassert solution(\"123456789\") == \"12345678900\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n100 2\n1000 1 0\n1 1000 1\n''') == '0.002'\nassert solution('''\n1 2\n100 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n1 2\n10000 1 0\n1 1000 1\n''') == '0.002'\nassert solution('''\n1 2\n100 1 0\n1 1000 1\n''') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2 3') == '0.018'\nassert solution('1 2 3 4') == '0.162'\nassert solution('1 2 3 4 5') == '0.162'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '0.001'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"0.001\"\nassert solution(\"1 1 1\") == \"1.000\"\nassert solution(\"2 2 3\") == \"0.000\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('1 2 3') == '0.050'\nassert solution('1 2 3 4') == '0.100'\nassert solution('1 2 3 4 5') == '0.150'\nassert solution('1 2 3 4 5 6') == '0.200'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"0.001\"\nassert solution(\"1 1\") == \"0.0\"\nassert solution(\"2 2\") == \"0.001\"\nassert solution(\"3 3\") == \"0.0\"\nassert solution(\"4 4\") == \"0.001\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '0.000'\nassert solution('1 2') == '0.001'\n\"\"\"\n\nimport sys\nimport math\nimport bisect"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 2\n100 1 0\n1 100 1\nSample Input:\n3 4\n100 1 0\n1 100 1\n1 1000 1\nSample Output:\n0.05\n\"\"\") == \"0.05000000000000005\"\nassert solution(\"\"\"\n1 1\n1 1\nSample Input:\n3 4\n100 1 0\n1 100 1\n1 1000 1\nSample Output:\n0.16666666666666668\n\"\"\") == \"0.16666666666666668\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\nassert solution('1 2\\n1000 1 0\\n1 1000 1') == '0.001'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2 10000\\n1 2\\n2 3\") == \"0\"\nassert solution(\"3 3 2 10000\\n1 2\\n2 3\") == \"1\"\nassert solution(\"3 3 2 10000\\n1 2\\n2 3\") == \"2\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 2 10000\n1 2\n2 3\n3 1\n''') == '0'\nassert solution('''4 6 2 5\n1 2\n2 3\n3 1\n4 4\n1 1\n3 3\n''') == '6'\nassert solution('''3 3 2\n1 2\n2 3\n3 1\n''') == '0'\nassert solution('''6 4 2 5\n1 2\n2 3\n3 1\n4 4\n1 1\n3 3\n''') == '4'\nassert solution('''6 3 2 5\n1 2\n2 3\n3 1\n4 4\n1 1\n3 3\n''') == '3'\n'''\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2 10000\\n1 2\\n2 3\\n3 1\") == \"0\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2 10000') == '1'\nassert solution('4 3 2 7') == '2'\nassert solution('7 2 7') == '4'\nassert solution('10 10 10') == '10'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3 2 10000\n1 2\n2 3\n3 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 5 2 3\n1 2\n2 3\n3 4\n4 5\n5 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1\\n') == '0'\nassert solution('5 5 3 2 10000\\n1 2\\n2 3\\n4 5\\n3 4\\n') == '3'\nassert solution('5 5 3 2 10000\\n1 2\\n3 3\\n4 5\\n5 5\\n') == '1'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2 10000\\n1 2\\n2 3\\n3 1') == '0'\nassert solution('3 4 3 10000\\n1 2\\n2 3\\n3 4') == '0'\nassert solution('3 4 3 10000\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('3 4 3 10000\\n1 2\\n2 3\\n3 4') == '0'\nassert solution('3 4 3 10000\\n1 2\\n2 3\\n3 4') == '1'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 10000\") == \"0\"\nassert solution(\"3 3 2 1\") == \"3\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 3\") == \"0\"\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 2 10000\n1 2\n2 3\n3 1\n''') == '0'\nprint(\"You passed : {}% of the tests!\".format(round(len(tests_passed) / len(tests_amount) * 100, 2)))"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3 2 10000\n1 2\n2 3\n3 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 3 3 3\n1 2\n1 3\n2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3 3 3\n1 2\n1 3\n2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 10 3 3\n5 5 2\n6 5 3\n7 6 5\n8 8 4\n9 7 5\n10 9 5\n1 1 2\n2 2 3\n3 3 4\n4 4 4\n5 4 5\n6 6 5\n7 7 5\n8 7 6\n9 9 6\n10 10 5\n11 12 5\n12 11 5\n13 13 5\n14 14 6\n15 14 7\n16 15 5\n17 17 5\n18 18 6\n19 18 7\n20 20 7\n21 21 5\n22 22 6\n23 23 5\n24 24 6\n25 25 5\n26 26 5\n27 27 5\n28 28 6\n29 29 5\n30 30 5\n31 31 5\n32 32 5\n33 33 5\n34 34 6\n35 35 5\n36 36 6\n37 37 5\n38 38 6\n39 39 5\n40 40 5\n41 41 5\n42 42 5\n43 43 5\n44 44 5\n45 45 5\n46 46 5\n47 47 5\n48 48 5\n49 49 5\n50 50 5\n51 51 5\n52 52 5\n53 53 5\n54 54 5\n55 55 5\n56 56 5\n57 57 5\n58 58 5\n59 59 5\n60 60 5\n61 61 5\n62 62 5\n63 63 5\n64 64 5\n65 65 5\n66 66 5\n67 67 5\n68 68 5\n69 69 5\n70 70 5\n71 71 5\n72 72 5\n73 73 5\n74 74 5\n75 75 5\n76 76 5\n77 77 5\n78 78 5\n79 79 5\n80 80 5\n81 81 5\n82 82 5\n83 83 5\n84 84 5\n85 85 5\n86 86 5\n87 87 5\n88 88 5\n89 89 5\n90 90 5\n91 91 5\n92 92 5\n93 93 5\n94 94 5\n95 95 5\n96 96 5\n97 97 5\n98 98 5\n99 99 5\n100 100 5\n101 101 5\n102 102 5\n103 103 5\n104 104 5\n105 105 5\n106 106 5\n107 107 5\n108 108 5\n109 109 5\n110 110 5\n111 111 5\n112 112 5\n113 113 5\n114 114 5\n115 115 5\n116 116 5\n117 117 5\n118 118 5\n119 119 5\n120 120 5\n121 121 5\n122 122 5\n123 123 5\n124 124 5\n125 125 5\n126 126 5\n127 127 5\n128 128 5\n129 129 5\n130 130 5\n131 131 5\n132 132 5\n133 133 5\n134 134 5\n135 135 5\n136 136 5\n137 137 5\n138 138 5\n139 139 5\n140 140 5\n141 141 5\n142 142 5\n143 143 5\n144 144 5\n145 145 5\n146 146 5\n147 147 5\n148 148 5\n149 149 5\n150 150 5\n151 151 5\n152 152 5\n153 153 5\n154 154 5\n155 155 5\n156 156 5\n157 157 5\n158 158 5\n159 159 5\n160 160 5\n161 161 5\n162 162 5\n163 163 5\n164 164 5\n165 165 5\n166 166 5\n167 167 5\n168 168 5\n169 169 5\n170 170 5\n171 171 5\n172 172 5\n173 173 5\n174 174 5\n175 175 5\n176 176 5\n177 177 5\n178 178 5\n179 179 5\n180 180 5\n181 181 5\n182 182 5\n183 183 5\n184 184 5\n185 185 5\n186 186 5\n187 187 5\n188 188 5\n189 189 5\n190 190 5\n191 191 5\n192 192 5\n193 193 5\n194 194 5\n195 195 5\n196 196 5\n197 197 5\n198 198 5\n199 199 5\n200 200 5\n201 201 5\n202 202 5\n203 203 5\n204 204 5\n205 205 5\n206 206 5\n207 207 5\n208 208 5\n209 209 5\n210 210 5\n211 211 5\n212 212 5\n213 213 5\n214 214 5\n215 215 5\n216 216 5\n217 217 5\n218 218 5\n219 219 5\n220 220 5\n221 221 5\n222 222 5\n223 223 5\n224 224 5\n225 225 5\n226 226 5\n227 227 5\n228 228 5\n229 229 5\n230 230 5\n231 231 5\n232 232 5\n233 233 5\n234 234 5\n235 235 5\n236 236 5\n237 237 5\n238 238 5\n239 239 5\n240 240 5\n241 241 5\n242 242 5\n243 243 5\n244 244 5\n245 245 5\n246 246 5\n247 247 5\n248 248 5\n249 249 5\n250 250 5\n251 251 5\n252 252 5\n253 253 5\n254 254 5\n255 255 5\n256 256 5\n257 257 5\n258 258 5\n259 259 5\n260 260 5\n261 261 5\n262 262 5\n263 263 5\n264 264 5\n265 265 5\n266 266 5\n267 267 5\n268 268 5\n269 269 5\n270 270 5\n271 271 5\n272 272 5\n273 273 5\n274 274 5\n275 275 5\n276 276 5\n277 277 5\n278 278 5\n279 279 5\n280 280 5\n281 281 5\n282 282 5\n283 283 5\n284 284 5\n285 285 5\n286 286 5\n287 287 5\n288 288 5\n289 289 5\n290 290 5\n291 291 5\n292 292 5\n293 293 5\n294 294 5\n295 295 5\n296 296 5\n297 297 5\n298 298 5\n299 299 5\n300 300 5\n301 301 5\n302 302 5\n303 303 5\n304 304 5\n305 305 5\n306 306 5\n307 307 5\n308 308 5\n309 309 5\n310 310 5\n311 311 5\n312 312 5\n313 313 5\n314 314 5\n315 315 5\n316 316 5\n317 317 5\n318 318 5\n319 319 5\n320 320 5\n321 321 5\n322 322 5\n323 323 5\n324 324 5\n325 325 5\n326 326 5\n327 327 5\n328 328 5\n329 329 5\n330 330 5\n331 331 5\n332 332 5\n333 333 5\n334 334 5\n335 335 5\n336 336 5\n337 337 5\n338 338 5\n339 339 5\n340 340 5\n341 341 5\n342 342 5\n343 343 5\n344 344 5\n345 345 5\n346 346 5\n347 347 5\n348 348 5\n349 349 5\n350 350 5\n351 351 5\n352 352 5\n353 353 5\n354 354 5\n355 355 5\n356 356 5\n357 357 5\n358 358 5\n359 359 5\n360 360 5\n361 361 5\n362 362 5\n363 363 5\n364 364 5\n365 365 5\n366 366 5\n367 367 5\n368 368 5\n369 369 5\n370 370 5\n371 371 5\n372 372 5\n373 373 5\n374 374 5\n375 375 5\n376 376 5\n377 377 5\n378 378 5\n379 379 5\n380 380 5\n381 381 5\n382 382 5\n383 383 5\n384 384 5\n385 385 5\n386 386 5\n387 387 5"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n1\\n1\\n1\") == \"26\"\nassert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\nassert solution(\"3\\n1 2\\n1 3\") == \"25\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n1 3 0 0\n\"\"\") == \"26\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0\") == \"26\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n\"\"\") == \"26\"\nassert solution(\"\"\"\n6\n0 1 2 1 2 1\n1 2 3 2 2 1\n1 3 2 3 2 1\n2 1 3 2 3 1\n2 3 1 1 3 1\n2 2 3 1 3 1\n3 1 2 3 1 1\n3 2 2 1 1 1\n\"\"\") == \"28\"\n\nimport math"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 1 1\n1 0 2\n1 2 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 1 1 1\n1 0 2 2\n1 2 0 3\n1 2 3 0\n''') == '26'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('5 10 5 10') == '0.2'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.333333333'\nassert solution('''3 2\n20 20 20 40\nX.X\nX.T\n''') == '0.666666667'\n'''\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '0.333333333'\nassert solution('5 5') == '0.0833333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n20 20 20 40\n.X.\nT.T''') == '0.333333333 0.333333333 0.333333333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"0.33333333\"\nassert solution(\"5 2\") == \"0.666666667\""
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0.333333333'\nassert solution('10 10') == '0.0'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n20 20 20 40\nX.X\nT.T\n\"\"\") == \"0.333333333\"\nassert solution(\"\"\"\n1 2\n2 2 2 3\n3\n\"\"\") == \"0.3333333333333333\"\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '3 2\\n'\n    '20 20 20 40\\n'\n    'T.T\\n'\n) == '0.666666667'\nassert solution(\n    '3 2\\n'\n    '20 20 20 40\\n'\n    'X.X\\n'\n) == '0.333333333'\nassert solution(\n    '3 2\\n'\n    '20 20 20 40\\n'\n    'X.X\\n'\n) == '0.33333333'\nassert solution(\n    '3 2\\n'\n    '20 20 20 40\\n'\n    'X.X\\n'\n) == '0.6666666667'\nassert solution(\n    '3 2\\n'\n    '20 20 20 40\\n'\n    'X.X\\n'\n) == '0.3333333333333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5\\n20 20 20 40\\nX.X\\nT.T\\n') == '0.66666667'\nassert solution('3 2\\n10 20 20 40\\nX.X\\nT.T\\n') == '0.33333333'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.333333333\\n0.666666667'\nassert solution('5 5\\n3 3 4 5\\n.T.\\nX.T.\\n.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\nX.T.\\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"0 0 1 1\n0 1 1 0\n0 1 0 1\n0 1 0 1\"\"\"\n    ) == \"0.16666666666666666\"\n\nassert solution(\n    \"\"\"0 0 1 1\n0 0 1 1\n0 1 1 0\n0 1 0 1\"\"\"\n    ) == \"0.16666666666666666\"\n\nassert solution(\n    \"\"\"0 0 1 1\n0 0 1 1\n0 1 0 1\n0 0 1 1\"\"\"\n    ) == \"0.16666666666666666\"\n\nassert solution(\n    \"\"\"0 0 1 1\n0 0 1 1\n0 1 1 0\n0 1 0 1\"\"\"\n    ) == \"0.16666666666666666\"\n\nassert solution(\n    \"\"\"0 0 1 1\n0 0 1 1\n0 1 0 1\n0 1 0 1\"\"\"\n    ) == \"0.16666666666666666\""
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('23 0 23 0') == '0.25'\nassert solution('42 42 42 42') == '0.5'\nassert solution('123 2 3 4') == '0.75'\nassert solution('1.0 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5') == '1.0'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\n\n\"\"\"\n\n\n\nfrom math import pi\n\na,b,c,d = list(map(float,stdin.split()))\n\ns = pi*a*b\nprint(s)\n\nprint(1/(2*s*d))\n\nprint(1/(2*s*c))\n\nprint(1/(2*s*b))\n\nprint(1/(2*s*a))\n\nprint(1/(2*s*d-s*c)-1/(2*s*d+s*c)-1/(2*s*d-s*c)-1/(2*s*d+s*c))"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n45 45 0 0\n\"\"\") == \"0.75\"\nassert solution(\"\"\"\n45 30 0 0\n\"\"\") == \"0.00\"\nassert solution(\"\"\"\n10 10 0 0\n\"\"\") == \"0.50\"\nassert solution(\"\"\"\n20 10 0 0\n\"\"\") == \"0.00\"\nassert solution(\"\"\"\n90 60 0 0\n\"\"\") == \"0.00\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('90 90 0 0') == '0.625'\nassert solution('90 0 0 0') == '0.5'\nassert solution('0 0 0 0') == '0'\nassert solution('0 90 0 0') == '0'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('20 20 20 20') == '0.5'\nassert solution('5 5 5 5') == '0.5'\nassert solution('0.00000001 0.00000001 0.00000001 0.00000001') == '0.9999999999999999'"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"18 26 10 0\") == \"1.5\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0.82345679 0.82345679 0.82345679 0.82345679') == '0.75'\nassert solution('60.0133447 0.00123924 0.01334470 0.00123924') == '0.875'\nassert solution('0.80234509 0.80234509 0.80234509 0.80234509') == '0.75'\nassert solution('0.80234527 0.80234527 0.80234527 0.80234527') == '0.75'\nassert solution('0.9999999 0.9999999 0.9999999 0.9999999') == '0.75'\n\"\"\"\n\nstdin = \"45 45 0 0\""
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 20 5 50\") == \"0.01\"\nassert solution(\"0 0 0 0\") == \"1.0\"\nassert solution(\"30 30 30 30\") == \"0.75\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0.75'"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\nassert solution('5 2\\n0 1 2\\n1 2 11') == '6'"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n\nassert solution(\n'''\n3 1\n2 3\n1 2\n''') == '1'\n\nassert solution(\n'''\n7 2\n1 3\n2 3\n3 2\n1 2\n2 2\n1 1\n3 1\n''') == '5'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''\n4 5\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '9'\nassert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '7'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\n\n----\n\nSample Input:\n3 4\n0 1 2\n0 3 5\n0 2 7\nSample Output:\n1"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n4 5 2\n5 6 2\n5 7 8\n6 7 3\n6 8 5\n7 8 2\n7 9 1\n8 9 7\n8 10 1\n9 10 8\n10 11 2\n11 3 2\n11 4 2\n11 5 8\n11 6 3\n11 7 1\n11 8 2\n11 9 1\n12 11 3\n12 13 2\n13 13 2\n13 14 1\n13 15 1\n13 16 2\n13 17 3\n13 18 2\n13 19 3\n13 20 3\n13 21 2\n13 22 3\n13 23 2\n13 24 1\n13 25 3\n13 26 2\n13 27 3\n13 28 2\n13 29 3\n13 30 2\n13 31 3\n13 32 3\n13 33 2\n13 34 3\n13 35 2\n13 36 3\n13 37 3\n13 38 3\n13 39 3\n13 40 2\n13 41 3\n13 42 3\n13 43 3\n13 44 3\n13 45 3\n13 46 3\n13 47 3\n13 48 3\n13 49 3\n13 50 2\n13 51 2\n13 52 3\n13 53 3\n13 54 3\n13 55 3\n13 56 3\n13 57 3\n13 58 3\n13 59 3\n13 60 3\n13 61 3\n13 62 3\n13 63 3\n13 64 3\n13 65 3\n13 66 3\n13 67 3\n13 68 3\n13 69 3\n13 70 3\n13 71 3\n13 72 3\n13 73 3\n13 74 3\n13 75 3\n13 76 3\n13 77 3\n13 78 3\n13 79 3\n13 80 3\n13 81 3\n13 82 3\n13 83 3\n13 84 3\n13 85 3\n13 86 3\n13 87 3\n13 88 3\n13 89 3\n13 90 3\n13 91 3\n13 92 3\n13 93 3\n13 94 3\n13 95 3\n13 96 3\n13 97 3\n13 98 3\n13 99 3\n13 100 3\n14 0 1 2\n14 2 3 8\n14 3 5 11\n14 4 7 2\n14 5 8 9\n14 6 10 5\n14 7 11 2\n14 8 12 2\n14 9 13 1\n14 10 14 3\n14 11 15 2\n14 12 16 1\n14 13 18 3\n14 14 19 3\n14 15 20 2\n14 16 21 3\n14 17 22 1\n14 18 23 3\n14 19 25 2\n14 20 27 3\n14 21 30 3\n14 22 32 3\n14 23 33 2\n14 24 34 1\n14 25 36 2\n14 26 38 2\n14 27 39 3\n14 28 40 3\n14 29 42 2\n14 30 45 3\n14 31 47 3\n14 32 50 3\n14 33 52 2\n14 34 54 3\n14 35 56 3\n14 36 58 3\n14 37 60 3\n14 38 62 3\n14 39 64 3\n14 40 66 3\n14 41 68 3\n14 42 70 3\n14 43 72 3\n14 44 74 3\n14 45 76 3\n14 46 78 3\n14 47 80 3\n14 48 82 3\n14 49 84 3\n14 50 86 3\n14 51 88 3\n14 52 90 3\n14 53 92 3\n14 54 94 3\n14 55 96 3\n14 56 98 3\n14 57 100 3\n14 58 102 3\n14 59 104 3\n14 60 106 3\n14 61 108 3\n14 62 110 3\n14 63 112 3\n14 64 114 3\n14 65 116 3\n14 66 118 3\n14 67 120 3\n14 68 122 3\n14 69 124 3\n14 70 126 3\n14 71 128 3\n14 72 130 3\n14 73 132 3\n14 74 134 3\n14 75 136 3\n14 76 138 3\n14 77 140 3\n14 78 142 3\n14 79 144 3\n14 80 146 3\n14 81 148 3\n14 82 150 3\n14 83 152 3\n14 84 154 3\n14 85 156 3\n14 86 158 3\n14 87 160 3\n14 88 162 3\n14 89 164 3\n14 90 166 3\n14 91 168 3\n14 92 170 3\n14 93 172 3\n14 94 174 3\n14 95 176 3\n14 96 178 3\n14 97 180 3\n14 98 182 3\n14 99 184 3\n14 100 186 3\n14 101 188 3\n14 102 190 3\n14 103 192 3\n14 104 194 3\n14 105 196 3\n14 106 198 3\n14 107 200 3\n14 108 202 3\n14 109 204 3\n14 110 206 3\n14 111 208 3\n14 112 210 3\n14 113 212 3\n14 114 214 3\n14 115 216 3\n14 116 218 3\n14 117 220 3\n14 118 222 3\n14 119 224 3\n14 120 226 3\n14 121 228 3\n14 122 230 3\n14 123 232 3\n14 124 234 3\n14 125 236 3\n14 126 238 3\n14 127 240 3\n14 128 242 3\n14 129 244 3\n14 130 246 3\n14 131 248 3\n14 132 250 3\n14 133 252 3\n14 134 254 3\n14 135 256 3\n14 136 258 3\n14 137 260 3\n14 138 262 3\n14 139 264 3\n14 140 266 3\n14 141 268 3\n14 142 270 3\n14 143 272 3\n14 144 274 3\n14 145 276 3\n14 146 278 3\n14 147 280 3\n14 148 282 3\n14 149 284 3\n14 150 286 3\n14 151 288 3\n14 152 290 3\n14 153 292 3\n14 154 294 3\n14 155 296 3\n14 156 298 3\n14 157 300 3\n14 158 302 3\n14 159 304 3\n14 160 306 3\n14 161 308 3\n14 162 310 3\n14 163 312 3\n14 164 314 3\n14 165 316 3\n14 166 318 3\n14 167 330 3\n14 168 332 3\n14 169 334 3\n14 170 336 3\n14 171 338 3\n14 172 340 3\n14 173 342 3\n14 174 344 3\n14 175 346 3\n14 176 348 3\n14 177 350 3\n14 178 352 3\n14 179 354 3\n14 180 356 3\n14 181 358 3\n14 182 360 3\n14 183 362 3\n14 184 364 3\n14 185 366 3\n14 186 368 3\n14 187 370 3\n14 188 372 3\n14 189 374 3\n14 190 376 3\n14 191 378 3\n14 192 380 3\n14 193 382 3\n14 194 384 3\n14 195 386 3\n14 196 388 3\n14 197 390 3\n14 198 392 3\n14 199 394 3\n14 200 396 3\n14 201 398 3\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9\") == \"4\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''5 7\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''5 10\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '3'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n10 10 0 5\n''') == '100'\nassert solution('''\n2\n3 3 0 2\n''') == '4'\nassert solution('''\n3\n1 10 0 5\n''') == '100'\nassert solution('''\n4\n1 5 1 0\n''') == '5'\nassert solution('''\n5\n0 1 1 0\n''') == '1'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"100\""
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n10 10 0 5\\n') == '100'\nassert solution('2\\n10 10 0 5\\n') == '100'\nassert solution('3\\n10 10 0 5\\n') == '100'\nassert solution('4\\n10 10 0 5\\n') == '100'\nassert solution('5\\n10 10 0 5\\n') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n10 10 0 5\nSample Input:\n4\n10 10 0 5\n20 10 0 5\n30 10 0 5\n40 10 0 5\nSample Output:\n100\n''') == '100'\nassert solution('''\n5\n10 10 0 5\n20 10 0 5\n30 10 0 5\n40 10 0 5\n50 10 0 5\nSample Output:\n50\n''') == '50'\nassert solution('''\n2\n1 1 1 1\n3 1 1 1\nSample Output:\n1\n''') == '1'\nassert solution('''\n3\n10 10 10 10\n20 10 10 10\n30 10 10 10\nSample Output:\n100\n''') == '100'\nassert solution('''\n3\n1 1 1 1\n2 1 1 1\n3 1 1 1\nSample Output:\n0\n''') == '0'"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 10 0 5\n''') == '100'\nassert solution('''\n5 10 0 3\n''') == '5'\n\nprint('PASSED')\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 10 0 5\n10 10 1 5\n10 10 2 5\n10 10 3 5\n10 10 4 5\n10 10 5 5\n10 10 6 5\n10 10 7 5\n10 10 8 5\n10 10 9 5\n10 11 0 5\n10 11 1 5\n10 11 2 5\n10 11 3 5\n10 11 4 5\n10 11 5 5\n10 11 6 5\n10 11 7 5\n10 11 8 5\n10 11 9 5\n11 1 0 5\n11 1 1 5\n11 1 2 5\n11 1 3 5\n11 1 4 5\n11 1 5 5\n11 1 6 5\n11 1 7 5\n11 1 8 5\n11 1 9 5\n11 2 0 5\n11 2 1 5\n11 2 2 5\n11 2 3 5\n11 2 4 5\n11 2 5 5\n11 2 6 5\n11 2 7 5\n11 2 8 5\n11 2 9 5\n11 3 0 5\n11 3 1 5\n11 3 2 5\n11 3 3 5\n11 3 4 5\n11 3 5 5\n11 3 6 5\n11 3 7 5\n11 3 8 5\n11 3 9 5\n11 4 0 5\n11 4 1 5\n11 4 2 5\n11 4 3 5\n11 4 4 5\n11 4 5 5\n11 4 6 5\n11 4 7 5\n11 4 8 5\n11 4 9 5\n11 5 0 5\n11 5 1 5\n11 5 2 5\n11 5 3 5\n11 5 4 5\n11 5 5 5\n11 5 6 5\n11 5 7 5\n11 5 8 5\n11 5 9 5\n11 6 0 5\n11 6 1 5\n11 6 2 5\n11 6 3 5\n11 6 4 5\n11 6 5 5\n11 6 6 5\n11 6 7 5\n11 6 8 5\n11 6 9 5\n11 7 0 5\n11 7 1 5\n11 7 2 5\n11 7 3 5\n11 7 4 5\n11 7 5 5\n11 7 6 5\n11 7 7 5\n11 7 8 5\n11 7 9 5\n11 8 0 5\n11 8 1 5\n11 8 2 5\n11 8 3 5\n11 8 4 5\n11 8 5 5\n11 8 6 5\n11 8 7 5\n11 8 8 5\n11 8 9 5\n11 9 0 5\n11 9 1 5\n11 9 2 5\n11 9 3 5\n11 9 4 5\n11 9 5 5\n11 9 6 5\n11 9 7 5\n11 9 8 5\n11 9 9 5\n\n''')"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 10 0 5\\n') == '100'\nassert solution('2\\n9 6 9 2\\n') == '8'\nassert solution('3\\n6 7 3 4\\n') == '9'\nassert solution('4\\n10 10 0 5\\n') == '100'\nassert solution('5\\n6 4 2 1\\n') == '5'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"100\"\nassert solution_again(\n        \"1\\n10 10 0 5\\n\"\n        \"10\\n20 20 10 20 10 20 20\\n\"\n        \"5\\n20 10 10 20 20 10 20 20\\n\"\n        \"5\\n10 10 10 20 20 10 20 20\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"5 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"20 20 10 20 20 10 20 20\\n\"\n        \"20 20 10 20 20 20 20 20\\n\"\n        \"20 20 10 20 20 20 20 20\\n\"\n        \"20 20 20 20 20 20 20 20\\n\"\n        \"20 20 20 20 20 20 20 20\\n\"\n        \"20 20 20 20 20 20 20 20\\n\"\n        \"10 20 20 20 20 20 20 20\\n\"\n        \"20 20 20 20 20 20 20 20\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10 10 10 10 10 10 10 10\\n\"\n        \"10"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"100\""
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"100\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 0 2 2\n1 1 3 4\n5 7 6 8\n2 4 6 5\n1 4 1 3\n1 3 3 4\n4 5 2 3\n3 5 3 4\n3 2 3 4\n4 5 4 2\n3 4 4 2\n2 4 4 1\n3 5 3 4\n2 4 1 3\n''') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 1 3 4\\n5 7 6 8') == '1'\nassert solution('4\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n0 0 5 5\\n1 1 6 7') == '0'\nprint('all tests passed')"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4 3 5\\n3 1 4 5\\n2 2 4 5\\n0 0 2 2') == '1'\nassert solution('2\\n4 2 4\\n2 2 4\\n3 1 5\\n1 0 1\\n2 2 2\\n0 0 3\\n3 1 1\\n2 3 2\\n1 0 1\\n1 0 1\\n1 1 1\\n1 2 3\\n2 2 2\\n0 2 3\\n3 1 3\\n3 1 1\\n0 1 3\\n3 1 2\\n0 2 2\\n1 2 2\\n2 3 2\\n3 1 3\\n0 2 1\\n1 3 2\\n1 3 2\\n2 2 3\\n3 1 3\\n2 3 3') == '0'\nassert solution('4\\n6 4 8\\n4 7 8\\n0 0 4\\n1 0 5\\n2 1 6\\n3 3 5\\n4 1 7\\n0 1 2\\n0 2 5\\n0 2 5\\n1 1 5\\n3 2 2\\n1 2 5\\n3 2 5\\n3 2 4\\n2 2 4\\n2 2 4\\n0 2 3\\n0 1 4\\n0 1 4\\n2 2 4\\n0 2 4\\n1 1 4\\n0 1 4\\n3 2 5\\n0 2 5\\n1 1 5\\n3 2 5\\n1 1 5\\n2 1 5\\n1 1 5\\n0 3 5\\n2 3 5\\n1 2 5\\n2 1 5\\n2 1 5\\n1 2 5\\n0 2 5\\n0 2 5\\n1 1 5\\n1 1 5\\n0 2 5\\n0 3 5\\n1 1 5\\n1 1 5\\n1 1 5\\n1 2 5\\n1 1 5\\n2 2 5\\n0 2 5\\n1 1 5\\n2 1 5\\n0 2 5\\n1 1 5\\n1 1 5\\n2 2 5\\n3 2 5\\n0 1 5\\n1 1 5\\n1 2 5\\n1 1 5\\n2 1 5\\n1 1 5\\n2 2 5\\n0 1 5\\n1 2 5\\n2 2 5\\n0 2 5\\n1 2 5\\n0 2 5\\n0 2 5\\n1 1 5\\n1 1 5\\n1 2 5\\n1 1 5\\n2 2 5\\n0 2 5\\n1 1 5\\n2 1 5\\n3 2 5\\n1 1 5\\n1 2 5\\n1 1 5\\n2 1 5\\n2 2 5\\n1 2 5\\n1 2 5\\n1 1 5\\n1 1 5\\n0 2 5\\n0 3 5\\n0 2 5\\n0 2 5\\n1 2 5\\n2 2 5\\n1 1 5\\n1 1 5\\n1 1 5\\n1 1 5\\n1 2 5\\n1 1 5\\n2 1 5\\n0 2 5\\n0 3 5\\n0 2 5\\n0 2 5\\n1 1 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 3 5\\n1 1 5\\n0 2 5\\n0 2 5\\n0 2 5\\n1 1 5\\n0 2 5\\n1 1 5\\n0 2 5\\n0 2 5\\n1 1 5\\n2 1 5\\n1 1 5\\n1 1 5\\n1 2 5\\n1 1 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n1 2 5\\n0 1 5\\n0 2 5\\n0 2 5\\n1 1 5\\n1 1 5\\n0 2 5\\n0 1 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n1 1 5\\n0 2 5\\n1 1 5\\n1 1 5\\n1 1 5\\n1 1 5\\n1 1 5\\n1 1 5\\n0 3 5\\n1 1 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n1 1 5\\n0 1 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0 2 5\\n0"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 2 2 2\\n3 4 1 3\\n5 6 3 3') == '0'\nassert solution('1\\n5 5 5 5\\n10 10 10 10\\n15 15 15 15') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('2 1 0 2') == '1'\nassert solution('10') == '0'\nassert solution('9 8 9 8') == '1'\nassert solution('10 5 3 2') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution(input_data=\"5 2 4 2\") == '0'\nassert solution(input_data=\"10 4 5 4\") == '1'\nassert solution(input_data=\"1 1 10 10\") == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n') == '1'\nassert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n1 0 2 3\\n1 1 5 6\\n') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n5 3 4\n8 8 3 2\n2 1 2 4\n2 1 2 4\n5 5 4 5\n4 5 1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nassert solution(\"4 4\\nE E E E\\n1 2 3\\n3 1 2\\n1 1 2\\n1 1 1\\n2 1 1\\n3 3 2\\n2 3 2\\n1 1 1\\n1 1 3\\n2 1 2\\n1 1 2\\n1 3 2\\n2 1 2\\n1 3 2\\n1 1 2\\n2 1 2\\n1 1 2\\n1 1 3\\n3 1 2\\n1 3 2\\n1 1 2\\n2 1 2\\n1 1 2\\n1 1 2\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 3 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 3 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 3 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 3 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 3 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 3\\n2 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n''') == '14'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n''') == '10'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n''') == '6'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\nS S S S S\n''') == '18'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"17\"\nassert solution(\n\"\"\"\n2 3\n1 2 3\n5 4 3 2\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n\"\"\") == \"17\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nprint(\"Success\")\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5') == '17'\nassert solution('5 2') == '2'\nassert solution('5 3') == '3'\nassert solution('5 4') == '4'\nassert solution('5 5') == '5'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S') == '17'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '17'\nassert solution('0 1') == '0'\nassert solution('6 5') == '12'\nassert solution('4 2') == '2'\nassert solution('-8 8') == '16'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '14'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '15'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution('''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '15'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"17\"\nassert solution(\"4 4\") == \"14\"\nassert solution(\"6 6\") == \"13\"\nassert solution(\"3 3\") == \"12\"\nassert solution(\"9 9\") == \"10\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n5\n3 2 3 1 1\nSample Output:\n1 4 3 5 2\n2 3 5 1 4\n\"\"\"\n) == \"\"\"impossible\"\"\"\nassert solution(\n\"\"\"\n5\n3 2 3 1 1\n\"\"\"\n) == \"\"\"2 3 5 1 4\"\"\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 4 3 5 2\"\nassert solution(\"5 1\") == \"1 4 3 5 2\"\nassert solution(\"5 2\") == \"1 4 3 5 2\"\nassert solution(\"5 1 2\") == \"1 4 3 5 2\"\nassert solution(\"5 1 2 3\") == \"1 4 3 5 2\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '1 4 3 5 2'\nassert solution('3') == '1 4 3 5 2'\nassert solution('4') == 'impossible'\nassert solution('5') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\nassert solution(\"5\\n5 5 5 5 5\") == \"impossible\"\n\n'''\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 4 3 5 2'\nassert solution('5') == '2 3 5 1 4'"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"3\") == \"1 4 3 5 2\"\nassert solution(\"2\") == \"2 3 5 1 4\"\nassert solution(\"3\") == \"impossible\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3 2 3 1 1') == \"1 4 3 5 2\"\nassert solution('8\\n3 2 2 3 1 1 2 1') == \"2 3 4 5 3 1\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"6\") == \"impossible\"\n\nassert solution(\"10\") == \"1 4 3 5 2\"\nassert solution(\"10\") == \"1 4 3 5 2\"\nassert solution(\"15\") == \"1 4 3 5 2 6\"\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n3 2 3 1 1''') == '1 4 3 5 2'\nassert solution('''3\n3 2 1 1''') == '2 3 5 1 4'\nassert solution('''2\n1 2 1''') == 'impossible'\n''')\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 4 3 5 2'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'\n\"\"\"\nimport math"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 1\\n1 4') == '0.76772047'\nassert solution('2\\n4 3\\n1 0') == '0.75'\nassert solution('3\\n3 3\\n2 2') == '0.3333333333333'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 0 1\n1 4\nSample Input:\n3\n0 0 5\n0 0 2\nSample Output:\n0.58333333\n''') == '0.58333333'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 2 1\") == \"0.76772047\"\nassert solution(\"5\\n1 1 1 1 1\") == \"0.27151632\"\nassert solution(\"4\\n1 2 1\") == \"0.0\"\nprint('\"Run\" is good. Great job!')\n\"\"\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0.76\"\nassert solution(\"1\\n1 1\") == \"0.76\"\nassert solution(\"1\\n1 1\\n1 1\") == \"0.76\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0.76772047'\nassert solution() == '0.76772047'\nassert solution() == '0.76772047'\n'''\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 1\n1 4\n''') == '0.76772047'\nassert solution('''\n2\n0 1 0\n1 2\n''') == '0.76664745'\nassert solution('''\n3\n0 1 0\n1 4\n1 0 1\n''') == '0.7666472'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.76772047'\nassert solution('3 0 1') == '0.76772047'\nassert solution('3 0 1 0.67') == '0.76772047'\nassert solution('3 0 1 0.67 0.67') == '0.76772047'\nassert solution('3 0 1 1.01') == '0.76772047'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\nassert solution('2\\n3 0 1\\n1 4') == '0.96785214'\nassert solution('4\\n4 0 1\\n1 4') == '0.99999999'\nassert solution('10\\n15 0 1\\n1 4') == '0.99999997'\nassert solution('100\\n10 0 1\\n1 4') == '1.00000000'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0.76772047'\nassert solution('2') == '0.96772047'\n\n'''\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    'hello teams'\n) == '27'\n\nassert solution(\n    'helmp yalmp yalp eemp'\n) == '3'\n\nassert solution(\n    'bbdddbbbb'\n) == '1'\n\nassert solution(\n    'hello yalp eemp yalmp yalpp eempp'\n) == '5'\n\nassert solution(\n    'helmp yalp yalpp eempp yalmp yalpp yalp eempp'\n) == '5'"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nhelmp\ntelmp\nl\nteamp\n''') == '27'\nassert solution('''\nabc\nab\nabc\n''') == '1'\n'''\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('hello teams') == '27'\nassert solution('zofka') == '5'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"hello teams\") == \"27\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"pear tree\") == \"10\"\n\nn = int(stdin.readline())\nfor i in range(n):\n    s1, s2 = stdin.readline().split()\n    s1 = list(s1)\n    s2 = list(s2)\n    l1 = len(s1)\n    l2 = len(s2)\n    if l1 > l2:\n        s2 = s2 + [\"\"] * (l1 - l2)\n        l2 = l1\n    elif l1 < l2:\n        s1 = s1 + [\"\"] * (l2 - l1)\n        l1 = l2\n    s1 = \"\".join(s1)\n    s2 = \"\".join(s2)\n    res = []\n    while s1 and s2:\n        if s1[0] == s2[0]:\n            s1, s2 = s1[1:], s2[1:]\n        else:\n            res.append(s1[0])\n            s1 = s1[1:]\n            s2 = s2[1:]\n    if s1:\n        res.append(s1[0])\n    if s2:\n        res.append(s2[0])\n    res = \"\".join(res)\n    if res == \"\":\n        print(\"0\")\n    else:\n        print(len(res))\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello bbdddbbbb') == '27'\nassert solution('hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''hello teams\nSample Input:\nhello guys\nSample Output:\n27\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello worlds') == '15'"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('hello teams') == '27'\nassert solution('teams') == '0'\nassert solution('zofka') == '0'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hello teams') == '27'\nassert solution('test') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nassert solution('''\n5 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '1'\n'''\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3''') == '2'\nassert solution('''4 6\n7 7\n8 9\n5 5\n1 2\n3 4\n2 4\n3 4\n1 3''') == '2'\nprint('all tests passed')"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3''') == '2'\nprint(solution('''1 3\n2 4\n5 2\n1 1\n6 4\n7 4\n1 2\n2 4\n2 5\n3 5\n4 5\n2 4\n5 5\n3 5\n3 6\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5\n4 5'''))\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 2\n3\n2\n3\n3 4\n''') == '3'\nassert solution('''\n3 3\n0 0\n3 3\n0 0\n''') == '0'\nassert solution('''\n3 1\n0 0\n1 1\n0 0\n''') == '2'\nassert solution('''\n3 3\n1 3\n0 3\n1 3\n0 3\n''') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n4\\n5\\n\") == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n4\\n5\\n6\\n7\\n8\\n') == '2'\nassert solution('3\\n1\\n8\\n7\\n9\\n10\\n15\\n16\\n') == '2'\nassert solution('1\\n8\\n11\\n9\\n12\\n12\\n12\\n12\\n12\\n12\\n') == '3'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4 5\n2 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n\"\"\"\n    ) == \"2\"\n\nassert solution(\n\"\"\"\n5 4\n1 2\n2 4\n2 5\n4 1\n3 5\n\"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\nab\\nad\\ne\") == \"27\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n3 4\\n2 3\\n5 6\\n6 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '26'\nassert solution('2 2') == '1'\nassert solution('3 4') == '5'\n'''\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\na\nb\nc\nd\ne\ncad''') == \"26\"\nassert solution('''4 3\na\nb\nc\nd\ne\ncad''') == \"11\"\nassert solution('''10 10\na\na\nb\na\na\na\na\na\na\na\na\na\na\nc\nd\nd\nc\nc\ne\ncad''') == \"9\"\n\n## Inputs\n4 3\na\nb\nc\nd\ne\ncad\n## Output\n26\n## Explanation\nTest case 1.\nOne possible solution:\na\nb\nc\nd\ne\ncad\na\nb\nc\nd\ne\ncad\n\nTest case 2.\nOne possible solution:\na\na\nb\na\na\na\na\na\na\na\na\na\na\nc\nd\nd\nc\nc\ne\ncad\na\nb\nc\nd\ne\ncad\n\nTest case 3.\nOne possible solution:\na\na\na\na\na\na\na\na\na\na\na\na\na\nc\nd\nd\nc\nc\ne\ncad\na\nb\nc\nd\ne\ncad\n\nTest case 4.\nOne possible solution:\na\na\na\na\na\na\na\na\na\na\na\na\na\nc\nd\nd\nc\nc\ne\ncad\na\nb\nc\nd\ne\ncad\n\n## Notes\nConsider the problem of finding the position of a string $x$ in the alphabetically ordered string list $S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n}\\\\}$. Assume $x_{n+1} \\\\ne x_{n}$.\n\nIf we run the algorithm repeatedly, and we keep replacing $x_{n+1} = x_{n}$ until we get the correct position, we will eventually find $x_{n+1} = x_{n}$.\n\nWe will run the algorithm from $x_{1}$, and stop once we are able to find $x_{n+1}$.\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\nWe are given that $x_{n+1} = x_{n}$. So we can just run the algorithm from $x_{1}$, and then stop.\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\dots, x_{n+1}\\\\}$$\n\n$$S = \\\\{x_{1}, x_{2}, \\\\"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\nabc\ncde\nxz\nabc\n''') == '26'\nassert solution('''\n5 3\nabc\ncde\nxz\nabcd\n''') == '31'\nassert solution('''\n5 3\nabc\ncde\nxz\nabc\n''') == '23'\n'''\n\ns = stdin.read().split('\\n')\n\nn,k = [int(x) for x in s[0].split()]\n\ns = s[1:]\n\ndata = []\n\nfor i in range(k):\n    data.append(s[i])\n\ndata.sort()"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"26\"\nassert solution(\"3 3\") == \"5\"\nassert solution(\"1000000000 5\") == \"1\"\nassert solution(\"2 5\") == \"4\"\nassert solution(\"4\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n5 3\na\nb\nc\nd\ne\ncad\n\"\"\") == \"26\"\n\nassert solution(\n    \"\"\"\n4 3\na\nb\nc\nd\ne\ncd\n\"\"\") == \"13\"\n\nassert solution(\n    \"\"\"\n1 1\n\"\"\") == \"1\"\n\nassert solution(\n    \"\"\"\n5 2\nabc\nxyz\n\"\"\") == \"3\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\n\") == \"26\"\nassert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\ncad\\n\") == \"1\"\nassert solution(\"10 3\\nabc\\ndef\\n\\n\") == \"1\"\nassert solution(\"5 3\\nabc\\ndef\\n\") == \"1\"\nassert solution(\"5 3\\nabc\\ndef\\n\") == \"0\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(r\"\"\"\n4 4\na\nb\nc\nd\ne\ncad\n\"\"\") == \"4\"\nassert solution(r\"\"\"\n7 7\na\nb\nc\nd\ne\nf\ng\nh\ni\n\"\"\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2 10\n3 3 1''') == '3 1 2 3'\nprint('\"ok\"')"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"5 10 30\\n\"\n    \"10 5 3 1 3\\n\"\n) == \"3 5 2 1 4\"\n\nassert solution(\n    \"10 20 30\\n\"\n    \"10 20 10 30\\n\"\n) == \"10 20 10 30\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 10 30\n10 5 3 1 3\n''') == '4 5 2 1 4'\nassert solution('''\n10 10 100\n10 5 3 1 3\n''') == 'impossible'\nprint('\"Run\" is good, this is a solution!')\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4', \"Wrong\"\nassert solution('10 5 3 1 3') == '3 5 2 1 4', \"Wrong\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('1 10 30') == '10 3 2 1'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"2 4 7\") == \"3 7 4 2\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"10 10 10\") == \"10 10 10\"\nassert solution(\"5 10 30\") == \"5 5 2 1 4\"\nassert solution(\"10 10 10\") == \"10 10 10\"\nassert solution(\"3 1 2 3 3\") == \"3 1 2 3 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 2 1 4') == \"3 5 2 1 4\"\nassert solution('5 10 30') == \"3 5 2 1 4\""
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    5 10 30\n    10 5 3 1 3\n    \"\"\"\n) == \"3 5 2 1 4\"\nassert solution(\n    \"\"\"\n    5 10 10 10 10\n    10 10 10 5 5 3 2 1 1\n    \"\"\"\n) == \"3 5 2 1 4\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '2'\nassert solution('2 3') =='shovel time!'\nassert solution('1 2') =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n3 2\n1 2\n2 3\n1 3\n3 4\n''') == '2'\n\nassert solution('''1\n1\nSample Output:\nshovel time!\n''') =='shovel time!'\n\nassert solution('''2\n1 1\n1 2\nSample Output:\nshovel time!\n''') =='shovel time!'\n\nassert solution('''5\n1 3\n2 3\n1 3\n3 3\n3 3\nSample Output:\n2\n''') == '2'\n\nassert solution('''2\n3 3\n2 2\nSample Output:\nshovel time!\n''') =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"shovel time!\"\nassert solution(\"1\") == \"shovel time!\"\nassert solution(\"2\") == \"shovel time!\"\nassert solution(\"2 2\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') =='shovel time!'\nassert solution('3') =='shovel time!'\nassert solution('6') =='shovel time!'\nassert solution('7') =='shovel time!'\nassert solution('10') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 1\n2 3\n3 4\n''') == '1'\nassert solution('''\n3\n1 1\n2 3\n2 3\n''') == '3'\nassert solution('''\n7\n1 1\n2 3\n3 4\n3 4\n4 4\n4 5\n5 6\n''') == '2'\nassert solution('''\n3\n1 2\n1 3\n2 3\n''') == '3'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"shovel time!\"\nassert solution(\"1 1\") == \"shovel time!\"\nassert solution(\"2 3\") == \"shovel time!\"\nassert solution(\"2 3\") == \"shovel time!\"\nassert solution(\"2 3\") == \"shovel time!\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n2\\n2') =='shovel time!', 'Sample Test Failed'\nassert solution('4\\n1 4\\n4 4\\n3 4\\n3 2\\n2 2\\n1 1') == '8', 'Failed on more complex case'\n\nimport sys\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('10') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n1 1\n2 3''') == '1'\nassert solution('''3\n1 1\n2 3\n2 3''') == '1'\nassert solution('''4\n1 1\n2 3\n2 4\n3 4''') == '3'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 1 2\n''') == '3'\nassert solution('''\n4\n1 2 1 2 1\n''') == '2'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('5\\n5 5 5 5 5') == '4'\nassert solution('3\\n2 2 2') == '2'\nassert solution('2\\n1 1 1') == '1'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 2 3\\n') == '2'\nassert solution('2\\n3 2 3\\n') == '2'\nassert solution('3\\n5 6 7\\n') == '2'\nassert solution('6\\n10 20 30 40 50 60 70 80 90 100\\n') == '4'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 1 2\n''') == '3'\n\nassert solution('''\n4\n1 2 1 2\n''') == '3'\n\nassert solution('''\n1\n1\n''') == '1'\n\nassert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n3\n1 2 1 2\n''') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\n\nsample inputs:\n4\n3 1 2 3\nsample output:\n3\n\"\"\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2\n1 2 1 2\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n1\n1 2 3 4\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n2\n2 3 4 1\n\"\"\") == \"2\"\n\n'''\nThe first line of input gives the number of briefcases. The next lines are the number of bananas in each briefcase, separated by a space, in order from the least evil to the most evil.\n\nReturn the maximum number of executives you can allocate to fulfill your requirement (following the previous requirement).\n'''"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 1 2\n''') == '3'\n\nassert solution('''\n2\n3\n''') == '3'\n\nassert solution('''\n3\n1 1 1\n''') == '3'\n\nassert solution('''\n5\n2 1 2 2 1\n''') == '3'\n\nassert solution('''\n6\n1 1 2 3 4 4\n''') == '3'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 1 2 1\n''') == '2'\nassert solution('''\n8\n1 1 1 1 1 1 1 1\n''') == '3'\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1\n''') == '2'\nassert solution('''\n1000000\n
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 1 2\") == \"3\"\nassert solution(\"6\\n1 2 1 2 1 2\") == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 1 2\\n') == '3'\nassert solution('4\\n1 2 2 1\\n') == '3'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4 999999937\") == \"79\""
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1') == '1', \"wrong\"\nassert solution('2 1 3') == '1', \"wrong\"\nassert solution('2 2 1') == '2', \"wrong\"\nassert solution('2 2 2') == '4', \"wrong\"\nassert solution('2 2 4') == '0', \"wrong\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 4 999999937\n''') == '79'\nassert solution('''\n2 4 999999937\n''') == '4'\nassert solution('''\n10 10 999999937\n''') == '65'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4 999999937') == '79'\nassert solution('0 0 0') == '1'\nassert solution('1 1 1') == '4'\nassert solution('1 0 1') == '5'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2 4\n1 2 3''') == '7'\nassert solution('''4 4 8\n1 2 1 1''') == '6'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5 10\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n''') == '59'\n\nassert solution('''4 4 999999937\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n0 0 1\n''') == '79'\n\nassert solution('''10 10 1099999937\n1 1 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0 0\n1 0 1\n0 0"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3 2\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 5\n2 2\n1 1 1\n2 3\n2 3\n1 1\n2 1\n''') == '2'\n\nassert solution('''\n4 4 999999937\n2 2\n1 1 1\n2 3\n2 3\n1 1\n2 1\n''') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"4 4 999999937 2\") == \"15\"\n\"\"\""
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '79'"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == ''\nassert solution('2') == 'zucchini'\nassert solution('3') == 'zucchini'\nassert solution('4') == 'zucchini'\nassert solution('5') == 'artichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n+zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"zucchini\"\nassert solution(\"3\") == \"zucchini\""
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\n'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\nassert solution('''\n1\n2 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\nassert solution('''\n1\n1 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\nassert solution('''\n1\n1 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\nassert solution('''\n1\n1 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\n''')"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini\\nmushrooms\\nmozzarella\\n'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == 'zucchini\\n'\nassert solution('4\\n') == 'zucchini\\nmushrooms\\n'\nassert solution('4\\n+zucchini\\n-mushrooms\\n+mozzarella\\n') == 'zucchini\\nmushrooms\\n'\nassert solution('4\\n+zucchini\\n-mushrooms\\n+mozzarella\\n-+zucchini') == 'zucchini\\nmushrooms\\n'\nassert solution('4\\n+zucchini\\n-mushrooms\\n+mozzarella\\n-+zucchini\\n-zucchini') == 'zucchini\\nmushrooms\\n'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n\"\"\") == \"zucchini\"\nassert solution(\"\"\"\n3\n4 +zucchini -mozzarella +mushrooms +lettuce\n\"\"\") == \"lettuce\"\nassert solution(\"\"\"\n3\n4 +zucchini -mozzarella +mushrooms -lettuce\n\"\"\") == \"mushrooms\"\nassert solution(\"\"\"\n4\n4 +zucchini -mozzarella -lettuce +tomato\n\"\"\") == \"lettuce\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'zucchini\\nmozzarella\\nmushrooms\\nartichoke\\n'\n\"\"\""
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'PS'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PP\\nRR\\nPS\\nSS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS') == 'PS'\nassert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS'\nassert solution('2 3\\nRPS\\nPP\\nRPS') == 'RPS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'PP'\nassert solution('5 5') == 'PP'\nassert solution('100 5') == 'PP'\nassert solution('1 1') == 'PP'\nassert solution('2 1') == 'PP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\nR\nP\nS\nR\n''') == 'R'\n\nassert solution('''\n2\nP\nR\n''') == 'P'\n\nassert solution('''\n2\nR\nR\n''') == 'R'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\nPP\\nRR\\nPS') == 'PS'\nassert solution('5\\nPPP\\nRRR\\nPPS') == 'PP'\nassert solution('5\\nPPP\\nRRR\\nPPP') == 'PPP'\nassert solution('3\\nPS') == 'PS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\nRR\\nRR') == 'RR'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\\\n3 4\nPP\nRR\nPS\nSS\n\"\"\") == \"PS\"\n\nassert solution(\"\"\"\\\n3 5\nPPS\nPPP\nPPS\nPP\n\"\"\") == \"PPP\"\n\nassert solution(\"\"\"\\\n3 5\nPSS\nPSS\nPPS\nPS\n\"\"\") == \"PPS\"\n\nassert solution(\"\"\"\\\n3 5\nPPP\nPPP\nPSS\nPSS\nPPS\n\"\"\") == \"PPP\"\n\nassert solution(\"\"\"\\\n3 5\nPSS\nPSS\nPPS\nPS\n\"\"\") == \"PSS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\nRR\nPP\nPS''') == 'PP'\nassert solution('''3 4\nRR\nPS\nSS''') == 'PS'\nassert solution('''3 4\nSS\nPP\nRR''') == 'RR'\nassert solution('''3 4\nPP\nSS\nPP''') == 'SS'\nassert solution('''10 3\nRRL\nRRR\nRPS\nSPS\nPSS\nPPS\nPSR\nPRR\nPPP\nRRR\nRPP\nRPS\nSSR\nPSS\nPSS\nPPP\nPSR\nPRP\nPRR\nPPS\nRPS\nPSR\nPPS\nSSR\nRPR\nPPS\nRPS\nPPS\nPSP''') == 'RPS'\n\n
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\n') == 'PS'\nassert solution('3 4\\nPS\\nPP\\nSS\\n') == 'PS'\nassert solution('3 4\\nPP\\nRP\\n') == 'SS'\nassert solution('3 4\\nSS\\nPP\\n') == 'SS'\nassert solution('3 4\\nSS\\nRP\\n') == 'SS'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.1 2.0\\n0\\n0\\n0\\n0\\n0') == '288'\nassert solution('1 1\\n0\\n0\\n0\\n0\\n0') == '0'\n\"\"\""
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '288'\nassert solution('1 0.1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0') == '288'\nprint(solution(input()))\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1.2'\nassert solution('1') == '0.2'\nassert solution('2') == '0.4'\nassert solution('3') == '1.2'\nassert solution('4') == '0.8'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0.01 2.0\\n0\\n0\\n0') == '288.00000000000001'\nassert solution('3\\n0.1 0.2\\n0\\n0\\n0') == '0.6'\nassert solution('3\\n0.01 0.02\\n0\\n0\\n0') == '0.6'\nassert solution('3\\n0.01 0.02\\n0.01\\n0.02\\n0\\n') == '0.6'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0.1 2.0\\n0\\n0\\n0\\n0\\n0') == '288'"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '288'\nassert solution('1.1 2.0') == '311.9'\n\n--Input for testing--\n6\n0.1 2.0\n0.1 2.0\n0.1 2.0\n0.1 2.0\n0.1 2.0\nSample Output:\n311.9\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1.0 2.0\n0\n0\n0\n0\n0''') == \"272.0\"\nassert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0''') == \"288\"\nassert solution('''1.0\n0.1\n0.1\n0.1\n0.1\n0.1''') == \"288.0\"\nassert solution('''3\n0.1\n0.1\n0.1''') == \"0.0\"\nassert solution('''5\n0.1\n0.1\n0.1\n0.1\n0.1''') == \"288.0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2.0') == '0.50'\nassert solution('1.5') == '1.00'\n\n\"\"\""
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n0.01 2.0\\n1 1\\n0.1 1.0\\n0 0.1\\n0 0.1\\n0 0.1\\n0.1 1.0\\n0 0.1\\n0 0.1\\n0.1 1.0\\n') == \"288.000000000000\"\nassert solution('15\\n0.05 1.0\\n1 1\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n0.05 1.0\\n') == \"433.999999999998\"\nassert solution('20\\n0.1 1.0\\n1 1\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n') == \"166.000000000000\"\nassert solution('12\\n0.1 1.0\\n1 1\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n0.1 1.0\\n') == \"413.000000000000\"\nassert solution('15\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == \"0.000000000000\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"pastimeofwhimsy\"\n) == \"1\", \"Failed example\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('abc') == 3\nassert solution('aaaaaaaaaa') == 12\nassert solution('aaaaaaaaaaa') == 20\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('pastimeofwhimsy') == \"1\"\nassert solution('meowforyeow') == \"2\"\nassert solution('MEOFWOO') == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('iceman') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('pastimeofwhimsy') == '2'"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''cat\nyarn\n''') == '2'\nassert solution('''cat\ncat\nyarn\n''') == '3'\n'''\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('pastimeofwhimsy') == 1\n\nSample Input:\ngeronimos\nSample Output:\n1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('meow') == '2'\nassert solution('meowmeow') == '3'\nassert solution('googol') == '10'\nassert solution('t') == '1'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 2\n3\n1 3\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2 3\n1 2 3\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n3 2\n3\n2 1\n\"\"\") == \"NO\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n1 2 2 1') == 'YES'\nassert solution('5 4\\n1 2 5 2 1') == 'NO'\nassert solution('4 2\\n1 1 1 1') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3 4\n    1 2 2 1\n    ''') == 'YES'\nassert solution('''\n    100 5\n    3 4 2 2 1\n    ''') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 2 1 \n''') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('5 1') == 'YES'\nassert solution('1 2') == 'NO'\nprint('ALL TESTS PASSED!')"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('3 4') == 'YES'\nassert solution('3 5') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 2 2 1\n''') == 'YES'\nassert solution('''10 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n1 2 2 1\n\"\"\") == 'YES'\nassert solution(\"\"\"\n3 6\n5 5 3 2 1 1 1 \n\"\"\") == 'NO'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3\\n') == '3/1'\nassert solution('1 2\\n4\\n') == '2/1'\nassert solution('1 2\\n3\\n') == '1/2'\nassert solution('1 2\\n4\\n') == '2/1'\nassert solution('1 2\\n4\\n') == '1/2'\n\"\"\"\nimport math"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n5') == '7.5'\nassert solution('8\\n10\\n15') == '7.5'\nassert solution('3\\n5\\n6') == '3/1'\nassert solution('8\\n10\\n15\\n6') == '3/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2') == '3/1'\nassert solution('3\\n1 2') == '1/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2\n3\n4\n\"\"\") == \"3/1\"\n\nassert solution(\"\"\"\n1 1\n2 2\n3\n\"\"\") == \"2/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n3\") == \"3/1\"\nassert solution(\"1 2\\n1 2\\n1 2\") == \"1/2\"\nassert solution(\"1 2\\n3 4\\n5 2\") == \"5/2\"\nassert solution(\"1 2\\n3 4\\n5 2\\n6 2\") == \"2/3\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"7/5\"\n\nSample Input:\n3\n1 2\n2 3\n3 4\nSample Output:\n7/5"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 2\n3\n4\"\"\") == \"3/1\"\nassert solution(\"\"\"1 3\n2\n4\"\"\") == \"2/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3\\n') == '1/2'\nassert solution('1 2\\n3\\n') == '3/1'\nassert solution('2 3\\n4\\n') == '2/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '7/1'\nassert solution('1') == '1'\nassert solution('3') == '3/1'\nassert solution('4') == '4/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 2\n3\n4\n5\n6\n7\n''') == '7/1'\n\nassert solution('''\n3\n2 1\n1 3\n''') == '3/1'\n\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '7/1'\n\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '4/3'\n\nassert solution('''\n12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n''') == '16/17'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nprint('OK') if solution('1\\n2\\n4\\n5\\n4\\n2') == '0.375' else print('WRONG')\nprint('OK' if solution('1\\n1\\n1\\n1\\n1') == '0.625' else 'WRONG')"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('10') == '0.1488592946'\n'''\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('2\\n2.2 15.2') == '5.234022852'\nassert solution('3\\n2.2 5.2') == '10.103753337'\nassert solution('4\\n1.2 3.2 3.4 4.5') == '10.127412072'\nassert solution('5\\n1.2 3.2 3.4 4.5') == '7.421735755'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1.2 10.2\\n2.2 15.2\") == \"1.114672365\""
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1.2 10.2\n2.2 15.2\n3.3 13.3\n4.4 14.4\n5.5 17.5\n''') == '0.01163734415'\nprint(solution('''\n4\n10.8 20.4 10.3\n8.5 17.7 16.3\n6.2 18.7 14.9\n7.3 13.5 16.5\n'''))"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1.2 10.2') == '1.114672365'\nassert solution('2.2 15.2') == '1.8672365'\n\"\"\"\n\nimport math\nimport random"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\n\"\"\"\nimport math"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('1000000') == '1.10000000'\nassert solution('1.2') == '1.114672365'\n\n'''\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nassert solution('3\\n1.2 1.2 1.2\\n2.2 1.2 1.2\\n3.2 1.2 1.2\\n') == '0.1034782608'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0\\n') == '3\\n1 2 3 2'\nassert solution('1\\n2\\n3') == '2'\nassert solution('3\\n2\\n1') == '1'\nassert solution('4\\n0 3\\n1 1\\n2 1\\n2 0\\n') == '3\\n1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n1 2\\n2 3') == '1 2 3'\nassert solution('4\\n3 2\\n1 1\\n2 1') == '1 2 3'\nassert solution('1\\n2\\n2\\n3') == '1 2 3'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 3\n1 1\n2 1\n2 0\n''') == '3 1 2 2'\n\nassert solution('''\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0\n10 0"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2 3 2'\nprint(solution('''\n3\n0 3\n1 1\n2 1\n2 0\n'''))\nassert solution('''\n3\n2 2\n1 1\n2 1\n''') == '1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1 2'\nassert solution('10') == '0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 3\\n1 1\\n2 1\\n2 0\") == \"3 1 2 3\"\nassert solution(\"1\\n0 3\\n1 1\\n2 1\\n2 0\") == \"2 1 1\"\nassert solution(\"1\\n0 0\\n1 1\\n2 1\\n2 0\") == \"1 1 1\"\nassert solution(\"2\\n2 1\\n1 2\\n2 1\\n1 0\") == \"2 1 1\"\nassert solution(\"2\\n2 1\\n1 2\\n1 0\\n1 0\") == \"1 0 1\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\nassert solution('''\n4\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\nassert solution('''\n5\n0 2\n1 1\n2 2\n2 0\n''') == '''\n2\n1 2\n'''"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"2 1\"\nassert solution(\"3 3\") == \"1 1 1\"\nassert solution(\"3 5\") == \"1 2 2\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 3\\n2 3\\n2 2\\n') == '1 2 3 2'\nassert solution('3\\n1 1\\n1 2\\n1 3\\n2 1\\n') == '1 2 3 2'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 2 3\""
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"1\"\nassert solution(\"3\\n1 1 2\\n\") == \"none\"\nassert solution(\"4\\n1 1 2 1 3\\n\") == \"none\"\n\"\"\""
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'\nassert solution('3') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('4') == 'none'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 2 1 3\n''') == 'none'\nassert solution('''4\n1 1 2 3\n''') == 'none'\nassert solution('''8\n1 1 1 1 1 1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"none\"\nassert solution(\"4\\n1 2 1 3\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n2\\n3'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('2') == 'none'\nassert solution('4') == 'none'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"1\"\nassert solution(\"3\\n1 2 1 3\\n\") == \"1\"\nassert solution(\"4\\n1 1 2 1 3\\n\") == \"none\"\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 1 3\") == \"1\"\nassert solution(\"3\\n1 2 1 3\") == \"none\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n2\n1 1\n''') == '1'\nassert solution('''\n2\n0 1\n''') == '1'\nassert solution('''\n4\n2 2 1 0\n''') == '4'\nassert solution('''\n2\n1 2\n''') == '2'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n4\n0 0 2 0 0\n''') == '4'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n4 2 1\\n') == '3'\nassert solution('4\\n5 2 1\\n') == '6'\nassert solution('6\\n5 2 1\\n') == '4'\nassert solution('10\\n12 2 1\\n') == '8'\nassert solution('20\\n3 2 1\\n') == '15'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('13') == '4'\nassert solution('5000000') == '7000000'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 3') == '3'\nassert solution('8\\n0 0 1 1 2 3 2') == '2'\nassert solution('1\\n0') == '1'\nassert solution('10\\n0 1 2 3 4 5 6 7 8 9') == '9'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n2 1 0 1 2 3 3''') == '5'\nassert solution('''3\n3 1 0 1 2 3 3\n3 4 5 6 7 8 9\n9 10 11 12 13 14 15''') == '21'\nassert solution('''18\n2 1 0 1 2 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3 3 3 2 1 0 1 2 3"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0 1 0 1 2 3 3') == '5'\nassert solution('13\\n5 2 4 4 5 1 4 4 4 5') == '7'\nassert solution('99\\n3 4 1 1 5 1 1 1 5') == '0'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 1 0 1 2 3 3') == '5'\nassert solution('1\\n0') == '1'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\nassert solution('8\\n0 0 1 1 2 3 2') == '6'\nassert solution('9\\n1 0 1 1 2 2 2') == '4'\nassert solution('10\\n1 0 1 1 2 3 2 3') == '3'\nassert solution('11\\n1 0 1 1 2 3 4 2') == '2'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 1 0 1 2 3 3\n''') == '5'\nassert solution('''\n3\n2 1 0 1 2\n''') == '3'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('1 1') == '1 1 1 1'\nassert solution('4 5') == '-1 1 0 1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('10 2') == '-1 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4 4 2 2 4 -1\""
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"4 4 5 6 -1\"\nassert solution(\"10 1\") == \"1 1 0 1 -1\"\nassert solution(\"3 2\") == \"-1 -1 -1 -1\"\nassert solution(\"10 10\") == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('10 20') == '-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('3 4') == '-1 -1 4 5 6'\nassert solution('3 5') == '-1 -1 4 5 6 -1'\nassert solution('4 4') == '-1 4 5 6 -1 -1'\nassert solution('4 5') == '-1 4 5 6 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\") == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"-1 4 5 6 -1\"\nassert solution(\"3 5\\n#####\\n#...#\\n#_###\\n#__.#\\n#####\") == \"-1 2 5 -1 4 -1\"\nassert solution(\"2 3\\n#####\\n#_..#\\n#__#\\n#####\") == \"-1 1 -1 3 2 -1\"\nassert solution(\"5 3\\n#####\\n#_..#\\n#__#\\n#####\") == \"4 1 -1 3 2 -1\"\nassert solution(\"5 4\\n#####\\n#_..#\\n#__#\\n#####\") == \"3 1 -1 4 2 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n###\\n#_M._\\n__#\\n###\\n#_#\") == \"4 -1 -1 4 5 6 -1\"\n\"\"\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 6 1\\n1\\n1 2 1\\n1 3 1\\n1 4 1\\n2 3 2\\n2 4 4\\n3 4 3\\n') == '6'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '7'"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n4\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == r\"\"\"\n6\n\"\"\".strip()\nassert solution(r\"\"\"\n4\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == r\"\"\"\n10\n\"\"\".strip()\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"2 6 1\\n2 3 2\\n1 3 3\") == \"impossible\"\n\n---Input\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\n---Output\n6\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'impossible'\nassert solution('''\n1 10 1\n1\n2\n''') == '10'\n'''\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Impossible'\n\nprint('Optimized')\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'Impossible'\nassert solution('''\n5 3 2\n1 1 5\n1 2 3\n2 2 5\n3 3 2\n''') == '5'\n\n-- Solve without recursion --"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"impossible\"\nprint(solution())\n'''"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 6 1\") == \"6\"\nassert solution(\"10 6 1\") == \"Impossible\""
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4 2 1\n0''') == '01001'\nassert solution('''3 4 2 1\n1''') == '11011'\nassert solution('''3 4 2 1\n1\n''') == '1111'\nassert solution('''3 4 2 1\n2''') == '10000'\nassert solution('''3 4 2 1\n3''') == '11111'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"4 3 1 2\") == \"01101\"\nassert solution(\"0 0 0 1\") == \"01111\"\nassert solution(\"1 0 1 0\") == \"00100\"\nassert solution(\"1 1 0 0\") == \"10100\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2 1') == '01001'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 3\") == \"01\"\nassert solution(\"3 4 2 1\") == \"01100\"\nassert solution(\"10 1 2 3\") == \"100001\"\nassert solution(\"100000 1 2 3\") == \"1000001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"101\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 1\") == \"01001\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('3 3 2 2') == '10100'\nassert solution('4 3 2 1') == '01100'\nassert solution('4 4 2 1') == '01101'\nassert solution('5 5 2 1') == '01101'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"01001\"\nassert solution(input()) == \"10111\"\nassert solution(input()) == \"10111\"\nassert solution(input()) == \"impossible\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\n\"\"\"\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"1 1 2 1\") == \"11\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 6') == 'possible'\nassert solution('1 1') == 'impossible'\nassert solution('3 5 4') == 'possible'\nassert solution('2 3 5') == 'impossible'\nassert solution('3 5 4') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"possible\"\nassert solution(\"1 1\\n1 2\\n2 2\") == \"impossible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"possible\"\nassert solution(\"2 2\\n3 3\\n4 4\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"impossible\"\nassert solution(\"3 3\\n3 4\\n4 4\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"possible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"impossible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n3 5\\n\") == \"possible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n3 5\\n3 6\\n\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'impossible'"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 6') == 'possible'\nassert solution('3 4 6') == 'impossible'\nassert solution('3 4 8') == 'impossible'\nassert solution('3 4 4') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n3 5 4\n1 1\n2 1\n3 2\n3 3\n3 4\n''') == 'impossible'\nassert solution('''\n3 7 6\n1 1\n2 1\n3 2\n3 3\n3 4\n3 5\n4 4\n5 5\n5 6\n''') == 'impossible'\nassert solution('''\n3 6 4\n1 1\n2 1\n3 2\n3 3\n3 4\n3 5\n4 4\n5 5\n''') == 'impossible'\n''')\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4') == 'possible'\nassert solution('4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n8 1') == 'impossible'\nassert solution('5 5 10\\n2 3\\n1 3\\n4 2\\n2 4\\n2 5\\n3 3\\n4 5\\n5 6\\n6 4\\n7 5\\n4 7\\n5 6\\n6 7\\n7 8\\n8 5') == 'impossible'\nassert solution('4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n8 1') == 'possible'\nassert solution('4 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n8 1\\n7 1') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\nassert solution('''\n3 4 6\n1 2\n2 3\n3 4\n''') == 'impossible'\n''')\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"impossible\"\n\n'''"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\nassert solution('10\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n4 0 4\\n4 1 4\\n5 0 5\\n5 1 5\\n') == '7.5'\nassert solution('10\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n4 0 4\\n4 1 4\\n5 0 5\\n5 1 5\\n') == '7.5'\nassert solution('30\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n4 0 4\\n4 1 4\\n5 0 5\\n5 1 5\\n6 0 6\\n6 1 6\\n') == '20.5'\nassert solution('30\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n4 0 4\\n4 1 4\\n5 0 5\\n5 1 5\\n6 0 6\\n6 1 6\\n') == '20.5'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([[0, 0, 1], [0, 1, 1], [2, 0, 3], [2, 1, 3]]) == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n1\n0 0 1\n2 0 2\n0 2 2\n    \"\"\"\n) == \"2.0\"\nassert solution(\n    \"\"\"\n1\n2 2 1\n1 2 2\n    \"\"\"\n) == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n\"\"\") == \"2.0\"\n\nassert solution(\"\"\"\n4\n0 0 1\n0 1 2\n2 0 3\n2 1 3\n\"\"\") == \"4.0\"\n\nassert solution(\"\"\"\n2\n0 0 1\n1 0 1\n\"\"\") == \"2.0\"\n\nassert solution(\"\"\"\n3\n0 0 1\n0 1 1\n0 2 3\n\"\"\") == \"3.0\"\n\nassert solution(\"\"\"\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n\"\"\") == \"5.0\""
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n\"\"\") == \"2.0\"\nassert solution(r\"\"\"\n5\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n0 2 4\n\"\"\") == \"10.0\"\nassert solution(r\"\"\"\n7\n1 2 3\n2 3 4\n3 4 5\n4 5 6\n5 6 7\n6 7 8\n7 8 9\n8 9 10\n9 10 11\n10 11 12\n11 12 13\n12 13 14\n13 14 15\n14 15 16\n15 16 17\n16 17 18\n17 18 19\n18 19 20\n19 20 21\n20 21 22\n21 22 23\n22 23 24\n23 24 25\n24 25 26\n25 26 27\n26 27 28\n27 28 29\n28 29 30\n29 30 31\n30 31 32\n31 32 33\n32 33 34\n33 34 35\n34 35 36\n35 36 37\n36 37 38\n37 38 39\n38 39 40\n39 40 41\n40 41 42\n41 42 43\n42 43 44\n43 44 45\n44 45 46\n45 46 47\n46 47 48\n47 48 49\n48 49 50\n49 50 51\n50 51 52\n51 52 53\n52 53 54\n53 54 55\n54 55 56\n55 56 57\n56 57 58\n57 58 59\n58 59 60\n59 60 61\n60 61 62\n61 62 63\n62 63 64\n63 64 65\n64 65 66\n65 66 67\n66 67 68\n67 68 69\n68 69 70\n69 70 71\n70 71 72\n71 72 73\n72 73 74\n73 74 75\n74 75 76\n75 76 77\n76 77 78\n77 78 79\n78 79 80\n79 80 81\n80 81 82\n81 82 83\n82 83 84\n83 84 85\n84 85 86\n85 86 87\n86 87 88\n87 88 89\n88 89 90\n89 90 91\n90 91 92\n91 92 93\n92 93 94\n93 94 95\n94 95 96\n95 96 97\n96 97 98\n97 98 99\n98 99 100\n99 100 101\n100 101 102\n101 102 103\n102 103 104\n103 104 105\n104 105 106\n105 106 107\n106 107 108\n107 108 109\n108 109 110\n109 110 111\n110 111 112\n111 112 113\n112 113 114\n113 114 115\n114 115 116\n115 116 117\n116 117 118\n117 118 119\n118 119 120\n119 120 121\n120 121 122\n121 122 123\n122 123 124\n123 124 125\n124 125 126\n125 126 127\n126 127 128\n127 128 129\n128 129 130\n129 130 131\n130 131 132\n131 132 133\n132 133 134\n133 134 135\n134 135 136\n135 136 137\n136 137 138\n137 138 139\n138 139 140\n139 140 141\n140 141 142\n141 142 143\n142 143 144\n143 144 145\n144 145 146\n145 146 147\n146 147 148\n147 148 149\n148 149 150\n149 150 151\n150 151 152\n151 152 153\n152 153 154\n153 154 155\n154 155 156\n155 156 157\n156 157 158\n157 158 159\n158 159 160\n159 160 161\n160 161 162\n161 162 163\n162 163 164\n163 164 165\n164 165 166\n165 166 167\n166 167 168\n167 168 169\n168 169 170\n169 170 171\n170 171 172\n171 172 173\n172 173 174\n173 174 175\n174 175 176\n175 176 177\n176 177 178\n177 178 179\n178 179 180\n179 180 181\n180 181 182\n181 182 183\n182 183 184\n183 184 185\n184 185 186\n185 186 187\n186 187 188\n187 188 189\n188 189 190\n189 190 191\n190 191 192\n191 192 193\n192 193 194\n193 194 195\n194 195 196\n195 196 197\n196 197 198\n197 198 199\n198 199 200\n199 200 201\n200 201 202\n200 202 203\n201 203 204\n202 204 205\n204 205 206\n205 206 207\n206 207 208\n207 208 209\n208 209 210\n209 210 211\n210 211 212\n210 212 213\n211 213 214\n211 214 215\n212 215 216\n212 216 217\n213 217 218\n213 218 219\n213 219 220\n214 220 221\n214 221 222\n214 222 223\n213 223 224\n213 224 225\n213 225 226\n213 226 227\n213 227 228\n213 228 229\n213 229 230\n213 230 231\n213 231 232\n213 232 233\n213 233 234\n213 234 235\n213 235 236\n213 236 237\n213 237 238\n213 238 239\n213 239 240\n213 240 241\n213 241 242\n213 242 243\n213 243 244\n213 244 245\n213 245 246\n213 246 247\n213 247 248\n213 248 249\n213 249 250\n213 250 251\n213 251 252\n213 252 253\n213 253 254\n213 254 255\n213 255 256\n213 256 257\n213 257 258\n213 258 259\n213 259 260\n213 260 261\n213 261 262\n213 262 263\n213 263 264\n213 264 265\n213 265 266\n213 266 267\n213 267 268\n213 268 269\n213 269 270\n213 270 271\n213 271 272\n213 272 273\n213 273 274\n213 274 275\n213 275 276\n213 276 277\n213 277 278\n213 278 279\n213 279 280\n213 280 281\n213 281 282\n213 282 283\n213 283 284\n213 284 285\n213 285 286\n213 286 287\n213 287 288\n213 288 289\n213 289 290\n213 290 291\n213 291 292\n213 292 293\n213 293 294\n213 294 295\n213 295 296\n213 296 297\n213 297 298\n213 298 299\n213 299 300\n213 300 301\n213 301 302\n213 302 303\n213 303 304\n213 304 305\n213 305 306\n213 306 307\n213 307 308\n213 308 309\n213 309 310\n213 310 311\n213 311 312\n213 312 313\n213 313 314\n213 314 315\n213 315 316\n213 316 317\n213 317 318\n213 318 319\n213 319 320\n213 320 321\n213 321 322\n213 322 323\n213 323 324\n213 324 325\n213 325 326\n213 326 327\n213 327 328\n213 328 329\n213 329 330\n213 330 331\n213 331 332\n213 332 333\n213 333 334\n213 334 335\n213 335 336\n213 336 337\n213 337 338\n213"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n''') == '2.0'\nassert solution('''\n5\n0 0 -1\n1 -1 -1\n1 0 1\n0 -1 1\n0 1 -1\n''') == '4.0'\nassert solution('''\n10\n-4 -8 5 -8 -10\n-9 -7 -2 -6 -10\n-6 -2 -3 -4 -8\n-7 -4 -4 -5 -9\n-10 -2 -5 -9 -10\n''') == '0.0'\n\nassert solution('''\n20\n-2 -8 -5\n-10 -8 -2\n-4 -7 -3\n-12 -8 -5\n-10 -3 -9\n-6 -8 -5\n-12 -3 -3\n-10 -8 -4\n-8 -10 -3\n-6 -5 -2\n-8 -9 -5\n-10 -3 -7\n-9 -10 -6\n-12 -8 -7\n-5 -8 -2\n-5 -9 -8\n-6 -4 -1\n-2 -3 -5\n-9 -6 -4\n-7 -7 -5\n-3 -8 -9\n-4 -9 -10\n-8 -10 -7\n-7 -8 -2\n-11 -7 -8\n-8 -9 -2\n-10 -4 -1\n-8 -2 -3\n-7 -1 -6\n-6 -7 -5\n-1 -2 -4\n-7 -4 -7\n-3 -2 -8\n-8 -6 -5\n-2 -3 -7\n-6 -10 -7\n-5 -5 -8\n-2 -3 -5\n-5 -4 -6\n-6 -8 -4\n-3 -8 -7\n-7 -7 -6\n-4 -7 -3\n-8 -7 -1\n-3 -5 -4\n-4 -8 -5\n-6 -10 -4\n-9 -7 -3\n-5 -2 -6\n-4 -8 -9\n-7 -4 -4\n-1 -7 -7\n-8 -5 -8\n-6 -6 -6\n-7 -4 -5\n-5 -7 -2\n-4 -10 -8\n-9 -8 -9\n-6 -8 -10\n-8 -7 -5\n-5 -6 -8\n-7 -8 -3\n-2 -3 -10\n-7 -4 -6\n-8 -8 -2\n-7 -6 -7\n-1 -4 -8\n-5 -5 -7\n-9 -4 -3\n-3 -6 -9\n-4 -6 -6\n-7 -9 -2\n-4 -3 -4\n-3 -5 -5\n-9 -6 -7\n-3 -8 -3\n-3 -7 -1\n-7 -7 -5\n-4 -1 -6\n-8 -7 -4\n-5 -6 -2\n-2 -7 -5\n-4 -5 -4\n-8 -6 -6\n-9 -7 -8\n-8 -7 -6\n-5 -9 -8\n-3 -8 -4\n-9 -8 -1\n-4 -4 -4\n-7 -2 -5\n-6 -5 -2\n-9 -5 -9\n-8 -8 -3\n-6 -2 -8\n-3 -8 -3\n-2 -2 -8\n-6 -7 -3\n-1 -8 -4\n-2 -9 -4\n-5 -5 -1\n-5 -5 -1\n-5 -6 -5\n-4 -9 -9\n-4 -7 -7\n-5 -8 -2\n-6 -6 -8\n-5 -4 -7\n-4 -4 -4\n-6 -2 -7\n-8 -3 -5\n-7 -2 -8\n-8 -5 -9\n-3 -5 -7\n-1 -5 -9\n-5 -8 -7\n-7 -8 -3\n-5 -7 -3\n-2 -7 -8\n-6 -3 -5\n-3 -5 -8\n-8 -9 -6\n-4 -8 -4\n-3 -7 -8\n-4 -5 -6\n-8 -2 -3\n-7 -9 -5\n-8 -8 -5\n-7 -6 -9\n-3 -4 -2\n-7 -8 -6\n-7 -5 -8\n-5 -7 -5\n-8 -5 -7\n-6 -2 -7\n-2 -4 -5\n-6 -8 -9\n-6 -4 -9\n-8 -5 -7\n-5 -9 -3\n-5 -8 -4\n-7 -5 -8\n-6 -7 -5\n-3 -5 -8\n-3 -3 -8\n-7 -4 -7\n-7 -5 -7\n-3 -6 -9\n-1 -2 -5\n-4 -8 -3\n-4 -8 -3\n-7 -2 -2\n-7 -3 -4\n-8 -7 -8\n-7 -6 -5\n-5 -4 -2\n-5 -3 -2\n-8 -7 -8\n-8 -6 -8\n-5 -7 -5\n-3 -4 -8\n-5 -3 -4\n-4 -4 -8\n-5 -3 -2\n-6 -7 -3\n-8 -3 -8\n-6 -9 -4\n-4 -8 -4\n-3 -7 -7\n-8 -8 -3\n-7 -8 -8\n-6 -6 -6\n-8 -2 -5\n-7 -6 -8\n-7 -5 -7\n-6 -9 -4\n-8 -7 -5\n-7 -7 -5\n-2 -7 -8\n-4 -8 -3\n-5 -6 -8\n-"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2''') == '4'\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\nl.sort()\n\nfirst_col = set(l[0:n:3])\nsecond_col = set(l[1:n:3])\nthird_col = set(l[2:n:3])\n\nprint(len(first_col)+len(second_col)+len(third_col))"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 5 4 3 2 1 6 7') == \"4\"\nassert solution('5 5 1 1 3 4 7') == \"3\"\nassert solution('3 7 1 4 5 6 2') == \"1\""
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\n\nassert solution('''\n5\n4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '2'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\nassert solution('''\n10\n8 6 7 5 4 3 2 1 6 7\n8 6 7 5 4 3 2 1 6 7\n3 7 1 4 5 6 2 8\n''') == '5'\n''')"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\"\"\") == \"4\"\n\nassert solution(\"\"\"12\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\"\"\") == \"0\"\n\nassert solution(\"\"\"10\n5\n5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5\"\"\") == \"5\"\n\nassert solution(\"\"\"9\n5\n5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5\"\"\") == \"0\"\n\nassert solution(\"\"\"100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == '4'\nprint('All tests passed!')"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2\\n\") == \"4\"\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 5 4 3 2 1 6 7') == '4'\nassert solution('8 3 4 2 1 5 7 2 6 8') == '6'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\nassert solution('''\n6\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n1 6 8 7 4 5 2\n''') == '2'\nassert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n2 5 7 4 6 3 2\n''') == '2'\n\n'''"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '2'\nassert solution('5') == '1'\nassert solution('4') == '1'\nassert solution('2') == '1'\n\nstdin = \"\"\"\n10\n-10 10\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n-3 2\n0 1\n-1 -2\n''') == \"3\"\nassert solution('''\n4\n-4 -2\n2 -4\n0 -2\n''') == \"3\"\nassert solution('''\n4\n2 4\n0 1\n-1 -2\n''') == \"2\"\nassert solution('''\n4\n0 -2\n2 -4\n0 -2\n''') == \"3\"\nassert solution('''\n4\n-2 -2\n2 -4\n0 -2\n''') == \"2\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n1\\n0\\n1\"\n) == \"0\"\nassert solution(\n    \"2\\n0\\n0\\n1\"\n) == \"1\"\nassert solution(\n    \"3\\n0\\n0\\n1\"\n) == \"2\"\nassert solution(\n    \"4\\n0\\n0\\n1\"\n) == \"3\"\nassert solution(\n    \"5\\n0\\n0\\n1\"\n) == \"4\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n-10 0\\n-10 10') == '2'\nassert solution('5\\n-10 0\\n-10 10\\n0 0') == '4'\nassert solution('5\\n-10 0\\n-10 10\\n-10 0') == '3'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n-10 0\n-10 10\n''') == '2'\n\nassert solution('''\n4\n5 -5\n5 -5\n''') == '2'\n\nassert solution('''\n4\n10 10\n0 0\n''') == '4'\n\nassert solution('''\n4\n0 0\n-10 10\n''') == '4'\n\nassert solution('''\n4\n0 0\n5 0\n''') == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1.6\") == \"2\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    6\n    -10 0\n    -10 10\n    \"\"\",\n    ) == \"2\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"100\") == \"100\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n\n'''"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\n\nSample Input:\n5 2\nSample Output:\n10\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 5\n1 5\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3 4\n3 2\n5 5\n1 6\n1 3\n2 3\n1 5\n5 1\n1 4\n3 5\n3"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '0'\nassert solution('2 3') == '1'\nassert solution('3 4') == '2'\nassert solution('4 5') == '3'\n\n'''\n\nimport itertools\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '0'\nassert solution('2 1') == '1'\nassert solution('3 3') == '2'\nassert solution('4 6') == '3'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '0'\nassert solution('6 12') == '6'\nassert solution('10 10') == '10'\nassert solution('3 3') == '4'\nassert solution('11 11') == '8'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1 5') == '0'\n\nassert solution(\n    '4 9') == '4'\n\nassert solution(\n    '5 4') == '3'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 1\n''') == '1'\nassert solution('''\n100 100\n''') == '1'\nassert solution('''\n100 100\n''') == '2'\nassert solution('''\n10 10\n''') == '0'\nassert solution('''\n100 100\n''') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0'"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '0'\nassert solution('1 4') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n', solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n')\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1\\n'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0 0\\n1 1\\n\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0 0'\nassert solution('1 0') == '0 0'\nassert solution('3 3') == '1 1'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n1 0\n0 1''') == '0 0'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"2 2\") == \"1 1\"\nassert solution(\"2 4\") == \"1 2\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1') == '0 0\\n1 1\\n'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1''') == '0 0\\n1 1'\nprint(solution('''1 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1'''))\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nassert solution('3 3 0.950000\\n0.700000 50') == '41.4545454545'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nassert solution('1 1 0.950000\\n0.700000 50') == '79.950'\nassert solution('3 2 0.950000\\n0.700000 50') == '8.4950'\nassert solution('3 3 0.950000\\n0.700000 50') == '8.4950'\nassert solution('3 3 0.950000\\n0.700000 100') == '6.5075'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50\\n') == '44.975'"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975'\nassert solution('''\n3 5 0.824348\n0.824348 200\n''') == '12.0'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 0.950000\") == \"44.975\""
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('0.700000 50') == '179.84'\nassert solution('0.20000 300') == '169.97'\nassert solution('0.990000 1000') == '1409.14'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 0.950000') == '44.975'"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975', \"First Example\"\nassert solution('''\n1 2 0.950000\n0.700000 100\n''') == '203.0500', \"Second Example\"\nassert solution('''\n1 2 0.950000\n0.700000 100\n''') == '0.0083', \"Third Example\"\nassert solution('''\n2 2 0.950000\n0.700000 100\n''') == '0.0083', \"Fourth Example\""
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 2 2\n1 1\n10 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 3\n1 1\n5 2\n1 3\n3''') == '2'\nassert solution('''5 2\n1 3\n3\n2''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 3') == 'IMPOSSIBLE'\nassert solution('5 2') == '3'\nassert solution('5 5') == 'IMPOSSIBLE'\nassert solution('5 7') == '4'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('1 1') == 'IMPOSSIBLE'\nassert solution('5 2') == '1'\nassert solution('1 3') == '3'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('5 2') == '2'\nassert solution('1 3') == 'IMPOSSIBLE'\n\n'''\nimport math"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 2 3\n    1 1\n    5 2\n    1 3\n    3\n    3\n    2\n    1\n''') == '2'\n\nassert solution('''\n    3 2 3\n    1 1\n    5 2\n    1 3\n    3\n    3\n    2\n    1\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 3\\n1 1\\n5 2\\n1 3\\n3') == '2'\nassert solution('4 5\\n1 3\\n5 2\\n4 1\\n2 3') == '1'\nassert solution('2 3\\n1 5\\n3 1\\n5 2\\n4 1') == '2'\nassert solution('4 1\\n2 3\\n5 1\\n3 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3\\n1 1\\n5 2\\n1 3\\n3\") == \"2\"\n\"\"\"\n\nfrom typing import List\nimport pytest\nimport re\nimport math\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\n1 1\n5 2\n1 3\n3\n3\n2\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('1 1') == '1.0'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('10 10') == '8.0'\nassert solution('100 100') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\\n') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('5 2') == '1.0'\nassert solution('5 6') == '1.0'\nassert solution('3 3') == '4.0'\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0') == '4.0'\n\"\"\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '0.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\nassert solution('5 5\\n0.0 0.0\\n0.0 0.0\\n0.0 0.0\\n0.0 0.0\\n0.0 0.0') == '5.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\") == \"4.0\"\n\"\"\""
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n\"\"\") == \"4.0\"\nassert solution(\n\"\"\"\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n\"\"\") == \"4.0\"\nassert solution(\n\"\"\"\n0\n0\n0\n0\n0\n0\n0\n\"\"\") == \"0.0\"\nassert solution(\n\"\"\"\n10\n12\n20\n10\n16\n7\n7\n12\n19\n17\n8\n8\n0\n0\n5\n12\n18\n7\n6\n8\n9\n0\n11\n7\n10\n0\n2\n8\n9\n4\n2\n0\n\"\"\") == \"2.0\"\nassert solution(\n\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n\"\"\") == \"20.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '4.0'\n\n'''\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\nassert solution(\"\"\"\n2\n10\n15\n\"\"\") == \"12000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"18000\"\nprint(solution())\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"100\"\nassert solution(\"\"\"\n2\n1\n1\n\"\"\") == \"1000000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''3\n110 10\n150 9\n170 8\n''') == '9000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n220 29\\n195 20\\n200 9\\n180 30\\n') == '18000'\n\"\"\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"18000\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == 'IMPOSSIBLE', 'Check your code'\nassert solution('BUYSTICKERS') == '28', 'Check your code'\nassert solution('4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8') == '28', 'Check your code'"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n\n'''"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"./input.txt\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8') == '28'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\nassert solution('TICKERS1') == 'IMPOSSIBLE'\n'''\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\\n') == '28'\nassert solution('A ZHZOOZ ZNZ OZZ OZZO ZNZZ\\n4\\nZHZOOZ 5\\nZNZZ 1\\nZOOZ 1\\nOZZO 5\\nZNZZ 1\\nZOOZ 1\\nOZZO 1\\nZOZO 1\\nZOZZ 1\\nZOZZ 1\\nZNZZ 1\\nOZZO 1\\nZOOZ 1\\nZZNZZ 1\\nZOOZ 1\\nOZOOZ 1\\nZNZZ 1\\nZNZZ 1\\nOZOZ 1\\nZOOZ 1\\nZOZO 1\\nOZZO 1\\nZOZZ 1\\nZOOZ 1\\nOZZZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZO 1\\nOZZO 1\\nZOZZ 1\\nZNZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZO 1\\nOZZO 1\\nZOZZ 1\\nZNZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZNZZ 1\\nZOOZ 1\\nZOZO 1\\nOZZO 1\\nZOZZ 1\\nZOZZ 1\\nZNZZ 1\\nOZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZOOZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZO 1\\nOZZO 1\\nZNZZ 1\\nZOZZ 1\\nZNZZ 1\\nOZOZ 1\\nZOOZ 1\\nZOZO 1\\nOZZO 1\\nZOZZ 1\\nZOOZ 1\\nOZZZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOZZ 1\\nZNZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOZZ 1\\nZNZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOZZ 1\\nZNZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZO 1\\nOZOZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZO 1\\nOZOZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZO 1\\nOZOZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZO 1\\nOZOZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZZ 1\\nZNZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOZZ 1\\nZNZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZZ 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\nZOZZ 1\\nOZZO 1\\nZOOZ 1\\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8''') == '28'\nassert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\nassert solution('''BUYSTICKERS\n2\nBUYER 10\nERS 8\n''') == 'IMPOSSIBLE'\nassert solution('''BUYSTICKERS\n100\nBUYER 10\nERS 8\nBUYER 10\nERS 8\nBUYER 10\nERS 8\nBUYER 10\nERS 8\nBUYER 10\nERS 8\n''') == '2'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"TICKERS 1\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\nassert solution('TICKER') == 'IMPOSSIBLE'\nassert solution('TICKERS') == 'IMPOSSIBLE'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n'''\n\nimport math"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == 'INDV 3'\nassert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\nSample Output:\nINDV 1\nINDV 2\nCORP 1\nINDV 4\nCORP 2\nINDV 3\nCORP 3\nINDV 5\nCORP 1\nCORP 2\nCORP 3\nCORP 5''') == 'INDV 5'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'CORP 4'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n''') == 'INDV 1 CORP 2'\n\nassert solution('''3 4 6\n1 1\n2 1\n3 1\n4 1\n5 1\n1 2\n2 2\n3 2\n4 2\n5 2\n''') == 'INDV 1 CORP 2'\n\nassert solution('''5 4 8\n1 1\n2 1\n3 1\n4 1\n5 1\n1 2\n2 2\n3 2\n4 2\n5 2\n''') == 'INDV 1 CORP 2'\n\nassert solution('''3 5 8\n1 1\n2 1\n3 1\n4 1\n5 1\n1 2\n2 2\n3 2\n4 2\n5 2\n''') == 'INDV 1 CORP 2'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == 'CORP 2\\nCORP 2\\nINDV 1\\nINDV 2\\nINDV 3\\nCORP 1\\nCORP 1\\nCORP 4\\nCORP 3\\nCORP 3\\nCORP 5\\nCORP 2'''"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"INDV 1\\nINDV 2\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 3 5\") == \"INDV 3\\nINDV 5\\nCORP 3\"\nassert solution(\"4 2 3\") == \"INDV 2\\nCORP 3\"\nassert solution(\"5 3 1\") == \"INDV 1\\nINDV 4\\nCORP 3\"\n\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 8') == 'CORP 1'\nassert solution('7 3 9') == 'CORP 1'\nassert solution('5 3 10') == 'CORP 1'\nassert solution('10 3 11') == 'CORP 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == 'INDV 1\\nINDV 2\\nINDV 3\\nCORP 1\\nCORP 2\\nINDV 4\\nCORP 3\\nINDV 5\\nCORP 5\\n'\nassert solution('''5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3''') == 'CORP 3\\nINDV 1\\nINDV 2\\nINDV 3\\nCORP 5\\nCORP 4\\nCORP 3\\nINDV 4\\nINDV 5\\nCORP 2\\nCORP 3\\nCORP 1\\nCORP 2\\nCORP 4\\nINDV 2\\nCORP 4\\nINDV 4\\nCORP 4\\nINDV 5\\nCORP 3\\nCORP 5\\nCORP 1\\nINDV 1\\nCORP 4\\nCORP 1\\nCORP 3\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 1\\nCORP 3\\nCORP 4\\nCORP 1\\nCORP 2\\nCORP 4\\nCORP 5\\nCORP 3\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 1\\nCORP 4\\nCORP 2\\nCORP 5\\nCORP 4\\nCORP 1\\nCORP 3\\nCORP 5\\nCORP 4\\nCORP 1\\nCORP 3\\nCORP 4\\nCORP 5\\nCORP 1\\nCORP 3\\nCORP 4\\nCORP 5\\nCORP 1\\nCORP 2\\nCORP 4\\nCORP 3\\nCORP 1\\nCORP 4\\nCORP 5\\nCORP 4\\nCORP 1\\nCORP 3\\nCORP 4\\nCORP 1\\nCORP 2\\nCORP 4\\nCORP 5\\nCORP 3\\nCORP 5\\nCORP 1\\nCORP 2\\nCORP 4\\nCORP 5\\nCORP 3\\nCORP 5\\nCORP 1\\nCORP 2\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCORP 5\\nCORP 4\\nCORP 5\\nCOR"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 1\\nINDV 2\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 1\\nCORP 2\\nINDV 4\\nCORP 3\\nINDV 5\\nCORP 1\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 8') == 'INDV 1 CORP 1'\nassert solution('4 5 4') == 'INDV 1 CORP 1 CORP 2'\nassert solution('1 1 1') == 'INDV 1'\nassert solution('5 1 5') == 'CORP 1'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1.4142135625'\nassert solution('4') == '2.0'\n\"\"\""
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n0\\n0\\n1\\n0\\n0\\n0\\n') == '2.4142135624'\nassert solution('2\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n') == '1'\nassert solution('3\\n0\\n0\\n0\\n') == '0'\nassert solution('4\\n10 1\\n1\\n1\\n0\\n1\\n0\\n0\\n') == '2.9287108327'\nassert solution('5\\n100 10\\n10\\n1\\n0\\n1\\n0\\n0\\n') == '1.0000000000'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == '1.0'\nassert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n10') == '2.4142135624'\nassert solution('1000\\n10 20\\n0\\n0\\n0\\n0\\n0') == '3.4142135624'\nassert solution('10000\\n10 20\\n0\\n0\\n0\\n0\\n0') == '5.0'\nassert solution('100000\\n10 20\\n0\\n0\\n0\\n0\\n0') == '6.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n10 1\n1\n0\n10\n10\n''') == '2.4142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    4\n    10 1\n    1\n    0\n    10\n    10\n''') == \"2.4142135624\""
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"2.4142135624\"\nassert solution(\"7\") == \"0.1666128501\"\nassert solution(\"0\") == \"0.1666128501\"\nassert solution(\"10\") == \"2.4142135624\"\nassert solution(\"3\") == \"0.25\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n5\\n0\\n2\\n1') == '3.141592653589793'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == '2.4142135624'\nassert solution('4\\n100 1\\n1\\n0\\n100\\n100\\n') == '2.0'\nassert solution('8\\n10 1\\n1\\n0\\n10\\n10\\n10\\n10\\n') == '1.7'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == \"2.4142135624\"\nassert solution('2\\n4 4\\n1 2\\n3 3\\n5 5\\n1 5\\n3 6\\n5 6\\n') == \"9.0\"\nassert solution('4\\n10 1\\n1\\n0\\n10\\n10\\n') == \"2.4142135624\"\nassert solution('8\\n10 1\\n1\\n0\\n10\\n10\\n') == \"2.828427124\"\nassert solution('5\\n10 1\\n1\\n0\\n10\\n10\\n') == \"1.4142135624\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2.4142135624'\nassert solution('5') == '2.2222222222'\nassert solution('5') == '2.0'\nassert solution('10000') == '0'\nassert solution('10000') == '10000'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"15\"\n\nimport sys\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == \"15\"\n\nassert solution('''\n5 4\n1 2 3 4 5\n2 1 3\n2 4 1\n2 1 3\n2 4 3\n''') == \"17\"\n\nassert solution('''\n3 2\n2 1\n1 3\n''') == \"5\"\n\nassert solution('''\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2 3\n3 4\n3 2\n5 0\n1 2\n''') == '8'\nassert solution('''\n2\n2 1\n2 3\n3 1\n3 2\n''') == '10'\nassert solution('''\n3\n1 2\n2 1\n3 1\n''') == '6'\n''')"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n7\n0 0 1\n1 2 4\n2 2 2\n3 4 0\n4 5 1\n5 3 1\n6 6\n\"\"\") == \"14\"\n\nassert solution(\"\"\"\n10\n0 0 1\n1 2 3\n2 3 4\n3 5 0\n4 5 1\n5 6 2\n6 7 3\n7 8 4\n8 9 2\n9 10 1\n10 1\n\"\"\") == \"18\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\\n3 1 5\\n2 1\") == \"15\"\nassert solution(\"1 2 5\\n3 1 5\\n5 0\") == \"20\"\nassert solution(\"1 2 5\\n3 1 5\\n5 0\\n2 1\") == \"15\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5\\n3 1 5\\n2 1') == '15'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nprint('All test cases passed!')"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 2 5\n3 1 5\n2 1\"\"\") == \"15\"\nassert solution(\"\"\"1 2 5\n3 1 5\n2 1\n5 0\n1 3\"\"\") == \"18\"\nassert solution(\"\"\"1 2 3\n3 1 5\n2 1\n5 0\n1 3\"\"\") == \"22\"\n\n'''"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 5\\n3 1 5\\n2 1') == '15'\nassert solution('10\\n7 3 2 4 1 1 5 2 6 4 4\\n1 2 4\\n2 5 2 1\\n1 6 7 2\\n3 4 5 4\\n4 6 8 4\\n4 7 5 4\\n4 8 5 4\\n4 7 8 4\\n4 8 5 4\\n1 2 4\\n2 5 2 1\\n5 3 4\\n3 5 4\\n4 6 7\\n6 6 8\\n6 7 8\\n6 8 8\\n6 7 8\\n5 2 2\\n6 7 2\\n5 7 2\\n3 5 2\\n6 6 2\\n5 8 2\\n3 6 2\\n6 7 2\\n5 8 2\\n5 6 2\\n3 5 2\\n6 5 2\\n5 5 2\\n5 6 2\\n4 6 5\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n5 5 2\\n6 6 2\\n3 5 2\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n5 6 2\\n6 6 2\\n3 5 2\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n5 6 2\\n4 5 6\\n6 6 2\\n5 8 2\\n3 5 2\\n5 6 2\\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == \"15\"\n\nassert solution('''\n5\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == \"10\"\n\nassert solution('''\n8\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n1 4\n2 5\n3 4\n''') == \"7\"\n\nassert solution('''\n8\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n1 5\n2 4\n3 4\n''') == \"3\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 4') == 'BAABC'"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 3 3 4\") == \"...BBC\"\nassert solution(\"5 5 3 3 2\") == \"...A.C\"\nassert solution(\"5 5 3 3 1\") == \"...A..C\"\nassert solution(\"5 5 3 3\") == \"...A..\"\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 3 3 4') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nassert solution('0 0 0 0 0') == '@'\nassert solution('3 3 3 0') == '...........'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 3 3 4\\n\") == \"...BBB...\\n...A.C..\\n....C...\\n@DDDD.\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5 3 4\") == \"ABCD\"\nassert solution(\"7 7 5 3 4\") == \"BBBBBB\"\nassert solution(\"2 2 3 5 3\") == \"@@\"\nassert solution(\"4 4 5 4 3\") == \"@@@@\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5 3 3 4\") == \".ABC.C...DDDD\"\nprint(solution(input()))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'A'\nassert solution('2') == 'AAA'\nassert solution('3') == 'AAA.C'\nassert solution('4') == 'AAAA.CCCCCCCCCCCCCCCCCCC'\nassert solution('5') == 'AAABBBCAAABBBCAAABBBCAAABBBCAAAB'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5 3 3 4\") == \"...BBC..A.C....C@DDDD...\""
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD''') == '....C'\n\nassert solution('''5 5 3 3 0\n.....\n..BBC\n..A.C\n....C\n@DDDD''') == '@DDDD'\n\n'''\n    pass\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '111\\n001\\n000\\n111\\n000'"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001'\nassert solution('''5 3\n111\n000\n001\n000\n111''') == '000'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n5 3\n111\n001\n000\n111\n000\nSample Input:\n4 1\n1\n0\n9\nSample Output:\n0\n1\n9\nSample Input:\n4 2\n1\n0\n9\nSample Output:\n1\n0\n1\n9\nSample Input:\n5 3\n111\n001\n000\n111\n000\nSample Output:\n001\n001\n001\n111\n200\n\"\"\") == r\"\"\"\n0\n1\n1\n111\n111\n200\n\"\"\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n111\\n001\\n000\\n111\\n000') == '001\\n001\\n001\\n111\\n200'\nassert solution('5 5\\n111\\n000\\n001\\n000\\n001') == '001\\n001\\n000\\n111\\n200'\nassert solution('5 5\\n111\\n000\\n001\\n001\\n001') == '001\\n001\\n000\\n111\\n200'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 3\n111\n001\n000\n111\n000\n\"\"\") == \"001\"\n\nassert solution(\"\"\"\n5 4\n1234\n1234\n1234\n1234\n1234\n\"\"\") == \"1234\"\n\nassert solution(\"\"\"\n5 6\n12345\n12345\n1234\n12345\n1234\n\"\"\") == \"12345\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001'\nprint(solution('''5 3\n111\n001\n000\n111\n000'''))\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n111\\n001\\n111\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n111\\n001\\n000\\n111\\n000\") == \"001\\n001\\n001\\n111\\n200\"\nassert solution(\"5 3\\n111\\n001\\n000\\n000\\n000\") == \"001\\n000\\n001\\n111\\n200\"\n\n'''\n\n##############################################################################################################\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '001'\nassert solution('''\n5 3\n110\n010\n000\n111\n000\n''') == '110'\nassert solution('''\n5 3\n111\n111\n111\n111\n110\n''') == '111'\nassert solution('''\n5 3\n111\n111\n110\n000\n111\n''') == '111'\nassert solution('''\n5 3\n111\n110\n110\n000\n111\n''') == '110'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n101\\n1001\\n111') == '101\\n1001\\n111'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '19 20'\nassert solution('4/3') == '14'\nassert solution('20/7') == '7 20'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 20'\nassert solution('19/14') == '19 20'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '20 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 20'\nassert solution('19/14') == '19 15'\nassert solution('4/3') == '4 5 7'\nassert solution('20/7') == '20 15 13 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '19 20'\nassert solution('4/3') == '4'\nassert solution('20/7') == '20'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"19/13\") == \"10 20\"\nassert solution(\"10/1\") == \"10 10\"\nassert solution(\"19/14\") == \"10 20\"\nassert solution(\"4/3\") == \"10 20\"\nassert solution(\"20/7\") == \"10 20\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10\"\nassert solution(\"19/14\") == \"19 20\"\nassert solution(\"4/3\") == \"17 15 14 13 7 2\"\nassert solution(\"20/7\") == \"17 15 14 13 7 2\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n19/13\n10/1\n19/14\n4/3\n20/7\n19/7\n20/13\n19/15\n10/7\n20/17\n19/2\n19/17\n''') == '20 17 16 13 11 10 2'\n\nassert solution('''\n7/2\n5/2\n4/2\n''') == '1 3 2'\n\nassert solution('''\n2/5\n9/8\n9/4\n''') == '2 7 3 4'\n\nassert solution('''\n18/4\n18/2\n19/7\n11/8\n15/13\n15/7\n''') == '4 6 2 1 9 7 8'\n\nassert solution('''\n12/5\n12/3\n''') == '2 2 1'"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('19/13\\n10/1\\n19/14') == '10 20'\nassert solution('4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17') == '10 20 17 15 14 13 7 2'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\\n\") == \"19 20\\n17 15 14 13 7 2\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/13\\n19/2\\n19/17\\n10/7\\n20/13\\n19/7\\n19/2\\n') == '19 20'\n\"\"\"\nfrom itertools import permutations\nfrom math import gcd\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('4 4') == 'impossible'\nassert solution('3 10') == 'impossible'\nassert solution('4 3') == 'possible'\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 4\n3 0\n4 3\n0 3\n4 4\n2 4\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'impossible'\nassert solution('1 2') == 'possible'\nassert solution('2 2') == 'possible'\nassert solution('2 3') == 'impossible'\nassert solution('3 2') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 0\\n0 2\\n1 2 3\\n2 0\\n3 0 3\") == \"possible\"\nassert solution(\"2 2\\n1 0\\n0 2\\n1 2 3\\n2 0\\n3 0 3\\n3 2 2\") == \"impossible\"\nassert solution(\"2 2\\n1 0\\n0 2\\n1 2 3\\n2 0\\n3 0 3\\n5 2 1\") == \"possible\"\nassert solution(\"3 1\\n0 0\\n0 0\\n0 1\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 3\\n1 2 2\") == \"impossible\"\nassert solution(\"2 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\nassert solution(\"5 1\\n0 0\\n0 2\\n2 0\\n3 2\\n3 0 3\\n4 0 4\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('0 0') == 'impossible'\nassert solution('0 2') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('1 1') == 'possible'\nassert solution('2 2') == 'impossible'\nassert solution('2 1') == 'impossible'\nassert solution('1 1 1 1 1') == 'impossible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'possible'\nassert solution('1 1') == 'impossible'\nassert solution('1 3') == 'impossible'\n'''\n\nimport sys\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n''') == 'possible'\nassert solution('''\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n''') == 'impossible'\nassert solution('''\n5 5\n1 0\n0 0\n1 1\n2 3\n0 0\n1 2\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"possible\"\n\"\"\"\nSample Input:\n6 1\n1 1\n2 2\n4 3\n0 0\n0 2\n4 1\n4 4\n4 1\nSample Output:\nimpossible\n\"\"\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n        '2 2\\n'\n        '2\\n'\n        '2\\n') == '4'\n\nassert solution(\n        '3 3\\n'\n        '2\\n'\n        '2\\n') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4') == '4'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2\n2\n''') == '4'\nassert solution('''\n3\n2\n2\n''') == '3'\nassert solution('''\n3\n1\n3\n''') == '5'\nassert solution('''\n1\n1\n1\n''') == '3'\nassert solution('''\n2\n2\n2\n''') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sorted(sample_input)) == str(solution(input))\nassert solution(sample_input) == str(solution(input))"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"4\"\nSample Input 2:\n4 3\n2\n2\n2\n3\nSample Output 2:\n5\n'''\n\nfrom math import factorial"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n2\n2\n2\n''') == '4'\nassert solution('''\n4 5\n2\n5\n1\n2\n1\n''') == '4'\nassert solution('''\n5 5\n2\n5\n1\n4\n1\n''') == '4'\nassert solution('''\n4 6\n2\n3\n2\n3\n3\n''') == '3'\nassert solution('''\n2 6\n1\n3\n1\n2\n1\n''') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 2, 2, 2]) == 4\nassert solution([2, 2, 2]) == 3\nassert solution([3, 2, 2, 3]) == 5\nassert solution([2, 2, 2, 1]) == 3\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2\n2\n2\n2\n2''') == '4'\nassert solution('''4 2\n1\n1\n2\n1''') == '3'\nassert solution('''4 2\n2\n2\n1\n1''') == '3'\nassert solution('''4 2\n2\n2\n1\n2''') == '3'\nassert solution('''4 2\n1\n1\n2\n1''') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '4'\nassert solution('1 1') == '2'\nassert solution('1 2') == '1'\nassert solution('2 3') == '2'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == '4'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n2\\n2\\n3') == \"Mirko\"\nassert solution('3\\n1 1\\n1 2\\n1 3') == \"Mirko\"\nassert solution('3\\n1 1\\n1 2\\n1 3') == \"Slavko\"\nassert solution('1\\n1 2\\n3\\n4\\n3') == \"Mirko\"\nassert solution('1\\n1 2\\n3\\n4\\n3') == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"Mirko\"\n\nSample Input:\n2\n3 3\n4 3\n2 3\nSample Output:\nSlavko\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n\") == \"Slavko\"\nassert solution(\"3\\n1 1\\n1 2\\n1 3\\n\") == \"Mirko\"\nassert solution(\"10\\n20 20\\n30 30\\n40 40\\n50 50\\n60 60\\n70 70\\n80 80\\n90 90\\n\") == \"Slavko\"\nassert solution(\"4\\n2 1\\n1 2\\n3 3\\n\") == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == 'Mirko'\nassert solution('2 2') == 'Slavko'\nassert solution('3 3') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Mirko\"\nassert solution(\"3\") == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n    5\n    3 1\n    3 2\n    3 3\n    2 3\n    1 4\n    \"\"\") == \"Slavko\"\nassert solution(\"\"\"\n    4\n    2 3\n    4 2\n    4 3\n    \"\"\") == \"Slavko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n1 2\\n1 3\") == \"Mirko\"\nassert solution(\"2 1\\n3 1\\n1 2\\n1 3\") == \"Slavko\"\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"Slavko\"\n\nimport os\nimport sys\n\nfrom io import StringIO\n\n\nclass Capturing(list):\n    def __enter__(self):\n        self._stdout = sys.stdout\n        sys.stdout = self._stringio = StringIO()\n        return self\n\n    def __exit__(self, *args):\n        self.extend(self._stringio.getvalue().splitlines())\n        del self._stringio    # free up some memory\n        sys.stdout = self._stdout\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Mirko\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"Mirko\"\n\nassert solution(\"4\") == \"Slavko\"\n\nassert solution(\"5\") == \"Mirko\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '2 4'\nassert solution('3\\n5\\n6') == '1 3'\nassert solution('3\\n3\\n6') == '2 3'\nassert solution('3\\n2\\n2') == '3 2'\nassert solution('4\\n4\\n4') == '3 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2 4'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2 4\"\nassert solution(\"2\") == \"2 4\"\nassert solution(\"1\") == \"2 4\"\nassert solution(\"100\") == \"1\"\nassert solution(\"10001\") == \"1\"\n\ninput = stdin.read()\n\ninputs = input.splitlines()\n\nfor i in range(len(inputs)):\n    inputs[i] = int(inputs[i])\n\noutputs = []\nfor i in range(len(inputs)):\n    outputs.append(str(find_integer(inputs[i])))\n\nprint(\" \".join(outputs))\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"2 4\"\nassert solution(\"1 10\") == \"1 2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1 1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 4'\nassert solution('6') == '2 4'\nassert solution('34') == '2 4'\nassert solution('38') == '2 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2 4\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(inp) == out\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n3\n''') == '1 4'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '2 4'\nassert solution('2\\n3 4\\n') == '0'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\nassert solution('5\\n8 10 2 1000000 30556926000') == '12'\nassert solution('10\\n') == '0'\nprint(\"Congratulations! Your solution is correct.\")"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n10000 400000 500000 900000') == '12'\nassert solution('5\\n8 10 2 1000000 30556926000') == '12'\nassert solution('100\\n1000 2000 3000 400000') == '100'\nassert solution('1\\n1') == '1'\nassert solution('2\\n1') == '1'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n10000 400000 500000 900000\\n'\n) == '12'\nassert solution(\n    '5\\n8 10 2 1000000 30556926000\\n'\n) == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"4\") == \"12\"\nassert solution(\"5\") == \"12\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1\n3\n3\n4\n10\n12\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '12'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"12\"\nprint(solution())\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 4 0\") == \"YES\"\nassert solution(\"7 3 0\") == \"YES\"\nassert solution(\"8 8 0\") == \"NO\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\n\n'''\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\"\"\") == \"YES\"\nassert solution(\"\"\"5 5\n0\n1 3\n2 6\n3 4\n4 5\nSample Output:\nNO\"\"\") == \"NO\"\nassert solution(\"\"\"6 6\n0\n1 3\n2 6\n3 4\n4 5\n5 6\nSample Output:\nNO\"\"\") == \"NO\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'YES'\nassert solution('8 8\\n0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0') == 'NO'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\n'''\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1000000 1000000') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 8\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"5 3\") == \"YES\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 5 2 3 4 1 3 1 4\\n\") == \"1 2 5 4 3 4 1\"\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12\\n\") == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 2\\n3 4 5 6 1 2') == '5 6 1 2 3 4'"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"Impossible\"\nassert solution(\"4 1\") == \"1 3 2 4\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n3 1 2 5\\n\") == \"6 1 2 3 4\"\n\n\"\"\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1 2\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"5 6 1 2 3 4\""
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\") == \"5 6 1 2 3 4\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('1 0 2 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"20512\"\nSample Input:\n3 3 4 5\nSample Output:\nIMPOSSIBLE\n\n\"\"\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 2\\n') == '1'\nassert solution('1 1 2 2\\n') == '1'\nassert solution('1 3 3 2\\n') == 'IMPOSSIBLE'\nassert solution('5 5 5 2\\n') == '20512'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 8 4') == '20512'\n\nassert solution('7 2 1 1') == 'IMPOSSIBLE'\n\nassert solution('2 2 8 4') == '20512'\n\nassert solution('10 2 1 2') == '2'\n\nassert solution('2 4 7 8') == 'IMPOSSIBLE'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '5 2 8 4'\n    ) == '20512'\n\nassert solution(\n    '1 100'\n    ) == 'IMPOSSIBLE'\n\nassert solution(\n    '5 6 8 4'\n    ) == 'IMPOSSIBLE'\n\nassert solution(\n    '3 2 1 1'\n    ) == 'IMPOSSIBLE'\n\nassert solution(\n    '5 2 8 4'\n    ) == '20512'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 8 1 2\") == \"202\", \"First\"\nassert solution(\"2 3 1 2\") == \"3\", \"Second\"\nassert solution(\"5 1 2 4\") == \"102\", \"Third\"\nassert solution(\"5 5 5 5\") == \"IMPOSSIBLE\", \"Fourth\"\nassert solution(\"1 1 1 2\") == \"1\", \"Fifth\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '20512'\nassert solution([5, 2, 8, 4]) == '20512'\nassert solution([4, 3, 7, 9]) == 'IMPOSSIBLE'\nassert solution([3, 5, 9, 8]) == 'IMPOSSIBLE'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1 4') == '201'\nassert solution('1 6 2 4') == '1234'\nassert solution('1 2 1 4') == '1234'\nassert solution('8 3 1 2') == '1'\nassert solution('6 4 4 6') == '1234'\n\nSample Input:\n2 5 2 1\nSample Output:\nIMPOSSIBLE\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 8 4') == '20512'\nassert solution('5 2 8 4') == 'IMPOSSIBLE'\nassert solution('5 1 0 4') == 'IMPOSSIBLE'\nassert solution('5 0 0 0 4') == 'IMPOSSIBLE'\nassert solution('5 1 2 4') == '1524'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4 2 3') == '1123'\nassert solution('3 4 1 2') == '33312'\nassert solution('3 3 3 1') == '33333'\nassert solution('5 7 5 3') == '353533'\nassert solution('1000 5 5 5') == '11000011'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3\nABC\nDEF\nGHI\n''') == \"1\", '''\nExpected value: \"1\"\nYour value: \"0\"\n'''\n\nassert solution('''\n2 3\nAB\nAC\n''') == \"1\", '''\nExpected value: \"1\"\nYour value: \"0\"\n'''\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nBAC\\nABC\") == \"2\"\nassert solution(\"3 8\\nHGBDFCAE\\nADBGHFCE\\nHCFGBDAE\") == \"3\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 8\") == 3\nassert solution(\"4 4\") == 4\nassert solution(\"5 8\") == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 2\nassert solution('3 8') == 3\nassert solution('3 4') == 1\n\"\"\""
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\nBAC\nABC''') == '2'\nassert solution('''3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE''') == '3'\nassert solution('''6 10\nACDABCAB\nCDABCAD\nCDABCACD\nBACDCABC\nABCADCCD\nADBCABDC''') == '6'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == str(output)\nassert str(output) == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().rstrip()\n\"\"\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '3'\nassert solution('2 3') == '3'\nassert solution('3 1') == '1'\nassert solution('2 1') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n1''') == '1'\nassert solution('''2 2\n2 1\n2''') == '3'\nassert solution('''2 3\n3 1\n1 2\n2 2\n3 1\n1''') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '6'\nassert solution('2 3') == '4'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    1 2\n    1 1\n    1 2\n    2 1\n    2 2\n    ''') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('3 4') == '6'\n\nfrom typing import List"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n''') == '3', 'First'\nassert solution('''\n1 1\n''') == '1', 'Second'\nassert solution('''\n4 4\n''') == '11', 'Third'\nassert solution('''\n4 4\n''') == '11', 'Fourth'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"5\"\nassert solution(\"1 2 2 3\") == \"6\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '3'\n\n'''"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 1\n1 2 1\n2 0 1 2\n2 0 1 3\n3 0 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 4\n1 1 1 1 1\n2 1 1 1 1\n3 1 1 1 1\n1 0 0 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 7') == '5'\nassert solution('2 2') == '2'\nassert solution('10 9') == '10'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2 4\n1 3 2\n2 3 1\n2 4 1\n3 1 2\n3 2 1\n''') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 1') == '1'\nassert solution('5 2') == '2'\nassert solution('5 1 2') == '1'\nassert solution('5 1 2 3') == '1'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\") == \"3\"\n\"\"\"\n\nstdin = \"\"\"\n1\n4\n1 3 2 4\n0 2 2\n2 3\n\"\"\""
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3'\nprint(solution())\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('5 3\\n1 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '2'\nassert solution('5 3\\n0 0 2\\n0 0 1\\n1 1 4\\n2 1 4\\n2 2 3') == '1'\nassert solution('5 3\\n0 0 2\\n0 0 1\\n1 1 4\\n2 1 4\\n2 2 3') == '0'\nassert solution('5 3\\n0 0 2\\n0 1 1\\n1 1 4\\n2 1 4\\n2 2 3') == '0'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\") == \"3\"\nassert solution(\"5 3\\n2 3 2 3\\n2 0 2 2\\n3 0 1 2\\n3 1 4\\n0 1 2\") == \"2\""
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\nprint(solution(input()))\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n1 1\\n2 2\\n3 2\\n\") == \"YES\"\nassert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n3 2\\n3 1\\n\") == \"NO\"\n\nstdin = \"\"\"\n3\n1 1\n2 3\n3 2\n\"\"\"\nimport sys\nimport io\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_something(self):\n        pass\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\nassert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == \"NO\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1\\n') == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1\\n\") == \"YES\"\nassert solution(\"3\\n5\\n1 2\\n1 2\\n1 2\\n1 2\\n2 2\\n3 2\\n3 2\\n\") == \"NO\"\nassert solution(\"1\\n2\\n2\\n2\\n\") == \"YES\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 2 3 1 1 1\\n3 2 3 1 1 1\\nYES') == 'YES\\nNO\\nYES\\nYES'\nassert solution('2\\n2 2\\nNO') == 'NO\\nYES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == 'YES'\nassert solution(\"2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n3 1\n3 2\n3\n2 2\n2 3\n3 4\n3 2\n2 2\n3 3\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n4\n1 2\n1 3\n2 4\n3 1\n3 2\n3\n2 2\n2 3\n3 4\n3 2\n2 2\n3 3\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'NO'\nassert solution('''\n1\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n10\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'YES'\nassert solution('''\n6\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\n''') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 1\n1 2\n2 1\nSample Input:\n1\n1 1\n1 2\nSample Output:\nYES\n\"\"\"\n) == 'YES'\nassert solution(\"\"\"\n1\n1 1\nSample Input:\n3\n1 1\n1 3\n2 2\n2 3\n3 1\n3 2\n3\n1 1\n1 2\n2 1\nSample Output:\nYES\nNO\n\"\"\"\n) == 'YES'\nassert solution(\"\"\"\n1\n1 1\n1 2\n2 1\nSample Output:\nNO\n\"\"\"\n) == 'NO'"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3.000000000\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n''') == '3.000000000'\nassert solution('''\n100\n''') == '24.99999998'\nassert solution('''\n-10\n''') == '-7.500000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0.000000000'\nassert solution('2') == '3.000000000'\n'''"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\nassert solution('3') == '3.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n''') == '3.000000000'\n'''\nExplanation:\n\nThe Kattis family has size 2, so everyone has 2 gifts in their bag. \nAt the end of the day, there are 3 gifts left in the bag, so everyone gets 1 gift.\n\nThe Kattis family has size 3, so everyone has 3 gifts in their bag. \nAt the end of the day, there are 4 gifts left in the bag, so everyone gets 2 gifts.\n\nThe Kattis family has size 4, so everyone has 4 gifts in their bag. \nAt the end of the day, there are 5 gifts left in the bag, so everyone gets 3 gifts.\n\nThe Kattis family has size 5, so everyone has 5 gifts in their bag. \nAt the end of the day, there are 6 gifts left in the bag, so everyone gets 4 gifts.\n\nThe Kattis family has size 6, so everyone has 6 gifts in their bag. \nAt the end of the day, there are 7 gifts left in the bag, so everyone gets 5 gifts.\n\nThe Kattis family has size 7, so everyone has 7 gifts in their bag. \nAt the end of the day, there are 8 gifts left in the bag, so everyone gets 6 gifts.\n\nThe Kattis family has size 8, so everyone has 8 gifts in their bag. \nAt the end of the day, there are 9 gifts left in the bag, so everyone gets 7 gifts.\n\nThe Kattis family has size 9, so everyone has 9 gifts in their bag. \nAt the end of the day, there are 10 gifts left in the bag, so everyone gets 8 gifts.\n\nThe Kattis family has size 10, so everyone has 10 gifts in their bag. \nAt the end of the day, there are 11 gifts left in the bag, so everyone gets 9 gifts.\n\nThe Kattis family has size 11, so everyone has 11 gifts in their bag. \nAt the end of the day, there are 12 gifts left in the bag, so everyone gets 10 gifts.\n\nThe Kattis family has size 12, so everyone has 12 gifts in their bag. \nAt the end of the day, there are 13 gifts left in the bag, so everyone gets 11 gifts.\n\nThe Kattis family has size 13, so everyone has 13 gifts in their bag. \nAt the end of the day, there are 14 gifts left in the bag, so everyone gets 12 gifts.\n\nThe Kattis family has size 14, so everyone has 14 gifts in their bag. \nAt the end of the day, there are 15 gifts left in the bag, so everyone gets 13 gifts.\n\nThe Kattis family has size 15, so everyone has 15 gifts in their bag. \nAt the end of the day, there are 16 gifts left in the bag, so everyone gets 14 gifts.\n\nThe Kattis family has size 16, so everyone has 16 gifts in their bag. \nAt the end of the day, there are 17 gifts left in the bag, so everyone gets 15 gifts.\n\nThe Kattis family has size 17, so everyone has 17 gifts in their bag. \nAt the end of the day, there are 18 gifts left in the bag, so everyone gets 16 gifts.\n\nThe Kattis family has size 18, so everyone has 18 gifts in their bag. \nAt the end of the day, there are 19 gifts left in the bag, so everyone gets 17 gifts.\n\nThe Kattis family has size 19, so everyone has 19 gifts in their bag. \nAt the end of the day, there are 20 gifts left in the bag, so everyone gets 18 gifts.\n\nThe Kattis family has size 20, so everyone has 20 gifts in their bag. \nAt the end of the day, there are 21 gifts left in the bag, so everyone gets 19 gifts.\n\nThe Kattis family has size 21, so everyone has 21 gifts in their bag. \nAt the end of the day, there are 22 gifts left in the bag, so everyone gets 20 gifts.\n\nThe Kattis family has size 22, so everyone has 22 gifts in their bag. \nAt the end of the day, there are 23 gifts left in the bag, so everyone gets 21 gifts.\n\nThe Kattis family has size 23, so everyone has 23 gifts in their bag. \nAt the end of the day, there are 24 gifts left in the bag, so everyone gets 22 gifts.\n\nThe Kattis family has size 24, so everyone has 24 gifts in their bag. \nAt the end of the day, there are 25 gifts left in the bag, so everyone gets 23 gifts.\n\nThe Kattis family has size 25, so everyone has 25 gifts in their bag. \nAt the end of the day, there are 26 gifts left in the bag, so everyone gets 24 gifts.\n\nThe Kattis family has size 26, so everyone has 26 gifts in their bag. \nAt the end of the day, there are 27 gifts left in the bag, so everyone gets 25 gifts.\n\nThe Kattis family has size 27, so everyone has 27 gifts in their bag. \nAt the end of the day, there are 28 gifts left in the bag, so everyone gets 26 gifts.\n\nThe Kattis family has size 28, so everyone has 28 gifts in their bag. \nAt the end of the day, there are 29 gifts left in the bag, so everyone gets 27 gifts.\n\nThe Kattis family has size 29, so everyone has 29 gifts in their bag. \nAt the end of the day, there are 30 gifts left in the bag, so everyone gets 28 gifts.\n\nThe Kattis family has size 30, so everyone has 30 gifts in their bag. \nAt the end of the day, there are 31 gifts left in the bag, so everyone gets 29 gifts.\n\nThe Kattis family has size 31, so everyone has 31 gifts in their bag. \nAt the end of the day, there are 32 gifts left in the bag, so everyone gets 30 gifts.\n\nThe Kattis family has size 32, so everyone has 32 gifts in their bag. \nAt the end of the day, there are 33 gifts left in the bag, so everyone gets 31 gifts.\n\nThe Kattis family has size 33, so everyone has 33 gifts in their bag. \nAt the end of the day, there are 34 gifts left in the bag, so everyone gets 32 gifts.\n\nThe Kattis family has size 34, so everyone has 34 gifts in their bag. \nAt the end of the day, there are 35 gifts left in the bag, so everyone gets 33 gifts.\n\nThe Kattis family has size 35, so everyone has 35 gifts in their bag. \nAt the end of the day, there are 36 gifts left in the bag, so everyone gets 34 gifts.\n\nThe Kattis family has size 36, so everyone has 36 gifts in their bag. \nAt the end of the day, there are 37 gifts left in the bag, so everyone gets 35 gifts.\n\nThe Kattis family has size 37, so everyone has 37 gifts in their bag. \nAt the end of the day, there are 38 gifts left in the bag, so everyone gets 36 gifts.\n\nThe Kattis family has size 38, so everyone has 38 gifts in"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '3'\nassert solution('5') == '3.33333333333'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n\") == \"3.000000000\"\nassert solution(\"15\\n\") == \"9.99999999999\"\nassert solution(\"1\\n\") == \"1.000000000\"\nassert solution(\"50\\n\") == \"49.99999997\""
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '3.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('11') == '1'\nassert solution('0') == '0'\nassert solution('3') == '3'"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('10') == '8.999999999'\nassert solution('1000') == '18.999999999'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"8\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('1 2\\n3\\n3') == '2'\nassert solution('1 3\\n2 2\\n3 3') == '1'\nassert solution('1 2\\n3\\n4 5\\n3 2\\n4 2\\n5 2\\n3 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n2 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n3 2\\n5 2\\n4 2\\n3 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2\\n3 2\\n4 2\\n5 2\\n2 2\\n5 2"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '0'\nassert solution('5 1 1 2 1 2') == '0'\nassert solution('3 3 4 4 5 6') == '2'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('3\\n1 2') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '1'\n\"\"\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3') == '1'\n\nassert solution('1 2\\n1 3') == '0'\n\nassert solution('5 2\\n3 2 4 5') == '0'\n\nassert solution('6 1\\n3 2 4 1 5') == '3'\n\nassert solution('1000 2\\n10 11 12 20 22 23 24 25') == '4'"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '1'\nassert solution('5 3') == '2'\nassert solution('10 4') == '3'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\nSample Input:\n2\n1\n1\nSample Output:\n0\n1\n2\n1\n''') == '1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3 5') == '2'\nassert solution('4 4 4') == '4'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 3 4\n1 2 4\n1 2 4\n''') == \"3\"\nassert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 3 4\n1 2 4\n1 2 4\n1 2 4\n''') == \"2\"\nassert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 3 4\n1 2 4\n1 2 4\n1 2 4\n1 2 4\n''') == \"4\"\nassert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 3 4\n1 2 4\n1 2 4\n1 2 4\n1 2 4\n''') == \"4\"\nassert solution('''\n5 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 3 4\n1 2 4\n1 2 4\n1 2 4\n1 2 4\n''') == \"3\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\") == \"2\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n\"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"2 3 5\n0 1 3\n1 2 2\n1 1 4\n2 3 4\n1 3 4\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 1 2 3 4 5\") == \"1\"\n\nassert solution(\n    \"5 1 2 3 4 5\") == \"2\"\n\nassert solution(\n    \"5 1 2 3 4 5\") == \"3\"\n\nassert solution(\n    \"5 1 2 3 4 5\") == \"1\"\n\nassert solution(\n    \"5 1 2 3 4 5\") == \"2\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '1'\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '1'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 4') == '2'\nassert solution('1 1 2') == '1'\nassert solution('0 2 4') == '2'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\"\nassert solution(\"1\") == \"Add.c\"\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 HelloWorld.c\\nint Main() { \\n   printf('Hello %d\\\\n',i); \\n}\\n***END***\\nAdd.c\\nint Main() { \\n   for (int i=0; i<10; i++) \\n   sum += i; \\n   printf('SUM %d', sum); \\n}\\n***END***\\nint Main() { \\n   printf('Hello %d\\\\n',i); \\n   printf('THE END\\\\n'); \\n}\\n***END***\") == \"2 Add.c\\n\"\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'HelloWorld.c'\nassert solution('3') == 'Add.c'\nassert solution('1') == 'THE END'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '''2 HelloWorld.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() { \\nsum = 0;\\nfor (int i=0; i<10; i++) \\nsum += i;\\nsum = sum + i;\\nprintf(\\\"SUM %d\\\\n\\\", sum);\\n}\\n***END***\\nint Main() { \\nsum = 0;\\nfor (int i=0; i<10; i++) \\nsum += i;\\nsum = sum + i;\\nprintf(\\\"Hello %d\\\\n\\\", i);\\nprintf(\\\"THE END\\\\n\\\", i);\\n}\\n***END***\") == \"2 HelloWorld.c\\ndef solution(stdin: str) -> str:\\n\\n\\tpass\\n\\n\\t\\n\\t\\n\\n\\t\\n\\n\\n\\t\\n\\n\\n\\n\\t\\n\\n\\n\\t\\n\\n\\n\\t\\n\\n\\t\\n\\n\\n\\n\\t\\n\\n\\n\\n\\t\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\t\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '2 HelloWorld.c\\n2 Add.c\\n'\n\nassert solution('''\n3\nHelloWorld.c\nint Main() {\n  printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '3 HelloWorld.c\\n3 Add.c\\n'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\"\nassert solution(\"1\") == \"The END\"\n'''"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n''') == '''\n3 HelloWorld.c\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***\n''') == '2 HelloWorld.c\\ndef solution(stdin: str) -> str: S\\npass\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\n\")\\n\\ndef solution(stdin: str) -> str:\\nprint(\"Hello %d\\n\",i)\\nprint(\"THE END\\"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1 HelloWorld.c\"\nassert solution(\"2\") == \"2 Add.c\"\nassert solution(\"3\") == \"3 int Main() { sum = 0; for (int i=0; i<10; i++) sum += i; printf('SUM %d', sum); }\") == \"3 def solution(stdin: str) -> str: sum = 0; for (int i=0; i<10; i++) sum += i; printf('SUM %d', sum); def __repr__(self) -> str: return f'Solution({self.a})'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n2 2 2\n4 2 1\n4 4 1\n4 4 1\n4 4 1\n''') == '1'\nassert solution('''\n4 3\n1 1 1\n4 1 2\n4 3 1\n4 4 1\n''') == '1'\nassert solution('''\n4 4\n4 1 4\n1 2 2\n1 3 2\n''') == '3'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2\n2\n''') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '1\\n2\\n2\\n'\nassert solution('8 3') == '7\\n7\\n7\\n'\nassert solution('12 3') == '11\\n11\\n11\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"1\"\nassert solution(\"2\\n2\\n2\\n\") == \"1\"\nassert solution(\"3\\n2\\n2\\n\") == \"2\"\nassert solution(\"3\\n4\\n2\\n\") == \"1\"\nassert solution(\"4\\n2\\n2\\n\") == \"2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"2 2 2\"\n\nassert solution(\"\"\"\n3 3\n1 1 1\n4 1 2\n4 2 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n3\n4\n\"\"\") == \"1 1 1\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"4 2 1\") == \"2\"\nassert solution(\"4 4 1\") == \"2\"\n\n---Input---\n8 3\n4 1 1\n1 3 4\n4 2 1\n4 1 3\n4 4 1\n2 1 4\n2 2 1\n2 4 3\n4 1 1\nSample Output:\n1\n2\n2\n---Output---\n3\n3\n2\n1\n2\n2\n2\n3\n1\n'''"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1\\n2\\n2\\n'''"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 2 2\") == \"1\"\nassert solution(\"3 3\\n2 2 2\\n4 2 1\\n4 4 1\") == \"1 2\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 5\n3 5 2 3 5 2 2\n3 2 1 2 2 1\n\"\"\") == \"2\""
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1\\n2\\n2'\nassert solution('7 3') == '1\\n2\\n2\\n3\\n4'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == \"5\"\nassert solution('''\n1 20\n100 100\n''') == \"0\"\nassert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == \"10\"\nassert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == \"0\"\nassert solution('''\n5 20\n50 70 10\n100 110 4\n150 190 16\n''') == \"10\"\n'''\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 20\\n50 70 10\\n100 110 4\\n150 190 16\"\n) == \"5\""
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '1'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '5'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 20') == '5'\nassert solution('100 110 4') == '5'\nassert solution('150 190 16') == '5'\nassert solution('4 0 1') == '1'\nassert solution('10 1 5') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\"\nSample Input:\n7 10\n10 6 10 5 1\n10 7 7 7 7\n7 7 7 7 7\n10 7 7 7 7\n7 7 7 7 7\n7 7 7 7 7\nSample Output:\n20\n\"\"\"\n\nn, c = map(int, input().split())\ndata = list(map(int, input().split()))\nuser_data = [[i, data[i]] for i in range(n)]\ndata.sort(key=lambda x: x[0])\nprint(len(data))\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\nassert solution('5 10\\n100 10 5\\n15 10 5\\n10 10 5\\n5 10') == '0'\nassert solution('3 1\\n3 1 3\\n2 1 1\\n3 1 2\\n2 1 1\\n2 1 1\\n3 1 2\\n2 1 1\\n3 1 2\\n2 1 1\\n3 1 2') == '1'\nassert solution('5 20\\n80 20 5\\n100 20 10\\n150 20 15\\n80 20 5\\n100 20 10\\n150 20 15\\n80 20 5\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15\\n80 20 5\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15\\n100 20 10\\n150 20 15') == '1'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"5\"\nassert solution(\"5 20\") == \"5\"\nassert solution(\"10 20 20\") == \"5\"\nassert solution(\"20 40 10\") == \"5\"\nassert solution(\"30 50 10\") == \"10\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 20\\n50 70 10\\n100 110 4\\n150 190 16') == '5'\nassert solution('3 20\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4\n50 60\n80 80\n''') == '2'\nassert solution('''\n3 10\n20 25\n50 50\n''') == '6'\nassert solution('''\n2 10\n50 40\n80 80\n''') == '6'\nassert solution('''\n3 20\n50 70\n80 80\n''') == '5'\nassert solution('''\n3 10\n50 40\n80 80\n''') == '5'\n'''"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"26\"\nassert solution(\"10 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 10\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"IMPOSSIBLE\"\nassert solution(\"5 5\") == \"26\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n#.#.#\\n....#\\n#.##\\n1') == \"26\"\nassert solution('10 9\\n(0 0) (9 9) (9 2) (0 2) (8 3) (5 4) (2 4) (4 5) (6 6) (8 7) (5 7)\\n.#######.\\n#.#.#.###\\n##.##.###\\n#.#####.\\n#.###.###\\n##.#####\\n#.##.###\\n#.###.###\\n#.#######\\n#.#.#.###\\n##.##.###\\n#.#####.\\n#####.##\\n#.#.#.###\\n###.##.##\\n#.###.###\\n##.#####\\n###.###.#\\n#.#######\\n#.#######\\n#####.##\\n###.##.##\\n##.#####\\n#.#######\\n##.###.##\\n#.#####.\\n###.###.#\\n###.##.##\\n####.##.#\\n#####.##\\n####.##.#\\n#.##.###\\n##.#####\\n#.#####.\\n#.#######\\n#.#######\\n##.#####\\n#.#####.\\n##.#####\\n#####.##\\n####.##.#\\n##.##.###\\n#.#####.\\n#.##.###\\n#.###.###\\n###.##.##\\n###.#####\\n###.###.#\\n###.##.##\\n#.#####.\\n#.###.###\\n#.###.###\\n#.#####.\\n#.##.###\\n#####.##\\n#.#######\\n#.###.###\\n#.#####.\\n###.##.##\\n#.#####.\\n#.###.###\\n#####.##\\n#####.##\\n#.##.###\\n#.###.###\\n#.#####.\\n#####.##\\n#.#######\\n#####.##\\n###.##.##\\n###.#####\\n###.###.#\\n#.#####.\\n#.##.###\\n##.#####\\n#.#####.\\n#.#######\\n##.#####\\n#.#####.\\n#.#######\\n#####.##\\n#####.##\\n#.##.###\\n#.#####.\\n###.##.##\\n###.#####\\n#.###.###\\n#.#####.\\n#.#######\\n###.#####\\n#.#####.\\n###.##.##\\n#####.##\\n#####.##\\n###.##.##\\n#.###.###\\n#.#####.\\n#.#######\\n#.#####.\\n###.#####\\n###.#####\\n#.#####.\\n#.#######\\n#.#####.\\n#.#####.\\n##.##.###\\n#.#####.\\n###.###.#\\n#.#####.\\n#.##.###\\n#.#####.\\n###.##.##\\n#.###.###\\n#.#####.\\n#.#######\\n#.#######\\n#.#######\\n####.##.##\\n#####.##\\n#####.##\\n#.###.###\\n###.##.##\\n###.#####\\n###.###.#\\n###.##.##\\n###.#####\\n#####.##\\n#####.##\\n#.##.###\\n#.#####.\\n#.#######\\n#.#####.\\n###.#####\\n###.#####\\n#.#####.\\n#.#######\\n#####.##\\n#####.##\\n#.##.###\\n#.#####.\\n###.##.##\\n###.#####\\n###.###.#\\n###.##.##\\n#.#####.\\n#.###.###\\n#.#####.\\n###.#####\\n#.#####.\\n#.#######\\n#.#####.\\n#.#######\\n#####.##\\n#####.##\\n#.##.###\\n#.#####.\\n###.##.##\\n###.#####\\n###.###.#\\n###.##.##\\n###.#####\\n#####.##\\n#####.##\\n#.##.###\\n##.#####\\n#.#####.\\n###.###.#\\n###.##.##\\n###.#####\\n#####.##\\n#####.##\\n#.##.###\\n##.#####\\n#.#####.\\n#.#######\\n#.#####.\\n#.#######\\n#.#######\\n####.##.##\\n#####.##\\n#####.##\\n#.##.###\\n#.#####.\\n#.#######\\n#.#####.\\n###.#####\\n###.#####\\n#.#####.\\n#.#######\\n#.#####.\\n###.#####\\n###.#####\\n#.#####.\\n#.#######\\n#.#######\\n#.#######\\n#####.##\\n#####.##\\n#.##.###\\n#.#####.\\n###.##.##\\n###.#####\\n###.###.#\\n###.##.##\\n###.#####\\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == '28'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\n''') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n(2 5)\\n(5 3)\\n\") == '26'\nassert solution(\"3\\n(4 2)\\n(2 3)\\n(1 3)\\n(1 2)\\n(1 2)\\n\") == 'IMPOSSIBLE'\nassert solution(\"5 5\\n(2 5)\\n(5 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\\n\") == 'IMPOSSIBLE'"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\n1\n6 (4 2) (4 3) (3 3) (2 3) (1 3) (1 2)''') == '26'\nprint(solution('''5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5') == '26'\nassert solution('4 4') == 'IMPOSSIBLE'\nassert solution('4 2') == '28'\nassert solution('4 3') == '28'\nassert solution('4 3') == '28'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 5\\n'\n    '(2 5)\\n'\n    '.....\\n'\n    '.#.#.\\n'\n    '....#\\n'\n    '.....\\n'\n    '.#.##\\n'\n    '#.#.#\\n'\n    '1\\n'\n    '10 (4 2)\\n'\n    '4 3\\n'\n    '3 3\\n'\n    '2 3\\n'\n    '1 3\\n'\n    '1 2\\n'\n) == \"26\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"26\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1''') == 'failure'\nassert solution('''5\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1''') =='success'\nassert solution('''5\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1''') =='success'\nassert solution('''10\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n-1 2\n0 3\n1 3\n-1 4\n0 5\n1 5''') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('8\\n0 1\\n1 0\\n0 -1\\n-1 0\\n0 -1\\n1 0\\n1 1') =='success'\nassert solution('6\\n0 1\\n1 0\\n0 -1\\n-1 0\\n0 -1\\n1 0\\n1 1') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nassert solution('5\\n1 2\\n2 1\\n1 3\\n2 2\\n2 3\\n2 4\\n3 2\\n3 3\\n3 4') == 'failure'\nassert solution('1\\n1\\n1') =='success'"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n-1 2\n0 3\n1 2\n-1 3\n0 4\n1 3\n-1 4\n0 5\n1 4\n-1 5\n0 6\n1 5\n-1 6\n\"\"\") == \"failure\"\nassert solution(\"\"\"\n5\n1 0\n0 0\n2 0\n3 0\n4 0\nSample Output:\nsuccess\"\"\") == \"success\""
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"success\"\nassert solution(\"2 2\") == \"success\"\nassert solution(\"4 -1\") == \"failure\""
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n-1 0\n0 0\n1 0\n-1 1\n0 2''') == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') =='success'\nassert solution('10\\n1 0\\n-2 0\\n-1 0\\n1 0\\n-2 0\\n-1 0\\n1 0\\n-2 0\\n-1 0\\n1 0') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') =='success'\nassert solution('2') == 'failure'\nassert solution('3') =='success'\nassert solution('4') =='success'\nassert solution('5') == 'failure'"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"failure\"\nassert solution(\"4\") == \"failure\"\nassert solution(\"5\") == \"success\"\nassert solution(\"6\") == \"success\"\nassert solution(\"7\") == \"success\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 2\\n3 3') == 'impossible'\n\nSample Input:\n10 30 3\n3 2\n5 4\n5 6\n0 9\n0 5\nSample Output:\npossible\n\nSample Input:\n1 1 2\n1 3\n2 2\nSample Output:\nimpossible\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"impossible\"\nassert solution(\"2 2 2\") == \"possible\"\n\n\"\"\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 2\n5 2\n1 2\n3 3\n4 4\n''') == 'possible'\nassert solution('''\n2 2 4\n3 3\n1 2\n5 2\n''') == 'impossible'\nassert solution('''\n2 2 2\n5 2\n4 4\n''') == 'impossible'\nassert solution('''\n2 2 2\n1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'possible'\nassert solution('3 3') == 'impossible'\n'''\n\nn, q, s = [int(x) for x in stdin.split()]\nqueues = [int(x) for x in stdin.split()]\nq_sizes = [int(x) for x in stdin.split()]"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"2 2 2\\n1 2\\n3 3\") == \"possible\"\nassert solution(\"3 3\\n1 2\\n5 2 2\") == \"possible\"\nassert solution(\"3 5 2\\n1 2\\n5 2 2\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'possible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'possible'"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'possible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3 4\n3 5\n3 8\n3 4\n''') == 'impossible'\nassert solution('''\n7 2 1\n1 1\n1 2\n''') == 'possible'\n\"\"\""
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2 2\n5 2\n''') == 'impossible'\nassert solution('''\n3 3\n1 2\n3 3\n2 1\n1 2\n''') == 'possible'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 2\n1 1 2\n1 2 1\n1 1 2\n''') == '1'\nassert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 2\n1 1 2\n2 3 1\n-1 1 2\n''') == '1'\nassert solution('''\n3 2\n1 1 2\n2 3 1\n-1 1 2\n''') == '1'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\nassert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2') == '0'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 1\n-1 1\n2 1\n''') == '1'\nassert solution('''\n5 3\n1 3 2 1\n2 1 3 1\n2 2 2 1\n3 1 3 1\n4 1 2 1\n''') == '3'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n1 2\n1 2 1\n-1 1 2\n''') == '1'\nassert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '2'\n\n'''\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n1 2 2 2 2\n1 3 3 3 3\n1 4 4 4 4\n1 5 5 5 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n1 2 2 2 2\n1 3 3 3 3\n1 4 4 4 4\n1 5 5 5 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n1 2 2 2 2\n1 3 3 3 3\n1 4 4 4 4\n1 5 5 5 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 5\n1 1 1 1 1\n1 2 2 2 2\n1 3 3 3 3\n1 4 4 4 4\n1 5 5 5 5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''3 10\n1 2 4\n1 8 3\n-1 9 2\n''') == '4'\nassert solution('''100 10\n8 2 13\n2 8 2\n12 6 2\n2 4 2\n-5 1 3\n''') == '7'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '0'\nassert solution('1 2') == '1'\nassert solution('-1 1 2') == '1'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '1'\nassert solution('''\n3 2\n1 1 2\n2 1 2\n-1 1 2\n''') == '2'\n'''\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n111') == '5'\nassert solution('5\\n333') == '3'\nassert solution('5\\n873') == '5'\nassert solution('4\\n2') == '2'\nassert solution('4\\n4') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\n353\n''') == '3'\nassert solution('''\n4 2\n1234\n''') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n353\n''') == '3'\n\nassert solution('''\n4 2\n1234\n''') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 2') == '5'\nassert solution('10 2') == '10'\nassert solution('1234') == '123'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 2') == '5'\nassert solution('6 2') == '6'\nassert solution('7 2') == '7'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1 1') == '3'\nassert solution('1 2 2') == '3'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"11\"\nassert solution(\"100\") == \"101\"\nassert solution(\"1000\") == \"1001\"\nassert solution(\"1234\") == \"1313\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n') == '3'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([int(x) for x in stdin.split()]) == \"YES\"\nassert solution([int(x) for x in stdin.split()]) == \"NO\"\nassert solution([int(x) for x in stdin.split()]) == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_lines) == \"YES\"\nassert solution([12, 0, 1, 12, 1]) == \"YES\"\nassert solution([3, 47, 0, 4, 9]) == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n12 30 45 3 11\n\"\"\") == \"NO\"\nassert solution(\n\"\"\"\n12 0 1 12 1\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n3 47 0 4 9\n\"\"\") == \"YES\"\n\n\"\"\"\nstdin = \"\"\"\n12 30 45 3 11\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([12, 30, 45, 3, 11]) == 'NO'\nassert solution([3, 47, 0, 4, 9]) == 'YES'"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n12 30 45 3 11\n''') == 'NO'\n\nassert solution('''\n12 0 1 12 1\n''') == 'YES'\n\nassert solution('''\n3 47 0 4 9\n''') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n12 30 45 3 11\n\n''') == 'NO'\nassert solution('''\n12 0 1 12 1\n\n''') == 'YES'\nassert solution('''\n3 47 0 4 9\n\n''') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'\n\n\"\"\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''\n1 1 2 3 1 0\n15 27 26''') == '2'\nassert solution('''\n1 1 2 3 1 0\n1 1 2 3 1 0''') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 3 1 0\") == \"3\"\nassert solution(\"15 27 26\") == \"2\"\nassert solution(\"1 1 2 3 1 0\") == \"0\"\n\n'''"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'\nassert solution('''1 1 2 3 1 0\n15 27 26''') == '2'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1 2 3 1 0\n2 4 20\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1 2 3 1 0\n15 27 26\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1 2 3 1 0\n30 41 37 33\"\"\") == \"0\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''\n1 1 2 3 1 0\n2 4 20\n''') == '3', solution\nassert solution(\n'''\n1 1 2 3 1 0\n15 27 26\n''') == '2', solution\nassert solution(\n'''\n1 1 2 3 1 0\n2 2 1\n''') == '0', solution\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'\n\n---"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'\nassert solution('''1 1 2 3 1 0\n15 27 26''') == '2'\nassert solution('''1 1 2 3 1 0\n2 2 1''') == '0'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1 2 3 1 0\n2 4 20\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1 2 3 1 0\n15 27 26\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1 2 3 1 0\n2 2 1\n\"\"\") == \"0\"\nprint(\"\u2705 Great job!\")\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == output\n\n\n\nclass Solution:\n    def firecrackers(self, x, y, r):\n        pass"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 1\\n2 0 1\\n4 0 1\\n') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2\\n') == '8'\nassert solution('3\\n0 0 2\\n1 1 2\\n') == '8'\nassert solution('3\\n0 0 2\\n1 1 2\\n') == '8'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"4\", \"Wrong Answer\"\nassert solution(\"3\") == \"4\", \"Wrong Answer\"\nassert solution(\"3\") == \"4\", \"Wrong Answer\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\nassert solution(stdin=\"3\\n0 0 1\\n2 0 1\\n4 0 1\") == \"4\"\nassert solution(stdin=\"3\\n0 0 2\\n3 0 2\\n6 0 2\") == \"6\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    5\n    0 0 1\n    2 0 1\n    4 0 1\n    0 0 2\n    2 0 2\n''') == '4'\n\nassert solution('''\n    3\n    0 0 1\n    2 0 1\n    4 0 1\n''') == '4'\n\nassert solution('''\n    3\n    0 0 2\n    2 0 2\n    1 1 2\n''') == '8'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n0 0 1\n2 0 1\n4 0 1\n\n''') == \"4\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    0 0 1\n    2 0 1\n    4 0 1\n    ''') == '4'\n\nassert solution('''\n    0 0 2\n    3 0 2\n    6 0 2\n    ''') == '8'\n''') == '8'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '4'\nassert solution('3') == '4'\n\n\n\"\"\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '6'\nassert solution('''\n3\n0 0 2\n2 0 2\n1 1 2\n''') == '8'\n\"\"\"\n--- Day 8: Stream Processing ---\n\n\"However, your current method of streaming processing will quickly run out of memory if you try to stream millions of characters at once; if you try to stream millions of characters, and run out of memory, it's likely that some of the robots you intended to communicate with will disappear before you can send the next round's worth of characters.\n\nSo the stream needs to be a queue: FIFO (first-in-first-out). The robots can only send a character at a time, so they need to be able to grab a character and queue it, then send the next character when the queue is full.\n\nHow many characters can you send using only FIFO?\n\nInput:\n\n3\n0 0 1\n2 0 1\n4 0 1\n\nOutput:\n\n4\n\n\"\"\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n''') == 'NO'\n\nassert solution('''\n3 1 4 2 4 1 1\n1 1 1 4 2 4 3\n''') == 'YES'\nassert solution('''\n3 3 3 3 3 3 3\n3 4 4 4 4 3 4\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\") == \"NO\"\n\"\"\"\n\n\nfrom math import sqrt, atan2, cos, radians\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\\n') == 'NO'\nassert solution('1 1 5 5 1 1 1 1\\n3 3 5 5 3 3 3 1\\n') == 'YES'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\") == \"NO\"\nassert solution(\"7 4 4 7 7 10 10 7\") == \"YES\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES'\nassert solution('1 3 3 5 5 3 3 1') == 'NO'\n\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\nassert solution('''\n1 2 3 4 5 6\n2 3 5 4 7 8\n3 4 5 6 7 9\n4 5 7 6 9 10\n5 6 7 8 9 10\n6 7 8 9 10 11\n''') == 'YES'\nassert solution('''\n2 2 5 3 3 2\n3 3 4 2 4 4\n2 2 5 5 2 5\n2 1 2 1 2 2\n2 5 5 2 5 2\n2 2 1 3 3 2\n''') == 'NO'\n'''\nTime Limit Exceeded\n'''\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == 'YES'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\n\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == 'YES'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'\n\nassert solution('''\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n''') == 'NO'"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\"\nassert solution(\"1\") == \"cslnb\"\nassert solution(\"2\") == \"cslnb\"\n\n\"\"\"\n\nn = int(input())\nstones = list(map(int, input().split()))"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"cslnb\"\nassert solution(\"2\") == \"cslnb\"\nassert solution(\"3\") == \"sjfnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0') == 'cslnb'\nassert solution('2\\n1 0') == 'cslnb'\nassert solution('3\\n2 3 1') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0') == 'cslnb'\nassert solution('2\\n1 0') == 'cslnb'\nassert solution('2\\n2 2') =='sjfnb'\nassert solution('3\\n2 3 1') =='sjfnb'"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n0\n''') == 'cslnb'\nassert solution('''\n2\n1 0\n''') == 'cslnb'\nassert solution('''\n2\n2 2\n''') =='sjfnb'\nassert solution('''\n3\n2 3 1\n''') =='sjfnb'\nprint('all test cases are passed!')\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0\") == \"sjfnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"2\\n2 2\") == \"sjfnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == \"cslnb\"\nassert solution(test_input_2) == \"cslnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) in [\"sjfnb\", \"cslnb\"]\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"2\\n2 2\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5\\n1 5 3') == '2'\nassert solution('1 2\\n1') == '1'\nassert solution('1 1\\n1') == '0'\n\"\"\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3\\n2') == '1'\nassert solution('1 1\\n1') == '0'"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3 5\n1 5 3\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n1 2\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('3 2') == '2'\nassert solution('1 1 1') == '0'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 2\\n1\\n\") == \"1\"\nassert solution(\"1 1\\n1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 2\\n1\\n\") == \"1\"\nassert solution(\"1 1\\n1\\n\") == \"0\""
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5 3\\n') == '2'\nassert solution('1 2\\n') == '1'\nassert solution('1 1\\n') == '0'\nassert solution('3 1\\n') == '1'"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0', \"First\"\nassert solution('1 2') == '1', \"Second\"\nassert solution('3 3') == '2', \"Third\"\nassert solution('10 1') == '9', \"Fourth\"\nassert solution('10 10') == '0', \"Fifth\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1\\n0 1'\nassert solution('2') == '2\\n-1 0 1'\n'''\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n2''') == '2'\nassert solution('''1\n0''') == '0 1'\nassert solution('''2\n1''') == '-1 0 1'\nassert solution('''4\n2''') == '-1 0 1'\nassert solution('''5\n2''') == '2'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"-2\") == \"0\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1''') == '2\\n-1 0 1\\n1'\nassert solution('''2\n-1 0 1\n1''') == '2\\n-1 0 1\\n1'\nassert solution('''3\n-1 0 1\n1''') == '-1 0 1\\n1'\nassert solution('''4\n-1 0 1\n1''') == '-1 0 1\\n1'\nassert solution('''5\n-1 0 1\n1''') == '-1 0 1\\n1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1\\n0 1\\n'\nassert solution('2\\n') == '2\\n-1 0 1\\n1'\n\nassert solution('3\\n') == '-1\\n0 1\\n'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1''') == '2 -1 1'\nassert solution('''5\n2''') == '3 -1 2 1'\nassert solution('''1\n1''') == '2 -1 1'\nassert solution('''10\n3\n2''') == '4 -1 3 1'\nassert solution('''10\n3\n4''') == '5 -1 3 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1\\n0 1\\n'\nassert solution('2\\n') == '2\\n-1 0 1\\n1'\n\n------------------------------------------"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n\n2\n\n''') == '2'\nassert solution('''\n1\n\n2\n\n''') == '-1'\nassert solution('''\n2\n\n-1\n\n''') == '-1'\nassert solution('''\n2\n\n-1\n\n''') == '1'\nassert solution('''\n2\n\n-1\n\n''') == '1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\\n0 1\"\nassert solution(\"2\") == \"-1 0 1\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1 5 4\n1 2 1 3\n''') == '1 3 3 '\nassert solution('''\n3 1 5 3\n1 3 1\n''') == '2 3 2 '\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 1 5 4\"\n    ) == \"1 3 3\"\nassert solution(\n    \"3 1 5 3\"\n    ) == \"1 2 2\"\nprint(solution(\n    \"3 2 5 3\"\n    )\n)\nprint(solution(\n    \"3 2 5 3\"\n    )\n)"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3'\nassert solution('3 1 5 3\\n1 2 1\\n') == '2 3 2'"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1 5 4\n1 2 1 3\n\"\"\") == \"1 3 3\"\n\nassert solution(\"\"\"\n3 1 5 4\n1 3 1\n\"\"\") == \"1 2 1\"\n\nassert solution(\"\"\"\n3 1 5 1\n1 3 1\n\"\"\") == \"1 1 1\""
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1 5 4\n1 2 1 3\n\"\"\") == \"1 3 3\"\n\nassert solution(\"\"\"\n3 2 5 3\n1 3 1\n\"\"\") == \"2 3 2\"\n\nassert solution(\"\"\"\n3 1 5 3\n1 3 1\n\"\"\") == \"1 2 1\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 5 4\\n') == '2 3 2'\nassert solution('5 1 5 3\\n') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 5 4') == '1 3 3', 'First example'\nassert solution('3 1 5 3') == '1 2 2', 'Second example'\nprint(solution(*tuple(input().split())))\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 3 3'\nassert solution('3 2 5 3') == '2 3 2'\nassert solution('3 3 5 3') == '2 3 2'\nassert solution('3 4 5 3') == '2 3 2'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"110\") == \"3\"\nassert solution(\"111111011\") == \"169\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('01010101') == '0'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution('0000') == '1'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''110\n2\n''') == '3'\n\nassert solution('''111111011\n2\n''') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"10\\n2\"\n) == \"3\"\nassert solution(\n    \"111111011\\n2\"\n) == \"169\"\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('110') == 3\nassert solution('111111011') == 169"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''110\n2\n\n''') == '3'\nassert solution('''111111011\n2\n\n''') == '169'\nassert solution('''4\n3\n\n''') == '0'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"110\\n2\") == \"3\"\nassert solution(\n    \"111111011\\n2\") == \"169\"\nassert solution(\n    \"100\\n1\") == \"1\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 0 4 2 2 0''') == '33.121375178000'\nassert solution('''5 1 1 2 0 0''') == '11.084259940083'\nassert solution('''5 5 5 2 3 3''') == '10.249035243713'\nassert solution('''5 0 4 2 2 0''') == '11.084259940083'\nassert solution('''3 1 1 2 0 0''') == '11.084259940083'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\n''') == '11.084259940083'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\"\"\") == \"11.084259940083\"\nassert solution(\"\"\"\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\"\"\") == \"33.121375178000\"\nassert solution(\"\"\"\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\"\"\") == \"11.084259940083\"\nassert solution(\"\"\"\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\"\"\") == \"33.121375178000\""
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 4 2 0') == '33.121375178000'\nassert solution('3 1 1 2 0 0') == '11.084259940083'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1 2 0 0\") == \"11.084259940083\"\nassert solution(\"5 0 4 2 2 0\") == \"33.121375178000\"\n\n\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('2 0 1 0 0') == '10.588235294118'\n\n'''"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 0 4 2 2 0''') == '33.121375178000'\nassert solution('''3 1 1 2 0 0''') == '11.084259940083'\nassert solution('''3\n1 1\n2 1\n2 3\n''') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('3 0 4 2 2 0') == '33.121375178000'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\nassert solution('5 0 4 2 2 0') == '33.121375178000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution('''8 5\n''') == '2'\nassert solution('''7 20\n''') == '0'\nassert solution('''1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 5\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '2'\nassert solution('8 5') == '2'\nassert solution('7 20') == '1'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == \"2\"\nassert solution(\"8 5\") == \"2\"\nassert solution(\"7 20\") == \"1\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7 5\n''') == '2'\nassert solution('''\n8 5\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n8 5\n''') == '2'\n\nassert solution('''\n8 15\n''') == '1'\n\nassert solution('''\n7 20\n''') == '0'\n\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 5\n''') == '2'\nassert solution('''\n1000000000000 1000000000001\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\nassert solution('''\n10 10\n''') == '1'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8 5\n\nOutput\n2\n\nOutput\n1\n\nOutput\n0\n\nOutput\n500000000000''') == '2'\nassert solution('''7 20\n\nOutput\n1\n\nOutput\n0\n\nOutput\n500000000000''') == '1'\nassert solution('''1000000000000 1000000000001\n\nOutput\n500000000000''') == '0'"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"01\") == 1\nassert solution(\"0110\") == 2\nassert solution(\"01101\") == 3\nassert solution(\"011011\") == 4\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 1 10') == '11'\nassert solution('7 2 3') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '11'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1 10\") == \"11\"\nassert solution(\"5 10 1\") == \"2\"\nassert solution(\"7 2 3\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == str(0)\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"0\"\n\n\"\"\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"5 1 10\") == \"11\"\nassert solution(\"7 2 3\") == \"0\"\nassert solution(\"5 10 1\") == \"2\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 10\n01000\n''') == '11'\nassert solution('''5 10 1\n01000\n''') == '2'\nassert solution('''7 2 3\n1111111\n''') == '0'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1 1\n''') == '2 1'\nassert solution('''5 1 2\n''') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1 1\n''') == '2 1'\nassert solution('''5 1 2\n''') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3, 1, 1]) == \"2 1\"\nassert solution([5, 1, 2]) == \"19 5\"\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 2') == '2 1'\nassert solution('3 1 1') == '-1'\nassert solution('5 1 2') == '19 5'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 1\n''') == '6'\nassert solution('''10 2\n''') == '4'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n\") == \"6\"\nassert solution(\"10 2\\n\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\nassert solution('10 2') == '4'\nprint('Congratulations, you passed all the tests!')\n\n\"\"\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\nassert solution('10 1') == '10'\nassert solution('10 0') == '10'"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''7 1\n5''') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"10 2\") == \"4\""
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('2') == '195.0.0.0/8'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\n2\n+127.0.0.1/32\n-127.0.0.1\n\n''') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n-149.154.167.99\n''') == '1'\nassert solution('''\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n''') == '2'\nassert solution('''\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n''') == '2'\nassert solution('''\n2\n+127.0.0.1/32\n-127.0.0.1\n''') == '-1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\"\"\") == \"\"\"1\n0.0.0.0/0\n\"\"\"\nassert solution(\"\"\"\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\"\"\") == \"\"\"2\n149.154.167.99\n149.154.167.120/29\n\"\"\"\nassert solution(\"\"\"\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\"\"\") == \"\"\"2\n195.0.0.0/8\n127.0.0.4/30\n\"\"\"\nassert solution(\"\"\"\n2\n+127.0.0.1/32\n-127.0.0.1\n\"\"\") == \"\"\"-1\n\"\"\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n-149.154.167.99\\n\") == \"1\\n0.0.0.0/0\\n\", \"Wrong answer in standard input\"\nassert solution(\"4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n\") == \"2\\n149.154.167.99\\n149.154.167.120/29\\n\", \"Wrong answer in standard input\"\nassert solution(\"5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n\") == \"2\\n195.0.0.0/8\\n127.0.0.4/30\\n\", \"Wrong answer in standard input\"\nassert solution(\"2\\n+127.0.0.1/32\\n-127.0.0.1\\n\") == \"-1\\n\", \"Wrong answer in standard input\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '195.0.0.0/8'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('6') == '-1'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0.0.0.0/0\"\nassert solution(\"4\") == \"0.0.0.0/0\"\nassert solution(\"5\") == \"195.0.0.0/8\"\nassert solution(\"2\") == \"195.0.0.0/8\"\nassert solution(\"3\") == \"-1\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == '1'\nassert solution(test_input_2) == '2'\nassert solution(test_input_3) == '2'\nassert solution(test_input_4) == '1'\nassert solution(test_input_5) == '2'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == 1\n\nfor i in range(int(stdin.readline())):\n    s = list(stdin.readline().strip())\n    if solution(s) == 1:\n        print(1)\n    else:\n        print(0)"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(samples.SINGLE_STRING) == \"0\"\nassert solution(samples.SINGLE_STRING_2) == \"1\"\nassert solution(samples.STRING_SPLIT) == \"2\"\nassert solution(samples.NO_CARD) == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(11) == \"1\"\nassert solution(22) == \"2\"\nassert solution(11) == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == '1', \"1st example\"\nassert solution('22') == '2', \"2nd example\"\nassert solution('11') == '0', \"3rd example\"\n\"\"\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n11\n00000000008\n''') == '1'\nassert solution('''\n22\n0011223344556677889988\n''') == '2'\nassert solution('''\n11\n31415926535\n''') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(11) == \"1\"\nassert solution(22) == \"2\"\nassert solution(11) == \"0\"\nassert solution(31415926535) == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11\") == '1'\nassert solution(\"22\") == '2'\nassert solution(\"11\") == '0'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == '1'\nassert solution('22') == '2'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n\nOutput\n4\nrow 1\nrow 1\ncol 4\nrow 3''') == 'row 1\\nrow 1\\ncol 4\\nrow 3'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n\nOutput\n3\nrow 1\nrow 2\nrow 3''') == 'row 1\\nrow 2\\nrow 3'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5\\n2 2 2 3 2') == '4'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 3\n0 0 0\n0 1 0\n0 0 0\n\"\"\") == \"4\"\nassert solution(\"\"\"3 3\n0 0 0\n0 1 0\n0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"3 3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3 3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"3 3\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n\n''') == '4'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n\n''') == '3'\n\nassert solution('''3 3\n0 0 0\n0 1 0\n0 0 0\n\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5') == '4'\nassert solution('3 3') == '3'\nassert solution('1 1 1') == '1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\n\nassert solution('''3 3\n0 0 0\n0 1 0\n0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4\\nrow 1\\nrow 1\\ncol 4\\nrow 3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '3\\nrow 1\\nrow 2\\nrow 3'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\nassert solution() == '3'\nassert solution() == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '4'\nassert solution('3 3') == '3'\nassert solution('3 5') == '-1'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\"\nassert solution(\"1 2 1 3\") == \"NO\"\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(input)\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\"\nassert solution(\"16 2 5 6\") == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"YES\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 6 4 5') == 'YES', solution('8 6 4 5')\nassert solution('10 3 11 4') == 'NO', solution('10 3 11 4')\nassert solution('4 2 1 4') == 'YES', solution('4 2 1 4')"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 6 4 5\n''') == 'YES'\nassert solution('''\n10 3 11 4\n''') == 'NO'\nassert solution('''\n4 2 1 4\n''') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 6 4 5''') == 'YES'\nassert solution('''8 6 4 6''') == 'NO'\nassert solution('''10 3 11 4''') == 'YES'\nassert solution('''4 2 1 4''') == 'YES'"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'YES'\n\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"10 3 11 4\") == \"NO\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"8 6 4 5\"\n) == \"YES\"\n\nassert solution(\n    \"8 6 4 6\"\n) == \"NO\"\n\nassert solution(\n    \"10 3 11 4\"\n) == \"YES\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '6'\nassert solution('7 8') == '12'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\"\nassert solution(\"2 2\") == \"-1\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 2\n1 3\n1 4\n\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\n\"\"\") == \"12\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\\n\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\\n\") == \"12\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\\n\") == \"12\"\n\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\nassert solution('5 5') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3\\n1 4\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\\n\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n1 3\n1 4\n''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n''') == '12'\nassert solution('''2 2\n1 2\n2 1\n''') == '-1'"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == 'NO'\nassert solution('3 2') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n\n''') == \"YES\", \"First example\"\nassert solution('''3 2\n1 0\n1 1\n0 1\n\n''') == \"NO\", \"Second example\"\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'NO'\n\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'YES'\n\nassert solution('''4 3\n0 0 1\n1 0 1\n0 0 1\n0 0 1\n0 0 1\n''') == 'YES'\n\nassert solution('''10 3\n1 0 1\n1 1 0\n0 0 1\n1 0 0\n1 0 0\n1 0 0\n0 0 1\n0 0 1\n1 0 0\n1 0 0\n0 0 1\n1 0 0\n0 0 1\n1 0 0\n0 0 1\n1 0 0\n1 0 0\n0 0 1\n0 0 1\n1 0 0\n1 0 0\n''') == 'NO'\n\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'YES'"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'NO'\nassert solution('''\n3 2\n1 0\n1 1\n0 1\n''') == 'YES'\nassert solution('''\n5 4\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'YES'\n''') == 'YES'\nassert solution('''\n5 1\n1 0\n''') == 'NO'\nassert solution('''\n2 2\n1 0 1\n0 1\n''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 0\n1 1\n0 1\n''') == 'NO'\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n\n''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'YES'\nassert solution('''3 2\n1 0\n1 1\n0 1\n\nOutput\nYES\n''') == 'YES'\nassert solution('''5 2\n1 0\n1 1\n1 0\n1 0\n1 0\n\nOutput\nNO''') == 'NO'\nassert solution('''5 1\n1 0\n\nOutput\nYES\n''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\n1 0\n1 1\n0 1\n''') == \"YES\"\n\nassert solution('''3 2\n1 1\n1 0\n1 0\n''') == \"NO\"\n'''"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"YES\"\nassert solution_two() == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0\\n\") == \"NO\"\nassert solution(\"3 2\\n1 0\\n1 1\\n0 1\\n\") == \"YES\"\n\n'''\nfrom collections import Counter"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5') == \"Yes\"\nassert solution('2 7') == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5\n2 3 5 12\n''') == 'Yes'\nassert solution('''\n2 7\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 7\\n1 2\") == \"No\"\nassert solution(\"2 5\\n3 3\") == \"Yes\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 5\\n2 3\\n') == 'Yes'\nassert solution('2 7\\n2 3') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Yes\"\nassert solution(\"2 7\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'Yes'\nassert solution('2 7') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Yes\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 3 5 12\\n') == 'Yes'\nassert solution('2 7\\n2 3\\n') == 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5\n2 3 5 12\n''') == 'Yes'\nassert solution('''2 7\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n\nstdin = '6 4 2'\nstdin = '3 4 1'\nstdin = '2 3 4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n\n\n'''\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4 1''') == '6'\nassert solution('''6 4 2''') == '8'\nassert solution('''2 3 4''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 1\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4 1\n5 4 2\n5 4 3''') == '6'\nassert solution('''6 4 2\n6 4 3\n6 4 4''') == '8'\nassert solution('''2 3 4\n2 3 3\n2 3 4''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4 1\n1\n2\n3''') == '6'\nassert solution('''6 4 2\n3\n2\n4\n4\n5\n6''') == '8'\nassert solution('''2 3 4\n2\n2\n2''') == '-1'\nassert solution('''3 3 2\n1\n2\n2\n3\n4\n5''') == '6'\nassert solution('''5 4 2\n1\n4\n3\n2\n2\n''') == '8'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '2'\nassert solution('2 2 2') == '-1'\nassert solution('5 5 5') == '1'\nassert solution('6 6 6') == '1'\nassert solution('1000000000 100000000 100000000000 1000000000') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3'\nassert solution('2 2 3') == '-1'\nassert solution('4 2 3') == '-1'\nassert solution('-1 2 3') == '-1'\nassert solution('6 4 2') == '8'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"6\"\nassert solution(input) == \"8\"\nassert solution(input) == \"-1\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('3\\n4 1 1') == '0'\nassert solution('10\\n0 0 1 1 1 1 1 1 1 1 1') == '-1'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution(stdin='''\n4\n1 1 1 1\n''') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 2 4 3') == '2'\nassert solution('3 2 2 4 3') == '-1'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"3\\n4 1 1\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 2 4 3\n''') == '2'\n\nassert solution('''\n3\n4 1 1\n''') == '0'\n\nassert solution('''\n4\n0 3 0 4\n''') == '0'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 2 4 3\") == \"2\"\nassert solution(\"4 1 1\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('4\\n1 1 1') == '-1'\nassert solution('4\\n0 3 0 4') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n2 2\n4 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n0 3 0 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n1 2 2 4 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '-1'\nassert solution('3') == '2'\nassert solution('4') == '0'\nassert solution('5') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 1\\n') == '1'\nassert solution('5\\n1 2 2 4 3') == '2'\nassert solution('3\\n4 1 1') == '-1'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '2'\nassert solution('101') == '3'\nassert solution('1') == '1'\nassert solution('0') == '1'\nassert solution('10011011') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == 5"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n01''') == 2\nassert solution('''8\n10000011''') == 5\nassert solution('''2\n00''') == 1\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8\n10000011''') == '5'\nassert solution('''2\n01''') == '2'\nassert solution('''4\n110100''') == '3'\nassert solution('''12\n111110110010011''') == '5'\nprint('all test cases passed')"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('0') == '0'"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '2'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10000011') == '5'\nassert solution('01') == '2'"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 4\") == \"3\"\nassert solution(\"4 4 4 4\") == \"1\"\nassert solution(\"2 1 4 3\") == \"1\"\nprint(\"Aufgabe beendet\")\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_str) == \"3\""
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 1 4\\n') == '3'\nassert solution('4\\n4 4 4 4\\n') == '-1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 3 1 4\n''') == '3'\nassert solution('''5\n4 4 4 4\n''') == '-1'\nassert solution('''5\n2 1 4 3\n''') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 1 4\\n\") == \"3\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n2 3 1 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n4 4 4 4\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n2 3 4 1 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n4 3 2 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n10\n5 3 1 2 3 5 3 2 2 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '3'\nassert solution('4') == '-1'\nassert solution('4') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 1 4\\n\") == \"3\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\nassert solution('7') == '0'\nassert solution('2') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n\n1 3 2 0\n\n''') == '2'\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n''') == '0'\nassert solution('''\n2\n\n2 2\n\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n\n''') == '2'\n\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n''') == '0'\n\nassert solution('''\n2\n\n2 2\n\n''') == '1'\n\nassert solution('''\n5\n\n1 3 3 2 1 2 3\n\n''') == '3'\n\nassert solution('''\n6\n\n1 3 3 2 1 2 3\n\n''') == '0'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n\n''') == '2'\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n''') == '0'\nassert solution('''\n2\n\n2 2\n\n''') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_1) == '2'\nassert solution(input_2) == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('4') == '2'\nassert solution('7') == '0'\nassert solution('2') == '1'\n\n'''"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 3 2 0\n''') == '2'\nassert solution('''\n7\n1 3 3 2 1 2 3\n''') == '1'\nassert solution('''\n2\n2 2\n''') == '0'\n\nprint(solution(input))\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([9]) == 504\nassert solution([7]) == 210\n\n\"\"\"\n\nfrom typing import List\nimport math\n\nn = int(input())"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('5') == '210'\nassert solution('3') == '210'\nassert solution('2') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n'''\n\nn = int(input())\nmax_num = -1"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('10') == '102'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\nassert solution('20') == '100'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n0 0 1 1\\n1 1 2 2\\n3 0 4 1') == '1 1'\nassert solution('3\\n0 0 1 1\\n0 1 1 2\\n1 0 2 1\\n') == '1 1'\nassert solution('4\\n0 0 5 5\\n0 0 4 4\\n1 1 4 4\\n1 1 4 4\\n') == '1 1'\nassert solution('5\\n0 0 10 8\\n1 2 6 7\\n2 3 5 6\\n3 4 4 5\\n8 1 9 2\\n') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '1 1'\nassert solution('5') == '3 4'\nprint(solution(input()))\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1', \"First\"\nassert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1', \"Second\"\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1', \"Third\"\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4', \"Fourth\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 1\"\nassert solution(stdin=\"3\") == \"1 1\"\nassert solution(stdin=\"3\") == \"1 1\"\nassert solution(stdin=\"4\") == \"1 1\"\nassert solution(stdin=\"5\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '1 1'\nassert solution('5') == '3 4'\n\n\n\"\"\""
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == \"1 1\"\nassert solution('''\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n''') == \"1 1\"\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == \"1 1\"\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == \"3 4\"\nassert solution('''\n10\n
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''\n2\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n''') == '1 1'\n\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\n\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1 1'\nassert solution() == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) in {'1 1', '1 1'}\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"3\") == \"1 1\"\nassert solution(\"5\") == \"3 4\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n5 972 3 4 1 4 970 971') == 'YES'\nassert solution('4\\n18 55 16 17') == 'YES'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'NO'\nassert solution('6\\n40 41 43 44 44 44') == 'NO'\nassert solution('10\\n1234 456 789') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n18 55 16 17\n''') == 'YES'\n\nassert solution('''6\n40 41 43 44 44 44\n''') == 'NO'\n\nassert solution('''8\n5 972 3 4 1 4 970 971\n''') == 'YES'\n\n\n\n'''\n\n##same as solution 2\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n18 55 16 17') == 'YES'\nassert solution('6\\n40 41 43 44 44 44') == 'YES'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'NO'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == 'YES'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'NO'\nassert solution('4') == 'YES'\nassert solution('8') == 'YES'\nassert solution('9') == 'YES'\nassert solution('10') == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"YES\", \"First\"\nassert solution(\"6\") == \"NO\", \"Second\"\nassert solution(\"8\") == \"YES\", \"Third\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n18 55 16 17') == 'YES'\nassert solution('6\\n40 41 43 44 44 44') == 'YES'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n18 55 16 17\n\n4\n40 41 43 44 44 4 4 470 971''') == 'YES'\nassert solution('''8\n5 972 3 4 1 4 970 971\n\n6\n40 41 43 44 44 4 4 710 972''') == 'YES'\nassert solution('''10\n4 7 4 7 8 5 1 7 7 5\n\n6\n7 4 7 8 5 1 7 7 5''') == 'NO'\nassert solution('''4\n4 4 4 4''') == 'NO'\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n5\\n18 55 16 17\\n\") == \"YES\"\nassert solution(\"2\\n4\\n40 41 43 44 44 44\\n\") == \"NO\"\nassert solution(\"3\\n6\\n5 972 3 4 1 4 970 971\\n\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n18 55 16 17\n''') == 'YES'\n\nassert solution('''8\n5 972 3 4 1 4 970 971\n''') == 'YES'\n\nassert solution('''6\n40 41 43 44 44 44\n''') == 'NO'"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5') == '10'\nassert solution('5 5\\n1 2 3 4 5\\n1 2 3 4 5 7 8 9 11 12 13') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5''') == '10'\nassert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n\n''') == '9'"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 1\n3 4\n3 3\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n2 2\n1 2 3\n1 3 4\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n\nOutput\n10\n''') == '10'"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"9\"\nassert solution(input_) == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"9\"\nassert solution(\"\"\"\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 9\") == \"9\"\nassert solution(\"5 5\") == \"10\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10\"\nassert solution() == \"9\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n\nprint(solution(input()))\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n') == 'Vasya'\nassert solution('2\\n') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == \"Vasya\"\nassert solution('2') == \"Petya\"\nassert solution('8') == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\"\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 3') == '0'\nassert solution('4 3 6') == '1'\nassert solution('1 5 3') == '2'\nprint('You passed all tests!')"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 3\\n1 2\\n2 2') == '0'\nassert solution('1 5 3\\n1 3\\n1 1\\n1 5') == '2'\nassert solution('4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 6\n1 2\n2 2\n2 1\n''') == '2'\nassert solution('''\n4 3 6\n1 2\n2 2\n3 1\n3 3\n''') == '1'\nassert solution('''\n5 3 6\n1 2\n2 2\n3 1\n3 3\n3 4\n''') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 3') == '2'\nassert solution('1 3 2') == '1'\nassert solution('4 3 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == 2\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\nA\nB\nB\nA''') == '2'\nassert solution('''1\nA''') == '1'\nassert solution('''8\nA\nA\nB\nA\nB\nA\nA\nA''') == '0'\nassert solution('''5\nB\nB\nA\nA\nB''') == '2'\nassert solution('''6\nB\nB\nA\nB\nB\nA\nB''') == '0'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\nA\\nB\\nB\\nA') == 2\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nAB\\nBA\\nAB\\n') == 2\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"4\\nAA\\nBB\\nAB\\nAA\"\n) == \"2\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '3'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\nA\\nB\\nB\\nA\") == \"2\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4\\n') == '2'\nassert solution('5 2 3 4 6 7\\n') == '3'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n2 3 4') == '2'\nassert solution('5\\n2 3 4 6 7') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\nassert solution('10\\n2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\\n') == '19'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 4\\n') == '2'\nassert solution('5\\n2 3 4 6 7\\n') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nprint(solution(input()))"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2 3 4') == '2'\nassert solution('3\\n2 3 4 6') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n2 3 4\n''') == '2'\nassert solution('''5\n2 3 4 6 7\n''') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 4\\n\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\\n\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\nABAAC\\n\") == \"11\"\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"5\"\nassert solution(\"10\") == \"1\"\nassert solution(\"13\") == \"1\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nABCD\") == \"11\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\nAAAABCD') == '11'\nassert solution('5\\nAAAAABBBB') == '12'\nassert solution('10\\nAAAAAAAAAABAABBBAAABBB') == '27'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('4\\nAAABC') == '12'"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 11\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('6\\nABAABA') == '12'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nABAAC\\n\") == \"11\"\nassert solution(\"5\\nABCABC\\n\") == \"12\"\nassert solution(\"10\\nAAABBBCCDDEEFFF\\n\") == \"19\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\nABC\") == \"2\"\nassert solution(\"4\\nABCD\") == \"4\"\nassert solution(\"5\\nABCDE\") == \"5\"\nassert solution(\"6\\nABCDEF\") == \"5\"\nassert solution(\"7\\nABCDEFG\") == \"6\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1023\") == \"1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\nassert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\nassert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('1 2') == '-1'\nassert solution('1 1') == '2'\nassert solution('0 1') == '2'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1023\") == \"-1\"\n\"\"\"\n\nn = int(input())\n\nh1, a1 = map(int, input().split())\nh2, a2 = map(int, input().split())\n\nm = n\na1 = a1 % m\na2 = a2 % m\n\nwhile True:\n    if h1 == 0 and a1 == 0:\n        return \"0\"\n    if h2 == 0 and a2 == 0:\n        return \"0\"\n\n    h1 = (h1 + 1) % m\n    a1 = (a1 + a1) % m\n\n    h2 = (h2 + 1) % m\n    a2 = (a2 + a2) % m\n\n    if h1 == a1 and h2 == a2:\n        return str(h1) + \" \" + str(a1)\n\n    elif h1 == a1:\n        h1 = (h1 + 1) % m\n        a1 = (a1 + a1) % m\n    elif h2 == a2:\n        h2 = (h2 + 1) % m\n        a2 = (a2 + a2) % m\n    else:\n        h1 = (h1 + 1) % m\n        a1 = (a1 + a1) % m\n        h2 = (h2 + 1) % m\n        a2 = (a2 + a2) % m\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\", \"Your solution is too short\"\nassert solution(\"1 2\") == \"3\", \"First\"\nassert solution(\"1 0\") == \"2\", \"Second\"\nassert solution(\"2 3\") == \"1\", \"Third\"\nassert solution(\"1 1\") == \"2\", \"Fouth\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '3'\nassert solution('1023') == '-1'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 2\\n1 1\\n0 1\\n2 3\\n\") == \"3\"\nassert solution(\"1023\\n1 2\\n1 0\\n1 2\\n1 1\\n\") == \"-1\"\n\n--------------------------------------------------------------------------------------------------------------------------------------\n\n3.6 Write a program to determine the minimum and maximum values of a given integer.\nInput:\n\nOutput:\n\nThe minimum and maximum values for a given integer are stored in variables m_min and m_max.\n\nSample Input 1:\n\n1\n\nSample Output 1:\n\nThe minimum value of given integer is 1 and maximum value is 1\nSample Input 2:\n\n7\n\nSample Output 2:\n\nThe minimum value of given integer is 1 and maximum value is 7\n\n----------------------------------------------------------------------------------------------------------------------------------------\n\n1. Read a number from the console (integer).\n2. Print the maximum and minimum values of the number.\n3. Read a number from the console (integer).\n4. Print the maximum and minimum values of the number.\n5. Read a number from the console (integer).\n6. Print the maximum and minimum values of the number.\n7. Read a number from the console (integer).\n8. Print the maximum and minimum values of the number.\n9. Read a number from the console (integer).\n10. Print the maximum and minimum values of the number.\n11. Read a number from the console (integer).\n12. Print the maximum and minimum values of the number.\n13. Read a number from the console (integer).\n14. Print the maximum and minimum values of the number.\n15. Read a number from the console (integer).\n16. Print the maximum and minimum values of the number.\n17. Read a number from the console (integer).\n18. Print the maximum and minimum values of the number.\n19. Read a number from the console (integer).\n20. Print the maximum and minimum values of the number.\n21. Read a number from the console (integer).\n22. Print the maximum and minimum values of the number.\n23. Read a number from the console (integer).\n24. Print the maximum and minimum values of the number.\n25. Read a number from the console (integer).\n26. Print the maximum and minimum values of the number.\n27. Read a number from the console (integer).\n28. Print the maximum and minimum values of the number.\n29. Read a number from the console (integer).\n30. Print the maximum and minimum values of the number.\n31. Read a number from the console (integer).\n32. Print the maximum and minimum values of the number.\n33. Read a number from the console (integer).\n34. Print the maximum and minimum values of the number.\n35. Read a number from the console (integer).\n36. Print the maximum and minimum values of the number.\n37. Read a number from the console (integer).\n38. Print the maximum and minimum values of the number.\n39. Read a number from the console (integer).\n40. Print the maximum and minimum values of the number.\n41. Read a number from the console (integer).\n42. Print the maximum and minimum values of the number.\n43. Read a number from the console (integer).\n44. Print the maximum and minimum values of the number.\n45. Read a number from the console (integer).\n46. Print the maximum and minimum values of the number.\n47. Read a number from the console (integer).\n48. Print the maximum and minimum values of the number.\n49. Read a number from the console (integer).\n50. Print the maximum and minimum values of the number.\n51. Read a number from the console (integer).\n52. Print the maximum and minimum values of the number.\n53. Read a number from the console (integer).\n54. Print the maximum and minimum values of the number.\n55. Read a number from the console (integer).\n56. Print the maximum and minimum values of the number.\n57. Read a number from the console (integer).\n58. Print the maximum and minimum values of the number.\n59. Read a number from the console (integer).\n60. Print the maximum and minimum values of the number.\n61. Read a number from the console (integer).\n62. Print the maximum and minimum values of the number.\n63. Read a number from the console (integer).\n64. Print the maximum and minimum values of the number.\n65. Read a number from the console (integer).\n66. Print the maximum and minimum values of the number.\n67. Read a number from the console (integer).\n68. Print the maximum and minimum values of the number.\n69. Read a number from the console (integer).\n70. Print the maximum and minimum values of the number.\n71. Read a number from the console (integer).\n72. Print the maximum and minimum values of the number.\n73. Read a number from the console (integer).\n74. Print the maximum and minimum values of the number.\n75. Read a number from the console (integer).\n76. Print the maximum and minimum values of the number.\n77. Read a number from the console (integer).\n78. Print the maximum and minimum values of the number.\n79. Read a number from the console (integer).\n80. Print the maximum and minimum values of the number.\n81. Read a number from the console (integer).\n82. Print the maximum and minimum values of the number.\n83. Read a number from the console (integer).\n84. Print the maximum and minimum values of the number.\n85. Read a number from the console (integer).\n86. Print the maximum and minimum values of the number.\n87. Read a number from the console (integer).\n88. Print the maximum and minimum values of the number.\n89. Read a number from the console (integer).\n90. Print the maximum and minimum values of the number.\n91. Read a number from the console (integer).\n92. Print the maximum and minimum values of the number.\n93. Read a number from the console (integer).\n94. Print the maximum and minimum values of the number.\n95. Read a number from the console (integer).\n96. Print the maximum and minimum values of the number.\n97. Read a number from the console (integer).\n98. Print the maximum and minimum values of the number.\n99. Read a number from the console (integer).\n100. Print the maximum and minimum values of the number.\n101. Read a number from the console (integer).\n102. Print the maximum and minimum values of the number.\n103."
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(5) == \"3\"\n\nassert solution(1023) == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n4 2\n1 1\n0 1\n2 3\n''') == '3'\n\nassert solution('''\n1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"8\") == \"5\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4 5\") == \"2\"\nassert solution(\"3\\n3 2 3 2\") == \"1\"\nassert solution(\"3\\n3 4 3 4\") == \"2\"\nassert solution(\"3\\n3 5 3 5\") == \"0\"\nassert solution(\"3\\n1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('4 5') == '1'\nassert solution('2 3') == '2'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n4\n2\n1''') == \"2\"\nassert solution('''3\n5\n4\n2\n1''') == \"2\""
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == 'YES'\nassert solution(input_2) == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\nassert solution('2 2 2 3') == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 2 1\n''') == 'YES'\n\nassert solution('''\n1 2 3 4\n''') == 'NO'\n\nassert solution('''\n2 2 2 3\n''') == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2 1') == 'YES'\nassert solution('2 2 2 3') == 'NO'\nassert solution('1 2 3 4') == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2 2 1''') == 'YES'\nassert solution('''1 2 3 4''') == 'NO'\nassert solution('''2 2 2 3''') == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == 'YES'\nassert solution(input) == 'NO'\n'''"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == 'YES'\nassert solution('''2 4\n1 3 2 4\n1 3 4 2\n''') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == 'YES'\nprint(solution(__import__(\"sys\").stdin.read()))\n\n\"\"\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4\\n1 3 2 4\\n1 3 4 2') == \"YES\"\nassert solution('4 4\\n1 2 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n') == \"NO\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2\n3 4 1 2''') == 'NO'\n\nassert solution('''4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'YES'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2''') == 'YES'\n\nassert solution('''3 4\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5''') == 'NO'"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"YES\\n\"\n\"\"\"\nimport sys\n\nn, m = list(map(int, input().split()))\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '0'\nassert solution('1 1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 1 1\"\n) == \"0\"\n\nassert solution(\n    \"1 2 1\"\n) == \"666666672\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 2 1\n\"\"\") == \"666666672\"\n\nassert solution(\"\"\"\n1 2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 1 1\n\"\"\") == \"0\""
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1 1\n1 2 1''') == '0.66666667'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1 1\n''') == '0'\nassert solution('''1 2 1\n''') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\nprint('You are a genial boy! All tests are done!')\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1\n''') == '0', \"Easy\"\nassert solution('''\n1 2 1\n''') == '666666672', \"Average\"\nassert solution('''\n1 3 1\n''') == '333333333', \"Hard\"\nassert solution('''\n2 4 1\n''') == '0', \"Easy\"\nassert solution('''\n2 2 1\n''') == '0', \"Easy\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n7 2 3 1 5 6') == '5'\nassert solution('8\\n1 2 1 1 2 1 1') == '3'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n7 2 3 1 5 6\n''') == '5'\nprint(solution('''6\n7 2 3 1 5 6\n'''))"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n7 2 3 1 5 6''') == '5'\nassert solution('''3\n4 5 6''') == '4'\nassert solution('''3\n4 5 6''') == '4'\nassert solution('''2\n2 4''') == '2'\nassert solution('''8\n12 18 16 15 12''') == '8'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6\n7 2 3 1 5 6''') == '5'\nassert solution('''10\n7 2 3 1 5 6''') == '8'\nassert solution('''100\n7 2 3 1 5 6''') == '9'\nassert solution('''1000\n7 2 3 1 5 6''') == '10'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('6') == '3'\nassert solution('7') == '5'\nassert solution('8') == '3'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n7 2 3 1 5 6\n''') == '5'"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([6, 7, 2, 3, 1, 5, 6]) == 5\nassert solution([1, 5, 4, 3, 2]) == 3\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '5'\nassert solution('7 2 3 1 5 6') == '5'\nassert solution('8') == '1'\nassert solution('9') == '1'\nassert solution('0') == '1'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '5'\nassert solution('3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\nassert solution('5 5 5 5') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 8\") == 2\nassert solution(\"4 2 2 6\") == 3\nassert solution(\"3 7 4 6\") == 1\n\n'''\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 1 8\n''') == '2'\nassert solution('''\n4 2 2 6\n''') == '3'\nassert solution('''\n3 7 4 6\n''') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1 1 1 8\"\"\") == \"2\"\nassert solution(\"\"\"4 2 2 6\"\"\") == \"3\"\nassert solution(\"\"\"3 7 4 6\"\"\") == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 5\n''') == '2'\nassert solution('''\n-1 4 15\n''') == '4'\nassert solution('''\n0 -1 5\n''') == '-1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2 5''') == '2'\nassert solution('''-1 4 15''') == '4'\nassert solution('''0 -1 5''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\nprint('Tests passed')\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\"\nassert solution(\"0 -1 5\") == \"4\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"-1 -1 5\") == \"-1\"\n\n\n'''\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n2 1 2 3 4 3\") == \"2\"\nassert solution(\"6 2\\n1 1 2 2 3 3\") == \"0\"\nassert solution(\"6 1\\n1 1 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n3\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n4\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6\n2 1 2 3 4 3\n''') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n'''\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1') == '2'\nassert solution('6 2') == '0'\nassert solution('6 1') == '2'\nassert solution('6 3') == '2'\nassert solution('6 5') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"6 1\") == \"0\"\nassert solution(\"2 1 2 3 4 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '2'\nassert solution('6 2') == '0'\nassert solution('6 1') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution(\"2 1 2 3 4 3\") == \"0\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"6 2\") == \"0\"\n\n\"\"\"\nfrom collections import Counter\nimport math\n\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\n\nfreq = {}\nfor i in A:\n    freq[i] = freq.get(i, 0) + 1\n\ncnt = 0\nfor i in freq:\n    if freq[i] == 2:\n        cnt += 1\n    else:\n        cnt += math.ceil(math.log2(freq[i]))\n\nprint(cnt)\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '2'\nassert solution('6 2') == '0'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('monday\\n') == 'NO'\nassert solution('sunday\\ntuesday\\n') == 'YES'\nassert solution('saturday\\ntuesday\\n') == 'YES'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"monday\") == \"YES\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"wednesday\") == \"NO\"\nassert solution(\"thursday\") == \"NO\"\nassert solution(\"friday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"monday\\ntuesday\") == 'YES'\nassert solution(\"sunday\\nsunday\") == 'YES'\nassert solution(\"saturday\\ntuesday\") == 'NO'\nassert solution(\"tuesday\\nwednesday\") == 'NO'\n\n\"\"\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('monday\\ntuesday') == 'NO'\nassert solution('saturday\\ntuesday') == 'YES'\nassert solution('sunday\\ntuesday') == 'YES'\nassert solution('saturday\\nsaturday') == 'NO'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''monday\ntuesday''') == 'NO'\nassert solution('''saturday\nsunday''') == 'YES'\nassert solution('''saturday\ntuesday''') == 'YES'"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"YES\"\nassert solution(\"sunday\\ntuesday\\n\") == \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"monday\\ntuesday\") == \"NO\"\nassert solution(\"saturday\\ntuesday\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('monday\\ntuesday') == 'NO'\nassert solution('saturday\\ntuesday') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"NO\""
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"saturday\") == \"YES\"\nassert solution(\"sunday\") == \"YES\"\nassert solution(\"friday\") == \"YES\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '9'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('123') == '6'\nassert solution('12345') == '15'\nassert solution('3') == '0'\nassert solution('345') == '15'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"100\") == \"0\"\nassert solution(\"123\") == \"6\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10000000000\") == \"17\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5000000001\n4999999999''') == '91'\nassert solution('''35''') == '17'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('123') == '6'\nassert solution('12345') == '5'\nassert solution('12345678') == '10'\nassert solution('1234567890') == '10'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\nassert solution(\"-5000000001\") == \"91\"\nassert solution(\"-4999999999\") == \"91\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AHA\") == 'YES'\nassert solution(\"Z\") == 'NO'\nassert solution(\"XO\") == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('Z') == 'NO'\nassert solution('AHA') == 'YES'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint(solution(input()))"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == 'YES'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\"3\", \"1 2 5\"]) == \"1\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 5\n\n''') == '0'\nassert solution('''3\n1 2 5\n\n''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '0'\nassert solution('3 1 2') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    2\n    1 5\n    ''') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 5\n''') == '0'\nassert solution('''3\n1 2 5\n''') == '1'\nassert solution('''4\n1 2 3 5\n''') == '1'\nassert solution('''5\n1 2 3 5\n''') == '2'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '0'\nassert solution('3 1 2') == '1'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('-1 1000000000') == 'Yes'\nassert solution('0 0') == 'Yes'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\nRU') == 'Yes'\nassert solution('1 2\\nRU') == 'No'\nassert solution('-1 1000000000\\nLRRLU') == 'Yes'\nassert solution('0 0\\nD') == 'Yes'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\nassert solution(\"0 0\\nD\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2\\nRU') == 'Yes', solution('2 2\\nRU')\nassert solution('1 2\\nRU') == 'No', solution('1 2\\nRU')\nassert solution('-1 1000000000\\nLRRLU') == 'Yes', solution('-1 1000000000\\nLRRLU')"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == 'Yes', solution('2 2')\nassert solution('1 2') == 'No', solution('1 2')\nassert solution('-1 1000000000') == 'Yes', solution('-1 1000000000')\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('-1 1000000000') == 'Yes'\nassert solution('0 0') == 'Yes'\n\nassert solution('R') == 'Yes'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 3 7') == '1', 'Wrong!'\nassert solution('10   3   7') == '1', 'Wrong!'\nassert solution('314') == '0', 'Wrong!'\nassert solution('22 19 3') == '1', 'Wrong!'\nassert solution('60') == '1', 'Wrong!'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"1 2\"\nassert solution(\"3 1 2 3\") == \"1 2\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"10 3 7\") == \"1\"\n\nstdin = \"\"\"\n3 3 7\n3 3\n3 1\n\"\"\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('   60') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nprint('Yay! You solved it!')\n\"\"\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''314\n159 265\n358''') == '0'\nassert solution('''10 3 7\n5 8 9''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\n\"\"\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 3 7') == '1', \"Sample Test Case 1 Failed\"\nassert solution('10   3   7') == '1', \"Sample Test Case 2 Failed\"\nassert solution('314') == '0', \"Sample Test Case 3 Failed\"\nassert solution('22 19 3') == '1', \"Sample Test Case 4 Failed\"\nassert solution('60') == '1', \"Sample Test Case 5 Failed\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == \"1 1\"\nassert solution(\"3 3 3\") == \"1 1\"\nassert solution(\"3 3 5\") == \"1 1\"\nassert solution(\"3 5 5\") == \"1 1\"\nassert solution(\"15 6 6\") == \"1 1\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '1'\nprint('PASSED')\n\nSample Input 6:\n\n10\n3\n7\nSample Output 6:\n0\n\"\"\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\nassert solution('''\n10   3   7\n''') == '1'\nassert solution('''\n314\n''') == '0'\nassert solution('''\n22 19 3\n''') == '1'\nassert solution('''\n\n   60\n  \n  \n      31\n          \n          \n          \n          \nSample Output 5:\n1\n''') == '1'\n\n'''\n\nInput:\n\nTest."
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n') == '9'\nassert solution('100000\\n') == '45'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '18'\nassert solution('99') == '120'\nassert solution('199') == '300'\nassert solution('990') == '999'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"7\"\nassert solution(\"5\") == \"6\"\nassert solution(\"10\") == \"5\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '7'\nassert solution('3') == '9'\nassert solution('4') == '8'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '9'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"10\") == \"30\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '9'\nassert solution('123456789') == '15'\n\"\"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n''') == '9'\nassert solution('''\n1\n''') == '0'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '9'\nassert solution('10') == '37'\nassert solution('1') == '0'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n5 12 9 16 48\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4\n3 6 28 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n1 2 4 8\n\"\"\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('10\\n2 1 8 12 8 0') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 6\\n28 9\") == \"4\"\nassert solution(\"4\\n1 2 4 8\") == \"3\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\nassert solution(\"4\\n1 2 4 8\") == \"-1\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6 28 9') == '4'\nassert solution('5 12 9 16 48') == '3'\nassert solution('4') == '-1'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(t1) == '4'\nassert solution(t2) == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n3 6 28 9\\n') == '4'\nassert solution('5\\n5 12 9 16 48\\n') == '3'\nassert solution('4\\n1 2 4 8\\n') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n3 6 28 9\\n') == '4'\nassert solution('5\\n5 12 9 16 48\\n') == '3'\nassert solution('4\\n1 2 4 8\\n') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '-1'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n3 6 28 9\n''') == '4'\n\nassert solution('''\n5\n5 12 9 16 48\n''') == '3'\n\nassert solution('''\n4\n1 2 4 8\n''') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n3 6 28 9') == '4'\nassert solution('5\\n5 12 9 16 48') == '3'\nassert solution('4\\n1 2 4 8') == '-1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 5 0 2 3\n''') == '2'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0 5 0 2 3\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\nassert solution('''3\n1 0 0\n''') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 0 1\") == \"1\"\nassert solution(\"4\\n0 1 0 2\") == \"2\"\nassert solution(\"5\\n0 0 0 0 0\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"7\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n0 0 2''') == '2'\nassert solution('''\n4\n0 5 1 4 2''') == '1'\nassert solution('''\n7\n0 0 0 5 0 0 2''') == '1'\nassert solution('''\n1\n0 1''') == '1'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n0 5 0 2 3\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n''') == '1'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5\\n0 5 0 2 3\\n') == '2'\n\nassert solution(\n    '7\\n1 0 0 5 0 0 2\\n') == '1 7 3 5 6 4 2'\n\"\"\""
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 5 0 2 3\n''') == '2'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 5 0 2 3\n''') == '2'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1'\nassert solution('''\n5\n1 4 0 2 3\n''') == '3'"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n0 5 0 2 3\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\nprint('All tests passed!')\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2\n''') == '5'\nassert solution('''7\n3\n''') == '5'\nassert solution('''9\n4\n''') == '5'\nassert solution('''15\n8\n''') == '5'\nassert solution('''19\n18\n''') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n3\n4\n2\n1''') == \"2\"\nassert solution('''6\n4\n3\n1\n2\n0''') == \"4\"\nassert solution('''11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1''') == \"5\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n''') == '2'\nassert solution('''5\n''') == '5'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '5'\nassert solution('4') == '5'\nassert solution('1') == '5'\n\nassert solution('5') == '5'\n\n---\n\nInput\n5\n\nOutput\n4\n\nInput\n3\n\nOutput\n2\n\nInput\n4\n\nOutput\n5\n\nInput\n5\n\nOutput\n2\n\nInput\n7\n\nOutput\n4\n\nInput\n5\n\nOutput\n4\n\nInput\n5\n\nOutput\n2\n\nInput\n5\n\nOutput\n2\n\nInput\n6\n\nOutput\n3\n\nInput\n5\n\nOutput\n4\n\nInput\n4\n\nOutput\n4\n\nInput\n2\n\nOutput\n1\n\nInput\n3\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n3\n\nOutput\n2\n\nInput\n1\n\nOutput\n1\n\nInput\n1\n\nOutput\n1\n\nInput\n1\n\nOutput\n1"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n''') == '5'\nassert solution('''6\n''') == '6'\nassert solution('''10\n''') == '10'\nassert solution('''12\n''') == '5'\nassert solution('''13\n''') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '5'\n\"\"\"\n\nfrom math import sqrt, ceil"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '5'\nassert solution('4\\n') == '2'\nassert solution('3\\n') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"5\"\n\n'''"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('5 2 2') == '23'\nassert solution('5 3 1') == '1 3 5'\nassert solution('4 2 2') == '31'\n\n'''\n\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == '28'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 2\\n1 3 4 5 2\\n5 3 2 1 4\\n') == '18\\n3 4 \\n1 5 \\n'\nassert solution('4 2 2\\n10 8 8 3\\n10 7 9 4\\n') == '31\\n1 2 \\n3 4 \\n'\n\n'''\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '18\\n1 2\\n3 4\\n'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"4 2 2\") == \"31\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"5 2 2\") == \"3 4\"\nassert solution(\"5 3 1\") == \"1 2 3 4\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('5 3 1') == '1 3 5'\nassert solution('4 2 2') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2 2\") == \"18\"\nassert solution(\"5 3 1\") == \"1 3 5\""
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'\nassert solution('5 3 1') == '1 3 5'\nassert solution('6 3 1 6 3') == '4'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('4 3') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n1 2\n\n''') == 'Yes'\n\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n\n''') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == 'Yes\\naa'\nassert solution(sys.stdin.read()) == 'No'\nassert solution(sys.stdin.read()) == 'Yes\\nba'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"Yes\", \"Should work\"\nassert solution(\"2 1\") == \"No\", \"Should not work\"\nassert solution(\"4 3\") == \"No\", \"Should not work\"\n\n\"\"\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nprint(solution(input()))"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 3\\n1 4\") == \"Yes\\naa\\n\"\nassert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"No\\n\"\nassert solution(\"5 2\\n1 2\\n1 3\\n1 4\\n1 5\") == \"Yes\\nab\\n\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 2\\n') == 'Yes\\naa\\n'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'No\\n'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('4 3') == 'No'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('1 0 1') == '7'\nassert solution('1 2 0') == '5'\nassert solution('3') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1\n1 0 1\n1 1 0\n3\n''') == '7'\nassert solution('''\n1 1 1\n1 0 1\n1 1 0\n3\n''') == '19'\nassert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '87'\nassert solution('''\n0 1 1\n1 0 100\n1 2 0\n3\n''') == '107'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n5\n''') == '119'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n5\n''') == '87'\nassert solution('''\n0 1 1\n1 0 1\n1 2 0\n5\n''') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution(\n'''0 2 2\n1 0 100\n1 2 0\n5\n''') == '87'\nassert solution(\n'''0 1 1\n1 0 1\n1 2 0\n3\n''') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''0 1 1\n1 0 1\n1 2 0\n3''') == '7'\nassert solution('''0 2 2\n1 0 100\n1 2 0\n5''') == '87'\nassert solution('''0\n1\n2\n3\n4\n5\n6''') == '34'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 1 1') == '1'\nassert solution('1 0 1') == '1'\nassert solution('3') == '2'\nassert solution('0 2 1') == '2'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"1 0 1\") == \"7\"\nassert solution(\"1 1 0\") == \"9\"\nassert solution(\"2 2 2\") == \"9\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 1 0\n3\n''') == '7'\nassert solution('''\n0 2 2\n1 0 100\n1 2 0\n5\n''') == '87'\n\nstdin = input()\nn = int(stdin.strip())\n\nt = []\nfor i in range(n):\n    t.append(list(map(int, stdin.split())))\n\nn = int(stdin.strip())\n\ndp = [[[0, 0, 0] for i in range(3)] for i in range(n+1)]"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''Bulbbasaur\n    ''') == '1'\nassert solution('''F\n    ''') == '0'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb\n    ''') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 1\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\""
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\nassert solution('bulbbasaur') == '1'\nassert solution('F') == '0'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Bulbbasaur') == \"1\"\nassert solution('F') == \"0\"\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == \"2\"\n\n\n'''"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('a') == '0'\nassert solution('F') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 2') == 'NO'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES', \"Wrong\"\nassert solution('2 1\\narc\\n') == 'NO', \"Wrong\"\nassert solution('2 3\\na\\nc') == 'NO', \"Wrong\"\nassert solution('1 1\\nabc\\n') == 'NO', \"Wrong\"\nassert solution('2 3\\nabc\\n') == 'NO', \"Wrong\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\n\n\"\"\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('1 2') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('2 3\\narc\\nrac') == 'NO'\n\"\"\"\n\nH, W = map(int, stdin.readline().split())\n\nH_matrix = []\n\nfor i in range(H):\n    row = list(stdin.readline().strip())\n    H_matrix.append(row)\n\nfor i in range(H):\n    for j in range(W):\n        if i + 1!= H or j + 1!= W:\n            if H_matrix[i][j]!= H_matrix[i+1][j+1]:\n                print(\"NO\")\n                exit()\n\nprint(\"YES\")\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\narc\\nrac\\n\") == \"YES\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"YES\", \"Test 1 failed\"\nassert solution(\"2 2\") == \"YES\", \"Test 2 failed\"\nassert solution(\"4 5\") == \"NO\", \"Test 3 failed\"\nassert solution(\"12 13\") == \"YES\", \"Test 4 failed\"\nassert solution(\"14 15\") == \"NO\", \"Test 5 failed\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2 3\narc\nrac\"\"\") == \"YES\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\narc\nrac\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n1 3\nabc\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"12 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 111') == '4'\nassert solution('10010') == '0'\nassert solution('1111') == '1'\nassert solution('10111') == '2'\nassert solution('01111') == '3'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"3 3\") == \"3\"\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n==============================================================================================================================\n==============================================================================================================================\n==============================================================================================================================\n\nWord Search\n===================\n\nThe classic problem of searching in a grid of letters is known as a word search.\n\nYour task is to write a program that finds the word positions in a grid of letters, given a word.\n\nFor example, if the word to find is \"CAKE\", and the letters are arranged as following:\n\n...C\n...A\n...K\n...E\n...\n...F\n...O\n...\n...R\n\nThe output should be:\n\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nAnd the word should be found in the cell whose upper-left coordinate is (0, 0).\n\nYou can assume that the word to find will not be empty, and will only contain lowercase latin letters.\n\n====================\nInput Format\n====================\nThe first line of input contains an integer N denoting the number of rows and columns in the grid.\nThe second line contains N space-separated strings, each string representing a row in the grid.\n\nThe next N lines contain a word to find.\n\n====================\nOutput Format\n====================\nReturn a list of lists of integers.\n\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nThe cell whose upper-left coordinate is (0, 0) should have the word in its center.\n\n====================\nConstraints\n====================\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\nSample Input\n3\nCake\nCAKE\nCK\n\nSample Output\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nConstraints\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\nSample Input\n4\ncak\ncak\ncake\nCK\n\nSample Output\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nConstraints\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\nSample Input\n4\ncake\ncak\ncak\nCK\n\nSample Output\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nConstraints\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\n(A 2-D array is simply a list of lists)\n\nSample Input\n4\nCake\nCAKE\nCK\nCK\n\nSample Output\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nConstraints\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\nSample Input\n4\nCak\nEk\nCaK\nCK\n\nSample Output\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nConstraints\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\n====================\nInput / Output Examples\n====================\nInput\n3\nCake\nCAKE\nCK\nCK\n\nOutput\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nInput\n4\ncake\ncak\ncak\nCK\n\nOutput\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\n====================\nConstraints\n====================\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\nSample Input\n4\nCake\nCAKE\nCK\nCK\n\nSample Output\n[[0, 0], [0, 1], [0, 2],\n[1, 0], [1, 1],\n[1, 2],\n[2, 0], [2, 1],\n[2, 2]]\n\nConstraints\n1 <= N <= 100\nEach word in the input will be a lowercase latin letter, and will be no more than 30 characters.\n\n====================\nThe keyword and input are fixed values for the grid.\n\nThe initial position for the word to be searched is at the center of the grid,\n and can be found by getting the row and column number of the center of the grid\n and then adding 1 to this.\n\nFor example, the starting cell of the word to be searched is the cell with row 0 and column 1.\n\nThis is a \"string-searching\" problem, so there is no need for a heuristic that uses a matrix or a hash table.\n\n====================\nSolution\n===================="
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 111') == '4'\nassert solution('2 101') == '2'\n\n------Approach 1 (most concise)------\n\nWe can use dynamic programming to solve the problem.\n\nWe can record the number of different integers that are not exceeding X at each index (i).\nLet the record for i = 0 be the number of integers not exceeding X if i = 0.\nLet the record for i = 1 be the number of integers not exceeding X if i = 1.\nThen, the records of the size n-1 can be obtained as follows:\nrecord[i] = record[i-1] + record[i-2].\n\nNotice that the only record for n = 1, 2, 3 and 4 is record[0] = N, where N is the size of the set of integers written on the board.\n\nTime complexity : O(N).\n\nSpace complexity : O(N).\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1') == '4'\nassert solution('3 1') == '2'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '4'\n'''\n\nimport math"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    3 111\n    1111\n    10111\n    10010\n    \"\"\") == \"4\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 111') == '4'\nassert solution('5 5') == '0'\nassert solution('6 2') == '2'\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 111\\n1111') == '4'\nassert solution('3 1\\n11') == '3'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 111\") == \"4\"\nassert solution(\"2 111\") == \"2\"\nassert solution(\"4 111\") == \"1\"\nassert solution(\"1 111\") == \"0\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 111\\n1111\\n10111\\n10010\\n') == '4'\nprint(solution(input()))\n\n---\nclass Solution:\n    def solve(self, stdin):\n        N, X = map(int, stdin.split())\n        x = 0\n        n = 1\n        a = 0\n        for i in range(N):\n            x ^= a\n            a = (a << 1) | x\n            if a >= X:\n                a %= X\n                n += 1\n        return str(n)"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''11 11 5\n\nOutput\n1''') == '1'\n\nassert solution('''11 2 3\n\nOutput\n-1''') == '-1'"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 5\") == \"1\"\nassert solution(\"3 2 5\") == \"2\"\nassert solution(\"3 1 2\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 11 5\\n') == '1'\nassert solution('10 2 3\\n') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''11 11 5\n''') == '1'\nassert solution('''11 2 3\n''') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11 11 5\\n') == '1'\nassert solution('11 2 3\\n') == '-1'"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 11 5\") == 1, \"Test 1 failed\"\nassert solution(\"11 2 3\") == -1, \"Test 2 failed\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n\n------------------------------------\n\nList of identifiers and their replacements:\n1) a b b c a b a\n2) a b a c a b b a\n3) a b a c a b a b\n4) a b a c a b b\n5) a b a c a b\n6) a b a c\n7) a b a\n8) a b\n9) a\n10)\n\n------------------------------------"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''number string number character number string number''') == 'YES'\nassert solution('''jinotega''') == 'NO'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"YES\", \"First\"\nassert solution(\"jinotega\") == \"NO\", \"Second\"\n\"\"\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == 'YES'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n\n\n-----Task-----\n\nGiven a string, write a function that returns the index of the first occurrence of the character c, or -1 if c is not found in the given string.\n\nInput\n\"abacaba\"\n\nOutput\n3"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 20') == '20.0'\nassert solution('4 2 20') == '20.0'\n'''"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n'''\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"6.5\"\nassert solution(input()) == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2 20') == '20.0'\nassert solution('3 2 6') == '6.5'\n\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '6.5'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n..\n..\n\n''') == '1'\nassert solution('''4 4\n....\n.##.\n....\n\n''') == '2'\nassert solution('''3 4\n....\n.##.\n....\n\n''') == '1'\nassert solution('''3 3\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n..\\n..') == '2'\nassert solution('4 4\\n....\\n....') == '1'\nassert solution('3 4\\n....\\n....') == '2'"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '2'\n\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '1'\n\nassert solution('''\n3 3\n.###\n...#\n.##.\n\n''') == '3'\n\nassert solution('''\n3 2\n...#\n....\n.##.\n\n''') == '2'\n\nassert solution('''\n4 4\n....\n.##.\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_data) == '2'\nassert solution(input_data2) == '1'\nassert solution(input_data3) == '2'\nassert solution(input_data4) == '3'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '1'\nassert solution('''\n4 4\n....\n.##.\n....\n\n''') == '2'\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '1'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '2'\nassert solution('4 4') == '1'\n\"\"\"\n\nimport math\nimport re\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n..\n..\n\n''') == '1'\nassert solution('''4 4\n....\n.##.\n....\n\n''') == '1'\nassert solution('''3 4\n.##.\n.##.\n.##.\n\n''') == '0'\nassert solution('''3 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '2'\n\nassert solution('''\n4 4\n....\n.##.\n....\n\n''') == '1'\n\nassert solution('''\n3 4\n....\n.##.\n....\n\n''') == '2'\n\nassert solution('''\n100 100\n.#..#..#..\n###.###.###\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \"....\\n\"\n    \".##.\\n\"\n    \"....\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '1'\nassert solution('4 4') == '2'\nassert solution('5 5') == '3'\nassert solution('10 10') == '9'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"8\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '6'\nassert solution('12') == '6'"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 3\n''') == '6'\nprint(solution('''3\n1 1 3\n'''))\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 1 3\n''') == '6'\nassert solution('''4\n1 2 2\n''') == '12'\nassert solution('''5\n1 2 2\n''') == '12'\nassert solution('''6\n1 2 3 4 5\n''') == '42'\nassert solution('''7\n1 2 2\n''') == '12'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n''') == '3'\nassert solution('''2\n1 1 2\n''') == '2'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1 3') == '6'\nassert solution('2\\n1 1 3') == '0'\nassert solution('5\\n1 2 3 1 3') == '9'\nassert solution('4\\n1 2 2') == '0'\n\nimport sys\nimport os\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 3') == '6'\nassert solution('4\\n1 1 1 2 2') == '12'\n\n------------------\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"8\"\nassert solution(\"8\") == \"28\"\nassert solution(\"6\") == \"12\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 2 1\") == \"3\"\nassert solution(\"3\\n1 1 1\") == \"3\"\nassert solution(\"4\\n1 1 2 1\") == \"4\"\nassert solution(\"4\\n1 1 2 2\") == \"4\"\nassert solution(\"4\\n1 1 2 2\") == \"4\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 4 3 7 5\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n\n''') == '11'\nassert solution('''\n5\n1 4 3 7\n\n''') == '11'\nassert solution('''\n5\n1 1\n\n''') == '1'\nassert solution('''\n5\n1 1\n\n''') == '1'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"2\"\n\ninputs = open(\"input.txt\", \"r\").read().splitlines()\nprint(max(solution(inp) for inp in inputs))\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '11'\nassert solution('4') == '4'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n1 4 3 7 5''') == \"11\"\nassert solution('''4\n1 4 3 7 5''') == \"10\"\nassert solution('''5\n1 1 1 4 3 7 5''') == \"14\"\nassert solution('''6\n1 2 5 4 2 5''') == \"9\"\nassert solution('''6\n1 2 5 4 2 5''') == \"9\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '11'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 3 4 4') == '4'\nassert solution('1 2 3') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"3 4 5\") == \"3\"\nassert solution(\"3 4 5 6\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"3\") == \"4\"\nassert solution(\"7\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '11'\nassert solution('3') == '2'\nassert solution('15') == '18'\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\n1 4 3 7 5\n''') == \"11\"\nassert solution('''\n5\n1 4 3 7 5\n''') == \"4\"\nassert solution('''\n7\n5 4 2 6 3 7 1 8 9\n''') == \"6\"\n'''\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 1\n10.245''') == '10.25'\n\nassert solution('''6 2\n10.245''') == '10.3'\n\nassert solution('''3 100\n9.2''') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 100\") == \"9.2\"\nassert solution(\"6 1\") == \"10.25\"\nassert solution(\"6 2\") == \"10.3\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 1\n10.245''') == '10.25'\nassert solution('''3 2\n10.245''') == '10.3'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1.0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1.00\"\nassert solution(\"5\") == \"1.000\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"10.2\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"4 5\") == \"1.2\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 1\n10.245''') == '10.25'\nassert solution('''4 2\n10.245''') == '10.3'\nassert solution('''3 100\n9.2''') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10.245') == '10.25'\nassert solution('10.245') == '10.3'\nassert solution('9.2') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 1\n10.245\n\n''') == '10.25'\nassert solution('''6 2\n10.245\n\n''') == '10.3'\nassert solution('''3 100\n9.2\n\n''') == '9.3'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'\n\n'''"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3 4''') == '0110'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == \"Impossible\"\nassert solution('1 2 2 1') == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 2 1') == '0110'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2 3 4\n        1 2 2 1\n        ''') == '0110'\n\nassert solution('''1 2 2 1\n        ''') == 'Impossible'\n\nassert solution('''1 2 1 1\n        ''') == '0110'\n\nassert solution('''1\n        ''') == 'Impossible'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == \"0110\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"11\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1111111111\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"11\"\n\n\n---Input Example 2---\n\nInput\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n1\n\"\"\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"0110\"\nassert solution(\"1 2 2 1\") == \"0110\"\nassert solution(\"1 2 2 1 2\") == \"0110\"\nassert solution(\"1 2 2 1 2 2\") == \"0110\"\nassert solution(\"1 2 2 1 2 2 1\") == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 2 1') == '0110'\nprint(solution(input()))\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2 3 4''') == \"0110\"\nassert solution('''1 2 2 1''') == \"0111\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 3 4''') == '0110'\nassert solution('''1 2 2 1''') == '0110'\nassert solution('''1 1 1 1''') == '0110'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '3'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7\n*..P*P*\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n''') == '2'\nprint('Cool')\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '3'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n*..P*P*\n''') == '3'\n\nassert solution('''5\n*..P*P*\n''') == '2'"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10\n.**PP.*P.*\n''') == '2'\nassert solution('''20\n***.**.*P.*\n''') == '0'\nassert solution('''100\n*..*PP.*P.*\n''') == '4'\nassert solution('''200\n***.**PPP.*\n''') == '1'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nP.PP.PP.*\n''') == '3'\nassert solution('''\n10\n*.*.**.*\n''') == '2'\n\nstdin = '''\n20\n*...*P*P..*\n'''\nassert solution(stdin) == '22'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7\n.**PP.*P.*\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n.*..PP.*P.*\") == \"3\"\nassert solution(\"7\\n*..P*P*\") == \"3\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n7\n*..P*P*\n\n''') == '3'\nassert solution('''\n10\n.**PP.*P.*\n\n''') == '2'\nassert solution('''\n10\n.**PP*\n\n''') == '2'\nassert solution('''\n10\n.**PPP*\n\n''') == '3'\nassert solution('''\n10\n*P*.*P.*\n\n''') == '3'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '4'\nassert solution('1') == '0'\nassert solution('2') == '8'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '8'\nassert solution('7') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n\n''') == '8'\nassert solution('''\n3\n\n''') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'\nassert solution('4') == '8'\n\nstdin = \"\"\"3\n\"\"\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '1'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '4'\nassert solution('4\\n') == '8'\nassert solution('4\\n') == '16'\n\"\"\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nprint(solution())"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n\n\n\"\"\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 9 5 5 2 1') == '1 3 9 7'\nassert solution('8 12 9 5 2 1') == '8 9 12 7'\nassert solution('8 100 100 52 50 46 56') == '17 8 86 92'\nprint('Almost done!')\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nn,m,x,y,a,b\n10,10,5,5,2,1\n''') == '1 3 9 7'\nassert solution('''\nn,m,x,y,a,b\n100,100,52,50,46,56\n''') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 10 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\n'''\nInput\n10000 1 2 3 4 5\n\nOutput\n1 1\n\nInput\n4 1 2 3 4\n\nOutput\n1 2\n'''\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\") == \"1 1\"\nassert solution(\"100 100 52 50 46 56\") == \"17 8 86 92\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2') == '1 2'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"./test/input_test_1\") == \"1 2 3 4\"\nassert solution(\"./test/input_test_2\") == \"7 4 8 9\"\n\nfrom typing import List, Tuple\nfrom math import sqrt\n\nn, m, x, y, a, b = list(map(int, stdin.split()))"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"9 9 5 5 2 1\\n\"\n    \"1 3 9 7\\n\"\n    \"4 6 10 9\\n\"\n    \"9 1 4 8\\n\"\n    \"2 4 10 2\\n\"\n    \"6 4 1 4\\n\"\n    \"9 3 1 4\\n\"\n    \"5 3 4 4\\n\"\n    \"2 3 4 4\\n\"\n) == \"1 3 9 7\\n\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3 2 2') == '1 2'\nassert solution('4 6 2 2') == '2 3'\nassert solution('9 9 5 5 2 1') == '1 3 9 7'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\n'''\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"F\") == \"Yes\"\nassert solution(\"T\") == \"Yes\"\nassert solution(\"TTTTT\") == \"No\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''F\nT\nF\nF\nF\nT\nT\nT\nT''') == 'Yes'\nassert solution('''T\nT\nF\nT\nT\nF\nT\nF''') == 'No'\nassert solution('''F\nT\nF\nT\nT\nF\nT\nF''') == 'No'\nassert solution('''T\nT\nF\nT\nT\nF\nT\nF''') == 'No'\nassert solution('''T\nT\nF\nT\nT\nF\nT\nF''') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTFFTFFF') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"F\") == \"Yes\"\nassert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTSFTSF\") == \"No\"\nassert solution(\"TTTTTTTT\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFTFFTFF\") == \"No\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"Yes\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTFFTTTT') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTTTTT') == 'No'"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\n\n'''\n\ns = input()\nx, y = map(int, input().split())"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n\"\"\""
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"3\") == \"5\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"2\"\nassert solution(\"0\") == \"2\"\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 3\nassert solution(\"3\") == 5\nassert solution(\"4\") == 6\nassert solution(\"5\") == 7\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1.3333333333\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1.3333333333\"\nassert solution([10,10,10]) == \"1.\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.33333333333'\nassert solution('3') == '1.33333333333'\nassert solution('4') == '1.666666666667'\nassert solution('5') == '2.33333333333'\nassert solution('6') == '3.33333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n3\n1 2 3''') == '1'\nassert solution('''3\n4\n3 1 1 2''') == '3.33'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1.3333333333\"\nassert solution(\"1 2 3\\n3\\n\") == \"1.3333333333\"\nassert solution(\"1 2 3\\n4\\n\") == \"0.3333333333\"\nassert solution(\"1 2 3\\n3\\n\") == \"0.3333333333\"\n\nprint(solution(input()))"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1 2 3\n3\n\n''') == '1.3333333333'\nassert solution(\n'''\n2\n3\n\n''') == '0.5'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1.3333333333\"\nassert solution(\"5\") == \"1.3333333333\"\nassert solution(\"9\") == \"1.3333333333\"\nassert solution(\"30\") == \"1.3333333333\"\nassert solution(\"100\") == \"1.3333333333\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n3 4 3 1\\n2\\n') == \"1.3333333333\"\nassert solution('3\\n2 5 3 1\\n3\\n') == \"1.66666666667\"\nassert solution('4\\n1 1 1 1\\n2\\n') == \"0.5\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n3\n''') == '1.3333333333'\nassert solution('''5\n1 2 3 4\n1\n''') == '1.25'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n5\n9 7 11 15 5\n''') == '13 7'\n\nassert solution('''2\n1\n1\n''') == '1'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '13 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('6 1 2') == '6 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 2\") == \"13 7\"\nassert solution(\"3 1 2\") == \"13 7\"\nassert solution(\"4 1 2\") == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n9 7 11 15 5\\n') == '13 7'\nassert solution('2\\n100000 569\\n') == '986 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('2 100000 569') == '986 605'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 2\n9 7 11 15 5''') == '13 7'\nassert solution('''2 100000 569''') == '986 605'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 2') == '13 7'\nassert solution('5 2 3') == '8 6'\nassert solution('9 7 11 15 5') == '705 705'\nassert solution('2 100000 569') == '9956 7065'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 1 2\n9 7 11 15 5\n\"\"\") == \"13 7\"\n\nassert solution(\"\"\"\n6 5 3\n0 0 0 1 2 3\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n2 1 2\n0 0\n\"\"\") == \"0 0\"\n\nassert solution(\"\"\"\n5 2 1\n1 2 3 4 5\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n4 4 4\n0 0 0 0\n\"\"\") == \"0 0\""
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '13 7'\nassert solution('''\n5 1 2\n9 7 11 15 5\n''') == '13 7'\nassert solution('''\n1 1 1 1 1 1 1\n''') == '1 1 1 1 1 1 1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '3'\nassert solution('3 4 1 1 3') == '-1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3 3 5\") == \"0\"\nassert solution(\"3 3 3 3 5\") == \"1\"\nassert solution(\"3 4 1 1 3\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"3\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 2 4 4\n2 5 4 10\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 3 3 3 5\n2 3 5 4 2\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 5 1 2 3\n2 3 2\"\"\") == \"3\"\n\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 2 4 4\n2 5 4 10\n''') == '1'\nassert solution('''\n3 3 3 3 5\n2 3 5 4 2\n''') == '0'\nassert solution('''\n5 5 1 2 3\n2 3 5 4 2\n''') == '3'\n'''\nassert solution('''\n5 5 1 2 3\n2 4 1\n''') == '-1'\nassert solution('''\n3 4 1 1 3\n2 3 2\n''') == '3'\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\"\n\n'''\n\nfrom math import inf"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '0'\nassert solution('3 4 1 1 3') == '3'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"0\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2 4 4\n2 5 4 10\n''') == '1'\n\nassert solution('''\n3 3 3 3 5\n2 3 5 4 2\n''') == '0'\n\nassert solution('''\n5 5 1 2 3\n2 3 5 4 2\n''') == '3'\n\nassert solution('''\n3 4 1 1 3\n2 3 2\n''') == '3'\n\nassert solution('''\n5 5 1 2 3\n2 3 5 4 2\n''') == '-1'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '0'\nassert solution('4') == '2'\nassert solution('5') == '3'\nassert solution('6') == '2'\nassert solution('2') == '1'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\n\n\"\"\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\nG3 G3\n\n''') == '0'\n\nassert solution('''4\nB4 R4 R3 B3\n\n''') == '2'\n\nassert solution('''5\nB1 Y1 W1 G1 R1\n\n''') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nG3 G3\n\n''') == '0'\nassert solution('''4\nB1 Y1 W1 G1 R1\n\n''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1\n\n''') == '4'\n\n\n\n\n'''\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\nG3 G3\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\nG4 R4 R3 B3\n\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\nB1 Y1 W1 G1 R1\n\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 1\") == \"1 1\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '2 6'\nassert solution('5') == '3 11'\nassert solution('6') == '3 6'\n\n\n'''"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '''\n3\n3 3 4 3\n4 7 6 5\n''') == '2 6'\nassert solution(\n    '''\n5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"2 6\"\nassert solution(\"4\") == \"3 11\""
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1 1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 2'\nassert solution('4') == '1 2'\nassert solution('5') == '2 1'\n\nstdin = \"\"\"\n3\n3 4 5\n4 7 8 9\n\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 4 3\\n4 7 6 5') == '2 6'\nassert solution('5\\n10 30 5 6 24\\n10 41 7 8 24') == '3 11'"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0 1\"\nassert solution(\"5\") == \"2 3\"\nassert solution(\"10 30 5 6 24\") == \"3 11\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"5\") == \"2 2\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 3 4 3\\n4 7 6 5\") == \"2 6\"\nassert solution(\"2\\n1 1\\n100 100\") == \"1 1\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\\n\") == \"3 11\"\n\nassert solution(\"6\\n9 7 6 1 7\\n5 2 8 5\\n7 5 8 5\\n8 2 4 6\\n3 5 5 5\\n\") == \"2 2\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n3 3 4 3\n4 7 6 5\n\"\"\") == \"2 6\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 4\n''') == '3B'\nassert solution('''\n2 2\n''') == 'Impossible'\nassert solution('''\n3 2\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 4\n1\n''') == '3B'\nassert solution('''2 2\n1\n''') == 'Impossible'\nassert solution('''3 2\n1\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"3B\"\n\nprint(solution(input_))"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4\\n') == '3B', 'Test 1'\nassert solution('2 2\\n') == 'Impossible', 'Test 2'\nassert solution('3 2\\n') == '1A1B', 'Test 3'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 4') == '3B', solution('1 4')\nassert solution('2 2') == 'Impossible', solution('2 2')\nassert solution('3 2') == '1A1B', solution('3 2')"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 4''') == '3B'\nassert solution('''2 2''') == 'Impossible'\nassert solution('''3 2''') == '1A1B'"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n''') == '1A1B'\nassert solution('''\n1 2\n''') == 'Impossible'\nassert solution('''\n2 2\n''') == '2A2B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'\nassert solution('1 5\\n') == 'Impossible'\nassert solution('2 5\\n') == 'Impossible'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == '3'\nassert solution('3\\n4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n\n\n'''\n\nimport numpy as np\nimport math\n\nn = int(input())\np = int(input())"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n3\n2''') == '3'\nassert solution('''5 4\n5\n4''') == '25'\nassert solution('''5 4\n5\n3''') == '3'\nassert solution('''3 2\n3\n5''') == '0'\nassert solution('''5 4\n5\n4''') == '0'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('2 1') == '2'\nassert solution('3 1') == '1'\nassert solution('4 2') == '4'\nassert solution('5 4') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\nassert solution(\"10 20\") == \"10101\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\""
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('2 5\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('4 4\\n1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '1'\nassert solution('5 5\\n5 1 2 3\\n4 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2') == '0'\nassert solution('6 6\\n4 1 2 3\\n5 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n3 5') == '1'\nassert solution('6 6\\n5 1 2 3\\n4 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n3 5') == '0'\nassert solution('6 6\\n5 1 2 3\\n4 2 -3 1\\n1 2\\n2 3\\n3 4\\n3 5') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\nassert solution(\"4 6\\n3 2 4 6\\n1 3\\n1 2\\n3 4\\n2 4\\n3 1\") == \"4\"\nassert solution(\"5 5\\n5 4\\n3 1\\n4 2\\n4 3\\n2 3\\n5 2\") == \"1\"\nassert solution(\"3 4\\n3 2\\n3 1\\n4 2\\n4 3\\n2 3\\n5 2\") == \"1\"\nassert solution(\"5 5\\n5 4\\n3 1\\n4 2\\n4 3\\n2 3\\n5 2\") == \"0\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('5 4') == '0'\nassert solution('1 2') == '0'\nassert solution('1 5') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n''') == '1'\nassert solution('''4 6\n4 2 5 1\n2 3 -1 5\n5 3\n1 2\n3 4\n2 5\n1 5\n''') == '4'\nassert solution('''7 3\n7 3 3 7 1 2 4 6\n1 2 4\n3 6\n5 7\n4 5\n5 3\n4 7\n''') == '5'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\"\nassert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\\n\") == \"1\""
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == '1'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.o.\\no.T') == '2'\nassert solution('3 3\\no.o.\\no.T') == '-1'"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\nS.o\n.o.\no.T\n''') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nS.o\\n.o.\\no.T') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1\\nS.o\\n.o.\\no.T\") == \"2\"\nassert solution(\n    \"3 3\\nS.o\\n.o.\\no.T\") == \"2\"\nassert solution(\n    \"5 5\\n.o.o.o.S.o\\n.o.o.o.o.T\\no.T\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '1'\nassert solution('10 4') == '10'\nassert solution('4 1') == '-1'\nassert solution('4 5') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 3') == '-1'\nassert solution('5 5') == '-1'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == -1\nassert solution(\"3 3\") == \"2\"\nassert solution(\"S.o\") == \"2\"\nassert solution(\".o.\") == \"2\"\nassert solution(\"o.T\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\nS.o\\n.o.\\no.T') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('5 5') == '4'\nassert solution('100 100') == '99'\nassert solution('10 10') == '-1'"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '2'\nassert solution('2 5') == '1'\nassert solution('5 6') == '-1'\nassert solution('2 7') == '-1'\nassert solution('7 5') == '-1'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\nassert solution(\"10000000000 1000000000000\") == \"110000000000\"\nassert solution(\"1000000000000 100000000000000\") == \"11000000000000\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1 1\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n3 2\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n199 200\n\"\"\"\n) == \"200\"\n\n\"\"\"\n\nConstraints\n1\u2264a,b\u226410^18\n\nThe fraction $\\frac{a}{b}$ is irreducible.\n\nThe sum of the residual resistors in the element equals the value of the element.\n\nThe answer to the problem is guaranteed to exist.\n\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"4\\n1 2\\n3 4\") == \"Takahashi\"\n\"\"\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n5 2\n3 3\n''') == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Aoki\"\nassert solution(\"3\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'Aoki'\nassert solution('5 2') == 'Takahashi'\nassert solution('1000000000 4') == 'Aoki'\nassert solution('1000000000 500') == 'Takahashi'\nassert solution('1000000000 300') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n5 1\\n1 3\") == \"Takahashi\"\nassert solution(\"2\\n5 2\\n4 3\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"1\\n5 5\") == \"Takahashi\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"2\\n1 1\\n3 3\") == \"Takahashi\"\nassert solution(\"2\\n1 1\\n1 3\") == \"Takahashi\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5 2\") == \"Aoki\"\nassert solution(\"3\\n3 1\") == \"Takahashi\"\nassert solution(\"2\\n10 10\") == \"Takahashi\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n5 2\\n3 3') == 'Aoki'\nassert solution('2\\n3 3') == 'Takahashi'\n\n'''\nimport math"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n5 2\\n3 3') == 'Aoki'\nassert solution(\n    '4\\n3 3\\n1 2') == 'Takahashi'\n\n\"\"\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n''') == '0'\nassert solution('''3 3\n''') == '8'\nassert solution('''2 5\n''') == '7'"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '8'\nprint(solution(input))"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2''') == '0'\nassert solution('''3 3''') == '8'"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0'\nassert solution('3 3') == '8'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 3') == '8'\nassert solution('20 20') == '35'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 2 3 4\n1 5 3 4\n\n''') == '1'\nassert solution('''\n2 2\n1 2 3 4\n1 5 6 4\n\n''') == '0'\nassert solution('''\n3 2\n1 2 3 4\n1 5 6 4\n\n''') == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"1\"\n\nassert solution(input_) == \"0\"\n\n\"\"\"\n\nn, m = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n\npairs_from_first = set()\npairs_from_second = set()\n\nfor _ in range(n):\n    first, second = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    pairs_from_first.add((first, second))\n\nfor _ in range(m):\n    first, second = [int(x) for x in stdin.split(\"\\n\")[2].split()]\n    pairs_from_second.add((first, second))\n\nshared_nums = set()\nfor pair in pairs_from_first:\n    if pair in pairs_from_second:\n        shared_nums.add(pair[0])\n        shared_nums.add(pair[1])"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 2 3 4\n1 5 3 4\n\n''') == '1', \"First\"\nassert solution('''\n2 3\n1 2 3 4\n1 5 6 4\n\n''') == '-1', \"Second\"\n'''\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\\n\") == \"1\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\\n\") == \"0\"\nassert solution(\"2 4\\n1 2 3 4\\n1 2 1 3 2 3\\n\") == \"-1\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_data) == '1'\nassert solution(input_data_2) == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"0\"\nassert solution(\"2 3\\n1 2 3 4\\n1 5 3 4\") == \"-1\""
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 2 3 4\\n1 5 3 4') == '1'\nassert solution('2 2\\n1 2 3 4\\n1 5 6 4') == '0'\nassert solution('2 3\\n1 2 3 4\\n1 5 6 4') == '-1'"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n1 2 3 4\\n1 5 3 4\") == \"1\"\nassert solution(\"2 2\\n1 2 3 4\\n1 5 6 4\") == \"0\"\nassert solution(\"2 3\\n1 2 4 5\\n1 2 1 3 2 3\") == \"-1\"\nassert solution(\"2 4\\n1 2 3 4\\n1 2 1 3 2 3\") == \"0\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('24') == '09:09'\nassert solution('12') == '07:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('12') == '12:00'\nassert solution('24') == '00:00'\nassert solution('99') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12') == '12:00'\nassert solution('24') == '12:00'\nassert solution('99') == '12:00'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('12') == '00:00'\nassert solution('24') == '00:00'\nassert solution('99') == '09:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12') == '01:00'\nassert solution('24') == '00:00'\nassert solution('99') == '09:09'\n\nprint(solution(stdin))"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == input"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"00:00\"\nassert solution(\"24\") == \"12:00\"\nassert solution(\"99\") == \"00:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''12\n17:30\n''') == '17:30'\nassert solution('''24\n99:99\n''') == '09:09'"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '00:00'\nassert solution('24') == '00:00'\nassert solution('00:99') == '00:01'\nassert solution('24:00') == '00:00'\nassert solution('24:99') == '00:01'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('24') == '09:09'\nassert solution('12') == '17:30'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '6'"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"4\"\nassert solution(\"8\") == \"1\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"3 4 2\") == \"3\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"1 2\") == \"4\"\nassert solution(\"1 2 3\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6'\nassert solution('3 4') == '5'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '4'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '6'\nassert solution('6') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '6'\nassert solution('3 3') == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3\\n2\\n1 2 1\\n2 3 1') == '6'\nassert solution('4 4\\n1 2 1\\n2 3 1\\n3 1 1\\n4 1 1') == '5'\nassert solution('4 4\\n1 2 1\\n2 3 1\\n3 1 1\\n4 1 1') == '5'\nassert solution('5 5\\n1 2 1\\n2 3 1\\n3 1 1\\n4 1 1\\n5 1 1') == '6'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2 0 3 0 1 1\") == \"5\\n2 1\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"6\\n3 2 2 2 1 1\") == \"-1\""
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"5 2 1\"\nassert solution(input_2) == \"0\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n\"\n    \"0\\n\"\n) == \"0\"\n\n\"\"\""
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 0 3 0 1 1') == '-1'\nassert solution('1\\n0') == '0'\nassert solution('2\\n2 0 3 0 1 1') == '5'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '-1'\nassert solution('1') == '0'\nassert solution('6') == '5 6'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n331 333\n332 334\n333 335\n334 336\n335 337\n336 338\n337 339\n338 340\n339 341\n340 342\n341 343\n342 344\n343 345\n344 346\n345 347\n346 348\n347 349\n348 350\n349 351\n350 352\n351 353\n352 354\n353 355\n354 356\n355 357\n356 358\n357 359\n358 360\n359 361\n360 362\n361 363\n362 364\n363 365\n364 366\n365 367\n366 368\n367 369\n368 370\n369 371\n370 372\n371 373\n372 374\n373 375\n374 376\n375 377\n376 378\n377 379\n378 380\n379 381\n380 382\n381 383\n382 384\n383 385\n384 386\n385 387\n386 388\n387 389\n388 390\n389 391\n390 392\n391 393\n392 394\n393 395\n394 396\n395 397\n396 398\n397 399\n398 400\n399 401\n400 402\n401 403\n402 404\n403 405\n404 406\n405 407\n406 408\n407 409\n408 410\n409 411\n410 412\n411 413\n412 414\n413 415\n414 416\n415 417\n416 418\n417 419\n418 420\n419 421\n420 422\n421 423\n422 424\n423 425\n424 426\n425 427\n426 428\n427 429"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '-1'\nassert solution('6') == '5'\nassert solution('2') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n0 0 3 0 1 1\n\n''') == '5'\n\nassert solution('''\n6\n3 2 2 2 1 1\n\n''') == '-1'\n\nassert solution('''\n1\n0\n\n''') == '0'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n''') == '5 2 1'\nassert solution('''\n1\n0\n''') == '0'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10\n10\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n10\"\"\") == \"0\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\n\nprint(solution('''4 8\n12 20 40 8'''))\nprint(solution('''3 10\n10 20 30'''))"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 5\") == \"2\"\nassert solution(\"3 10\") == \"1\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'\nassert solution('2 3 4 5 6 7 8 9 10') == '0'\n\n\n'''\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 8\\n12 20\\n') == '2'\nassert solution('3 10\\n10 20 30\\n') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '1 0'\n\nn, k = list(map(int, input().split()))\n\narr = list(map(int, input().split()))\n\nfor i in range(1, n):\n    arr[i] += arr[i-1]\n\nnum = list(map(int, input().split()))\n\nfor i in range(1, k+1):\n    for num in arr:\n        if num % i == 0:\n            print(i, end=\" \")\n        if num % i == 0 and num!= 0:\n            break"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == '2'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 10\\n\" +\n    \"12 20\\n\"\n) == \"2\\n\" +\n    \"0 4\\n\" +\n    \"1\\n\" +\n    \"0\\n\"\n\nassert solution(\n    \"3 10\\n\" +\n    \"10 20 30\\n\"\n) == \"1\\n\" +\n    \"0\\n\" +\n    \"1\\n\" +\n    \"0\\n\"\n\nassert solution(\n    \"4 10\\n\" +\n    \"1 2 3 4\\n\"\n) == \"4\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\"\n\nassert solution(\n    \"5 10\\n\" +\n    \"1 2 3 4 5\\n\"\n) == \"3\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n    \"0\\n\" +\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n0 0 0 1000\n100 1000\n-50 0\n50 0\n''') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''0 0 5 5\n3 2\n-1 -1\n-1 0''') == '3.729935587093555327'\nassert solution('''0 0 0 1000\n100 1000\n-50 0\n50 0''') == '11.547005383792516398'\nprint(solution('''0 0 0 1000\n100 1000\n-50 0\n50 0'''))\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\nassert solution('-50 0') == '1.9826151847368421'\nassert solution('50 0') == '1.46858024342738113'\nassert solution('-100 100') == '10.997260273048777'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '0.10000000000000001'\nassert solution('-1 -1') == '1.0000000000000001'\nassert solution('-1 0') == '1.0000000000000001'\nassert solution('0 0') == '1.0000000000000001'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\") == \"11.547005383792516398\"\nassert solution(\"5 5 5 5\") == \"0.0\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '3.926306156075950423'\nassert solution('-1 -1') == '0.0'\nassert solution('-1 0') == '0.0'\nassert solution('5 5') == '4.4999999999999998'\n\nstdin = '0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n5 5'\nfor solution in (sorted(solutions)[::-1]):\n    print(solution)\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''0 0 5 5\n1 2\n1 -1\n1 0\n\nOutput\n3.729935587093555327\n''') == '3.729935587093555327'\nassert solution('''0 0 0 1000\n100 1000\n-50 0\n50 0\n\nOutput\n11.547005383792516398\n''') == '11.547005383792516398'"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"0 0 5 5\\n3 2\\n-1 -1\\n-1 0\\n\"\n) == \"3.729935587093555327\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'\nassert solution('1 2') == '-0.3076923076923077'\n\n'''"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\") == \"11.547005383792516398\"\nassert solution(\"-1 -1\") == \"2.91855983481065358\"\nassert solution(\"-1 0\") == \"2.91855983481065358\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second\\nFirst\\nSecond'\n'''\n)\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nFirst\\nSecond'\n\nassert solution(\n'''\n2\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nSecond'\n\nassert solution(\n'''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nFirst\\nSecond'\n\nassert solution(\n'''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nSecond\\nSecond'\n\nassert solution(\n'''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nSecond\\nFirst'"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"Second\"\nassert solution(\"1\") == \"First\"\nassert solution(\"1\") == \"First\"\nassert solution(\"5\") == \"Second\"\nassert solution(\"10\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"First\"\nassert solution(\"2\") == \"Second\"\nassert solution(\"3\") == \"Second\"\nassert solution(\"4\") == \"Second\"\nassert solution(\"5\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n\"\"\") == \"Second\\nFirst\"\n\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n10\n1 2\n21''') == 'Second'\nassert solution('''3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'First'\n\"\"\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'First\\nSecond\\nSecond'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == 'Second'\nassert solution(input()) == 'First'\n\"\"\""
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n10\\n1 2\\n2 2\\n\") == \"Second\"\nassert solution(\"3\\n1\\n10\\n2\\n\") == \"First\"\nassert solution(\"4\\n1\\n10\\n2\\n\") == \"First\"\nassert solution(\"5\\n1\\n10\\n2\\n\") == \"Second\"\nassert solution(\"6\\n1\\n10\\n2\\n\") == \"Second\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('5 3 2') == '1'\nassert solution('5 2 2') == '3'\nassert solution('5 2 2') == '3'\nassert solution('5 2 2') == '3'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3 2\n4 3 1 5 2''') == '1'\nassert solution('''8 3 2\n1 2 5 3 7 6 4 8''') == '4'\nassert solution('''2 4 3 1 5 2''') == '3'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10\") == \"0\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"4 3 1 5 2\") == \"1\"\nassert solution(\"5 5 5 5 5\") == \"1\"\nassert solution
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"4 3 1 5 2\") == \"1\"\nassert solution(\"5 3 1 5 2\") == \"0\""
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3 2\n4 3 1 5 2\n''') == '1'\nassert solution('''\n5 5 2\n1 2 3 4 5\n''') == '2'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"10 10 5 10 2\") == \"1\"\nassert solution
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n''') == \"1\"\nassert solution('''\n3 2\n''') == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'\nprint(solution(input()))\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n''') == '1'\nassert solution('''\n3 2\n''') == '24'\nassert solution('''\n8 9\n''') == '75'\n''')\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n''') == '6'\n\nassert solution('''\n4 4\n''') == '3'\n\nassert solution('''\n31 8\n''') == '1196'\n\nassert solution('''\n40 5\n''') == '1462'\n\n'''\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(\"\"\"\n10 2\n\"\"\")\n\nsys.stdout = io.StringIO()\n\nsolution()\n\nprint(sys.stdout.getvalue())\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 3\n\n''') == '3'\nassert solution('''\n4 4\n\n''') == '0'\nassert solution('''\n31 8\n\n''') == '1196'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '6'\nassert solution('3 2') == '6'\nassert solution('4 4') == '3'\nassert solution('7 3') == '1196'\nassert solution('31 8') == '64921457'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n''') == '6', solution('''3 2\n''')\nassert solution('''4 4\n''') == '3', solution('''4 4\n''')\nassert solution('''7 3\n''') == '1196', solution('''7 3\n''')\nassert solution('''31 8\n''') == '64921457', solution('''31 8\n''')\n\n\n-----Links-----\nhttps://www.hackerrank.com/challenges/ctci-the-time-reverser/problem\nhttps://www.geeksforgeeks.org/cut-minimum-number-of-connections-to-make-graph-isomorphic/\n'''\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '6'\nassert solution('3 2\\n') == '6'\nassert solution('4 4\\n') == '3'\nassert solution('7 3\\n') == '1196'\nassert solution('31 8\\n') == '64921457'\n\n'''"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n\") == \"3\"\nassert solution(\"31 8\\n\") == \"64921457\"\n\n\"\"\""
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n\n''') == '6'\n\nassert solution('''\n4 4\n\n''') == '3'\n\nassert solution('''\n7 3\n\n''') == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '6'\nassert solution('4 4\\n') == '3'\nassert solution('6 3\\n') == '1196'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n3\n1 2\n1 3\n''') == '6'\n\nassert solution('''4 4\n2\n1 2 1 3\n''') == '3'\n\nassert solution('''7 3\n3\n1 2 1 3\n1 2\n1 3''') == '1196'\n\n\"\"\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'\n\nprint(solution())\n\"\"\"\nimport collections"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '#.X#'\nassert solution('5 4 5') == '#X#.X#'\nassert solution('5 5 1') == 'X#..X'\nassert solution('10 10 3') == 'X##X###X#X##X'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"#.X#\"\nassert solution(\"5 4 5\") == \"#X#.X\"\nassert solution(\"3 1 1\") == \"XX\"\nassert solution(\"5 1 1\") == \"#.X.X\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5 5\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"X#.\\nX#.\\n#...\\n\"\nassert solution(\"5 4 5\") == \"X#X\\nX#X\\nX#X\\nX#X\\nX#X\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4 2\") == '#.X#\\nX.#.\\n#...\\n.#.#'\nassert solution(\"5 4 5\") == '#X.X#\\nX.#.\\nX#..\\n...#\\n.#.#'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"##.##\\n.##..\\n##.#\\n\"\nassert solution(\"5 4 5\") == \"##.##\\n#X.#\\n#.##\\n#...\\n#.#.#\""
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...\\n'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 4 2\\n#..#\\n..#.\\n#...\\n\"\n) == \"#.X#\\nX.#.\\n#...\\n#.#.\"\nassert solution(\n    \"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n#.X#\\n\"\n) == \"#.XXX\\nX#.X\\nX..#\\n...#\\n#.#X\\n\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '3 4 2'\n    ) == '#.X#\\nX.#.\\n#...\\n'\nassert solution(\n    '5 4 5'\n    ) == '#X#X#\\nX.#X\\nX#..\\n...#\\n#.X#'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1\n''') == '1'\n\nassert solution('''5\n1 2 2 2\n''') == '3'\n\nassert solution('''18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n1\n''') == '1'\nassert solution('''\n10\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\"\n) == \"1\"\n\nassert solution(\n    \"18\"\n) == \"4\""
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n''') == '1'\n\nassert solution('''5\n1 2 2 2\n''') == '3'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"18\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_lines) == output_lines\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 1\n''') == '1'\nassert solution('''\n5\n1 2 2 2\n''') == '3'\nassert solution('''\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n''') == '4'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('0 0 0') == '0 0 0'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 2') == '4 1 5 2'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('5 3 2') == '-1'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('5 4 3 2') == '-1'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3 2') == '-1'\nassert solution('5 3 2') == '2 4 1 5 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\") == \"4 1 5 3\"\nassert solution(\"5 3 2\") == \"5 3 2\"\nassert solution(\"1 3 2\") == \"1 3 2\"\nassert solution(\"5 1 2\") == \"5 1 2\""
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n\"\"\"\n\nn, a, b = map(int, stdin.split())"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n3 6 9 18 36 108\n\n''') == 'Yes'\n\nassert solution('''\n2\n7 17\n\n''') == 'No'\n\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n\n''') == 'Yes'\n\"\"\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n3 6 9 18 36 108\n''') == 'Yes'\nassert solution('''\n2\n7 17\n''') == 'No'\nassert solution('''\n9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == \"Yes\"\nassert solution('2') == \"No\"\nassert solution('9') == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"Yes\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"Yes\", \"6\"\nassert solution(\"2\") == \"No\", \"2\"\nassert solution(\"9\") == \"Yes\", \"9\"\nassert solution(\"3\") == \"No\", \"3\"\n\n---\n\nThe picture below illustrates one of the possible trees for the third example. [Image]\n\nThe picture below illustrates one of the possible trees for the fourth example. [Image]\n\nThe picture below illustrates one of the possible trees for the fifth example. [Image]\n\nThe picture below illustrates one of the possible trees for the sixth example. [Image]\n\nThe picture below illustrates one of the possible trees for the seventh example. [Image]\n\n\n------Explanation-----\n\nExercise 1: Given the following tree:\n\n                7\n             /     \\\n            3        11\n           /   \\    /   \\\n          11    17  9     16\n         / \\\n        3   6\n\nsolution(7) = Yes\nsolution(2) = No\nsolution(9) = Yes\nsolution(3) = No\n\nExercise 2: Given the following tree:\n\n                4\n             /   \\\n            2     3\n           / \\\n          1   7\n         / \\\n        2   6\n\nsolution(4) = No\nsolution(2) = No\nsolution(3) = No\nsolution(6) = No\n\nExercise 3: Given the following tree:\n\n                5\n             /   \\\n            4     8\n           / \\\n          2   6\n         / \\\n        1   3\n\nsolution(5) = No\nsolution(2) = No\nsolution(6) = No\nsolution(8) = No\n\nExercise 4: Given the following tree:\n\n                3\n             /   \\\n            7     1\n           / \\\n          6   5\n\nsolution(3) = No\nsolution(1) = No\nsolution(5) = No\nsolution(6) = No\n\nExercise 5: Given the following tree:\n\n                4\n             /   \\\n            2     3\n           / \\\n          1   7\n         / \\\n        2   6\n\nsolution(4) = No\nsolution(2) = No\nsolution(3) = No\nsolution(6) = No\n\nExercise 6: Given the following tree:\n\n                6\n             /   \\\n            9     1\n           / \\\n          11  7\n         / \\\n        12  3\n\nsolution(6) = No\nsolution(1) = No\nsolution(3) = No\nsolution(7) = No\n\nExercise 7: Given the following tree:\n\n                3\n             /   \\\n            7     5\n           / \\\n          6   9\n         / \\\n        1   4\n\nsolution(3) = No\nsolution(1) = No\nsolution(5) = No\nsolution(4) = No\n\nExercise 8: Given the following tree:\n\n                4\n             /   \\\n            2     3\n           / \\\n          1   7\n         / \\\n        2   6\n\nsolution(4) = No\nsolution(2) = No\nsolution(3) = No\nsolution(6) = No\n\nExercise 9: Given the following tree:\n\n                3\n             /   \\\n            7     5\n           / \\\n          11  9\n         / \\\n        12  3\n\nsolution(3) = No\nsolution(1) = No\nsolution(5) = No\nsolution(4) = No\n\nExercise 10: Given the following tree:\n\n                4\n             /   \\\n            2     3\n           / \\\n          1   7\n         / \\\n        2   6\n\nsolution(4) = No\nsolution(2) = No\nsolution(3) = No\nsolution(6) = No\n\n\n\"\"\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6\\n3 6 9 18 36 108') == 'Yes'\nassert solution('2\\n7 17') == 'No'\nassert solution('9\\n4 8 10 12 15 18 33 44 81') == 'Yes'\nassert solution('6\\n3 6 9 18 36 108') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n6 9 18 36 108''') == \"Yes\"\n\nassert solution('''2\n7 17''') == \"No\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == \"Yes\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'Yes'\nassert solution() == 'No'\nassert solution() == 'Yes'\n\n\nimport math\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n3 6 9 18 36 108\n\n2\n7 17\n\n9\n4 8 10 12 15 18 33 44 81\n\n''') == 'Yes', solution.__doc__\nassert solution('''6\n3 6 9 18 36 108\n\n2\n7 17\n\n9\n4 8 10 12 15 18 33 44 81\n\n''') == 'No', solution.__doc__\n\n'''"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == '12'\nassert solution(\"5\") == '5'\nassert solution(\"5 1 2 3 4\") == '10'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n-6\n1 2 3 4 5\n''') == '12'"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 3 1 4 5\n''') == '12'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"12\"\n\"\"\"\n\nN = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\ndp = [[0 for i in range(N+1)] for j in range(N+1)]\n\nfor i in range(N):\n    for j in range(N):\n        if i == 0:\n            dp[i][j] = 0\n            continue\n        if i == j:\n            dp[i][j] = a[i]\n            continue\n        if j > i:\n            dp[i][j] = max(dp[i][j], dp[i-1][j] + a[i])\n        else:\n            dp[i][j] = max(dp[i][j], dp[i-1][j] - a[i])\nprint(max(dp[N-1]))"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"25\"\nassert solution(\"20\") == \"50\"\nassert solution(\"30\") == \"75\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '12'\nassert solution('7') == '19'\nassert solution('100') == '10000000'\n\"\"\"\n\nn = int(input())\nsmash_gem = input().split()"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"1 2 -6 4 5 3\") == \"14\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"12\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == '12'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\n    3 1 4 2''') == \"5\""
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"5\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"6 3\") == \"5\"\nassert solution(\"7 3\") == \"6\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 3\n3 1 4 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 5\n1 4 2 3 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10 10\n4 5 9 8 7 6 2 1 3 4\n\"\"\") == \"8\"\nassert solution(\"\"\"\n10 10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"5\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"5 3\") == \"5\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '5'\nassert solution('5 2') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"2 5\") == \"1\"\nassert solution(\"3 1 4 2\") == \"5\""
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '5'\nassert solution('4 3') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4\\n3 1 2 4') == 5\n\n\"\"\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n3 1 4 2''') == '5'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3') == '5'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0 0\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"2 1\""
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 0'\nassert solution('''3\n2 3 1\n''') == '0 1'\nassert solution('''3\n3 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n2 3 1\n''') == '0 0'\n\nassert solution('''\n3\n3 2 1\n''') == '0 1'\n\nassert solution('''\n3\n1 2 3\n''') == '0 0'"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '0 0'\nassert solution('3 2 1') == '0 1'\nassert solution('3 3 1') == '2 1'\nassert solution('3 3 2') == '2 1'\nassert solution('3 3 3') == '2 1'\n\n\n\"\"\"\nimport math\n\nn = int(input())\np = list(map(int, input().split()))"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '2 1'\nassert solution('3') == '1 2'\nassert solution('3') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == '0 0'\nassert solution(\"3\") == '0 1'\nassert solution(\"3\") == '0 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([3,2,3,1]) == \"0 1\"\nassert solution([3,2,1,3]) == \"1 2\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1\\n') == '0 0'\nassert solution('3\\n3 2 1\\n') == '2 1'\nassert solution('3\\n3 1 2\\n') == '1 2'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\naa\\nbb\\n') == '6'\nassert solution('3 3\\naba\\nbba\\n') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4\naa\nbb''') == '6'\nassert solution('''3 3\naba\nbba''') == '8'\nassert solution('''4 5\nabbb\nbaaa''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4') == '6'\nassert solution('3 3') == '8'\nassert solution('4 5') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4\\naba\\nbaaa\\n') == '6'\nassert solution('3 3\\naba\\nbaaa\\n') == '8'\nassert solution('4 5\\naba\\nbaaa\\n') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\naba\nbba\n\n''') == '8'\n\nassert solution('''\n4 5\nabbb\nbaaa\n\n''') == '8'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '6'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n\" +\n        \"aa\\n\" +\n        \"bb\\n\") == \"6\"\nassert solution(\"3 3\\n\" +\n        \"aba\\n\" +\n        \"bba\\n\") == \"8\""
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4\naa\nbb\n\n''') == '6'\nassert solution('''\n3 3\naba\nbba\n\n''') == '8'\nassert solution('''\n4 5\nabbb\nbaaa\n\n''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5\nabbb\nbaaa\n''') == '8'\nassert solution('''3 3\naba\nbba\n''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\nab\\nb') == 6\nassert solution('3 3\\naba\\nba') == 8\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n''') == 'YES'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 0 0\") == \"YES\", \"1\"\nassert solution(\"0 0 0\") == \"NO\", \"2\"\nassert solution(\"0 0 0\") == \"YES\", \"3\"\nassert solution(\"0 0 0\") == \"NO\", \"4\"\n\nassert solution(\"0 0 0\") == \"YES\", \"5\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 1 1\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\\n0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n1 0 0\\n0 1 1\\n1 0 0\\n1 1 1\""
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == 'YES'\nassert solution(\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == 'NO'\nassert solution(\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == 'NO'\nassert solution(\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == 'NO'\nassert solution(\"\"\"\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\") == \"YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nprint(solution('''0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n'''))\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'NO', 'Example'\nassert solution('4') == 'YES', 'Example'\nassert solution('5') == 'NO', 'Example'"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 6 7\") == \"YES\\n2 2 1 1\"\nassert solution(\"5\\n6 15 35 77 22\") == \"YES\\n2 1 2 1 1 1\"\nassert solution(\"5\\n6 10 15 1000 75\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2 3 6 7\n''') == 'YES'\nassert solution('''5\n6 15 35 77 22\n''') == 'YES'\nassert solution('''5\n10 20 10 20 10 20\n''') == 'NO'\nassert solution('''5\n10 20 10 20 20 10\n''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3 6 7\n2 3 6 7''') == 'YES'\nassert solution('''5\n6 15 35 77 22\n''') == 'NO'\nassert solution('''4\n2 3 6 7\n''') == 'YES'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 6 7') == 'YES'\nassert solution('2 5 8 11') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"NO\"\n\nstdin = \"\"\"4\n2 3 6 7\n\n5\n6 15 35 77 22\n\n5\n6 10 15 1000 75\n\n\"\"\"\n\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 6 7\") == \"YES\"\nassert solution(\"5 6 15 35 77 22\") == \"YES\"\nassert solution(\"5 5 5 5 5\") == \"NO\"\nassert solution(\"5 5 5 5 5\") == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 6 7\\n\") == \"YES\\n2 2 1 1\\n\"\nassert solution(\"5\\n6 15 35 77 22\\n\") == \"YES\\n2 1 2 1 1\\n\"\nassert solution(\"5\\n6 1000 75\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n20\n30\n100\n\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n30\n100\n\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5\n50\n100\n\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n20\n100\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '100\\n60\\n70') == '40'\nassert solution(\n    '410\\n55\\n70') == '5'\nassert solution(\n    '600\\n60\\n70') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    100\n    60\n    70\n''') == '40'\nassert solution('''\n    410\n    55\n    70\n''') == '5'\nassert solution('''\n    600\n    60\n    70\n''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''60\n70\n''') == '0'\n\nassert solution('''410\n55\n70\n''') == '5'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_sample_1) == \"40\"\nassert solution(input_sample_2) == \"5\"\nassert solution(input_sample_3) == \"0\"\n\n\n'''\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"410\\n55\\n70\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"0\"\nassert solution(input1) == \"40\"\nassert solution(input2) == \"5\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''400\n60\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"1 4\"\nassert solution(\"\"\"\n3\n1 2 3\n3 2 4\n5 3\n\"\"\") == \"1 2 4\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"\"\"\n15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 4 1 5 9 2 6 5 3 5 8\n''') == '3 4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '1 1 1 1'"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('5') == '5'\nassert solution('12') == '12'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n5 1 4 1 5 9 2 6 5 3 5 8''') == '''4\n3 4\n1 2 3\n3 1 5\n5 6 8 9\n'''\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n''') == '3 4', '4 4'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1 1 1 1') == '1'\nassert solution('12\\n3 1 4 1 5 9 2 6 5 3 5 8') == '12 4'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 1 1 1 1\"\nassert solution(\"12\") == \"3 4\"\nassert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 2 3\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '12'\nassert solution('5') == '1'\nassert solution('3 1 4 1 5 9 2 6 5 3 5 8') == '4 4'\nassert solution('4 5 4 4 6 6 6 6 3') == '4 2 4'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12\\n3 1 4 1 5 9 2 6 5 3 5 8\\n\") == \"12\\n3 4\"\nassert solution(\"5\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"\") == \"\"\nassert solution(\"3\\n1 1 1\") == \"3\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 1\n1 3 3\n''') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '6'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '6'\nassert solution('3 2') == '0'\nassert solution('5 3') == '6'\nassert solution('3 4') == '8'\nassert solution('5 4') == '15'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"4 3\") == \"4\"\nassert solution(\"7 3\") == \"7\"\nassert solution(\"8 4\") == \"8\"\nassert solution(\"10 10\") == \"8\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 3 3\\n\") == \"6\"\nassert solution(\"5 2\\n1 3 3\\n\") == \"7\"\nassert solution(\"5 3\\n1 3 3\\n\") == \"8\"\nassert solution(\"5 4\\n1 3 3\\n\") == \"7\"\nassert solution(\"10 10\\n1 3 3\\n\") == \"1256\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '6'\nassert solution('2 1') == '2'\nassert solution('6 3') == '6'"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == 6\nassert solution('3 1') == 1\nassert solution('3 2') == 8\nassert solution('3 3') == 12\nassert solution('3 4') == 18\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\n1 3 3\n''') == '6'\nassert solution('''\n2 3\n1 3 1\n''') == '10'\nassert solution('''\n3 3\n1 2 1\n1 2 2\n''') == '3'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '-1'\nassert solution('87654') == '10'"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '-1'\nassert solution('86100') == '10'\nassert solution('187857') == '-1'\nassert solution('14499') == '10'"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('30') == '-1'\nassert solution('123') == '123'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('87654') == '10'"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"100\\n87654\") == \"10\"\nassert solution(\"1\\n0\") == \"1\"\nassert solution(\"100\\n111111\") == \"1\""
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '-1'\nassert solution('9') == '9'\nassert solution('123456789') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"87654\") == \"10\"\nassert solution(\"30\") == \"10\"\nassert solution(\"-1\") == \"-1\""
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"87654\") == \"10\"\nassert solution(\"30\") == \"10\"\nassert solution(\"-1\") == \"-1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aba') == 'Second'\nassert solution('baa') == 'First'\nassert solution('bba') == 'First'"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"takahashi\") == \"First\"\nassert solution(\"aoki\") == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"aaa\") == \"First\"\nassert solution(\"baa\") == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'First'\n\"\"\"\n\ns = input()\n\ncount1 = 0\nfor i in range(len(s)):\n    if s[i]!= s[i + 1]:\n        count1 += 1\n\ncount2 = 0\nfor i in range(len(s)):\n    if s[i]!= s[i - 1]:\n        count2 += 1"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aba') == 'Second'\nassert solution('cbb') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aba') == 'Second'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"abc\") == \"First\"\nassert solution(\"abb\") == \"First\"\nassert solution(\"acb\") == \"Second\"\nassert solution(\"aaa\") == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"abc\") == \"First\"\nassert solution(\"abcdefgh\") == \"Second\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"aba\") == \"Second\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"aa\") == \"First\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n3\n1\n2\n1''') == '4'\nassert solution('''10\n8\n6\n4\n3\n7\n2\n1\n9\n5\n2''') == '5'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\\n\") == \"6\"\nassert solution(\"16\\n439873893693495623498263984765\\n\") == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\\n10\\n3345\\n2345\\n2345\\n0\\n10\\n1347\\n0\\n18\\n\"\n) == \"40\"\nassert solution(\n    \"1\\n10\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\"\n) == \"0\""
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"6\"\nassert solution(\"16\") == \"40\"\nassert solution(\"12345\") == \"6\"\nassert solution(\"439873893693495623498263984765\") == \"40\"\nassert solution(\"10000000000\") == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('1') == '0'\nassert solution('12') == '1'\nassert solution('23') == '0'\nassert solution('34') == '0'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n12345') == '6'\nassert solution('16\\n439873893693495623498263984765') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('439873893693495623498263984765') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n12345') == '6'\nassert solution('16\\n439873893693495623498263984765') == '40'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\n\nassert solution('''\n1 2\n1\n1\n''') == '3'\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n\nassert solution('''\n3 1\n1\n1\n''') == '1.3333333333'\n\nassert solution('''\n3 2\n1 2\n1\n''') == '2'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '974061117'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '3'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1') == '3'\nassert solution('2') == '3'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n'''\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == \"332748119\"\nassert solution('''\n1 2\n1\n1\n''') == \"3\"\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == \"160955686\"\n'''\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == '332748119'\nassert solution(\"1 2\") == '332748119'\nassert solution(\"3 3\") == '160955686'\nassert solution(\"1 2\") == '1'\nassert solution(\"2 2\") == '0'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n'''\nThe solution is very tricky and requires more advanced knowledge. You can follow the pseudocode to get it.\n''')\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n1') == '3'\nassert solution('3 3\\n0 1 1\\n4 3 5') == '160955686'\n\nstdin = '''2 1\n0 1\n2 1'''\n\nprint(solution(stdin))"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1\n0 1\n2 1''') == '332748119'\n\nassert solution('''1 2\n1\n1\n\n''') == '3'\n\nassert solution('''3 3\n0 1 1\n4 3 5\n\n''') == '160955686'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(stdin) == 'ORZ'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"A\") == \"\"\nassert solution(\"AA\") == \"\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'OZ'\nassert solution('AA') == '0'"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AB') == ''\nassert solution('BA') == ''\nassert solution('AA') == 'A'\nassert solution('ABA') == 'AA'\nassert solution('ABAB') == 'ABA'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"OZ\"\nassert solution(\"OZ\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"1 100 100\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('100 100 100') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == 99, \"First sample\"\nassert solution('1 100 1') == 0, \"Second sample\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100\\n') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1\\n') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\n\n'''\nimport math"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '99'\nassert solution('1 100 1') == '0'\nassert solution('1 1 1') == '0'\nassert solution('100 100 100') == '0'"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"99\", \"Wrong result in sample case 1\"\nassert solution(\"1 100 1\") == \"0\", \"Wrong result in sample case 2\"\nassert solution(\"100 100 100\") == \"0\", \"Wrong result in sample case 3\"\nassert solution(\"1 1 1\") == \"99\", \"Wrong result in sample case 4\"\nassert solution(\"1 1 1\") == \"99\", \"Wrong result in sample case 5\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\nassert solution('9000000000001 1000000') == '1394829891'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\nassert solution('1000000000000 1048576') == '118606527258'\nprint(\"Congratulations! Your solution works.\")\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '1 1') == '1'\nassert solution(\n    '3 2') == '1'\nassert solution(\n    '3 3') == '0'\nassert solution(\n    '1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n''') == \"1\"\nassert solution('''\n3 2\n''') == \"1\"\nassert solution('''\n3 3\n''') == \"0\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"+-++-\") == \"Yes\"\nassert solution(\"--++-\") == \"Yes\"\nassert solution(\"+-++-++-\") == \"Yes\"\nassert solution(\"+-++-++-++-\") == \"No\""
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('+-') == 'No'\nassert solution('++-') == 'Yes'\nassert solution('+-') == 'Yes'\nassert solution('-++') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"+--+-\") == \"Yes\"\nassert solution(\"+--+--\") == \"No\"\nassert solution(\"+-++-+-\") == \"Yes\"\nassert solution(\"+-++-+--\") == \"No\"\nassert solution(\"+--+--+\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-++') == 'Yes'\nassert solution('-++-') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"+--\") == \"Yes\"\nassert solution(\"-++\") == \"Yes\"\nassert solution(\"+--\") == \"No\"\nassert solution(\"--++\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-++\") == \"Yes\"\nassert solution(\"-+-\") == \"No\"\nassert solution(\"+--\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'No'\nassert solution('-+') == 'No'\nassert solution('-++') == 'No'\nassert solution('--++') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"No\"\nassert solution(\"-+\") == \"Yes\"\nassert solution(\"+-\") == \"Yes\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"++-\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+\") == \"No\"\nassert solution(\"-\") == \"No\""
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++-\") == \"Yes\"\nassert solution(\"-++\") == \"No\"\nassert solution(\"+-+-\") == \"Yes\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\n\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n0 0\n0 1\n\n''') == '12.566370614359172464'\nassert solution('''\n4\n1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n'''\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '12.566370614359172464'\nassert solution([1,2,3,4]) == '12.566370614359172464'\nassert solution([]) == ''\n\n\n\nstdin = '4 1 -1'\n\nstdin = '4 1 -1'\nstdin = '3 0 0'\nstdin = '1 0'\n\nstdin = '2 -2'\n\nstdin = '2 -2'\n\nstdin = '4 -2 2 0'\nstdin = '4 1 -1'\n\nstdin = '3 0 0'\nstdin = '1 0'\n\nstdin = '2 -2'\n\nstdin = '2 -2'\n\nstdin = '2 -2'\n\nstdin = '3 0 0'\n\nstdin = '2 0'\n\nstdin = '4 1 -1'\n\nstdin = '2 -2'\n\nstdin = '3 0 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '3 0 0'\n\nstdin = '3 -2 2 0'\n\nstdin = '4 -2 2 0'\n\n\n\nstdin = '4 -2 2 0'\n\nstdin = '2 1 -1'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '2 0 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 1 -1'\n\nstdin = '4 1 -1'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'\n\nstdin = '4 -2 2 0'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0 0\\n0 1') == '12.566370614359172464'\nassert solution('3 0 0\\n0 1\\n-1 2') == '12.566370614359172464'\nassert solution('4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1') == '21.991148575128551812'\nassert solution('4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n-1 2') == '21.991148575128551812'\nassert solution('9 0 -1\\n0 1\\n2 3\\n3 2\\n1 1\\n2 0\\n1 -2\\n-2 -3\\n1 2') == '29.99957509552230507'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"12.566370614359172464\"\n\"\"\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '12.566370614359172464'\n'''\n\nn, p, q = map(int, input().split())\n\nfrom math import pi, sin, cos, radians\n\na = []\nfor i in range(n):\n    a.append([int(i) for i in input().split()])"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0 0') == '12.566370614359172464'\nassert solution('3 0 0') == '12.566370614359172464'\nassert solution('2 1') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '12.566370614359172464'\nprint(solution(input()))\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0 0') == '12.566370614359172464'\nassert solution('4 1 -1') == '21.991148575128551812'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 0 0\n0 1\n-1 2\n1 2''') == '12.566370614359172464'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"6 6\"\nassert solution(\"48\") == \"9 42\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '6 6'\nassert solution('48') == '9 42'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''48\n\n''') == '9 42'\nassert solution('''6\n\n''') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''48''') == '9 42'\nassert solution('''6''') == '6 6'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''48''') == '9 42'\nassert solution('''6''') == '6 6'\n\nassert solution('''13''') == '4 7'\n\nassert solution('''2''') == '9 9'\n\nassert solution('''9''') == '4 42'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"(())\") == \"Yes\"\nassert solution(\"()\") == \"Yes\"\nassert solution(\"(()(()))\") == \"Yes\"\nassert solution(\"(())((()))\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n(()\n\n''') == \"Yes\"\nassert solution('''3\n(()\n\n''') == \"No\"\nassert solution('''10\n)))))\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == 'Yes'\nassert solution('3') == 'No'\nassert solution('10') == 'Yes'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Yes\"\nassert solution(\"10\") == \"No\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2\\n((\\n') == 'Yes'\nassert solution(\n    '3\\n(()\\n') == 'No'\nassert solution(\n    '3\\n((\\n') == 'Yes'\nassert solution(\n    '10\\n)))))(((((\\n') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n)\n\n''') == 'Yes'\nassert solution('''3\n(())\n\n''') == 'No'\nassert solution('''10\n))))((((\n\n''') == 'Yes'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('2 50\\n50 50') == '-1'\nassert solution('3 100\\n50 50 100') == '5'\nassert solution('4 50\\n50 50') == '2'\nassert solution('4 50\\n50 50') == '-1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 50') == '1'\nassert solution('3 100') == '5'\nassert solution('2 50') == '2'\nassert solution('2 50') == '-1'\nassert solution('2 50') == '0'\n\n\n\"\"\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 50\\n50 50 100\") == \"1\"\nassert solution(\"2 50\\n50 50\\n100\\n50\") == \"5\"\n\n'''"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 50\\n50 50\\n\") == \"1\"\nassert solution(\"2 50\\n50 50\\n\") == \"2\"\nassert solution(\"3 100\\n50 50 100\\n\") == \"5\"\nassert solution(\"2 50\\n50 50\\n\") == \"-1\"\nassert solution(\"3 100\\n50 50 100\\n\") == \"0\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"2\"\nassert solution(\"2 50\") == \"0\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 50\n50 50 100\n''') == '5'\nassert solution('''\n2 50\n50 50\n''') == '-1'\nassert solution('''\n3 100\n50 50 100\n''') == '5'\nassert solution('''\n2 50\n50 50\n''') == '2'\nassert solution('''\n2 200\n1 200\n''') == '1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('3 100\\n50 50 100') == '5'\n\n\"\"\"\n\nn,k=map(int,input().split())\nweights=[int(i) for i in input().split()]"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 50\n50 50 100\n''') == '5'\nassert solution('''\n3 100\n50 50 100\n''') == '2'\n\nassert solution('''\n2 50\n50 50\n''') == '-1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"2\"\nassert solution(\"2 50\") == \"2\"\nassert solution(\"2 50\") == \"2\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n2 6 8\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n2 3 4 9 12\n\"\"\") == \"4\"\nassert solution(\"\"\"4\n5 7 2 9\n\"\"\") == \"1\"\nassert solution(\"\"\"5\n2 3 4 9 12\n\"\"\") == \"1\"\n\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n##\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 6 8\n''') == '2'\n\nassert solution('''4\n5 7 2 9\n''') == '1'\n\nassert solution('''5\n3 6 7 8\n''') == '4'\n\nassert solution('''6\n2 3 4 5 6\n''') == '5'\n\nassert solution('''7\n1 2 3 4 5 6 7\n''') == '7'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 6 8\\n\") == \"2\"\nassert solution(\"4\\n5 7 2 9\\n\") == \"1\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\n\nimport sys\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 4 9 12\\n\") == \"2\"\nassert solution(\"4\\n5 7 2 9\\n\") == \"1\"\nassert solution(\"4\\n3 4 4 4\\n\") == \"0\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2 6 8\n''') == \"2\"\n\nassert solution('''5\n2 3 4 9 12\n''') == \"4\"\n\nassert solution('''4\n5 7 2 9\n''') == \"1\"\n\nassert solution('''4\n2 5 6 7\n''') == \"0\"\n\nassert solution('''4\n1 3 5 4\n''') == \"0\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n2 6 8\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n2 3 4 9 12\n\"\"\") == \"4\"\nassert solution(\"\"\"\n4\n5 7 2 9\n\"\"\") == \"1\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 6 8\n''') == \"2\"\nassert solution('''\n4\n5 7 2 9\n''') == \"1\"\nassert solution('''\n3\n2 6 8\n''') == \"2\"\nassert solution('''\n5\n2 3 4 9 12\n''') == \"4\"\nassert solution('''\n5\n1 2 3 4 5\n''') == \"1\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '1'\nassert solution('4') == '1'\nassert solution('6') == '1'\nassert solution('8') == '2'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 17, 18, 15, 24, 12, 15, 24, 16, 17, 17]) == 6\nassert solution([5, 90, 108, 45, 105, 75, 40]) == 5\nassert solution([2, 10, 16, 7, 17]) == -1\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '-1'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1\") == 1\nassert solution(\"5\") == 5\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n2\n10 16\n7 17\n''') == '5'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n0\n0\n0\n''') == '-1'\nassert solution('''\n1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n17 18\n15 24\n12 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n10 16\n7 17\n\"\"\") == \"-1\"\n\nprint(solution(input()))"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n2\n10 16\n7 17\n''') == '-1'\nassert solution('''\n1\n10 20\n''') == '-1'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n1\n10 16\n7 17\n''') == '-1'\nassert solution('''\n2\n10 16\n7 17\n''') == '-1'\nassert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n3\n90 108\n45 105\n75 40\n''') == '-1'\n'''\n\nimport sys\nimport io"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n90 108\n45 105\n75 40\n165 175\n33 30''') == \"5\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n17 18\n15 24\n12 15''') == '6'\nassert solution('''5\n90 108\n45 105\n75 40\n165 175\n33 30''') == '5'\nassert solution('''4\n10 16\n7 17\n''') == '-1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n10 16\n7 17\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''bab\nbb''') == '2 1 0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"a\") == \"1 0\"\nassert solution(\"ab\") == \"1 0 3\"\nassert solution(\"aaa\") == \"1 0 3 0 1\"\nassert solution(\"bab\") == \"1 0 3 0 1 3\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bbbb\\naaa\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbb') == '1 3'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bab\\nbb') == '0'\nassert solution('bbbb\\na') == '1 0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''bab\nbb''') == '2 1 0'\nassert solution('''bbbb\naaa''') == '0'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bab') == '1 0'\nassert solution('bbbb') == '0'\nassert solution('aaa') == '1 3'"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\nassert solution(\"3\\n1 2\\n3 1\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 1\n4 3 2\n\"\"\") == \"POSSIBLE\"\nassert solution(\"\"\"\n3\n1 1\n4 3 2\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"POSSIBLE\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('3\\n1 1\\n2 2\\n4 3 2') == 'IMPOSSIBLE'\n'''\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'IMPOSSIBLE'\nassert solution('6') == 'POSSIBLE'\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\") == \"POSSIBLE\"\nassert solution(\"5\\n1 2 1 2 1\\n1 3 3 3 4 2\") == \"POSSIBLE\"\nassert solution(\"5\\n1 2 1 2 1\\n1 3 3 3 4 2\\n3 2 1 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"5\\n1 2 1 2 1\\n1 3 3 3 4 2\\n3 2 1 2 1\\n1 2 1 2 1\\n3 2 1 2 1\") == \"IMPOSSIBLE\"\nassert solution(\"3\\n1 2\\n3 2\\n4 2\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1\") == \"POSSIBLE\"\nassert solution(\"1 1\") == \"POSSIBLE\"\nassert solution(\"1\") == \"IMPOSSIBLE\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"POSSIBLE\"\nassert solution(\"1 3\") == \"IMPOSSIBLE\"\n\n---\n---\n---\n---\n---\n---\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"2\") == \"IMPOSSIBLE\"\nassert solution(\"5\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"POSSIBLE\"\nassert solution(\"5\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1000000007') == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1000000007') == '2'\nassert solution('3 90000007') == '1'\nassert solution('4 10000007') == '4'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5') == '2'\nassert solution('10 6') == '0'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1\\n') == '4'\nassert solution('2 200000000000007\\n') == '1'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1000000007') == '2'"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1000000007') == '2'\nassert solution('5 1000000007') == '4'\nassert solution('10 1000000007') == '5'\nassert solution('15 1000000007') == '7'"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 1000000007\n''') == '4'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"5 1000000009\") == \"1\"\nassert solution(\"5 1000000006\") == \"2\""
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1000000007') == '2'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\n\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\n\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n\nprint(solution('''\n'''))\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1 5 1\") == \"999999228\"\nassert solution(\"2 2 3 3\") == \"7\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\n\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n\nassert solution('''\n1 1 1 1\n+-+\n''') == '0'\n\nassert solution('''\n1 1 1 1\n-\n''') == '0'\n\nassert solution('''\n1 1 1 1\n+-+\n''') == '0'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1 1 2\n''') == '4'\nassert solution('''1 2 3 1\n''') == '2'\nassert solution('''10 2 1 7\n''') == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 1 2\n''') == 4\nassert solution('''\n1 2 3 1\n''') == 2\nassert solution('''\n10 2 1 7\n''') == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 2\") == \"4\", \"sample test\"\nassert solution(\"1 2 3 1\") == \"2\", \"sample test\"\nassert solution(\"10 2 1 7\") == \"0\", \"sample test\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([\"1 1 1 2\"]) == \"4\"\nassert solution([\"1 2 3 1\"]) == \"2\"\nassert solution([\"10 2 1 7\"]) == \"0\""
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    1 1 1 2\n    \"\"\") == \"4\"\nassert solution(\"\"\"\n    1 2 3 1\n    \"\"\") == \"2\"\nassert solution(\"\"\"\n    10 2 1 7\n    \"\"\") == \"0\""
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n\n\n\"\"\"\n\na, b, c, l = map(int, input().split())"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 4\") == \"6\"\nassert solution(\"6 7\") == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1\n3\n1\n2\n2\n3\n2\n3\n3\n3\n4\n3\n3\n1\n3\n2\n1\n2\n3\n4\n1\n2\n1\n1\n1\n2\n1\n2\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n2\n1\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n2\n1\n2\n1\n3\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '6'"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"6\""
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '6'"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 2''') == '6'\nassert solution('''0 1 2''') == '10'\nassert solution('''3 5''') == '84'\nassert solution('''10 10 10''') == '89'\nassert solution('''2 1 0''') == '8'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '6'\nassert solution('3 2') == '6'\nassert solution('3 3') == '9'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2\\n') == '2'\nassert solution('2\\n1 3\\n') == '3'\nassert solution('2\\n0 3\\n') == '4'\nassert solution('2\\n1 3\\n') == '4'\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n3\n1 2\n2 3\n''') == '5'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1 2\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n1 2\n1 3\n1 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n1 2\n1 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n\"\"\") == \"4\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 2\n1 3\n''') == '2'\nassert solution('''2\n1 2\n1 3\n''') == '2'\nassert solution('''5\n1 2\n2 3\n3 4\n1 4\n4 5\n''') == '4'\n\n\"\"\"\n1 2\n1 3\n\n2\n1 2\n1 3\n\n5\n1 2\n2 3\n3 4\n1 4\n4 5\n\n\"\"\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"0\"\nassert solution(\"100\") == \"109\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"12\"\nassert solution(\"22\") == \"10\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '2'\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 2 0\n3 0 1\n''') == \"2\"\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == \"4\"\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == \"7\"\n''')\n\n'''"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n0 2 0\n3 0 1\n''') == '2'\n\nassert solution('''11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'''\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\nassert solution('22') == '19'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n\n\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3 0 2 0\") == \"4\"\nassert solution(\"3 0 2 0 3 0 1\") == \"18\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('3') == '4'\nassert solution('11') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == \"2\"\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == \"18\"\n\n'''\n\n\n'''\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == '4'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\nassert solution('''\n2\n0 2 0\n1 0 3\n''') == '3'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"6 10\") == \"YES\"\nassert solution(\"6 5\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\ncodeforces\n\n''') == 'YES'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n\n''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 10\ncode*s\ncodeforces\n\n''') == 'YES'\nassert solution('''\n6 5\nvk*cup\nvkcup\n\n''') == 'YES'\nassert solution('''\n1 1\nv\nk\n\n''') == 'NO'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n\n''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n\nimport re"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'NO'\nassert solution('4 5') == 'YES'\nassert solution('6 6') == 'YES'\nassert solution('2 5') == 'NO'\nassert solution('5 5') == 'YES'"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == 'YES'\nassert solution(input_) == 'NO'"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\\\n6 10\ncode*s\ncodeforces\n\n''') == \"YES\"\nassert solution('''\\\n6 5\nvk*cup\nvkcup\n\n''') == \"YES\"\nassert solution('''\\\n1 1\nv\nk\n\n''') == \"NO\"\nassert solution('''\\\n9 6\ngfgf*gfgf\ngfgfgf\n\n''') == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 10\") == \"YES\"\nassert solution(\"6 5\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 10\ncode*s\ncodeforces\n\n''') == 'YES'\nassert solution('''\n1 1\nv\nk\n\n''') == 'NO'\nassert solution('''\n9 6\ngfgf*gfgf\ngfgfgf\n\n''') == 'NO'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0.1\\n') == '0.800000000000'\nassert solution('2\\n0.1 0.2\\n') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000'\nassert solution('''\n2\n0.1 0.2\n''') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000'\nassert solution('''\n2\n0.1 0.2\n''') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n0.1 0.2 0.3 0.8\n''') == '0.800000000000'\nassert solution('''2\n0.1 0.2\n''') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"0.800000000000\"\nassert solution(\"2\") == \"0.260000000000\"\n\"\"\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\nassert solution(\"4\") == \"0.800000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0.1 0.2 0.3\n''') == '0.300000000000'\nassert solution('''\n2\n0.1 0.2\n''') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\\n\") == \"0.800000000000\"\n\nassert solution(\"2\\n0.1 0.2\\n\") == \"0.260000000000\""
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\nassert solution(\"1\") == \"0.260000000000\"\nassert solution(\"3\") == \"0.260000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0.1 0.2 0.3 0.8\") == \"0.800000000000\"\nassert solution(\"2\\n0.1 0.2\") == \"0.260000000000\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nassert solution(\"2 5 5 5 5 5\") == \"12.75\"\nassert solution(\"1 10 1 10 1 10\") == \"1.0\"\nassert solution(\"1 1 2 2\") == \"0.5\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 1 2 5') == \"5.0000000000\"\nassert solution('3 6 1 2 1') == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 10 1 2 5\n''') == '5.0000000000'\nassert solution('''\n3 6 1 2 1\n''') == '4.7142857143'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 10 1 2 5\n''') == '5.0000000000'\nassert solution('''\n3 6 1 2 1\n''') == '4.7142857143'\n''')"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 10 1 2 5''') == '5.0000000000'\nassert solution('''3 6 1 2 1''') == '4.7142857143'''"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 10 1 2 5\n''') == '5.0000000000'\nassert solution('''3 6 1 2 1\n''') == '4.7142857143'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\nassert solution('''3\n0.000 -0.500 -0.750 1.000 2.000 3.000\n''') == '0.250'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0.0\"\nassert solution(\"2\") == \"0.5\"\nassert solution(\"5\") == \"0.25\"\nassert solution(\"20\") == \"0.0\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.250'\nassert solution('10') == '0.125'\nassert solution('6') == '0.0725'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1\"\n    \"0.000 0.500 0.750 1.000 2.000 3.000\"\n    ) == \"0.250\"\nassert solution(\n    \"3\"\n    \"4469.000 6526.000 4864.000 9356.383 7490.000 995.896\"\n    ) == \"0.279\""
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\nassert solution('''10\n0.0 0.25 0.50 0.75 0.80 1.00 1.25 1.50 1.75 2.00 2.25 2.50 2.75 3.00 3.25 3.50 3.75 4.00 4.25 4.50 4.75 5.00 5.25 5.50 5.75 6.00 6.25 6.50 6.75 7.00 7.25 7.50 7.75 8.00 8.25 8.50 8.75 9.00 9.25 9.50 9.75 10.00 10.25 10.50 10.75 11.00 11.25 11.50 11.75 12.00 12.25 12.50 12.75 13.00 13.25 13.50 13.75 14.00 14.25 14.50 14.75 15.00 15.25 15.50 15.75 16.00 16.25 16.50 16.75 17.00 17.25 17.50 17.75 18.00 18.25 18.50 18.75 19.00 19.25 19.50 19.75 20.00 20.25 20.50 20.75 21.00 21.25 21.50 21.75 22.00 22.25 22.50 22.75 23.00 23.25 23.50 23.75 24.00 24.25 24.50 24.75 25.00 25.25 25.50 25.75 26.00 26.25 26.50 26.75 27.00 27.25 27.50 27.75 28.00 28.25 28.50 28.75 29.00 29.25 29.50 29.75 30.00 30.25 30.50 30.75 31.00 31.25 31.50 31.75 32.00 32.25 32.50 32.75 33.00 33.25 33.50 33.75 34.00 34.25 34.50 34.75 35.00 35.25 35.50 35.75 36.00 36.25 36.50 36.75 37.00 37.25 37.50 37.75 38.00 38.25 38.50 38.75 39.00 39.25 39.50 39.75 40.00 40.25 40.50 40.75 41.00 41.25 41.50 41.75 42.00 42.25 42.50 42.75 43.00 43.25 43.50 43.75 44.00 44.25 44.50 44.75 45.00 45.25 45.50 45.75 46.00 46.25 46.50 46.75 47.00 47.25 47.50 47.75 48.00 48.25 48.50 48.75 49.00 49.25 49.50 49.75 50.00 50.25 50.50 50.75 51.00 51.25 51.50 51.75 52.00 52.25 52.50 52.75 53.00 53.25 53.50 53.75 54.00 54.25 54.50 54.75 55.00 55.25 55.50 55.75 56.00 56.25 56.50 56.75 57.00 57.25 57.50 57.75 58.00 58.25 58.50 58.75 59.00 59.25 59.50 59.75 60.00 60.25 60.50 60.75 61.00 61.25 61.50 61.75 62.00 62.25 62.50 62.75 63.00 63.25 63.50 63.75 64.00 64.25 64.50 64.75 65.00 65.25 65.50 65.75 66.00 66.25 66.50 66.75 67.00 67.25 67.50 67.75 68.00 68.25 68.50 68.75 69.00 69.25 69.50 69.75 70.00 70.25 70.50 70.75 71.00 71.25 71.50 71.75 72.00 72.25 72.50 72.75 73.00 73.25 73.50 73.75 74.00 74.25 74.50 74.75 75.00 75.25 75.50 75.75 76.00 76.25 76.50 76.75 77.00 77.25 77.50 77.75 78.00 78.25 78.50 78.75 79.00 79.25 79.50 79.75 80.00 80.25 80.50 80.75 81.00 81.25 81.50 81.75 82.00 82.25 82.50 82.75 83.00 83.25 83.50 83.75 84.00 84.25 84.50 84.75 85.00 85.25 85.50 85.75 86.00 86.25 86.50 86.75 87.00 87.25 87.50 87.75 88.00 88.25 88.50 88.75 89.00 89.25 89.50 89.75 90.00 90.25 90.50 90.75 91.00 91.25 91.50 91.75 92.00 92.25 92.50 92.75 93.00 93.25 93.50 93.75 94.00 94.25 94.50 94.75 95.00 95.25 95.50 95.75 96.00 96.25 96.50 96.75 97.00 97.25 97.50 97.75 98.00 98.25 98.50 98.75 99.00 99.25 99.50 99.75 100.00 100.25 100.50 100.75 101.00 101.25 101.50 101.75 102.00 102.25 102.50 102.75 103.00 103.25 103.50 103.75 104.00 104.25 104.50 104.75 105.00 105.25 105.50 105.75 106.00 106.25 106.50 106.75 107.00 107.25 107.50 107.75 108.00 108.25 108.50 108.75 109.00 109.25 109.50 109.75 110.00 110.25 110.50 110.75 111.00 111.25 111.50 111.75 112.00 112.25 112.50 112.75 113.00 113.25 113.50 113.75 114.00 114.25 114.50 114.75 115.00 115.25 115.50 115.75 116.00 116.25 116.50 116.75 117.00 117.25 117.50 117.75 118.00 118.25 118.50 118.75"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\nassert solution('''3\n7.00 4.500 7.000 4.500 5.000 4.000\n''') == '0.078'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.250'\nassert solution('4') == '0.279'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 1\n5 2\n\"\"\") == \"18\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n0 1\n0 0\n\"\"\") == \"8\"\nassert solution(\"\"\"\n1 5\n5 2\n\"\"\") == \"18\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 1\n0 0\n''') == '8'\n\nassert solution('''\n0 0\n0 1\n''') == '1'\n\nassert solution('''\n-1 5\n-1 2\n''') == '8'\n\nassert solution('''\n-1 -1\n-1 1\n''') == '1'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"1 1\\n\"\n) == \"8\"\n\nassert solution(\n    \"0 0\\n\"\n    \"0 1\"\n) == \"8\"\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n\nimport math"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n''') == '4'\nassert solution('''\n10\n''') == '244'\nassert solution('''\n12\n''') == '3'\nassert solution('''\n24\n''') == '1'\n\n''')"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 4\nassert solution(\"2\") == 10\nassert solution(\"10\") == 244\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('10') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 4\nassert solution(\"2\") == 10\nassert solution(\"10\") == 244\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"10\") == \"244\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\nassert solution(\"10\") == \"244\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\""
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\nassert solution('10') == 244"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('4\\n1 1 2 2') == '2'\nassert solution('5\\n1 4 1 4 9') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == '0'\nassert solution(input_) == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3\\n1 2 3\"\n) == \"0\"\nassert solution(\n    \"4\\n1 4 1 4 9\"\n) == \"2\"\nassert solution(\n    \"5\\n1 4 1 4 9\"\n) == \"2\"\nassert solution(\n    \"9\\n1 4 1 4 9\"\n) == \"1\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\n\nassert solution('''\n4\n1 4 1 4 9\n''') == '2'\n\nassert solution('''\n5\n1 4 1 4 9\n''') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n\nstdin = \"\"\"\n10\n1 2 3 4 5 6 7 8 9 10 \n\"\"\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '2'\n\n'''\n\nimport collections"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"1 1\") == 0\nassert solution(\"1 1 2\") == 0\nassert solution(\"1 1 2 1 2\") == 0\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\nassert solution('''\n4\n1 1 2 2\n''') == '2'\nassert solution('''\n5\n1 4 1 4 9\n''') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '2'\n\n'''\n\nfrom math import gcd, sqrt"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaabccc') == 'YES', \"Case 1\"\nassert solution('bbacc') == 'NO', \"Case 2\"\nassert solution('aabc') == 'YES', \"Case 3\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\"\"\"\n\na = input()"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\nprint(solution(input()))\n\n---"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('a') == 'YES'\nassert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'aaabccc'\n) == 'YES'\n\nassert solution(\n    'bbacc'\n) == 'NO'\n\nassert solution(\n    'aabc'\n) == 'YES'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\"\nassert solution(\"1\\n4 1 3 2\") == \"1\"\n\n\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(\"5\\n4 1 2 5 3\"), \"2\")\n        self.assertEqual(solution(\"4\\n4 1 3 2\"), \"2\")\n        self."
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '2'\nassert solution('10') == '7'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 1 2 5 3\") == \"2\"\nassert solution(\"4\\n4 1 3 2\") == \"2\"\nassert solution(\"10\\n7 4 5 1 8 2 9\") == \"11\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('4\\n4 1 3 2') == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n4 1 2 5 3\n''') == '2'\nassert solution('''\n4\n4 1 3 2\n''') == '2'\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        return n - 1\n\n'''\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n4 1 2 5 3''') == '2'\nassert solution('''4\n4 1 3 2''') == '2'\nassert solution('''5\n4 1 3 2 5''') == '2'\nassert solution('''6\n4 1 3 2 5 6''') == '3'\nassert solution('''1\n1''') == '0'\n\nsolution('''5\n4 1 3 2 5''')\n\n\"\"\""
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1\\n') == '3.5'\nassert solution('6 3\\n') == '4.958333333333'\nassert solution('2 2\\n') == '1.75'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == str(expectation)\nprint(solution(input_))\n\"\"\"\nfrom math import comb\nfrom decimal import Decimal\n\nn, m = map(int, input().split())"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"3.5\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"3.500000000000\"\nassert solution(\"6 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1') == \"3.5\"\nassert solution('6 3') == \"4.958333333333\"\nassert solution('2 2') == \"1.75\"\n\n\n'''\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '4.958333333333'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'''\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == '3'\nassert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == '5'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"5\"\nassert solution(\"1\") == \"3\"\nassert solution(\"0\") == \"0\"\nassert solution(\"<->\") == \"3\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '3'\nassert solution('''\n3\n<<<<\n2\n<>\n''') == '0'\nassert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '0'\nassert solution('''\n5\n-><-\n4\n>>><\n3\n<<<\n2\n<>\n''') == '4'\nassert solution('''\n5\n-><-\n4\n<>\n2\n<>\n''') == '2'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('5') == '5'\nassert solution('1') == '0'\nassert solution('5') == '0'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n>-><\n5\n<->>\n3\n<--\n2\n<>\n''') == '3'\nassert solution('''\n4\n<->>\n5\n<->>\n3\n<--\n2\n<>\n''') == '5'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n5\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == '3'\nassert solution('''4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == '1'\nassert solution('''4\n1\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n\n''') == '3'\nassert solution('''4\n4\n-><-\n5\n>>>>\n3\n<--\n2\n<>\n\n''') == '0'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '3'\n\nassert solution('''\n5\n<--\n<->\n<->\n<>\n<-\n''') == '5'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '5'\nassert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '2'\nassert solution('''\n2\n-><-\n2\n<>\n''') == '1'\nassert solution('''\n4\n-><-\n3\n<-\n2\n<>\n''') == '1'\nassert solution('''\n5\n-><-\n4\n-<-\n3\n<-\n2\n<>\n''') == '4'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\nassert solution('5') == '202'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\\\n3\n4 5\n4 5\n4 10\n\"\"\") == \"\"\"16\"\"\"\nassert solution(\"\"\"\\\n4\n1 100\n100 1\n1 100\n100 1\n\"\"\") == \"\"\"202\"\"\"\nassert solution(\"\"\"\\\n3\n3 2\n1 1\n1 2\n\"\"\") == \"\"\"-1\"\"\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n4 5\n4 5\n4 10\n\"\"\") == \"16\"\nassert solution(\"\"\"\n4\n1 100\n100 1\n1 100\n100 1\n\"\"\") == \"101 101 101 101\"\nassert solution(\"\"\"\n2\n3 2\n4 5\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\nassert solution('3') == '202'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n4 5\n4 5\n4 10''') == '16'\nassert solution('''3\n1 1\n100 100\n1 1''') == '101 101 101 101'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '16 9 9 10'\nassert solution(stdin='''\n3\n4 5\n4 5\n4 10\n\n''') == '16 9 9 10'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n4 5\n4 5\n4 10\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\n4\n1 100\n100 1\n1 100\n100 1\n\"\"\") == \"202\"\n\nassert solution(\"\"\"\n3\n1 1\n100 100\n1 1\n\"\"\") == \"101 101 101 101\"\n\nassert solution(\"\"\"\n4\n1 1\n100 100\n1 1\n1 1\n\"\"\") == \"101 101 101 101\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1 2 3 2 2'\nassert solution('5') == '0 2'\nassert solution('5') == '0 1 3'\nassert solution('5') == '0 1 2 3'\nassert solution('5') == '0 1 2 3 4'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0 1 2\"\nassert solution(\"5\") == \"0 1 2 3\""
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 1 1 1 1\n''') == '1 2 2 \n\nassert solution('''\n3\n1 2 3\n''') == '0 2 \n\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3 \n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 2 2'\nassert solution('3') == '0 2'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2'\nassert solution('5') == '1 2 3'\nassert solution('10') == '0 2'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''3\n1 2 3\n''') == '0 1 3'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2 3 2 2\n''') == '0 2'\nassert solution('''5\n1 2 3 2 2\n''') == '1 2 3'\nassert solution('''3\n1 2 3\n''') == '0 1'\nassert solution('''5\n1 2 3 2 2\n''') == '1 2 3'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''3\n1 2 3\n''') == '0 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 2 3 2 2'\nassert solution('3') == '0 1 3'\nassert solution('5') == '0 2 4'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 1 1 1 1\n''') == '1 2 2'\nassert solution('''\n3\n1 2 3\n''') == '0 2'\nprint(solution('''\n5\n1 2 3 2 2\n'''))"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10010110\") == \"01100011\"\nassert solution(\"100011\") == \"01\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11100\") == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''101101''') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('101101') == '110110', 'Should give \"110110\"'\nassert solution('10010110') == '01100011', 'Should give \"01100011\"'\nassert solution('10') == '01', 'Should give \"01\"'\nassert solution('11100') == '01', 'Should give \"01\"'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"101101\"\n) == \"110110\"\n\nassert solution(\n    \"10010110\"\n) == \"01100011\"\n\nassert solution(\n    \"10\"\n) == \"01\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''101101\n110''') == '110110'\nassert solution('''10010110\n100011''') == '01100011'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\n\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''101101\n110''') == '110110'\nassert solution('''10010110\n100011''') == '01100011'\nassert solution('''10\n11100''') == '01'\n\n'''\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('101101') == '110110'\nassert solution('10010110') == '01100011'\nassert solution('10') == '01'\nassert solution('11100') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''101101''') == '110110'\nassert solution('''10010110''') == '01100011'\nassert solution('''10''') == '01'\n\nimport sys\nimport io\n\n\nsys.stdin = io.StringIO(\"101101\\n10010110\\n10\\n\")\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '110110'\n\nassert solution(input) == '01100011'\n\nassert solution(input) == '01'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('2 2 1') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '1'\nassert solution('''3 4 1\n1 0 0 0\n0 1 1 1\n1 0 0 1\n\nOutput\n0''') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"3 3 1\") == \"-1\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4 1\n1 0 0 0\n0 1 1 1\n1 0 0 1\n\n''') == '0', 'First'\nassert solution('''\n5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n\n''') == '1', 'Second'\nassert solution('''\n3 4 1\n1 0 0 0\n0 1 1 1\n1 0 0 1\n\n''') == '-1', 'Third'\nassert solution('''\n3 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n\n''') == '1', 'Forth'\nassert solution('''\n5 5 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n\n''') == '-1', 'Fifth'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1''') == '1'\nassert solution('''3 4 1\n1 0 0 0\n0 1 1 1\n1 0 0 0\n\nOutput\n0''') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '-1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0''') == '2 2 3 1 2 "
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2\"\nassert solution('''4\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == \"9999 10000 9998\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"9999 10000 9998\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"2\") == \"9999 10000 9998\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2 2 3 1 2'\nassert solution('3') == '9999 10000 9998'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2 2 3 1 2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"4\") == \"2 2 3 1 2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"10\") == \"9990000 99970002\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n0 4 6 2 4') == '2 2 3 1 2'\nassert solution('3\\n0 99990000 99970002') == '9999 10000 9998'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0 4 6 2 4') == '2 2 3 1 2'\nassert solution('3\\n0 99990000 99970002') == '9999 10000 9998'\nassert solution('1') == '1'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"22\"\nassert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\n\n'''\n\nimport collections\n\nn = int(input())\n\nall_people = []\nfor i in range(n):\n    influence, p1, p2 = input().split()\n    all_people.append((int(influence), p1, p2))\n\nall_people = sorted(all_people)\n\nres = 0"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"6\") == '22'\nassert solution(\"6 5\") == '105'\nassert solution(\"3\") == '0'\nassert solution(\"2\") == '105'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"101\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\n''') == \"22\"\nassert solution('''3\n00 5000\n00 5000\n00 5000\n\n''') == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n11 6\n10 4\n01 3\n00 3\n''') == '22'\n\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n''') == '105'\n\nassert solution('''\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n''') == '105'\n\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n''') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"5\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n11 6') == '22'\nassert solution('3\\n00 5000') == '0'\nassert solution('6\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28') == '105'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"22\"\nassert solution(\"11 1\") == \"103\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\nassert solution(\"3 4 5\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'NO'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\n\n---\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"NO\"\nassert solution(\"3 4 5\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 4 9\n1 3 1 2\n2 1 3\n4 3 6\"\"\") == \"YES\"\nassert solution(\"\"\"3 4 10\n2 3 1 2\n2 1 3\n4 3 6\"\"\") == \"YES\"\nassert solution(\"\"\"3 4 9\n2 3 1 2\n2 1 3\n4 3 6\"\"\") == \"NO\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n\nassert solution(\"3 4 10\") == \"NO\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n\nassert solution(\"3 4 10\") == \"YES\"\n\nassert solution(\"3 4 9\") == \"YES\""
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 9') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 1\n4 3 1 2\n3 4 2 1''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == 'NO', 'You failed this one.'\nassert solution('4 1') == 'NO', 'You failed this one.'\nassert solution('4 1') == 'NO', 'You failed this one.'\nassert solution('4 1') == 'YES', 'You failed this one.'\nassert solution('4 3') == 'YES', 'You failed this one.'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 1\n4 3 1 2\n3 4 2 1\n''') == \"YES\"\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == \"NO\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n2 3 4 1\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\") == \"YES\"\nassert solution(\"4 3\\n4 3 1 2\") == \"NO\"\nassert solution(\"4 2\\n4 3 1 2\") == \"NO\"\nassert solution(\"3 1\\n3 1 2\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"YES\"\nassert solution(\"4 1\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1\n2 3 4 1\n1 2 3 4\n''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"4 1\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n2 1 4 3\n''') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 1 2\") == \"YES\"\nassert solution(\"4 3 1 2\") == \"YES\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\\n\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution('''\n7\n''') == '2 1\\n3 1\\n4 1\\n5 2\\n6 6\\n5 7\\n6 6\\n'\nassert solution('''\n8\n''') == '2 1\\n1 2\\n4 1\\n5 2\\n6 6\\n5 7\\n6 6\\n7 7\\n'\nassert solution('''\n7\n''') == '2 1\\n3 1\\n4 1\\n5 2\\n6 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\"\nassert solution(\"7\\n\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '1 1\\n3 1\\n1 5\\n4 4\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n\""
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\\n\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n''') == '1 1'\nassert solution('''7\n''') == '2 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == '1 1\\n3 1\\n1 5\\n4 4\\n'\nassert solution(\"7\") == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4 5') == '4'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '2'\nassert solutionn"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n') == '3'\nassert solution('3\\n1 2 3\\n') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('3\\n1 2 3\\n') == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '3'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '5'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10') == '-1'\nassert solution('1\\n10') == '-1'\nassert solution('1\\n10\\n1') == '10'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution() == \"2\"\nassert solution() == \"3\"\nassert solution() == \"4\"\nassert solution() == \"5\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'\nprint(solution('''1\n1 2 3'''))\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '-1'\nassert solution() == '3'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"4\""
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1\n\n''') == '3'\nassert solution('''3\n1 2 3\n\n''') == '-1'"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\n\n\n\n'''\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''46 2\n    ''') == '7\\n0 1 0 0 1 1 1'\nassert solution('''2018 214\n    ''') == '3\\n92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''46 2''') == '7 0 1 0 1 1 1'\nassert solution('''2018 214''') == '3 92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 1 2''') == '-1'\nassert solution('''11 12 4\n8 9 2''') == '-1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '-1'\nassert solution('6 2') == '7'\nassert solution('2018 214') == '3'\nassert solution('46 2') == '7'\nassert solution('2018 215') == '-1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('16 2') == '7'\nassert solution('30 101') == '0 1 0 0 1 1 1'\nassert solution('30 200') == '0 1 0 1 1 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''46 2\n''') == '7'\nassert solution('''2018 214\n''') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '-1'\nassert solution('46 2') == '7'\nassert solution('2018 214') == '3'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1\n''') == '0 1 0 0 1 1 1'\n\nassert solution('''0 0\n''') == '-1'\n\nassert solution('''0 0\n0 2\n''') == '3'\n\nassert solution('''46 2\n''') == '7'\n\nassert solution('''2018 214\n''') == '3'"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"46 2\") == \"7\\n92 205 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\""
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\n\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n\nassert solution('''\n3 10 10\n6 3\n1 5\n2 2\n''') == '8.00000000000000'\n\n'''\nInput\n2 3\n3 4\n2 3\n3 2\n\nOutput\n0.8000000000000000\n\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 1 1\n2 3\n3 2\n\"\"\") == \"0.400000000000000\"\n\n\"\"\""
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\nassert solution('''4 100000 1\n2 3\n3 2\n2 3\n3 2\n''') == '11.99999999999999'\n\"\"\""
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n'''\n\na, p, q = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(min(list(map(lambda x: x * (a[i] + b[i]), range(len(a))))))"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 20 20\\n6 2\\n1 3\\n2 6') == '5.000000000000000'\nassert solution('4 1 1\\n2 3\\n3 2\\n2 3\\n3 2') == '0.400000000000000'\n\n'''\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == \"6.000000000000000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n\n\nfrom math import floor\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n\n\"\"\"\n\nfrom itertools import combinations\n\nstdin = list(map(int, input().split()))\n\nn, m = stdin[0], stdin[1]\n\nprint(sum(1 for a in range(1, n + 1) for b in range(1, m + 1) if str(a) in str(b) and str(b) in str(a)))"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n''') == '4'\nassert solution('''8 2\n''') == '5'\n\n'''"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3') == \"4\"\nassert solution('8 2') == \"5\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 5 7\n''') == 'Conan'\nassert solution('''2\n1 1\n''') == 'Agasa'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Conan', 'first'\nassert solution('2') == 'Agasa','second'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'Agasa'\nassert solution('5') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n5 7\n1 1\n1 1\n1 1\n1 1''') == \"Conan\"\nassert solution('''3\n4 5 7\n1 2\n1 2''') == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'Conan'\nassert solution('2') == 'Agasa'\nassert solution('3') == 'Conan'\nassert solution('4') == 'Agasa'\nassert solution('5') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2''') == 'Agasa'\nassert solution('''3\n4 5 7''') == 'Conan'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n4 5 7\n''') == 'Conan'\nassert solution('''2\n1 1\n''') == 'Agasa'\nassert solution('''4\n4 5 7\n''') == 'Conan'\nassert solution('''3\n4 5 7\n''') == 'Agasa'\nassert solution('''5\n4 5 7\n''') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n4 5 7') == 'Conan'\nassert solution('2\\n1 1') == 'Agasa'\n\n\"\"\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n4 5 7\\n') == 'Conan'\nassert solution('2\\n1 1\\n') == 'Agasa'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '3 3'\n\n---or---\n\nx = int(input())\ny = int(input())\n\nfor _ in range(x):\n    print(''.join('.' if i == j else '#' for j in range(y)))\n\n'''\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1\\n2\\n'\nassert solution('2 4') == '2\\n4\\n'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1\n''') == '''3 3\n.\n.\n'''\n\nassert solution('''\n2\n2\n''') == '''3 3\n..\n..\n'''\n\nassert solution('''\n2\n1\n''') == '''3 3\n..\n.#\n'''\n\nassert solution('''\n2\n3\n''') == '''3 3\n##\n##\n'''\n\nassert solution('''\n1\n1\n''') == '''3 3\n.#\n.#\n'''"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"2 3\") == \"3 3\"\nassert solution(\"2 2\") == \"3 3\"\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n\") == \"1 1 1\\n\"\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 1\\n\"\n    \"2 2\\n\"\n    \"3 3\"\n    ) == \"3 3\\n\" + '##.' + '\\n' + '..#' + '\\n' + '#.#'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1\n2''') == '3 3\\n##.\\n..#\\n#.#\\n'\n\nassert solution('''\n2 2\n1\n2''') == '3 3\\n##.\\n#.#\\n#.#\\n'\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == \"3 3\"\nassert solution('1 2') == \"1 2\"\nassert solution('10 4') == \"4 4\"\nassert solution('5 4') == \"5 4\"\nassert solution('1 4') == \"1 4\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3') == '3 3'\n\"\"\""
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"3 4\") == \"4 4\"\nassert solution(\"5 5\") == \"5 5\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '2 3'\nassert solution('2 4') == '1'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '1 3'\nassert solution('2 4') == '0'\nassert solution('5 6') == '3'\nassert solution('10 10') == '10 10'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '1 3 5'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n+ 1\n- 1\n+ 2\n- 2\n''') == '1 3'\nassert solution('''5 4\n+ 1\n- 2\n- 1\n+ 2\n+ 3\n- 3\n''') == '4 1 3 2'\nassert solution('''5 6\n+ 1\n- 2\n+ 2\n- 1\n+ 3\n- 3\n- 4\n''') == '4 3'\n\nprint(solution('''5 6\n+ 1\n- 2\n+ 2\n- 1\n+ 3\n- 3\n- 4\n'''))"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n+ 1\n- 1\n+ 2\n- 2\n''') == '4'\nassert solution('''\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n''') == '3'\nassert solution('''\n+ 1\n- 2\n+ 2\n- 1\n''') == '0'\n\nassert solution('''\n+ 1\n+ 2\n- 3\n+ 3\n+ 4\n- 4\n+ 5\n+ 6\n- 7\n+ 7\n+ 8\n- 8\n+ 9\n- 9\n+ 10\n+ 11\n- 11\n+ 12\n+ 13\n- 13\n+ 14\n+ 15\n- 15\n+ 16\n+ 17\n- 17\n+ 18\n+ 19\n- 19\n+ 20\n+ 21\n- 21\n+ 22\n+ 23\n- 23\n+ 24\n+ 25\n- 25\n+ 26\n+ 27\n- 27\n+ 28\n+ 29\n- 29\n+ 30\n+ 31\n- 31\n+ 32\n+ 33\n- 33\n+ 34\n+ 35\n- 35\n+ 36\n+ 37\n- 37\n+ 38\n+ 39\n- 39\n+ 40\n+ 41\n- 41\n+ 42\n+ 43\n- 43\n+ 44\n+ 45\n- 45\n+ 46\n+ 47\n- 47\n+ 48\n+ 49\n- 49\n+ 50\n+ 51\n- 51\n+ 52\n+ 53\n- 53\n+ 54\n+ 55\n- 55\n+ 56\n+ 57\n- 57\n+ 58\n+ 59\n- 59\n+ 60\n+ 61\n- 61\n+ 62\n+ 63\n- 63\n+ 64\n+ 65\n- 65\n+ 66\n+ 67\n- 67\n+ 68\n+ 69\n- 69\n+ 70\n+ 71\n- 71\n+ 72\n+ 73\n- 73\n+ 74\n+ 75\n- 75\n+ 76\n+ 77\n- 77\n+ 78\n+ 79\n- 79\n+ 80\n+ 81\n- 81\n+ 82\n+ 83\n- 83\n+ 84\n+ 85\n- 85\n+ 86\n+ 87\n- 87\n+ 88\n+ 89\n- 89\n+ 90\n+ 91\n- 91\n+ 92\n+ 93\n- 93\n+ 94\n+ 95\n- 95\n+ 96\n+ 97\n- 97\n+ 98\n+ 99\n- 99\n+ 100\n+ 101\n- 101\n+ 102\n+ 103\n- 103\n+ 104\n+ 105\n- 105\n+ 106\n+ 107\n- 107\n+ 108\n+ 109\n- 109\n+ 110\n+ 111\n- 111\n+ 112\n+ 113\n- 113\n+ 114\n+ 115\n- 115\n+ 116\n+ 117\n- 117\n+ 118\n+ 119\n- 119\n+ 120\n+ 121\n- 121\n+ 122\n+ 123\n- 123\n+ 124\n+ 125\n- 125\n+ 126\n+ 127\n- 127\n+ 128\n+ 129\n- 129\n+ 130\n+ 131\n- 131\n+ 132\n+ 133\n- 133\n+ 134\n+ 135\n- 135\n+ 136\n+ 137\n- 137\n+ 138\n+ 139\n- 139\n+ 140\n+ 141\n- 141\n+ 142\n+ 143\n- 143\n+ 144\n+ 145\n- 145\n+ 146\n+ 147\n- 147\n+ 148\n+ 149\n- 149\n+ 150\n+ 151\n- 151\n+ 152\n+ 153\n- 153\n+ 154\n+ 155\n- 155\n+ 156\n+ 157\n- 157\n+ 158\n+ 159\n- 159\n+ 160\n+ 161\n- 161\n+ 162\n+ 163\n- 163\n+ 164\n+ 165\n- 165\n+ 166\n+ 167\n- 167\n+ 168\n+ 169\n- 169\n+ 170\n+ 171\n- 171\n+ 172\n+ 173\n- 173\n+ 174\n+ 175\n- 175\n+ 176\n+ 177\n- 177\n+ 178\n+ 179\n- 179\n+ 180\n+ 181\n- 181\n+ 182\n+ 183\n- 183\n+ 184\n+ 185\n- 185\n+ 186\n+ 187\n- 187\n+ 188\n+ 189\n- 189\n+ 190\n+ 191\n- 191\n+ 192\n+ 193\n- 193\n+ 194\n+ 195\n- 195\n+ 196\n+ 197\n- 197\n+ 198\n+ 199\n- 199\n+ 200\n+ 201\n- 201\n+ 202\n+ 203\n- 203\n+ 204\n+ 205\n- 205\n+ 206\n+ 207\n- 207\n+ 208\n+ 209\n- 209\n+ 210\n+ 211\n- 211\n+ 212\n+ 213\n- 213\n+ 214\n+ 215\n- 215\n+ 216\n+ 217\n- 217\n+ 218\n+ 219\n- 219\n+ 220\n+ 221\n- 221\n+ 222\n+ 223\n- 223\n+ 224\n+ 225\n- 225\n+ 226\n+ 227\n- 227\n+ 228\n+ 229\n- 229\n+ 230\n+ 231\n- 231\n+ 232\n+ 233\n- 233\n+ 234\n+ 235\n- 235\n+ 236\n+ 237\n- 237\n+ 238\n+ 239\n- 239\n+ 240\n+ 241\n- 241\n+ 242\n+ 243\n- 243\n+ 244\n+ 245\n- 245\n+ 246\n+ 247\n- 247\n+ 248\n+ 249\n- 249\n+ 250\n+ 251\n- 251\n+ 252\n+ 253\n- 253\n+ 254\n+ 255\n- 255\n+ 256\n+ 257\n- 257\n+ 258\n+ 259\n- 259\n+ 260\n+ 261\n- 261\n+ 262\n+ 263\n- 263\n+ 264\n+ 265\n- 265\n+ 266\n+ 267\n- 267\n+ 268\n+ 269\n- 269\n+ 270\n+ 271\n- 271\n+ 272\n+ 273\n- 273\n+ 274\n+ 275\n- 275\n+ 276\n+ 277\n- 277\n+ 278\n+ 279\n- 279\n+ 280\n+ 281\n- 281\n+ 282\n+ 283\n- 283\n+ 284\n+ 285\n- 285\n+ 286\n+ 287\n- 287\n+ 288\n+ 289\n- 289\n+ 290\n+ 291\n- 291\n+ 292\n+ 293\n- 293\n+ 294\n+ 295\n- 295\n+ 296\n+"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 2 3 4 5\\n') == '4\\n1 3 5\\n'\nassert solution('3 2\\n1 2 3\\n') == '0\\n'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'\nassert solution('2 4') == '0'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '3'"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n+ 1\\n+ 2\\n- 2\\n- 1') == '4\\n1 3 4 5'\nassert solution('5 4\\n+ 1\\n- 2\\n- 1\\n+ 2\\n+ 4') == '4\\n3 5 4'\nassert solution('2 4\\n+ 1\\n- 2\\n+ 2\\n+ 4\\n- 4') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == '1'\nassert solution('5 1') == '1'\nassert solution('5 1') == '1'\nassert solution('5 1') == '0'\n\n\n\"\"\"\n\n\n\nfrom collections import deque\nfrom typing import List\nimport sys\nfrom collections import deque\nfrom collections import defaultdict\nimport math\nimport bisect\n\nclass Solution:\n    # Write your code here\n    def solve(self, n, m, a, b, x):\n        # a*b = x\n        # a*x = b*m\n        # a*b*m = x*n\n        a = sorted(a)\n        b = sorted(b)\n        x = abs(x)\n        dp = [0 for _ in range(x+1)]\n        for i in range(1,n+1):\n            for j in range(1,m+1):\n                if a[i-1]*b[j-1] > x:\n                    break\n                elif a[i-1]*b[j-1] == x:\n                    if dp[x] < i+j:\n                        dp[x] = i+j\n                else:\n                    if dp[x] < i:\n                        dp[x] = i\n        return dp[x]"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 1\n5 4 2 4 5\n2''') == '1'\nassert solution('''5 1\n5 4 2 4 5\n8''') == '4'\nassert solution('''5 1\n5 4 2 4 5\n10''') == '5'\nassert solution('''5 1\n5 4 2 4 5\n4''') == '0'\nassert solution('''5 1\n5 4 2 4 5\n10''') == '4'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 3\n1 2 3\n9\n\n''') == '4'\nassert solution('''\n5 1\n5 4 2 4 5\n2\n5\n\n''') == '1'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1\n5 4 2 4 5''') == '1'\nassert solution('''5 1\n4 2 3 4 5''') == '0'\nassert solution('''2\n3 4 5\n1 2 3''') == '2'\nassert solution('''5\n4 2 3 4 5\n1 2 3''') == '0'\nassert solution('''3\n3 2 4 5\n1 2''') == '2'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 4 2 5 2 3') == '4'\nassert solution('2 3 4 5') == '3'\nassert solution('6 5 4 3') == '5'\nassert solution('5 5 5 2') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3\",\n    \"1 2 3\",\n    \"1 2 3\",\n    9\n) == \"4\"\n\nassert solution(\n    \"5 1\",\n    \"5 4 2 4 5\",\n    \"2\",\n    5\n) == \"1\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 3\\n1 2 3\\n1 2 3\\n9\\n\") == \"4\\n\"\nassert solution(\n    \"5 1\\n5 4 2 4 5\\n2\\n5\\n\") == \"1\\n\"\nassert solution(\n    \"5 1\\n5 4 2 4 5\\n2\\n5\\n\") == \"0\\n\"\nassert solution(\n    \"4\\n6\\n8\\n4\\n\") == \"1\\n\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([5,4,2,4,5,3]) == \"1\"\nassert solution([5,2,3,4,5,6]) == \"0\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 2 4 4 5') == '1'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\""
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\ncba''') == 'NO'\nassert solution('''3 4\ncba''') == 'cbd'\nassert solution('''4 4\nabcd''') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"abda\"\nassert solution(\"4 4\") == \"abdc\""
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('4 4') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\nabcd\n\n''') == 'abda'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == 'NO'\n\nimport re\nimport sys\nimport os"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n\") == \"NO\"\nassert solution(\"2 2\\n\") == \"NO\"\nassert solution(\"2 3\\n\") == \"NO\"\nassert solution(\"2 4\\n\") == \"NO\"\nassert solution(\"3 3\\n\") == \"NO\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"quailty\"\nassert solution(\"6 1\") == \"tokitsukaze\"\nassert solution(\"6 5\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == 'tokitsukaze'\nassert solution('6 1') == 'once again'\nassert solution('6 5') == 'tokitsukaze'\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 5\") == \"tokitsukaze\"\nassert solution(\"4 1\") == \"quailty\"\nassert solution(\"6 1\") == \"once again\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == 'tokitsukaze'\nassert solution('6 1') == 'quailty'\nassert solution('6 5') == 'once again'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == 'quailty'\nassert solution('6 1') == 'tokitsukaze'\nassert solution('6 5') == 'once again'"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == 'quailty'\nassert solution('6 1') == 'tokitsukaze'\nassert solution('6 5') == 'once again'"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n0101\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"quailty\"\nassert solution(\"6 5\\n010101\") == \"once again\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n0101\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"quailty\"\nassert solution(\"6 5\\n010101\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == 'tokitsukaze'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n0101\") == \"tokitsukaze\"\nassert solution(\"6 1\\n010101\") == \"once again\"\nassert solution(\"6 5\\n010101\") == \"tokitsukaze\"\nassert solution(\"4 1\\n0011\") == \"once again\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"3 2 10\") == \"3\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10\") == \"7\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"50\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80') == '50'\nassert solution('1 2 10\\n11\\n15 7') == '7'\nassert solution('1 3 4 5 6 7 8\\n0 1 2 3 4 5 6\\n1 0 2 3 4 5 6\\n1 0 2 3 4 5 6') == '9'\nassert solution('100000\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 4 100') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4 50\n20 100\n60 10 40 80\n''') == '50'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 10') == '50'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\nassert solution('''\n3 2\n0 0\n''') == '1 3'\nassert solution('''\n1 10\n5 3\n''') == '5 5'\nassert solution('''\n1 12\n3 6\n''') == '3 6'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\nassert solution('''\n3 2\n0 0\n''') == '1 3'\nassert solution('''\n1 10\n5 3\n''') == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == '1 6'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '1 6'\nassert solution(input_) == '1 3'\n\n\"\"\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\n\n'''\n\n\nfrom collections import Counter"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\n\"\"\"\n\nn = int(input())\na = input().split()\na = list(map(int, a))\nc = 0\nwhile True:\n    c += 1\n    if a[0] >= 0 and a[1] >= 0:\n        if a[0] + a[1] <= 2 * n:\n            print(c)\n            break\n    if a[0] >= 0:\n        a[0] -= 1\n    else:\n        a[0] += 1\n    if a[1] >= 0:\n        a[1] -= 1\n    else:\n        a[1] += 1\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"3\"\nassert solution(\"10\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2 3\"\nassert solution(\"3\") == \"2 3 4\"\nassert solution(\"3\") == \"2 3 4 5\"\nassert solution(\"3\") == \"2 3 4 5 6\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('5 2') == '3 3'\nassert solution('-1 -1') == '3 3'\nassert solution('-1 1 -1') == '3 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n-2 5 -1\") == \"2\\n2 3\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"9\") == \"4\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n-2 5 -1\n\n''') == '2'\nassert solution('''4\n-2 5 -1\n-5 6 -1\n-4 7 -1\n\n''') == '3'\nassert solution('''5\n-2 5 -1\n-5 6 -1\n-4 7 -1\n-1 8 -1\n-2 9 -1\n\n''') == '3'\nassert solution('''6\n-2 5 -1\n-5 6 -1\n-4 7 -1\n-1 8 -1\n-2 9 -1\n-3 10 -1\n\n''') == '4'\nassert solution('''8\n-2 5 -1\n-5 6 -1\n-4 7 -1\n-1 8 -1\n-2 9 -1\n-3 10 -1\n-4 11 -1\n-5 12 -1\n\n''') == '4'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"20\") == \"4\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n-2 5 -1\") == \"2 3\"\nassert solution(\"4\\n-2 5 -1\\n1 3\\n-2 5\") == \"2 3 1 3\"\nassert solution(\"5\\n-2 5 -1\\n1 3\\n-2 5\") == \"2 3 1 3 1\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2 4'\nassert solution('5') == '2 3 5'\nassert solution('6') == '2 3 5 6'\nassert solution('7') == '2 3 5 6 7'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n0 3') == '3'\nassert solution('2\\n1 10') == '1'\nassert solution('2\\n1 10') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 0') == '1'\nassert solution('2 0') == '1'\n\n1. Binary Search"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '3'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 3\\n1 5\\n') == '3'\nassert solution('1\\n0 4\\n') == '1'"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 3\\n1 5\\n') == '3'\nassert solution('2\\n1 10\\n2 2\\n') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n5\\n') == '1'\nassert solution('1\\n2\\n3\\n5\\n') == '2'\nassert solution('2\\n2\\n2\\n2\\n') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 3') == '3'\nassert solution('1 5') == '5'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"3\"\nassert solution(input_) == \"3\"\nassert solution(input_) == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6 1 10 12 2\n''') == '16'\nassert solution('''\n3 50\n''') == '3 0 25 50'\nassert solution('''\n6 18\n5 6 1 10 12 2\n''') == '16'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 18\") == \"16\"\nassert solution(\"3 50\") == \"0 25 50\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '0 1'\nassert solution('4 6') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\nassert solution('10 50') == '0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 18\") == \"16\"\nassert solution(\"3 50\") == \"3 0 25 50\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n5 6 1 10 12 2\n\n''') == '16'\nassert solution('''\n1\n5\n\n''') == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 18') == '16'\nassert solution('3 50') == '3 0 25 50'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 6 1 10 12 2\n''') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 '\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '16'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '16 0 25 50'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6 1 10 12 2') == '16'\nassert solution('3 50') == '3'\nassert solution('4 4') == '0 1 2 3'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"6\\n\"\n) == \"3\"\nassert solution(\n    \"2\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '2'"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n') == '3'\nassert solution('2\\n') == '2'\n\"\"\"\n\nn = int(input())\ndp = [0] * 1000001\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, n + 1):\n    dp[i] = 1 + dp[i - 1]\n    for j in range(2, i):\n        dp[i] = min(dp[i], dp[i - j] + dp[j])\nprint(dp[n])"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n\") == \"3\"\nassert solution(\"2\\n\") == \"2\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n10 1\\n20 2\\n30 3') == '180'\nassert solution('2\\n3 1\\n2 2\\n4 3') == '21'\nassert solution('4\\n5 10\\n6 5\\n7 6\\n8 3') == '50'\nassert solution('3\\n3 1\\n2 2\\n4 3') == '21'\nassert solution('3\\n10 1\\n20 2\\n30 3') == '180'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10') == '50'\nassert solution('1 5') == '50'\nassert solution('2 4') == '20'\nassert solution('3 2') == '18'\nassert solution('10 3') == '180'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n10 1\n20 2\n30 3\n''') == '180'\nassert solution('''\n1\n5 10\n''') == '50'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n10 1\n20 2\n30 3\n''') == '180'\nassert solution('''\n3\n3 1\n2 2\n4 3\n''') == '21'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n10 1\\n20 2\\n30 3\\n') == '180'\nassert solution('2\\n3 1\\n2 2\\n4 3\\n') == '21'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n1\\n3\\n\") == \"4\"\nassert solution(\"2\\n1\\n2\\n3\\n\") == \"3\"\nassert solution(\"3\\n1\\n2\\n3\\n\") == \"3\"\nassert solution(\"6\\n4\\n5\\n6\\n\") == \"10\"\nassert solution(\"2\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 1\\n20 2\\n30 3\\n') == '180'\nassert solution('2\\n5 1\\n4 3\\n') == '50'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2\n    10 1\n    20 2\n    30 3\n    \"\"\"\n) == \"180\"\nassert solution(\n    \"\"\"\n    1\n    5 10\n    \"\"\"\n) == \"50\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"180\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '180'\nassert solution('3') == '180'\nassert solution('3') == '180'\nassert solution('3') == '180'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n0 0 10') == '2'\nassert solution('5\\n0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 2 3 4') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0 10\n''') == '2'\nassert solution('''\n5\n0 1 2 3 4\n''') == '1'\nassert solution('''\n4\n0 0 0 0\n''') == '4'\nassert solution('''\n9\n0 1 0 2 0 1 1 2 10\n''') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n0 1 2 3 4\n''') == '2'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 2 3 4 5 6 7 8\n''') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n0 0 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 1 2 3 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n0 0 0 0\n\"\"\") == \"4\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '4'\nassert solution('9') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0 10\n''') == '2'\nassert solution('''5\n0 1 2 3 4\n''') == '1'\nassert solution('''4\n0 0 0 0\n''') == '4'\nassert solution('''9\n0 1 0 2 0 1 1 2 10\n''') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0 0 1 2 3 4') == '1'\nassert solution('4\\n0 0 0 0') == '4'\nassert solution('9\\n0 1 2 3 4 5 6 7 8 9') == '3'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\\n0 0\\n1 0\\n1 1\") == \"5\"\nprint(solution(\"10\\n0 0\\n0 1\\n1 0\\n0 0\\n1 1\\n0 1\\n1 1\\n0 0\\n0 0\\n1 1\\n0 1\\n1 1\"))\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\nassert solution('10\\n0 0\\n1 0\\n1 1\\n0 1\\n1 1\\n1 1\\n1 1\\n0 0\\n1 1\\n1 1\\n1 1\\n') == '10'"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\""
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '1'\nassert solution('3') == '0'\nassert solution('2') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 0') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('2\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('3\\n0 0\\n0 1\\n1 0\\n1 1') == '1'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('5\\n0 0\\n0 1\\n1 0\\n1 1') == '2'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n0 0\n0 1\n1 0\n1 1\n2\n1 1\n2\n''') == '5', \"Failed sample\"\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n0 0\n0 1\n1 0\n1 1\n''') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 0\n0 1\n1 0\n1 1\n''') == '5'\nprint(solution('''\n4\n0 0\n0 1\n1 0\n1 1\n'''))\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\nassert solution(\"4\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"2\"\nassert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"0\"\nassert solution(\"4\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"1\"\nassert solution(\"5\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"2\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"12\") == \"20\"\nassert solution(\"3\") == \"3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\\n1\\n1\\n1\"\nassert solution(\"2\") == \"1\\n1\\n2\\n2\"\nassert solution(\"3\") == \"1\\n1\\n2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\nassert solution(\"10\\nW 3\\nB 1\\nW 2\\nB 3\\nB 4\\nB 5\\nB 6\\nB 7\\nB 8\\nB 9\\nB 10\\nW 1\\nW 2\\nW 3\\nW 4\\nW 5\\nW 6\\nW 7\\nW 8\\nW 9\\nW 10\\n\") == \"11\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5\\nWBWBWBWBWBWBWBWBWB\\nBBB\") == \"5\"\nassert solution(\"5\\nWBWBWBWBWBWBWBWBWBWBWB\\nBBB\") == \"3\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\nassert solution(\"7\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"5\"\nassert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"0\"\nassert solution(\"3\\nB 2\\nW 1\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"0\""
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n''') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '3'\nassert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('3') == '2'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n6\n3\n''') == '4'\nassert solution('''5\n3\n5\n''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('5') == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n6\n3\n\n''') == '4'\nassert solution('''5\n3\n5\n\n''') == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([5, 6, 3]) == \"4\"\nassert solution([5, 3, 5]) == \"4\"\nassert solution([5, 3, 5, 4]) == \"3\"\nassert solution([5, 3, 5, 4, 3]) == \"4\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n6\n3\n''') == '4'\nassert solution('''5\n3\n5\n''') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"5\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '9'\nassert solution('15') == '13'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([5, 6, 3]) == '4'\nassert solution([5, 3, 5]) == '4'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '32'\n\"\"\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"8\") == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 1 2 4 8 16 32 64 576') == '32'\nassert solution('50') == '50'\nassert solution('20') == '20'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 8 16 32 64 576\") == \"32\""
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n4 2\n''') == '2'\n\nassert solution('''\n8\n1 2 4 8 16 32 64 576\n''') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '32'\nprint(solution(input))\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('4 2') == '4'\nassert solution('8 1 2 4 8 16 32 64 576') == '32'\nassert solution
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n\") == \"4\"\nassert solution(\"2\\n2 4\\n\") == \"4\""
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"32\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4\\n100 300 450 500\\n') == '2'\nassert solution('5 3\\n100 100 200 400 500\\n') == '3'\nassert solution('15 2\\n100 100 200 400 500\\n') == '1'\nassert solution('10 1\\n100 100 200 400 500\\n') == '-1'\nassert solution('10 1\\n1 1 1 1 1\\n') == '-1'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4\\n100 300 450 500\\n') == '2'\nassert solution('50 2\\n100 25\\n') == '3'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\nassert solution('100 2\\n100 25') == '-1'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n100 300 450 500\n''') == '2'\nassert solution('''\n50 2\n100 25\n''') == '3'\nassert solution('''\n400 4\n100 300 450 500\n''') == '2'\nassert solution('''\n50 2\n100 25\n''') == '3'\nassert solution('''\n5\n1 2\n1 3\n1 4\n1 5\n''') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n400 4\n100 300 450 500\n''') == '2'\n\nassert solution('''\n50 2\n100 25\n''') == '3'\n\nassert solution('''\n400 400\n100 300 450 500\n''') == '2'\n\nassert solution('''\n50 2\n100 2 3 5\n''') == '3'\n\nassert solution('''\n100 400\n100 300 450 500\n''') == '2'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('400 4\\n100 300 450 500') == '2'\nassert solution('50 2\\n100 25') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([2, 2]) == \"1\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"40 4\") == \"3\"\nassert solution(\"50 2\") == \"3\"\nassert solution(\"100 4\") == \"1\"\nassert solution(\"400 4\") == \"2\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([400, 4]) == 2\nassert solution([50, 2]) == 3\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n100 300 450 500\n\n50 2\n100 25\n\n''') == '2'\nassert solution('''\n10\n100 300 450 500\n\n50 2\n100 25\n\n''') == '3'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 3\") == \"12\"\nassert solution(\"4 3\") == \"24\"\nassert solution(\"2 4\") == \"28\"\nassert solution(\"3 4\") == \"36\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"4 2\") == \"6\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"5 3\") == \"12\"\nassert solution(\"10 4\") == \"100\"\nassert solution(\"12 5\") == \"120\"\nassert solution(\"12 6\") == \"120\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"5 2\") == \"8\"\nassert solution(\"8 2\") == \"16\"\nassert solution(\"13 2\") == \"60\"\nassert solution(\"9 2\") == \"10\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 2\") == \"6\"\nassert solution(\"2 4\") == \"6\"\nassert solution(\"5 4\") == \"6\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '6'\nassert solution('1 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"6\"\nassert solution(\"4 2\") == \"6\"\n\nassert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"21\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"4 2\") == \"6\"\nassert solution(\"10 4\") == \"36\"\nassert solution(\"10 5\") == \"30\"\nassert solution(\"50 4\") == \"32\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n5 2\n''') == '6'\n\nassert solution(\n'''\n4 2\n''') == '6'\n\nassert solution(\n'''\n5 5\n''') == '6'\n\nassert solution(\n'''\n8 3\n''') == '8'\n\nassert solution(\n'''\n8 9\n''') == '9'"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '499122178'\nassert solution('2') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2/2'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"5\") == \"599872358\"\nassert solution(\"1\") == \"599872358\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3/2 = 1.5 ~(mod 998244353)'\nassert solution('12') == '0/2 = 4 ~(mod 998244353)'\nassert solution('1') == '1/2 = 2 ~(mod 998244353)'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"499122178\"\n\"\"\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3/2 = 1.5 = 1'\nassert solution('3') == '3/2 = 1.5 = 1'\nassert solution('4') == '4/2 = 2.5 = 1.5'\nassert solution('5') == '5/2 = 3.0 = 1.5'\nassert solution('6') == '6/2 = 4.5 = 1.5'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '499122178'\nassert solution('6') == '119859798'\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"499122178\"\nassert solution(\"3\") == \"499122178\"\n\n------Hint-----\nThe following recursive solution is used by this question.\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == \"499122178\"\nassert solution('3') == \"499122178\"\nassert solution('4') == \"499122178\"\nassert solution('5') == \"499122178\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '6669'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"10\") == \"6669\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('10') == '6669'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\nassert solution(\"10\") == \"-1\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n\") == \"1\"\nassert solution(\"10\\n\") == \"-1\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"10\") == \"5\"\nassert solution(\"20\") == \"5\"\nassert solution(\"50\") == \"20\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1 0 2 4 3\"\n\nassert solution(\"5\") == \"1 4 3 2 0\"\n\nassert solution(\"4\") == \"-1\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '-1'\nassert solution('5') == '1 4 3 2 0'\nprint(solution('5'))\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"-1\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"10\") == \"1 2 4 5 0 6 3 7 8 9\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n3\n4\n5''') == '-1'\n\nassert solution('''2\n0\n1\n4\n3''') == '1 4 3 2 0'\n\nassert solution('''2\n0\n4\n1\n3''') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2 -1 -1\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"2 -1 -1\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"3\\n1 2\\n1 3\\n2 4\") == \"No\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 4\\n2 5\\n3 3\\n4 4\") == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'Yes'\nassert solution() == 'No'"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"No\"\n\n\n\n'''\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes', 'First'\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'No', 'Second'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"No\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5 1') == \"24500\"\nassert solution('2 4 5') == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 6 5\") == \"24500\"\nassert solution(\"3 2 0 5500\") == \"-1\"\nassert solution(\"1 2 0 5000\") == \"24500\"\nassert solution(\"2 1 0 4500\") == \"24500\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 6 5') == \"24500\"\nassert solution('2 4 5') == \"-1\"\n\n\n\nclass Node:\n    def __init__(self, value, next=None):\n        self.value = value\n        self.next = next\n\nclass LinkedList:\n    def __init__(self, root=None):\n        self.root = root\n\n    def __iter__(self):\n        node = self.root\n        while node:\n            yield node.value\n            node = node.next\n\n    def add(self, value):\n        node = Node(value)\n        if self.root is None:\n            self.root = node\n        else:\n            node.next = self.root\n            self.root = node\n\n    def extend(self, values):\n        for value in values:\n            self.add(value)"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\\n') == '24500'\nassert solution('2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"24500\"\nassert solution() == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\nassert solution('3 2 0 5500') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 2 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == \"24500\"\nassert solution('''\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n''') == \"-1\"\nassert solution('''\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == \"24500\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 0 3000\\n2 1 0 5000\\n1 3 0 3000\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"-1\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\\n\") == \"24500\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 6 5\\n'\n                 '1 1 0 5000\\n'\n                 '3 2 0 5500\\n'\n                 '2 2 0 6000\\n'\n                 '15 0 2 9000\\n'\n                 '9 0 1 7000\\n'\n                 '8 0 2 6500\\n') == '24500'\n\nassert solution('2 4 5\\n'\n                 '1 2 0 5000\\n'\n                 '2 1 0 4500\\n'\n                 '2 1 0 3000\\n'\n                 '8 0 1 6000\\n') == '-1'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1 45\\n\") == \"0.828427125\"\nassert solution(\"6 4 30\\n\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 1 45'\n) == '0.828427125'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\nassert solution('5 5 4\\n') == '0.375'\nassert solution('5 6 4\\n') == '0.625'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\nassert solution('5 6 45') == '0.5'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 45\\n\") == \"0.828427125\"\nassert solution(\"6 4 30\\n\") == \"19.668384925\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n1\\n1\\n\") == \"1\"\nassert solution(\"3 4\\nATK 10\\nATK 100\\nATK 1000\\n1\\n11\\n101\\n1001\\n\") == \"992\"\nassert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n\") == \"3000\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3000\"\nassert solution(['ATK 0', 'DEF 0', 'DEF 0']) == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3000'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n''') == '992'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\\n') == '3000'\nassert solution('3 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n') == '1'\nassert solution('2 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n') == '1'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([\n    \"3\",\n    \"3 4\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \"ATK 10\",\n    \"DEF 0\",\n    \"ATK 0\",\n    \""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([2, 3]) == '3000'\nassert solution([3, 4]) == '992'\nassert solution([2, 4]) == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n''') == '992'\nassert solution('''\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3000'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n') == '6'\nassert solution('5 4\\n4 3 2 1 1\\n0 2 6 7 4\\n') == '2'\nassert solution('2 1\\n1 2\\n0 0\\n2 1 -100 -100') == '2'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('5 4') == '62'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n4 3 1 2 1') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100') == '2'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('5 4') == '62'"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '6'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"6\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('2 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4') == '6'\nassert solution('2 2') == '2'\nassert solution('5 4') == '10'\nassert solution('7 3') == '15'\nassert solution('10 10') == '20'\n\n\"\"\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\\n\") == \"6\"\n\nassert solution(\n    \"2 2\\n1 2\\n0 0\\n2 1 -100 -100\\n\") == \"2\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abaa') == 'YES'\nassert solution('aabb') == 'NO'\nassert solution('bbaa') == 'NO'\n\n\"\"\"\n\nstdin = input()\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''aaba\nabaa''') == 'YES'\nassert solution('''aabb\nabab''') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\naaba\nabaa\n''') == 'YES'\nassert solution('''\naabb\nabab\n''') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    abaa\n    abab\n''') == \"NO\"\nassert solution('''\n    aaba\n    abaa\n''') == \"YES\"\nassert solution('''\n    abaa\n    baaa\n''') == \"YES\"\nassert solution('''\n    aaba\n    abaab\n''') == \"YES\"\n\nprint(\"\\033[32mYES\\033[0m\") if solution() else print(\"\\033[31mNO\\033[0m\")"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n1 3\n1 5\n2 4\n3 2\n3 5\n4 5\n''') == 'YES', 'First'\n\nassert solution('''\n1\n\nOutput\nYES\n''') == 'YES', 'Second'\n\nassert solution('''\n2\n2 3\n3 2\n''') == 'NO', 'Third'\n\nassert solution('''\n3\n1 2\n1 3\n2 3\n''') == 'NO', 'Fourth'\n\nassert solution('''\n4\n1 2 3\n1 3 2\n1 4 3\n2 3 4\n''') == 'NO', 'Fifth'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == \"YES\"\nassert solution('3') == \"NO\""
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'\n\nassert solution('1 1 1 1 1') == 'YES'\nassert solution('1 1 1 1 1 1') == 'NO'\nassert solution('1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n\n''') == 'YES'\nassert solution('''\n2\n\n3\n\n''') == 'NO'\nassert solution('''\n2\n\n2\n\n''') == 'NO'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'NO'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"Yes\", \"Should be Yes\"\nassert solution(\"2 1\") == \"No\", \"Should be No\"\nassert solution(\"6 3\") == \"Yes\", \"Should be Yes\"\nassert solution(\"6 2\") == \"No\", \"Should be No\"\nassert solution(\"5 3\") == \"Yes\", \"Should be Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'No'\nassert solution('''\n4 4\na\nb\nc\ndd\n1 2 3\n''') == 'Yes'\nassert solution('''\n1\n5\n1 3 2 1\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == 'Yes'\nassert solution('5 3') == 'Yes'\nassert solution('6 3') == 'No'\nassert solution('4 4') == 'No'\nassert solution('7 2') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"ab\\n\"\n    \"ac\\n\"\n    \"cd\\n\"\n    \"1 2\\n\"\n) == \"Yes\\n\"\n\nassert solution(\n    \"5 3\\n\"\n    \"test\\ntezt\\ntest.\\neest\\n\"\n    \"1 4 5\\n\"\n) == \"Yes\\n\"\n\nassert solution(\n    \"6 3\\n\"\n    \".svn\\n\"\n    \".git\\n\"\n    \"...\\n\"\n    \"...\\n\"\n    \".\\n\"\n    \"1 2 3\\n\"\n) == \"Yes\\n\"\n\nassert solution(\n    \"3 4\\n\"\n    \"a\\nb\\nc\\nd\\n\"\n    \"1 2 3 4\\n\"\n) == \"No\\n\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\nab\nac\ncd\n1 2\n''') == 'Yes'\nassert solution('''5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n''') == 'Yes'\nassert solution('''4 4\na\nb\nc\ndd\n1 2 3 4\n''') == 'No'\nassert solution('''6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == 'Yes'\nassert solution('''9 3\na\nb\nc\nd\n.svn\n.git\n...\n..\n.\n1 2 3\n''') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n') == 'Yes\\n'\nassert solution('5 4\\n') == 'No\\n'\nassert solution('6 4\\n') == 'Yes\\n'\nassert solution('4 4\\n') == 'Yes\\n'\nassert solution('6 3\\n') == 'Yes\\n'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'Yes', \"SOLUTION FAIL\"\nassert solution('1 2') == 'Yes', \"SOLUTION FAIL\"\nassert solution('1 2') == 'Yes', \"SOLUTION FAIL\"\nassert solution('1 2') == 'Yes', \"SOLUTION FAIL\"\nassert solution('1 2') == 'Yes', \"SOLUTION FAIL\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(\"\") == \"No\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\nab\\ncd') == 'Yes'\nassert solution('5 3\\ntest\\ntezt\\ntest\\n.est\\ntes\\n1 2 3 4') == 'Yes'\nassert solution('4 4\\nab\\ncd\\nef\\n5\\n') == 'No'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n''') == \"Yes\"\nassert solution('''\n5 3\na\nb\nc\ndd\n1 2 3 4\n''') == \"No\"\nassert solution('''\n4 4\na\nb\nc\ndd\n1 2 3 4\n''') == \"Yes\"\nassert solution('''\n3 2\nab\nac\ncd\n1 2\n''') == \"Yes\"\nassert solution('''\n5 5\na\nb\nc\ndd\naa\n''') == \"No\"\n''') == \"Yes\""
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('2\\n1 2') == '2'\nassert solution('3\\n3 3') == '3'\nassert solution('3\\n4 4') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 2 3') == '2'\nassert solution('3\\n1 2 3') == '1'\nassert solution('4\\n1 2 3 4') == '2'\nassert solution('5\\n1 2 3 4 5') == '3'"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 1 2 2 3') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '3'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''3\n1 2 3\n''') == '2'\nassert solution('''3\n1 2 3\n''') == '1'\nassert solution('''3\n1 2 3\n''') == '1'\nassert solution('''3\n1 2 3\n''') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''5\n1 2 3 4 5\n''') == '4'\nassert solution('''6\n1 2 3 4 5 6\n''') == '3'"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n''') == '2'\nassert solution('''4\n1 2 3 4\n''') == '3'\nassert solution('''5\n1 2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('5\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10') == '4'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n3 4\\n') == '2'\n\n'''\n\nimport math"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 3') == '2'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '1\\n1'\nassert solution('2\\n3') == '2\\n1'\nassert solution('3\\n4') == '2\\n2'\nassert solution('4\\n5') == '1\\n3'\nassert solution('6\\n7') == '2\\n3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('5\\n1 2\\n3 4\\n2 3\\n5 6') == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n''') == '2'\nassert solution('''9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n''') == '1'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4') == '2'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('100\\n1 2\\n2 3\\n3 4') == '6'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == '2'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9') == '1'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n2 3\\n3 4\") == \"2\"\nassert solution(\"100\\n
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([4, \"1 2\", \"2 3\", \"3 4\"]) == \"2\"\nassert solution([4, \"1 2\", \"2 3\", \"3 4\"]) == \"1\"\n'''\n\nn = int(input())\ngraph = {}\ncount = 0\n\nfor _ in range(n - 1):\n    u, v = list(map(int, input().split()))\n    if u not in graph:\n        graph[u] = []\n    if v not in graph:\n        graph[v] = []\n    graph[u].append(v)\n    graph[v].append(u)\n\nfor key in graph:\n    visited = []\n    queue = []\n    count = 0\n    queue.append(key)\n    visited.append(key)\n    while queue:\n        u = queue.pop(0)\n        for i in graph[u]:\n            if i not in visited:\n                visited.append(i)\n                count += 1\n                queue.append(i)\n\n    count %= 1000000007\n    print(count)\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4'\nassert solution(stdin=\"10 3 10\") == '5'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 5\n''') == '4'\nassert solution('''10 3 10\n''') == '5'"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\nprint('check passed')"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n\nstdin = '''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5'''\n\nprint(solution(stdin))"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"7 4\") == \"1\"\nassert solution(\"10 4\") == \"5\"\nassert solution(\"8 6\") == \"3\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n\n''') == \"1\"\nassert solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n\n''') == \"1\"\n\nprint(solution('''\n4 4\n1 2\n1 3\n1 4\n3 4\n\n'''))\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 4') == '1'\nassert solution('5 5') == '1'\nassert solution('6 6') == '2'\nassert solution('1 5') == '1 2 3 4 5'\nassert solution('3 5') == '1 2'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\\n\") == \"1\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n''') == '1 2'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(s) == '2'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\\n\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n3 4\\n\") == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n75 150 75 50') == 'Yes'\nassert solution('3\\n100 150 250') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n75 150 75 50\n\n''') == \"Yes\"\n\nassert solution('''\n3\n100 150 250\n\n''') == \"No\"\n\nassert solution('''\n3\n100 150 250\n\n''') == \"Yes\"\n\nassert solution('''\n2\n75 150 75\n\n''') == \"No\"\n\nassert solution('''\n1\n100\n\n''') == \"Yes\""
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n75 150 75 50\\n') == 'Yes'\nassert solution('3\\n100 150 250\\n') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n75\n150\n75\n50''') == \"Yes\"\nassert solution('''3\n100\n150\n250''') == \"No\"\nassert solution('''4\n100\n100\n50\n50''') == \"No\""
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n75 150 75 50\n''') == 'Yes'\nassert solution('''\n3\n100 150 250\n''') == 'No'\n''')\n\nstdin = input()\nassert solution(stdin) == 'Yes' or solution(stdin) == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT) == 'Yes'\n\nassert solution(INPUT2) == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n50 50 50 50\") == \"Yes\"\nassert solution(\"4\\n75 150 75 50\") == \"No\"\nassert solution(\"3\\n100 150 250\") == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'No'\nassert solution('4') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"150\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n50 50 50\\n') == '150'\nassert solution('2\\n-1 -100 -1\\n') == '100'"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([50, 50, 50]) == \"150\"\nassert solution([-1, -100, -1]) == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\nassert solution('5') == '500'\nassert solution('6') == '600'\nassert solution('7') == '700'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n50 50 50\n''') == '150'\nassert solution('''2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n50 50 50\n''') == '150'\nassert solution('''2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\nassert solution('''\n''') == '0'\nprint('all test cases passed!')"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '150'\nassert solution('2') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"150\"\nassert solution(\"2\\n50 50 50\") == \"150\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 1\n\n\"\"\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5') == \"4\"\nassert solution('2 8') == \"1\"\nassert solution('6 2') == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 2\nab a\ncc c\nca a\nee c\nff d\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6 2\nbb a\nba a\n\"\"\") == \"0\"\nassert solution(\"\"\"\n7 5\nab a\ncc c\nca a\nee e\nff d\nge g\nhe h\n\"\"\") == \"6\"\n\n'''\n\n'''\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\na a\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\naa\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\nba\nac\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\nbb a\nbb a\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6 2\nbb a\nba a\n\"\"\") == \"1\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"10\") == \"1\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"6 2\") == \"1\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 5\\n\" +\n    \"ab a\\n\" +\n    \"cc c\\n\" +\n    \"ca a\\n\" +\n    \"ee c\\n\" +\n    \"ff d\\n\") == \"4\"\n\nassert solution(\n    \"6 2\\n\" +\n    \"bb a\\n\" +\n    \"ba a\\n\") == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"12\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"17\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"13\"\n\n\"\"\"\n\nfrom typing import List\n\ninput = \"2\""
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1.000000000000', solution\n\nassert solution('3 1') == '-1', solution\n\nassert solution('4 1') == '1.250000000000', solution\n\nassert solution
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1.000000000000'\nassert solution('3 1') == '1.250000000000'\nassert solution('1 3') == '-1'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1.000000000000\"\nassert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"4 1\") == \"1.250000000000\"\nassert solution(\"4 1\") == \"1.000000000000\"\n\n\n\n\"\"\"\n\nx = int(input())\ny = int(input())\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '1.000000000000'\nassert solution('1 1') == '1.000000000000'\nassert solution('2 2') == '-1'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == '1.000000000000'\nassert solution('1 3') == '-1'\n\"\"\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1.000000000000\"\nassert solution(\"4 3\") == \"1.250000000000\"\n\"\"\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == \"1.000000000000\"\nassert solution('3 1') == \"-1\"\nassert solution('4 1') == \"1.250000000000\"\n'''\n\nfrom math import *"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n\n\n'''\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1\n''') == '1.000000000000'\nassert solution('''\n3 1\n''') == '-1'\nassert solution('''\n4 1\n''') == '1.250000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_str) == output_str, (solution(input_str), output_str)\nprint(solution(input_str))"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == '10.0000000000', solution\nassert solution(solution.__doc__) == '-1', solution\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '10.0000000000'\nassert solution('2') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1\n1 4 1\n2 5 3\n''') == '10.0000000000'\nassert solution('''\n5\n1\n1 2 3\n3 4\n2 5 6\n''') == '85.4800000000'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\" + input() + \"\\n\" + input()) == \"10.0000000000\"\nassert solution(\"3\\n\" + input() + \"\\n\" + input()) == \"-1\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n5\n1 2\n2 3\n''') == '10.0000000000'\nassert solution('''\n6\n1 1 2 2\n2 1\n''') == '-1'\nassert solution('''\n2\n5\n1 2\n2 3\n''') == '85.4800000000'\nassert solution('''\n3\n2\n1 3\n1 4\n''') == '10.0000000000'\nassert solution('''\n3\n4\n1 2 2\n2 1\n''') == '-1'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '10.0000000000'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '10.0000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '-1'\n\n>>> \n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 0\nassert solution(\"10\") == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 0\nassert solution('10') == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n2\n\n\"\"\"\n) == \"0\"\n\nassert solution(\n\"\"\"\n10\n\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"10\") == \"4\"\n'''"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n\n''') == '0'\nassert solution('''10\n\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 0\nassert solution('2') == 4\nassert solution('10') == 4"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\n') == '4\\n'\nassert solution('1\\n') == '0\\n'\n\"\"\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10') == '4'"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '4'"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n1 2\n1 111111111111\n''') == 'Wh.'\nassert solution('''\n3 1\n1 194\n1 139\n0 47\n1 66\n''') == 'abdef'\nassert solution('''\n10 4\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'Areyoubusy'\n''')"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 111111111111\n''') == 'Wh.'\nassert solution('''\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'abdef'\n'''\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 'Wh.'\nassert solution(\"1 2\") == 'abdef'\nassert solution(\"1 111111111111\") == 'Areyoubusy'"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"Wh\"\nassert solution(input()) == \"Areyoubusy\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 111111111111\n''') == 'Wh.'\nassert solution('''\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n''') == 'abdef'\nassert solution('''\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n''') == 'Areyoubusy'\n''')\n\n-------\n2\n2\n3\n\n1\n2\n1 3\n1 2 3\n\n2\n4\n2 3\n1 2 3\n3\n\n6\n6\n3\n\n3\n3\n1 4\n1 3\n2 2 3\n\n1\n\n7\n4\n1\n2\n\n1\n\n8\n3\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n6\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n5\n1 2 3\n1 2 3\n1 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n2\n\n4\n1 2 3\n1 2 3\n1 3\n\n4\n\n3\n1 2 3\n1 2 3\n1 3\n\n3\n\n7\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2 2 3\n\n5\n\n1 2 3\n1 2 3\n1 3\n\n1\n\n8\n1 2 3\n1 2 3\n1 3\n1 3\n2 2 3\n\n4\n\n2\n1 4\n1 3\n2"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \".\"\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What\"\nassert solution(\"What are you doing while sending \"f_{i} - 1?\") == \"while\"\nassert solution(\"Are you busy? Will you save us?\") == \"Are you busy?\"\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"Wh\"\nassert solution(\"3 1\") == \"Wh\"\nassert solution(\"4 1\") == \"Why\"\nassert solution(\"5 1\") == \"Why\"\nassert solution(\"10 4\") == \"Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\nassert solution('1 111111111111') == 'Areyoubusy'\n\n\n'''\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\nassert solution('1 111111111111') == 'Whatareyousending'\n\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == '.'\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == 'What'\nassert solution(\"What are you doing while sending \"f_0 - 1\") == 'Are'\nassert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == 'What'\nassert solution(\"What are you doing while sending \"f_0 - 1\") == 'Are'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''? +? -? +? = 42''') == 'Possible'\nassert solution('''? +? -? +? +? = 42''') == 'Possible'\nassert solution('''? -? = 1''') == 'Impossible'\nassert solution('''? = 1000000''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('? +? -? +? = n') == 'Possible'\nassert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? = 1') == 'Impossible'\nassert solution('? -? = 1') == 'Impossible'\nassert solution('? = 1000000') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"Possible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''? +? -? +? = 42''') == 'Possible'\nassert solution('''? -? = 1''') == 'Impossible'\nassert solution('''? = 1000000''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"? +? -? +? = 42\") == \"Possible\"\nassert solution(\n    \"? -? = 1\") == \"Impossible\"\nassert solution(\n    \"? = 1000000\") == \"Possible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == 'Possible'\nassert solution('? +? -? +? = 42') == 'Possible'\nassert solution('? -? = 1') == 'Impossible'\nassert solution('? = 1000000') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"? +? -? +? = n\\nPossible\\n9 + 13 - 39 + 28 + 31 = 42\\n?\") == \"Possible\\n9 + 13 - 39 + 28 + 31 = 42\"\nassert solution(\n    \"? = 1\\n\") == \"Impossible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"? +? -? +? = 42\") == \"Possible\"\nassert solution(\"? +? -? +? = 43\") == \"Impossible\"\nassert solution(\"? = 1\") == \"Impossible\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''? +? -? +? =?\n\nPossible\n1 + 2 - 1 = 3''') == \"Impossible\"\nassert solution('''? = 1\n\nPossible\n1 = 1''') == \"Possible\"\nprint(solution('''? +? -? +? =?\n\nPossible\n9 + 13 - 39 + 28 + 31 = 42'''))"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '7 4 5'\nassert solution('4') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 0 2\\n0') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"7 4 5\"\nassert solution(\"3\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0 2\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 0 2\\n0\\n0\") == \"7 4 5\"\nassert solution(\"6\\n0 0 0 1 2 2\\n1 2\\n2 0\\n1 1 1\") == \"7 4 5\"\nassert solution(\"6\\n1 1 1\\n2 2\") == \"7 4 5\""
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 3 1'\nassert solution('4') == '4 5 2 1'\nassert solution('8') == '8 5 2 1 2 1 1'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 0 2') == '7 4 5'\nassert solution('1\\n0') == '7 4 5'\nassert solution('1\\n1') == '2'\nassert solution('2\\n2') == '2'\nassert solution('2\\n2') == '3'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0\\n') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '7 4 5'\nassert solution('2') == '7 4 5'\nassert solution('3') == '7 4 5'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == \"Yes\"\nassert solution('6') == \"No\"\nassert solution('3') == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Yes'\nassert solution('2') == 'No'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\nabbbc\") == \"Yes\"\nassert solution(\"3\\nabc\") == \"No\"\nassert solution(\"5\\nabbabab\") == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nababcd') == 'Yes'\nassert solution('3\\nabc') == 'No'\nassert solution('4\\nabc') == 'Yes'"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'Yes'\nassert solution('2') == 'No'\nassert solution('1') == 'Yes'\n\n\n'''\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6\naabddc\n''') == 'Yes'\nassert solution('''\n3\nabc\n''') == 'No'\nassert solution('''\n3\njjj\n''') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\naabddc\n\n3\njjj\n\n4\nabcd\n\n''') == 'Yes'\nassert solution('''\n6\naabddc\n\n3\nabc\n\n''') == 'No'\nassert solution('''\n3\nabc\n\n''') == 'Yes'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1\\n') == '3'\nassert solution('5 2\\n') == '54'\nassert solution('5 4\\n') == '1728'\n\n\nstdin = '''10 1\n'''"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n3 1\n5 3\n4 2\n2 4\n3 5''') == \"2\"\nassert solution('''7 4\n3 1\n7 3\n4 2\n2 4\n3 5\n5 2\n3 6''') == \"1728\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"54\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"54\"\n\n--\n\n\"\"\""
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"54\"\nassert solution(\"7 4\") == \"1728\"\nassert solution(\"1000000000 25\") == \"217549348631602480\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '54'\nassert solution(\"5 2\") == '54'\nassert solution(\"7 4\") == '1728'\nassert solution(\"8 5\") == '1312'\nassert solution(\"10 7\") == '1112'\n\n\"\"\"\nimport math\n\nn, k = map(int, input().split())"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 2') == '3'\nassert solution('7 4') == '1728'\nprint(solution(*Tuple[str](*stdin().split())))\n\n\n'''\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1184\""
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\nassert solution('''3 3\nWWW\nBWW\nWWW\n\n''') == '2 1'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\nassert solution('5 6') == '2 4'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\nassert solution('''\n3 3\nWWW\nBWW\nWWW\n''') == '2 1'\nassert solution('''\n3 3\nWWW\nWWW\nWWW\n''') == '1 1'\nassert solution('''\n7 7\nWWWWWWWWBWWWWWW\nWWWWWWWWBBBBBBBB\nWWWWWWWWWWBBWWWW\nWWWWWWWWBBBBWWWW\nWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWW\nWWWWWWWWWWWWWWWW\n''') == '5 5'\nassert solution('''\n5 6\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\nWWWWWWBBWWWWBBWW\n''') == '2 2'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2 1'\n\"\"\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 7\nWWBBBBB\nBBBBBWB\nWWBBBBB\nBWWBBBB\n''') == '2 1'\nassert solution('''\n4 7\nWWBBBBB\nBBBBBWB\nWWBBBBB\nBWWBBBB\n''') == '2 4'\nassert solution('''\n3 3\nWBB\nBBW\nBBW\n''') == '1 2'\nassert solution('''\n4 4\nWWWWW\nWWWWW\nWWWWW\nWWWWW\n''') == '1 4'\nassert solution('''\n4 6\nWWWWWW\nWWWWWW\nWWWWWW\nWWWWWW\nWWWWWW\n''') == '3 4'\n\nprint('Done!')\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"2 4\"\nassert solution(\"3 3\") == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\nassert solution('''3 3\nWWW\nBWW\nWWW\n''') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == '2 4', 'Test 1 fail'\nassert solution('3 3') == '2 1', 'Test 2 fail'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"10 9 10 10 9\"\nassert solution(input_2) == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\"\"\"\n) == \"10 9 10 10 9\"\n\nassert solution(\n\"\"\"2 3\n1 2\n1 2\n1 2\n\"\"\"\n) == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input) == \"10 9 10 10 9\"\nassert solution(input) == \"10 9 10 10 9\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9 \nassert solution('''2 3\n1 2\n1 2\n1 2\n''') == '5 6 \n'''\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9 \nassert solution(\"2 3\") == \"5 6\"\n\n\"\"\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7') == '10 9 10 10 9 \nassert solution('2 3') == '5 6 \n\n\"\"\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == \"10 9 10 10 9\"\nassert solution('''\n2 3\n1 2\n1 2\n1 2\n''') == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == \"10 9 10 10 9\"\nassert solution('''2 3\n1 2\n1 2\n1 2\n''') == \"5 6\""
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\nassert solution('0 1') == '2'\nassert solution('1 0 0') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == '2'\nprint(solution(input_string))\n\n'''\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n-1 -1\\n2\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n3\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n1 0 0\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n1 0 0\\n1 1 1\") == \"2\"\nassert solution(\"1 1\\n-1 -1\\n1 0 0\\n0 0 0\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3') == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '2'\nassert solution('0 1') == '2'\nassert solution('1 0') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3') == '2'\nassert solution('1 1\\n-1 -1\\n4') == '1'\nassert solution('1 1\\n-1 -1\\n0') == '0'\nassert solution('1 1\\n-1 -1\\n-1') == '0'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n-1 -1\n2''') == '2'\nassert solution('''1 1\n-1 -1\n3\n0 1 0\n1 0 0\n1 1 -3''') == '2'\nassert solution('''2\n-1 2\n0 1 0\n1 0 0\n1 1 -3''') == '1'\nassert solution('''2\n1 1\n-1 -1\n1 0 0\n1 0 0\n1 1 -3''') == '1'\nassert solution('''1\n0 1 0\n0 1 0\n1 0 0\n1 1 -3''') == '0'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1\n-1 -1\n2''') == '2'\nassert solution('''1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\nOutput\n2\n\nInput\n1 1\n-1 -1\n5\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n1 0 0\n\nOutput\n3\n''') == '3'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"0\"\nassert solution(\"0 0\") == \"2\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 1\n4\n3''') == 'Nicky'\nassert solution('''1 2\n3''') == 'Kevin'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 1\") == \"Nicky\"\nassert solution(\"100 3\") == \"Kevin\"\nassert solution(\"2 3\") == \"Nicky\"\n\nstdin = \"\"\"\n3 4\n3 4 1 3 2 2 3\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"\n1 1\n
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"Kevin\"\nassert solution(\"2 2\") == \"Nicky\"\nassert solution(\"2 3\") == \"Nicky\"\nassert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 3\") == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n3 4\n''') == 'Kevin'\nassert solution('''\n1 2\n3\n''') == 'Nicky'\nassert solution('''\n3 5\n10 10 10 10 10\n''') == 'Nicky'\nassert solution('''\n3 4\n5 4 3 2\n''') == 'Kevin'\nassert solution('''\n2 6\n8 7 5 5 2 8\n''') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"Kevin\"\nassert solution(\"1 2\") == \"Nicky\"\nassert solution(\"2 2\") == \"Nicky\"\nassert solution(\"1 1\") == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Nicky'\nassert solution('1 1') == 'Kevin'\nassert solution('3 4') == 'Kevin'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 1') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3\") == 'Kevin'\nassert solution(\"1 2\\n3\") == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"Kevin\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1 2 3 4 5'\nassert solution('3') == '1 2 3'\nassert solution('2') == '1 2'\nprint(solution(input()))\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    2\n    1 2\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n    3\n    1 2 3\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n    4\n    1 2 2 2\n\"\"\") == \"1 1 1\"\nassert solution(\"\"\"\n    5\n    1 2 2 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n    10\n    1 2 2 1 2 1 2 1 2 1 2 2 1 2 1 1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('2 2 2') == '1 1 1'\nassert solution('1 1 1') == '1'\nassert solution('2') == '-1'\nassert solution('3') == '-1'"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '3 2 1'\nassert solution('2 2 2') == '1 1 1'\nprint(solution(input()))\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n\n''') == '3 1 2 3'\n\nassert solution('''3\n2 2 2\n\n''') == '1 1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1\\n3 4\\n4 5\\n\") == \"3 1\"\nassert solution(\"3\\n3 2\\n2 3\\n\") == \"2 1\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n2 2 2\n''') == '1'\nassert solution('''\n3\n1 2 3\n''') == '1 2 3'\nassert solution('''\n3\n1 2 2\n''') == '1 2 2'\nassert solution('''\n4\n1 3 2\n''') == '1 3 2'\nassert solution('''\n2\n1 1\n''') == '1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1 2'\nassert solution('1') == '1 1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2 2\n\"\"\") == \"1 2 2\"\nassert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"\n2\n1 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('0') == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '11\\n'\n    ) == '6'\nassert solution(\n    '01\\n'\n    ) == '2'\nassert solution(\n    '0\\n'\n    ) == '1'\nassert solution(\n    '1\\n'\n    ) == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"6\""
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n011100001\n1000000000\n1100000011\n0011000111\n1101110010\n1101001101\n1000111100\n0000110111\n011100001\n''') == \"1\"\nassert solution('''\n110000000000\n000000001101\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111\n000000000111"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n15\n''') == '1', \"Should be 1\"\nassert solution('''\n2\n5 7\n''') == '3', \"Should be 3\"\nassert solution('''\n3\n1 1 2\n''') == '4', \"Should be 4\"\nassert solution('''\n3\n1 1 2\n''') == '4', \"Should be 4\"\nassert solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '144', \"Should be 144\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1 1 2\") == \"4\"\nassert solution(\"2 5 7\") == \"4\"\nassert solution(\"3 5 7\") == \"4\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"10\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"5\") == 3\nassert solution(\"10\") == 3\nassert solution(\"15\") == 1\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '4'\nassert solution('3') == '4'\nassert solution('4') == '3'\nassert solution('5') == '6'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"6\"\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n15') == '1\\n'\nassert solution('3\\n1 1 2') == '3\\n'\nassert solution('2\\n5 7') == '4\\n'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n4 5''') == '1'\nassert solution('''3\n1 2 3''') == '4'\nassert solution('''1\n1 2''') == '2'\nassert solution('''5\n7 5''') == '2'\nassert solution('''7\n1 1 1 1 2 2''') == '2'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 2\") == \"YES\"\nassert solution(\"2 1 2\") == \"NO\"\nassert solution(\"4 1 2\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 0 2\\n2 0 1\\n\") == \"YES\"\nassert solution(\"4\\n1 2 3 0\\n0 3 2 1\\n\") == \"YES\"\nassert solution(\"10\\n1 2 3 0\\n0 3 2 1\\n2 4 5 6 7 8 9 10\\n10 7 8 9 6 5 4 3 2 1\\n\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 0') == \"YES\"\nassert solution('2 3 1 0') == \"NO\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 0 2\n2 0 1\n\n''') == 'YES'\nassert solution('''\n4\n1 2 3 0\n0 3 2 1\n\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 0') == 'YES'\nassert solution('2 0 1') == 'YES'\nassert solution('4 0 1') == 'NO'\nassert solution('3 0 1') == 'NO'\nassert solution('3 0 2') == 'YES'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4') == 'NO'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1160\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n1 1 1 1 1 1\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '9000'\nassert solution('2') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"9000\"\nassert solution(\"6\") == \"1160\"\nassert solution(\"6\") == \"19800\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1164'\nassert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000'\nassert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '9000'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9024'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9024'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9024'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == '9000'\nassert solution(\"6\") == '1160'\nassert solution(\"3\") == '1000000000'\nassert solution(\"1\") == '1000000000'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"9000\"\nassert solution(\"6\") == \"1160\""
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '9000'\nassert solution('10') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n\") == \"1160\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\nassert solution('''\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n2 3\n1 4''') == '6'\nassert solution('''3 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nassert solution('''10 5\n7 2\n2 3\n1 4\n4 5\n5 6\n6 7\n6 8\n3 9\n5 2\n4 4\n6 3\n7 2\n8 7\n1 4''') == '3'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 2\n2 3\n1 4\n1 4\n2 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n\"\"\") == \"1\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nprint(solution('''\n'''))\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nassert solution('''10 3\n5 6\n6 2\n6 1\n2 7\n1 4\n4 8\n8 3\n1 5\n5 1\n2 3''') == '2'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6', 'First'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1', 'Second'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"8 6\") == \"1\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"8 6\") == \"1\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n2 2 3 4 6\n''') == '5'\n\nassert solution('''4\n2 4 6 8\n''') == '-1'\n\nassert solution('''3\n2 6 9\n''') == '4'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"5\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 2, 3, 4, 6]) == \"5\"\nassert solution([2, 4, 6, 8, 10]) == \"7\"\nassert solution([2, 1, 3, 4, 6]) == \"4\"\nassert solution([2, 1, 1, 1, 6]) == \"4\"\nassert solution([1, 1, 1, 1, 1]) == \"4\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2 4 6 8\n''') == '-1'\nassert solution('''\n3\n2 6 9\n''') == '4'\nassert solution('''\n5\n2 2 3 4 6\n''') == '5'\n\n''')\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 2 3 4 6''') == '5'\nassert solution('''4\n2 4 6 8''') == '-1'\nassert solution('''3\n2 6 9''') == '4'\nassert solution('''1\n2''') == '1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 2 3 4 6') == '5'\nassert solution('4\\n2 4 6 8') == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '-1'\nassert solution('5') == '5'\nassert solution('4') == '4'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == '5'\nassert solution(\"4\") == '-1'\nassert solution(\"3\") == '4'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"0\"\nassert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''aba\nbab\nabacabaca''') == '3'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('acaca') == '0'\nassert solution('aca') == '0'\nassert solution('ba') == '0'\n\n'''"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''aba\n''') == '''aba\n'''\nassert solution('''abacabaca\n''') == '''aca\nba\nca\n'''\nassert solution('''abaca\n''') == '''aca\nba\n'''\nassert solution('''abacabacabacabaca\n''') == '''aba\naca\nba\nca\nbac\n'''\nassert solution('''abacabacabacabaca\n''') == '''aba\naca\nba\nca\nbac\n'''\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('abacabacacaba') == '3'\nassert solution('abaca') == '0'\nassert solution('aba') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\nassert solution(\"abac\") == \"0\"\n\n'''\n\nfrom typing import List\n\nclass Solution:\n    def firstUniqChar(self, s: str) -> str:\n        if len(s) == 0:\n            return''\n        elif len(s) == 1:\n            return s\n        else:\n            cnt = {}\n            res = []\n            for i in range(len(s)):\n                if cnt.get(s[i]) == None:\n                    cnt[s[i]] = 1\n                    res.append(i)\n                else:\n                    cnt[s[i]] += 1\n\n            # print(cnt)\n            # print(res)\n            for i in range(len(res)):\n                if cnt[s[res[i]]] == 1:\n                    return res[i]\n            return res[-1]\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert sorted(solution(input())) == ['aca', 'ba', 'ca']\nassert sorted(solution(input())) == ['aca', 'ba', 'ca']\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5\n1#2#3\n''') == '2'\nassert solution('''1 5\n11#2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n1#2#3') == '2'\nassert solution('4 5\\n11#22\\n#.323\\n#.3\\n') == '-1'\nassert solution('6 5\\n11.2.3\\n#.3\\n#3\\n') == '4'"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == \"2\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5\\n1#2#3') == '2'\nassert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '2'\nassert solution('10 10\\n1#2#3#4\\n5#6#7\\n8#9#10\\n11#12#13\\n14#15#16\\n17#18#19\\n20#21#22\\n23#24#25\\n26#27#28\\n29#30#31\\n32#33#34\\n35#36#37\\n38#39#40\\n41#42#43\\n44#45#46\\n47#48#49\\n50#51#52\\n53#54#55\\n56#57#58\\n59#60#61\\n62#63#64\\n65#66#67\\n68#69#70\\n71#72#73\\n74#75#76\\n77#78#79\\n80#81#82\\n83#84#85\\n86#87#88\\n89#90#91\\n92#93#94\\n95#96#97\\n98#99#100\\n') == '3'\nassert solution('5 5\\n1#2#3#4#5\\n6#7#8\\n9#10#11\\n12#13#14\\n15#16#17\\n18#19#20\\n21#22#23\\n24#25#26\\n27#28#29\\n30#31#32\\n33#34#35\\n36#37#38\\n39#40#41\\n42#43#44\\n45#46#47\\n48#49#50\\n51#52#53\\n54#55#56\\n57#58#59\\n60#61#62\\n63#64#65\\n66#67#68\\n69#70#71\\n72#73#74\\n75#76#77\\n78#79#80\\n81#82#83\\n84#85#86\\n87#88#89\\n90#91#92\\n93#94#95\\n96#97#98\\n99#100#') == '2'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1#2#3\n''') == '2'\nassert solution('''2\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5') == '2'\nassert solution('1 5') == '-1'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '2'\nassert solution('4 4') == '1'"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 5\n1#2#3\n''') == '2', 'First'\nassert solution('''\n1 2\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '6'"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"-1\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"123456789\") == \"45123456789\"\nassert solution(\"(()))(\") == \"1\"\nassert solution(\"(())(())((()))\") == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"6\"\n\"\"\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"\") == \"-\"\nassert solution(\"())\") == \"0\"\nassert solution(\"((((((((\" ) == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '6'\nassert solution('1') == '-1'"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(8) == '6'\nassert solution(3) == -1"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"8\") == \"6\"\nassert solution(\"5\") == \"9\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"6\"\nassert solution(\"9\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"8\") == \"6\"\nassert solution(\"10\") == \"-1\"\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(open(0).read().strip()) == \"6\"\nprint(solution(open(0).read().strip()))\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"4 5 4\") == \"4\"\nassert solution(\"3 5 4\") == \"1\"\nassert solution(\"2 1 0 3\") == \"1 2 3\"\nassert solution(\"2 1 0 3\") == \"2 3\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 4\\n4 4 0\\n1 3\") == \"1\\n3 2\"\nassert solution(\"4 5 4\\n4 4 0\\n3 2\") == \"1\\n3 2\"\nassert solution(\"4 5 4\\n4 4 0\\n1 2\") == \"1\\n1 2\"\nassert solution(\"4 5 4\\n4 4 0\\n3 2\") == \"1\\n1 2\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\n''') == '1'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('3 3') == '2'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1\n''') == '1'\nassert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '4'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    3 5\n    4 4 0\n    1 3\n    3 2\n    3 1\n''') == '1 2 3 4'\n\nassert solution('''\n    4 5 4\n    2 1 0 3\n    4 3\n    3 2\n    1 2\n    1 4\n    1 3\n''') == '4 1 2 3 4'\n\nassert solution('''\n    3 5\n    1 2 3\n    2 1\n    3 4\n''') == '1 2 3 4'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n') == '1\\n3 2'\nassert solution('4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n') == '4'\nassert solution('4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2\\n1 4\\n1 3\\n') == '1 2 3 4'\nassert solution('3 3 5\\n4 4 0\\n1 3\\n3 2\\n3 1\\n') == '1'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(stdin=\"4 5 4\\n4 4 0\\n1 3\\n3 2\\n3 1\") == \"4\"\nassert solution(stdin=\"10 10 5\\n6 6 0\\n2 1\\n3 2\\n3 4\\n4 1\\n3 3\\n2 2\\n6 5\") == \"5\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\"\"\") == \"4\"\n\"\"\"\nSample test\nInput\n3 2 3\n0 0 1\n1 1\n2 0\nOutput\n1\n1 2\nInput\n4 5 4\n3 0 2 4\n2 2\n1 2\n2 1\n1 3\n2 2\nOutput\n2\n2 1 3\n\"\"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"8\"\nassert solution(\"3 3\") == \"8\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"6 1\") == \"6\"\nassert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n') == '8'\nassert solution('4 5\\n') == '11'\n\n'''\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n''') == 8\nassert solution('''\n10 3\n''') == 2\nassert solution('''\n100 100\n''') == 634\nassert solution('''\n20 20\n''') == 1048576\n'''\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nf = [[0 for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0 or i == n - 1 or j == 0 or j == m - 1:\n            f[i][j] = 1\n        else:\n            if f[i][j] == 0:\n                if f[i - 1][j - 1] == f[i + 1][j - 1] == f[i - 1][j + 1] == f[i + 1][j + 1]:\n                    f[i][j] = 1\n\n\nprint(sum(sum(i) for i in f) % 1000000000)\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 8\nassert solution('3 3') == 1\nassert solution('3 5') == 9\n\"\"\""
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n') == '8'\nassert solution('2\\n4\\n') == '10'\nassert solution('3\\n4\\n') == '9'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '8'\n\n\n>>> input = \"\"\"5 5\n5 4 5 2 4\"\"\"\n>>> output = \"\"\"40\"\"\"\n>>> print(output, *solution(input))\n40\n\n\"\"\"\n\nInput:\n2 3\n\nOutput:\n40\n\n\"\"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"8\"\nprint(solution(input()))\n\"\"\"\n\nimport math"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2\n\n1 1\n1 2\n1 3\n''') == '1'\n\nassert solution('''\n2 3\n\n1 1\n1 2\n1 3\n''') == '3'\n\nassert solution('''\n10 20\n\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n''') == '9'\n\nassert solution('''\n3 4\n\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n''') == '8'\n\nassert solution('''\n1 3\n\n1 1\n1 2\n1 3\n1 4\n1 5\n2 1\n2 2\n2 3\n2 4\n2 5\n3 1\n3 2\n3 3\n3 4\n3 5\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n''') == '12'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '8'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2\n1 2\n2 3\n\n''') == '5'\nassert solution('''100 3\n1 2\n2 1\n3 1\n\n''') == '100'\nassert solution('''1 2\n1 1\n2 100\n\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5, 2, 1, 2, 3]) == \"5\"\nassert solution([100, 3, 1, 2, 1, 2, 3]) == \"100\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"100 3\") == \"100\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 100\") == \"100\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2') == '5'\nassert solution('100 3') == '100'\nassert solution('1 2') == '1'\nassert solution('2 1') == '2'\n\nassert solution('1 2') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"5\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"100 3\") == \"100\"\n\nimport sys\nsys.stdin = open(r\"test.in\", \"r\")\n\nn, m = list(map(int, input().split()))\ndata = list(map(int, input().split()))\n\ndata.sort()\ndp = [[0] * m for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp[i][j] = data[j]\n        else:\n            dp[i][j] = dp[i - 1][j]\n            if j >= data[i]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - data[i]] + data[i])\n\nprint(dp[-1][-1])\n\n\"\"\"\n\nimport sys\nsys.stdin = open(r\"test.in\", \"r\")\n\nn, m = list(map(int, input().split()))\ndata = list(map(int, input().split()))\n\ndata.sort()\ndp = [[0] * m for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0:\n            dp[i][j] = data[j]\n        else:\n            dp[i][j] = dp[i - 1][j]\n            if j >= data[i]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - data[i]] + data[i])\n\nprint(dp[-1][-1])"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '5'\nassert solution('1 2') == '2'\nassert solution('100 3') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 2\n2 3\n''') == '5'\nassert solution('''100 3\n1 2\n2 1\n3 1\n''') == '100'\nassert solution('''1 2\n1 1\n2 100\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n2 1\n3 1''') == '4'\n\nassert solution('''1 2\n2 1\n3 100''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n2 1''') == \"100\"\nassert solution('''1 2\n2 1''') == \"5\"\nassert solution('''1 2\n1 2''') == \"100\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"usaco\") == \"1\"\nassert solution(\"lol\") == \"2\"\nassert solution(\"aaabb\") == \"6\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''aaabb\nusaco''') == '6'\n\nassert solution('''lol\n''') == '2'\n\nassert solution('''kaua\n''') == '1'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('usaco') == '1'\nassert solution('aaabb') == '6'\nassert solution('lol') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''aaabb''') == 6, solution('''aaabb''')\nassert solution('''usaco''') == 1, solution('''usaco''')\nassert solution('''lol''') == 2, solution('''lol''')\nprint('Success')\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('usaco') == '2'\nassert solution('lol') == '2'\nassert solution('aaaaa') == '1'\nassert solution('aaaaaaa') == '1'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"aaabb\") == \"6\"\nassert solution(\"usaco\") == \"1\"\nassert solution(\"lol\") == \"2\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('aaabb') == 6\nassert solution('usaco') == 1\nassert solution('lol') == 2\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n\"\"\"\nimport sys\nimport math\nfrom collections import deque, defaultdict\nfrom itertools import product\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('4\\n') == '2\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"11\") == \"1\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n''') == '2'\nassert solution('''\n4\n''') == '1'\nassert solution('''\n10\n''') == '1'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n''') == '1'\nassert solution('''4\n''') == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3\n1 2\n2 1\n1 2\n''') == '1 2'\nassert solution('''4\n7\n3 2\n5 2\n1 5\n4 5\n4 5\n2 4\n5 2\n1 4\n''') == '1 4'\nassert solution('''5\n6\n4 2\n5 4\n5 1\n1 5\n''') == '1 5'\nassert solution('''6\n3\n6 3\n6 3\n3 5\n6 1\n''') == '1 5'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3\n1 4\n2 5\n3 6\"\"\") == \"\"\"1 2\"\"\"\nassert solution(\"\"\"8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n\"\"\" ) == \"\"\"1 2\"\"\"\nassert solution(\"\"\"8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n\"\"\" ) == \"\"\"1 2\"\"\"\n\nassert solution(\"\"\"13\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n280 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n331 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n396 397\n397 398\n398 399\n399 400\n400 401\n401 402\n402 403\n403 404\n404 405\n405 406\n406 407\n407 408\n408 409\n409 410\n410 411\n411 412\n412 413\n413 414\n414 415\n415 416\n416 417\n417 418\n418 419\n419 420\n420 421\n421 422\n422 423\n423 424\n424 425\n425 426\n426 427\n427 428\n428 429\n429 430\n430 431\n431 432\n432 433\n433 434\n434 435\n435 436\n436 437\n437 438\n437 439\n439 440\n440 441\n441 442\n442 443\n443 444\n444 445\n445 446\n446 447\n447 448\n448 449\n449 450\n450 451\n451 452\n452 453\n453 454\n454 455\n455 456\n456 457\n457 458\n458 459\n459 460\n460 461\n461 462\n462 463\n463 464\n464 465\n464 466\n465 467\n466 468"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 4\n2 5\n3 6\n''') == '1 2'\nassert solution('''\n5\n1 4\n2 3\n3 5\n4 6\n5 7\n''') == '1 2 1 2 1 2'\nassert solution('''\n10\n1 4\n2 3\n3 6\n4 5\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n''') == '1 2 1 2 1 2 1 2 1 2 2 1 1 1 2'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 2\\n1 2\\n2 1\\n2 2') == '1 2\\n2 1\\n1 2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 3\n2 4\n''') == '1 2'\nassert solution('''4\n1 1\n2 3\n3 1\n''') == '1 2 1'\nassert solution('''10\n1 2\n2 4\n3 5\n4 3\n5 6\n6 5\n7 7\n8 8\n9 9\n''') == '2 1 2 3 2 2 2 1 1 2 2'\nassert solution('''7\n1 3\n2 2\n3 5\n4 4\n5 1\n6 6\n''') == '1 1 3 2 2 1 1 2'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 4\\n2 5\\n3 6\\n\") == \"1 2\"\nassert solution(\"5\\n1 3\\n2 4\\n3 5\\n\") == \"1 2\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"1 2\"\nassert solution(\"5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n\") == \"2 1\"\nassert solution(\"10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n\") == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n2 1\\n1 2') == '1 2'\nassert solution('3\\n2 5\\n3 6\\n2 1') == '2 1'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('1 4') == '1 2'\nassert solution('2 5') == '1 2'\nassert solution('3 6') == '1 2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 4\\n2 5\\n3 6\"\n    ) == \"1 2\"\nassert solution(\n    \"3 5\\n2 6\\n1 4\"\n    ) == \"2 1\"\nassert solution(\n    \"3 5\\n2 5\\n1 4\"\n    ) == \"1 2\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4') == '1 2'\nassert solution('2 5') == '2 1'\nassert solution('3 6') == '1 2'\n\n\"\"\""
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 1'\nassert solution('4') == '2 2 1 1 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '4'\n\"\"\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n\n2\n\n3\n\n4''') == '1 1 2 2 3 3 3 2 2'\n\nassert solution('''8\n\n''') == '4'\n\nassert solution('''8\n\n''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 1'\nassert solution('8') == '4'"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n''') == '5 1 2 2 1 3 3 1 3 2'\nassert solution('''2\n''') == '2 1'\nassert solution('''8\n''') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1 1'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('4') == '2 1 1'\nassert solution('5') == '2 1 1 1'\nassert solution('6') == '2 1 1 1 1'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n0rTrT022\n\"\"\") == \"02TrrT20\"\nassert solution(\"\"\"\naA\n\"\"\") == \"a A\"\nprint(solution(*tuple(input().split())))\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 1 1 1 1\"\nassert solution(\"4\") == \"1 1 1 1\"\nassert solution(\"3\") == \"1 1 1\"\nassert solution(\"2\") == \"1 1\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('0rTrT022') == '02TrrT20'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == ''\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2 2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"8\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0rTrT022\") == \"2\"\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('1') == '1'\nassert solution('3 4') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '6\\n0rTrT022\\n'\n) == '2\\n02TrrT20'\nassert solution(\n    '8\\n0rTrT022\\n'\n) == '1\\n02TrrT20'\nassert solution(\n    '5\\nabAcA\\n'\n) == '1\\nab AcA'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n''') == \"2\"\nassert solution('''3\na*a\n2\naaa\naba\n''') == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nabcd\\n2\\nabcd') == '2'\nassert solution('5\\nlo*er\\n2\\nlover\\nloser') == '0'\nassert solution('3\\na*a\\n2\\naaa') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1*2*3\\nabcd') == '2'\nassert solution('4\\na**d\\n2\\nabcd') == '1'\nassert solution('5\\nlo*er\\n2\\nloser') == '0'\nassert solution('6\\na*a\\n2\\naaa') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\na**d\\n2\\nabcd\\n\") == \"2\"\nassert solution(\"5\\nlo*er\\n2\\nlover\\n\") == \"0\"\nassert solution(\"3\\na*a\\n2\\naaa\\n\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '4\\na**d\\n2\\nabcd\\nacbd\\n') == '2'\n\nassert solution(\n    '5\\nlo*er\\n2\\nlover\\nloser\\n') == '1'\n\nassert solution(\n    '3\\na*a\\n2\\naaa\\naba\\n') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n'*3) == '0'\nassert solution('4\\n'*3) == '1'\nassert solution('5\\n'*3) == '1'\nassert solution('3\\n'*3) == '2'\nassert solution('2\\n'*3) == '1'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == '2'\nassert solution('2 3 1\\n1 2 3 4\\n') == '4'\nassert solution('6 1 2\\n3 9 1 2 3\\n') == '4'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4''') == \"1\"\nassert solution('''6 1 2\n3 8 0 1 0 0''') == \"2\""
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4\n''') == '1'\nassert solution('''6 1 2\n3 8 0 1 0 0\n''') == '2'\nassert solution('''7 4 4\n7 8 0 1 1 1 1\n6 6 6 6 1\n1 2 3 4\n5 5 5 5\n6 7 8 9\n10 11 12 13\n''') == '1'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4\n''') == '1'\nassert solution('''6 1 2\n3 8 0 1 0 0\n''') == '2'\nassert solution('''4 2 7\n3 4 2 4 6\n''') == '4'\nassert solution('''9 5 5\n5 5 8 4 9\n5 9 8 9 8\n3 3 9 6 7\n1 1 2 1 2\n''') == '2'\nassert solution('''15 8 4\n4 9 5 9 9 5\n6 5 1 5 4 2\n7 9 5 5 5 9\n5 5 5 5 5 7\n2 4 3 3 3 3\n''') == '3'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4\\n') == \"1\"\nassert solution('6 1 2\\n3 8 0 1 0 0\\n') == \"2\"\nassert solution('4 7 2\\n5 9 0 1 0 0\\n') == \"4\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1\\n1 0 0 0 4\") == \"1\"\nassert solution(\"6 1 2\\n3 8 0 1 0 0\") == \"2\""
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1 1\n1 0 0 0 4''') == '1'\nassert solution('''6 1 2\n3 8 0 1 0 0''') == '2'\nassert solution('''4 1 1\n3 3 3 0 0''') == '0'\nassert solution('''3 1 1\n1 0 0 0 3''') == '1'\nassert solution('''4 1 1\n3 3 3 0 0''') == '0'\n'''"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n2 3\n''') == '40'\nassert solution('''1 42\n3 4\n''') == '1'\n\nprint(solution('''1 1\n2 3\n'''))\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == \"40\"\nassert solution('1 42') == \"1\"\nassert solution('6 4') == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1''') == '40'\nassert solution('''1 42''') == '1'\nassert solution('''6 4''') == '172'\nassert solution('''0 0''') == 'Palindromic tree is better than splay tree'\nprint('\"Run\" is good. Time to check.')\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n''') == '40'\nassert solution('''\n1 42\n''') == '1'\nassert solution('''\n6 4\n''') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'Palindromic tree is better than splay tree'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n2\n\n''') == '40'\nassert solution('''\n1 1\n\n''') == '40'\nassert solution('''\n6 4\n\n''') == '172'\nprint(solution('''\n1 2\n\n'''))"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"1 1\\n\") == \"40\\n\"\n\nassert solution(\n    \"1 42\\n\") == \"1\\n\"\n\nassert solution(\n    \"6 4\\n\") == \"172\\n\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 1 4\\n') == '5'\nassert solution('4 3\\n3 1 4 1\\n') == '6'\nassert solution('5 3\\n3 1 4 1 5\\n') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '11'\nassert solution('5') == '12'\n\"\"\"\nimport math\n\nn = int(input())\nf = [int(i) for i in input().split()]\n\nl = [math.factorial(i) for i in f]"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"11\"\n\nfrom math import factorial"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n3 1 4\n''') == '5'\n\nassert solution('''\n4\n3 1 4 1\n''') == '6'\n\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1 4''') == '5'\nassert solution('''4 3 1 4 1''') == '6'\nassert solution('''5 3 1 4 1 5''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '11'\nassert solution('5') == '15'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5 -1\") == \"4\"\nassert solution(\"3 4 -1 -2\") == \"5\"\n\n'''\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 0 0 -1\n''') == '1'\nassert solution('''\n2\n1 -1\n''') == '2'\nprint(solution(input()))"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 0 0 -1'\n) == '1'\nassert solution(\n    '1 -1'\n) == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\n\"\"\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 0 0 -1\") == \"1\"\nassert solution(\"2 -1\") == \"2\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('-1 -2 -3') == '1'\nassert solution('1 2 -2') == '1'\nassert solution('-1 2 3') == '2'\nassert solution('1 -2 3') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n-1\n''') == '1\n\nassert solution('''\n2\n-1\n''') == '2\n\n''')"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1 -1') == '2'\n\nassert solution('5\\n-10 -5 -3 -2 -4') == '5'\n\nassert solution('100\\n0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 0 0 -1') == '1'\nassert solution('2 1') == '2'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1 -1 -1 -1 0\") == \"0\"\nassert solution(\"3 1 1 1 1\") == \"2\"\nassert solution(\"2 4 0 0 0\") == \"1\"\nassert solution(\"8 -2 1 0 0 1 1 0 1 -1 0 0 0 0\") == \"0\"\nassert solution(\"10 -10 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -1 -2 0 -"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\""
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\""
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('1 2') == '0'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"2\"\nassert solution(input_2) == \"1\"\nassert solution(input_3) == \"0\""
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == input_"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n0 0\n1 1\n''') == '6'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n01000\n1 1\n''') == '7'\n\n\"\"\"\n\nn, m = map(int, input().split())\ns = input()\n\nl = 0\nr = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        l = i\n        break\nfor j in range(n):\n    if j % 2 == 1:\n        r = j\n        break"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"10 20\") == \"20\"\nassert solution(\"10 20 30\") == \"30\"\nassert solution(\"50 50 50\") == \"50\"\nassert solution(\"10 10 10\") == \"1\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n10011\n2 4\n3 5\n''') == '11'\nassert solution('''5 2\n01011\n2 4\n3 5\n''') == '13'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 6\") == \"14\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''\n5 3\n00100\n11000\n01000\n''') == '6'\nassert solution('''\n5 2\n01001\n2 4\n3 5\n''') == '6'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"10 2\") == \"10\"\nassert solution(\"5 5\") == \"16\"\nassert solution(\"4 5\") == \"16\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '6'\nassert solution('7 2') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('3 3') == '6'\nassert solution('1 4') == '5'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '6'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 2 1 2 1 2\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n1 4 1 4 1 4 1\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1 1 2 2 1 1\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == \"6\""
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"6\"\nassert solution(\"1 2 1 2 1 2\") == \"13\"\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\nassert solution('''\n1 1 1 1 1 1\n''') == '6'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\nassert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\nassert solution('1 1 1 1 1 1') == '6'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1 1 1\\n') == '6\\n'\nassert solution('1 2 1 2 1 2\\n') == '13\\n'\nassert solution('1 2 3 4 5 6\\n') == '12\\n'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == \"6\"\n\"\"\"\n--- Part Two ---\n\nNow, the boy can count any number of triangles but can't draw more than 1,000. Help him solve this task.\n\nThe boy started counting from the top left corner and started to count the triangles along the sides of the hexagon. The boy started drawing a line with one line segment in each iteration, but he got bored of it, so he started to count the triangles along the sides of the hexagon.\n\nThe boy can draw lines from any point of the hexagon to any point on the opposite side of the hexagon. To make him count the triangles in the hexagon, he has to count the triangles that go in the lines he drew.\n\nThe task is simple: he has to count the number of triangles that go in all the lines.\n\nGerald got a very curious hexagon for his birthday. The boy found out that all the angles of the hexagon are equal to $120^{\\circ}$. Then he measured the length of the sides, and found that each of them is equal to an integer number of centimeters. There the properties of the hexagon ended and Gerald decided to draw on it.\n\nHe painted a few lines, parallel to the sides of the hexagon. The lines split the hexagon into regular triangles with sides of 1 centimeter. Now Gerald wonders how many triangles he has got. But there were so many of them that Gerald lost the track of his counting. Help the boy count the triangles.\n\n\n-----Input-----\n\nThe first and the single line of the input contains 6 space-separated integers a_1, a_2, a_3, a_4, a_5 and a_6 (1 \u2264 a_{i} \u2264 1000) \u2014 the lengths of the sides of the hexagons in centimeters in the clockwise order. It is guaranteed that the hexagon with the indicated properties and the exactly such sides exists.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of triangles with the sides of one 1 centimeter, into which the hexagon is split.\n\n\n-----Examples-----\nInput\n1 1 1 1 1 1\n\nOutput\n6\n\nInput\n1 2 1 2 1 2\n\nOutput\n13\n\n\n\n\"\"\""
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\nassert solution('''\n1 1 1 1 1 1\n''') == '6'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\n\n'''\n\nimport math"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '4'\nassert solution('9') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('9') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''9\n1 2 3 5 6 7 8 9 10''') == '4'\nassert solution('''5\n2 3 4 6 9''') == '4'\nassert solution('''6\n2 3 4 5 6 8''') == '4'\nassert solution('''7\n2 3 4 5 6 7 8''') == '3'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '2'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n2 3 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n2 3 4 6 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n9\n1 2 3 5 6 7 8 9 10\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'\nassert solution('12\\n1 2 3 5 6 7 8 9 10') == '6'\nassert solution('15\\n1 2 3 5 6 7 8 9 10') == '5'\nassert solution('15\\n1 2 3 4 5 6 7 8 9 10') == '5'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 3 4 6 9\n''') == '4'\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == '4'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '5'\nassert solution('''\n10\n1 2 3 5 6 7 8 9 10 10\n''') == '9'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '10'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n2 3 4 6 9\n\"\"\") == \"4\"\n\nassert solution(\"\"\"9\n1 2 3 5 6 7 8 9 10\n\"\"\") == \"4\"\n\nassert solution(\"\"\"10\n1 2 3 5 6 7 8 9 10 11\n\"\"\") == \"10\"\n\nassert solution(\"\"\"1\n2 3 4 5 6 7 8 9 10 11 12\n\"\"\") == \"9\"\n\nassert solution(\"\"\"10\n1 2 3 4 5 6 7 8 9 10 11 12 13\n\"\"\") == \"12\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2 3 4 6 9\n''') == 4\nassert solution('''\n9\n1 2 3 5 6 7 8 9 10\n''') == 4\nassert solution('''\n5\n1 2 3 4 6 7 8 9\n''') == 5\nassert solution('''\n10\n2 8 12 16 32 64 128 256 512 1024''') == 8\nassert solution('''\n100\n1 1 1 2 2 2 3 2 3 2 4 2 4 2 5 2 5 2 6 2 6 2 7 2 7 2 8 2 8 2 9 2 9 2 10 2 10 2 11 2 11 2 12 2 12 2 13 2 13 2 14 2 14 2 15 2 15 2 16 2 16 2 17 2 17 2 18 2 18 2 19 2 19 2 20 2 20 2 21 2 21 2 22 2 22 2 23 2 23 2 24 2 24 2 25 2 25 2 26 2 26 2 27 2 27 2 28 2 28 2 29 2 29 2 30 2 30 2 31 2 31 2 32 2 32 2 33 2 33 2 34 2 34 2 35 2 35 2 36 2 36 2 37 2 37 2 38 2 38 2 39 2 39 2 40 2 40 2 41 2 41 2 42 2 42 2 43 2 43 2 44 2 44 2 45 2 45 2 46 2 46 2 47 2 47 2 48 2 48 2 49 2 49 2 50 2 50 2 51 2 51 2 52 2 52 2 53 2 53 2 54 2 54 2 55 2 55 2 56 2 56 2 57 2 57 2 58 2 58 2 59 2 59 2 60 2 60 2 61 2 61 2 62 2 62 2 63 2 63 2 64 2 64 2 65 2 65 2 66 2 66 2 67 2 67 2 68 2 68 2 69 2 69 2 70 2 70 2 71 2 71 2 72 2 72 2 73 2 73 2 74 2 74 2 75 2 75 2 76 2 76 2 77 2 77 2 78 2 78 2 79 2 79 2 80 2 80 2 81 2 81 2 82 2 82 2 83 2 83 2 84 2 84 2 85 2 85 2 86 2 86 2 87 2 87 2 88 2 88 2 89 2 89 2 90 2 90 2 91 2 91 2 92 2 92 2 93 2 93 2 94 2 94 2 95 2 95 2 96 2 96 2 97 2 97 2 98 2 98 2 99 2 99 2 100 2 100 2 101 2 101 2 102 2 102 2 103 2 103 2 104 2 104 2 105 2 105 2 106 2 106 2 107 2 107 2 108 2 108 2 109 2 109 2 110 2 110 2 111 2 111 2 112 2 112 2 113 2 113 2 114 2 114 2 115 2 115 2 116 2 116 2 117 2 117 2 118 2 118 2 119 2 119 2 120 2 120 2 121 2 121 2 122 2 122 2 123 2 123 2 124 2 124 2 125 2 125 2 126 2 126 2 127 2 127 2 128 2 128 2 129 2 129 2 130 2 130 2 131 2 131 2 132 2 132 2 133 2 133 2 134 2 134 2 135 2 135 2 136 2 136 2 137 2 137 2 138 2 138 2 139 2 139 2 140 2 140 2 141 2 141 2 142 2 142 2 143 2 143 2 144 2 144 2 145 2 145 2 146 2 146 2 147 2 147 2 148 2 148 2 149 2 149 2 150 2 150 2 151 2 151 2 152 2 152 2 153 2 153 2 154 2 154 2 155 2 155 2 156 2 156 2 157 2 157 2 158 2 158 2 159 2 159 2 160 2 160 2 161 2 161 2 162 2 162 2 163 2 163 2 164 2 164 2 165 2 165 2 166 2 166 2 167 2 167 2 168 2 168 2 169 2 169 2 170 2 170 2 171 2 171 2 172 2 172 2 173 2 173 2 174 2 174 2 175 2 175 2 176 2 176 2 177 2 177 2 178 2 178 2 179 2 179 2 180 2 180 2 181 2 181 2 182 2 182 2 183 2 183 2 184 2 184 2 185 2 185 2 186 2 186 2 187 2 187 2 188 2 188 2 189 2 189 2 190 2 190 2 191 2 191 2 192 2 192 2 193 2 193 2 194 2 194 2 195 2 195 2 196 2 196 2 197 2 197 2 198 2 198 2 199 2 199 2 200 2 200 2 201 2 201 2 202 2 202 2 203 2 203 2 204 2 204 2 205 2 205 2 206 2 206 2 207 2 207 2 208 2 208 2 209 2 209 2 210 2 210 2 211 2 211 2 212 2 212 2 213 2 213 2 214 2 214 2 215 2 215 2 216 2 216 2 217 2 217 2 218 2 218 2 219 2 219 2 220 2 220 2 221 2 221 2 222 2 222 2 223 2 223 2 224 2 224 2 225 2 225 2 226 2 226 2 227 2 227 2 228 2 228 2 229 2 229 2 230 2 230 2 231 2 231 2 232 2 232 2 233 2 233 2 234 2 234 2 235 2 235 2 236 2 236 2 237 2 237 2 238 2 238 2 239 2 239 2 240 2 240 2 241 2 241 2 242 2 242 2 243 2 243 2 244 2 244 2 245 2 245 2 246 2 246 2 247 2 247 2 248 2 248 2 249 2 249 2 250 2 250 2 251 2 251 2 252 2 252 2 253 2 253 2 254 2 254 2 255 2 255 2 256 2 256 2 257 2 257 2 258 2 258 2 259 2 259 2 260 2 260 2 261 2 261 2 262 2 262 2 263 2 263 2 264 2 264 2 265 2 265 2 266 2 266 2 267 2 267 2 268 2 268 2 269 2 269 2 270 2 270 2 271 2 271 2 272 2 272 2 273 2 273 2 274 2 274 2 275 2 275 2 276 2 276 2 277 2 277 2 278 2 278 2 279 2 279 2 280 2 280 2 281 2 281 2 282 2 282 2 283 2 283 2 284 2 284 2 285 2 285 2 286 2 286 2 287 2 287 2 288 2 288 2 289 2 289 2 290 2 290 2 291 2 291 2 292 2 292 2 293 2 293 2 294 2 294 2 295 2 295 2 296 2 296 2 297 2 297 2 298 2 298 2 299 2 299 2 300 2 300 2 301 2 301 2 302 2 302 2 303 2 303 2 304 2 304 2 305 2 305 2 306 2 306 2 307 2 307 2 308 2 308 2 309 2 309 2 310 2 310 2 311 2 311 2 312 2 312 2 313 2 313 2 314 2 314 2 315 2 315 2 316 2 316 2 317 2 317 2 318 2 318 2 319 2 319 2 320 2 320 2 321 2 321 2 322 2 322 2 323 2 323 2 324 2 324 2 325 2 325 2 326 2 326 2 327 2 327 2 328 2 328 2 329 2 329 2 330 2 330 2 331 2 331 2 332 2 332 2 333 2 333 2 334 2 334 2 335 2 335 2 336 2 336 2 337 2 337 2 338 2 338 2 339 2 339 2 340 2 340 2 341 2 341 2 342 2 342 2 343 2 343 2 344 2 344 2 345 2 345 2 346 2 346 2 347 2 347 2 348 2 348 2 349 2 349 2 350 2 350 2 351 2 351 2 352 2 352 2 353 2 353 2 354 2 354 2 355 2 355 2 356 2 356 2 357 2 357 2 358 2 358 2 359 2 359 2 360 2 360 2 361 2 361 2 362 2 362 2 363 2 363 2 364 2 364 2 365 2 365 2 366 2 366 2 367 2 367 2 368 2 368 2 369 2 369 2 370 2 370 2 371 2 371 2 372 2 372 2 373 2 373 2 374 2 374 2 375 2 375 2 376 2 376 2 377 2 377 2 378 2 378 2 379 2 379 2 380 2"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3') == '3'\nassert solution('10\\n2 3 4 5 6 7 8 9 10') == '10'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2 3 4 6 9\n''') == '4'\nassert solution('''9\n1 2 3 5 6 7 8 9 10\n''') == '4'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n''') == '8'\nassert solution('''0\n1 2 3 4 5 6 7 8 9 10\n''') == '10'"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n3') == 'SURGERY COMPLETE'\nassert solution('4\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13') == 'IR'\nassert solution('5\\n13 14 7 29 28 19 9 18 42 8 17 33 1\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1') == 'S rr'\nassert solution('7\\n38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\n31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3') == 'I lldll'\nassert solution('7\\n43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1') == 'S rr'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE\\nSURGERY FAILED\\nSURGERY COMPLETE\\nSURGERY FAILED\\nSURGERY COMPLETE\\nSURGERY FAILED\\nSURGERY COMPLETE\\nSURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'SURGERY FAILED'\nassert solution('3') == 'SURGERY COMPLETE'\nassert solution('1') == 'SURGERY FAILED'\nassert solution('2 1 2 1 3 1 2 1 2') == 'U'\nassert solution('3 4 5') == 'L'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'IR'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\nassert solution('''\n1\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\nassert solution('''\n1\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY COMPLETE\\nIR\\nR rr\\nI lldll\\nDONE\\n'\n\nassert solution('3\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'\n\nassert solution('3\\n2\\n1 2 3\\n7 8 9\\n10 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'\n\nassert solution('4\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'\n\nassert solution('3\\n4\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY FAILED'"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\nS\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'SURGERY COMPLETE'\nassert solution('1\\n2\\n3\\n5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY FAILED'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\") == \"SURGERY COMPLETE\"\n\nassert solution(\"4\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n8\\n6\\n7\\n4\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 5') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1') == '1 2 3 "
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6 2 5\n3 2 1''') == '6 5 8 3 4 1 9 2 7'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n9 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''\n3 2 1\n''') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 5 4 3') == '4 5 2 3 1'\nassert solution('3 2 1') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([9, 2, 5]) == \"6 5 8 3 4 1 9 2 7\"\nassert solution([3, 2, 1]) == \"1 2 3 "
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '1 2 3', \"3 2 1\"\nassert solution('6 2 5') == '6 5 8 3 4 1 9 2 7', \"6 2 5\"\nprint(solution())\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([9, 2, 5]) == \"6 5 8 3 4 1 9 2 7\", \"Wrong\""
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"4 4 4\") == \"4 1 1 2 2\"\nassert solution(\"5 1 1\") == \"1 1 1 2 2\"\nassert solution(\"5 5 5\") == \"5 1 1 1 2 2\"\nassert solution(\"6 6 6\") == \"6 1 1 1 2 2\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n3 2\n3 2 1\n''') == '3'\n\nassert solution(\n'''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\n\nstdin = \"\"\"\n6 3\n4 2 2 4 1 2\n\"\"\""
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '2'\nassert solution('4 4') == '4'\nassert solution('5 1') == '5'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\", \"Invalid input\"\nassert solution(\"5 1\") == \"5\", \"Invalid input\"\nassert solution(\"3 2\") == \"3\", \"Invalid input\"\nassert solution(\"5 2\") == \"4\", \"Invalid input\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '2'\nassert solution('5 1') == '4'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1') == '4'\nassert solution('5 1') == '4'\nassert solution('3 2') == '3'\nassert solution('3 2') == '3'\nassert solution('3 2') == '3'"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n3 2 1\n''') == '3'\nassert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nassert solution('''\n3 2\n1 0 1\n''') == '2'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"4\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''bwwwbwwbw\nbwwwbwwbw''') == '5'\nassert solution('''bwwbwwb\nbwwbwwb''') == '3'\nassert solution('''bbbwbw\nbbbwbb''') == '3'\nassert solution('''bbbbbw\nbbbwbwb''') == '3'\nassert solution('''bbbwbwb\nbbbbbw''') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nbwwwbwwbw\n''') == '5'\nassert solution('''\nbwwbwwb\n''') == '3'\nassert solution('''\nbw\n''') == '1'\nassert solution('''\nwbwwwbwwbwwbwwbwwbw\n''') == '9'\nassert solution('''\nbw\n''') == '2'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"bwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bbwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\\n2\\n1\\n2\") == \"2\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '10'"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5\n2 2\n0 1\n....\n..*.\n....\n\n''') == '10', 'First example'\nassert solution('''4 4\n2 2\n0 1\n....\n..*.\n....\n\n''') == '7', 'Second example'\n\n'''\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == '10'\nassert solution('4 4') == '7'\n\n------------------\n\n4 4\n1 2\n.+*.\n++.\n+++*.\n\n3 3\n1 2\n+\n*\n\n5 5\n1 2\n+\n.+*\n*+\n+\n.+*\n+\n*\n*+\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == '10'\nassert solution('''4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == '7'\nassert solution('''5 5\n3 2\n1 2\n...*.\n...*.\n*....\n''') == '33'\nassert solution('''6 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n4 4\n4 5\n5 5\n5 6\n5 7\n''') == '75'"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n3 2\\n1 2\\n.....\\n.***.\\n...**\\n*....') == '10'\nassert solution('4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....') == '7'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"10\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"10\"\nassert solution(\"\"\"\n5 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 4 2 2\n''') == '2'\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"2\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '2'"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"3\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 4 2 2\\n\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\\n\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 2 2\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n\n\n\"\"\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_1) == \"2\"\nassert solution(input_2) == \"2\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1\\naba\") == \"7\"\nassert solution(\"4 1 1\\nabcd\") == \"4\"\nassert solution(\"4 10 1\\naaaa\") == \"12\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 1\naba''') == '7'\nassert solution('''4 1 1\nabcd''') == '4'\nassert solution('''4 10 1\naaaa''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 1\\naba') == '7'\nassert solution('4 1 1\\nabcd') == '4'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 1\naba''') == '7'\nassert solution('''4 1 1\nabcd''') == '4'\nassert solution('''4 10 1\naaaa''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3 1\naba\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n4 10 1\naaaa\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n4 1 1\nabcd\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 1\naba\n\n''') == 7\nassert solution('''\n4 1 1\nabcd\n\n''') == 4\nassert solution('''\n4 10 1\naaaa\n\n''') == 12\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 1 1\nabcd\n''') == '12'\nassert solution('''3 3 1\naba\n''') == '7'\nassert solution('''4 10 1\naaaa\n''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    3 3 1\n    aba\n    ''',\n    '7'\n    ) == '7'\n\nassert solution(\n    '''\n    4 1 1\n    aaaa\n    ''',\n    '12'\n    ) == '12'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '1'\n\n'''\n\nimport math\n\nstdin = input().split()\nn = int(stdin[0])\nk = int(stdin[1])\n\nmod = math.factorial(n)\n\nn = math.factorial(n)\n\nprint(math.factorial(k) * n % mod)"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\nassert solution('10 20 30 40 50 60 70 80 90 100 110') == '3'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, input().split())\nd = deque(list(range(1, n+1)))\n\neat_1, eat_2 = 0, 0\n\nwhile d:\n    if d[0] == k:\n        d.popleft()\n        eat_1 += 1\n    else:\n        d.rotate(-1)\n    if d[-1] == k:\n        d.pop()\n        eat_2 += 1\n    else:\n        d.rotate()\n\nprint(eat_1)\nprint(eat_2)"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n\") == \"1\"\nassert solution(\"3 4\\n\") == \"5\"\n\nSample Tests:\n>>> solution(\"3 1\\n\")\n'1'\n>>> solution(\"3 4\\n\")\n'5'\n>>> solution(\"4 3\\n\")\n'8'\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\nimport collections\ndeque = collections.deque()\nfor i in range(1, n+1):\n    deque.append(i)"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '1'\nassert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('3 4') == '1'\nassert solution('7 8') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\nassert solution('10 5') == '3'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == '1'\n\"\"\"\n\na = list(map(int, input().split()))\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\n\"\"\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"8\"\nassert solution(\"4 -3\") == \"3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n2 2 2 2\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 2\\n\") == \"8\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2\n2 2\n2 2\n2 2\n''') == 8\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"8\"\nassert solution(\"4 -3\") == \"3\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '3'\nprint(solution(input))\nprint(\"You're all set!\")"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 2 2 2\") == \"8\"\n\nassert solution(\"4 -3\\n3 -6 -3 12\") == \"3\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2\\n2 2 2 2') == '8'\nassert solution('4 -3\\n3 -6 -3 12') == '3'\nprint(solution('''2\n2 2 2 2\n'''))\nprint(solution('''4\n-3\n3 -6 -3 12\n'''))"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([5, 3, 1, 8, 3]) == '11'\nassert solution([3, 2, 1, 300, 1000]) == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n''') == '11'\nassert solution('''4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n''') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5 3 1 8\n    BerBank University\n    University BerMall\n    University BerBank''') == '11'\n\nassert solution('''4 2 1 300 1000\n    a A\n    A aa\n    aa AA\n    AA a\n    ''') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5 3 1 8\n    a A\n    A aa\n    aa AA\n    AA a\n''') == '11'\nassert solution('''4 2 1 300 1000\n    a A\n    A aa\n    aa AA\n    AA a\n''') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1 1 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5\n1 1 5 2 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1\\n1') == 'YES'\nassert solution('5\\n1 1 1 5 2 1') == 'NO'\nassert solution('10\\n1 1 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10') == 'YES'"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 1 1 4\n''') == 'YES'\nassert solution('''5\n1 1 5 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 4') == 'YES'\nassert solution('5 1 5 2 1') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(4) == \"YES\"\nassert solution(5) == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 1 1 4\n''') == 'YES', \"Square\"\nassert solution('''\n7\n1 1 1 1 4 5 2\n''') == 'NO', \"Square\"\nassert solution('''\n9\n1 1 1 1 1 1 1 4 1\n''') == 'YES', \"Square\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 4\") == \"YES\"\nassert solution(\"5\\n1 1 5 2 1\") == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 4\") == \"YES\", \"First\"\nassert solution(\"1 1 5 2 1\") == \"NO\", \"Second\"\nassert solution(\"1 2 5 2 1\") == \"YES\", \"Third\"\nassert solution(\"1 3 5 2 1\") == \"NO\", \"Fourth\"\nassert solution(\"1 4 5 2 1\") == \"NO\", \"Fifth\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 1 5 2 1\") == \"YES\"\nassert solution(\"1 1 1 4\") == \"YES\"\nassert solution(\"4 5 1 5 2 1\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 5 2 1\") == \"YES\"\nassert solution(\"1 1 1 4\") == \"NO\""
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([5]) == '-15'\nassert solution([3]) == '-5'\nassert solution([2]) == '1'\nassert solution([4]) == '1'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('3') == '-5'\nassert solution('2') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([5,1,1,1]) == '1'\nassert solution([4,1,1,1]) == '1'\nassert solution([2,1,1,1]) == '1'\nassert solution([3,1,1,1]) == '1'\nassert solution([2,1,1,1]) == '1'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '-15'\nassert solution('4') == '1'\nassert solution('2') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '-15'\nassert solution('4') == '1100'\nassert solution('2') == '900'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('5\\n10 5 0 -5 -10') == '-15'\nassert solution('3\\n5 1 -5') == '-5'\nassert solution('2\\n900 1000') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 1 1 1''') == '1'\nassert solution('''5\n10 5 0 -5 -10''') == '-15'\nassert solution('''3\n5 1 -5''') == '-5'\nassert solution('''2\n900 1000''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n10 5 0 -5 -10\n''') == '-15'\n\nassert solution('''\n4\n1 1 1 1\n''') == '1'\n\nassert solution('''\n3\n5 1 -5\n''') == '-5'\n\nassert solution('''\n2\n900 1000\n''') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10 5 0 -5 -10\") == \"-15\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"2\\n900 1000\") == \"1100\"\nprint(solution(input()))"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n10 5 0 -5 -10') == '-15'\nassert solution('4\\n1 1 1 1') == '1'\nassert solution('2\\n900 1000') == '1100'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'YES', \"Some bug in solution\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'YES', \"6th\"\nassert solution('''\n    5\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'YES', \"7th\"\nassert solution('''\n    6\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'NO', \"8th\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"NO\"\nassert solution(\"2\\n1 2\\n\") == \"NO\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n\") == \"YES\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n\") == \"YES\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'YES'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'YES'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n') == 'NO'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    5\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'NO'\n\nassert solution('''\n    6\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'NO'\n\nassert solution('''\n    5\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'YES'\n\nassert solution('''\n    3\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'NO'\n\nassert solution('''\n    4\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n''') == 'YES'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\") == \"NO\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"YES\"\nassert solution(\"3\\n1 2\\n1 3\") == \"NO\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"YES\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == \"YES\"\nassert solution('''\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == \"NO\"\n''')"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\n\n'''\n\nfrom collections import deque\n\nclass Solution:\n    def solve(self, N):\n        tree = [[] for i in range(N+1)]\n        \n        for i in range(1, N):\n            tree[i].append(i)\n            tree[i].append(2)\n        \n        max_size = N\n        \n        queue = deque([[0, 0]])\n        visited = []\n        while queue:\n            length = len(queue)\n            \n            for _ in range(length):\n                current_node, length_left = queue.popleft()\n                visited.append(current_node)\n                \n                if length_left == 0:\n                    continue\n                \n                if current_node+1 in tree:\n                    queue.append([current_node+1, length_left-1])\n                if current_node+2 in tree:\n                    queue.append([current_node+2, length_left-1])\n            \n            if len(queue) == 0:\n                if max_size > length:\n                    max_size = length\n                    \n        return max_size"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('2 2 2') == '2'\nassert solution('3') == '1'\nassert solution('3 2 1') == '3'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n4') == '0\\n1\\n2\\n3'\nassert solution('2\\n2 4') == '1\\n3'\n\n\n\"\"\"\nimport sys\nsys.stdin = open(\"input.txt\", \"rt\")\nfrom collections import deque\n\nn = int(input())\nb = deque(map(int, input().split()))\ncnt, res = 0, 0\nwhile True:\n    if len(b) < 2:\n        print(cnt)\n        break\n    if max(b) - min(b) <= 10**18:\n        cnt += 1\n        if cnt == n:\n            print(cnt)\n            print(*b)\n            break\n        else:\n            while True:\n                if not b:\n                    print(cnt)\n                    break\n                b.pop()\n                cnt += 1\n                if cnt == n:\n                    print(*b)\n                    break\n    else:\n        b.popleft()\n        if not b:\n            print(cnt)\n            break\n        b.pop()\n        cnt += 1\n    if not b:\n        print(cnt)\n        break"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"0\", \"First\"\nassert solution(\"2 6\") == \"2\", \"Second\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2 3\\n') == '1\\n'\nassert solution('2\\n4 7\\n') == '0\\n'\nassert solution('3\\n7 2\\n') == '1\\n'\nassert solution('4\\n0 1\\n') == '0\\n'\nassert solution('5\\n1 1\\n') == '1\\n'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 2 3 4\n\nOutput\n0\n''') == '1 2 3 4'\nassert solution('''\n7\n1 2 3 4 5 6 7\n\nOutput\n5\n2 4 5 6 7\n''') == '2 4 5 6 7'\nassert solution('''\n8\n1 2 3 4 5 6 7 8\n\nOutput\n4\n2 4 5 6 7 8\n''') == '2 4 5 6 7 8'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n3\n1 2 3 4 5 6 7 8 9 10\n''') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('''\n7\n1 2 3 4 5 6 7\n\nOutput\n0\n''') == '1 2 3 4 5 6 7'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '2'\nassert solution('1') == '0'"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '3'\nassert solution('1') == '2'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\n\"\"\"\n\n\nfrom itertools import product, permutations\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 6\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\naab\nccb''') == '6'\n\"\"\"\n\nn = int(input())\ns1 = input()\ns2 = input()\n\ndict_s1 = {}\ndict_s2 = {}\n\nfor i in range(len(s1)):\n    if s1[i] not in dict_s1.keys():\n        dict_s1[s1[i]] = 1\n    else:\n        dict_s1[s1[i]] += 1\n\nfor i in range(len(s2)):\n    if s2[i] not in dict_s2.keys():\n        dict_s2[s2[i]] = 1\n    else:\n        dict_s2[s2[i]] += 1\n\ndict_s1 = {key: value for key, value in dict_s1.items() if value >= 2}\ndict_s2 = {key: value for key, value in dict_s2.items() if value >= 2}\n\nprint(len(dict_s1.keys() & dict_s2.keys()) % 1000000007)\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '9'\nassert solution('5') == '12'"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"2\"\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import product\nimport itertools\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '6'\nassert solution('5') == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '9'\nassert solution('5') == '42'\n'''\n\nn = int(input())\na = list(input().strip())\nb = list(input().strip())"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '12'\n'''\n\n\nimport math\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\naab\\ncbb') == '6'\nassert solution('4\\nabcd\\nabcd') == '1'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100 100 5\") == \"YES\"\nassert solution(\"100 8 5\") == \"NO\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10 8 5\n5 2 1 2 1\n''') == 'YES'\nassert solution('''\n100 8 5\n5 2 1 2 1\n''') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"YES\"\nassert solution(sample_input_2) == \"NO\"\nassert solution(input) == \"YES\"\n\n'''\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n100 100 5\n5 2 1 2 1\n''') == 'YES'\nassert solution('''\n100 8 5\n5 2 1 2 1\n''') == 'NO'\nassert solution('''\n100 100 7\n1 2 3 4 5 6 7\n''') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'\nassert solution('1 2 3 4 5 6 7') == 'NO'\nassert solution('100 100 7') == 'NO'\nassert solution('100 100 5') == 'YES'\nassert solution('100 1000 100') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7\") == \"YES\"\nassert solution(\"10 10 10 10\") == \"YES\"\nassert solution(\"10 10 9 9\") == \"NO\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1\\n') == 'YES'\nassert solution('100 8 5\\n5 2 1 2 1\\n') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5 6 7 8') == 'YES'\nassert solution('100 100 7') == 'NO'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('5 100 7\\n5 2 1 2 1') == 'NO'\nassert solution('100 8 5\\n1 2 3 4 5 6 7') == 'NO'\nassert solution('100 100 7\\n1 2 3 4 5 6 7') == 'YES'"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n1 2 1\n2 3 4''') == '1'\n\nassert solution('''8 3\n1 1 5 3\n4 1 5 3\n1 4 5 2\n2 4 5 2\n3 4 5 2\n1 5 5 2\n2 5 5 2\n3 5 5 2''') == '4'\n\nassert solution('''10 2\n1 4 5 10\n3 4 5 10\n4 5 6 9\n7 5 6 10\n1 6 6 9\n3 6 6 9\n3 7 6 9\n1 7 6 9\n2 7 6 9\n5 7 6 9\n7 8 6 9\n1 8 6 9\n2 8 6 9\n5 8 6 9\n7 9 6 9\n3 9 6 9\n3 10 6 9\n1 10 6 9\n2 10 6 9\n5 10 6 9''') == '2'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 2') == '4'\nassert solution('7 6') == '3'\nassert solution('10 10 10 10 10 10 10 10 10 10') == '30'\n\"\"\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\nassert solution('''\n4 3\n2 3 5\n1 2 4\n''') == '4'\nassert solution('''\n4 1\n2 1 5\n1 2 5\n''') == '5'\n''')"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\n\nassert solution('''10 20\n3 1 4 3\n2 5 2 5\n''') == '3'\nassert solution('''5 2\n2 2 2 2 2\n''') == '0'\nassert solution('''4 5\n2 2 2 2\n2 1 2 1\n1 2 3 3\n3 3 1 1\n''') == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == '4'\nassert solution('''\n10 2\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'\nassert solution('''\n10 2\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3'"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"10 2\\n4 1 5 10\"\n    ) == \"4\"\n\nassert solution(\n    \"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\"\n    ) == \"3\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == '4', \"First\"\nassert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == '3', \"Second\"\nassert solution('''10 4\n1 2 3 5 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9 10 11 12 13 14\n1 2 3 5 6 7 8 9 10\n4 5 6 7 8 9 10 11\n7 8 9"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 2\\n'\n                '4 1 5 10\\n'\n                '1 4 10 5\\n') == '4'\nassert solution('7 6\\n'\n                '2 1 2 1\\n'\n                '4 2 4 3\\n'\n                '2 5 2 5\\n'\n                '2 3 5 3\\n'\n                '1 2 1 2\\n'\n                '3 2 5 3\\n') == '3'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n\n'''\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n1 2\\n1 2 3\\n4 3\\n3 1 2 3\\n10 3\\n') == 'no'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes\\nyes\\nno\\nyes\\nyes\\n'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == 'yes\\nno\\nyes\\nno\\nyes\\n'\nassert solution('5 4') == 'yes\\nno\\nyes\\nyes\\nyes\\n'\nassert solution('5 1') == 'no\\n'\nassert solution('5 2') == 'no\\nyes\\n'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n3 3\\n1 5 2 6 1') == 'yes'\nassert solution('5\\n3 3\\n1 5 2 6 1') == 'no'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'no'\n\"\"\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 5 2 6 1\\n1 6') == 'no\\nyes\\nno\\nyes\\nno'\nassert solution('5 2\\n1 2 3\\n1 2 3') == 'no\\nyes\\nno\\nyes'\nassert solution('5 3\\n3 2') == 'no\\nyes\\nno\\nyes'\nassert solution('10 3\\n1 2 3\\n1 2 3') == 'no\\nyes\\nno\\nyes'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5\n1\n1\n1\n1\n1\n1\n''') == 'yes'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\nassert solution('4 1') == '1 1 1 1'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"10 4\") == \"9\"\n\n\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\nassert solution('1 4') == '5 2 0 1'\n\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 3\n2 5\n4 5\n\n''') == '2'\nassert solution('''4 2\n1 4\n2 4\n\n''') == '3'\nassert solution('''7 4\n1 7\n2 7\n3 8\n4 9\n5 10\n6 11\n7 12\n\n''') == '5'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 3\n2 5\n4 5\n''') == '2'\nassert solution('''4 2\n1 4\n2 4\n''') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 3\n2 5\n4 5\n''') == '2'\nassert solution('''\n4 2\n1 4\n2 4\n''') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 3\\n2 5\\n4 5\\n') == '2'\nassert solution('4 2\\n1 4\\n2 4\\n') == '3'\n\ninput = sys.stdin.read()\ndata = list(map(int, input.split()))\nn = data[0]\nm = data[1]\na = data[2:]\n\nfor i in range(1, m + 1):\n    a[i], a[i + 1] = a[i + 1], a[i]\n\nsum = [0] * (n + 1)\n\nfor i in range(n):\n    sum[i] = sum[i - 1] + a[i]\n\nfor i in range(m, n + 1):\n    sum[i] = sum[i - 1] + a[i]\n\nsum = list(map(lambda x: max(sum) - x, sum))\nprint(max(sum))\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"1 0 2 1 0\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == \"NO\"\nassert solution(s1) == \"YES\"\nassert solution(s2) == \"YES\""
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('5 5') == 'YES'\nassert solution('2 10') == 'NO'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('5 5') == 'NO'\nassert solution('5 5') == 'YES'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 3\n1 0 1\n3 1 2 3\n2 1 2\n2 1 3\n2 2 3\n2 2 3\"\"\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == 'NO'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'NO'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == 'NO'\n\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'\n\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"(#)\") == \"-\"\nassert solution(\"((((#))\") == \"1\"\nassert solution(\"#\") == \"-\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('((#)()((#((#(#(#)') == '2'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(((#)((#)') == \"1\"\nassert solution('()((#((#(#()') == \"2\"\nassert solution('#') == -1\nassert solution('(#)') == -1\nassert solution('(((#))') == \"1\""
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\n\n'''\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('(((#)((#)') == 1\nassert solution('())') == -1\nassert solution('#') == -1\nassert solution('(((#)(((#())))') == 1\nassert solution('(((#)())()(()((((#)()(())))())))') == -1\n\n\"\"\""
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('(((#)((#)') == '1'\n\nassert solution('()((#((#(#()') == '2'\n\nassert solution('#') == '-1'\n\nassert solution('#') == '-1'"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"#\") == \"-\"\nassert solution(\"#\") == \"-\"\n\nassert solution(\"(((((#)(((#)\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('()((#((#(#()') == '2'\nassert solution
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(('(((#)((#)',)) == 1\nassert solution(('()((#((#(#()',)) == 2\nassert solution(('(#)',)) == -1\nassert solution('()((#((#(#()',)) == 2\nassert solution('(((#)',)) == -1\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"(#)\") == \"-1\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"0 2\") == \"-16\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"0 4\") == \"16\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nprint(solution(*(input().split())))"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"1000000000 0\") == \"-1000000000\"\nassert solution(\"1000000000 1\") == \"1000000001\"\nassert solution(\"1000000000 100\") == \"1000000001\""
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\n\n\n'''\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution(' ') == '0'\nassert solution('   ') == '0'\nassert solution('   o') == '0'\nassert solution('   x') == '0'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3''') == '-1'\nassert solution('''4 0''') == '16'\nassert solution('''0 4''') == '-16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"-16\"\nprint(solution(input()))\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == '17'"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"17\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"17\"\nassert solution(input(\"\")) == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 1 2') == '17'\nassert solution('1 2 1') == '16'\nassert solution('2 1 1') == '16'\nassert solution('2 2 2') == '16'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '17'\nassert solution('1 2 2') == '4'\nassert solution('2 2 2') == '4'\nassert solution('2 2 2') == '4'\n\n'''\n\nn, m, k = map(int, input().split())\n\na = n\nb = n + m\nc = m + k\nans = 0\nwhile a!= 1:\n    if a % 3 == 1:\n        ans += 1\n    a //= 3\n\nwhile b!= 1:\n    if b % 3 == 1:\n        ans += 1\n    b //= 3\n\nwhile c!= 1:\n    if c % 3 == 1:\n        ans += 1\n    c //= 3\n\nprint(ans)\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"2 1 2\") == \"17\"\nassert solution(\"3 2 2\") == \"17\"\nassert solution(\"4 3 3\") == \"17\"\nassert solution(\"5 4 4\") == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"1 2 2\") == \"9\"\nassert solution(\"1 1 1\") == \"17\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2 2 2 \\n2 2 2 \\n\"\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n\nassert solution('''2 2\n2 1 2\n1 3 2\n''') == '3 2'\n\nassert solution('''5 5\n1 3 1\n1 2 2\n1 4 5\n1 3 1\n1 2 1\n3 2 2\n1 3 2\n1 1 3\n2 1 2\n2 1 1\n4 2 5\n1 3 3\n1 4 5\n''') == '4 3'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2''') == '2 2 2'\n\nassert solution('''2 2\n1 2\n3 4''') == '2 3'\n\nassert solution('''5 6\n1 2 1 2 3\n2 1 2 2 3\n3 1 2 1 3\n4 2 3 2 3\n5 2 1 1 3\n6 4 4 3 3\n''') == '5 6'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '2 2 2'\n\nassert solution('''2 2\n1 2\n3 4''') == '2 3 2'\n\nassert solution('''3 2\n1 2\n3 4''') == '3 2 2'\n\nassert solution('''6 4\n1 2 3\n2 4 5\n3 4 6\n4 5 6\n5 6 5\n6 4 1''') == '3 4 6 1'\n\nassert solution('''2 2\n1 2\n2 3''') == '1 2 2'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('1 2') == '1 2 1'\nassert solution('2 1') == '2 2 1'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"2 2 2\"\nassert solution(\"2 2\") == \"2 2 2\"\nassert solution(\"1 2\") == \"2 2 2\""
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 3') == '3 2 3'\nassert solution('4 4') == '4 4 4'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\n\n\"\"\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '2 3'\n\nassert solution('''5 5\n3 1 1 1 2\n4 2 1 2 3\n3 1 3 3 3\n4 1 3 3\n5 3 2 3\n''') == '3 3'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == \"332748119\"\nassert solution(test_input_2) == \"185138929\"\nassert solution(test_input_3) == \"974061117\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(test) == '332748119'\nassert solution(test2) == '185138929'\nassert solution(test3) == '974061117'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n1\n2\n''') == '160955686'\nassert solution('''\n1 2\n1\n1\n''') == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"2 1\n0 1\n2 1\n\"\"\"\n) == \"332748119\"\nassert solution(\n\"\"\"1 2\n1\n1\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"3 3\n0 1 1\n4 3 5\n\"\"\"\n) == \"160955686\""
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n2 1\n0 1\n2 1\n\"\"\") == \"332748119\"\nassert solution(\n    \"\"\"\n1 2\n1\n1\n\"\"\") == \"3\"\nassert solution(\n    \"\"\"\n3 3\n0 1 1\n4 3 5\n\"\"\") == \"160955686\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == '332748119'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\n\nassert solution('''\n1 2\n1\n1\n''') == '3'\n\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n\nassert solution('''\n10 1\n0 1 1 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 1 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 0 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"332748119\"\nassert solution(input_) == \"185138929\"\nassert solution(input_) == \"974061117\"\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '332748119'\n\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '185138929'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"332748119\"\nassert solution_2() == \"185138929\"\nassert solution_3() == \"974061117\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 5 2 6\") == \"11\"\nassert solution(\"5 1 2 3 4 5\") == \"6\"\nassert solution(\"5 1 2 3 4 5\") == \"6\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '5\\n'\n    '3 1 5 2 6\\n'\n) == '11'\nassert solution(\n    '5\\n'\n    '1 100 101 100 1\\n'\n) == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '11'\nassert solution('3 5 2 6') == '6'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1 5 2 6\n3 1 2 3 4 5''') == '11'\nassert solution('''1 2 1 5 2 7\n3 4 5 6 8''') == '17'\nassert solution('''1 5 7\n2 3 1 5 2\n3 4 1 5 2''') == '13'\nassert solution('''3 3 3\n1 1 1\n1 1 1\n1 1 1''') == '3'\nassert solution('''3 5 3\n2 1 2\n1 2 1\n1 2 1\n1 2 1''') == '7'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\nassert solution('5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5') == '8'\nassert solution('5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5') == '8'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 3\n''') == '6'\nassert solution('''5\n1 2 3 4 5\n''') == '11'\nassert solution('''5\n1 100 101 100 1\n''') == '102'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"11\"\nassert solution(input) == \"6\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 1 5 2 6\") == \"11\"\nassert solution(\"5\\n1 2 3 4 5\") == \"6\"\nassert solution(\"5\\n1 100 101 100 1\") == \"102\""
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '6'\nassert solution('''5\n1 100 101 100 1\n''') == '102'\nassert solution('''5\n100 100 1 100 1\n''') == '101'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n''') == 'Yes'\nassert solution('''\n3 1\n1 3\n2 3\n''') == 'No'"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\n1 4\n2 4\n''') == 'Yes'\nassert solution('''3 1\n1 3\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'\nassert solution('5 2') == 'No'\nassert solution('1 1') == 'Yes'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 3') == 'No'\n\n\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 4\\n2 4\\n3 4\") == \"Yes\"\nassert solution(\"3 1\\n1 3\\n2 3\") == \"No\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('14 2\\n1 4\\n2 4\\n3 4\\n4 13\\n10 5\\n11 5\\n12 5\\n14 5\\n5 13\\n6 7\\n8 6\\n13 6\\n9 6') == 'No'\nassert solution('3 1\\n1 3\\n2 3\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'No'\nassert solution('5 5') == 'Yes'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 4\\n2 4\\n\") == \"Yes\"\nassert solution(\"3 1\\n1 3\\n2 3\\n\") == \"No\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('14 2') == \"Yes\"\nassert solution('3 1') == \"No\"\n\n\n\n\n'''\n\nfrom typing import List\n\nclass Graph:\n    def __init__(self, vertices: int) -> None:\n        self.V = vertices\n        self.graph = [[] for i in range(vertices)]\n\n    def addEdge(self, u: int, v: int) -> None:\n        self.graph[u].append(v)\n\n    def isHedgehog(self) -> bool:\n        visited = set()\n        count = 0\n        for u in range(self.V):\n            if u in visited:\n                continue\n            visited.add(u)\n            q = []\n            q.append(u)\n            while q:\n                v = q.pop()\n                for nv in self.graph[v]:\n                    if nv in visited:\n                        return False\n                    else:\n                        visited.add(nv)\n                        q.append(nv)\n            count += 1\n        return count == 2\n\n    def isTree(self) -> bool:\n        visited = set()\n        count = 0\n        for u in range(self.V):\n            if u in visited:\n                continue\n            visited.add(u)\n            q = []\n            q.append(u)\n            while q:\n                v = q.pop()\n                for nv in self.graph[v]:\n                    if nv in visited:\n                        return False\n                    else:\n                        visited.add(nv)\n                        q.append(nv)\n            count += 1\n        return count == 2\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().strip().split())\n    graph = Graph(n)\n    for j in range(k):\n        u, v = map(int, input().strip().split())\n        graph.addEdge(u-1, v-1)\n    if graph.isHedgehog():\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('3 5') == '0'\nassert solution('5 5') == '-1'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n##.\") == \"1\"\nassert solution(\"4 2\\n##.\\n###.\\n#..\\n\") == \"-1\"\nassert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == \"0\"\nassert solution(\"2 1\\n.\\n#\\n\") == \"-1\"\nassert solution(\"3 5\\n.....\\n.....\\n.....\\n\") == \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n.\\n.\\n') == '1'\nassert solution('3\\n4\\n.#\\n.#\\n') == '1'\nassert solution('3\\n5\\n.\\n.\\n') == '-1'\nassert solution('2\\n1\\n.\\n.\\n') == '-1'\nassert solution('2\\n3\\n.#\\n.#\\n') == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('3 5') == '0'\nassert solution('2 1') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == -1\nassert solution(\"3 3\") == 1\nassert solution(\"4 2\") == 2\nassert solution(\"4 5\") == 2\nassert solution(\"3 5\") == 0\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"4 5\") == \"2\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 10\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"2 5\") == \"NO\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('1 2') == 'YES'\nassert solution('1 2 3') == 'YES'\nassert solution('5 6') == 'YES'\nassert solution('3 5') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 0 2 3\n''') == 'YES', \"First\"\n\nassert solution('''\n3 10\n10 10 10\n''') == 'YES', \"Second\"\n\nassert solution('''\n5 6\n6 5 6 2 2\n''') == 'NO', \"Third\"\n\nassert solution('''\n3 5\n0 0 0\n''') == 'YES', \"Fourth\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 6\n0 0 0\n''') == 'YES'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6\n0 0 0\n''') == 'YES'\nassert solution('''5 7\n1 1 1\n''') == 'YES'\nassert solution('''5 8\n1 2 1\n''') == 'YES'\nassert solution('''5 9\n0 0 0\n''') == 'YES'\nassert solution('''5 10\n0 0 0\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"NO\", \"Your code needs to work like that!\"\nassert solution(\"1 0 2 3\") == \"YES\", \"Your code needs to work like that!\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n\n'''\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 6\") == \"YES\\n5 4 2\"\nassert solution(\"1 1 1\") == \"YES\\n1 2 2 3\"\nassert solution(\"1 1 1 1\") == \"YES\\n1 2 2 3\\n2 3 2 1\"\nassert solution(\"4 4\") == \"NO\\n\"\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'\nassert solution('''\n4 3\n1 0 2 3\n\n''') == 'YES'\nassert solution('''\n3 5\n0 0 0\n\n''') == 'YES'\nassert solution('''\n5 6\n6 5 6 2 2\n\n''') == 'NO'\nassert solution('''\n5 6\n10 10 10\n\n''') == 'YES'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\"\nassert solution(\"5\\n1 2 3 4 5 6 7\") == \"1 2 3 4 5 6 7\"\nassert solution(\"5\\n2 2 2 2 2 2\") == \"2 2 2 2 2 2\"\nassert solution(\"6\\n1 2 3 4 5 6 7 8\") == \"1 2 3 4 5 6 7 8\"\nassert solution(\"6\\n3 3 3 3 3 3\") == \"3 3 3 3 3 3\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '4 3 6 2'\nassert solution('1\\n42') == '42'"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == \"4 3 6 2\"\nassert solution(\"2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n42') == '4 3 6 2'\nassert solution('2\\n1 1 1 1') == '1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2 1'\nassert solution('4') == '3 1 1 2'\nassert solution('5') == '5 2 1 1 1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\"\n) == \"4 3 6 2\"\n\nassert solution(\n    \"1\\n42\"\n) == \"42\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n42\n''') == '42'\nassert solution('''\n2\n1 1 1 1\n''') == '1 1'\nassert solution('''\n3\n2 1 1 2\n''') == '2 1'\nassert solution('''\n4\n2 1 1 2 3\n''') == '3 2'\nassert solution('''\n5\n4 5 7 6 2 7 4 7 1 6 2 5 7\n''') == '4 5 7 6 2 7 4 7 1 6 2 5 7'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\") == \"4 3 6 2\"\nassert solution(\"2\\n1 1 1 1\") == \"1 1\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '1 3 6 2'\nassert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '4 3 6 2'\nassert solution('3\\n4 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '4 3 6 2'\nassert solution('3\\n42') == '42'\nassert solution('3\\n1337') == '1337'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2''') == '4 3 6 2'\nassert solution('''1\n42''') == '42'\nassert solution('''2\n1 1 1 1\n''') == '1 1'\nprint(solution('''10\n3 2 1 3 4 5 6 8 7 9'''))"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n2\\n1\\n') == '3'\nassert solution('4\\n2 1\\n3 1\\n4 2\\n4 3\\n') == '6'\n\n\"\"\"\n\nn = int(input())\n\nfor i in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    if x1 > x2 and y1 > y2:\n        print(0)\n    elif x1 < x2 and y1 > y2:\n        print(1)\n    elif x1 > x2 and y1 < y2:\n        print(2)\n    elif x1 < x2 and y1 < y2:\n        print(3)\n    else:\n        print(4)"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2''') == '6'\nassert solution('''5\n1 1\n2 1\n3 1\n4 1\n5 1''') == '7'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2''') == '6'\nassert solution('''5\n2 2\n2 3\n3 2\n3 3\n3 4''') == '5'\nassert solution('''10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10''') == '10'\nprint(\"all tests passed\")"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1\") == \"6\"\nassert solution(\"4 2 1\") == \"6\"\nassert solution(\"5 2 1\") == \"6\"\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\n\nassert solution('''\n3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''\n3\n2 1\n2 2\n3 1\n''') == '2'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\""
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1 1\n1 2\n1 3\n''') == '6'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\nassert solution('''3\n1 1\n2 1\n3 1\n''') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '1 1'\nassert solution(\"2\") == '2 2'\nassert solution(\"3\") == '3 3'\nassert solution(\"4\") == '4 4'\nassert solution(\"5\") == '5 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == '3 3'\nassert solution('''\n5\nEEE\nE..\nE.E\nEE.E\nEE.EE\n''') == '-1'\n'''\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n.E.\\nE.E\\n.E.E') == '1 1'\nassert solution('3\\nEEE\\nE..\\nE.E') == '-1'\nassert solution('3\\nEE.EE\\nE.EE.\\nE...E') == '3 3'\n\n'''\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1 1\\n2 2\\n3 3\"\nassert solution(\"3\") == \"1 3\"\nassert solution(\"4\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n.E.\\nEE.E') == '-1'\nassert solution('2\\nE.E.\\nE...E') == '1 3'\nassert solution('3\\nEEE\\nE.E.\\nE...E') == '3 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3 3'\n\n\"\"\"\n\n\"\"\"\nRun time: 0.5 seconds\nMemory usage: 14.1 MB\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '1 3'\nassert solution('5') == '4 4'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 1'\nassert solution('5') == '3 3'\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n.E.\nE..\nE.E''') == '-1'\n\nassert solution('''5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE''') == '3 3'\n\nassert solution('''1\nEE.EE\nE..\nE.E''') == '-1'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1 1'\nassert solution('5') == '3 3'\nassert solution('6') == '-1'\n\"\"\"\nimport re\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 10\n-1 -1 -1 -1 -1\n''') == '32'\nassert solution('''\n5 10\n10 -1 2 2 2 2 2 -1 10\n''') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 10\n-1 -1 -1 -1 -1\n''') == '32'\nassert solution('''\n5 10\n-1 2 2 2 2 2 2 -1 10\n''') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5 2 1 3') == '1'\nassert solution('1 5 2 1 3 4') == '4'\nassert solution('1 5 2 1 3 4 5') == '5'\nassert solution('5 1 2 1 3 4 5') == '5'\nassert solution('10 -1 2 2 2 2 2 2 -1 10') == '32'"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10\") == \"32\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == \"2\"\nassert solution('1 2 3 4 5') == \"4\"\nassert solution('10 1') == \"1\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 2\n10 -1 2 2 2 2 2 2 -1 10''') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10') == '32'\nassert solution('10 2') == '32'\nassert solution('10 -1 2 2 2 2 2 2 -1 10') == '32'\n\nfrom bisect import bisect_left as bl"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == \"1\"\nassert solution('2 1') == \"1\"\nassert solution('3 1') == \"1\"\nassert solution('3 2') == \"3\"\nassert solution('3 3') == \"3\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2\\n-1 -1 -1') == '3'\nassert solution('5 10\\n-1 -1 -1 -1 -1') == '1'\nassert solution('100 200\\n-1 -1 -1 -1 -1') == '99'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 2\\n1 1 1\\n') == '3'\nassert solution('4 2 3\\n1 2 4 8\\n') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 2\\n1 1 1\\n') == '3'\nassert solution('4 2 3\\n1 2 4 8\\n') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 2 3\n1 2 3 4 5''') == '3'\nassert solution('''7 2 3\n1 2 3 4 5 6 7''') == '7'\nassert solution('''2 1 1\n1 2 3''') == '4'\nassert solution('''4 1 2\n1 2 4''') == '2'\nassert solution('''4 2 3\n1 2 3 4''') == '5'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1 2''') == '3'\nassert solution('''4 2 3''') == '79'\nassert solution('''4 2 3''') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '79'\nassert solution(input()) == '175'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n\n\n\"\"\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 1\\n') == '3'\nassert solution('4 2 3\\n1 2 4 8\\n') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n1 2 3\\n') == '3'\nassert solution('4 2 3\\n1 2 4 8\\n') == '79'"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"7 7 4 7 7\"\n\"\"\"\n\nfrom itertools import combinations_with_replacement\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '7'\nassert solution('2 3') == '7'\nassert solution('3 4') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n3\n2\n5\n4''') == '7'\nassert solution('''1 2\n3''') == '7'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '7\\n7\\n4'\n\n'''\nimport sys\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\\n\\n\"\nassert solution(\"4 4\") == \"7\\n7\\n7\\n7\\n7\\n\\n\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n2\n5 6\n5\n7 6\n7''') == '7'\nassert solution('''3 3\n2\n5 6\n5\n7 6\n7''') == '7'\nassert solution('''5 2\n5\n4 3\n3\n4 3\n4\n4 5\n5''') == '4'\nassert solution('''5 2\n5\n4 3\n3\n4 3\n4\n4 5\n5''') == '4'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n5 1\n\"\"\") == \"7\"\nassert solution(\n\"\"\"\n3 3\n\"\"\") == \"7\"\nassert solution(\n\"\"\"\n8 2\n\"\"\") == \"7\"\nassert solution(\n\"\"\"\n12 4\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"7 7 7\"\nassert solution(\"3 2\") == \"7 7 7\"\nassert solution(\"4 4\") == \"7 7 7 7\"\nassert solution(\"2 3\") == \"7 7 7\"\nassert solution(\"3 5\") == \"7 7 7 7 7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"1 1\") == \"7\"\nassert solution(\"2 2\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '7 7 7'\nassert solution('4 4') == '7 7 7 7'\nassert solution('3 3') == '7 7 7'\n\"\"\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\nassert solution('7 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 2\") == \"6\"\nassert solution(\"9 3\") == \"9\"\nassert solution(\"9 3\") == \"9\"\nassert solution(\"10 6\") == \"9\"\nassert solution(\"10 7\") == \"9\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\nassert solution('8 9') == '18'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 2') == '6'\nassert solution('9 3') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_1) == '6'\nassert solution(input_2) == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == ''\nassert solution(\"1 2\") == '3'\nassert solution(\"1 3\") == '2'\nassert solution(\"1 5 6 2\") == '7'\nassert solution(\"3 2\") == '4'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 2\\n1 5 6 2') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\nassert solution('14 2\\n12 13\\n14 6\\n9 6\\n11 11\\n7 8\\n11 7\\n13 7\\n5 5\\n1 1\\n4 4\\n9 5\\n9 5\\n2 2\\n8 8\\n5 5\\n4 4\\n6 6\\n4 4\\n7 7\\n4 6\\n5 5\\n3 3\\n4 4\\n6 6\\n6 6\\n7 7\\n3 3\\n3 4\\n6 6\\n9 9\\n9 9') == '18'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10001000\n10\n10001000''') == '3 1 3 4'\nassert solution('''11100\n1\n11100''') == '-1'\nassert solution('''1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('000') == '-1'\nassert solution('100') == '2'\nassert solution('110') == '3'\nassert solution('011') == '1'\nassert solution('101') == '3'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '3'\nassert solution('0010100') == '3 1 3 4'\nassert solution('1110111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n01100\n''') == '3'\nassert solution('''\n01100\n''') == '-1'\nassert solution('''\n111111\n''') == '3'\nassert solution('''\n111111\n''') == '-1'\nassert solution('''\n011001110001100\n''') == '4'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\"\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0101') == '3 1 3 4'\nassert solution('0111') == '1 7'\nassert solution('010111') == '3 2 5 6'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''\n1 3\n3 1 2 3\n''') == '1'\n\n'''\n---SOLUTION---\n\nWe need to keep track of the number of pokemon types in each gym in each cycle, because in any cycle, the number of pokemon types in all gyms remains the same. To keep track of this, we can use a 2-D array (of size n * m). We add 1 for each pokemon type in the gym. We then just increment the number of pokemon types in each gym by 1 each time we encounter a pokemon type we haven't encountered yet. We need to keep track of this in a separate 2-D array.\n\nAnother way would be to keep track of how many pokemon types are encountered. We can count each individual type in each cycle and add up the results.\n\n'''"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 3\n2 1 2\n2 2 3\n\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n1 3\n3 1 2 3\n\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n2 4\n2 1 2\n3 2 3 4\n\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n\n\"\"\"\n) == \"24\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''\n1 3\n3 1 2 3\n''') == '1'\nassert solution('''\n2 4\n2 1 2\n3 2 3 4\n''') == '1'\nprint(solution('''\n2 3\n2 1 2\n2 3 4\n'''))\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''1 3\n3 1 2 3\n''') == '2'\nassert solution('''2 4\n2 1 2\n3 2 3 4\n''') == '4'\nassert solution('''3 7\n2 1 2\n2 3 4\n3 5 6 7\n''') == '24'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3') == '1'\nassert solution('2 3') == '1'\nassert solution('3 3') == '2'\nassert solution('1 2') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''\n1 3\n3 1 2 3\n''') == '1'\nassert solution('''\n2 4\n2 1 2\n3 2 3 4\n''') == '2'\nassert solution('''\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n''') == '24'\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 3\n2 1 2\n2 2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\n3 1 2 3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n\"\"\") == \"24\""
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3''') == '1'\n\nassert solution('''2 2\n3 2 2 1\n2 1 2''') == '1'\n\nassert solution('''3 7\n2 1 2\n2 3 4\n3 5 6 7''') == '24'\n\nassert solution('''3 5\n3 1 2 3\n2 1 2\n2 3 4''') == '1'\n\nprint(solution('''2 3\n2 1 2\n2 2 3'''))\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5 4 7\\n\") == 6"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '6'\nassert solution() == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 4 2 3 1\\n\") == \"3\"\nassert solution(\"4\\n1 5 4 7\\n\") == \"6\""
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3 1') == \"3\"\nassert solution('5\\n1 2 3 1') == \"4\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 4 2 3 1\n''') == '3'\nassert solution('''4\n1 5 4 7\n''') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\n\"\"\""
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 4 2 3 1\n''') == \"3\"\nassert solution('''\n4\n1 5 4 7\n''') == \"6\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"20\"\nassert solution(\"5\") == \"62\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"62\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 1 1 1') == '62'\nassert solution('6\\n1 1 2 2 3 4') == '28'\nassert solution('10\\n1 1 2 1 3 4 4 5 3 6') == '39'\nassert solution('13\\n1 1 2 3 4 4 1 1 2') == '80'\nassert solution('15\\n1 1 2 3 4 4 1 1 2 1 1 2 2 2 3') == '80'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n1 1 2 3\n\"\"\") == \"20\"\nassert solution(\"\"\"\n3\n1 1 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"42\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2\\n1 2\\n'\n) == '4'\nassert solution(\n    '4\\n1 1 2 3'\n) == '20'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '20'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '4'\nassert solution('4') == '20'\nassert solution('5') == '62'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"4\") == \"20\"\nassert solution(\"5\") == \"62\"\nassert solution(\"1 1 1 1 1\") == \"20\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n') == '0'\nassert solution('2\\n1 2\\n') == '4'\nassert solution('3\\n1 1 2\\n') == '20'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n1 1\\n1 1\\n\") == \"6\"\nassert solution(\"4\\n1 2\\n2 1\\n3 5\\n5 3\\n\") == \"15\"\nassert solution(\"1\\n5 6\\n\") == \"7\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1 1') == '6'\nassert solution('4\\n1 2 5\\n2 1') == '7'\nassert solution('3\\n1 2\\n2 1') == '5'\nassert solution('2\\n1 1\\n1 1') == '2'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\\\n3\n1 1\n1 1\n1 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\\\n4\n1 2\n2 1\n3 5\n5 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\\\n1\n5 6\n\"\"\") == \"7\"\n\nprint('PASSED')\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 2\n2 1\n\n''') == '6'\nassert solution('''\n3\n1 2\n2 1\n3 5\n5 3\n\n''') == '15'\nassert solution('''\n1\n5 6\n\n''') == '7'\nassert solution('''\n2\n1 2\n2 1\n\n''') == '6'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 6\n1 2\n2 1\n3 5\n5 3\n\"\"\") == \"7\"\nassert solution(\"\"\"\n4\n1 2\n2 1\n3 5\n5 3\n\"\"\") == \"11\"\nassert solution(\"\"\"\n3\n1 2\n2 1\n3 5\n5 3\n\"\"\") == \"11\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"7\"\nassert solution(\"3\") == \"6\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2 1\") == \"6\"\nassert solution(\"2\\n1 1\") == \"7\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '7'\nassert solution('1') == '5'\nassert solution('2') == '1'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"15\"\nassert solution(\"4\") == \"7\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n5 6\n''') == '15'\nassert solution('''\n3\n1 2\n1 2\n1 2\n''') == '6'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '7'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(None) == 1, \"If no input\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n\n4\n2\n\n''') == '1'\nassert solution('''\n2\n1\n4 4\n2\n\n''') == '3'\nassert solution('''\n3\n3 3\n10 10 10\n17\n\n''') == '6'\nassert solution('''\n4\n1\n10 10 10\n17\n\n''') == '4'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4\\n2\\n') == '1'\nassert solution('2\\n4\\n2\\n') == '3'\nassert solution('3\\n3\\n10 10 10\\n17\\n') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"13\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n4\n2\n\nOutput\n1\n\nInput\n2\n1\n4 4\n2\n\nOutput\n3\n\nInput\n3\n3 3\n10 10 10\n17\n\nOutput\n6\n\n''') == '3'\n\nassert solution('''2\n1\n\nOutput\n1\n\nInput\n2\n1\n4 4\n2\n\nOutput\n3\n\nInput\n3\n3 3\n10 10 10\n17\n\nOutput\n6\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n\n4\n2\n\n''') == '1', 'First example'\nassert solution('''\n2\n1\n4 4\n2\n\n''') == '3', 'Second example'\nassert solution('''\n3\n3 3\n10 10 10\n17\n\n''') == '6', 'Third example'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3 4 5 6\") == \"7\"\nassert solution(\"1 2 3 4 5 6 7\") == \"8\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_line) == output\n'''\n\n\nfrom collections import Counter"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\nassert solution('2 5 3 1000000007') == '1'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3 3 100''') == '10'\nassert solution('''3 6 5 1000000007''') == '0'\nassert solution('''3 5 6 11''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n''') == '10'\nassert solution('''\n3 6 5 1000000007\n1 2 1\n''') == '0'\nassert solution('''\n3 5 6 11\n1 2 1\n''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n''') == \"10\"\nassert solution('''\n3 6 5 1000000007\n1 2 1\n''') == \"0\"\nassert solution('''\n4 6 2 1\n1 2 2\n''') == \"2\"\nassert solution('''\n4 6 2 1\n1 2 2\n''') == \"1\"\nassert solution('''\n4 6 2 2\n1 2 2\n''') == \"1\"\n'''\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 3 100\n1 1 1\n''') == '10'\n\nassert solution('''3 5 6 11\n1 2 1\n''') == '0'\n\nassert solution('''3 9 10 20\n1 1 1\n''') == '10'\n\nassert solution('''3 9 10 20\n1 2 1\n''') == '10'\n\nassert solution('''5 1 5 5\n2 1 2 1\n''') == '5'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\""
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3 3 3 100\n1 2 1\n\"\"\") == \"10\"\nassert solution(\"\"\"3 5 6 11\n1 2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5 8\") == \"0\"\nassert solution(\"5 6 7\") == \"4\"\nassert solution(\"1 5 1\") == \"10\"\nprint(solution(input()))\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 3 3 100\n1 1 1\"\"\") == \"10\"\nassert solution(\"\"\"3 5 6 11\n1 2 1\n\n\"\"\") == \"0\""
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 100\") == \"10\"\nassert solution(\"3 3 3 100\") == \"0\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 3\\nintel\\ncode') == 'YES'\nassert solution('4\\n1 2 3 1\\nto be or not to be that is the question\\nwhether tis nobler in the mind to suffer\\nthe slings and arrows of outrageous fortune\\nor to take arms against a sea of troubles') == 'YES'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 1\\nintel') == 'YES'\nassert solution('4\\n2 2 3 1\\nintel') == 'NO'\nassert solution('4\\n1 2 3 1\\nintel') == 'NO'"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('2') == 'YES'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 2 3\nintel\ncode\nch allenge\n\nInput\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\nOutput\nNO\n''') == 'YES'\nassert solution('''4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\nInput\n3\n2 2 3\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\nOutput\nYES\n''') == 'YES'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n2 2 3\nintel\ncode\nch allenge\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n4\n13 11 15 15\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 3') == 'YES'\nassert solution('4 1 2 3') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"2\n1 2 3\nintel\"\"\") == \"YES\"\n\nassert solution(\n\"\"\"4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\"\"\") == \"YES\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 2 3\nintel\ncode\nch allenge\n''') == 'YES'\n\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'NO'\n\nassert solution('''\n3\n2 2 3\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n''') == 'YES'\n\nassert solution('''\n4\n13 11 15 15\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n''') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('4 5 6') == 'NO'\nassert solution('7 9 0') == 'YES'\nassert solution('8 9 0') == 'NO'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '26'\nassert solution('3') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n2''') == '6'\nassert solution('''3\n1\n2''') == '11'\nassert solution('''3\n1\n2\n3''') == '11'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '26'\nassert solution('3') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"26\"\nassert solution(\"4\") == \"22\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"26\"\nassert solution(\"1\\n\") == \"10\"\nassert solution(\"\\n\") == \"10\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 1 5\") == \"26\"\nassert solution(\"1\\n10\") == \"10\"\nassert solution(\"4\\n9 1 8\") == \"22\"\nassert solution(\"2\\n1 3 5\") == \"14\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n3 1 5') == '26'\nassert solution('1\\n10') == '10'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n1 3 5\n''') == '3'\nassert solution('''\n3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 4\n1 3 5\n''') == '3'\nassert solution('''\n3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 4]) == 3\nassert solution([3, 40]) == 32\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4\n1 3 5\n''') == '3'\nassert solution('''\n3 40\n10 30 50\n''') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 2\n2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\n3 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4\n4 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n3\n2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n4\n1\n2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 4\n1 3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 40\n10 30 50\n\"\"\") == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\"\nassert solution(\"5 10\") == \"24\"\n\nfrom collections import deque"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n1 3 5\n''') == '3'\n\nassert solution('''\n3 40\n10 30 50\n''') == '32'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 1\\n\"\n    \"1 1\\n\"\n    \"3 3\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"4 4\"\n) == \"1 2 4\"\n\nassert solution(\n    \"5 1\\n\"\n    \"1 1\\n\"\n    \"3 3\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"4 4\\n\"\n    \"5 5\"\n) == \"1 2 4\"\n\nassert solution(\n    \"3 1\\n\"\n    \"1 1\\n\"\n    \"3 3\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"4 4\\n\"\n    \"5 5\"\n) == \"1 2 4\"\n\nassert solution(\n    \"10 1\\n\"\n    \"1 1\\n\"\n    \"4 4\\n\"\n    \"6 6\\n\"\n    \"7 7\\n\"\n    \"8 8\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 5\\n\"\n    \"5 6\\n\"\n    \"6 7\\n\"\n    \"7 8\\n\"\n    \"8 9\\n\"\n    \"9 10\"\n) == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\nassert solution('''\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n''') == '1 2 4'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n\"\"\") == \"1 4 5 6 7 8 9\"\nassert solution(\"\"\"\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\nSample Output 4:\n1 2 4\n\"\"\") == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1 4 5 6 7 8 9'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1 4\"\nassert solution(\"5 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1 4 5 6 7 8 9'\nassert solution('5 1') == '1 2 3 4 5 6 7 8 9'\nassert solution('10 1') == '1 2 3 4 5 6 7 8 9'\nassert solution('15 1') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\n\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"9 1\\n1 1\\n5 10\\n1 3\\n11 14\\n5 5\\n10 10\\n3 6\\n6 12\\n7 7\\n4 11\"\n    ) == \"1 4 5 6 7 8 9\"\nassert solution(\n    \"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n\"\n    ) == \"1 2 4\"\nassert solution(\n    \"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n\"\n    ) == \"1 2\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 2\n2 1\n1 2.0\n1 3.100\n\n\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n1 5.0\n2 5.5\n3 6.0\n\n\"\"\") == \"0\"\nassert solution(\"\"\"6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\n\"\"\") == \"2\""
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('''4 3\n4 5\n3 6\n1 2\n1 3\n2 4\n1 5''') == '1'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\n\nassert solution('''\n3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\n\nassert solution([3, 2, 1]) == '1'\n\nassert solution([3, 3, 1]) == '0'\n\nassert solution([6, 3, 1]) == '2'\n\nassert solution([6, 6, 1]) == '0'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''\n3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\nassert solution('''\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n''') == '2'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100''') == \"1\"\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n\nOutput\n0\n\nInput\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125''') == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'\nassert solution('6 3\\n2 3 6 5 4 10') == '4'\nassert solution('6 5\\n2 3 6 5 4 10') == '3'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n3\n4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 2\n2 3 6 5 4 10''') == '3'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '3'\nassert solution('6 2') == '3'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 2\n2 3 6 5 4 10\n''') == '3'\n\nassert solution('''\n6 2\n1 2 1 4 5 10\n''') == '1'\n\nassert solution('''\n4 2\n3 2 4 5 6 10\n''') == '3'\n\nassert solution('''\n4 2\n1 2 4 5 6 10\n''') == '3'\n\nassert solution('''\n4 2\n3 2 4 5 6 10\n''') == '3'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\") == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10\\n') == '3'\nassert solution('6 3\\n2 3 4 6 5 10\\n') == '2'\nassert solution('5 3\\n2 5 1 4 3 10\\n') == '3'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'\nassert solution('6 3\\n2 5 6 4 3 10') == '5'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2\\n') == '2'\nassert solution('3\\n1 2 1 3\\n') == '4'\nassert solution('9\\n1 2 1 3 2 2 2 2 3\\n') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 1 3 2 2 2 2 3') == '4'\nassert solution('9') == '10'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 1 3 2 2 2 2 3') == '4'\nassert solution('9\\n1 2 1 3 2 2 2 2 3') == '10'\nassert solution('2\\n1 2') == '2'\nassert solution('3\\n1 2 1 3 2 2 2 2 3') == '4'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 1 3 2 2 2 2 3\"\n    ) == \"4\"\nassert solution(\n    \"3\"\n    ) == \"3\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 1 3 2 2 2 2\n''') == '4'\nassert solution('''\n9\n1 2 1 3 2 2 2 2 3\n''') == '10'\nassert solution('''\n8\n1 2 1 3 2 2 2 2\n''') == '7'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n\n2.\n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    points = 0\n    for i in range(n):\n        if i < n - 1 and i > 0:\n            if a[i - 1] - 1 == a[i] and a[i + 1] - 1 == a[i]:\n                points += a[i]\n        else:\n            if a[i] == 1:\n                points += 1\n    \n    print(points)\n    \n3.\n    \n    n = int(input())\n    a = list(map(int, input().split()))\n    \n    points = 0\n    for i in range(n):\n        if i < n - 1 and i > 0:\n            if a[i - 1] - 1 == a[i] and a[i + 1] - 1 == a[i]:\n                points += a[i]\n        else:\n            if a[i] == 1:\n                points += 1\n    \n    print(points)\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '4'\nassert solution('3') == '3'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '4'"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '4'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('5') == '4'\n\"\"\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"4\"\n\n\"\"\"\n\nn = int(stdin)\na = 1\ncounter = 0\nwhile a <= n:\n    if (a % 2) == 0:\n        a += 1\n        continue\n    if (a % 2)!= 0:\n        a += 1\n        if a % 2 == 0:\n            continue\n    if (a % 2) == 0:\n        a += 1\n        continue\n    if (a % 2)!= 0:\n        a += 1\n        if a % 2 == 0:\n            continue\n    if (a % 2)!= 0:\n        a += 1\n        if a % 2 == 0:\n            continue\n    if (a % 2)!= 0:\n        a += 1\n        if a % 2 == 0:\n            continue\n    counter += 1\nprint(counter)\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 6') == '5'"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 6\n1 5 1 4\n''') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 6\\n1 5 1 4\\n') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"6 8\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import chain"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\nassert solution('''4 6\n1 5 1 4\n''') == '5'\nassert solution('''4 6\n1 5 1 4\n''') == '4'\nassert solution('''4 6\n1 5 1 4\n''') == '4'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 6\") == \"5\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 6\") == \"5\"\n\"\"\"\n\nn, m = map(int, input().split())\narr = list(map(int, input().split()))\nd = {}\nfor i in range(m):\n    d[i+1] = arr[i]\n    \nprint(n-1, end=\" \")\nfor i in range(1,n+1):\n    if i in d.keys():\n        print(d[i], end=\" \")\n    else:\n        print(i, end=\" \")"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '5'\nassert solution('1 5 1 4') == '5'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4 6\n1 5 1 4\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('++') == '2'\nassert solution('--') == '2'\nassert solution('+-+') == '3'\nassert solution('+++') == '3'\nassert solution('+-+-+') == '3'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''+\n+\n+\n+\n+\n+\n+\n+'''\n) == '1'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '1'\nassert solution('+-+-+') == '1'\nassert solution('-+-+-') == '2'\nassert solution('+--+') == '3'\nassert solution('-+-++') == '4'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('--++-+-+++-+') == '2'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"-+-+-+-+-\") == \"3\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-+-+-') == '2'\nassert solution('+-+-+-+') == '3'\nassert solution('+-+-+-++') == '3'\nassert solution('+-+-+-++-') == '3'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+-+-+\") == \"1\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-++-') == '3'\nassert solution('++--++') == '1'\n\"\"\""
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+++++++') == '2'\nassert solution('++++++++') == '2'\nassert solution('+++') == '1'\nassert solution('---') == '1'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\") == \"10110\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"100\\nNOT 5\\nAND 5 8\\nAND 5 1\\nAND 6 6\\nNOT 3\\nOR 6 1\\nOR 4 7\\nOR 4 5\\nNOT 2\\nAND 3 7\\nNOT 4\\nOR 7 3\\nAND 6 1\\nOR 7 8\\nAND 2 9\\nAND 2 3\\nAND 3 5\\nNOT 0\\nXOR 4 7\\nOR 6 3\\nOR 7 3\\nOR 8 7\\nXOR 2 8\\nXOR 3 5\\nOR 4 8\\nAND 2 6\\nOR 3 5\\nNOT 4\\nNOT 5\\nOR 7 6\\nOR 7 2\\nOR 5 8\\nXOR 6 3\\nOR 4 3\\nAND 2 5\\nNOT 6\\nNOT 7\\nOR 1 6\\nXOR 2 5\\nOR 4 7\\nXOR 5 6\\nOR 2 3\\nNOT 1\\nOR 3 7\\nOR 5 6\\nNOT 1\\nXOR 7 2\\nOR 3 2\\nOR 5 3\\nXOR 5 6\\nOR 7 2\\nNOT 3\\nAND 6 5\\nAND 7 7\\nNOT 1\\nNOT 4\\nOR 2 1\\nOR 3 2\\nAND 6 3\\nAND 6 5\\nOR 2 8\\nXOR 4 5\\nOR 5 2\\nOR 5 6\\nXOR 2 6\\nAND 3 8\\nOR 5 7\\nNOT 5\\nOR 8 8\\nXOR 8 3\\nOR 5 3\\nAND 3 3\\nOR 6 6\\nAND 3 3\\nOR 8 3\\nOR 6 5\\nXOR 2 8\\nOR 5 8\\nOR 7 3\\nXOR 7 3\\nOR 8 2\\nXOR 3 2\\nNOT 5\\nAND 7 7\\nOR 6 3\\nXOR 6 6\\nOR 7 4\\nAND 4 6\\nOR 7 3\\nXOR 7 7\\nOR 8 8\\nAND 1 3\\nOR 7 8\\nXOR 3 6\\nAND 4 5\\nOR 6 4\\nXOR 5 5\\nOR 7 8\\nAND 7 1\\nOR 5 3\\nXOR 5 5\\nOR 2 2\\nXOR 1 1\\nOR 5 4\\nXOR 8 3\\nXOR 2 5\\nXOR 7 6\\nXOR 4 4\\nNOT 2\\nOR 5 3\\nOR 5 5\\nNOT 1\\nXOR 6 3\\nNOT 3\\nNOT 1\\nOR 5 3\\nNOT 3\\nNOT 5\\nOR 4 5\\nOR 3 3\\nXOR 3 3\\nOR 6 6\\nXOR 6 5\\nOR 5 5\\nNOT 6\\nOR 6 3\\nOR 8 3\\nXOR 7 7\\nOR 3 2\\nAND 2 5\\nNOT 5\\nOR 5 3\\nOR 6 6\\nXOR 4 8\\nOR 7 7\\nXOR 4 5\\nOR 8 3\\nXOR 4 6\\nXOR 3 3\\nOR 7 7\\nXOR 4 6\\nXOR 2 4\\nOR 5 3\\nXOR 5 7\\nXOR 2 6\\nOR 2 4\\nXOR 5 8\\nXOR 2 6\\nXOR 4 3\\nOR 2 5\\nXOR 4 5\\nOR 2 2\\nXOR 2 2\\nXOR 1 1\\nOR 5 4\\nOR 2 4\\nOR 2 5\\nXOR 1 5\\nOR 7 7\\nXOR 5 7\\nXOR 4 8\\nOR 2 2\\nXOR 2 4\\nXOR 5 4\\nOR 3 4\\nXOR 3 5\\nXOR 4 4\\nOR 5 5\\nXOR 5 5\\nXOR 4 4\\nOR 2 2\\nXOR 4 2\\nXOR 6 5\\nXOR 3 3\\nXOR 3 3\\nOR 5 5\\nXOR 2 3\\nOR 5 5\\nXOR 2 5\\nOR 6 2\\nXOR 4 4\\nOR 6 5\\nXOR 2 5\\nXOR 2 4\\nXOR 5 5\\nXOR 2 4\\nXOR 4 4\\nXOR 3 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 5\\nXOR 4 4\\nXOR 2 4\\nXOR 5 4\\nXOR 2 4\\nXOR 2 4\\nXOR 3 3\\nXOR 2 3\\nXOR 5 5\\nXOR 3 3\\nXOR 2 3\\nXOR 5 5\\nXOR 2 5\\nXOR 4 4\\nXOR 2 4\\nXOR 3 3\\nXOR 2 5\\nXOR 5 5\\nXOR 2 5\\nXOR 5 5\\nXOR 2 5\\nXOR 2 4\\nXOR 3 3\\nXOR 5 3\\nXOR 5 3\\nXOR 3 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3\\nXOR 5 3"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    AND 9 4\n    IN 1\n    IN 1\n    XOR 6 5\n    AND 3 7\n''') == '10110'\n'''\n\n\n\"\"\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"10\\nIN 0\\nIN 1\\nNOT 2\\nAND 3 7\\nIN 0\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"10\\nIN 0\\nIN 1\\nNOT 3\\nAND 3 7\\nIN 0\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"10\\nIN 0\\nIN 1\\nNOT 2\\nAND 3 7\\nIN 0\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"10\\nIN 0\\nIN 1\\nNOT 3\\nAND 3 7\\nIN 0\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nAND 2 8\\n\") == \"10110\"\n\"\"\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nAND 1 1\\nIN 1\\n') == '1'\nassert solution('2\\nAND 0 0\\nIN 0\\n') == '0'\nassert solution('3\\nAND 2 1\\nIN 0\\n') == '0'\nassert solution('4\\nAND 0 1\\nIN 0\\n') == '0'\nassert solution('5\\nAND 3 0\\nIN 0\\n') == '1'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input) == '0101'\nassert solution(other_input) == '1011'\nassert solution(input) == '01011011'\n\n\"\"\"\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\nAND 3 4\\nIN 1\\nXOR 2 3\\nAND 2 7\\nXOR 3 5\\nAND 8 4\\nAND 2 3\\nNOT 1\") == '00110'\nassert solution(\"6\\nXOR 9 6\\nIN 1\\nIN 1\\nXOR 7 3\\nAND 3 1\\nXOR 5 3\\nXOR 3 5\\nAND 4 6\\nXOR 9 3\\nXOR 8 4\\nXOR 2 8\\nNOT 5\") == '101101'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"10110\"\nassert solution(\"9\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == \"01110\"\nassert solution(\"4\\nAND 4 1\\nIN 1\\nIN 1\\nNOT 2\\nNOT 3\\nNOT 4\\nNOT 5\\nAND 6 7\\nNOT 6\\nNOT 7\\nAND 8 9\\nIN 1\\nIN 1\\nIN 1\\nNOT 8\\nNOT 9\\nNOT 10\\nAND 11 12\\nNOT 11\\nNOT 12\\nNOT 13\\nAND 14 15\\nIN 1\\nIN 1\\nIN 1\\nNOT 14\\nNOT 15\\nNOT 16\\nAND 17 18\\nIN 1\\nIN 1\\nIN 1\\nNOT 17\\nNOT 18\\nNOT 19\\nAND 20 21\\nIN 1\\nIN 1\\nIN 1\\nNOT 20\\nNOT 21\\nNOT 22\\nAND 23 24\\nIN 1\\nIN 1\\nIN 1\\nNOT 23\\nNOT 24\\nNOT 25\\nAND 26 27\\nIN 1\\nIN 1\\nIN 1\\nNOT 26\\nNOT 27\\nNOT 28\\nAND 29 30\\nIN 1\\nIN 1\\nIN 1\\nNOT 29\\nNOT 30\\nNOT 31\\nAND 32 33\\nIN 1\\nIN 1\\nIN 1\\nNOT 32\\nNOT 33\\nNOT 34\\nAND 35 36\\nIN 1\\nIN 1\\nIN 1\\nNOT 35\\nNOT 36\\nNOT 37\\nAND 38 39\\nIN 1\\nIN 1\\nIN 1\\nNOT 38\\nNOT 39\\nNOT 40\\nAND 41 42\\nIN 1\\nIN 1\\nIN 1\\nNOT 41\\nNOT 42\\nNOT 43\\nAND 44 45\\nIN 1\\nIN 1\\nIN 1\\nNOT 44\\nNOT 45\\nNOT 46\\nAND 47 48\\nIN 1\\nIN 1\\nIN 1\\nNOT 47\\nNOT 48\\nNOT 49\\nAND 50 51\\nIN 1\\nIN 1\\nIN 1\\nNOT 50\\nNOT 51\\nNOT 52\\nAND 53 54\\nIN 1\\nIN 1\\nIN 1\\nNOT 53\\nNOT 54\\nNOT 55\\nAND 56 57\\nIN 1\\nIN 1\\nIN 1\\nNOT 56\\nNOT 57\\nNOT 58\\nAND 59 60\\nIN 1\\nIN 1\\nIN 1\\nNOT 59\\nNOT 60\\nNOT 61\\nAND 62 63\\nIN 1\\nIN 1\\nIN 1\\nNOT 62\\nNOT 63\\nNOT 64\\nAND 65 66\\nIN 1\\nIN 1\\nIN 1\\nNOT 65\\nNOT 66\\nNOT 67\\nAND 68 69\\nIN 1\\nIN 1\\nIN 1\\nNOT 68\\nNOT 69\\nNOT 70\\nAND 71 72\\nIN 1\\nIN 1\\nIN 1\\nNOT 71\\nNOT 72\\nNOT 73\\nAND 74 75\\nIN 1\\nIN 1\\nIN 1\\nNOT 74\\nNOT 75\\nNOT 76\\nAND 77 78\\nIN 1\\nIN 1\\nIN 1\\nNOT 77\\nNOT 78\\nNOT 79\\nAND 80 81\\nIN 1\\nIN 1\\nIN 1\\nNOT 80\\nNOT 81\\nNOT 82\\nAND 83 84\\nIN 1\\nIN 1\\nIN 1\\nNOT 83\\nNOT 84\\nNOT 85\\nAND 86 87\\nIN 1\\nIN 1\\nIN 1\\nNOT 86\\nNOT 87\\nNOT 88\\nAND 89 90\\nIN 1\\nIN 1\\nIN 1\\nNOT 89\\nNOT 90\\nNOT 91\\nAND 92 93\\nIN 1\\nIN 1\\nIN 1\\nNOT 92\\nNOT 93\\nNOT 94\\nAND 95 96\\nIN 1\\nIN 1\\nIN 1\\nNOT 95\\nNOT 96\\nNOT 97\\nAND 98 99\\nIN 1\\nIN 1\\nIN 1\\nNOT 98\\nNOT 99\\nNOT 100\\nAND 101 102\\nIN 1\\nIN 1\\nIN 1\\nNOT 101\\nNOT 102\\nNOT 103\\nAND 104 105\\nIN 1\\nIN 1\\nIN 1\\nNOT 104\\nNOT 105\\nNOT 106\\nAND 107 108\\nIN 1\\nIN 1\\nIN 1\\nNOT 107\\nNOT 108\\nNOT 109\\nAND 110 111\\nIN 1\\nIN 1\\nIN 1\\nNOT 110\\nNOT 111\\nNOT 112\\nAND 113 114\\nIN 1\\nIN 1\\nIN 1\\nNOT 113\\nNOT 114\\nNOT 115\\nAND 116 117\\nIN 1\\nIN 1\\nIN 1\\nNOT 116\\nNOT 117\\nNOT 118\\nAND 119 120\\nIN 1\\nIN 1\\nIN 1\\nNOT 119\\nNOT 120\\nNOT 121\\nAND 122 123\\nIN 1\\nIN 1\\nIN 1\\nNOT 122\\nNOT 123\\nNOT 124\\nAND 125 126\\nIN 1\\nIN 1\\nIN 1\\nNOT 125\\nNOT 126\\nNOT 127\\nAND 128 129\\nIN 1\\nIN 1\\nIN 1\\nNOT 128\\nNOT 129\\nNOT 130\\nAND 131 132\\nIN 1\\nIN 1\\nIN 1\\nNOT 131\\nNOT 132\\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n5 3 2\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n''') == '1'\nassert solution('''\n6 3 2\n1 2 3 2 3 1\n1 2 3\n''') == '2'\nassert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n''') == '1'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 1\n1 2 3\n1 2\n''') == '2'\nassert solution('''\n3 3 1\n1 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n5 4 1\n1 2 3 4 2 1\n1 2 3\n''') == '4'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3''') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1\") == \"2\\n1 3\"\nassert solution(\"6 3 2\") == \"2\\n1 2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\") == \"2\"\nassert solution(\"5 3 2\\n1 2 3\\n1 2 3\") == \"1\""
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'\nassert solution('1 2 3') == '1 2'\nassert solution('1 2 3') == '1 2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 1\\n1 2 3 2 1\\n1 2 3') == '2'\nassert solution('6 3 2\\n1 2 3\\n1 2 3') == '2'\nassert solution('10 3 4\\n3 2 3 4 2 1\\n2 2 4\\n1 3 3 4 1 2\\n1 2 2\\n1 2 3\\n1 3\\n1 2') == '10'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3 1') == \"2\", \"second\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"1 2\"\nassert solution(\"7 3 1\") == \"3\""
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\""
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3 1\\n2') == '0'\nassert solution('4 1 2\\n1 3\\n1 2\\n') == '2'\nassert solution('3 3 1\\n2') == '0'\nassert solution('4 1 2\\n1 3\\n1 2\\n') == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 1 2\n1 3\n1 2\n''') == '2'\n\nassert solution('''3 3 1\n2\n1 2\n1 3\n2 3\n''') == '0'\n\nassert solution('''3 1 1\n2\n1 2\n''') == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n\"\"\"\n\n\nfrom collections import defaultdict, deque\nimport sys\n\nn, m, k = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\ngraph = defaultdict(list)\nfor i in range(m):\n    u, v = list(map(int, input().split()))\n    graph[u].append(v)\n    graph[v].append(u)\n\nprint(graph)\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"5 5 1\") == \"0\"\nassert solution(\"5 5 2\") == \"2\"\nassert solution(\"5 5 2\") == \"2\"\nassert solution(\"5 5 2\") == \"2\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1\\n2') == '0'\nassert solution('4 1 2\\n1 3\\n1 2\\n') == '2'\n\nstdin = '3 3 1\\n2\\n1 2\\n1 3\\n'\nprint(solution(stdin))\n\nstdin = '5 5 2\\n1 2\\n1 3\\n2 4\\n4 3\\n1 2\\n'\nprint(solution(stdin))\n\nstdin = '5 5 2\\n2\\n1 2\\n1 3\\n2 4\\n4 3\\n1 2\\n'\nprint(solution(stdin))\n\nstdin = '5 5 2\\n3\\n2\\n1 2\\n1 3\\n2 4\\n4 3\\n1 2\\n'\nprint(solution(stdin))\n\nstdin = '6 5 2\\n1 2\\n1 3\\n2 4\\n4 3\\n3 5\\n1 2\\n'\nprint(solution(stdin))\n\nstdin = '10 2\\n5\\n1 2\\n3 4\\n1 5\\n2 3\\n4 6\\n6 5\\n7 8\\n8 7\\n9 10\\n1 2\\n9 10\\n'\nprint(solution(stdin))"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1\") == \"0\"\nassert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"2\"\nassert solution(\"4 1 2\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"3 3 1\") == \"0\"\n\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\nassert solution() == '2'\nassert solution() == '3'\nassert solution() == '4'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n10 2 3 5 4 2\n''') == '3'\n\nassert solution('''\n4\n100 100 100 100\n''') == '1'\n\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(example1) == \"3\"\nassert solution(example2) == \"1\"\nassert solution(example3) == \"4\"\nassert solution(input) == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nassert solution(sys.stdin.read()) == \"4\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n10 2 3 5 4 2\n''') == '3'\nassert solution('''\n4\n100 100 100 100\n''') == '1'\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_1) == \"3\"\nassert solution(input_2) == \"1\""
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == '3'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '3'\nassert solution('10 2 3 5 4 2') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 1\\n3 1 3 2\\n2 1 5\\n2 4 4\\n2 4 4') == 'Yes\\n0\\n2 4 4'\nassert solution('6 5\\n4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1') == 'No'\nassert solution('6 5\\n4 3 2 2 1\\n3 1 1 3\\n3 2 3 3\\n2 3 1\\n2 4 4\\n2 4 4') == 'Yes\\n0\\n2 4 4'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '4 3\\n'\n    '1 2\\n'\n    '1 1\\n'\n    '3 1 3 2\\n'\n    '2 1 5\\n'\n    '2 4 4\\n'\n) == 'No'\n\nassert solution(\n    '6 5\\n'\n    '2 1 2\\n'\n    '2 1 2\\n'\n    '3 1 2 3\\n'\n    '2 3 4\\n'\n    '2 4 4\\n'\n) == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 1\\n3 1 3 2\\n2 1 5\\n2 4 4\\n\") == \"Yes\\n2 3\"\nassert solution(\"6 5\\n2 1 2\\n2 1 2\\n3 1 2 3\\n2 3 1\\n\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n2 1\\n1 1\\n3 1 3 2') == 'Yes'\nassert solution('4 3\\n4 3 2 2 1') == 'No'\nassert solution('4 3\\n2 1 2\\n1 1 3\\n3 1 3 2') == 'Yes'\nassert solution('4 3\\n2 1 2\\n3 1 1 3\\n3 2 3 3\\n2 4 4\\n2 4 4\\n') == 'Yes'\nassert solution('4 3\\n2 1 2\\n3 1 1 3\\n3 2 3 3\\n2 4 4\\n2 4 4\\n') == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n    5 2\n    1 2\n    1 1\n    3 1 3 2\n    2 1 1\n    ''') == 'Yes'\nassert solution(\n    '''\n    6 5\n    2 1 2\n    2 1 2\n    3 1 2 3\n    2 1 5\n    2 4 4\n    2 4 4\n    ''') == 'No'\n\n'''\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\n4 3\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\n\n5 2\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n0\n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\n5 2\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nNo\n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n0\n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n0\n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n2 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n'''\nYes\n2\n3 3 \n\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n'''\nYes\n2\n3 3 \n\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n''') == \"Yes\", \"First\"\nassert solution('''6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n''') == \"No\", \"Second\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'\nassert solution('4 3') == 'Yes'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('4 3') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n''') == 'Yes'\nassert solution('''4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n''') == 'No'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0 2 1'\n\nInput\n5\nOutput\n\n0 2 1 4 3\n\nInput\n6\nOutput\n\n0 2 1 4 3 5\n\nInput\n10\nOutput\n\n20 4 0 2 1 3 6 8 5 7 9\n\nInput\n100\nOutput\n\n2\n\nInput\n500\nOutput\n\n2\n'''"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 4 1''') == \"1 2 0 4 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0 2 1 4 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n0 2 1 4 3\n''') == '20 0 2 1 4 3'\n\nassert solution('''5\n0 2 1 3 4\n''') == '20 0 2 1 3 4'\n\nassert solution('''7\n1 2 3 4 5 6\n''') == '10 1 2 3 4 5 6'\n\nassert solution('''1\n3 2 1\n''') == '3 2 1'\n\nassert solution('''2\n1 0\n''') == '1 0'"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0 2 1\"\nassert solution(\"5\") == \"0 2 1 4 3\"\nassert solution(\"6\") == \"0 2 1 4 3 5\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"20 0 2 1 4 3\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"20 0 2 1 4 3\"\n\nassert solution() == \"0 2 1 4 3\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0 2 1 4 3'\n\nInput\n5\n\nOutput\n10\n0 1 3 5 2 4\n'''\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 1''') == '0 2 1'\n\nassert solution('''5\n0 2 3 1 4''') == '0 2 1 4 3'\n\nassert solution('''5\n3 2 1 0 4''') == '3 2 1 0 4'\n\nassert solution('''5\n4 3 2 1 0''') == '4 3 2 1 0'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(test_3_4) == \"YES\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == 'YES'\nassert solution(input_2) == 'NO'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1\\n') == 'YES'\nassert solution('3 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1\\n') == 'NO'\nassert solution('5 4\\n0 0\\n0 2\\n2 0\\n0 2\\n2 2\\n2 0\\n1 1\\n') == 'YES'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('3 4') == 'NO'"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n2 4\n1 0\n0 0\n0 0\n0 0\n\"\"\") == \"NO\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"YES\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3 4\n    0 0\n    0 2\n    2 0\n    0 2\n    2 2\n    2 0\n    1 1\n    ''') == \"NO\"\nassert solution('''\n    3 4\n    0 0\n    0 2\n    2 0\n    0 2\n    2 2\n    2 0\n    0 0\n    ''') == \"YES\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('11111') == 'M'\nassert solution('001111') == 'M'\nassert solution('010100') == 'MMM'\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"3\""
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"\"\"\n1\n3\n7\n\"\"\".strip()\n\nassert solution(\"\"\"\n5\n1\n0\n1\n0\n1\n\n\"\"\") == \"\"\"\n1\n4\n10\n22\n43\n\"\"\".strip()\n\nassert solution(\"\"\"\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n\"\"\") == \"\"\"\n1\n3\n10\n24\n51\n109\n213\n421\n833\n\"\"\".strip()\n\nassert solution(\"\"\"\n10\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n1\n\n\"\"\") == \"\"\"\n1\n3\n10\n24\n51\n109\n213\n421\n833\n\"\"\".strip()\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"11\"\nassert solution(\"0\") == \"00\"\nassert solution(\"1\") == \"01\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n0\n1\n0\n1''') == \"1\"\nassert solution('''5\n1\n0\n1\n0\n1\n\n''') == \"4\"\nassert solution('''9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n''') == \"10\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"1\"\nassert solution(\"8\") == \"1\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n1\n1\n1\n0\n1\n1\n0\n1\n1\n0\n0\n1\n0\n1\n0\n1\n0\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '13'\nassert solution('6') == '42'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('9') == '1'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3\\n1\\n1\\n1\"\n) == \"1\"\nassert solution(\n    \"5\\n1\\n0\\n0\\n0\\n1\"\n) == \"1\"\nassert solution(\n    \"9\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n0\\n1\"\n) == \"1\"\n\n\"\"\""
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n''') == 'First\\nSecond\\nFirst'''\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sample_input_1) == \"Second\"\nassert solution(sample_input_2) == \"First\"\nprint(solution(input()))\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 0') == 'First'\nassert solution('3 1') == 'Second'\nassert solution('5 7') == 'First'\nassert solution('5 8') == 'Second'\nassert solution('5 9') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0') == 'First'\nassert solution('3 1') == 'Second'\nassert solution('3 2') == 'First'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'First'\nassert solution('2') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'First\\nSecond\\nFirst\\n'\n----------------------------------------------------\nTaro's logic:\nIn each turn, he chooses any edge, and if the edge is a bad one, he loses.\nOtherwise, he chooses one of the two nodes in the edge and adds an edge from it to its opposite.\nThen, if the graph becomes good, he wins.\n\nJiro's logic:\nIn each turn, he chooses an edge, and if the edge is a bad one, he loses.\nOtherwise, he chooses a node in the edge and adds an edge to it.\nThen, if the graph becomes good, he wins.\n\n----------------------------------------------------\nTaro's algorithm:\n1) Take in the input N and M\n2) Make N and M integers\n3) Create a graph of size NxN\n4) Add edges for each edge in the input file\n5) Check if it is still a good graph\n6) If it is, print First\n7) If it isn't, print Second\n8) Print the correct winner\n----------------------------------------------------\nJiro's algorithm:\n1) Take in the input N and M\n2) Make N and M integers\n3) Create a graph of size NxN\n4) Add edges for each edge in the input file\n5) Check if it is still a good graph\n6) If it is, print First\n7) If it isn't, print Second\n8) Print the correct winner\n----------------------------------------------------\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\"\nassert solution(\"3 3\") == \"Second\"\nassert solution(\"3 4\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"6 2\") == \"Second\"\nassert solution(\"1 2\") == \"First\"\nassert solution(\"2 3\") == \"Second\"\nassert solution(\"15 10\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\"\nassert solution(\"3 3\") == \"Second\"\nassert solution(\"3 4\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == \"First\"\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n\n'''"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'Mike'\nassert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\nprint('You are a clever guy and you win!')\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\nassert solution('adec') == 'Ann'\nassert solution('badec') == 'Mike'\nassert solution('da') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''s = \"aaaehnsvz\"\nk = 5\ns = \"cba\"\nk = 2''') == \"Ann\"\n\nassert solution('''s = \"aaaehnsvz\"\nk = 6\ns = \"cba\"\nk = 1''') == \"Mike\"\n\nassert solution('''s = \"abcd\"\nk = 4\ns = \"abcd\"\nk = 2''') == \"Mike\"\n\nassert solution('''s = \"abcd\"\nk = 4\ns = \"abcd\"\nk = 3''') == \"Ann\"\n\nassert solution('''s = \"abcd\"\nk = 4\ns = \"abcd\"\nk = 1''') == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\nassert solution(\"kaba\") == \"Mike\"\nassert solution(\"abcabd\") == \"Ann\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == 'Mike'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n8 9 7 1\n1 2\n2 3\n2 4\n3 4\n''') == '2'\nassert solution('''\n4 3\n8 9 7 1\n1 2\n2 3\n2 4\n''') == '1'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2\n8 3 8\n1 2\n2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n8 12 8\n1 2\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 2\n4 2 1 5 6 7 8 1 4 5 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2\n1 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 3\n2 1 3 2 3\n\"\"\") == \"3\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"8 3 8\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    4\n    10\n    1 2\n    2 3\n    3 5\n    7 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n    4\n    10\n    1 2\n    2 3\n    2 3\n    3 5\n    7 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n    4\n    10\n    1 2\n    2 3\n    2 3\n    3 5\n    7 8\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\"\nassert solution(\"8 3 8\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\n8 3 8\n1 2\n2 3\n\n''') == '2'\nassert solution('''3 2\n8 12 8\n1 2\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\nassert solution('''\n3 2\n1 2\n2 3\n''') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 4\n\nOutput\nababacd\n''') == 'ababacd', '7 4'\nassert solution('''\n9 4\n\nOutput\n-1\n''') == '-1', '9 4'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"ababacd\"\nassert solution() == \"-1\"\n\"\"\"\n\nn, k = [int(i) for i in stdin.split()]"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"7 4\\n\"\n) == \"ababacd\"\n\nassert solution(\n    \"4 7\\n\"\n) == \"-1\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 4\n''') == \"ababaca\"\nassert solution('''6 5\n''') == \"ababac\"\nassert solution('''10 5\n''') == \"-1\"\nassert solution('''10 6\n''') == \"ababac\"\nassert solution('''10 7\n''') == \"ababac\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 4\na\nb\nc\nd''') == 'ababacd'\nassert solution('''3 5\naa\nab\nac''') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'ababacd', solution()\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n''') == '-1'\nassert solution('''\n5 4\n''') == 'ababacd'\nassert solution('''\n''') == '-1'"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 4') == \"ababacd\"\nassert solution('4 7') == \"-1\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n4\\n') == 'ababacd'\nassert solution('3\\n8\\n') == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n\") == \"ababac\"\nassert solution(\"6 6\\n\") == \"abcabcabcabc\"\nassert solution(\"1 1\\n\") == \"-1\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1 2') == 4\nassert solution('10') == 9\nassert solution('4') == 4\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '9'\nassert solution('1 1 2 2 1') == '4'\nassert solution('1 1 1 1 2 2 2 1') == '3'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '4'\n\nassert solution('''\n10\n1 1 2 2 2 1 1 2 2 1\n''') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n5\n1 2 1 2 1\n    \"\"\"\n    ) == \"4\"\nassert solution(\n    \"\"\"\n10\n1 1 2 2 2 1 1 2 2 1\n    \"\"\"\n    ) == \"9\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"1 1 2 2 1\") == \"4\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2 1 2''') == \"4\"\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1''') == \"9\"\nprint(solution('''4\n1 2 1 2'''))"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"9\"\n\n'''\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"9\"\nprint(solution())\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"20\") == \"18\"\nassert solution(\"100\") == \"99\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10\\n1 1 2 2 2 1 1 2 2 1') == '9'\nassert solution('10\\n1 1 2 2 2 1 1 2 2 1') == '8'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n2 2 1\n1 2 2\n2 1 3\n''') == '-1'\nassert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n2 2 1\n1 1 2\n1 3 2\n''') == '2'\nassert solution('''\n3 3 1\n1 1 2\n2 1 3\n''') == '-1'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 2 1\n1 1 2\n2 2 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4 4\n2 2 2\n2 2 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 5 5\n2 2 2\n2 2 2\n1 1 1\n2 2 1\n1 1 1\n1 1 1\n1 1 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution() == '+'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3 2\n1 2 1\n1 4 2\n1 5 1\n2 4 1\n3 4 1\n''') == '2'\nassert solution('''\n4 4 1\n1 2 1\n1 3 1\n1 4 1\n2 4 1\n3 4 1\n''') == '2'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution('6 6 3') == '6'\nassert solution('2 2 1') == '2'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1\\n1 1 2\\n2 2 1') == '2'\nassert solution('6 6 3\\n2 4 5\\n1 4 1\\n1 3 1\\n2 2 3\\n') == '6'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 1\n1 1 2\n2 2 1\n''') == '2'\n\nassert solution('''\n3 3 4\n1 4 2\n3 2 1\n1 3 2\n4 1 1\n3 4 3\n''') == '2'\n\nassert solution('''\n4 4 4\n1 4 2\n2 3 4\n1 3 4\n2 3 2\n2 4 3\n1 3 2\n4 4 1\n''') == '2'\n\nassert solution('''\n5 4 5\n1 4 2\n4 3 4\n4 3 2\n2 4 1\n1 4 1\n4 4 2\n''') == '2'\n\nassert solution('''\n8 6 2\n1 2 4\n3 2 1\n4 2 5\n5 2 1\n1 2 2\n3 4 1\n3 4 3\n4 1 3\n3 4 3\n1 4 4\n3 4 1\n''') == '3'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\n\nassert solution('''\n3 3 3\n2 3 4\n3 2 2\n4 4 2\n1 3 2\n''') == '3'\n\nassert solution('''\n5 5 2\n1 1 2\n2 3 3\n1 3 1\n2 4 3\n3 2 3\n''') == '5'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4609') == '04560'\nassert solution('1234') == '12344'\nassert solution('12345') == '12345'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(1) == \"1\"\nassert solution(6) == \"6\"\nassert solution(8) == \"8\"\nassert solution(9) == \"9\"\nassert solution(1689) == \"1869\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"123\") == \"1123\"\nassert solution(\"12345\") == \"12345\"\nassert solution(\"1234567890\") == \"1234567890\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n96789\n''') == '63889'\nassert solution('''\n4123456789\n''') == '9123456789'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"-1\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '2'\nassert solution('4 6') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n3 4\\n\") == 2\nassert solution(\"5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n\") == 3"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '3'\nassert solution('5 6') == '-1'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n) == \"2\"\n\nassert solution(\n    \"4 6\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"2 3\\n\"\n    \"2 4\\n\"\n    \"3 4\\n\"\n) == \"3\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n4 2\n1 3\n3 4\n'''\n    ) == '2'\nassert solution(\n    '''\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n'''\n    ) == '-1'\nassert solution(\n    '''\n5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n'''\n    ) == '3'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 3\n3 4''') == '2'\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"-1\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '2'\nassert solution('4 6') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n1 3\n3 4\n\n''') == '2'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n4 7\n4 8 7\n3 4 5''') == '3'\nassert solution('''2\n2 3\n1 2''') == '1'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n4 7') == '3'\nassert solution('3\\n4 3 1') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n4 7\n''') == '3'\nassert solution('''3\n4 3 1\n''') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"9\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('4') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n4 3 1') == '3'\nassert solution('3\\n4 3 1') == '3'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n4 7\\n') == '3'\nassert solution('3\\n4 3 1\\n') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3,2,4,7]) == \"3\"\nassert solution([4,3,1,2]) == \"9\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n7\n\n''') == '3'\nassert solution('''\n4\n4 3 1\n\n''') == '9'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\nassert solution('1000000000') == '999999999'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '0'\nassert solution('3') == '9'\nassert solution('4') == '2'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n4 8 5\n''') == '9'\n\nassert solution('''5\n0 5 15 10\n''') == '0'\n\nassert solution('''4\n0 5 15 10\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n4 8 5\\n') == '9'\nassert solution('5\\n3 10 2 1 5\\n') == '2'\nassert solution('4\\n0 5 15 10\\n') == '0'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\"\n) == \"9\"\n\nassert solution(\n    \"5\"\n) == \"0\"\n\nassert solution(\n    \"4\"\n) == \"-1\"\n\nassert solution(\n    \"1\"\n) == \"-1\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '9'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '9'\nassert solution('3') == '9'\nassert solution('4') == '0'\nassert solution('1') == '-1'\nassert solution('5') == '0'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '9'\nassert solution('4') == '2'\nassert solution('5') == '0'\nassert solution('1') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n8 5\n''') == '9'\nassert solution('''\n3\n4 8 5\n''') == '2'\nassert solution('''\n5\n3 10 2 1 5\n''') == '0'\nassert solution('''\n1\n1\n''') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n8 5\n''') == \"9\"\nassert solution('''5\n3 10 2 1 5\n''') == \"2\"\nassert solution('''4\n0 5 15 10\n''') == \"0\"\nassert solution('''1\n1\n''') == \"-1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 10 1\") == \"1\"\nassert solution(\"5 4 5\") == \"3\"\nassert solution(\"5 4 1\") == \"4\"\nassert solution(\"5 3 2\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 4 5\n7 8 9 10''') == '1'\nassert solution('''13 4 5\n1 2 4 7 8 9 10\n\n11 12 13 14 15 16 17 18''') == '2'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 1 5\") == \"3\"\nassert solution(\"5 4 5\") == \"1\"\nassert solution(\"5 10 5\") == \"1\"\nassert solution(\"10 1 5\") == \"1\"\nassert solution(\"10 10 5\") == \"0\"\n\nprint(solution(*tuple(map(int, input().split()))))\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 4 5\") == \"3\"\nassert solution(\"13 4 5\") == \"1\"\nassert solution(\"12 4 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 4 5\n    3 5 7 10''') == '3'\nassert solution('''13 4 5\n    7 8 9 10''') == '1'\nassert solution('''10 4 6\n    8 4 3 2 7 5''') == '3'\nassert solution('''10 4 6\n    9 2 3 4 7 5''') == '0'\nprint('The tests passed')\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n''') == '3'\nassert solution('''\n13 4 5\n7 8 9 10\n''') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(s) == \"3\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == str(max(map(lambda x: int(x), stdin.split())))\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\nassert solution('6') == '6'\nassert solution('1000') == '1000'\nassert solution('011100') == '6'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('6') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n101\n3 3\n3 2\n3 1\n\n''') == '2'\nassert solution('''\n6\n1111\n3 4\n5 2\n3 1\n3 2\n\n''') == '4'\nassert solution('''\n7\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n\n''') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('6') == '6'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('6') == '4'\n\n--------------------------------------\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '2'\nassert solution('''\n2\n1 0\n1 0\n''') == '1'\nassert solution('''\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '4'\n\nassert solution('''\n4\n101\n3 4\n5 2\n3 1\n3 2\n''') == '3'\n\nassert solution('''\n6\n11111\n3 4\n5 2\n3 1\n3 2\n''') == '3'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 4\n''') == '1111'\nassert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n''') == \"1111\"\nassert solution('''\n5 3\n''') == \"01010\"\nassert solution('''\n7 3\n''') == \"1011011\"\nassert solution('''\n8 3\n''') == \"1111\""
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n\") == \"1111\"\nassert solution(\"5 3\\n\") == \"01010\"\nassert solution(\"7 3\\n\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '101'\nassert solution('5 3\\n') == '01010'\nassert solution('7 3\\n') == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'\nassert solution('''8 5\n''') == '1111'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 4\n''') == '1111'\nassert solution('''5 3\n''') == '01010'\nassert solution('''7 3\n''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1 1 1\n''') == '01'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1/1'\nassert solution('2') == '0/1'\nassert solution('3') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1/2'\nassert solution('2') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1/2'\nassert solution('3') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '1/2'\nassert solution('3\\n1 1 1') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1/2'\nassert solution('2') == '0/1'\nassert solution('3') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1/2'\nassert solution('3') == '0/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n''') == '0/1'\n\nassert solution('''3\n1 1 1\n''') == '1/2'\n\nassert solution('''5\n2\n1 1 1 1\n''') == '1/4'\n\nassert solution('''9\n2\n1 2\n''') == '1/8'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '1/2'\nassert solution('3\\n1 1 1') == '0/1'\nprint(solution(input()))"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0/1'\nprint(solution())\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0/1\"\nassert solution(\"2\") == \"1/2\"\nassert solution(\"3\") == \"0/1\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1 0 1 0 0'\nassert solution('2') == '0 1'\nassert solution('3') == '0 0 1'\nassert solution('4') == '1 0 0 1'\nassert solution('5') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1 0 1 0 0\""
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4 3 2 1 0'\nassert solution('10') == '9 7 8 6 5'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 0 1 0 0\""
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 0 1 0 0'\nassert solution('6') == '4 3 2 1 0'\nassert solution('7') == '1 1'\nassert solution('8') == '4 1 1 2 1'\nassert solution('9') == '2 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\\n') == '1 0 1 0 0'\nassert solution('5\\n7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\\n') == '4 3 2 1 0'"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 0 1 0 0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1'\nassert solution('4 5 1 7 4') == '8'\nassert solution('2') == '0'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '11'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n''') == '1'\nassert solution('''2\n1 2\n\nOutput\n0\n2\n11\n11\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n2\n''') == '0'\nassert solution('''5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n\nInput\n2\n1 2\n\nOutput\n0\n2\n11\n11\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n2\n''') == '1'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\""
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '0'\nassert solution('2') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1\\n') == '1\\n0\\n11\\n'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '0'\nassert solution('3') == '11'\nprint(solution('''\n5\n4 5 1 7 4\n\n'''))\nassert solution('''\n2\n1 2\n\n''') == '0'\nassert solution('''\n3\n1 1 1\n\n''') == '1'"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"6\"\n) == \"1\"\nassert solution(\n    \"0 1 2 3\"\n) == \"1\"\nassert solution(\n    \"0 4 6 1\"\n) == \"1\"\nassert solution(\n    \"1 6 7 2\"\n) == \"1\"\nassert solution(\n    \"6 4 5 7\"\n) == \"1\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"0 1 2 3\") == \"1\"\nassert solution(\"0 4 6 1\") == \"2\"\nassert solution(\"1 6 7 2\") == \"2\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '1'\nassert solution('10') == '3'\nassert solution('6 6 6 6') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '1'\n\n\"\"\""
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"6 2 1 3\") == \"4\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '1'\nassert solution('0 1 2 3') == '1'\nassert solution('0 4 6 1') == '1'\nassert solution('1 6 7 2') == '1'\nassert solution('2 7 5 3') == '1'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5') == '1'\n"
    }
]