[
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('5') == '5'\nprint('all tests passed')"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == \"5\"\nassert solution('2') == \"5\"\nassert solution('3') == \"5\"\nassert solution('4') == \"5\"\nassert solution('5') == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2\n2 3\n\"\"\") == \"5\"\n\nassert solution(\"\"\"8\n( 2 ( 2 1 ) ) 3\n\"\"\") == \"9\"\n\nassert solution(\"\"\"4\n( 12 3 )\n\"\"\") == \"36\"\n\nassert solution(\"\"\"6\n( ( 2 ) )\n\"\"\") == \"5\"\n\nassert solution(\"\"\"6\n( ( ( 2 3 ) ) )\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"2 3\") == \"5\"\nassert solution(\"4\") == \"36\"\nassert solution(\"6\") == \"5\"\nassert solution(\"6 ( )\") == \"5\"\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '5'\nassert solution('8') == '9'\nassert solution('4') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n3\n1\n''') == '5'\n\nassert solution('''\n2\n1\n1\n''') == '5'\n\nassert solution('''\n3\n( 4 )\n( 5 )\n''') == '45'\n\nassert solution('''\n4\n( 2 ) ) )\n''') == '4'\n\nassert solution('''\n5\n( 5 ) ) ) ) )\n''') == '135'"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '5'\nassert solution('8 (2 ( 2 1 ) ) 3') == '9'\nassert solution('4 ( 12 3 )') == '36'\nassert solution('6 ( ( 2 ) )') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n2 3\n''') == '5'\nassert solution('''\n8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''\n4\n( 12 3 )\n''') == '36'\nassert solution('''\n6\n( ( 2 3 ) )\n''') == '5'\n"
    },
    {
        "number": 3000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n2 3\n''') == '5'\nassert solution('''8\n( 2 ( 2 1 ) ) 3\n''') == '9'\nassert solution('''4\n( 12 3 )\n''') == '36'\nassert solution('''6\n( ( 2 ) )\n''') == '5'\nassert solution('''6\n( ( ( 2 3 ) ) )\n''') == '5'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"009990001\") == \"3\"\nassert solution(\"29998\") == \"5\"\nassert solution(\"610\") == \"4\"\nassert solution(\"981\") == \"2\"\n"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('610') == '3'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '0'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('610') == '4'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('610') == '4'\nassert solution('009990001') == '3'\nassert solution('29998') == '5'\nassert solution('981') == '2'"
    },
    {
        "number": 3001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0\n''') == '0'\n\nassert solution('''\n009990001\n''') == '3'\n\nassert solution('''\n29998\n''') == '5'\n\nassert solution('''\n610\n''') == '4'\n\nassert solution('''\n981\n''') == '2'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'tampered odometer'\nassert solution('''\n2\n2017 11 0\n2018 1 1000\n''') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"seems legit\"\nassert solution(\"\"\"\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"tampered odometer\"\nassert solution(\"\"\"\n2017 4 0\n2017 8 12000\n2018 8 42000\n\"\"\") == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == \"seems legit\"\nassert solution('2') == \"tampered odometer\"\nassert solution('1') == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n2017 11 0\n2018 1 1000\n''') =='seems legit'\nassert solution('''\n2\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''\n2\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') =='seems legit'\nassert solution('3') == 'tampered odometer'\nassert solution('2') == 'insufficient service'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"seems legit\"\nassert solution(\"2\") == \"tampered odometer\"\nassert solution(\"3\") == \"insufficient service\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') == \"seems legit\"\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') == \"insufficient service\"\nassert solution('2\\n2017 4 0\\n2017 8 12000\\n2018 8 42001\\n') == \"tampered odometer\""
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') =='seems legit'\nassert solution('3\\n2017 4 0\\n2017 8 12000\\n2018 8 42000\\n') == 'tampered odometer'\nassert solution('2\\n2013 1 0\\n2013 2 0\\n') == 'insufficient service'"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3\n    2017 4 0\n    2017 8 12000\n    2018 8 42000\n    \"\"\"\n) == \"seems legit\"\nassert solution(\n    \"\"\"\n    3\n    2017 4 0\n    2017 8 12000\n    2018 8 42000\n    \"\"\"\n) == \"tampered odometer\"\n"
    },
    {
        "number": 3002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') =='seems legit'\nassert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42001\n''') == 'tampered odometer'\nassert solution('''3\n2017 4 0\n2017 8 12000\n2018 8 42000\n''') == 'insufficient service'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n0 2 3\n0 1''') == \"3\"\nassert solution('''5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 5:\n2''') == \"2\"\nassert solution('''6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 6:\n2''') == \"2\""
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n''') == '3'\n\nassert solution('''6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n''') == '4'\n\nassert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Input 3:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 3:\n2\n''') == '3'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n2 3 4\\n0 2 3\\n0 1 3\\n0 1 2\\n1') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n\nSample Input 3:\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 4:\n4\n\nSample Input 5:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n0 1\nSample Output 5:\n2\n''') == '2'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n''') == '3'\nassert solution('''\n3\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n''') == '2'\nassert solution('''\n5\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 5:\n2\n''') == '4'\nassert solution('''\n3\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n''') == '4'"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\n''') == '3'\nassert solution('''\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 4:\n4\n''') == '4'\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"8 6\") == \"3\"\n"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '2'\nassert solution('10') == '5'\n\n------------------\n\nWrite 5 lines of code to test the correctness of solution:\nTo address the impending STEM shortage early on, your local elementary school decided to teach graph theory to its kindergarten students! To tap into their age-specific skills, the students are asked to color the vertices of a graph with colors of their own choosing. There is one constraint, however: they cannot use the same color for two vertices if those vertices are connected by an edge. Furthermore, they are asked to use as few different colors as possible. The illustration shows a few examples of student work. \n\nThere is one problem, as you can imagine: there is no money to train teachers to grade these students\u2019 submissions! Thus, your task is to write a program that computes the sample solutions for the graphs given on each work sheet!\n\nThere are no restrictions on the number of colors used or their uniqueness. However, the sample output shows that for graphs on paper, all vertices must be colored with different colors.\n\nThe sample graphs on the left correspond to graphs obtained from the real problem.\n\n-----Input-----\nThe input consists of a description of a single graph. The first line contains a number $N$ ($2 \\le N \\le 11$), the number of vertices in the graph. Vertices are numbered $0 \\ldots N-1$. The following $N$ lines contain one or more numbers each. The $i^{th}$ line contains a list of vertex numbers ${ v_ j }$, denoting edges from $v_ i$ to each $v_ j$ in the list. You may assume that the graph is connected (there is a path between any two pairs of vertices).\n\n-----Output-----\nOutput the minimum number of colors required to color all vertices of the graph such that no vertices that share an edge are colored using the same color!\n\nThe sample input corresponds to the graphs shown on the illustration.\n\n-----Examples-----\nSample Input 1:\n4\n1 2\n0 2 3\n0 1\n1\nSample Output 1:\n3\n\nSample Input 2:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 2:\n2\n\nSample Input 3:\n6\n1 3\n0 2 4\n1 5\n0 4\n1 3 5\n2 4\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 2 3\n0 2 3\n0 1 3\n0 1 2\nSample Output 4:\n4"
    },
    {
        "number": 3003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n1 2\n0 2 3\n0 1\n1\nSample Input 5:\n5\n2 3 4\n2 3 4\n0 1\n0 1\n0 1\nSample Output 5:\n3\n''') == '3'\nprint('All test cases passed!')"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\nBLUE 1 5000\nRED 5001 10000\nWHITE 7000 10000''') == '3'\nassert solution('''4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 700 10000''') == '3'\nassert solution('''2\nBLUE 1 6000\nRED 5001 10000''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\nBLUE 1 5000\\nRED 5001 10000') == '2'\nassert solution('3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000') == '3'\nassert solution('4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000') == '3'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == OUTPUT"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''BLUE 1 5000\nRED 5001 10000\n''') == '2'\n\nassert solution('''BLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\n\nassert solution('''BLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '3'\n\nassert solution('''BLUE 1 4000\nRED 2000 5001\nORANGE 4000 8000\nGREEN 700 2 10000\n''') == 'IMPOSSIBLE'\n\nassert solution('''BLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 700 2 10000\n''') == 'IMPOSSIBLE'"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2\\nBLUE 1 5000\\nRED 5001 10000\\n'\n    '3\\nBLUE 1 6000\\nRED 2000 8000\\nWHITE 7000 10000\\n'\n    '4\\nBLUE 1 3000\\nRED 2000 5000\\nORANGE 4000 8000\\nGREEN 7000 10000\\n'\n) == '3'\n"
    },
    {
        "number": 3004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\nBLUE 1 5000\nRED 5001 10000\n''') == '2'\n\nassert solution('''\n3\nBLUE 1 6000\nRED 2000 8000\nWHITE 7000 10000\n''') == '3'\n\nassert solution('''\n4\nBLUE 1 3000\nRED 2000 5000\nORANGE 4000 8000\nGREEN 7000 10000\n''') == '4'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\nassert solution('AAABBBBCCCCC') == '15'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AAAAABBBBBBB') == '7'\nassert solution('CCCCDDDEEEEEEEEE') == '1'\nassert solution('ABABABAABABABABABA') == '4'\nassert solution('POPPOP') == '5'\nassert solution('DOPPOP') == '3'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"PRATTATTATTIC\") == \"6\"\nassert solution(\"GGGGGGGGG\") == \"1\"\nassert solution(\"PRIME\") == \"5\"\nassert solution(\"BABBABABBABBA\") == \"6\"\nprint(\"ALL TEST CASES PASSED\")\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline()[:-1]\n__import__('time').time()\nprint(solution())"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'\n"
    },
    {
        "number": 3005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('PRATTATTATTIC') == '6'\nassert solution('GGGGGGGGG') == '1'\nassert solution('PRIME') == '5'\nassert solution('BABBABABBABBA') == '6'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"D 1\\n\"\n    \"D 2\\n\"\n    \"E\\n\"\n    \"D 3\\n\"\n    \"D 1\\n\"\n    \"E\\n\"\n    \"E\\n\"\n) == \"0\"\nassert solution(\n    \"D 2\\n\"\n    \"D 1\\n\"\n    \"E\\n\"\n    \"D 1\\n\"\n    \"D 2\\n\"\n    \"E\\n\"\n) == \"1\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == '0'\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == '1'\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\nE\") == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('D 1') == '0'\nassert solution('D 2') == '1'\nassert solution('E') == '1'\nassert solution('D 3') == '0'\nassert solution('D 1') == '0'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\n\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '0'\n\nassert solution('''\nI 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n''') == '1'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"D 1\") == \"0\"\nassert solution(\"D 2\") == \"1\"\nassert solution(\"E\") == \"0\"\nassert solution(\"D 3\") == \"1\"\nassert solution(\"D 1\") == \"0\"\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"D 1\nD 2\nE\nD 3\nD 1\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"D 2\nD 1\nE\nD 1\nD 2\nE\n\"\"\") == \"1\"\nassert solution(\"\"\"I 1 X\nD 1\nE\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"I 14 B\nI 14 A\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"0\"\nassert solution(\"\"\"I 1\nI 14 B\nI 14 A\nI 15 B\nE\nI 14 A\nI 15 B\nE\n\"\"\") == \"1\""
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"D 1\\nD 2\\nE\\nD 3\\nD 1\\ne\") == '0'\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\ne\") == '1'\nassert solution(\"D 2\\nD 1\\nE\\nD 1\\nD 2\\ne\") == '1'\nassert solution(\"I 14 B\\nD 1\\nE\\nE\\nI 14 A\\nI 15 B\\ne\") == '0'\nassert solution(\"I 14 B\\nD 1\\nE\\nE\\nI 14 A\\nI 15 B\\ne\") == '1'\n"
    },
    {
        "number": 3006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nD 1\nD 2\nE\nD 3\nD 1\nE\n''') == '0'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'\nassert solution('''\nD 2\nD 1\nE\nD 1\nD 2\nE\n''') == '1'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 0 1 0 1 0') == '1900'\nassert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 1 0 0') == '2300'\nassert solution('6 0 1 1 0 0') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 0 1 0 0 0') == '300'\nassert solution('5 0 1 0 1 0') == '1900'\nassert solution('6 0 1 1 0 0') == '2300'\nassert solution('10 399 0 0 0 0') == '399'"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 0 1 0 0 0\n1\n''') == '300'\nassert solution('''5 0 1 0 1 0\n1\n''') == '1900'\nassert solution('''6 0 1 1 0 0\n0\n''') == '399'\nassert solution('''10 399 0 0 0 0\n0\n''') == '399'\nassert solution('''20 100 0 0 0 0\n0\n''') == '0'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 0 1 0 0 0\n''') == '300'\nassert solution('''\n5 0 1 0 1 0\n''') == '1900'\nassert solution('''\n6 0 1 1 0 0\n''') == '2300'\nassert solution('''\n10 399 0 0 0 0\n''') == '399'\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2300\""
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 0 1 0 0 0\") == \"300\"\nassert solution(\"5 0 1 0 1 0\") == \"1900\"\nassert solution(\"6 0 1 1 0 0\") == \"2300\"\nassert solution(\"10 399 0 0 0 0\") == \"399\"\n"
    },
    {
        "number": 3007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == '2300'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 10\\n1 12\\n1 13\") == \"2\"\nassert solution(\"2 10\\n1 5\\n1 12\") == \"2\"\nassert solution(\"2 10\\n1 5\\n4 1\") == \"2\"\nprint('Everything passed!')"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 10\n1 5\n1 4''') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"1 10\") == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10') == '2'\nassert solution('2 10') == '2'\nassert solution('3 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"2\"\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 10') == '2'\nassert solution('2 10') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10') == '2'\nassert solution('1 10') == '2'\nassert solution('1 5') == '2'\nassert solution('1 4') == '2'\n"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 10\n1 12\n1 13\n''') == '2'\nassert solution('''2 10\n1 5\n1 4\n''') == '2'\nassert solution('''2 10\n1 5\n4 1\n''') == '2'\n\nimport sys\nimport io\nimport os\nfrom math import inf"
    },
    {
        "number": 3008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\"\nassert solution(\"2 10\") == \"2\""
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28'\n\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 5\n20 20 5\n''') == '36.2842712475'\n\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == \"28.970562748\"\nprint(solution('''2\n1 1 15\n5 1 100'''))\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '34.675792957'\nassert solution('''\n12\n1 3 2\n2 4 2\n3 5 5\n4 5 6\n5 6 7\n6 7 8\n7 8 9\n8 9 10\n9 10 11\n10 11 12\n11 12 13\n12 13 14\n13 14 15\n14 15 16\n15 16 17\n16 17 18\n17 18 19\n18 19 20\n19 20 21\n20 21 22\n21 22 23\n22 23 24\n23 24 25\n24 25 26\n25 26 27\n26 27 28\n''') == '34.675792957'\nprint('Tests passed.')\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'IMPOSSIBLE'\nassert solution('4') == '28.970562748'\nassert solution('5') == '32'\nassert solution('10') == '28.970562748'\nassert solution('15') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 10 5\n10 20 5\n20 10 5\n20 20 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\nassert solution('''\n4\n4 4 1\n4 6 1\n4 8 1\n6 6 14\n8 4 1\n8 6 1\n8 8 1\n99 6 -8\n''') == '32'\nassert solution('''\n8\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8\\n4 4 1\\n4 6 1\\n4 8 1\\n6 6 14\\n8 4 1\\n8 6 1\\n8 8 1\\n99 6 -8') == '32'\nassert solution('6\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3\\n') == '28.970562748'"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n10 10 5\\n10 20 5\\n20 10 5\\n20 20 5') == '28'\nassert solution('2\\n10 10 5\\n10 20 1\\n20 10 12\\n20 20 8') == '36.2842712475'\nassert solution('3\\n1 1 15\\n5 1 100\\n9 1 56\\n1 5 1\\n5 5 33\\n9 5 3') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32.0145'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n10 10 5\n10 20 5\n20 10 5\n20 20 5\n''') == '28.970562748'\nassert solution('''\n4\n10 10 5\n10 20 1\n20 10 12\n20 20 8\n''') == '36.2842712475'\nassert solution('''\n6\n1 1 15\n5 1 100\n9 1 56\n1 5 1\n5 5 33\n9 5 3\n''') == '32'\n"
    },
    {
        "number": 3009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '28.970562748'\nassert solution('6') == '32'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('3') == '1'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\n    '2',\n    '1 3 9 5',\n    '2 2 6 8',\n]) == '3'\nassert solution([\n    '3',\n    '5 2 7 10',\n    '7 4 4 10',\n]) == '1'\nassert solution([\n    '3',\n    '5 2 7 10',\n    '7 4 4 10',\n    '2 4 10 8',\n]) == '2'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\n\nassert solution('''3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\n\nassert solution('''3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n''') == '1'\n\nassert solution('''3\n-1 -2 -1 -1\n-1 2 -1 -1\n''') == '1'\n\nassert solution('''5\n2 2 6 8\n4 8 9 3\n2 4 10 8\n''') == '1'"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('1 3 9 5') == '3'\nassert solution('2 2 6 8') == '1'\nassert solution('4 8 9 3') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n''') == '3'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '0'\nassert solution('''\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n''') == '1'\nassert solution('''\n2\n-1 -2 -1 -1\n-1 2 -1 -1\nSample Output 4:\n1\n''') == '1'\n"
    },
    {
        "number": 3010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 3 9 5\n2 2 6 8\n4 8 9 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n5 2 7 10\n7 4 4 10\n2 4 10 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n2 1 6 5\n2 5 5 4\n5 1 7 7\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n-1 -2 -1 -1\n-1 2 -1 -1\nSample Output 4:\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1\n1 2 3\nSample Output 5:\n1\n\"\"\") == \"1\""
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"94708\"\nassert solution(\"1234321\") == \"-1\"\nassert solution(\"\") == \"-1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1234321') == '94708'\nassert solution('55') == '55'\nassert solution('10') == '10'\nassert solution('101') == '-1'\nassert solution('123456789') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('12321') == '94708'\nassert solution('12322') == '-1'\nassert solution('122331') == '94708'\nassert solution('123232') == '-1'\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n12321\n12322\n12323\n12324\n12325\n12326\n12327\n12328\n12329\n1232\n1233\n1234\n12345\n123456\n1234567\n12345678\n123456789\n1234567891\n12345678910\n123456789101\n1234567891020\n1234567891012\n123456789101213\n12345678910121321\n1234567891012132222\n12345678910121323333\n1234567891012132334\n123456789101213233435\n1234567891012132334356\n12345678910121323343567\n12345678910121323343568\n123456789101213233435689\n1234567891012132334356899\n12345678910121323343568999\n123456789101213233435689010\n1234567891012132334356899010\n12345678910121323343568990120\n123456789101213233435689901210\n12345678910121323343568990121020\n123456789101213233435689901210210\n1234567891012132334356899012102110\n123456789101213233435689901210211020\n1234567891012132334356899012102110210\n123456789101213233435689901210211021020\n1234567891012132334356899012102110210210\n''') == '94708':\n    print(solution('''\n12321\n12322\n12323\n12324\n12325\n12326\n12327\n12328\n12329\n1232\n1233\n1234\n12345\n123456\n1234567\n12345678\n123456789\n1234567891\n12345678910\n123456789101\n1234567891020\n1234567891012\n123456789101213\n12345678910121321\n12345678910121322\n12345678910121323333\n1234567891012132334\n123456789101213233435\n1234567891012132334356\n12345678910121323343567\n12345678910121323343568\n123456789101213233435689\n1234567891012132334356899\n12345678910121323343568999\n123456789101213233435689010\n1234567891012132334356899010\n12345678910121323343568990120\n123456789101213233435689901210\n12345678910121323343568990121020\n123456789101213233435689901210210\n1234567891012132334356899012102110\n123456789101213233435689901210211020\n1234567891012132334356899012102110210\n123456789101213233435689901210211021020\n1234567891012132334356899012102110210210\n'''))\n    print(solution('''\n12345\n123456\n1234567\n12345678\n123456789\n1234567891\n12345678910\n123456789101\n1234567891020\n1234567891012\n123456789101213\n12345678910121321\n12345678910121322\n12345678910121323333\n1234567891012132334\n123456789101213233435\n1234567891012132334356\n12345678910121323343567\n12345678910121323343568\n123456789101213233435689\n1234567891012132334356899\n12345678910121323343568999\n123456789101213233435689010\n1234567891012132334356899010\n12345678910121323343568990120\n123456789101213233435689901210\n12345678910121323343568990121020\n123456789101213233435689901210210\n1234567891012132334356899012102110\n123456789101213233435689901210211020\n1234567891012132334356899012102110210\n123456789101213233435689901210211021020\n1234567891012132334356899012102110210210\n'''))\n    print(solution('''\n123\n12345\n123456\n1234567\n12345678\n123456789\n1234567891\n12345678910\n123456789101\n1234567891020\n1234567891012\n123456789101213\n12345678910121321\n12345678910121322\n12345678910121323333\n1234567891012132334\n123456789101213233435\n1234567891012132334356\n12345678910121323343567\n12345678910121323343568\n123456789101213233435689\n1234567891012132334356899\n12345678910121323343568999\n123456789101213233435689010\n1234567891012132334356899010\n12345678910121323343568990120\n123456789101213233435689901210\n12345678910121323343568990121020\n123456789101213233435689901210210\n1234567891012132334356899012102110\n123456789101213233435689901210211020\n1234567891012132334356899012102110210\n123456789101213233435689901210211021020\n1234567891012132334356899012102110210210\n'''))\n    print(solution('''\n12345678\n123456789\n1234567890\n12345678901\n123456789012\n1234567890123\n12345678901234\n123456789012345\n1234567890123460\n12345678901234567\n123456789012345678\n1234567890123456789\n12345678901234567890\n123456789012345678901\n1234567890123456789012\n12345678901234567890123\n123456789012345678901234\n1234567890123456789012345\n12345678901234567890123456\n123456789012345678901234567\n1234567890123456789012345678\n12345678901234567890123456789\n123456789012345678901234567891\n12345678901234567890123456789012\n1234567890123456789"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''12223\n3332211111''') == '94708'\n\nassert solution('''12223\n12321\n3332211111''') == '94708'\n\nassert solution('''12322\n1231\n12321\n3332211111''') == '-1'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '10'\nassert solution('123') == '10'\nassert solution('1234') == '-1'\nassert solution('123456789101') == '94708'"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1234321') == \"94708\"\nassert solution('12321') == \"10\"\nassert solution('12321') == \"10\"\nassert solution('1234321') == \"95708\"\nassert solution('1234567891011121314151617181920') == \"-1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"55\") == \"55\"\nassert solution(\"101\") == \"94708\"\nassert solution(\"1234321\") == \"94708\"\nassert solution(\"12345\") == \"-1\"\n"
    },
    {
        "number": 3011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('55') == '55'\nassert solution('101') == '-1'\nassert solution('1234321') == '94708'\nassert solution('1232221') == '95'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 0 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2 0 0 4\n1 2 0 0 3\n1 2 0 0 5\n1 2 0 0 6\n1 2"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(input())\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution(\"1 2 0 0 3\") == '6'\nassert solution(\"1 2 0 0 4\") == '4'\nassert solution(\"1 2 0 0 5\") == '2'\nassert solution(\"1 2 0 0 6\") == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 0 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 6\") == \"0\""
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 8') == '0'\nassert solution('1 2 0 1 3') == '5'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 0 3\") == '6'\nassert solution(\"1 2 0 0 5\") == '2'\nassert solution(\"1 2 0 0 4\") == '4'\nassert solution(\"1 2 0 0 6\") == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 0 0 0 3') == '6'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 6') == '0'"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 0 0 3') == '6'\nassert solution('1 2 0 0 4') == '4'\nassert solution('1 2 0 0 5') == '2'\nassert solution('1 2 0 0 6') == '0'\nassert solution('1 2 0 0 7') == '0'\n"
    },
    {
        "number": 3012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 2 0 0 3\") == \"6\"\nassert solution(\"1 2 0 0 4\") == \"4\"\nassert solution(\"1 2 0 0 5\") == \"2\"\nassert solution(\"1 2 0 0 6\") == \"0\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \"6.22375968 -0.31921472\"\nprint('all tests passed')"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\nassert solution('0.5 -8 8') == '-4.36385220 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''0.5 -5.301 3.098''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8''') == '9.21068947 2.56226688'\nassert solution('''1 8 8''') == '6.22375968 -0.31921472'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''0.5 -5.301 3.098\n0.5 8 8\n0.5 -8 8\n1 8 8\n''') == '-1.26167861 3.88425357'\nassert solution('''0.5 8 8\n1 8 8\n0.5 -8 8\n0.5 -5.301 3.098\n''') == '9.21068947 2.56226688'\nassert solution('''1 8 8\n0.5 -8 8\n0.5 -5.301 3.098\n''') == '6.22375968 9.46891588'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"0.5 -5.301 3.098\") == \"-1.26167861 3.88425357\"\nassert solution(\n    \"0.5 8 8\") == \"9.21068947 2.56226688\"\nassert solution(\n    \"1 8 8\") == \"6.22375968 -0.31921472\"\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0.5 -5.301 3.098\") == \" -1.26167861 3.88425357\"\nassert solution(\"0.5 8 8\") == \" 9.21068947 2.56226688\"\nassert solution(\"1 8 8\") == \" 6.22375968 -0.31921472\"\nprint(solution(input()))\n"
    },
    {
        "number": 3013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.5 -5.301 3.098') == '-1.26167861 3.88425357'\nassert solution('0.5 8 8') == '9.21068947 2.56226688'\nassert solution('1 8 8') == '6.22375968 -0.31921472'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 2\n1 2\n2 1\n''') == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(solution.__doc__) == '0\\n1\\n2\\n3\\n4\\n'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 5\") == \"0\"\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '2'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\nassert solution('2 1') == '1'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n1 2\n2 1\n''') == '1'\nassert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '0'\nassert solution('''4 5\n1 2\n2 3\n2 4\n3 1\n4 1\n''') == '2'\nassert solution('''3 3\n1 2\n2 3\n3 1\n''') == '1'\n"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\nassert solution('3 4') == '1'"
    },
    {
        "number": 3014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 3') == '1'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"11\"\nprint(solution(input_))"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"2 1 0 1\") == \"2\"\nassert solution(\"0 1 2\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([int(i) for i in stdin.split(' ')]) == 'infinity'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"4 5 0 3\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s1) == \"11\"\nassert solution(s2) == \"infinity\"\nassert solution(s3) == \"2\"\nassert solution(s4) == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n''') == 'infinity'\nassert solution('''\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\nSample Output 4:\n2\n''') == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 0 3') == \"11\"\nassert solution('5 5 0 4') == \"infinity\"\nassert solution('5 5 0 4') == \"infinity\"\nassert solution('2 1 0 1') == \"2\"\nassert solution('0 1 2') == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5 0 3\n0 1 1\n1 2 2\n2 0 4\n2 3 1\n2 3 3\n''') == '11'\nassert solution('''\n5 5 0 4\n0 1 1\n1 2 1\n2 3 1\n3 0 1\n2 4 1\n''') == 'infinity'\nassert solution('''\n3 3 1 2\n0 1 1\n1 0 1\n1 2 1\nSample Output 3:\n2\n''') == '2'\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 0 3\") == \"11\"\nassert solution(\"5 5 0 4\") == \"infinity\"\nassert solution(\"3 3 1 2\") == \"2\"\nassert solution(\"3 3 1 2\") == \"2\"\nassert solution(\"3 5 0 4\") == \"infinity\"\n"
    },
    {
        "number": 3015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == '11'\nassert solution('5 5 0 4\\n0 1 1\\n1 2 1\\n2 3 1\\n3 0 1\\n2 4 1') == 'infinity'\nassert solution('4 5 0 3\\n0 1 1\\n1 2 2\\n2 0 4\\n2 3 1\\n2 3 3') == 'infinity'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\n\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\n\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 1 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"4 3 1 1\") == \"12\"\nassert solution(\"5 3 1 1\") == \"18\"\nassert solution(\"6 3 1 1\") == \"0\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"12\""
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 2 1') == '6'\nassert solution('3 3 1 1') == '0'\nassert solution('3 2 2 3') == '18'\nassert solution('4 5 1 2 2') == '6'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''3 2 2 3\n1 1\n2 2 3\n''') == '18'\nassert solution('''3 1 2 3\n1 1\n2 2 3\n''') == '12'"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2 1 2 1\n2 1 2\n2 3 4\n''') == '6'\nassert solution('''\n3 3 1 1\n1 1\n2 2 3\n''') == '0'\nassert solution('''\n3 2 2 3\n1 1\n2 2 3\n''') == '18'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '0'\nassert solution('3') == '6'\nassert solution('4') == '0'\nassert solution('5') == '12'\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1 2\") == \"6\"\nassert solution(\"3 3 1 1\") == \"0\"\nassert solution(\"3 2 2 3\") == \"18\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"2 1 2\") == \"0\"\n"
    },
    {
        "number": 3016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2 1 2 1\") == \"6\"\nassert solution(\"3 3 1 1\") == \"18\"\nassert solution(\"3 2 2 3\") == \"0\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\nassert solution(\"12341234512345\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000000 1') == \"468559\"\nassert solution('1000000 5') == \"49401\"\nassert solution('1000000 16') == \"20\"\nassert solution('9000000000000000000 62') == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000000 1') == \"468559\"\nassert solution('1000000 5') == \"49401\"\nassert solution('1000000 16') == \"20\"\nassert solution('9000000000000000000 62') == \"1\"\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000000 1\") == \"468559\"\nassert solution(\"1000000 5\") == \"49401\"\nassert solution(\"1000000 16\") == \"20\"\nassert solution(\"9000000000000000000 62\") == \"1\"\nassert solution(\"9000000000000000000000000 62\") == \"2\""
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1000000 1\nSample Output 1:\n468559\n''') == '468559', f'''Solution is : {solution(''' + dedent('''\n    1000000 1\nSample Output 1:\n468559''')}'''\n\nassert solution('''1000000 5\nSample Output 2:\n49401\n''') == '49401', f'''Solution is : {solution(''' + dedent('''\n    1000000 5\nSample Output 2:\n49401''')}'''\n\nassert solution('''1000000 16\nSample Output 3:\n20\n''') == '20', f'''Solution is : {solution(''' + dedent('''\n    1000000 16\nSample Output 3:\n20''')}'''\n\nassert solution('''9000000000000000000 62\nSample Output 4:\n1''') == '1', f'''Solution is : {solution(''' + dedent('''\n    9000000000000000000 62\nSample Output 4:\n1''')}'''\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1000000 1\n''') == '468559'\nassert solution('''\n1000000 5\n''') == '49401'\nassert solution('''\n1000000 16\n''') == '20'\nassert solution('''\n9000000000000000000 62\n''') == '1'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1000000 1\nSample Output 1:\n468559''') == '468559'\nassert solution('''1000000 5\nSample Output 2:\n49401''') == '49401'\nassert solution('''1000000 16\nSample Output 3:\n20''') == '20'\nassert solution('''9000000000000000000 62\nSample Output 4:\n1''') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000000 1') == '468559'\nassert solution('1000000 5') == '49401'\nassert solution('1000000 16') == '20'\nassert solution('9000000000000000000 62') == '1'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 9\n5 4 1\n''') == '1', \"Smallest\"\nassert solution('''\n4 13\n2 2 2 2\n''') == '3', \"Smallest\"\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12', \"Smallest\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 9\\n\"\n    \"5 4 1\\n\"\n) == \"1\"\n\nassert solution(\n    \"4 13\\n\"\n    \"2 2 2 2\\n\"\n) == \"3\"\n\nassert solution(\n    \"18 90\\n\"\n    \"1 2 3 4 5 6 1 2 3 4 5 6\\n\"\n) == \"12\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3 9\n    5 4 1\n    ''') == '1'\n\nassert solution('''\n    4 13\n    2 2 2 2\n    ''') == '3'\n\nprint('Tests passed.')"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 9') == '1'\nassert solution('4 13') == '3'\nassert solution('18 90') == '12'\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n2 4\n4 1 2 1\n\"\"\",\n    \"1\"\n) == \"2\"\n\nassert solution(\n    \"\"\"\n5 10\n5 4 6 1 4 3 5\n\"\"\",\n    \"2\"\n) == \"5\"\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\n"
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 9\n5 4 1\n''') == '1', \"Simple\"\nassert solution('''\n4 13\n2 2 2 2\n''') == '3', \"Simple, with more dice\"\nassert solution('''\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n''') == '12', \"Multiple of the same dice\""
    },
    {
        "number": 3018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 9\") == \"1\"\nassert solution(\"4 13\") == \"3\"\nassert solution(\"18 90\") == \"12\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n''') == '0'\nassert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\nprint('YOUR CODE SUCCESSFULLY RUNS AND IT COMPLETED THE TESTS.')\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n''') == '0'\nassert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 7 8\n''') == '3'\nassert solution('''\n5\n2 3 4 5 8\n''') == '5'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1\n''') == '0'\n\nassert solution('''\n2\n5 4 5 8\n''') == '3'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n5 7 8\n''') == '5'\nassert solution('''\n3\n4 7 8\n''') == '0'\n"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '3'\nassert solution('5') == '5'"
    },
    {
        "number": 3019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0'\nassert solution('6') == '6'\nassert solution('10') == '0'\nassert solution('5') == '5'\nassert solution('12') == '6'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n12345678\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(6) == \"4\"\nassert solution(149) == \"17\"\nassert solution(123476544) == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('37') == '75'\nassert solution('100') == '10'\nassert solution('123476544') == '11112'\nassert solution('-1') == '-1'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '4'\nassert solution('149') == '17'\nassert solution('123476544') == '11112'\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"149\") == \"17\"\nassert solution(\"123476544\") == \"11112\"\n"
    },
    {
        "number": 3020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\".1234\") == \"1112\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"d 4\\nabc\\nbca\\ncab\\naca\\n\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\naca\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\\n\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"d\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nd 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''\nc 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\nassert solution('''\nf 2\ndea\ncfb\n''') == 'AMBIGUOUS'\nassert solution('''\ng 2\neea\nfad\n''') == 'IMPOSSIBLE'\nassert solution('''\nh 2\neea\nfad\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"d 4\\ncab\\ncda\\ccc\\badca\\n\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbca\\ncab\\aca\\n\") == \"IMPOSSIBLE\"\nassert solution(\"f 2\\ndea\\ncfb\\n\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('d 4\\n' +\n                'cab\\n' +\n                'cda\\n' +\n                'ccc\\n' +\n                'badca\\n') == 'adcb'\nassert solution('c 4\\n' +\n                'abc\\n' +\n                'bca\\n' +\n                'cab\\n' +\n                'aca\\n') == 'IMPOSSIBLE'\nassert solution('f 2\\n' +\n                'dea\\n' +\n                'cfb\\n') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('d 4\\ncab\\ncda\\nccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca') == 'IMPOSSIBLE'\nassert solution('f 2\\ndea\\ncfb') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('d 4\\ncab\\ncda\\ccc\\nbadca') == 'adcb'\nassert solution('c 4\\nabc\\nbca\\ncab\\naca') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"c 4\\nabc\\nbca\\ncab\\naca\") == \"adcb\"\nassert solution(\"c 4\\nabc\\nbadca\\ncab\\naca\") == \"IMPOSSIBLE\"\nassert solution(\"c 4\\nd\\nf\\nabc\\nbadca\\ncab\\naca\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''d 4\ncab\ncda\nccc\nbadca\n''') == 'adcb'\nassert solution('''c 4\nabc\nbca\ncab\naca\n''') == 'IMPOSSIBLE'\nassert solution('''f 2\ndea\ncfb\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 3 3\n10 20 0 0\n''') == '9'\nassert solution('''10 20 0 0\n100 20 543 12\n''') == '164'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == '4', 'Wrong answer'\nassert solution('10 20 0 0') == '10', 'Wrong answer'\nassert solution('100 20 543 12') == '164', 'Wrong answer'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\""
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '9'\nassert solution('1 1 1 1') == '9'\nassert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"9\"\nassert solution(stdin='''\n1 10 1 10\n2 2 2 2\n3 3 3 3\n4 4 4 4\n5 5 5 5\n6 6 6 6\n7 7 7 7\n8 8 8 8\n9 9 9 9\n10 10 10 10\n11 11 11 11\n12 12 12 12\n13 13 13 13\n14 14 14 14\n15 15 15 15\n16 16 16 16\n17 17 17 17\n18 18 18 18\n19 19 19 19\n20 20 20 20\n21 21 21 21\n22 22 22 22\n23 23 23 23\n24 24 24 24\n25 25 25 25\n26 26 26 26\n27 27 27 27\n28 28 28 28\n29 29 29 29\n30 30 30 30\n31 31 31 31\n32 32 32 32\n33 33 33 33\n34 34 34 34\n35 35 35 35\n36 36 36 36\n37 37 37 37\n38 38 38 38\n39 39 39 39\n40 40 40 40\n41 41 41 41\n42 42 42 42\n43 43 43 43\n44 44 44 44\n45 45 45 45\n46 46 46 46\n47 47 47 47\n48 48 48 48\n49 49 49 49\n50 50 50 50\n51 51 51 51\n52 52 52 52\n53 53 53 53\n54 54 54 54\n55 55 55 55\n56 56 56 56\n57 57 57 57\n58 58 58 58\n59 59 59 59\n60 60 60 60\n61 61 61 61\n62 62 62 62\n63 63 63 63\n64 64 64 64\n65 65 65 65\n66 66 66 66\n67 67 67 67\n68 68 68 68\n69 69 69 69\n70 70 70 70\n71 71 71 71\n72 72 72 72\n73 73 73 73\n74 74 74 74\n75 75 75 75\n76 76 76 76\n77 77 77 77\n78 78 78 78\n79 79 79 79\n80 80 80 80\n81 81 81 81\n82 82 82 82\n83 83 83 83\n84 84 84 84\n85 85 85 85\n86 86 86 86\n87 87 87 87\n88 88 88 88\n89 89 89 89\n90 90 90 90\n91 91 91 91\n92 92 92 92\n93 93 93 93\n94 94 94 94\n95 95 95 95\n96 96 96 96\n97 97 97 97\n98 98 98 98\n99 99 99 99\n100 100 100''') == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '9'\nassert solution('2 3 0') == '10'\nassert solution('10 20 0 0') == '10'\n\n\"\"\""
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3 3\") == \"9\"\nassert solution(\"10 20 0 0\") == \"10\"\nassert solution(\"100 20 543 12\") == \"164\"\n"
    },
    {
        "number": 3022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 3 3') == '9'\nassert solution('10 20 0 0') == '10'\nassert solution('100 20 543 12') == '164'\nprint('All tests passed')"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'yes'\n\nassert solution('''\n4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == 'yes'\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == 'no'\nassert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0''') == 'yes'\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0''') == 'no'\nassert solution('''3 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12''') == 'no'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3 3\\n0 1\\n1 0\\n-1 0\\n0 -1\\n-1 1 -2\\n-1 -1 2\\n0 -1 0\\n') == 'yes'\nassert solution('4 3 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\nSample Output 3:yes\\n') == 'no'\n\nassert solution('3 2 3\\n2 1\\n0 0\\n-1 -2\\n1 1 -2\\n3 6 12\\n') == 'yes'\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 3\") == \"yes\"\nassert solution(\"3 1 3\") == \"no\"\nassert solution(\"4 3 3\") == \"no\"\nassert solution(\"4 1 3\") == \"yes\"\nassert solution(\"4 2 3\") == \"no\""
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2 3\n0 1\n1 0\n-1 0\n0 -1\n-1 1 0\n2 1 0\n''') == 'no'\nassert solution('''\n4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2\n0 -1 0\n''') == 'yes'\nprint(solution('''\n3 2 3\n2 1\n0 0\n-1 -2\n1 1 -2\n3 6 12\n'''))\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3\") == \"yes\"\nassert solution(\"4 3 3\") == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2 3') == 'yes', \"Input 1\"\nassert solution('4 3 3') == 'no', \"Input 2\"\nassert solution('3 2 3') == 'yes', \"Input 3\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == 'yes'\nassert solution('4 3 3') == 'no'\nassert solution('3 4 3') == 'no'\nassert solution('5 4 3') == 'yes'\nassert solution('4 5 3') == 'no'"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 2 3\n0 1\n1 0\n-1 0\n0 -1''') == \"yes\"\nassert solution('''4 3 3\n0 1\n1 2\n-1 2\n0 -1\n-1 1 -2\n-1 -1 2''') == \"no\"\n"
    },
    {
        "number": 3023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 3') == 'no'\nassert solution('4 2 3') == 'yes'\nassert solution('4 3 3') == 'no'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == '1'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\nprint(solution(open(0).read()))\n\"\"\"\n\nfrom itertools import product\nfrom math import factorial\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12121131221') == '7'\nassert solution('652526') == '4'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('652526') == '4'\nassert solution('12121131221') == '7'\nassert solution('123456789') == '1'\n"
    },
    {
        "number": 3024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"652526\") == \"4\"\nassert solution(\"12121131221\") == \"7\"\nassert solution(\"123456789\") == \"1\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"24\"\nassert solution(\"6 8\") == \"800\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0'\n\nassert solution('''\n4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '24'\n\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\n\nassert solution('''\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '500'\n\nassert solution('''\n1\n1\n1\n1\n1\n''') == '0'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n1\n1 2\n2 3\n1 3''') == '0'\nassert solution('''4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6''') == '24'\nassert solution('''6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6''') == '800'\nassert solution('''10 10\n2 1\n1 2\n2 3\n2 4\n2 5\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 2\n1 3''') == '900'\nassert solution('''4 4\n24 10\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\nSample Output 3:\n1900\n''') == '1900'"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 4') == '24'\nassert solution('6 8') == '800'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"800\"\nprint('solution() finished successfully!')"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 4') == '24'\nassert solution('6 8') == '800'\nassert solution('5 5') == '15000'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1\n1 2\n2 3\n1 3\n''') == '0'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800'\nassert solution('''\n10 10\n1\n1 2\n2 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23\n22 24\n23 25\n24 26\n25 27\n26 28\n27 29\n28 30\n29 31\n30 32\n31 33\n32 34\n''') == '8872'\n"
    },
    {
        "number": 3025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1\n1 2\n2 3\n1 3\n''') == '0', 'First Test'\nassert solution('''\n3 3\n1\n1 2\n2 3\n1 3\n''') == '0', 'Second Test'\nassert solution('''\n6 8\n100 500 300 75\n1 3\n1 4\n3 6\n4 5\n3 5\n4 6\n2 5\n2 6\n''') == '800', 'Third Test'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 2 4') == '1 4', \"Wrong\"\nassert solution('5 1 2 3 4') == '1 2 3 4', \"Wrong\"\nassert solution('4 5 1 2 3') == '-1', \"Wrong\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n1 3 2 4\n''') == '1 4'\nassert solution('''\n5\n1 2 3 4 5\n''') == '1 2 3 4 5'\nassert solution('''\n4\n2 1 4 3\n''') == '-1'"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3 2 4') == '1 4'\nassert solution('4 4 4') == '-1'\n\n'''"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1 2 3\"\nassert solution(\"4\\n1 2 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '4'\nassert solution('4') == '-1'\nprint('You are all set!')\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1 2 3 4 5'\nassert solution('''4\n1 2 3 4''') == '1 2 3 4'\nassert solution('''5\n1 2 3 4 5''') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1 4', 'Wrong solution'\nassert solution('5') == '-1', 'Wrong solution'\nassert solution('6') == '-1', 'Wrong solution'\nassert solution('7') == '-1', 'Wrong solution'"
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\""
    },
    {
        "number": 3026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '1 2 3 4', 'Should be 1 2 3 4'\nassert solution('1 2 3 4 5') == '1 2 3 4 5', 'Should be 1 2 3 4 5'\nassert solution('2 1 3 4 5') == '-1', 'Should be -1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 6') == '5'\n\"\"\"\n\n\nclass StampedPaper(object):\n    def __init__(self, mark: str):\n        self.mark = mark\n        self.stamp = ''\n\n    def is_stamped_twice(self) -> bool:\n        if self.mark.count('#') >= 2:\n            return True\n        return False\n\n    def stamp_mark(self) -> str:\n        if self.is_stamped_twice():\n            return '.' * len(self.mark)\n        if self.mark.count('#') == 1:\n            return '#'\n        return '#' + '.' * (len(self.mark) - 2) + '#'\n\n    def __str__(self):\n        return self.stamp_mark()\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2\\n1\\n') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n.#####\n#####.\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '1'\nassert solution('1 4') == '4'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == '8'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5\\n.#######.\\n.#######.\\n.#######.\\n.#######.\\n.#######.\") == \"5\"\nassert solution(\"2 7\\n##.##.##.\\n##.##.##.\\n##.##.##.\\n##.##.##.\\n##.##.##.\\n##.##.##.\\n##.##.##.\\n.#######.\") == \"4\"\nassert solution(\"3 3\\n.######.\\n.######.\\n.######.\\n.######.\\n.######.\") == \"1\""
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\n.#.\n...\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 8\n.######.\n.######.\n.######.\n.######.''') == '1'\n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n4 8\n..#..#..\n.######.\n.######.\n..#..#..\n''') == '8'\nassert solution(\n'''\n3 3\n...\n.#.\n...\n''') == '1'\nassert solution(\n'''\n2 6\n.#####\n#####.\n''') == '5'\n'''\n<stdin>:\n...\n...\n.#####\n#####.\n>>> \n"
    },
    {
        "number": 3027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '4 8\\n'\n    '.######.\\n'\n    '.######.\\n'\n    '..#..#..\\n') == '8', solution(\n    '4 8\\n'\n    '.######.\\n'\n    '.######.\\n'\n    '..#..#..\\n')\nassert solution(\n    '3 3\\n'\n    '.#...\\n'\n    '.#...\\n'\n    '#...#\\n') == '1', solution(\n    '3 3\\n'\n    '.#...\\n'\n    '.#...\\n'\n    '#...#\\n')"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\") == \"6\"\nassert solution(\"3 3 3\\n3 1 3 3 1\\n1 3 3 3 2\") == \"13\"\nassert solution(\"3 2 2\\n1 2\\n2 1\") == \"4 2 6 1 9 7 5 5 7 1 2 3 3\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"13\""
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n') == '6'\nassert solution('3 3 3\\n3 1 3 3 1\\n') == '13'\nassert solution('3 2 2\\n1 2\\n2 1\\n1 2\\n') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\") == \"6\"\nassert solution(\"3 3 3\\n3 1 3 3 1\\n1 3 3 3 2\\n3 2 3 3 3\\n3 2 3 3 2\") == \"13\"\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 5') == '6'\nassert solution('3 3 3') == '13'\nassert solution('3 1 1') == '19'\nassert solution('1 1 2') == '1 2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '6'\n\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13'\n\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n') == '6\\n19 12 2 18 5 5\\n'\nassert solution('3 3 3\\n3 1 3 3 1\\n1 3 2 3\\n3 2 3\\n') == '13\\n4 2 6 1 9 7 5 5 7 1 2 3 3\\n'"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 5 5\\n2 1 1 1 2\\n5 3 4 4 3\\n4 3 3 3 2\\n3 1 3 3 1\\n\") == \"6\"\nassert solution(\"3 3 3\\n3 1 3 3 1\\n\") == \"13\"\nassert solution(\"3 2 2\\n1 2\\n2 1\\n\") == \"-1\"\n"
    },
    {
        "number": 3028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5 5\n2 1 1 1 2\n5 3 4 4 3\n4 3 3 3 2\n3 1 3 3 1\n''') == '19 12 2 18 5 5'\nassert solution('''\n3 3 3\n3 1 1\n1 3 2\n3 2 3\n''') == '13 4 2 6 1 9 7 5 5 7 1 2 3 3'\nassert solution('''\n3 2 2\n1 2\n2 1\n1 2\n''') == '-1'\nassert solution('''\n2 2\n1 2\n2 1\n''') == '-1'\n\n\"\"\"\n\nn, m, p = map(int, input().split())"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n1\\n4\\n3\\n6\\n1\\n2\\n3\") == \"2 1\"\nassert solution(\"4\\n1\\n3\\n4\\n2\\n6\\n3\\n5\") == \"4 1\"\nassert solution(\"4\\n1\\n3\\n4\\n2\\n6\\n3\\n5\\n4\\n3\") == \"2 4\"\nassert solution(\"10\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"7 3\""
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '1'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\nassert solution('''5\n4\n3\n2\n1\n0\n1\n2\n3\n4\n''') == '1 5'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '5 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 2'\nassert solution('2') == '1 1'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '1 2'\nassert solution('6') == '1 4'\nassert solution('4') == '3 3'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3\n3\n3\n3\n3\n1\n2\n3\n4\n''') == '1 5'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 1'\nassert solution('4') == '1 2'\nassert solution('3') == '1 2'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1 2'\nassert solution(input()) == '1'"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n3\\n3\\n3') == '1 1'\nassert solution('5\\n4\\n3\\n2\\n1') == '1 5'\nassert solution('4\\n3\\n3\\n2\\n1') == '0 0'\n"
    },
    {
        "number": 3029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5 1'\nassert solution('4') == '1 5'\nassert solution('3') == '1 5'\nassert solution('2') == '1 5'\nassert solution('1') == '1 5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n3 0\n3 1\n3 2\n3 3\n3 4''') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '1'\nassert solution('4') == '5'\nassert solution('6') == '5'"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1') == '1'\nassert solution('5\\n4 0') == '5'\nassert solution('5\\n3 1') == '1'\nassert solution('5\\n3 2') == '3'\nassert solution('5\\n3 3') == '1'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n1 0\n2 1\n''') == \"1\"\nassert solution('''\n5\n5 0\n5 1\n5 2\n5 3\n5 4\n''') == \"1\"\n'''\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == \"1\"\n\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == \"5\"\n\nassert solution('''\n6\n3 0\n1 1\n2 1\n1 3\n0 4\n5 1\n''') == \"5\"\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n3 0\n3 1\n3 2\n3 3\n3 4\n''') == '1'\nassert solution('''\n5\n4 0\n3 1\n2 2\n1 3\n0 4\n''') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '1'\nassert solution('5\\n4 0\\n') == '5'\nassert solution('5\\n4 0\\n3 1\\n2 1\\n1 3\\n0 4\\n') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n3 0\\n3 1\\n3 2\\n3 3\\n3 4\\n') == '1'\nassert solution('5\\n4 0\\n3 1\\n2 2\\n1 3\\n0 4\\n') == '5'\nassert solution('6\\n5 0\\n4 1\\n3 1\\n2 2\\n1 3\\n0 4\\n') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2') == '4\\n3\\n4\\n5\\n6\\n'\nassert solution('8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1') == '0\\n'\nassert solution('9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2') == '5\\n1\\n2\\n3\\n6\\n7\\n'"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"4\"\nassert solution(\"8\") == \"0\"\nassert solution(\"9\") == \"5\"\nassert solution(\"9\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n1 2 1\n2 3 2\n3 4 3\n4 5 2\n5 6 1\n6 7 3\n7 8 1\n8 9 1\n9 10 2\n''') == '5'\nassert solution('''\n10\n1 2 1\n2 3 1\n3 4 2\n4 5 2\n5 6 2\n6 7 2\n7 8 2\n8 9 2\n9 10 1\n''') == '1'\nassert solution('''\n10\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n''') == '0'\nassert solution('''\n2\n1\n3\n''') == '0'\nassert solution('''\n3\n1 2\n2 3\n3 4\n''') == '1'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('9') == '5'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == '4'\nassert solution('8') == '0'\nassert solution('8') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''8\n1 3 1\n2 3 1\n3 4 3\n4 5 4\n5 6 3\n6 7 2\n6 8 2\n''') == '4'\nassert solution('''8\n1 2 2\n1 3 1\n2 4 3\n2 7 1\n3 5 2\n5 6 2\n7 8 1\n''') == '0'\n"
    },
    {
        "number": 3031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 3 1\\n2 3 1\\n3 4 3\\n4 5 4\\n5 6 3\\n6 7 2\\n6 8 2\\n\") == \"4\"\nassert solution(\"8\\n1 2 2\\n1 3 1\\n2 4 3\\n2 7 1\\n3 5 2\\n5 6 2\\n7 8 1\\n\") == \"0\"\nassert solution(\"9\\n1 2 2\\n1 3 1\\n1 4 5\\n1 5 5\\n2 6 3\\n3 7 3\\n4 8 1\\n5 9 2\\n\") == \"5\"\nassert solution(\"\") == \"0\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nR10 V1 V2 V1 E\n''') == '30'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '5'\nassert solution('1 2') == '6'\nassert solution('1 2') == '30'\nprint('YOUR CODE IS CORRECT!')\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\nassert solution(\"\") == \"6\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\nV1 V2 V1 V1 V2\n''') == '5'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nV1 V1 V2 V1\n''') == '9'\nassert solution('''\n1 2\nV1 V2 V1 V1 V2\nR10 V1 V2 V1 E\n''') == '30'"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '5'\nassert solution('2 1') == '6'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n1 2\nR10 V1 V2 V1 E\n\"\"\") == \"30\"\nassert solution(\"\"\"\n1 5\nV1 V2 V3 V4 V5\nR10 V6 V7 V8 V9 E10\nR11 V10 V11 V12 V13 E14\nR12 V14 V15 V16 V17 E18\nR13 V18 V19 V20 V21 E22\nR14 V22 V23 V24 V25 E26\nR15 V25 V26 V27 V28 E28\nR16 V28 V29 V30 V31 E30\nR17 V31 V32 V33 V34 E34\nR18 V34 V35 V36 V37 E36\nR19 V37 V38 V39 V40 E38\nR20 V40 V41 V42 V43 E42\nR21 V43 V44 V45 V46 E44\nR22 V46 V47 V48 V49 E48\nR23 V48 V49 V50 V51 E50\nR24 V51 V52 V53 V54 E54\nR25 V54 V55 V56 V57 E56\nR26 V57 V58 V59 V60 E58\nR27 V60 V61 V62 V63 E62\nR28 V63 V64 V65 V66 E64\nR29 V66 V67 V68 V69 E68\nR30 V69 V70 V71 V72 E70\nR31 V72 V73 V74 V75 E74\nR32 V75 V76 V77 V78 E78\nR33 V78 V79 V80 V81 E80\nR34 V81 V82 V83 V84 E84\nR35 V84 V85 V86 V87 E86\nR36 V87 V88 V89 V90 E88\nR37 V90 V91 V92 V93 E92\nR38 V93 V94 V95 V96 E96\nR39 V96 V97 V98 V99 E98\nR40 V99 V100 V101 V102 E100\nR41 V102 V103 V104 V105 E104\nR42 V105 V106 V107 V108 E108\nR43 V108 V109 V110 V111 E110\nR44 V111 V112 V113 V114 E114\nR45 V114 V115 V116 V117 E116\nR46 V117 V118 V119 V120 E118\nR47 V120 V121 V122 V123 E122\nR48 V123 V124 V125 V126 E124\nR49 V126 V127 V128 V129 E127\nR50 V129 V130 V131 V132 E130\nR51 V132 V133 V134 V135 E134\nR52 V135 V136 V137 V138 E136\nR53 V138 V139 V140 V141 E139\nR54 V141 V142 V143 V144 E142\nR55 V144 V145 V146 V147 E145\nR56 V147 V148 V149 V150 E148\nR57 V150 V151 V152 V153 E151\nR58 V153 V154 V155 V156 E154\nR59 V156 V157 V158 V159 E157\nR60 V159 V160 V161 V162 E160\nR61 V162 V163 V164 V165 E163\nR62 V165 V166 V167 V168 E166\nR63 V168 V169 V170 V171 E169\nR64 V171 V172 V173 V174 E172\nR65 V174 V175 V176 V177 E175\nR66 V177 V178 V179 V180 E178\nR67 V180 V181 V182 V183 E181\nR68 V183 V184 V185 V186 E184\nR69 V186 V187 V188 V189 E187\nR70 V189 V190 V191 V192 E190\nR71 V192 V193 V194 V195 E193\nR72 V195 V196 V197 V198 E196\nR73 V198 V199 V200 V201 E199\nR74 V201 V202 V203 V204 E202\nR75 V204 V205 V206 V207 E205\nR76 V207 V208 V209 V210 E208\nR77 V210 V211 V212 V213 E211\nR78 V213 V214 V215 V216 E214\nR79 V216 V217 V218 V219 E217\nR80 V219 V220 V221 V222 E220\nR81 V222 V223 V224 V225 E223\nR82 V225 V226 V227 V228 E226\nR83 V228 V229 V230 V231 E229\nR84 V231 V232 V233 V234 E232\nR85 V234 V235 V236 V237 E235\nR86 V237 V238 V239 V240 E238\nR87 V240 V241 V242 V243 E241\nR88 V243 V244 V245 V246 E244\nR89 V246 V247 V248 V249 E247\nR90 V249 V250 V251 V252 E250\nR91 V252 V253 V254"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '5'\nassert solution('2 1') == '6'\nassert solution('1 2') == '5'\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1 2\nV1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"2 1\nV1 V2 V1 V1 V2\n\"\"\") == \"6\"\nassert solution(\"\"\"1 2\nR10 V1 V2 V1 E\n\"\"\") == \"30\"\n"
    },
    {
        "number": 3032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    1 2\n    V1 V2 V1 V1 V2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n    1 2\n    R10 V1 V2 V1 E\n\"\"\") == \"30\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 24\") == \"38\"\nassert solution(\"10 11\") == \"impossible\"\nassert solution(\"9 216\") == \"546\"\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 24') == '38'\nassert solution('10 11') == 'impossible'\nassert solution('9 216') == '546'\nassert solution('100 1000') == 'impossible'\n"
    },
    {
        "number": 3033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6') == 'impossible'\nassert solution('2 5') == 'impossible'\nassert solution('10 15') == 'impossible'\nassert solution('10 18') == '38'\nassert solution('10 21') == '38'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '20 60 2 1\\n'\n    '5 15 0.33333 30\\n'\n    '22 60 0.66666 70\\n'\n    '0 10\\n'\n    '1 2\\n'\n    'Sample Output 1:466.662\\n'\n    'Sample Input 2:3 4 2 1\\n'\n    '1 3 0.25 8\\n'\n    '2 4 0.66667 15\\n'\n    '1 2\\n'\n    'Sample Output 2:10.00005\\n'\n    'Sample Input 3:3 4 1 0\\n'\n    '0 2 0.25 8\\n'\n    'Sample Output 3:2.0'\n) == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''20 60 2 1\n5 15 0.3333\n22 60 0.6666\n0 10\n''') == '466.662', f\"Error on sample #1 {solution('''20 60 2 1\n5 15 0.3333\n22 60 0.6666\n0 10\n''')}\"\nassert solution('''20 60 1 2\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''') == '10.00005', f\"Error on sample #2 {solution('''20 60 1 2\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n''')}\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20 60 2 1\\n5 15 0.33333 30\\n22 60 0.66666 70\\n0 10') == '466.662'\nassert solution('3 4 2 1\\n1 3 0.25 8\\n2 4 0.66667 15\\n1 2\\n') == '10.00005'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('15 60 0.33333 30') == '10.00004'\nassert solution('22 60 0.66666 70') == '10.00003'\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\nassert solution(\"\"\"3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\""
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n\"\"\") == \"466.662\"\n\nassert solution(\"\"\"3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n\"\"\") == \"10.00005\"\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 2 1') == \"466.662\"\nassert solution('2 4 2 1') == \"10.00005\"\nprint(\"YOUR CODE IS CORRECT!\")\n\n'''\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('20 60 2 1') == '466.662'\nassert solution('3 4 2 1') == '10.00005'\nassert solution('10 1 1 0') == '1.0'\nprint('solution() is working.')\n"
    },
    {
        "number": 3034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"10.00005\"\nassert solution(\"1 2\") == \"2.0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2 1\") == \"2.5\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.5\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''3\nblue red 1.0\nred pink 1.5\nblue green 1.9\n''') == '1.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\nassert solution('''\n2\nblue red 1.0\nred pink 1.5\n''') == '1.000000000000000'\nassert solution('''\n3\nblue red 1.0\nred pink 1.5\n''') == '1.000000000000000'\nassert solution('''\n4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.5\"\nassert solution(\"2\") == \"0.000000000000000\"\nassert solution(\"4\") == \"10.000000000000000\"\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n4\nblue red 1.0\nred pink 1.5\ngreen yellow 1.9\nblue green 1.9\n''') == '10.000000000000000'\nassert solution(\n'''\n4\nred blue 1.0\nblue red 1.5\ngreen yellow 1.9\norange pink 1.9\n''') == '0.000000000000000'\nassert solution(\n'''\n3\nred pink 1.0\nblue red 1.0\nblue red 1.5\n''') == '0.000000000000000'\nassert solution(\n'''\n2\nblue red 1.0\nred pink 1.5\n''') == '0.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\nblue red 1.0\nred pink 1.5\n''') == '1.500000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\nblue pink 1.0\nred pink 1.5\nblue red 1.0''') == '1.500000000000000'\nassert solution('''2\nblue red 1.0\nred pink 1.5''') == '0.000000000000000'\nassert solution('''4\norange pink 1.9\nyellow orange 1.9\ngreen yellow 1.9\nblue green 1.9''') == '10.000000000000000'\n"
    },
    {
        "number": 3035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0.000000000000000'\nassert solution('2') == '0.000000000000000'\nassert solution('3') == '1.000000000000000'\nassert solution('4') == '10.000000000000000'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '0'\nassert solution('''\n4 1 1 1 1\n1 2 3\n2 3 4\n3 4 5\n1 6\n''') == 'too many'\n\nstdin = '''\n5 1 1 1 1\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '0'\nassert solution('''\n5 1 1 1 1\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == 'too many'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"180\""
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\n\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n''') == '22'\n\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 2:\n0\n''') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2 2 1 1\n3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3''') == '22'\nassert solution('''4 2 2 1 1\n3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3''') == '0'\nassert solution('''5 1 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 4:\n60\n\n''') == '180'"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == '0'\nprint('all tests passed')\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('2 3 1 5 3 2') == '22'\nassert solution('2 1 2') == 'too many'\nassert solution('1 1') == 'too many'\nassert solution('1 2') == 'too many'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('3 1 2') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 1 1 0') == '180'\nassert solution('6 1 1 1 0') == '180'\nassert solution('3 2 2 1 1') == '22'\nassert solution('2 3 2') == '0'\nassert solution('5 5 5') == '0'\n"
    },
    {
        "number": 3036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\n''') == '180'\nassert solution('''\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\n''') == '22'\nassert solution('''\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\n''') == '0'"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '20 20'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n') == '20 20'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 4 5\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 8 5\n........\n...#....\n########\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3 2\\n...\\n.#.\\n...\\nup 2\\nright 2\\n\") == \"17 17\"\nassert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"17 17\"\nassert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"20 20\"\nassert solution(\"6 8 5\\n........\\n...#....\\n########\\n#..#...#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"17 17\""
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '-1 -1'\nassert solution('6 8 5') == '20 20'\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 8 5\\n...\") == \"20 20\"\nassert solution(\"6 8 5\\n#..#..#\\n#..#####\\n#.......\\nup 3\\nright 7\\ndown 2\\nleft 4\\nup 3\\n\") == \"17 17\"\n"
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2') == \"17 17\"\nassert solution('6 8 5') == \"20 20\"\nassert solution('6 8 5') == \"-1 -1\""
    },
    {
        "number": 3037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6 8 5') == '20 20'\nassert solution('6 8 5') == '17 17'\nassert solution('3 3 2') == '-1 -1'\nprint('all tests passed')"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'impossible'\nassert solution('2') == '310'\nassert solution('1') == 'impossible'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"3\") == \"300\"\nassert solution(\"5\") == \"impossible\""
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '310'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('99') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"300\"\nassert solution(\"4\") == \"impossible\"\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n\") == \"impossible\"\nassert solution(\"3\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n\") == \"88\"\nassert solution(\"0\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n\") == \"impossible\""
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n2 40 65\\n2 100 150\\n2 300 320\\n') == '300'\nassert solution('2\\n2\\n10 5\\n20 3\\n1 20 10\\n') == '1'\nassert solution('3\\n2\\n10 5\\n20 3\\n1 20 10\\n') == 'impossible'\nassert solution('9\\n2\\n10 5\\n20 3\\n1 20 10\\n') == 'impossible'\nassert solution('6\\n2\\n10 5\\n20 3\\n1 20 10\\n') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '300'\nassert solution('3') == '88'"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\nassert solution('20\\n3\\n2 20 35\\n2 88 200') == '88'\nassert solution('70\\n3\\n2 40 65\\n2 100 150\\n2 300 320') == 'impossible'\n"
    },
    {
        "number": 3038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3\n2 40 65\n2 100 150\n2 300 320\n''') == '300'\nassert solution('''7\n3\n2 40 65\n2 100 150\n2 300 320\n2 300 320\n''') == 'impossible'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''......\n......\n######\n......\n......\n......\n''') == 'cannot fold'\nassert solution('''......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"cannot fold\"\nassert solution(input(2)) == \"can fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('..##..\\n...#..\\n..##..\\n...#..\\n......\\n......') == 'cannot fold'\nassert solution('......\\n......\\n......\\n......\\n......\\n......') == 'can fold'\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('......') == 'cannot fold'\nassert solution('...#...') == 'can fold'\nprint(solution('''......\n...#..\n..##..\n...#..\n......'''))"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('......') == 'cannot fold'\nassert solution('...#..') == 'can fold'\nassert solution('..##..') == 'can fold'\nassert solution('#.....') == 'cannot fold'"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n......\n......\n######\n......\n......\n......\n''') == \"cannot fold\", \"First\"\nassert solution('''\n......\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"......\\n......\\n######\") == \"can fold\"\nassert solution(\"......\\n#.....\\n......\") == \"cannot fold\"\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''....#\n"
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('.....\\n##..\\n##..\\n##..\\n##..\\n') == \"can fold\"\nassert solution('.....\\n#..#\\n#..#\\n#..#\\n#..#\\n') == \"cannot fold\""
    },
    {
        "number": 3039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''.....\n.....\n##...\n##..\n##.#\n.....''') == 'cannot fold'\n\nassert solution(\n    '''.......\n.....#.\n##.##.##\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(open(\"input.txt\").read()) == \"aaa\"\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('abcefgabc') == 'abc', \"Wrong answer\"\nassert solution('abcbabcba') == 'abcba', \"Wrong answer\"\nassert solution('aaaa') == 'aaa', \"Wrong answer\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abcefgabc') == 'abc', \"Example #1: abc\"\nassert solution('abcbabcba') == 'abcba', \"Example #2: abcba\"\nassert solution('aaaa') == 'aaa', \"Example #3: aaa\""
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"aaa\"\nassert solution(sys.stdin.read()) == \"abcba\"\nassert solution(sys.stdin.read()) == \"abc\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abcefgabc\") == \"abc\"\nassert solution(\"abcbabcba\") == \"abcba\"\nassert solution(\"aaaa\") == \"aaa\"\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abcefgabc') == 'abc'\nassert solution('abcbabcba') == 'abcba'\nassert solution('aaaa') == 'aaa'"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('aab') == ''\nassert solution('aaba') == 'a'\n"
    },
    {
        "number": 3040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\nInput:\nabcefgabc\n\nOutput:\nabc\n\nInput:\nabcbabcba\n\nOutput:\nabcba\n\nInput:\naaaa\n\nOutput:\naaa\n''') == 'abcba'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\nassert solution('2') == '6'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4\"\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 4\\n2 5\\n0 15\\n') == '4'\nassert solution('3\\n1 4\\n2 10005\\n0 15\\n') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 4\n2 5\n3 6''') == '4'\nassert solution('''2 1\n2 5\n3 6''') == '6'"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 4\n2 5\n''') == '4'\n\nassert solution('''\n2\n1 4\n2 5\n''') == '6'\n\nassert solution('''\n3\n1 4\n2 10\n0 15\n''') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 4\n2 5\n0 15''') == '4'\nassert solution('''2 10005\n1 10\n0 15''') == '6'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '4'\nassert solution('3\\n2 4\\n2 10005') == '6'\nassert solution('1 2\\n2 4') == '4'\nassert solution('2 10\\n0 15') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('1 4') == '4'\nassert solution('2 5') == '6'\nassert solution('0 15') == '4'\n"
    },
    {
        "number": 3041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 4\n2 5\n0 15\n''') == '4'\n\nassert solution('''\n2\n1 4\n2 5\n0 15\n''') == '6'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"7 7 7\") == \"3\"\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '0'\nassert solution('7') == '1'\nassert solution('8') == '1'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7\\n2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3\\n7 7 7\") == \"3\"\nassert solution(\"5\\n1 2 3 2 1\") == \"0\""
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '0'\nassert solution('10') == '9'\nassert solution('1000000') == '19'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 2 1\") == \"3\", 'test 1 failed'\nassert solution(\"7 2 3 4 4 8 12 24\") == \"2\", 'test 2 failed'\nassert solution(\"3 7 7 7\") == \"0\", 'test 3 failed'\nassert solution(\"5 1 2 3 2 1\") == \"0\", 'test 4 failed'"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3 4 4 8 12 24\") == \"2\"\nassert solution(\"3 7 7 7\") == \"3\"\nassert solution(\"5 1 2 3 2 1\") == \"0\"\nprint('All test cases passed')\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\nassert solution('5\\n1 2 3 2 1') == '0'\n"
    },
    {
        "number": 3042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7\\n2 3 4 4 8 12 24') == '2'\nassert solution('3\\n7 7 7') == '3'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5 4\") == \"3\", \"Test 1 Failed\"\nassert solution(\"1 2 1\") == \"1\", \"Test 2 Failed\"\nassert solution(\"2 2 10\") == \"1\", \"Test 3 Failed\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 5 4\nS#.F.\n.MFMG\n''') == '3'\nassert solution('''\n2 2 10\nS#\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == -1\nassert solution(\"2 5 4\\nS#.F.\\n.MFMG\\n\") == 3\nassert solution(\"1 2 1\\nGS\\n\") == 1"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG') == '3'\nassert solution('1 2 1\\nGS') == '1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5 4\\nS#.F.\\n.MFMG\") == \"3\"\nassert solution(\"1 2 1\\nGS\\n\") == \"1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5 4\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 2 10\") == \"1\"\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5 4\\nS#.F.\\n.MFMG\\n') == '3'\nassert solution('1 2 1\\nGS\\n') == '1'\nassert solution('3 3 10\\nS#\\n#G\\n') == '-1'"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5 4') == '3'\nassert solution('1 2 1') == '1'\nassert solution('2 2 10') == '-1'\n"
    },
    {
        "number": 3043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 6 1\nS#.F.\n.MFMG\n\"\"\") == \"3\"\nassert solution(\"\"\"\n2 2 3\nS#.\n.MF\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input(\"\")) == \"1\"\n\"\"\"\n\ninput = lambda: stdin.readline().rstrip()"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 2\nR\nR\nR\n''') == '1'\nassert solution('''3 7\n.S.\n.G.\n.S.\n''') == '1'\nassert solution('''3 7\n.#.\n.G.\n.#.\n''') == '2'\nassert solution('''3 7\n.S.\n.G.\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"DRRDD\") == \"1\"\nassert solution(\"R\") == \"1\"\nassert solution(\"DRRDRRDD\") == \"2\"\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''3 7\n.......\n.G.#.S.\n.......\nLDLDLLDR\n''') == '1'\nassert solution('''3 7\n.#.....\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\nassert solution('''3 7\n.......\n.G.##S.\n.......\nLDLDLLDR\n''') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"1\"\nprint(solution(input_))\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '1'\nassert solution('3\\n4\\n5') == '2'\nassert solution('1\\n1\\n1') == '1'\nassert solution('5\\n3\\n1') == '1'\nassert solution('2\\n2\\n2') == '0'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\nS..\\n.#.\\nG..\\n') == '1'\nassert solution('3 3\\nS..\\n.#.\\n..G\\nDRRDD') == '1'\nassert solution('3 7\\nS...\\n.G.#\\n.##.\\nLDLDLLDR') == '2'\nprint('All tests passed.')\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 7') == '1'\nassert solution('10 1') == '1'\nassert solution('10 10') == '0'\nassert solution('10 10 11') == '2'\n"
    },
    {
        "number": 3044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1'\nassert solution('3 7') == '1'\nassert solution('3 7') == '2'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n999999 0 1000\n999900 950 451\n987654 123 13222\n100 0 101\n0 200 199\n''') == '1000200 799'\nassert solution('''\n1\n999999 0 1000\n0 200 199\n''') == '999999 0 1000'\nassert solution('''\n2\n100 0 101\n0 200 199\n''') == 'impossible'\nassert solution('''\n2\n999999 0 100\n0 200 199\n''') == 'impossible'\nassert solution('''\n1\n999999 0 1000\n0 200 199\n''') == '1000200 799'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\nassert solution(\"\"\"\n2\n100 0 101\n0 200 199\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1\n0 0 1\n\"\"\") == \"1 0 0\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n\"\"\") == \"1000200 799\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n\nassert solution('''\n2\n100 0 101\n0 200 199\n''') == 'uncertain'\nassert solution('''\n3\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == 'impossible'"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1000200 799\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"100001 0\""
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1000300 200'\nassert solution('2') == 'uncertain'\nassert solution('3') == 'impossible'\n\"\"\"\n\nimport math\nimport itertools\nimport functools\nfrom collections import defaultdict\nfrom typing import Dict"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10 0 10\\n99 99 99\") == \"999100 799\"\nassert solution(\"2\\n100 0 101\\n0 200 199\\n\") == \"999100 799\"\nassert solution(\"2\\n1 0 1\\n0 200 199\\n\") == \"999100 799\"\nassert solution(\"3\\n999999 0 1000\\n999900 950 451\\n987654 123 13222\\n\") == \"999100 799\"\nassert solution(\"4\\n1000 0 1000\\n0 200 199\\n100 0 100\\n987654 123 13222\\n\") == \"999100 799\"\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n999999 0 1000') == '1000200 799'\nassert solution('1\\n987654 123 13222') == 'impossible'\n"
    },
    {
        "number": 3045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n999999 0 1000\n999900 950 451\n987654 123 13222\n''') == '1000200 799'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 7\n9 8\n14 17\n19 18\n''') == '2'\nassert solution('''\n2\n4 7\n14 17\n19 18\n''') == '1'\n'''\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '1'\nassert solution('2') == '2'\nassert solution('2') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '2'\nassert solution('2') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n6"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n4 7\n9 8\n14 17\n19 18\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n4 7\n9 8\n14 17\n19 18\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n3 4\n5 6\n7 8\n\"\"\") == \"syntax error\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 7\n9 8\n14 17\n19 18\n''') == \"2 1\"\nassert solution('''\n4 7\n14 17\n9 8\n19 18\n''') == \"1 2\"\nassert solution('''\n4 7\n9 8\n17 18\n19 14\n''') == \"2 1\"\nassert solution('''\n4 7\n9 8\n19 18\n14 17\n''') == \"1 2\"\nassert solution('''\n4 7\n14 17\n9 8\n19 18\n''') == \"1 2\"\n''') == \"\"\n"
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n4\\n5') == '1'\nassert solution('2\\n3\\n4\\n5') =='syntax error'\nassert solution('3\\n1\\n4\\n5') == '1'\nassert solution('4\\n1\\n3\\n5') =='syntax error'\nassert solution('5\\n1\\n4\\n3') =='syntax error'\n\"\"\""
    },
    {
        "number": 3046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '2\\n1'\n\nassert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') == '1\\n2'\n\nassert solution('''\n2\n4 7\n9 8\n14 17\n19 18\n''') =='syntax error'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"_ 90 22 _ 6 _ _ _ _ 81\\n\"\n    \"_ 40 _ _ _ 12 60 _ 90 _\\n\"\n) == \"1\"\n\nassert solution(\n    \"85 55 _ 99 51 _ _ _ _ _\\n\"\n    \"_ _ _ _ _ _ _ 85 63 153\\n\"\n) == \"8640\"\n\nassert solution(\n    \"160 _ _ 136 _ _ _ _ _ 170\\n\"\n    \"_ _ _ _ 120 _ _ 144 _ _\\n\"\n) == \"8640\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"_ 10 23 _ 19 _ _ _ _ _\\n_ 10 20 _ _ _ _ _ _ _\\n\") == \"1\"\nassert solution(\"_ 0 85 55 _ 99 51 _ _ _ _\\n_ 0 _ _ _ _ _ 85 63 153\\n_ 0 1 120 136 _ _ _ _ _\\n_ 0 1 2 _ _ _ _ _ _ _\\n\") == \"8640\""
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n90 22 6\n40\n''') == '1'\nassert solution('''\n85 55\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_\n_"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '1'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ 80 63 153\\n') == '8640'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _ _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81') == '1'\nassert solution('_ 40 _ _ _ 12 60 _ 90 _') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ 170') == '8640'\nassert solution('160 _ _ 136 _ _ _ _ _ 170') == '8640'"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''_ 90 22 _ 6 _ _ _ _ 81\n_ 40 _ _ _ 12 60 _ 90 _\n''') == '1'\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\") == \"1\"\nassert solution(\"_ 40 _ _ _ 12 60 _ 90 _\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ 170\") == \"8640\""
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n\") == \"1\"\nassert solution(\"85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n\") == \"1\"\nassert solution(\"160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _ _ _\\n\") == \"8640\"\n"
    },
    {
        "number": 3047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('_ 90 22 _ 6 _ _ _ 81\\n_ 40 _ _ _ 12 60 _ 90 _\\n') == '1'\nassert solution('85 55 _ 99 51 _ _ _ _ _\\n_ _ _ _ _ _ _ 85 63 153\\n') == '8640'\nassert solution('160 _ _ 136 _ _ _ _ _ 170\\n_ _ _ _ _ _ _ _ _ _\\n') =='many'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(samples[0]) == '2'\nassert solution(samples[1]) == '8'\nassert solution(samples[2]) == '24'"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"24\""
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n1 3\n''') == '2'\nassert solution('''\n5\n2 1\n1 5\n3 1\n4 3\n''') == '8'\nassert solution('''\n10\n2 1\n1 5\n3 1\n4 3\n5 6\n7 8\n5 9\n5 10\n''') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"8\"\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"8\"\nassert solution([6, 2, 3, 5, 1, 1, 2, 3, 1, 1, 4, 3, 1, 1, 1, 2, 3, 2, 3, 4, 1, 1, 2, 4, 1, 1, 4, 3, 1, 1, 4, 3, 1, 1, 3, 5, 1, 1, 3, 5, 2, 3, 2, 1, 1, 4, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1\\n1 5\\n3 1\\n4 3\\n') == '8'\nassert solution('10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\\n') == '24'\nassert solution('10\\n1 2\\n2 3\\n2 4\\n1 5\\n3 6\\n2 7\\n7 8\\n5 9\\n5 10\\n') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1\n1 5\n3 1\n4 3\nSample Output 2:\n8\n''') == '24'\nassert solution('''10\n2 1\n1 5\n3 1\n4 3\nSample Output 2:\n24\n''') == '24'\nassert solution('''5\n2 1\n1 5\n3 1\n4 3\nSample Output 2:\n8\n''') == '24'\nassert solution('''10\n2 1\n1 5\n3 1\n4 3\nSample Output 2:\n24\n''') == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '24'\n"
    },
    {
        "number": 3048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '8'\nassert solution('10') == '24'"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"0\"\nassert solution(\"apples\") == \"0\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\nassert solution('oranges') == '0'\nprint(solution(input))"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('moot') == 't'\nassert solution('mootmootmoot') == 'o'\nassert solution('tootmootmoot') == '2'\nassert solution('ttttttttttttt') == 't'\nassert solution('toomooooootmoot') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('%s' % stdin) == '%s' % solution.__doc__\nprint(solution())\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n'''\n\ninput()\ninput()\nprint(solution(input()))\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1st\n2nd\n3rd\n''') == '1st'\nassert solution('''1st\n2nd\n3rd\n''') == '0'\nassert solution('''aaaaaaa\nab\ncd\ne\n''') == '0'\nassert solution('''1st\n2nd\n3rd\n4th\n5th\n''') == '2'\nassert solution('''1st\n2nd\n3rd\n4th\n5th\n''') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1', 'a') == 'a'\nassert solution('2', 'b') == 'a'\nassert solution('3', 'c') == 'a'\nassert solution('4', 'd') == 'b'\nassert solution('5', 'e') == 'c'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"secretmessage\") == \"essa\"\nassert solution(\"boot\") == \"3\"\nassert solution(\"treetreetreetree\") == \"0\"\nassert solution(\"apples\") == \"0\"\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '3'\nassert solution('oranges') == '0'\n"
    },
    {
        "number": 3049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('secretmessage') == 'essa'\nassert solution('boot') == '3'\nassert solution('treetreetreetree') == '0'\nassert solution('apples') == '0'\n\n'''\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('<<<') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\nassert solution('1\\n>^<^\\n######\\n#.#..#\\n#....#\\n#..R.#\\n#....#\\n######\\n') == '2'\nassert solution('3\\n<.^.\\n###.\\n#R#.\\n#...\\n##.#') == '4'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''>^<^\n######\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('1') == '1'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '1'\nassert solution('4') == '4'\nassert solution('<<<') == '2'\nassert solution('####') == '1'"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\nassert solution('<<<') == '4'\nassert solution('<><') == '1'\nassert solution('<><><><>') == '1'\n"
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n^<\\n>^<\") == \"1\"\nassert solution(\"4\\nv<\\n>^<\") == \"4\"\nassert solution(\"4\\n^<\\n>^<\\n^>\") == \"2\"\nassert solution(\"4\\n^<\\n>^<\\n>^<\") == \"3\""
    },
    {
        "number": 3050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''>^<^\n######\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nprint(solution(input()))\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n2 3 0 2 9 2 3 0') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0') == '6'\nassert solution('3\\n3 5 50 55 8 1 -16 2') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"11\"\nassert solution(\"5\") == \"15\""
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '10'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n2 3 0 2 9 2 3 0\\n1 6 1 4 6 3 -1 -2') == '3'\nassert solution('3\\n4 0 0 10 10 1 15 0\\n3 5 50 55 8 1 -16 2\\n3 10 7 10 4 1 8 -1') == '6'\nassert solution('2\\n7 0 0 20 10 3 0 10\\n10 1 0 2 5 2 2 7') == '11'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '7'"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 3 0 2 9 2 3 0\n1 6 1 4 6 3 -1 -2\n''') == '3'\nassert solution('''\n3\n4 0 0 10 10 1 15 0\n3 5 50 55 8 1 -16 2\n3 10 7 10 4 1 8 -1\n''') == '6'\nprint('all tests passed')"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '11'\nassert solution('5') == '15'"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\") == \"163.5274740179\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\") == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '163.5274740179'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3') == '163.5274740179'\nassert solution('0.0 1.0 4.0 1.0\\n1') == '3.7320508076'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3') == '168.7916512460'\nassert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0\\n') == '163.5274740179'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0\\n3') == \"163.5274740179\"\nassert solution('60.0 0.0 50.0 170.0\\n3') == \"168.7916512460\"\nassert solution('60.0 0.0 50.0 170.0\\n3') == \"163.5274740179\"\nassert solution('60.0 0.0 50.0 170.0\\n3') == \"168.7916512460\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\") == \"168.7916512460\"\nassert solution(\"40.0 0.0 0.0 0.0\") == \"163.5274740179\"\nassert solution(\"5.0 20.0 5.0 170.0\") == \"163.5274740179\"\nassert solution(\"95.0 0.0 95.0 80.0\") == \"163.5274740179\"\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('60.0 0.0 50.0 170.0') == '168.7916512460'\nassert solution('40.0 0.0 0.0 0.0') == '163.5274740179'\nassert solution('5.0 20.0 5.0 170.0') == '163.5274740179'"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('60.0 0.0 50.0 170.0\\n3\\n40.0 0.0 0.0 0.0\\n5.0 20.0 5.0 170.0\\n95.0 0.0 95.0 100.0') == '168.7916512460'\nassert solution('0.0 1.0 4.0 1.0\\n1\\n0.0 0.0 4.0 0.0') == '3.7320508076'\n"
    },
    {
        "number": 3052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"60.0 0.0 50.0 170.0\\n3\") == \"168.7916512460\"\nassert solution(\"60.0 0.0 50.0 170.0\\n3\") == \"163.5274740179\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\nassert solution('8 9 1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 3 5\n6 2 2\n8 6 8''') == 'canterlot'\nassert solution('''4 3 4\n7 5 6\n8 5 6\n2 5 2\n1 2 1\n3 1 3''') =='madam'\nassert solution('''9 8 1\n6 2 2\n8 6 8''') == 'impossible'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() in [\"canterlot\", \"madam\"]\n\"\"\"\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6 5 3\nrarity\n''') == 'rarity'\nassert solution('''9 8 1\ncanterlot\n''') == 'canterlot'\nassert solution('''5 3 5\nmadam\n''') =='madam'"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n\"\"\"\n\nN,K,P = map(int, input().split())"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 5 3\n''') == 'rarity'\nassert solution('''\n9 8 1\n''') == 'canterlot'\nassert solution('''\n5 3 5\n''') =='madam'\n'''\n\n\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nn, k, p = map(int, input().split())"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 5 3') == 'rarity'\nassert solution('9 8 1') == 'canterlot'\nassert solution('5 3 5') =='madam'\n"
    },
    {
        "number": 3053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 5 3\") == \"rarity\"\nassert solution(\"9 8 1\") == \"canterlot\"\nassert solution(\"5 3 5\") == \"madam\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Blue Ridge mountain road.') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Leaves, glowing in autumn sun, fall in Virginia.'\n\"\"\""
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('blue ridge mountain road') == 'blue ridge mountain road'\nassert solution('who would know if we had too few syllables') == 'who would know if we had too few syllables'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!'\n\n\"\"\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- \\nmotivation high \\nProgrammers have fun!'\n\"\"\"\nimport re"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International contest- motivation high Programmers have fun!'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('blue Ridge mountain road. leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road. \\nLeaves, glowing in autumn sun, \\nfall in Virginia.'\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"blue ridge mountain road. leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"We did not say goodnight, and we shall have no night.\") == \"We did not say goodnight, and we shall have no night.\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\\n\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\\n\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!.\\n\") == \"International contest-\\nmotivation high Programmers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"Blue Ridge mountain road. Leaves, glowing in autumn sun, fall in Virginia.\") == \"Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.\"\nassert solution(\"Who would know if we had too few syllables?\") == \"Who would know if we had too few syllables?\"\nassert solution(\"International contest- motivation high Programmers have fun!.\\n\") == \"International\\ncontest-\\nmotivation high\\nProgrammers have fun!\"\n"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('Blue Ridge mountain road') == 'Blue Ridge mountain road.'\nassert solution('Leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('Who would know if we had too few syllables?') == 'Who would know if we had too few syllables?\\n'\nassert solution('International contest- motivation high Programmers have fun!.\\n') == 'International\\ncontest- motivation high\\nProgrammers have fun!.'\nassert solution('The quick brown fox jumped over the lazy dog.') == 'The quick brown fox jumped over the lazy dog.'"
    },
    {
        "number": 3054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('blue ridge mountain road. leaves, glowing in autumn sun, fall in Virginia.') == 'Blue Ridge mountain road.\\nLeaves, glowing in autumn sun,\\nfall in Virginia.'\nassert solution('who would know if we had too few syllables?') == 'who would know if we had too few syllables?'\nassert solution('International contest- motivation high Programmers have fun!.') == 'International\\ncouncil- motivation high\\nProgrammers have fun!'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Thore is awesome\"\nassert solution(\"2\") == \"Thore sucks\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\nThoreTiemann\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\nassert solution('''\n2\nThoreHusfeldt\nJohanSannemo\n''') == 'Thore is awesome'\nassert solution('''\n2\nThoreHusfeldt\nThoreTiemann\n''') == 'Thore sucks'\nassert solution('''\n2\nThoreHusfeldt\nJohanSannemo\nThoreTiemann\n''') == 'Thore sucks'\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nThoreTiemann\nThoreHusfeldt\n\"\"\") == \"ThoreH\"\nassert solution(\"\"\"\nThoreHusfeldter\nThoreHusfeldt\n\"\"\") == \"Thore sucks\"\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Thore'\nassert solution('2') == 'Thore sucks'\nassert solution('3') == 'Thore is awesome'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'Thore is awesome'\nassert solution('2') == 'Thore sucks'\nassert solution('1') == 'Thore'\nassert solution('1') == 'Thore'\n\nfrom itertools import combinations\n\nclass Solution:\n    def __init__(self):\n        self.best = None\n        self.prefix = None\n\n    def solution(self, stdin: str) -> str:\n        # 2\n        # ThoreTiemann\n        # ThoreHusfeldt\n        # ThoreHusfeldt is awesome\n        # ThoreHusfeldt sucks\n        # 1\n        # ThoreHusfeldt\n        # ThoreHusfeld is awesome\n        # ThoreHusfeld sucks\n        names = []\n        for i in range(len(stdin)):\n            if stdin[i]!= '\\n':\n                names.append(stdin[i])\n            else:\n                names.append('\\n')\n        names = ''.join(names)\n        prefixes = list(map(lambda x: ''.join(x), combinations(names, 4)))\n        for p in prefixes:\n            if not self.best or p in self.best:\n                continue\n            if not self.prefix or p.startswith(self.prefix):\n                self.prefix = p\n                self.best = p\n        if not self.best:\n            return 'Thore sucks'\n        return self.best"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nThoreTiemann\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldt\") == \"ThoreH\"\nassert solution(\"2\\nThoreHusfeldter\") == \"Thore sucks\"\nassert solution(\"2\\nThoreHusfeldter2\") == \"Thore sucks\""
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\nThoreHusfeldt\\nThoreHusfeldt\\nThoreHusfeldt\\n\") == \"Thore sucks\"\nassert solution(\"3\\nThoreHusfeldt\\nThoreHusfeldt\\nJohanSannemo\\n\") == \"ThoreHusfeldt\""
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'\nassert solution('''\n2\nThoreHusfeldt\nJohanSannemo\n''') == 'Thore is awesome'\nassert solution('''\n2\nThoreHusfeldt\nThoreHusfeldt\n''') == 'Thore sucks'"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\nThoreTiemann\\nThoreHusfeldt\\n\") == \"ThoreHusfeldt\"\nassert solution(\"2\\nThoreHusfeldter\\nThoreHusfeldt\\n\") == \"ThoreHusfeldt\"\nassert solution(\"2\\nThoreHusfeldt\\nJohanSannemo\\n\") == \"ThoreHusfeldt\"\nprint('Done')\n"
    },
    {
        "number": 3055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''ThoreTiemann\nThoreHusfeldt\nThoreHusfeldt''') == 'ThoreHusfeldt'\nassert solution('''ThoreTiemann\nThoreHusfeldt\nJohanSannemo\nThoreHusfeldt''') == 'ThoreHusfeldt'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('L*R') == '25'\nassert solution('P*P') == '6'\nassert solution('**') == '33'\nassert solution('*') == '0'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nP*P\nL*R\nR*P\nL*R\nR*P\nR*P\nP*P\n''') == '6'\nassert solution('''\n**\n**\n*P\n**\n**\n''') == '33'\nassert solution('''\nP*P\nL*R\nR*P\nL*R\nR*P\nR*P\nP*P\n''') == '6'\nassert solution('''\n**\n**\n*P\n**\n**\n**\n''') == '33'\nassert solution('''\n**\n**\n**\n*P\n**\n**\n*P\n**\n**\n**\n**\n''') == '33'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"LR\") == \"L\"\nassert solution(\"L*R\") == \"L\"\nassert solution(\"*\") == \"*\""
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nassert solution('P*P*L*R*P*P') == '25'\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('P*P') == \"6\"\nassert solution('L*R') == \"25\"\nassert solution('**') == \"33\"\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(input())\n\nsolution()\n\n========================================================\n\nfrom collections import deque\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def countPairs(self, root: TreeNode) -> int:\n        \"\"\"\n        T: O(N)\n        S: O(N)\n        \"\"\"\n        def inorder(node):\n            if not node:\n                return\n            inorder(node.left)\n            inorder_vals.append(node.val)\n            inorder(node.right)\n\n        inorder_vals = []\n        inorder(root)\n        ans = 0\n        for i in range(len(inorder_vals)):\n            for j in range(i+1, len(inorder_vals)):\n                ans += inorder_vals[i] * inorder_vals[j]\n        return ans\n"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('P*P') == '6'\nassert solution('L*R') == '25'\nassert solution('**') == '33'\nassert solution('P**P') == '22'"
    },
    {
        "number": 3056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"P*P\") == \"6\"\nassert solution(\"L*R\") == \"25\"\nassert solution(\"**\") == \"33\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\noskar is poptart\noskar is smart\n''') == 'wait what?'\nassert solution('''\n3\noskar is poptart\noskar not lukas\noskar not lukas\n''') == 'yes'\nassert solution('''\n1\nmoo is foo\n''') == 'yes'\nassert solution('''\n2\noskar is poptart\noskar is smart\n''') == 'wait what?'\nassert solution('''\n4\noskar is poptart\noskar is smart\noskar is derp\noskar is derp\noskar is derp\noskar is derp\noskar is derp\noskar is derp\n''') == 'yes'\n'''\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nherp is derp\\nherp is derp') == 'yes'\nassert solution('2\\noskar not lukas\\nlukas is smart\\nlukas is smart') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''oskar not lukas\noskar is poptart\nlukas is smart''') == 'wait what?'\n'''"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == 'yes'\nassert solution('''\noskar not lukas\noskar is poptart\nlukas is smart\n''') == 'wait what?'"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n') == 'yes'\nassert solution('3\\noskar not lukas\\noskar is poptart\\lukas is smart\\n') == 'wait what?'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n\"\"\") == \"yes\"\nassert solution(\"\"\"\n3\noskar not lukas\noskar is poptart\nlukas is smart\n\"\"\") == \"wait what?\""
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\nherp is derp\nderp is herp\nherp is herp\nderp is derp\n''') == \"yes\"\nassert solution('''\n1\nmoo not foo\n''') == \"wait what?\"\n'''\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == 'yes'\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"wait what?\"\nassert solution(\"1\") == \"wait what?\"\nassert solution(\"2\") == \"yes\"\nassert solution(\"3\") == \"yes\"\nassert solution(\"4\") == \"yes\"\n"
    },
    {
        "number": 3057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\nherp is derp\\nderp is herp\\nherp is herp\\nderp is derp\\n\") == \"yes\"\nassert solution(\"3\\noskar not lukas\\noskar is poptart\\nlukas is smart\\n\") == \"wait what?\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 4'\nassert solution('3') == 'impossible'\nassert solution('5') == '1 4'\nassert solution('6') == 'impossible'\nassert solution('7') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nAC\\nMA') == '1 4'\nassert solution('2\\nAC\\nMA') == '1 4'\nassert solution('3\\nAC\\nMA') == 'impossible'\nassert solution('4\\nAC\\nMA') == 'impossible'\nassert solution('5\\nAC\\nMA') == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1 4'\nassert solution('5') == '1 4'\nassert solution('3') == 'impossible'\n\"\"\"\n\nn = int(input())\narr = input()\n\ni = 0\ns1 = 0\ns2 = 0\n\nwhile i < n:\n    s1 += 1\n    if arr[i] == 'A':\n        s2 += 1\n    i += 1"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4 4'\nassert solution('3') == 'impossible'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"impossible\"\nassert solution(input(\"1\\n\")) == \"impossible\"\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1 4', \"Wrong!\"\nassert solution('3') == 'impossible', \"Wrong!\""
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '1 4'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 4'\nassert solution('3') == 'impossible'\nassert solution('1') == 'impossible'"
    },
    {
        "number": 3058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\nAACCMMAA\nACA\nMM\nACMAA\nAA\nA\n\"\"\") == \"1 4\"\n\nassert solution(\"\"\"\n3\nACMA\nACM\nACA\nAMA\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n1\nAM\nMA\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 20 3') == '3'\nassert solution('2 4 1') == '4'\nassert solution('10 20 3') == '18.9029850746'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124', 'First'\n\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.9029850746', 'Second'\n\nassert solution('''\n20 2\n1 0.5 2\n''') == '3.000000', 'Third'\n\nassert solution('''\n10 20 4\n0.5 0.1 0.4 0.5\n''') == '0.142857', 'Fourth'\n\nassert solution('''\n10 20 4\n0.2 0.4 0.4 0.2\n''') == '0.585714', 'Fifth'\n\nprint('All tests passed')\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 1\\n1 0.5 5\\n\") == \"3.4\"\nassert solution(\"10 20 3\\n5 0.3 8\\n6 0.8 3\\n8 0.9 3\\n\") == \"18.9069767442\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"18.9029850746\""
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124', solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''')\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.900273973', solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''')\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 3\") == \"0.69166667\"\nassert solution(\"2 2 3\") == \"1.63888889\"\nassert solution(\"3 3 3\") == \"4.38194444\"\nassert solution(\"4 4 4\") == \"5.0\"\nassert solution(\"5 5 5\") == \"5.0\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('\\n'.join([\"2 4 1\", \"1 0.5 5\", \"2 0.5 2\", \"3 0.5 2\", \"4 0.5 2\", \"5 0.5 2\"])) == \"18.9029850746\"\nassert solution('\\n'.join([\"2 4 1\", \"1 0.5 5\", \"2 0.5 2\", \"3 0.5 2\", \"4 0.5 2\", \"5 0.5 2\"])) == \"18.8926296539\"\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n''') == '124'\nassert solution('''\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n''') == '18.906318516'"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 5') == '1'\nassert solution('2 2 1') == '3'\nassert solution('10 20 3') == '18.9029850746'\nassert solution('10 20 2') == '23.5'\nassert solution('1 1 0.5') == '2'\n"
    },
    {
        "number": 3059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1.0'\nassert solution('1') == '1.0'\nassert solution('10') == '10.0'\nassert solution('10 10 10') == '10.0'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\""
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4') == '2 1 2'\nassert solution('4 1') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '2 1 2'\nassert solution('3 1') == '1'\nassert solution('2 2') == '1'\nassert solution('5 2') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '1 1 2'\nassert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"5 4 2\"\n    ) == \"1 4 2\"\nassert solution(\n    \"4 3\"\n    ) == \"2 1 2\"\nassert solution(\n    \"2 1\"\n    ) == \"1\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"2 1 2\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"5 22\") == \"4 3 4 2\"\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == stdout_"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '2 1 2'\nassert solution('2 1') == '1'\nassert solution('5 22') == '4 3 4 2'\n"
    },
    {
        "number": 3060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 3\n2 1 2\n''') == '2 1 2'\nassert solution('''2 1\n''') == '1'\nassert solution('''5 22\n4 3 4 2\n''') == '4 3 4 2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\n\nassert solution('''\n7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\nSample Output 2:\n2\n\nSample Input 3:\n7 5\n1 2\n2 3\n3 4\n5 6\n6 7\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"7 6\") == \"2\"\nassert solution(\"10 6\") == \"0\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2'\n\nprint(solution())\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('10 20') == '3'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\n1 2\n1 3\n3 4\n2 4\n''') == '2'\nassert solution('''7 6\n1 2\n2 3\n2 5\n6 3\n7 2\n3 4\nSample Output 2:\n0\n''') == '0'\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n3 4\\n2 4\\n\") == \"2\"\nassert solution(\"7 6\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n\") == \"2\"\nassert solution(\"7 5\\n1 2\\n2 3\\n2 5\\n6 3\\n7 2\\n3 4\\n\") == \"0\"\nassert solution(\"8 9\\n1 2\\n3 4\\n5 6\\n7 8\\n2 4\\n6 7\\n9 5\\n8 3\\n\") == \"3\"\nassert solution(\"8 8\\n1 2\\n3 4\\n5 6\\n7 8\\n2 4\\n6 7\\n9 5\\n8 3\\n\") == \"4\"\n"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == '2'\nassert solution('7 6') == '2'\nassert solution('7 5') == '0'\n\nimport os, sys, subprocess, re, string"
    },
    {
        "number": 3061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"6 4\") == \"2\"\nassert solution(\"9 8\") == \"0\"\nassert solution(\"6 6\") == \"0\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''\n-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 0\") == \"20.00000000\"\nassert solution(\"1.00 0.10\") == \"28.26445910\"\nassert solution(\"-10 10\") == \"3.14159265\"\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\nassert solution('''0 20\n1.00 0.10''') == '28.26445910'\nprint('All test cases passed!')\n'''"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 0') == '20.00000000'\nassert solution('1.00 0.10') == '3.14159265'\nassert solution('-10 10') == '3.14159265'"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 0\n1.00 0.10''') == '20.00000000'\nassert solution('''-10 10\n10.00 1.00''') == '3.14159265'\n"
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 0\n1.00 0.10''') == \"20.00000000\"\nassert solution('''-10 10\n10.00 1.00''') == \"3.14159265\""
    },
    {
        "number": 3062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n20 0\n1.00 0.10\n''') == '20.00000000'\nassert solution('''\n-10 10\n10.00 1.00\n''') == '3.14159265'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 120\\n3 50\\n2 80\\n') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2 100\") == \"100\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"4 70\") == \"170\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(tuple(map(int, input().split()))) == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n100\n100\n''') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''\n4\n2 100\n1 100\n4 70\n3 70\n''') == '150'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n2 100\n1 100\n4 70\n3 70\n\"\"\") == \"170\"\nassert solution(\"\"\"\n3\n2 120\n3 50\n2 80\n\"\"\") == \"150\"\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n2 100\\n1 100\\n4 70\\n3 70') == '170'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n2 100\n1 100\n4 70\n3 70\n''') == '170'\nassert solution('''3\n2 120\n3 50\n2 80\n''') == '150'\nassert solution('''1\n2 10\n1 100\n''') == '101'\n"
    },
    {
        "number": 3063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 100\\n1 100\\n4 70\") == \"170\"\nassert solution(\"3\\n2 120\\n3 50\\n2 80\") == \"150\"\nassert solution(\"10\\n20 50\\n15 40\\n4 50\\n4 20\\n7 20\\n20 25\\n5 30\\n12 40\\n12 20\\n7 50\\n11 50\\n7 30\\n20 30\\n10 30\\n15 40\\n12 20\\n8 30\\n10 40\\n10 50\\n2 50\\n3 10\\n6 20\\n7 40\\n9 50\\n5 30\\n8 20\\n1 30\\n4 40\\n12 30\\n8 20\\n1 50\\n8 30\\n4 20\\n6 30\\n2 30\\n4 40\\n7 40\\n5 30\\n2 20\\n4 40\\n3 30\\n1 40\\n8 20\\n10 40\\n6 40\\n8 30\\n1 50\\n5 20\\n12 30\\n5 20\\n4 30\\n9 40\\n12 20\\n1 40\\n6 40\\n1 30\\n2 40\\n2 50\\n5 20\\n7 30\\n4 30\\n3 30\\n10 50\\n4 20\\n3 50\\n6 30\\n3 30\\n7 20\\n5 20\\n3 40\\n5 30\\n6 30\\n3 40\\n6 20\\n10 50\\n3 40\\n1 20\\n4 50\\n2 30\\n2 20\\n7 30\\n9 50\\n10 50\\n2 30\\n1 50\\n6 50\\n2 30\\n3 30\\n4 20\\n4 10\\n10 30\\n4 30\\n2 40\\n10 40\\n5 20\\n7 20\\n4 30\\n2 30\\n5 40\\n10 40\\n5 50\\n1 50\\n4 10\\n2 40\\n2 50\\n1 20\\n2 20\\n7 30\\n9 50\\n5 30\\n3 20\\n2 30\\n10 50\\n8 30\\n1 50\\n8 30\\n5 30\\n2 40\\n2 40\\n6 20\\n3 30\\n1 50\\n7 40\\n1 50\\n6 30\\n10 50\\n1 40\\n2 50\\n1 40\\n7 30\\n5 50\\n1 30\\n2 40\\n7 20\\n5 20\\n7 50\\n3 50\\n4 20\\n2 20\\n3 40\\n5 30\\n6 30\\n3 50\\n3 50\\n7 40\\n1 20\\n4 20\\n1 40\\n1 40\\n1 30\\n2 30\\n1 30\\n2 30\\n6 40\\n2 20\\n3 20\\n8 20\\n1 50\\n4 20\\n4 20\\n1 50\\n3 50\\n1 20\\n6 30\\n3 30\\n4 40\\n1 50\\n2 20\\n6 40\\n4 20\\n2 40\\n1 50\\n3 40\\n7 40\\n3 40\\n6 30\\n7 20\\n4 30\\n1 50\\n3 20\\n1 20\\n2 50\\n1 50\\n2 30\\n5 50\\n5 50\\n2 10\\n2 50\\n1 20\\n2 30\\n2 50\\n1 20\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\n1 50\\"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('4 4') == '1'\nassert solution('100 100') == '1'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 6\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\nassert solution(\"6 5\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\") == \"5\"\nassert solution(\"1 1\\n1 1\\n1 1\") == \"1\"\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '2'\nassert solution('10 10') == '11'\nassert solution('10 9') == '9'\nassert solution('10 8') == '7'\nassert solution('4 7') == '2'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '2'\nassert solution('6 6') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4\n1 2\n1 3\n2 4\n3 4\n''') == '5'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 6\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6''') == '5'\nassert solution('''8 7\n1 2\n1 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8''') == '7'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"6 6\") == \"5\""
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n1 2\n1 3\n2 4\n''') == '2'\nassert solution('''3 4\n1 2\n1 3\n2 4\n3 4\n3 5\n5 6\nSample Output 3:\n''') == '5'\nassert solution('''4 3\n1 2\n1 3\n2 4\n3 4\n''') == '4'\nassert solution('''7 4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 5\n4 5\n5 4\n5 6\n6 4\n6 6\n6 7\n''') == '7'\nassert solution('''100 100\n1 2\n1 3\n2 4\n3 4\n3 5\n4 5\n4 6\n5 6\n5 7\n6 7\n6 8\n7 8\n7 9\n8 9\n8 10\n9 10\n9 11\n10 11\n10 12\n11 12\n11 13\n12 13\n12 14\n13 14\n13 15\n14 15\n14 16\n15 16\n15 17\n16 17\n16 18\n17 18\n17 19\n18 19\n18 20\n19 20\n19 21\n20 21\n20 22\n21 22\n21 23\n22 23\n22 24\n23 24\n23 25\n24 25\n24 26\n25 26\n25 27\n26 27\n26 28\n27 28\n27 29\n28 29\n28 30\n29 30\n29 31\n30 31\n30 32\n31 32\n31 33\n32 33\n32 34\n33 34\n33 35\n34 35\n34 36\n35 36\n35 37\n36 37\n36 38\n37 38\n37 39\n38 39\n38 40\n39 40\n39 41\n40 41\n40 42\n41 42\n41 43\n42 43\n42 44\n43 44\n43 45\n44 45\n44 46\n45 46\n45 47\n46 47\n46 48\n47 48\n47 49\n48 49\n48 50\n49 50\n49 51\n50 51\n50 52\n51 52\n51 53\n52 53\n52 54\n53 54\n53 55\n54 55\n54 56\n55 56\n55 57\n56 57\n56 58\n57 58\n57 59\n58 59\n58 60\n59 60\n59 61\n60 61\n60 62\n61 62\n61 63\n62 63\n62 64\n63 64\n63 65\n64 65\n64 66\n65 66\n65 67\n66 67\n66 68\n67 68\n67 69\n68 69\n68 70\n69 70\n69 71\n70 71\n70 72\n71 72\n71 73\n72 73\n72 74\n73 74\n73 75\n74 75\n74 76\n75 76\n75 77\n76 77\n76 78\n77 78\n77 79\n78 79\n78 80\n79 80\n79 81\n80 81\n80 82\n81 82\n81 83\n82 83\n82 84\n83 84\n83 85\n84 85\n84 86\n85 86\n85 87\n86 87\n86 88\n87 88\n87 89\n88 89\n88 90\n89 90\n89 91\n90 91\n90 92\n91 92\n91 93\n92 93\n92 94\n93 94\n93 95\n94 95\n94 96\n95 96\n95 97\n96 97\n96 98\n97 98\n97 99\n98 99\n98 100\n''') == '96'\n"
    },
    {
        "number": 3064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 2\n1 3\n2 4\n''') == '2'\nassert solution('''4 5\n1 2\n1 3\n2 4\n3 4\n''') == '5'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1\n0\n2 1 2\n1 0\n1 0\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n3\n2\n1 0\n2 0 3\n1 0\n1 0\n1 0\n1 0\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"0.0446429\"\nassert solution(\"5\") == \"0.0133585\""
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\nassert solution('1') == '0.5'\nassert solution('4') == '0.0'\nassert solution('0') == '0.5'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.5'\nassert solution('8') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0.0446429\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.5'\nassert solution('5') == '0.5'\nassert solution('7') == '0.0446429'\nassert solution('7 1 3 5') == '0.0446429'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n3\n1 0 2 3\n1 0\n1 0\n1 0\n\"\"\") == '0.0446429'\nassert solution(\"\"\"\n3\n3\n1 0 2 1\n1 0\n1 0\n1 0\n\"\"\") == '0.0491168'\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1\n0\n2 1 2\n1 0\n1 0\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n\"\"\") == \"0.0446429\"\nassert solution(\"\"\"\n10\n10\n1 0 2 3 0 1 2 3 2 2 2 2 2 2\n4 2 2 2\n1 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n1"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n1 0\n1 0\n''') == '0.5', 'First'\nassert solution('''\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n''') == '0.0446429', 'Second'\nassert solution('''\n4\n2\n0 0\n0 0\n1 0\n1 0\n''') == '0.0', 'Third'\nassert solution('''\n3\n1\n0\n2 1 2\n1 0\n1 0\n''') == '0.5', 'Fourth'\nassert solution('''\n8\n6\n1 0 2 3 0 1\n7 1 2 3 4 5 6 7\n1 0\n2 0 3\n2 0 2\n1 0\n1 0\n1 0\n1 0\n1 0\n1 0\n''') == '0.0446429', 'Fifth'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '3\n1 6 1\n2 5 2\n3 4 3\n'''\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n6\n1 2 3 3 2 1\n\"\"\") == \"\"\"\n3\n1 6 1\n2 5 2\n3 4 3\n\"\"\".strip()\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1\\n1 2 3 3 2 1\\n\") == \"3\\n1 6 1\\n2 5 2\\n3 4 3\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3\\n1 6 1\\n2 5 2\\n3 4 3\\n'\nassert solution() == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2 3 3 2\n''') == \"3\\n1 6 1\\n2 5 2\\n3 4 3\\n\"\n\nassert solution('''\n10\n1 2 3 3 2 1\n''') == \"3\\n1 6 1\\n2 5 2\\n3 4 3\\n5 4 4\\n6 5 5\\n7 6 6\\n8 7 7\\n9 8 8\\n10 9 9\\n\"\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 3 2 1\\n\") == \"3\\n1 6 1\\n2 5 2\\n3 4 3\""
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6''') == '3 5 4'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1 6 1'\nassert solution('4') == '1 6 1'\nassert solution('6') == '1 6 1'\nassert solution('9') == '1 6 1'\nassert solution('10') == '1 6 1'\n"
    },
    {
        "number": 3066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n1 2 3 3 2 1\n''') == '3\n2\n1 6 1\n2 5 2\n3 4 3\n''')\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\n1 2\n1 100\n1 1\n\"\"\") == \"1 2 100\"\n\nassert solution(\"\"\"4\n1 2\n1 100\n1 1\n\"\"\") == \"1 2 100\"\n\nassert solution(\"\"\"1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n1 100\\n1 1\\n\") == \"1 2 100\"\nassert solution(\"2\\n5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 100') == '1 100'\nassert solution('1 1') == '1 1'\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n1 100\\n1 1\") == \"1 2 100\\n\"\nassert solution(\"2 5 10 20 30 40 50\\n2 28 27\\n\") == \"10 20 28 27 30 40 50\\n\"\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2\n1 100\n1 1\n''') == '1 2 100'''\n\nstdin = input()\n\nc = int(stdin)\n\nfor i in range(c):\n    n,l = map(int,input().split())\n    arr = list(map(int,input().split()))\n    best = []\n    best.append(arr[0])\n    for j in range(1,n):\n        if arr[j] < best[0]:\n            best[0] = arr[j]\n        else:\n            best.append(arr[j])\n\n    print(' '.join([str(x) for x in best]))"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1 2'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\n\nassert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'\nassert solution('2 28 27') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1 2'\n\"\"\"\nimport sys\nfrom heapq import heappush, heappop\n\nN = int(sys.stdin.readline())\n\nfor i in range(N):\n    stdin = sys.stdin.readline().split()\n    L = int(stdin[0])\n    arr = []\n    for i in range(L):\n        arr.append(int(stdin[i+1]))\n    heap = []\n    for i in range(len(arr)):\n        heappush(heap, -arr[i])\n    output = ''\n    while len(heap)!= 0:\n        output += str(heappop(heap))\n    print(output)\n"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 20 30 40 50') == '10 20 28 27 30 40 50'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1 2'\nassert solution('2') == '1 100'\nassert solution('4') == '1 1'"
    },
    {
        "number": 3067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 1\") == \"1 1\"\nassert solution(\"1 1 1 1\") == \"1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\n'''\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '2600'\nassert solution('2') == '506'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '2600'\nassert solution('2') == '506'"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0\\n\") == \"2600\\n\", \"All numbers in the puzzle\"\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"2600\"\nassert solution(\"3\") == \"506\"\n\"\"\""
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0') == '2600'\nassert solution('3') == '506'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\n'''\n'''\n"
    },
    {
        "number": 3068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n0\nAB 1 1\nAC 2 1\nBC 2 1\n''') == '2600'\nassert solution('''\n2\nAB 0 1\nAC 2 1\nBC 2 1\n''') == '506'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('((()))') == 'possible'\nassert solution('()()') == 'possible'\nassert solution('((()))') == 'impossible'\nassert solution('())') == 'possible'\nassert solution('()()') == 'impossible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'possible'\nassert solution('((()'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"()))\") == \"possible\"\nassert solution(\")))(\") == \"impossible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"((()))\") == \"possible\"\nassert solution(\"((((())()))())\") == \"impossible\"\nassert solution(\"(((((())()))))\") == \"possible\"\nassert solution(\"((((((())())))))\") == \"possible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\n\"\"\"\n\n\"\"\"\nTo solve this problem you need to make use of the inversion algorithm.\n\nThe algorithm has two steps.\n\nStep 1: Each bracket in the sequence is checked for its invalidity using a variable called \u2018is_invalid\u2019 that is initialized to \u2018False\u2019 and is set to \u2018True\u2019 for each invalid bracket.\n\nStep 2: The possible change of the bracket inversion is done by searching through the sequence and checking if the bracket is invalid. If the bracket is invalid, then the sequence is not valid and the function returns \u2018Impossible\u2019. If the bracket is valid, then it can be inverted and the sequence becomes valid.\n\nStep 3: The algorithm is repeated recursively for each bracket in the sequence.\n\n\"\"\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"())\") == \"possible\"\nassert solution(\"()())\") == \"impossible\"\nassert solution(\"(()())()\") == \"possible\""
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"possible\"\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('()))') == 'possible'\nassert solution(')))(') == 'impossible'\nassert solution('(())') == 'possible'\nassert solution('()()') == 'possible'\nassert solution('(()())()') == 'possible'\n"
    },
    {
        "number": 3069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('()))' == 'possible'\nassert solution('))(') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\nassert solution('''2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == 'impossible'\nprint('all tests passed')\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1800\"\nassert solution(\"2 2\") == \"impossible\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1800'\nassert solution('2 2') == 'impossible'\nassert solution('1 1') == 'impossible'\n\n\"\"\"\n\nN, M = map(int, input().split())\nstations = [int(i) for i in input().split()]\ntrains = [(int(i[0]), int(i[2]), int(i[3]), int(i[4])) for i in input().split()]\n\nfor station in stations:\n    if not 0 <= station <= N:\n        print(\"impossible\")\n        exit()\n\ntrains_to_check = [(station, 0, station, 86400) for station in range(1, N + 1)]"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\\\n2 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n\"\"\"\n) == \"1800\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(t1) == \"impossible\"\nassert solution(t2) == \"1800\"\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 1800 9000 1800\\n1 2000 9200 1600\\n1 2200 9400 1400\") == \"1800\"\nprint(solution(\"2 2\\n1 1800 3600 1800\\n1 1900 3600 1600\"))\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1800'\nassert solution('2 2') == 'impossible'\n"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 6800 1800 9800 1800') == '1800'\nassert solution('3 2 6800 1800 9800 1800') == 'impossible'"
    },
    {
        "number": 3070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n''') == '1800'\n\nassert solution('''\n2 2\n1 1800 3600 1800\n1 1900 3600 1600\n''') == 'impossible'\n\nassert solution('''\n2 4\n1 1800 9000 1800\n1 2000 9200 1600\n1 2200 9400 1400\n1 3000 9500 1500\n''') == 'impossible'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    5 4\n    ''') == 'A1-B2 B1-A2 A3-B3 A4-B4 A5-B5\n'''\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"A1-A2 A2-A1\"\nassert solution(\"2 3\") == \"A1-B1 A2-B2 A3-B3\""
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == 'A1-B2 B1-A2 A3-B3'\nassert solution('2 3') == 'A1-B1 A2-C2 B2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == 'A1-A2 A2-A1'\nassert solution('2 3') == 'A1-B1 A2-B2 A2-C1 A3-B3'"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 2 3''') == '1 2 3'\nassert solution('''2 3\n1 2 3''') == '1 2 3'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1 A3-B3 A1-C1 A2-B2 B1-C2\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"A1-B2 B1-A2 A3-B3\"\nassert solution(\"2 3\") == \"A1-B1 A2-C2 B2-C1\"\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\nA1-B2 B1-A2 A3-B3\nA2-B3 B2-A3 A1-B1\nA3-B1 B3-A1 A2-B2''') == 'A1-B2 A2-B3 A3-B1 A1-C2 A2-B1 B1-C1 A2-C1'\n"
    },
    {
        "number": 3071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n1 2 3''') == '1 2 3 A1-B2 A2-C2 B2-C1'''"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n..\n..\n''') == '7'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '7'\nassert solution('4 4') == '9'\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n..\n..\n''') == '7'\nassert solution('''4 4\nX.XX\nX..X\n..X.\n..XX\n''') == '9'\nprint(solution('''10 4\nXX.XX.\nXX...X.\nXXX..X.\nX..XX.\nX.X..X\nX.X.XX\nXXX.XXX\nXX...XX\nXX.X..X\nXX...X.\nXX.XX.\n'''))"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"4 4\") == \"9\"\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\nX.X\\nX..X') == '7'\nprint(solution(input()))\n\nInput:\n3 3\n...\n.X\n...\nOutput:\n1\n\nInput:\n3 3\n..X.\n...X\n..X.\nOutput:\n2\n\nInput:\n3 3\n...\n...X\n...X\nOutput:\n3\n"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '4'\nassert solution('3') == '0'\nassert solution('4') == '9'\nassert solution('5') == '0'\n\nprint(f\"Solution: {solution(input())}\")"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n1 2\\n1 3') == '4'\n\nassert solution('3 2\\n.XXX\\nXX.X\\n.X.X\\nX.XXX\\nX.X.X\\n.X.X.X\\nXX.X.X\\n.X.X.X\\n.X.X.X\\n.XX.X.X\\nXX.X.X.X\\n.X.XX.X\\nX.X.X.X\\n.X.X.X.X\\nXX.X.X.X\\n.X.X.X.X\\nX.XX.X.X\\n.X.X.X.X\\nX.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.XX.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.XX.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X\\n.X.X.X.X.X"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '9'\nassert solution('2 2') == '7'\nassert solution('4 4') == '9'\nassert solution('4 4') == '9'\nassert solution('2 2') == '7'\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of guests Mirko can invite to dinner after he buys his table on a single line.\n\n---Examples---\nSample Input 1:\n2 2\n..\n..\nSample Output 1:\n7\n\nSample Input 2:\n4 4\nX.XX\nX..X\n..X.\n..XX\nSample Output 2:\n9\n\n---Input---\nThe first line contains two integers $R$ and $C$ ($1 \\leq R, S \\leq 1000$), the dimensions of the apartment. Each of the following $R$ rows contains exactly $S$ characters (without spaces), whether a square is free (\u2018.\u2019) or blocked (\u2018X\u2019).\n\nMirko can put his table only in free squares.\n\n---Output---\nOutput the number of"
    },
    {
        "number": 3072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"7\"\nassert solution(\"4 4\") == \"9\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500\nSample Output 1:\n600\n\nSample Input 2:\n3\n1 1 1 1 500\n6 0 8 1 1\n2 0 2 1 100\n1 1 1 1 500\nSample Output 2:\n100\n''') == '100'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n3 3 2 2 100\n1 1 1 1 500\n''') == '600'\nassert solution('''3\n3 2 2 2 100\n1 1 1 1 500\n''') == '500'\nassert solution('''5\n3 0 2 1 1 2\n1 1 1 1 1 1\n''') == '-1'\nassert solution('''5\n3 0 2 1 1 2\n2 0 2 1 1 2\n''') == '-1'\nassert solution('''5\n3 0 2 1 1 2\n1 1 1 1 1 2\n''') == '-1'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '600'\nassert solution(stdin='1 1 1 1 500') == '100'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 2 2 100') == '600'\nassert solution('2 0 2 1 100') == '100'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 3 2 2 100\\n1 1 1 1 500\\n\") == \"600\"\nassert solution(\"2\\n5 6 3 2 1 1 500\\n\") == \"700\"\nassert solution(\"3\\n3 0 2 0 1 500\\n\") == \"800\"\nassert solution(\"3\\n3 1 1 1 1 500\\n\") == \"1000\"\nassert solution(\"2\\n0 2 1 2 1 500\\n\") == \"1000\"\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"600\"\nassert solution('''\n3\n1 1 1 1 500\n6 0 8 1 1\nSample Input 3:\n10\n0 1 5 2 6 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '600'"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 3 2 2 100\") == \"600\"\nassert solution(\"2\\n1 1 1 1 500\") == \"100\""
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '600'\nassert solution('2') == '100'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '600'\nassert solution('2') == '100'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\nprint(solution())"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"0\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"1111111\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1234567890\") == \"3\"\nassert solution(\"2\\n1234567\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n361\n''') == '3'\nassert solution('''\n2\n11\n''') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '0'\nassert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nassert solution('3\\n361') == '3'\nassert solution('2\\n11') == '0'"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n111111\n''') == '10'\nassert solution('''1\n111111\n''') == '0'\nassert solution('''3\n1101\n''') == '0'\nassert solution('''3\n1101\n''') == '5'\nassert solution('''3\n11111111\n''') == '3'\n"
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"0\"\n\n\"\"\""
    },
    {
        "number": 3074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n361') == '3'\nassert solution('2\\n11') == '0'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5\n''') == '10'\nassert solution('''3 10\n2 100\n1 10\n11 5\n''') == 'cancel road trip'\nassert solution('''6 5\n3 8\n1 4\n2 5\n1 3\n2 5\n''') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5\\n') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n13 5\\n') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10', 'First'\nassert solution('''\n3 10\n2 100\n1 10\n13 5\n''') == 'cancel road trip', 'Second'\nassert solution('''\n5 10\n1 100\n3 50\n5 300\n3 300\n''') == '15', 'Third'\nassert solution('''\n5 10\n1 100\n3 50\n5 300\n3 300\n''') == 'cancel road trip', 'Fourth'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"10\"\nassert solution('1') == \"cancel road trip\"\nassert solution('2') == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"10\"\nassert solution(\"3 10\") == \"cancel road trip\"\nassert solution(\"11 5\") == \"cancel road trip\"\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 10\n2 100\n1 10\n11 5\n''') == '10'\nassert solution('''\n3 10\n2 100\n1 10\n13 5\n''') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 10\\n2 100\\n1 10\\n11 5') == '10'\nassert solution('3 10\\n2 100\\n1 10\\n11 5') == 'cancel road trip'\nassert solution('5 1\\n7 2\\n2 9') == 'cancel road trip'\n\nIn Python, we can use a function call."
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 10\n2 100\n1 10\n11 5''') == '10'\nassert solution('''3 10\n2 100\n1 10\n13 5\nSample Output 3:\ncancel road trip''') == 'cancel road trip'"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 10') == '10'\nassert solution('3 10') == 'cancel road trip'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 9\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\") == \"0 7 8 11 15 16 19\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 9\") == \"1 8 9 9 100 101 108 109 109\"\nassert solution(\"5 7\") == \"0 7 8 11 15 16 19\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"1 1\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"3 2\") == \"2 1\"\nassert solution(\"4 5\") == \"0 1 1 2 3 5\"\nassert solution(\"5 7\") == \"0 1 1 2 3 5 7\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\n\nassert solution('''5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('5 7') == '0 7 8 11 15 16 19'\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n') == '0 7 8 11 15 16 19'\n\n\"\"\"\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0 7 8 11 15 16 19\""
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''\n5 7\n2 2\n3 8\n2 7\n2 4\n3 8\n''') == '0 7 8 11 15 16 19'\nassert solution('''\n4 9\n1 2\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 9\n2 8\n1 1\n3 4\n5 100\n''') == '1 8 9 9 100 101 108 109 109'\nassert solution('''\n4 5\n2 1\n1 3\n2 4\n3 5\nSample Output 3:\n1 2 4\n''') == '1 2 4'\n"
    },
    {
        "number": 3076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 7') == '0 7 8 11 15 16 19'\nassert solution('4 9') == '1 8 9 9 100 101 108 109 109'\nassert solution('3 1') == '1 1 1'\nassert solution('1 1') == '1 1 1'\nassert solution('5 3') == '1 2 3 4 5'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 3') == \"1\"\nassert solution('1 5 3') == \"3\"\nassert solution('3 3') == \"1\"\nassert solution('2 5 3') == \"1\"\nassert solution('2 3') == \"2\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3') == '1'\nassert solution('1 5 3\\n0 0 1\\n3 3\\n-3 3\\n3 -3') == '3'\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\"\"\") == \"1\"\nassert solution(\"\"\"1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\nSample Output 3:\n3\"\"\") == \"3\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 5 3\") == \"1\"\nassert solution(\"1 5 3\") == \"1\"\nassert solution(\"1 5 3\") == \"1\""
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == \"1\"\nassert solution('''1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3''') == \"1\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 3') == '1'\nassert solution('1 5 3') == '3'"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 3') == '1', \"First\"\nassert solution('0 0 1') == '1', \"Second\"\nassert solution('3 3') == '3', \"Third\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3 3\") == \"1\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"1 5 3\") == \"2\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 3 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 5 3\n0 0 1\n3 3\n-3 3\n3 -3\n3 0\n0 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 20 1\n0 0 1\n20 20\n-20 -20\n20 -20\n20 0\n0 20\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 4 2\n0 0 1\n1 2\n-1 -1\n3 4\n0 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 20 1\n0 0 1\n20 20\n-20 -20\n20 -20\n20 0\n0 20\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 3\\n0 0 1\\n3 3') == '1'\nassert solution('1 5 3\\n0 0 1\\n3 -3\\n-3 -3') == '3'\nassert solution('1 5 3\\n0 0 1\\n3 -3\\n-3 0') == '2'\n\nassert solution('1 6 3\\n0 0 1\\n3 3\\n1 -3\\n1 1\\n1 0') == '0'\nassert solution('1 6 3\\n0 0 1\\n3 3\\n1 -3\\n1 -3') == '3'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n') == '4\\n0\\n1\\n2\\n'\nassert solution('2\\n2\\n2\\n2\\n2\\n') == '2\\n0\\n'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2\\n3') == '2'\nassert solution('4\\n1\\n3\\n2\\n4') == '1'\nassert solution('4\\n1\\n1\\n2\\n3') == '4'\nassert solution('4\\n1\\n1\\n1\\n2') == '4'\nassert solution('5\\n1\\n1\\n1\\n2\\n3') == '4'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"5 10000\n1\n1\n1\n1\n1\"\"\") == \"4\"\nassert solution(\"\"\"5 9\n1\n1\n10\n1\n9\"\"\") == \"2\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 10000\n1\n1\n1\n1\n1''') == '4'\nassert solution('''5 9\n1\n1\n10\n1\n9\nSample Output 2:\n2\n0\n0\n2\n0''') == '0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10000\\n1\\n1\\n1\\n1\\n1\\n') == '4\\n4\\n2\\n2\\n0\\n'\nassert solution('5 9\\n1\\n1\\n10\\n1\\n9\\n') == '2\\n0\\n0\\n2\\n0\\n'"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 100000\") == \"4\"\nassert solution(\"5 9\") == \"2\"\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10000') == '4'\nassert solution('5 9') == '2'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4\\n2\\n0\\n0\\n0'\n"
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 10000\") == \"4\"\nassert solution(\"5 9\") == \"2\""
    },
    {
        "number": 3078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n3\\n2\") == \"4\"\nassert solution(\"5 100\\n1\\n3\\n3\\n1\\n7\\n9\\n1\") == \"1\"\nassert solution(\"6 100\\n4\\n3\\n2\\n5\\n8\\n6\") == \"0\"\nassert solution(\"10 200\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'NE'\nassert solution('2') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n\n'''"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'NE'\nassert solution('4') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nne\n''') == 'NE'\nassert solution('''4\nkava\n''') == 'DA'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"NE\"\nassert solution(input(inp())) == \"DA\"\n\"\"\""
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2\"\n) == \"NE\"\nassert solution(\n    \"4\"\n) == \"DA\"\nassert solution(\n    \"5\"\n) == \"DA\"\nassert solution(\n    \"6\"\n) == \"DA\"\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\nne\n''') == 'NE'\n"
    },
    {
        "number": 3079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"NE\"\nassert solution(\"4\") == \"DA\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"8 10 4\") == \"3\"\nassert solution(\"10 10 4\") == \"1\"\n\n'''\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"8 10 4\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"1 3\\n\"\n    \"3 6\\n\"\n    \"6 8\\n\"\n    \"2 4\\n\"\n    \"2 5\\n\"\n    \"4 7\\n\"\n    \"5 7\\n\"\n    \"7 8\\n\"\n    \"2 3 4 5 6\\n\"\n    \"2 2 6 8\\n\"\n    \"1 1 6\\n\"\n    \"1 1 8\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '3'\nassert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '0'\nassert solution('''\n8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8\n''') == '1'\nassert solution('''\n6 9 5\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n1 1 6\n1 1 7\n1 1 8\n1 1 9\n1 2 2\n1 2 3\n1 2 4\n1 2 5\n1 2 6\n1 2 7\n1 2 8\n1 2 9\n1 3 3\n1 3 4\n1 3 5\n1 3 6\n1 3 7\n1 3 8\n1 3 9\n1 4 4\n1 4 5\n1 4 6\n1 4 7\n1 4 8\n1 4 9\n1 5 5\n1 5 6\n1 5 7\n1 5 8\n1 5 9\n1 6 6\n1 6 7\n1 6 8\n1 6 9\n1 7 7\n1 7 8\n1 7 9\n1 8 8\n1 8 9\n1 9 9\n2 2 2\n2 2 3\n2 2 4\n2 2 5\n2 2 6\n2 2 7\n2 2 8\n2 2 9\n2 3 3\n2 3 4\n2 3 5\n2 3 6\n2 3 7\n2 3 8\n2 3 9\n2 4 4\n2 4 5\n2 4 6\n2 4 7\n2 4 8\n2 4 9\n2 5 5\n2 5 6\n2 5 7\n2 5 8\n2 5 9\n2 6 6\n2 6 7\n2 6 8\n2 6 9\n2 7 7\n2 7 8\n2 7 9\n2 8 8\n2 8 9\n2 9 9\n3 3 3\n3 3 4\n3 3 5\n3 3 6\n3 3 7\n3 3 8\n3 3 9\n3 4 4\n3 4 5\n3 4 6\n3 4 7\n3 4 8\n3 4 9\n3 5 5\n3 5 6\n3 5 7\n3 5 8\n3 5 9\n3 6 6\n3 6 7\n3 6 8\n3 6 9\n3 7 7\n3 7 8\n3 7 9\n3 8 8\n3 8 9\n3 9 9\n4 4 4\n4 4 5\n4 4 6\n4 4 7\n4 4 8\n4 4 9\n4 5 5\n4 5 6\n4 5 7\n4 5 8\n4 5 9\n4 6 6\n4 6 7\n4 6 8\n4 6 9\n4 7 7\n4 7 8\n4 7 9\n4 8 8\n4 8 9\n4 9 9\n5 5 5\n5 5 6\n5 5 7\n5 5 8\n5 5 9\n5 6 6\n5 6 7\n5 6 8\n5 6 9\n5 7 7\n5 7 8\n5 7 9\n5 8 8\n5 8 9\n5 9 9\n6 6 6\n6 6 7\n6 6 8\n6 6 9\n6 7 7\n6 7 8\n6 7 9\n6 8 8\n6 8 9\n6 9 9\n7 7 7\n7 7 8\n7 7 9\n7 8 8\n7 8 9\n7 9 9\n8 8 8\n8 8 9\n8 9 9\n9 9 9\n''') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4 4\") == \"2\"\nassert solution(\"8 10 4\") == \"2\""
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2\n''') == '2'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4 4\n1 2\n1 3\n2 4\n3 4\n1 1 4\n2 1 4\n1 1 3\n2 2 3 2''') == '2'\n\nassert solution('''8 10 4\n1 2\n2 3\n1 3\n3 6\n6 8\n2 4\n2 5\n4 7\n5 7\n7 8\n2 3 4 5 6\n2 2 6 8\n1 1 6\n1 1 8''') == '3'\n\nassert solution('''7 7 7\n1 1 6\n1 1 8\n1 2 6\n1 2 8\n1 3 6\n1 3 8\n1 4 6\n1 4 8\n1 5 6\n1 5 8\n1 6 6\n1 6 8\n1 7 6\n1 7 8\n1 8 6\n1 8 8''') == '4'\n\nassert solution('''10 10 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 10 4\") == \"2\"\nassert solution(\"4 4 4\") == \"2\"\nassert solution(\"5 8 5\") == \"1\"\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 4') == '2'\nassert solution('8 10 4') == '3'\nassert solution('8 5 8 5') == '1'\n"
    },
    {
        "number": 3080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 4\\n1 2\\n1 3\\n2 4\\n3 4\\n1 1 4\\n2 1 4\\n1 1 3\\n2 2 3 2\") == \"2\"\nassert solution(\"8 10 4\\n1 2\\n2 3\\n1 3\\n3 6\\n6 8\\n2 4\\n2 5\\n4 7\\n5 7\\n7 8\\n2 3 4 5 6\\n2 2 6 8\\n1 1 6\\n1 1 8\") == \"3\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5\n4 4 4 4 4\n3 3 3 2 1\n2 1 1 1 1\n2 1 1 1 1\n1 1 1 1 1\n3 3 3 3 2\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n5 5 5 5 5\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '2'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '1'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\nassert solution('''3 5\n2 4 2\n0 1 1\n1 1 1\n1 2 2\n2 3 3''') == '1'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 1\n''') == '1'\nassert solution('''\n2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n''') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2'\nassert solution('1 1') == '1'\nassert solution('0 1') == '1'\nassert solution('1 0') == '1'\nassert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == output_string"
    },
    {
        "number": 3081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '1'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3''') == '2'\nassert solution('''2 2\n1 1\n0 1\n1 0\n1 2 1\n2 1 3\n2 1 3''') == '2'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000'\nassert solution('''\n3 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 10\nD 1 2\nC 4 1\nC 2 2\nC 4 3\nC 6 5\nC 6 6\n''') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '40.500000000'\nassert solution('2 10000\\nD 10 1\\nC 9 3') == '49.000000000'"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 15\nD 4 10 1\nC 6 1\nC 9 3\n''') == '40.500000000'\n\nassert solution('''\n2 10\nD 4 10 1\nC 6 1\nC 9 3\n''') == '49.000000000'\n\nassert solution('''\n2 15\nD 4 10 1\nC 6 1\n''') == 'impossible'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '1.500000000'\nassert solution('5 4') == '1.500000000'\nassert solution('10 5') == '1.500000000'\nassert solution('3 3') == 'impossible'\nassert solution('5 4') == '1.500000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 15\\nD 4 10 1\\nC 6 1') == '40.500000000'\nassert solution('3 15\\nD 4 10 1\\nC 6 1\\nC 9 3') == '49.000000000'\nassert solution('6 15\\nD 4 10 1\\nC 6 1\\nC 5 3') == '-1.000000000'\n"
    },
    {
        "number": 3082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\nD 2 1\nC 4 1\n''') == '1.750000000000001'\nassert solution('''\n5 5\nD 2 1\nD 5 2\nC 4 1\nC 5 2\nC 6 1\n''') == '12.166666666666674'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\nassert solution(\"\"\"\n2\nb 1\na 2\n\"\"\") == \"fail\"\nassert solution(\"\"\"\n6\na 1\nb 1\nc 1\nd 1\ne 1\nf 1\ng 1\n\"\"\") == \"1 2 3 4 5 6 7 8\"\nassert solution(\"\"\"\n5\na 2\nb 1\nc 2\nd 1\ne 1\n\"\"\") == \"1 2 3 4 5\"\nassert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 'fail'\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10\\na 2 10 3\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7') == '5 4 9 3 1 10 7 6 2'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"10\\na 2 10 3\\na 1 6\\n\"\n    \"c 2 1 5\\nc 1 9\\n\"\n    \"d 1 9\\n\"\n    \"e 1 4\\ne 1 7\\n\"\n    \"f 1 2\\n\"\n    \"g 2 6 8\\n\"\n    \"h 0\\n\"\n    \"i 1 3\\n\"\n    \"j 1 7\\n\"\n    ) == \"fail\""
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\\n\"\n                \"a 2 10 3\\n\"\n                \"b 1 6\\n\"\n                \"c 2 1 5\\n\"\n                \"d 1 9\\n\"\n                \"e 1 4\\n\"\n                \"f 1 2\\n\"\n                \"g 2 6 8\\n\"\n                \"h 0\\n\"\n                \"i 1 3\\n\"\n                \"j 1 7\") == \"5 4 9 3 1 10 7 6 2\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\"\"\"\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\"\"\") == \"fail\"\n\"\"\"\n\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n\n\"\"\""
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == '5 4 9 3 1 10 7 6 2'\n\nassert solution('''\n10\na 2 10 3\na 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n\nassert solution('''\n10\na 2 10 3\nb 1 6\nc 2 1 5\nd 1 9\ne 1 4\nf 1 2\ng 2 6 8\nh 0\ni 1 3\nj 1 7\n''') == 'fail'\n\nassert solution('''\n1\na 2\n''') == 'fail'\n\nassert solution('''\n1\na 2\n''') == '2'"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"5 4 9 3 1 10 7 6 2\"\n\"\"\""
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"10\\na 2 10 3\\nb 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\"\n) == \"5 4 9 3 1 10 7 6 2\"\nassert solution(\n    \"10\\na 1 6\\nc 2 1 5\\nd 1 9\\ne 1 4\\nf 1 2\\ng 2 6 8\\nh 0\\ni 1 3\\nj 1 7\"\n) == \"fail\"\n"
    },
    {
        "number": 3083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    a 2 10 3\n    b 1 6\n    c 2 1 5\n    d 1 9\n    e 1 4\n    f 1 2\n    g 2 6 8\n    h 0\n    i 1 3\n    j 1 7\n    '''\n) == '5 4 9 3 1 10 7 6 2'\n\nassert solution(\n    '''\n    a 2 10 3\n    a 1 6\n    c 2 1 5\n    d 1 9\n    e 1 4\n    f 1 2\n    g 2 6 8\n    h 0\n    i 1 3\n    j 1 7\n    '''\n) == 'fail'\n\nassert solution(\n    '''\n    a 2 10 3\n    a 1 6\n    a 4 1 7\n    b 1 6\n    c 2 1 5\n    d 1 9\n    e 1 4\n    f 1 2\n    g 2 6 8\n    h 0\n    i 1 3\n    j 1 7\n    '''\n) == 'fail'\n\nassert solution(\n    '''\n    a 2 10 3\n    a 1 6\n    a 4 1 7\n    a 2 6 9\n    b 1 6\n    c 2 1 5\n    d 1 9\n    e 1 4\n    f 1 2\n    g 2 6 8\n    h 0\n    i 1 3\n    j 1 7\n    '''\n) == 'fail'\n\nassert solution(\n    '''\n    a 2 10 3\n    a 1 6\n    a 4 1 7\n    a 2 6 9\n    a 1 1 1\n    b 1 6\n    c 2 1 5\n    d 1 9\n    e 1 4\n    f 1 2\n    g 2 6 8\n    h 0\n    i 1 3\n    j 1 7\n    '''\n) == 'fail'"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''00:00\n01:01''') == '3'\nassert solution('''00:08\n00:00''') == '3'\nprint('Solution:')\nprint(solution(stdin))\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('00:00') == '3'\nassert solution('01:01') == '3'\nassert solution('00:08') == '3'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"01:01\") == \"00:00\\n01:01\\n\"\nassert solution(\"00:00\") == \"3\\n00:00\\n00:01\\n\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('00:00') == '3'\nassert solution('00:08') == '3'\n\ninput = '00:00'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"00:00\") == \"3\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"00:00\") == \"3\"\nassert solution(\"00:10\") == \"3\"\nassert solution(\"00:20\") == \"2\"\nassert solution(\"00:00\") == \"3\""
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('00:00') == '3'\nassert solution('00:01') == '3'\nassert solution('00:00') == '3'\nassert solution('00:01') == '3'\n\n--- Day 2: Password Philosophy ---\nYour flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan.\n\nThe shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look.\n\nTheir password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen.\n\nTo try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set.\n\nFor example, suppose you have the following list:\n\n1-3 a: abcde\n1-3 b: cdefg\n2-9 c: ccccccccc\nEach line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times.\n\nIn the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies.\n\nHow many passwords are valid according to their policies?\n\n\"\"\"\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('00:00\\n00:00') == '3'\nassert solution('01:01\\n01:01') == '1'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('00:00') == '3'\nassert solution('00:00') == '00:00'\n"
    },
    {
        "number": 3084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('((()))') == '4,8:8,8:', '((()))'\n\"\"\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''(())\nSample Output 1:\n4,8:8,8:''') == '4,8:8,8:', 'Sample Output 1 is incorrect'\n\nassert solution('''()\nSample Output 2:\n4,4:''') == '4,4:', 'Sample Output 2 is incorrect'\n\nassert solution('''(()\nSample Output 3:\n4,8:8,8:''') == '4,8:8,8:', 'Sample Output 3 is incorrect'\n\nassert solution('''((()()\nSample Output 4:\n4,4:\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''(((((((())\nSample Input 3:\n)()()\nSample Output 3:\n4,8:8,8:\n''') == '4,4:'),\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"()\") == \"4,8:8,8:\"\nassert solution(\"((())\") == \"4,8:8,8:8,8:\"\nassert solution(\"((())()((()))(((()))\") == \"4,8:8,8:8,8:8,8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:8,8:8:"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\"\nassert solution(\"()\") == \"4,4:\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"(())\") == \"4,8:8,8:\"\nassert solution(\"(())\") == \"4,4:\"\n\"\"\"\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('()') == '4,4:'\n"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"((()))\") == \"4,8:8,8:\"\n\"\"\""
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n(())\n''') == '4,8:8,8:'\nassert solution('''\n()\n''') == '4,4:\n'''\n)"
    },
    {
        "number": 3085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''(((((()))))''') == '4,4:4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4:4,4,4"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n26 02 03 03 2''') == \"5\"\nassert solution('''3 3\n50 60 70\n80 60 60\n60 50 60\n80 80 60\n80 80 80''') == \"135\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '185'"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n26 02 03 03 1') == '5'\nassert solution('1 1\\n26 02 03 03 2') == '-1'\n\n'''"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1\n26 02 03 03 1''') == \"5\"\nassert solution('''1 1\n26 02 03 03 2''') == \"185\""
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1\n26 02 03 03 1\n26 02 03 03 2''') == '185'\nassert solution('''3 1\n25 02 03 03 1\n26 02 03 03 2\n26 02 03 03 3''') == '-1'\nassert solution('''3 2\n26 02 03 03 1\n26 02 03 03 2''') == '5'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '5'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 1\n26 02 03 03 1\n''') == '5'\nassert solution('''\n1 1\n26 02 03 03 2\n''') == '185'\nassert solution('''\n1 2\n10 02 03 03 1\n''') == '-1'\nassert solution('''\n1 2\n10 02 03 03 2\n''') == '-1'\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 1\") == \"-1\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"2 1\") == \"-1\"\n\nassert solution(\"1 1\") == \"5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '5', \"Wrong answer in sample #1\"\nassert solution('1 1') == '-1', \"Wrong answer in sample #2\"\nassert solution('2 1') == '-1', \"Wrong answer in sample #3\"\nassert solution('1 1') == '-1', \"Wrong answer in sample #4\"\nassert solution('4 1') == '-1', \"Wrong answer in sample #5\"\n"
    },
    {
        "number": 3086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1\n26 02 03 03 1\nSample Input 3:\n2 2\n26 02 03 03 1\n26 02 03 03 2\nSample Output 3:\n-1''') == '-1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\nassert solution('''\n6 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\n''')\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 4\") == \"1 2 3 4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == 'Impossible'\nassert solution('5 2') == '2 3 4 1 5'\nprint(solution(*tuple(stdin.split())))\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"5 6 1 2 3 4\"\nassert solution(\"4 2\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n1 2 3\n''') == '1 2 3'\nassert solution('''\n3 4\n3 2 4\n''') == '2 3 4'\nassert solution('''\n3 4\n1 3 2\n''') == '2 3 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    6 2\n    3 4 5 6 1 2\n    '''\n    ) == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 2\\n3 4 5 6 1 2\\n\") == \"5 6 1 2 3 4\"\nassert solution(\"4 2\\n3 4 1 2\\n\") == \"2 3 4 1\"\n\n-------------------\n\nThe above example is correct because in both of the input examples the number of marks is 2 and the number of people is 4. Hence, the output should be a set of 4 integers in the right order. The output would have been 5 6 1 2 3 4 in the first case, and 2 3 4 1 in the second case. The reason why the solution works in the first case is because the input shows that the arrangements were performed by exactly 2 people in 10 seconds.\n\nIf there is more than one arrangement which produces the exact solution, you can print any of them.\n\n-----Explanation-----\nThe time during which the dancers walked and then followed the arrows was 10 seconds. The first person to walk along the arrow was at position 3 and so the second was at position 4. The only problem was that the second person had already walked along the arrow, so he should have moved along the arrow in 10 seconds. This was also the only way to obtain exactly 2 people. Hence the first person is in position 4 and the second one is in position 5.\n\nLet\u2019s see what would have happened if the first person moved to position 3 and the second person moved to position 5.\n\nA picture depicting the dance in the first position, and the arrangement in the second position shows that the second person needs to move to position 5.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 5 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 5 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 5 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 5 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 5.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the second person is at position 4.\n\n1. Moving the first person to position 4 in 10 seconds.\n2. Moving the first person to position 3 in 10 seconds.\n\nThe first person is at position 4 and the second person is at position 3.\n\n1. Moving the first person to position 3 in 10 seconds.\n2. Moving the first person to position 4 in 10 seconds.\n\nThe first person is at position 3 and the"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '2 3 4 1'\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert solution('4 2') == '2 3 4 1'\n"
    },
    {
        "number": 3087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n3 2\n3 4 5 6 1 2\n'''\n) == '2 3 4 1 2'\nassert solution(\n    '''\n4 2\n3 4 1 2\n'''\n) == '2 3 4 1 2'\nassert solution(\n    '''\n5 2\n3 4 5 6 1 2\n'''\n) == '5 6 1 2 4 3'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('2\\n2') == '2'\nassert solution('1374\\n2') == '7413'\nassert solution('211\\n1') == '201'\nprint('Tests passed')"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '201'\nprint('Congratulations! All test cases passed.')"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1,2') == '2,1'\nassert solution('1374,2') == '7413,2'\nassert solution('210,1') == '201,1'\nassert solution('7000,1') == '7000,1'\nassert solution('1689,1') == '1689,1'"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '1374 2'\n) == '7413'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"51\"\nassert solution(\"12\") == \"21\"\nassert solution(\"3334\") == \"3433\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"101\"\nassert solution(\"12 10\") == \"1021\"\nassert solution(\"9 10\") == \"991\"\nassert solution(\"13 1\") == \"1313\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1410\n6\n''') == '1410'\n\nassert solution('''\n7413\n3\n''') == '7413'\n\nassert solution('''\n210\n2\n''') == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"21\") == \"21\"\nassert solution(\"123\") == \"321\"\nassert solution(\"1234\") == \"4321\"\nassert solution(\"12345\") == \"54321\"\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '201'\n"
    },
    {
        "number": 3088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '201'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n0 0\\n1 1\\n2 0') == '0.666666666666667'\nassert solution('3\\n0 0\\n1 1\\n2 0') == '0.733333333333333'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n0 0\n0 1\n1 1\n1 0\n5\n0 0\n1 1\n2 0\n3 0\n4 0\nSample Output 3:\n1.5\n''') == '1.500000000000001'\n\nassert solution('''9\n0 0\n0 1\n0 0\n1 1\n1 0\n1 0\n1 0\n0 0\n0 1\nSample Output 4:\n0.9\n''') == '0.90000000000000004'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '0.666666666666667'\nassert solution('3') == '0.733333333333333'"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '0.666666666666667'\nassert solution('5') == '0.714285714285714'\nassert solution('10') == '0.6640625'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0.6\"\nassert solution(\"4\") == \"0.6\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0.666666666666667\"\nassert solution(\"4\") == \"0.733333333333333\""
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n0 0\\n1 1\\n2 0\") == \"0.733333333333333\"\nassert solution(\"1\\n0 0\\n1 1\\n2 0\") == \"0.733333333333333\"\nassert solution(\"3\\n0 0\\n1 1\\n2 0\") == \"1.0\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n0 1\\n1 1\") == \"0.666666666666667\"\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0 0\n0 1\n1 1\n1 0\n''') == '0.733333333333333'\nassert solution('''5\n0 0\n1 0\n1 1\n0 1\n0 0\n''') == '2.66666666666666'\n"
    },
    {
        "number": 3089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0.666666'\nassert solution('5') == '0.7333333'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\nprint(solution(input))\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\nassert solution('2 5 2\\n1 1 1\\n1 1 1') == '5'\nassert solution('2 5 5\\n1 1 1\\n1 1 1') == '5'\nassert solution('2 5 5\\n1 1 1\\n1 1 1') == '5'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 4') == '9'\nassert solution('2 3 100') == '21'\nassert solution('1 1 20') == '20'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10 1 3\") == \"9\"\nassert solution(\"10 1 20\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3 4\\n\"\n    \"10 1 3\\n\"\n    \"0 1 20\\n\"\n    ) == \"9\"\nassert solution(\n    \"2 3 100\\n\"\n    \"10 1 10\\n\"\n    \"10 1 10\\n\"\n    ) == \"21\"\nassert solution(\n    \"2 3 3\\n\"\n    \"10 1 10\\n\"\n    \"10 1 10\\n\"\n    ) == \"9\"\nassert solution(\n    \"2 3 3\\n\"\n    \"0 1 20\\n\"\n    \"0 1 20\\n\"\n    ) == \"9\"\nassert solution(\n    \"2 3 5\\n\"\n    \"10 1 10\\n\"\n    \"10 1 10\\n\"\n    \"10 1 10\\n\"\n    ) == \"16\"\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 4\\n10 1 3\\n0 1 20\") == \"9\"\nassert solution(\"2 3 100\\n10 1 10\\n10 1 10\") == \"21\""
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 4\\n10 1 3\\n0 1 20') == '9'\nassert solution('2 3 100\\n10 1 10\\n10 1 10') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 100') == '9'\nassert solution('2 3 100') == '21'\n"
    },
    {
        "number": 3090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"21\"\nassert solution('1\\n2') == '2'\nassert solution('1\\n4') == '4'\n\"\"\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"8 2 7 -\\n1 1 1 2\"\n) == \"2\"\nassert solution(\n    \"9 2 7 -\\n1 1 1 2\"\n) == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1 +') == '1'\nassert solution('3 3 2 -') == '0'\nassert solution('3 3 2 -') == '0'\nassert solution('3 3 2 -') == '0'\nassert solution('3 3 2 -') == '1'\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"8 2 7 -\\n1 1 1 2\") == \"2\"\n\nassert solution(\"9 2 7 -\\n1 1 1 2\") == \"4\"\n\nassert solution(\"8 2 7 -\\n0 1 1 2\\n1 2 3\\n0 1 1 2\\n1 2 3\") == \"2\"\n\nassert solution(\"8 2 7 -\\n1 1 1 2\\n1 2 3\\n0 1 1 2\\n1 2 3\") == \"2\"\n\nassert solution(\"8 2 7 -\\n1 1 1 2\\n1 2 3\\n1 2 3\\n0 1 1 2\") == \"4\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 2 7 -\n1 1 1 2\n''') == \"2\"\n\nassert solution('''\n9 2 7 -\n1 1 1 2\n''') == \"4\"\n\nassert solution('''\n8 2 7 -\n3 3 1 2\n''') == \"0\"\n\nassert solution('''\n8 2 7 -\n1 2 2 2\n''') == \"0\"\n\nassert solution('''\n8 2 7 -\n1 1 1 2\n1 1 1 2\n''') == \"3\""
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 2 7 -') == '2'\nassert solution('9 2 7 -') == '4'\n'''"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 7 -\") == \"2\"\nassert solution(\"8 2 7 -\") == \"4\"\nassert solution(\"9 2 7 -\") == \"4\"\nassert solution(\"8 3 3 *\") == \"12\"\nassert solution(\"8 3 3 /\") == \"4\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 2 7 -\") == \"2\"\nassert solution(\"9 2 7 -\") == \"4\"\nassert solution(\"8 2 8 -\") == \"1\"\nassert solution(\"9 2 8 -\") == \"0\"\nassert solution(\"10 2 10 -\") == \"1\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 2 5 -\n2 1 4 1\n''') == '1'\n\nassert solution('''\n10 2 7 -\n3 1 5 2\n''') == '2'\n\nassert solution('''\n6 3 3 -\n4 3 5 1\n''') == '3'\n\nassert solution('''\n10 2 7 -\n4 3 5 2\n''') == '3'\n\nassert solution('''\n10 2 7 -\n5 2 3 3\n''') == '1'"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '3'\nassert solution('''4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n''') == '2'\nprint('all tests passed')"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\\n2\\n3\\n2\\n1\\n\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 5\") == \"3\"\nassert solution(\"2 3 5\") == \"2\"\nassert solution(\"3 4 5\") == \"3\"\nassert solution(\"1 4 8\") == \"2\"\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('4 4\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 5\\n2 3 5\\n3 4 5\") == \"3\"\nassert solution(\"5\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8\\n\") == \"4\""
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 5\\n2 3 5\\n3 4 5\\n1 4 8') == '3'\nassert solution('4 4\\n1 4 8\\n2 4 8\\n3 4 8\\n1 3 8') == '2'\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '3'\n\nassert solution('''4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8''') == '2'\n"
    },
    {
        "number": 3092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 3\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 2\n1 2 3\n3 4 5\n1 4 8\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\n2 1\n''') == '6'\nassert solution('''\n3 4\n2 3 1\n''') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n2 1\n\"\"\") == \"6\"\nprint(solution(input()))\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n2 1\n''') == '6'\nassert solution('''\n3 4\n2 3 1\n''') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\nprint(solution(input))\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == '6'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n''') == '6'\nassert solution('''\n5\n2 4\n''') == '24'\n"
    },
    {
        "number": 3093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 4') == '24'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == 2\nassert solution('5') == 1\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"2\""
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''5\n3 4 5 1 2\n''') == '1'\nprint(solution('''\n5\n3 4 5 1 2\n'''))"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n3 4 5 1 2''') == '1'\nassert solution('''6\n5 3 2 1 4 5''') == '2'\nassert solution('''7\n3 2 5 4 5 1 6''') == '3'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '1'\nassert solution('10') == '9'\nassert solution('100') == '83'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"1\"\n\nprint(solution())"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n3 4 5 1 2') == '1'\n"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('5\\n3 4 5 1 2') == '1'"
    },
    {
        "number": 3094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"10 1\") == \"9\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 4 10\\n5 2 6\\n11 1 3\\n') == '9'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n1 4 10\n5 2 6\n11 1 3\n''') == '9'\nassert solution('''\n2 1\n2 1\nSample Output 2:\n3\n''') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 4 10\n5 2 6\n11 1 3''') == \"9\"\nassert solution('''3 3\n1 3 1\n2 1 2\n1 1 1''') == \"4\"\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n2 1 1\n1 1 1''') == \"2\"\nassert solution('''3 3\n1 4 10\n5 2 6\n11 1 3\nSample Output 2:\n4\n\nSample Input 3:\n3 3\n1 2 3\n1 2 1\n2 3 1\nSample Output 3:\n3''') == \"3\""
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 2') == '0'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n1 4 10\\n5 2 6\\n11 1 3') == '9'\nassert solution('2 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 3 1\n2 1 2\n1 1 1''') == '4'\nassert solution('''5 3\n1 4 10\n5 2 6\n11 1 3\nSample Output 3:\n7\n''') == '7'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 3\\n1 4 10\\n5 2 6\\n11 1 3') == '9'\nassert solution('3 3\\n1 4 10\\n5 2 6\\n11 1 3') == '4'\nassert solution('3 3\\n1 3 1\\n2 1 2\\n1 1 1') == '4'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '9'\nassert solution('3 2') == '8'\n"
    },
    {
        "number": 3095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"9\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n2 1 3\n1 2\n1 3''') == '6'\nassert solution('''4\n2 1 3\n1 2\n1 3\n3 4\nSample Output 3:\n5''') == '5'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n2 1 3\\n1 2\\n1 3') == '6'\nassert solution('4\\n3 4 5 6\\n1 2\\n1 3\\n2 4') == '3'\nassert solution('5\\n5 5 5 5 5\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4') == '2'"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n2 1 3\n1 2\n1 3\n3 4\n\"\"\") == \"6\"\nassert solution(\n\"\"\"\n2\n1 2\n1 3\n3 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 1 3 4\\n1 2\") == \"6\"\nassert solution(\"4\\n3 4 5 6\\n1 2\") == \"3\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n2 3 5\") == \"7\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\"\n\n'''"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n2 1 3 4\n1 2\n1 3\n3 4\n''') == '6'\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4\n2 1 3 4\n1 2\n1 3\n3 4\n\"\"\"\n) == \"6\"\n"
    },
    {
        "number": 3096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n2 1 3 4\\n1 2\\n1 3\\n3 4\\n') == '6'\nassert solution('10\\n5 1 4 2 7 9 8 1 6 3\\n9 9 9 9 9 9\\n8 2\\n9 8\\n9 6\\n7 7\\n5 4\\n1 2\\n7 5\\n6 1\\n3 8\\n') == '2'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 10\\n5 8\") == \"18\"\nassert solution(\"3\\n17 144\\n121 121\\n89 98\") == \"265\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\nassert solution('7\\n1 100\\n2 200\\n3 300\\n4 400\\n5 500\\n6 600\\n7 700') == '3'"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 10\\n5 8') == '18'\nassert solution('3\\n17 144\\n121 121\\n89 98') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 10\n5 8\n11 12\n7 13\n13 14\n''') == '265'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 10\n5 8\n''') == '18'\nassert solution('''\n2 1\n2 2\n''') == '0'\nassert solution('''\n2 2\n3 3\n''') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10\\n5 8') == '18'\nassert solution('2 1\\n1 3') == '6'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\nassert solution('''\n1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 10\\n5 8') == '18'\nassert solution('2 17\\n121 121\\n89 98') == '265'\nprint('all tests passed')"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 10\n1 10\n\"\"\") == \"18\"\nassert solution(\"\"\"\n3\n17 144\n121 121\n89 98\nSample Output 2:\n265\n25\n10\n\"\"\") == \"265\"\n"
    },
    {
        "number": 3097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 10\n5 8\n''') == '18'\nassert solution('''\n3\n17 144\n121 121\n89 98\n''') == '265'\nassert solution('''\n7\n4 12\n7 4\n16 16\n16 8\n7 8\n''') == '17'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n0 1\\n4 2\\n1 0\") == \"0.50000000\"\nassert solution(\"3 3\\n-1 0\\n0 1\\n0 0\") == \"1.0\"\nassert solution(\"6 2\\n0 -1\\n3 2\\n0 -1\\n-1 0\\n0 0\") == \"2.0\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4\") == \"0.50000000\"\nassert solution(\"3 5\") == \"1.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3\n0 0\n1 1\n2 1\n1 0''') == '0.50000000'\nassert solution('''5 5\n0 4\n4 2\n4 1\n3 -1\n-2 4''') == '12.50000000'"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'\nassert solution('0 0') == '0.50000000'\nassert solution('1 1') == '0.50000000'\nassert solution('2 1') == '0.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '0.50000000'\nassert solution('5 5') == '12.50000000'\nassert solution('6 5') == '6.50000000'\nassert solution('7 9') == '7.50000000'\nassert solution('9 5') == '7.50000000'\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"0.5\"\nassert solution(\"3 5\") == \"4.2\"\nassert solution(\"8 7\") == \"5.65\"\nassert solution(\"20 20\") == \"33.7\"\n\n\"\"\"\n\nimport math\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5 5\") == \"12.50000000\"\nassert solution(\"4 3\") == \"0.50000000\"\nassert solution(\"4 3 1\") == \"2.50000000\"\nassert solution(\"4 3 1 0\") == \"3.50000000\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"0.5\"\nassert solution(\"5 5\") == \"12.5\"\n"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '0.50000000'\nassert solution('5 5') == '12.50000000'"
    },
    {
        "number": 3098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '0.50000000'\nassert solution('10 20') == '5.0'\nassert solution('4 3') == '0.50000000'\nassert solution('8 10') == '10.0'\nassert solution('10.0') == '10.0'"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 1 3\\n0 1\\n1 2\\n2 3\\n1\") == \"2\"\nassert solution(\n    \"4 0 4\\n0 2\\n0 1\\n2 1\\n2 3\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 0 4\") == \"1\"\nassert solution(\"4 0 0\") == \"0\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"4 0 4\") == \"1\""
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n\nassert solution('''\n4 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n\nassert solution('''\n5 1 5\n0 1\n1 2\n2 3\n3 4\n3 5\n\n''') == '4'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 1 3\n0 1\n1 2\n2 3\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 1 2\n0 1\n0 2\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1 3') == '2'\nassert solution('4 0 4') == '1'\nassert solution('2 0 4') == '1'\nassert solution('2 2 2') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 1 3\n0 1\n1 2\n2 3\n1\n''') == '2'\n\nassert solution('''4 1 3\n0 1\n1 2\n2 3\n1\n''') == '1'\n\nassert solution('''5 0 4\n0 2\n0 1\n2 1\n2 3\n\n''') == '1'\n"
    },
    {
        "number": 3099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1 3\\n0 1\\n1 2\\n2 3') == '2'\nassert solution('4 0 4\\n0 2\\n0 1\\n2 1\\n2 3') == '1'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '6'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1\\n') == '6\\n'\nassert solution('2 2 2\\n') == '30\\n'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 1\n''') == '6'\n\nassert solution('''\n2 2 2\n''') == '30'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\nassert solution('5 2 5') == '1640'\nassert solution('11 2 11') == '2371'"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1\") == \"6\"\nassert solution(\"2 2 2\") == \"30\""
    },
    {
        "number": 3100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1') == '6'\nassert solution('2 2 2') == '30'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n1 9999999\n\"\"\") == \"impossible\"\nassert solution(\"\"\"2\n1 9999999\n1 9999999\n\"\"\") == \"1 9999999\"\nassert solution(\"\"\"2\n1 9999999\n9 9999999\n\"\"\") == \"1 9999999\"\nassert solution(\"\"\"2\n1 9999999\n9 9999999\n1 9999999\n\"\"\") == \"1 9999999\"\nassert solution(\"\"\"2\n1 9999999\n9 9999999\n9 9999999\n\"\"\") == \"1 9999999\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"impossible\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"3 3\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 9999999') == 'impossible'\nassert solution('2 1') == '1 2'\nassert solution('3 2') == '2 3'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2021 2020 2020\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n2020 2020 2020\n''') == '2021 2020 2020'\n\nassert solution('''2\n1 9999999\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n1 9999999\n\"\"\") == \"impossible\"\nassert solution(\"\"\"1\n20\n\"\"\") == \"20\"\nassert solution(\"\"\"1\n1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"3\n2020 2020 2020\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2020 2020 2020\n''') == '2021 2020 2020'\nassert solution('''\n1\n2020 2020 2020\n''') == 'impossible'\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2021 2020 2020', \"Wrong Answer\"\nassert solution('2') == '2022 2020 2020', \"Wrong Answer\"\n"
    },
    {
        "number": 3101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2021 2020 2020'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n') == '0'\nassert solution('1\\n4\\n') == '1'\nassert solution('6\\n5\\n') == '0'\nassert solution('3\\n8\\n') == '1'\nassert solution('9\\n5\\n') == '0'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''30 70\n66 69\n''') == '11'\nassert solution('''64 71\n6647 69\n''') == '2'\nassert solution('''64 71\n6647 69\n''') == '2'\n''')"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"11\"\nassert solution(\"30 70\") == \"11\"\nassert solution(\"66 69\") == \"2\"\nassert solution(\"66 70\") == \"1\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    1\n    5\n    ''') == '1'\n\nassert solution('''\n    6\n    5\n    ''') == '1'\n\nassert solution('''\n    10\n    5\n    ''') == '2'\n\nassert solution('''\n    30\n    70\n    ''') == '11'\n\nassert solution('''\n    1\n    1\n    ''') == '1'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_stdin()) == '1'\nassert solution(input_stdin()) == '2'\nassert solution(input_stdin()) == '0'\n'''\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 4 9 4 1\") == \"2\"\nassert solution(\"30 70\") == \"11\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"30 70\\n\") == \"11\\n\"\nassert solution(\"66 69\\n\") == \"2\\n\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'"
    },
    {
        "number": 3102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('30 70') == '11'\nassert solution('66 69') == '2'\nassert solution('1000000000 1000000000') == '1000000000'\nassert solution('1000000000 100000000') == '99999999'\nassert solution('1000000000 1000000000') == '99999999'\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\n\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('5 6 4 1') == '5'"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 2 0\n>@\n>~\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3 5 1\n>>@<<\n>~#~<\n>>>>~\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4 4 1\n>>@<<\n>~#~<\n>>>>~\n\"\"\") == \"begin repairs\"\n\nassert solution(\"\"\"\n8 4 1\n>>>#>#<\n>~#~<\n>#>~<\n>~#>~<\n>~#~<\n>#~<\n>#>~<\n>#>~<\n\"\"\") == \"begin repairs\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 0\n>@\n>~\n''') == '2'\nassert solution('''\n3 5 1\n>>@<<\n>~#~<\n''') == '4'\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 0') == '1'\nassert solution('2 2 0') == '2'\nassert solution('3 5 1') == '4'\nassert solution('2 1 1') == 'begin repairs'\n\n----Solutions----\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"4\"\n\"\"\""
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 0\") == \"2\"\nassert solution(\"3 5 1\") == \"4\"\n"
    },
    {
        "number": 3103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 2 0\n>@\n>~\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5 1\n>>@<<\n>~#~<\n>>>>~\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 1 0\n>@\n>~\n\"\"\") == \"begin repairs\"\nassert solution(\"\"\"\n3 1 0\n>>@\n>~\n\"\"\") == \"begin repairs\"\nassert solution(\"\"\"\n3 3 0\n>>@<<\n>~#~<\n\"\"\") == \"begin repairs\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''14675=120''') == '14+7+5=120'\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''143175=120''') == '14+31+75=120'\nassert solution('''5025=30''') == '5+025=30'"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n\nfrom math import log"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_str_1) == \"14+31+75=120\"\nassert solution(input_str_2) == \"5+025=30\"\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\n\nimport math\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('143175=120') == '14+31+75=120'\nassert solution('5025=30') == '5+025=30'\nassert solution('34=51') == '3+4=5'\n"
    },
    {
        "number": 3104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"143175=120\") == \"14+31+75=120\"\nassert solution(\"5025=30\") == \"5+025=30\"\nassert solution(\"6=2\") == \"2+3=4\"\nassert solution(\"2=2\") == \"2+2=4\"\nassert solution(\"4=2\") == \"2+2=4\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\n''') == '-1'\nassert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n3\n1\n2\n''') == '-1'\nassert solution('''\n4\n1\n3\n2\n4\n''') == '1 2'\nassert solution('''\n3\n4\n1\n2\n''') == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1\") == \"1 2\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"1\\n\"\n    \"2\"\n) == \"2 1\"\n\nassert solution(\n    \"5\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"4\\n\"\n    \"5\\n\"\n    \"6\\n\"\n    \"7\\n\"\n    \"1\\n\"\n    \"2\"\n) == \"-1\"\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 2'\nassert solution('8') == '1 2'\nassert solution('8') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n4\n1\n2\n3\n4\n''') == '-1'\nprint('all tests passed')"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8\n1\n3\n2\n4\n1\n5\n2\n4\n''') == '1 2'\nassert solution('''\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 3:\n-1\n''') == '-1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n2') == '1 2'\nassert solution('8\\n1\\n3\\n2') == '1 2'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n1') == '1 -1'\n"
    },
    {
        "number": 3105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 2'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1101') == '1'\nassert solution('1111') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1101') == '1'\nassert solution('0') == '0'"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1101') == '1'\nassert solution('1') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\n
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1101\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"01\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(1101) == \"1\"\nassert solution(1) == \"0\"\n"
    },
    {
        "number": 3106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1101\") == \"1\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\", \"1 1\"\nassert solution(\"2 1\") == \"0\", \"1 1\"\nassert solution(\"3 1\") == \"2\", \"1 1\"\nassert solution(\"4 1\") == \"3\", \"1 1\"\nassert solution(\"5 1\") == \"4\", \"1 1\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\\n0\\n2\""
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2''') == '1\\n0\\n2\\n'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1'\nassert solution('1 2') == '0'\nassert solution('2 1') == '0'\nassert solution('2 1') == '0'\nassert solution('4 1 6 3 6') == '2'"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\\n1 2\") == \"1\"\nassert solution(\"2 1\\n2 3\\n3 1\") == \"0\"\nassert solution(\"2 1\\n3 2\\n2 3\") == \"0\"\nassert solution(\"3 3\\n3 1 3 1\\n2 2 1\\n3 3 1 3\") == \"2\"\nassert solution(\"1 2\\n2 3\\n3 1\") == \"0\"\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1''') == '1'\n\nassert solution('''3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1''') == '3'\n\nassert solution('''2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1''') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\nassert solution('4 1 6 3 6') == '1'\nassert solution('7 3 4 2 6 5 6 1') == '3'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '1'\nassert solution('2 1') == '0'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n1 2\n3\n2\n''') == '1'\nassert solution('''\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\nSample Output 3:\n2\n''') == '1'\nassert solution('''\n3 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\n2 3\n3 1\nSample Output 4:\n1\n''') == '1'\n"
    },
    {
        "number": 3107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"3 3\") == \"3\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"4.000000\"\nassert solution(\"2 4 3 4\") == \"3.666666\"\nassert solution(\"4 2 3 4\") == \"3.333333\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\""
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n1 2 3 4\n''') == '4.000000', 'First Example'\nassert solution('''\n4 2\n2 4 3 4\n''') == '3.666666', 'Second Example'\nassert solution('''\n5 1\n1 2 3 4 5\n''') == '4.5', 'Third Example'\nassert solution('''\n5 2\n2 4 3 4 5\n''') == '3.5', 'Fourth Example'\nassert solution('''\n10 5\n2 4 3 4 5 6 7 8 10\n''') == '3.5', 'Fifth Example'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '4.000000'\nassert solution('2\\n4\\n3\\n4\\n') == '3.666666'\nassert solution('2\\n2\\n2\\n2\\n') == '2.000000'\nassert solution('1\\n1\\n1\\n1\\n') == '1.000000'\nassert solution('2\\n3\\n4\\n5\\n') == '5.333333'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"1.5\"\nassert solution(\"3 2\") == \"1.5\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 3\") == \"3\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n2 4 3 4\n\"\"\") == \"4.000000\"\nprint(solution(\"\"\"\n4 1\n2 4 3 4\n\"\"\") == \"4.000000\")\nprint(solution(\"\"\"\n3 2\n2 4 3 4\n\"\"\") == \"3.666666\")\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '4.000000'\nassert solution('2 4 3 4') == '3.666666'\nassert solution('4 2 3 4') == '3.666666'\nassert solution('4 1') == '1.0'\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"4 1\n1 2 3 4\"\"\") == \"4.000000\"\nassert solution(\"\"\"4 2\n2 4 3 4\"\"\") == \"3.666666\"\nassert solution(\"\"\"5 5\n5 5 1 1 1 1 1\n2 4 3 3 4\n6 5 1 2 1 1 1 1\n5 5 2 2 2 2 2\n5 5 2 2 1 2\n5 5 1 1 1 2\n5 5 1 1 1 2\"\"\") == \"5.166667\"\nassert solution(\"\"\"5 5\n1 1 1 1 1 1\n2 4 3 3 4\n6 5 1 2 1 1 1 1 1\n5 5 2 2 2 2 2\n5 5 2 2 1 2\n5 5 1 1 1 2\n5 5 1 1 1 2\"\"\") == \"5.666667\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"4.000000\"\nassert solution(\"4 2\") == \"3.666666\"\n"
    },
    {
        "number": 3108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 1\n1 2 3 4\n''') == '4.000000'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.750', f\"actual: {solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''')} should be '0.750'\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n\"\"\") == \"0.625\"\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2 5 5') == '0.750'\nassert solution('2 2 5 5') == '0.625'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2 5 5\") == \"0.750\"\nassert solution(\"2 2 6 5\") == \"0.625\"\nassert solution(\"2 2 6 5\") == \"0.625\""
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"0.750\"\nassert solution(input_2) == \"0.625\""
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.750'\nassert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''2 3 5 5\n2.0 3.0\n5.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.500'\nassert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.375'\nassert solution('''2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.375'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\n''') == '0.625'\nassert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.750'\nassert solution('''\n3 3 5 5\n0.8 0.8\n0.3 0.3\n0.2 0.2\n''') == '0.0'\nassert solution('''\n3 3 5 5\n0.8 0.8\n0.3 0.3\n0.2 0.2\n''') == '0.25'\nassert solution('''\n3 3 5 5\n0.8 0.8\n0.3 0.3\n0.2 0.2\n''') == '0.375'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 5 5') == '0.625'\nassert solution('2 2 5 5') == '0.750'"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n''') == '0.625'\n"
    },
    {
        "number": 3109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\"\"\") == \"0.750\"\nassert solution(\"\"\"2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n2.0 1.0\"\"\") == \"0.250\"\nassert solution(\"\"\"1 1 10 10\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\n1.0 1.0\"\"\") == \"0.000\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_stdin) == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '2'\nassert solution('2 3') == '2'\nassert solution('3 4') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\nassert solution(\"4 5\") == \"59\"\nassert solution(\"5 5\") == \"189\""
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 4') == '2', \"Test 1 Failed\"\nassert solution('3 4') == '37', \"Test 2 Failed\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\nassert solution(\"2 2\") == \"0\""
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '37'\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"4 4\") == \"37\"\nassert solution(\"3 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 4\n0 3 6\n4 0 3\n''') == '2'\nassert solution('''\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\n''') == '37'"
    },
    {
        "number": 3110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 4') == '37'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 4') == '10'\nassert solution('5 6\\n1234\\n3 4\\n12 4\\n5 6\\n1 2\\n2 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9') == '16'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3\n1234\n1 4\n1 4\n1 4''') == '10'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '1'\nassert solution('''4 4\n1234\n1 1\n1 2\n1 3\n1 4''') == '4'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1234\\n1 4\\n1 4\\n1 4\\n\") == \"10\\n14\\n18\\n\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '10'\nassert solution() == '14'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"1\\n4\"\nassert solution(\"3 3\") == \"2\\n4\"\nassert solution(\"2 4\") == \"1\\n7\"\nassert solution(\"4 3\") == \"2\\n4\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4') == '10\\n14\\n18\\n'\nassert solution('4 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4') == '1\\n4\\n9\\n16\\n'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"10\"\nassert solution(\"7 7\") == \"36\"\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10'\nassert solution('3 4\\n1234\\n1 1\\n1 2\\n1 3\\n1 4\\n') == '1'\n"
    },
    {
        "number": 3111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 3\\n1234\\n1 4\\n1 4\\n1 4\\n') == '10\\n14\\n18\\n'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4''') == '2'\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5''') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1 3\\n2 3\\n3 4\\n') == '2'\nassert solution('5 2 4\\n1 3\\n3 4\\n2 4\\n4 5\\n') == '1'"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2 3\n1 3\n2 3\n3 4\n''') == '2'\n\nassert solution('''5 2 4\n1 3\n3 4\n2 4\n4 5\n''') == '1'\n\nassert solution('''8 2 5\n1 3\n5 6\n3 7\n8 8\n9 8\n8 5\n7 6\n6 6\n''') == '3'\n\nassert solution('''5 2 5\n1 3\n5 6\n3 7\n8 8\n9 8\n8 5\n7 6\n6 6\n''') == '2'\n\nassert solution('''8 2 5\n1 3\n5 6\n3 7\n8 8\n9 8\n8 5\n7 6\n6 6\n''') == '1'"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(samples[0]) == '2'\nassert solution(samples[1]) == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2 4') == '1'\nassert solution('5 2 5') == '2'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('4 2 3') == '2'\nassert solution('5 2 4') == '1'\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('4 2 3') == '2'\nassert solution('5 2 4') == '1'\nprint('SUCCESS')\n"
    },
    {
        "number": 3112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 2 3\n1 3\n2 3\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2 4\n1 3\n3 4\n2 4\n4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n8 5 2\n1 3\n3 4\n5 6\n7 8\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000\\n5000 5000 10000 10000 0 10000\\n0 0 0 1000 1000 0 10000\\n') == 'no'\nassert solution('2\\n9996 0 9997 0 0 1\\n9999 0 10000 0 0 1\\n2\\n9997 0 9998 0 0 1\\n9998 0 9999 0 0 1\\n') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"yes\"\nassert solution(\"2\") == \"no\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n9999 0 10000 0 0 1\\n9997 0 9997 0 0 1\\n2') == 'no'\nprint(solution('1\\n10000 0 10000 10000 0 10000\\n3\\n10000 0 10000 10000 5000 5000'))\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"yes\"\nassert solution(\"3\") == \"no\"\nassert solution(\"1\") == \"yes\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'no'\nassert solution('3') == 'yes'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'no'\nassert solution('2') == 'yes'"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == 'yes'\nassert solution('2') == 'no'\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"no\"\nassert solution(\"1\") == \"no\"\nassert solution(\"2\") == \"no\"\nassert solution(\"9996 0 9997 0 0 1\") == \"yes\"\nassert solution(\"9999 0 10000 0 0 1\") == \"yes\"\n"
    },
    {
        "number": 3113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\n''') == 'yes'\nassert solution('''\n2\n9999 0 10000 0 0 1\n9998 0 9999 0 0 1\n''') == 'no'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\nassert solution([3, 3]) == \"YES\"\nassert solution([4, 3]) == \"NO\"\nassert solution([1, 2, 3]) == \"YES\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 4\n1 3\n1 2\n''') == 'NO'\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n2 4\n''') == 'YES'\nassert solution('''\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"NO\""
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''\n3 4\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n1 3\\n') == 'YES\\n1 3\\n2 1\\n3 2'\nassert solution('4 3\\n1 2\\n1 3\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'YES\\n1 3\\n2 1\\n'\nassert solution('4 3') == 'NO\\n'\nassert solution('5 3') == 'NO\\n'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 4\n1 2\n2 3\n1 3\n1 4\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n7 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\n''') == 'YES'\nassert solution('''4 3\n1 2\n1 3\n1 4\n''') == 'NO'\n"
    },
    {
        "number": 3114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n2 3\n1 3\nSample Output 2:\nYES\n1 3\n2 1\n3 2''') == 'YES'\nprint(solution('''5 3\n1 2\n1 3\n1 4\n1 5\n2 3\nSample Output 2:\nNO''') == 'NO')\nprint(solution('''3 3\n1 2\n2 3\n1 3\nSample Output 2:\nYES\n1 3\n2 1\n3 2''') == 'YES')\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'consistent'\nassert solution('5 5') == 'inconsistent'\n\"\"\""
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'inconsistent'\nassert solution('5 5') == 'consistent'"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n0 > 1\n1 = 2\n0 = 2\n2 = 3''') == 'inconsistent'\n\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\nSample Output 3:\nconsistent''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'inconsistent'\nassert solution('3 3') == 'consistent'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n0 > 1\n1 = 2\n0 = 2\n''') == 'inconsistent'\nassert solution('''5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\n''') == 'consistent'\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"consistent\"\nassert solution(\"5 5\") == \"consistent\"\n"
    },
    {
        "number": 3115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n    4 4\n    0 = 1\n    1 = 2\n    3 = 4\n    0 > 3\n    1 > 4\n    ''') == 'inconsistent'\nassert solution('''\n    5 5\n    0 = 1\n    1 = 2\n    3 = 4\n    0 > 3\n    1 > 4\n    ''') == 'consistent'\nassert solution('''\n    5 5\n    1 > 2\n    0 = 1\n    1 = 2\n    3 = 4\n    0 > 3\n    1 > 4\n    ''') == 'inconsistent'\nassert solution('''\n    5 5\n    0 = 1\n    1 = 2\n    3 = 4\n    0 > 3\n    1 > 4\n    ''') == 'consistent'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n\"\"\") == \"1.57079633\"\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nprint(solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n'))"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n''') == '41938.65135885'\nassert solution('''3\n1 0 0\n1 1 0\n0 0 0\n''') == '0'\nassert solution('''3\n-1 1 0\n1 1 0\n0 0 0\n''') == '0'\nassert solution('''4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nassert solution('4\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n') == '41938.65135885'\nassert solution('3\\n-2 0 1\\n2 0 -3\\n-1 -2 3\\n') == '2.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\nassert solution('2\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0') == '41938.65135885'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '1.57079633'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nassert solution('4\\n1 0 0\\n2 0 0\\n0 0 0\\n0 0 1\\n') == '0.7853981633974483'"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n3 4 5\\n6 7 8') == '0.776325203897166'\nassert solution('4\\n0 0 0\\n1 1 0\\n0 0 0\\n0 0 1') == '0.0'\n"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0\\n1 1 0\\n0 0 0\\n0 0 1\\n') == '1.57079633'\nassert solution('5\\n-100 0 0\\n10 0 10\\n-10 -10 -10\\n0 0 0\\n') == '41938.65135885'"
    },
    {
        "number": 3116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\n''') == '1.57079633'\nassert solution('''5\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\n0 0 1\n''') == '41938.65135885'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8\nabcdefg''') == '8'\nassert solution('''13\nabcdefgabcdefgabcdefg''') == '6'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"11\") == \"10\"\nassert solution(\"12\") == \"2\"\nassert solution(\"13\") == \"2\"\nassert solution(\"14\") == \"2\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == \"4\""
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '4'\n\"\"\"\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nabcd') == '2'\nassert solution('7\\nafefgkfhjk') == '2'\nassert solution('9\\nabcdefghijklmnopqrstuvwxyz') == '3'\nassert solution('1\\n') == '0'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('15') == '15'\nassert solution('12') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '3'\nassert solution('18') == '4'\nassert solution('0') == '0'\nassert solution('') == ''\n"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sorted(stdin)) == str(len(set(stdin)))\nprint(solution(sorted(stdin)))"
    },
    {
        "number": 3117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '0'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 1\\n3 1 2') == '2'\nassert solution('6\\n5 1 6 3 2 4\\n4 6 5 1 3 2') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 2, 3]) == \"1\"\nassert solution([6, 5, 4, 3, 2, 1]) == \"5\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n5 1 6 3 2 4\n4 6 5 1 3 2\n\"\"\") == \"huge\"\nassert solution(\"\"\"\n3\n1 2 3\n2 3 1\n3 1 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n2 3 1\n3 1 2\n''') == '2'\nassert solution('''5\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == '5'\nassert solution('''4\n2 3 1\n3 1 2\n''') == 'huge'\nassert solution('''6\n5 1 6 3 2 4\n4 6 5 1 3 2\n''') == 'huge'\nassert solution('''1\n1 1 1\n''') == 'huge'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n2 3 1\n3 1 2\n4 6 5 1 3 2\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\n5 1 6 3 2 4\n4 6 5 1 3 2\n3 1 2 4 6 5\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'huge'\nassert solution('5 1 6 3 2 4') == '5'\nassert solution('8') == 'huge'\nassert solution('6') == 'huge'\nassert solution('12') == 'huge'"
    },
    {
        "number": 3118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1 2\n1 3\n''') == '1'\nassert solution('''\n3\n1 2 3\n1 3 2\n1 1 3\n''') == '1'\nassert solution('''\n5\n1 2 3 4 5\n1 5 2 4 3\n1 4 5 2 3\n1 3 5 2 4\n1 5 1 2 4\n''') == '5'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"0 10 20\\n\"\n    \"0 10\"\n) == \"4\"\n\nassert solution(\n    \"6 1\\n\"\n    \"0 10 20 26 40 50\\n\"\n    \"0 40\"\n) == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20\n1 100\n4 1000\n0 10\nSample Output 3:\n4\n''') == '4'\nprint(\"PASSED ALL TESTS!\")\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1\\n0 10 20\\n0 10') == '4'\nassert solution('6 1\\n0 10 20 26 40 50\\n0 40') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"3 1\n0 10 20\n0 10\nSample Input 3:\n6 1\n0 10 20 50 20\n0 20\nSample Output 3:\n12\n\"\"\") == \"12\"\n\nassert solution(\n\"\"\"6 1\n0 10 20 50 20\n0 20\nSample Input 4:\n6 1\n0 10 20 50 20\n0 50\nSample Output 4:\n4\n\"\"\") == \"4\"\n\nassert solution(\n\"\"\"3 1\n0 10 20\n0 10\nSample Input 5:\n3 2\n0 10 20\n0 10\nSample Output 5:\n10\n\"\"\") == \"10\"\n\nassert solution(\n\"\"\"3 1\n0 10 20\n0 10\nSample Input 6:\n3 2\n0 10 20\n0 20\nSample Output 6:\n8\n\"\"\") == \"8\"\n\nassert solution(\n\"\"\"6 1\n0 10 20 50 20\n0 40\nSample Input 7:\n6 1\n0 10 20 50 20\n0 20\nSample Output 7:\n12\n\"\"\") == \"12\""
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"3 1\n0 10 20\n0 10\nSample Input 3:\n6 2\n0 10 20 26 40 50\n0 40\nSample Output 3:\n9\n\"\"\") == \"4\""
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n0 10 20\n0 10\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n6 1\n0 10 20 26 40 50\n0 40\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"6 1\") == \"9\"\nassert solution(\"10 1\") == \"10\"\nassert solution(\"11 1\") == \"10\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '5'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\nassert solution('6 1') == '9'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'\nassert solution('shuffle([1,2,1,2])') == 'equal'\nassert solution('concat([3,2,1],[4,5,6])') == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nconcat(shuffle([1,2]),shuffle([1,2]))\nshuffle([1,2,1,2])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n''') == 'equal'\nassert solution('''\nconcat(concat([3,2,1],[4,5,6]),concat([3,2,1],[4,5,6]))\nconcat([3,2,1,4,5,6],[3,2,1,4,5,6])\nSample Output 1:\nnot equal\n\nSample Input 2:\nsorted(concat([3,2,1],[4,5,6]))\n[1,2,3,4,5,6]\nSample Output 2:\nequal\n''') == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'equal'"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\"\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"concat(shuffle([1,2]),shuffle([1,2]))\") == \"not equal\"\nassert solution(\"shuffle([1,2,1,2])\") == \"equal\"\nassert solution(\"sorted(concat([3,2,1],[4,5,6]))\") == \"equal\""
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == 'equal'\n"
    },
    {
        "number": 3120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('concat(shuffle([1,2]),shuffle([1,2]))') == 'not equal'\nassert solution('sorted(concat([3,2,1],[4,5,6]))') == 'equal'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"Oh no\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == 'Oh no'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"Oh no\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\n3 2\n1 2 1 2\n2 3 1 2\n\"\"\") == \"Oh no\"\n\nassert solution(\"\"\"\n3 4\n5 4\n1 2 1 2\n2 3 1 2\n2 3 3 2\n\"\"\") == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('1 3') == '1'\nassert solution('3 2') == '1'\nassert solution('3 2') == 'Oh no'\nassert solution('3 2') == 'Oh no'"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'Oh no'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"1 2\n3 2\n1 2 1 2\n2 3 1 2\"\"\") == \"1\"\nassert solution(\"\"\"1 3\n3 2\n1 2 1 2\n2 3 1 2\"\"\") == \"2\"\nassert solution(\"\"\"1 3\n3 2\n1 2 1 2\n2 3 1 2\"\"\") == \"Oh no\"\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == 'Oh no'\nassert solution('3 2') == '1'\nassert solution('3 2') == 'Oh no'\nassert solution('2 1 2 2') == 'Oh no'\n"
    },
    {
        "number": 3121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"1 3\") == \"Oh no\"\nassert solution(\"1 3\") == \"1\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == '3'\nassert solution('4 4') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 1\n3 4 1\n4 1 2\n''') == '3', \"Example Test Case Failed\"\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible', \"Example Test Case Failed\"\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == '3', \"Example Test Case Failed\"\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == 'impossible', \"Example Test Case Failed\"\nassert solution('''\n5 5\n1 2 1\n2 3 1\n2 4 1\n2 5 1\n4 5 1\n''') == '3', \"Example Test Case Failed\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 2 2\\n2 3 1\\n3 4 1\\n4 1 2\\n\") == \"3\"\nassert solution(\"6 6\\n1 2 1\\n2 3 1\\n2 4 1\\n2 5 1\\n3 4 1\\n3 5 1\\n\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '3'\nassert solution('10 10') == 'impossible'"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\""
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 2\") == \"3\"\nassert solution(\"4 4\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\nprint(solution())\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"5 5\") == \"impossible\"\n"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"impossible\"\nprint(solution(input_))\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"5 5\") == \"3\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n1 2 1 1 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"10\n5 5 5 5 5 5 5 5 5 5\n\"\"\") == \"4\"\n\nassert solution(\"\"\"5\n2\n1 2 1 2 1\n\"\"\") == \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n2 1 1 1 3\n''') == '2', '5'\nassert solution('''\n1\n22\n''') == '4', '1'\nassert solution('''\n1\n22\n3\n''') == '4', '1'"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 1 1 1 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4\n1 2 3 4\n\"\"\") == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2''') == '4'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n\"\n    \"2 1 1 1 3\"\n) == \"2\"\nassert solution(\n    \"1\\n\"\n    \"22\"\n) == \"4\"\n\n------Task-------\nFind the longest k-quotations that are contained within a string.\n\n------Solutions-------\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('22') == '2'\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 1 1 1 3\n''') == \"2\"\nassert solution('''1\n22\n''') == \"4\""
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1 3') == '2'\nassert solution('1') == '1'\nassert solution('22') == '4'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 1\n''') == '2'\nassert solution('''4\n1 2 3 4\n''') == '1'\nassert solution('''3\n1 2 3\n''') == '1'\nassert solution('''8\n1 2 3 4 5 6 7 8\n''') == '8'\nassert solution('''5\n1 2 3 4 5\n''') == '6'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '2'"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 1 5\n''') == '3'\nassert solution('''\n4\n1 2 3 4\n''') == '2'\n"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1 5\") == \"3\"\nassert solution(\"4 1 2 3\") == \"2\"\n\nstdin = input()\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"2\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_sample(self):\n        self.assertEqual(solution(\"3\"), \"3\")\n        self.assertEqual(solution(\"4\"), \"2\")\n        self."
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\""
    },
    {
        "number": 3124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('') == \"<empty>\"\nassert solution('a') == \"<empty>\"\nassert solution('a+b') == '- +b-'\nassert solution('a-b') == '+ -b+'\nassert solution('a+b-c') == '- +d- +b- +c-'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '<any> <empty>', 'Should return an empty string!'\nassert solution('a+b-c') == '- +d-', 'Should return a+b-c!'\nassert solution('a-b+d-c') == '+ +d-', 'Should return a+b-c!'\nassert solution('knuth-morris-pratt') == '<empty> <empty>', 'Should return <empty> <empty>!'\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"<any> <empty>\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a+b-c') == '- +d-', \"First\"\nassert solution('a-b+d-c') == '- +d-', \"Second\"\nassert solution('knuth-morris-pratt') == '<any> <empty>', \"Third\"\nassert solution('knuthmorrispratt') == '<any> <empty>', \"Fourth\"\n\"\"\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('a+b-c') == '- +d-', solution('a+b-c')\nassert solution('a-b+d-c') == '- +d-', solution('a-b+d-c')\n\n'''\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('a+b-c') == '- +d-', solution('a+b-c')\nassert solution('a-b+d-c') == '- +d-', solution('a-b+d-c')\nassert solution('knuth-morris-pratt') == '<any> <empty>', solution('knuth-morris-pratt')\nassert solution('knuthmorrispratt') == '<any> <empty>', solution('knuthmorrispratt')"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''a+b-c\na-b+d-c\n''') == '- +d-', \"First\"\nassert solution('''a-b+c\na-b+d-c\n''') == '- +d-', \"Second\"\nassert solution('''a+b-c\na-b+d-c\n''') == '- +d-', \"Third\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"a+b-c\") == \"- +d-\"\nassert solution(\"a-b+d-c\") == \"a- +b-c\""
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('a+b-c') == '- +d-', \"Mistake in solution\"\nassert solution('a-b+d-c') == '- +d-', \"Mistake in solution\"\n"
    },
    {
        "number": 3125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''a+b-c\na-b+d-c\n\n''') == '- +d-', 'Wrong solution'\nassert solution('''knuth-morris-pratt\nknuthmorrispratt\n\n''') == '<any> <empty>', 'Wrong solution'\nassert solution('''a+b-c\na-b+d-c\n\n''') == '- +d-', 'Wrong solution'\nassert solution('''knuth-morris-pratt\nknuthmorrispratt\n\n''') == '<any> <empty>', 'Wrong solution'\nassert solution('''a+b-c\na-b+d-c\n\n''') == '- +d-', 'Wrong solution'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n''') == '0'\nassert solution('''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n''') == '11'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 1\n0\"\"\") == \"\"\"0\n1\n1\n\"\"\""
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nSample Output 1:\n0\n1\n3\n2\n3\n5\n3\n''') == '0'\nassert solution('''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\nSample Output 2:\n11\n6\n5\n9\n4\n3\n7\n9\n9\n10\n''') == '11'\nassert solution('''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n''') == '10'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0') == '0'\nassert solution('1 1') == '1'\nassert solution('3 0') == '0'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n1 1\n0\n7\nt 0\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\n'''\n) == '0\\n1\\n3\\n2\\n3\\n5\\n3\\n7\\n9\\n9\\n10\\n'\n\nassert solution(\n'''\n3 0\n2 6 6\n10\nt 1\nt 2\nt 3\nt 4\nt 5\nt 6\nt 7\nt 8\nt 9\nt 10\n'''\n) == '11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\\n10\\n'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\\nt 1 0\\nt 2 1\") == \"1\"\nassert solution(\"3 0\\nt 0 1\\nt 1 0\") == \"2\"\nassert solution(\"4 1\\nt 0\\nt 0\\nt 1\") == \"4\"\nassert solution(\"10 3\\nt 0\\nt 1\\nt 2\") == \"5\"\nassert solution(\"10 0\\nt 2\\nt 4\") == \"6\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n0\") == \"0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"3 0\\n2 6 6\\n10\") == \"11\\n6\\n5\\n9\\n4\\n3\\n7\\n9\\n9\"\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n0\\n7') == '0\\n1\\n3\\n2'\n"
    },
    {
        "number": 3126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"3 0\") == \"1\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"3 3\") == \"5\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n') == '0'\nassert solution('7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n') == '2 4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1\n''') == '2\\n4 6'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 8\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\") == \"2\\n4 6\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\") == \"0\"\nassert solution(\"1 2\\n3 4\\n5 6\\n1 2\\n3 4\\n5 6\") == \"1 2\"\nassert solution(\"10 10\\n1 2\\n3 4\\n5 6\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n8 9\\n7 6\") == \"1 2\""
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 8\n1 2 2\n1 3 1\n1 4 3\n2 6 1\n2 7 2\n3 5 1\n4 7 2\n5 7 1''') == '2'\nassert solution('''5 6\n1 2 2\n2 3 2\n3 5 2\n1 4 3\n4 5 3\n1 5 6''') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n2 3\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 2\\n3 5 2\\n1 4 3\\n4 5 3\\n1 5 6\\n\") == \"2 4 6\"\nassert solution(\"10 20\\n1 2 2\\n1 3 1\\n1 4 3\\n2 6 1\\n2 7 2\\n3 5 1\\n4 7 2\\n5 7 1\\n6 8 1\\n6 9 2\\n7 10 2\\n7 11 1\\n8 12 2\\n8 13 1\\n9 14 1\\n9 15 2\\n10 16 2\\n10 17 1\\n\") == \"2 4 6 9 16\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 8') == '2'\nassert solution('5 6') == '0'\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 8\") == \"2\"\nassert solution(\"5 6\") == \"0\"\n"
    },
    {
        "number": 3127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"0\"\nassert solution(\"7 8\") == \"2\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 3 1\") == \"4\"\nassert solution(\"1 4 3\") == \"3\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1 2 3'\nprint('PASSED')\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import zip_longest\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3''') == \"4 5 6\"\nassert solution('''12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6''') == \"4 5 6\""
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n12\n1 1\n1 2\n1 3\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 4\n2 5\n2 6\n''') == '4 5 6'\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n''') == '1 2 3'\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 1\n2 2\n2 3\n''') == '1 2 3'\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n2 1\n2 2\n2 3\n''') == '1 2 3'\nassert solution('''\n6\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n1 2\\n1 3\\n1 1\\n1 2\\n1 3') == '4\\n5\\n6\\n1\\n2\\n3'\nassert solution('6\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3') == '1\\n2\\n3\\n1\\n2\\n3'"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(s) == '1\\n2\\n3\\n1\\n2\\n3'\nprint(solution(s))\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 2') == '5'\nassert solution('1 3') == '6'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 3') == '3'\nassert solution('1 1') == '1'\nassert solution('1 2') == '2'\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\\n2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 3128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '4'\nassert solution('1 2') == '5'\nassert solution('1 3') == '6'\nassert solution('2 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\""
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"CPCC\") == \"1\"\nassert solution(\"PPPPCCCC\") == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('PPPPCCCC') == \"8\"\n"
    },
    {
        "number": 3129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('CPCC') == '1'\nassert solution('PPPPCCCC') == '8'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 2 1\n1 3\n2 3\n2\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"3 2 1\n1 3\n2 3\n3\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"3 2 1\n1 3\n2 3\n4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"2 4 1\n2 4\n4\n1 2\n3 2\n4\n\"\"\") == \"1 2 3 4\"\n\nassert solution(\"\"\"2 5 1\n1 5\n2 5\n3 5\n4 5\n5\n\"\"\") == \"5\""
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3 1') == '1 2 3'\nassert solution('2 3 1 2') == '1 2 3'\nassert solution('2 3 1 2 3') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('3 2 1') == '1 2 3'\nassert solution('1 1 1') == '1 2 3'\nassert solution('2 1 1') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 1\\n1 3\\n2 3\\n3') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3\\n3') == '1 2 3'"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1\\n1 2\\n2 3') == '1 2 3'\nassert solution('3 2 1\\n1 3\\n2 3') == '1 2 3'\nassert solution('3 2 1\\n2 3\\n1 3') == '1 2 3'\nassert solution('3 2 1\\n2 1\\n1 2') == '1 2 3'\nassert solution('3 2 1\\n1 2\\n2 1') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1') == '1 2'\nassert solution('3 2 1') == '1 2 3'\nassert solution('2 3 1') == '3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2 1\n1 3\n2 3\n2\n''') == '1 2 3'\nassert solution('''\n3 2 1\n1 3\n2 3\n3\n''') == '1 2 3'\n"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 2 3'"
    },
    {
        "number": 3130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2 1\n1 2\n2 3\n2''') == '1 2 3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '3'\nassert solution('''3 2 1\n1 3\n2 3\n3''') == '1'\nassert solution('''3 2 1\n1 3\n2 4\n4''') == '2 4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n2 4 2 3 4''') == '39'\nassert solution('''5 1\n1 0 1 1 1''') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"39\"\nassert solution(\"5 1\") == \"4\"\nassert solution(\"1 0 1 1 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3\\n2 4 2 3 4') == '39'\nassert solution('5 1\\n1 0 1 1 1') == '4'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    5 3\n    2 4 2 3 4\n    \"\"\"\n) == \"39\"\nassert solution(\n    \"\"\"\n    10 100\n    1 1 2 2 2 3 3 2 2 1\n    \"\"\"\n) == \"27648\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"39\", \"TEST ERROR\"\nassert solution(\"5 1\") == \"4\", \"TEST ERROR\"\nprint(\"TESTS: OK\")"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '39'\nassert solution('1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '39'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 2 3 4') == '4'\nassert solution('5 3 2 4 3') == '7'\nassert solution('5 1 0 1 1 1') == '4'"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n2 4 2 3 4\") == \"39\"\nassert solution(\"5 1\\n1 0 1 1 1\") == \"4\"\n"
    },
    {
        "number": 3131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '39'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s1) == \"1 1 2\"\nassert solution(s2) == \"2 4 3\"\n\"\"\"\n\nfrom itertools import product\n\nR, C = map(int, stdin.split())\n\nfor row, col in product(range(R), range(C)):\n    if stdin[row][col] == 'x':\n        pass\n    else:\n        break\nprint(f\"{row + 1} {col + 1} {(R - row) + 1}\")\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 3\nxx.\nxxx\n...\n''') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '3 3'\n    'xx.'\n    'xxx'\n    '...'\n    ) == '1 1 2'\n\nassert solution(\n    '4 6'\n    'xx....'\n    'xx.xxx'\n    '...xxx'\n    ) == '1 2 4 3'\n\nassert solution(\n    '3 3'\n    'xx.x.'\n    'xxx'\n    '...'\n    ) == '2 1 3'\n\nassert solution(\n    '4 6'\n    'xx.xxx'\n    'xx.xxx'\n    'xxx'\n    '...xxx'\n    ) == '2 3 4 3'\n\nassert solution(\n    '4 6'\n    'xx.xxx'\n    'xx.xxx'\n    'xxx'\n    '...xxx'\n    ) == '2 4 2 1'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\nxx.xx\\nxxx\\n') == '1 1 2'\nassert solution('4 6\\nxx...\\nxx.xxx\\n...xxx\\n...xxx\\n') == '1 4 3'\nassert solution('1 5\\nxx...\\nxx.xxx\\n...xxx\\n...xxx\\n') == '1 6 3'\nassert solution('3 3\\nxx.xxx\\nxxx\\n') == '1 1 2'\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1 1 2'\nassert solution('4 6') == '1 2 3'"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\nxx.\nxxx\n...\n''') == '1 1 2'\nassert solution('''4 6\nxx....\nxx.xxx\n...xxx\n...xxx\n''') == '1 2 2'\nprint(solution('''4 6\nxx.....\nxx.....\n...xxxx\n...xxxx\n'''))"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 2\n2 4 3\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Output 3:\n1 1 2\n2 4 3\n''') == '1 1 2'\nassert solution('''\n4 6\nxx....\nxx.xxx\n...xxx\n...xxx\nSample Output 4:\n1 1 2\n2 4 3\n''') == '1 1 2'\n''')\n"
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 3\n    xx.\n    xxx\n    ...\"\"\") == \"\"\"\n    1 1 2\n    2 3 1\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    4 6\n    xx....\n    xx.xxx\n    ...xxx\n    ...xxx\n    Sample Output 2:\n    1 1 2\n    2 4 3\n    \"\"\"\n) == \"\"\"\n    1 1 2\n    2 4 3\n    \"\"\""
    },
    {
        "number": 3132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\nxx.\nxxx\n...\nSample Input 3:\n4 6\nxxx...\nxx.....\n...xx.\nSample Output 3:\n1 1 2\n2 4 3\n''') == '1 1 2\\n2 4 3\\n'\n\nassert solution('''\n1 1 2\n2 4 3\nSample Input 4:\n5 5\nxxxxx\nxxxxx\nxxxxx\nxxxxx\nxxxxx\nSample Output 4:\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n3 1 2\n1 2 1\n0 2 0\n0 1 0\n''') == 'indistinguishable'\n\nassert solution(\n'''\n4 0 1\n1 0 0\n0 0 0\n0 1 0\n''') == '0'\n\nassert solution(\n'''\n2 0 1\n1 1 1\n0 0 0\n''') == '0'\n\nassert solution(\n'''\n3 0 1\n1 1 1\n0 0 0\n''') == '0'\n\nassert solution(\n'''\n0 0 0\n0 0 0\n''') == '0'"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"indistinguishable\"\nassert solution(\"2 0 1\\n1 1 1\\n0 0 0\") == \"0\"\nassert solution(\"1 1 1\\n0 0 0\\n0 1 0\") == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 1 2\\n\"\n    \"1 2 1\\n\"\n    \"0 2 0\\n\"\n    \"0 1 0\\n\"\n) == \"0\"\nassert solution(\n    \"2 0 1\\n\"\n    \"1 1 1\\n\"\n    \"0 0 0\\n\"\n) == \"indistinguishable\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == 'indistinguishable'\nassert solution('2 0 1') == '0'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 2') == 'indistinguishable'\nassert solution('3 0 1') == '0'\nassert solution('3 1 0') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"indistinguishable\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 1 1\") == \"0\"\nassert solution(\"2 0 1\") == \"1\"\nassert solution(\"0 1 1\") == \"1\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2') == \"1\"\nassert solution('2 0 1') == \"0\"\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 2') == '0'\nassert solution('2 0 1') == 'indistinguishable'\nassert solution('0 1 1') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '0'\nassert solution('2 0 1') == '1'\nassert solution('1 2 2') == 'indistinguishable'\n"
    },
    {
        "number": 3133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == \"indistinguishable\"\nassert solution('2 0 1') == \"0\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\nassert solution('0') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"0\") == \"-1\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"0\n1\"\"\") == \"0\"\n\nassert solution(\"\"\"0110\n1001\"\"\") == \"1111\"\n\nassert solution(\"\"\"0\n1\n1\n1\n0\"\"\") == \"-1\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\""
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"0\") == \"-\"\nassert solution(\"1\") == \"-\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"-\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"11\"\nassert solution(\"01010\") == \"1110\"\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n\nassert solution('') == '-1'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0110') == '1111'\nassert solution('1001') == '0111'\n"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''0110\n1001\nSample Output 2:\n1111\n0111\n1110\n1111''') == '-1'\n\nassert solution('''0\n1\nSample Output 2:\n-1''') == '-1'"
    },
    {
        "number": 3134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0110\") == \"1111\"\nassert solution(\"1001\") == \"0111\"\nassert solution(\"\") == \"-\"\nassert solution(\"0\") == \"-\"\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1+0\"\nassert solution(\"101\") == \"1+1-1\"\nassert solution(\"1111\") == \"1+0-1+1-1\"\nassert solution(\"-101\") == \"1+1-1+1\"\nassert solution(\"-1111\") == \"1+1-1+1-1+1\"\n\"\"\""
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '+1'\nassert solution('-1') == '-1'\nassert solution('0') == '0'\nassert solution('+1') == '+1'\nassert solution('-11') == '-11'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n+000-\n''') == '+0-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000') == '+0000'\nassert solution('1111') == '+000-'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n+0000\n''') == '+0000'\nassert solution('''\n+0000\n''') == '+0000'\nassert solution('''\n+0001\n''') == '+000-1'\nassert solution('''\n+0001\n''') == '+000-1'\nassert solution('''\n+0001\n''') == '+000-1'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3''') == '+00'\n"
    },
    {
        "number": 3135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '+1'\nassert solution('10') == '+10'\nassert solution('100') == '+100'\nassert solution('1000') == '+1000'\nassert solution('10001') == '+10001'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 8 3 2') == '9'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == \"9\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 5 2 3\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 1 1 1\n2 2\n1\n1\n1 2 1\n1 4 1\n1 5 1\n1 6 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n7 5 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n\"\"\") == \"9\"\nassert solution(\"\"\"\n3 2 1 1\n3 1\n1\n1\n2 1 1\n1 4 1\n1 5 1\n1 6 6\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 10 1 1\n1 2\n10 10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '9'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '10'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '18'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '23'\nassert solution('7 8 3 2\\n1 2\\n7 3 4\\n5 6\\n1 3 2\\n1 4 1\\n1 5 1\\n1 6 6\\n2 3 9\\n2 4 2\\n2 6 4\\n7 6 5\\n') == '45'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n''') == '9'\nassert solution('''6 0 1\n5 2\n1 4 3\n''') == '6'\nassert solution('''3 3 1\n3 2\n1\n2\n''') == '3'\nassert solution('''4 1 1\n1 2\n1 3\n2\n2\n2\n3\n''') == '4'\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 1\n1 2\n3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5''') == '9'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'\nassert solution('3 4 4') == '-1'\nprint('Solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n\"\"\") == \"2\"\n\nassert solution(\n    \"\"\"\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 1\n2 2\n1 1 R\n010\n000\n000''') == \"2\"\n\nassert solution('''3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\nSample Output 2:\n7''') == \"7\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'\nassert solution('1000000') == '1000000'\nprint('You are done! Go check it')"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1\") == \"2\"\nassert solution(\"3 4 2\") == \"7\"\nassert solution(\"6 9 2\") == \"61\"\nassert solution(\"6 3 1\") == \"6\"\nassert solution(\"3 4 1\") == \"1\"\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3 1\n2 2\n1 1 R\n010\n000\n000\n''') == '2'\n\nassert solution('''\n3 4 2\n2 2\n3 4 R\n2327\n6009\n2112\n3 2 R\n1310\n2101\n1301\n''') == '7'\n\nassert solution('''\n1 2 R\n1 2 R\n1 2 R\n''') == '-1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 4 2') == '7'"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('3 3 2') == '-1'\n"
    },
    {
        "number": 3137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\") == \"2\"\nassert solution(\"3 4 2\") == \"7\""
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n1\\n3\\n1\\n4\\n1') == '1\\n'\nassert solution('5\\n2\\n1\\n3\\n1\\n4\\n1\\n2') == '2\\n'\nassert solution('3\\n5\\n2\\n3\\n1\\n4\\n1\\n2') == '0\\n'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n5 4 2\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n6 2 3 7 4\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n2 2 1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n8\n1 2 4 1 1 2 5 1\n\"\"\") == \"4\"\nprint(\"The local tests are done. Time to check the final solution!\")\n\nanswer = solution(get_input())\nprint(f\"The final answer is '{answer}'\")\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4 1 2\n''') == '1'\nassert solution('''\n4\n3 2 1\n''') == '2'\nassert solution('''\n7\n3 2 4 5 4 6 2\n''') == '3'\nassert solution('''\n13\n9 1 1 2 2 2 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2'\n\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('8') == '4'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n2 2 1 2 3\n''') == '2'\nassert solution('''\n8\n1 2 4 1 1 2 5 1\n''') == '4'\nassert solution('''\n1\n''') == '1'"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 4 1 1 2 5 1') == '4'\nassert solution('5') == '2'\nassert solution('100') == '1'\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 2 1 2 3\\n') == '2'\nassert solution('8\\n1 2 4 1 1 2 5 1\\n') == '4'\nprint('All test cases passed.')\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\nSample Output 2:\n3\n1\n''') == '3'\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\nSample Output 2:\n1\n''') == '1'\nassert solution('''\n5\nD 8 8\nD 2 4\nD 5 6\nP 4\nD 6 2\nSample Output 2:\n2\n''') == '2'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\\n\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\") == \"NE\"\nassert solution(\"6\\nD 8 8\\nD 2 4\\nD 5 6\\nP 2\\nD 6 2\\nP 4\") == \"3\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"NE\"\nassert solution(\"D 3 1\") == \"1\"\nassert solution(\"D 2 2\") == \"2\"\nassert solution(\"D 1 3\") == \"3\"\nassert solution(\"P 1\") == \"1\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nD 5 6\nP 4\n''') == '1'\nassert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nD 6 2\nP 4\n''') == 'NE'\nassert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '3'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == \"3\"\nassert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == \"1\"\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == \"2\"\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == \"3\"\n\n'''\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nD 1 1\nP 1\nP 2\n\"\"\") == \"NE\"\n\nassert solution(\"\"\"\nD 5 6\nP 1\nP 2\nD 2 4\nD 6 8\nP 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\nD 1 1\nD 2 2\nD 3 3\nP 3\nD 2 4\nD 6 8\nP 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\nD 5 6\nD 2 4\nD 6 8\nD 1 1\nD 2 2\nD 3 3\nP 3\nD 2 4\nP 4\nD 2 8\nD 6 8\nP 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\nD 1 1\nD 2 2\nD 3 3\nP 3\nD 2 4\nD 6 8\nP 4\nD 5 6\nD 2 4\nP 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == 'NE'\nassert solution('6\\nD 3 1\\nD 2 2\\nD 1 3\\nP 1\\nP 2\\nP 3\\n') == 'NE'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\nD 3 1\nD 2 2\nD 1 3\nP 1\nP 2\nP 3\n''') == 'NE'\nassert solution('''\n6\nD 8 8\nD 2 4\nD 5 6\nP 2\nD 6 2\nP 4\n''') == '1'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1 10\\n0 0\\n1 4\\n3 2\\n') == '2'\nassert solution('4 3 5 6\\n1 1\\n1 1 6\\n1 2 2\\n') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 1 10') == \"2\"\nassert solution('2 3 5 6') == \"5\""
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2 1 10\n0 0\n1 4\n3 2\n''') == '2'\nassert solution('''\n3 3 5 6\n1 1\n1 1 6\n1 2 2\n''') == '5'\nassert solution('''\n4 4 2 10\n1 1\n1 1 2\n1 2 3\n1 3 4\n''') == '7'\nassert solution('''\n4 4 3 10\n1 1\n1 1 2\n1 2 3\n1 3 4\n''') == '5'\n'''\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 1 10') == '2'\nassert solution('2 3 5 6') == '5'\nassert solution('2 2 1 10') == '2'"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1 10') == '2'\nassert solution('2 3 5 6') == '5'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 5 6') == '5'\nassert solution('4 3 3 5') == '4'\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\") == \"2\"\nassert solution(\"2 3 5 6\\n1 1\\n1 1 6\\n1 2 2\") == \"5\"\n"
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 2 1 10\n0 0\n1 4\n3 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3 3 5 6\n1 1\n1 1 6\n1 2 2\n\"\"\") == \"5\""
    },
    {
        "number": 3140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2 1 10\\n0 0\\n1 4\\n3 2\\n\") == '2'\nassert solution(\"4 4 1 5\\n1 1\\n2 2\\n3 2\\n\") == '5'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\\n') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\\n') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nprint(solution('''\n5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n'''))\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2.0000000000\"\nassert solution(\"3\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1.0 0.0 1.4\\n-1.0 0.0 -1.4\\n0.0 1.0 -0.2\") == \"2.0000000000\"\nassert solution(\"4\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5\") == \"2.0000000000\"\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2.0000000000\"\nassert solution(\"5\") == \"2.0000000000\"\nassert solution(\"-1.3\") == \"2.0000000000\"\nassert solution(\"1.2 3.4\") == \"2.0000000000\"\nassert solution(\"3 1.2 1.3\") == \"1.50000000000\""
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1.0 0.0 1.4\n-1.0 0.0 -1.4\n0.0 1.0 -0.2\n''') == '2.0000000000'\nassert solution('''5\n1.4 1.0 0.0\n-0.4 -1.0 0.0\n-0.1 -0.25 -0.5\n-1.2 0.0 0.9\n0.2 0.5 0.5\n''') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'\n"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2.0000000000'\nassert solution('5') == '2.0000000000'"
    },
    {
        "number": 3141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1.0 0.0 1.4') == '2.0000000000'\nassert solution('5\\n1.4 1.0 0.0\\n-0.4 -1.0 0.0\\n-0.1 -0.25 -0.5\\n-1.2 0.0 0.9\\n0.2 0.5 0.5') == '2.0000000000'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nassert solution(\"1 100 200\") == \"95\""
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '9'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 9 5\n1\n9\n5''') == '1'\nassert solution('''6 1 6\n5\n11\n13''') == '13'\nassert solution('''6 10 10\n3\n12\n12''') == '12'\nassert solution('''6 100 100\n5\n111\n123''') == '111'\n\nassert solution('''1 100 10\n5\n11\n13''') == '11'\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\nprint(\"Congratulations! Your solution is correct!\")\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 9 5') == '1'\nassert solution('1 100 10') == '5'\nprint(solution())\n"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '9\\n19\\n'"
    },
    {
        "number": 3142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 9 5\") == \"1\"\nassert solution(\"1 100 10\") == \"9\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1 1'\n) == '1'\n\nassert solution(\n    '4 5'\n) == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n1\n1\n''') == '1'\nassert solution('''4 5\n4 1 2 4 4\n4 3 2 1\n''') == '7'\nprint('Do it!')\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\nassert solution('3\\n1 2\\n3 4') == '1 4 2 3'\nassert solution('10\\n5 4 3 2 1\\n1 2 3 4 5') == '5 4 3 2 1 1 1 1 2 2 3 4 5'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n4 1 2 4\n4 3 2 1\n''') == '7'\nassert solution('''\n5 4\n1 2 4 5 3\n3 2 1\n''') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\nassert solution('4 3 2 1') == '4 4 2 4 4 1 4'"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('4 5') == '7'\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1 1\"\n) == \"1\"\n\nassert solution(\n    \"4 5\"\n) == \"7\"\n\nassert solution(\n    \"4 3 2 1\"\n) == \"4 4 2 4 4 1 4\"\n\nassert solution(\n    \"1 1\"\n) == \"1\"\n\nassert solution(\n    \"4 5\"\n) == \"7\""
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n1\") == \"1\\n\"\nassert solution(\"4 5\\n4 1 2 4 4\\n4 3 2 1\") == \"7 4 4 2 4 4 1 4\\n\"\n"
    },
    {
        "number": 3143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\"\n\nassert solution(\"\"\"\n5\n5 1 2 3 4\n4 3 2 1\"\"\") == \"7 4 4 2 4 1 4\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 4 10 2\n1\n1\n1\n1\n2''') == '4'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 2') == '1'\nassert solution('10 10 5 0') == '10'\nassert solution('1 1 1') == '0'\nassert solution('1 1 2 2 2 1') == '3'\nassert solution('2 1 1 2 1') == '3'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 10 3 2''') == '4'\nassert solution('''10 10 5 0''') == '10'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0 2 3 4 5 6 7 8 9 10') == \"12\"\nassert solution('10 10 5 0') == \"10\"\nassert solution('10 10 5 0 1') == \"10\"\nassert solution('1 1 1 1 1 1 1 1 1 1') == \"3\"\nassert solution('10 20 30 40 50 60 70 80 90 100') == \"110\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 10 3 2\") == \"4\"\nassert solution(\"10 10 5 0\") == \"10\"\n\nassert solution(\"2 5 3 2\") == \"6\"\nassert solution(\"10 10 5 0\") == \"10\"\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 10 3 2') == '4'\nassert solution('10 10 5 0') == '10'"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 10 3 2\n''') == '4'\nassert solution('''\n20 10 5 0\n''') == '20'\nassert solution('''\n1000 10 5 0\n''') == '1000'\n"
    },
    {
        "number": 3144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([2, 10, 3, 2]) == '4'\nassert solution([10, 10, 5, 0]) == '10'\nassert solution([10, 100, 5, 0]) == '110'\nassert solution([10, 10, 100, 0]) == '110'\nassert solution([10, 100, 5, 50]) == '120'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1 20\n0123456789\n23689''') == '10'\nassert solution('''6 100 9294\n23689''') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\nprint('All test cases passed!')"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\""
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\nprint(solution(input()))\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"111\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 20') == '10'\nassert solution('6 100 9294') == '111'"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 20\") == \"10\"\nassert solution(\"6 100 9294\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 3145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1 20\n0123456789''') == '10'\nassert solution('''\n6 100 9294\n23689''') == '111'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\"\"\") == \"1.500000 2.666667\"\nassert solution(\"\"\"5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\"\"\") == \"1.500000 3.666667\""
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n\"\"\") == \"1.500000 2.666667\"\nassert solution(\"\"\"\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n\"\"\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000000 3.500000000\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 2.666667'\nassert solution('''\n5 2\n1 R 4\n2 R 2\n3 R 2\n4 S 2\n5 S 1\n''') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('5 2') == '1.500000 3.666667'\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('3 4') == '1.5'"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 2.666667\"\nassert solution(\"3 3\\n1 R 4\\n2 R 2\\n3 R 2\\n4 S 2\\n5 S 1\") == \"1.500000 3.666667\"\n"
    },
    {
        "number": 3146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '1.500000 2.666667'\nassert solution('6 3') == '1.500000 3.333333'\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 6\n101010\n111001\n101001''') == '3'\n\nassert solution('''4 5\n10010\n01010\n10101\n01001''') == '3'\n\nassert solution('''5 5\n10010\n01010\n10101\n01001\n11000''') == '3'\n\nassert solution('''5 6\n0101100\n10100101\n01101001\n001010101\n10001011\n100010101''') == '4'\n\nassert solution('''3 4\n0101100\n10100101\n001010101\n10001011''') == '4'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"11 11\") == \"1\"\nassert solution(\"11 11\") == \"1\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 6') == '3'\nassert solution('4 5') == '3'"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\") == \"3\"\nassert solution(\"4 5\\n10010\\n01010\\n10101\\n01001\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 0') == '1'\nassert solution('4 4\\n0 1 1 1\\n0 0 1 1\\n0 1 1 1\\n0 0 1 1') == '2'\n\"\"\"\n\nR, C = map(int, input().split())\nboard = [list(input()) for _ in range(R)]"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 6\") == \"3\", \"Should return '3' for a 2x2 square killer\"\nassert solution(\"4 5\") == \"3\", \"Should return '3' for a 2x2 square killer\"\nassert solution(\"10010\") == \"2\", \"Should return '2' for a 1x1 square killer\"\nassert solution(\"01010\") == \"1\", \"Should return '1' for a 1x1 square killer\"\nassert solution(\"10101\") == \"2\", \"Should return '2' for a 2x1 square killer\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"./input/solution_testcase_0.txt\") == \"3\"\nassert solution(\"./input/solution_testcase_1.txt\") == \"3\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n101010\\n111001\\n101001\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == \"2\"\nassert solution(\"\"\"\n3 6\n101010\n111001\n101001\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n101010\n111001\n101001\n''') == '3'\nassert solution('''5 5\n10010\n01010\n10101\n01001\n''') == '3'\nassert solution('''15 15\n10010\n01010\n10101\n01001\n111010\n01001\n01001\n01001\n10100\n01001\n01001\n01001\n01001\n01001\n''') == '5'"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1\\n'\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4\\n3 -1\\n'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '-3 -1\\n3 1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1\\n'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '-3 -1'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3 -1\"\nassert solution(\"4\") == \"3 4\""
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n0 0\\n0 1\\n1 0\\n0 -1\\n-1 0\\n') == '3 -1'\nassert solution('4\\n2 4\\n6 -1\\n3 5\\n-1 -1\\n') == '3 4'\nassert solution('3\\n1 1\\n2 3\\n1 -1\\n1 1\\n') == '2 3'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1'\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4\\n3 -1'\nassert solution('''5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n''') == '-3 -1\\n3 1'\nassert solution('''4\n2 4\n6 -1\n3 5\n-1 -1\n''') == '3 4\\n3 -1'\nassert solution('''2\n-1 0\n0 0\n''') == '-1 0\\n0 0'\n"
    },
    {
        "number": 3148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '-3 -1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'\n\"\"\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 0.25 2 45 20\n0 0\n2 0\n1 1.5''') == '2 6.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 6 2 5 45 20') == '2 5.086781'\nassert solution('2 2 8 5 45 20') == '1 12.715255'\nassert solution('3 4 5 6') == '1 2'\nassert solution('4 4 5 6') == '2 1'\nassert solution('5 5 5 6') == '1 3'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6 5 45 20\") == \"2 5.086781\"\nassert solution(\"10 6 5 45 20\") == \"0 0\"\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2 1 1 2') == '1 12.715255'\nassert solution('3 0.25 2 45 20') == '2 5.086781'\n\"\"\"\n\nn, omega, v0, theta, w, x = list(map(float, input().split()))\nvx = v0 * math.cos(theta * math.pi / 180)\nvy = v0 * math.sin(theta * math.pi / 180)\nx1 = w * math.cos(theta * math.pi / 180) - x\ny1 = w * math.sin(theta * math.pi / 180) - y\nprint(int(max(1, min(x1, n-1) + 1)), int(max(1, min(y1, n-1) + 1)))"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('5 1 5 45 20') == '4 3.75'\nassert solution('4 2 4 45 20') == '3 4.25'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('4 3 3 2 0 0') == '1 2.236038'\nprint('all tests passed')\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 1.5\""
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6 5 45 20') == '2 5.086781'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 6 5 45 20') == '2 5.086781'\nassert solution('3 0.25 2 45 20') == '1 12.715255'\n"
    },
    {
        "number": 3149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 5.086781\"\nassert solution([3, 6, 5, 45, 20]) == \"2 5.086781\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8', 'First'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1', 'Second'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2 2\n2 2\n''') == '2'\nassert solution('''\n5\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n2 2 2 2\n''') == '1'\nassert solution('''\n5\n0 0 0 0\n1 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '4'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == \"8\"\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == \"1\"\nassert solution('''\n3\n0 0 0\n0 0 1\n0 0 2\n''') == \"0\"\nassert solution('''\n2\n1 1\n2 2\n''') == \"0\"\nassert solution('''\n1\n0\n''') == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '8', \"Wrong answer for input '6'\"\nassert solution('4') == '1', \"Wrong answer for input '4'\""
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 0 1 0\n0 0 0 1\n1 0 1 1\n''') == '8'\n"
    },
    {
        "number": 3150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n''') == '8'\nassert solution('''\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n''') == '1'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('7') == '4 3'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('4') == '4 3'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n4\n5\n6\n''') == 'impossible'\nassert solution('''1\n2\n3\n4\n''') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == 'impossible'\nassert solution('10') == 'impossible'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"3\") == \"4 1\"\nassert solution(\"4\") == \"4 2\"\nassert solution(\"5\") == \"4 3\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4 3\"\nassert solution(\"10\") == \"impossible\"\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('5') == '3 3'\nassert solution('15') == '3 5'\nassert solution('100') == '10 10'\n"
    },
    {
        "number": 3151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\nSample Input 1:\n8\nSample Output 1:\n1 2\nSample Input 2:\n15\nSample Output 2:\n2 3\nSample Input 3:\n10\nSample Output 3:\nimpossible\n''') == '1 3'\n\nassert solution('''6\nSample Input 1:\n3\nSample Output 1:\n1 2\nSample Input 2:\n4\nSample Output 2:\n1 2\nSample Input 3:\n11\nSample Output 3:\nimpossible''') == 'impossible'\n\nassert solution('''8\nSample Input 1:\n7\nSample Output 1:\n4 3\nSample Input 2:\n10\nSample Output 2:\nimpossible''') == 'impossible'\n\nassert solution('''15\nSample Input 1:\n5\nSample Output 1:\n2 3\nSample Input 2:\n10\nSample Output 2:\nimpossible\nSample Input 3:\n11\nSample Output 3:\nimpossible''') == 'impossible'\n\nassert solution('''100\nSample Input 1:\n9\nSample Output 1:\n1 2\nSample Input 2:\n12\nSample Output 2:\n1 2\nSample Input 3:\n13\nSample Output 3:\n1 3\nSample Input 4:\n10000000\nSample Output 4:\nimpossible''') == 'impossible'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1\n3\n''') == '16'\n\nassert solution('''\n4\n2\n4\n1\n4\n''') == '109'\n\nassert solution('''\n10\n1\n10\n4\n1\n2\n1\n1\n1\n2\n4\n2\n''') == '12'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '16'\nassert solution('4') == '109'\nassert solution('3') == '11'"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\nassert solution('1') == '16'\nassert solution('3') == '110'\n\n'''''''\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n') == '16'\nassert solution('2\\n4\\n1\\n4') == '109'\nassert solution('4\\n2\\n4\\n1\\n4') == '109'\nassert solution('5\\n2\\n4\\n1\\n4') == '1091'\nassert solution('10\\n10\\n10\\n10\\n10') == '1001'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '16'\nassert solution('4') == '109'\n\nsolution.minsum = None"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n1\\n3\\n') == '16'\nassert solution('4\\n2\\n4\\n1\\n4\\n') == '109'\nassert solution('5\\n2\\n4\\n1\\n4\\n') == '100'\nassert solution('6\\n2\\n4\\n1\\n4\\n') == '110'\nassert solution('7\\n2\\n4\\n1\\n4\\n') == '111'\n\n'''"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3') == '16'\nassert solution('4\\n2\\n4\\n1') == '109'\nassert solution('3\\n5\\n7\\n6\\n2\\n7\\n6') == '2281'\nassert solution('5\\n5\\n2\\n6\\n7') == '1919'\n"
    },
    {
        "number": 3152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '16'\nassert solution('4\\n') == '109'"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n5 1') == '3'\nassert solution('4 3\\n5 3 1 1') == '5 3 2 2'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('5 3') == '1 3 1'\nassert solution('6 3') == '7'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"3\"\nassert solution(sample_input_2) == \"5\"\nassert solution(input) == stdout\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n5 1\\n1 2\\n1 2\\n1 2\\n') == '3'\nassert solution('4 3\\n5 3 1 1\\n1 3\\n2 3\\n4 1\\n') == '5 3 1 1'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n5 1\n1 2\n1 2\n1 2\n''') == '3'\nassert solution('''\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n''') == '5'\nassert solution('''\n5 5\n1 2 3 4 1\n1 3 1 1\n1 3 3 1\n2 1 3 1\n3 4 1\n4 4 4 4\n4 2 4 4\n3 4 3 4\n3 1 4 1\n4 1 4 1\n4 4 2 1\n''') == '10'\n\n'''\n1345\n
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 3\n5 1\n1 2\n1 2\n1 2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4 3\n5 3 1 1\n1 3\n2 3\n4 1\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n10 4\n5 3 1 1 1 3 3 3 3 2 3\n1 3\n2 3\n4 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('6 3') == '5'\n"
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == '3'\nassert solution(sample_input_2) == '5'\n\"\"\""
    },
    {
        "number": 3153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '3'\nassert solution('4 3') == '5'\nassert solution('10 3') == '10'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n\"\"\") == \"1 2\"\nassert solution(\"\"\"\n2 2\n10 1 0\n10 2 1\nSample Output 3:\n2 2\n\nSample Input 4:\n1\n4\n100 200 100 200\n10 1 10\n2 1 1\n3 1 2\n4 1 1\n5 1 1\nSample Output 4:\n2 1\n\nSample Input 5:\n2\n5\n50 50 100 100 50\n10 1 10\n1 1 1\n3 1 2\n4 1 1\n5 1 1\nSample Output 5:\nimpossible\n\nSample Input 6:\n2\n5\n10 50 10 10 50\n10 1 10\n1 1 1\n3 1 2\n4 1 1\n5 1 1\nSample Output 6:\n3 2 1\n\nSample Input 7:\n3\n5\n10 100 10 100 50\n10 10 10 10\n1 1 1\n3 1 2\n4 1 1\n5 1 1\nSample Output 7:\n2 1 1\n\nSample Input 8:\n3\n5\n10 100 10 100 50\n10 10 10 10\n1 1 1\n3 1 2\n4 1 1\n5 1 1\nSample Output 8:\n2 1 1\n\nSample Input 9:\n3\n5\n10 100 10 100 50\n10 10 10 10\n1 1 1\n3 1 2\n4 1 1\n5 1 1\nSample Output 9:\nimpossible\n\"\"\") == \"2 2\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    2 3\n    6 7\n    0 1 1\n    0 2 2\n    1 1 3\n    2 1 2\n    2 2 1\n    3 2 3\n    4 2 1\n    ''') == \"1 2\"\n    '''\n    '''\n    2 1\n    10 1 0\n    10 2 1\n    '''"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\n6 7\n0 1 1\n0 2 2\n1 1 3\n2 1 2\n2 2 1\n3 2 3\n4 2 1\n''') == '1 2'\nassert solution('''\n2 1\n20 3\n0 1 1\n10 1 0\n10 2 1\n''') == 'impossible'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1 2\"\nassert solution(\"2 1\") == \"impossible\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n6 7\\n0 1 1\") == \"1 2\"\nassert solution(\"2 1\\n20 3\\n0 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n6 7\\n0 1 1') == '1 2'\nassert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\nSample Output 2:') == 'impossible'\nassert solution('2 1\\n20 3\\n0 1 1\\n10 1 0\\n10 2 1\\nSample Output 2:') == '1 2'\nassert solution('2 3\\n6 7\\n0 1 1') == '1 2'\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1 2\"\nassert solution(\"2 1\") == \"2 2\"\nassert solution(\"3 1\") == \"impossible\"\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sample_input_1) == '1 2'\nassert solution(sample_input_2) == 'impossible'"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1 2'\nassert solution('2 1') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5 2'\nassert solution('8') == '5 3'\nassert solution('7') == '7 2'\nassert solution('30') == '30 1'\nassert solution('9') == '9 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('2020') == '2020 1'\nprint('Congratulations, have solved the problem!')\n\"\"\"\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nassert solution
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '5 2'\nassert solution('2020') == '2020 1'\nassert solution('3') == '1 1 1'\nassert solution('10') == '5 2'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5 2'\nassert solution('20') == '5 1'\n"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('10') == '2 2'\nassert solution('2020') == '10 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1 1'\nassert solution('2') == '1 2'\nassert solution('20') == '2 1'"
    },
    {
        "number": 3155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n10\n5\n3\n''') == '4 1'\nprint(\"Solution Accepted\")\n\nassert solution('''\n5\n8\n10\n4\n4\n5\n''') == '10 3'\nprint(\"Solution Accepted\")\n\nassert solution('''\n5\n9\n12\n6\n8\n''') == '10 6'\nprint(\"Solution Accepted\")\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == \"impossible\"\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == \"unique\"\n\nassert solution('''\n4\n7\n2 chocolate\n1 icecream\n3 cookies\n3 chocolate\n1 chocolate\n1 cookies\n3\nchocolate\ncookies\nicecream\n''') == \"ambiguous\"\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible', 'First'\n\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique', 'Second'\n\nprint(solution('''5\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n'''))\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'impossible'\nassert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'\n''')"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\n''') == 'impossible'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3\\n0 chocolate\\n1 icecream\\n2 cookies\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'impossible'\nassert solution('3\\n4\\n0 chocolate\\n1 icecream\\n2 cookies\\n2 chocolate\\n3\\nchocolate\\nicecream\\ncookies\\n') == 'unique'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\n\nassert solution('''\n3\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\n\nassert solution('''\n6\n2\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n''') == 'ambiguous'\n\nassert solution('''\n10\n2\n0 coffee\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n''') == 'unique'\n\nassert solution('''\n100\n11\n0 coffee\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\n0 chocolate\n1 icecream\n2 cookies\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\nicecream\ncookies\nSample Output 3:\nambiguous\n\n''') == 'ambiguous', 'Many ways!'"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3\n0 chocolate\n1 icecream\n2 cookies\n3\nchocolate\ncookies\nicecream\n''') == 'impossible'\nassert solution('''4\n4\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'unique'\nassert solution('''5\n6\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''6\n6\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\nassert solution('''7\n8\n0 chocolate\n1 icecream\n2 cookies\n2 chocolate\n3\nchocolate\nicecream\ncookies\n''') == 'ambiguous'\n"
    },
    {
        "number": 3156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'impossible'\nassert solution('3') == 'unique'\nassert solution('3') == 'ambiguous'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0 10\\n') == '0'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 0 10\") == \"0\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10\") == \"1\"\nassert solution(\"1 2 11\") == \"1\"\nassert solution(\"1 2 12\") == \"2\"\nassert solution(\"1 2 0\") == \"0\"\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 10') == '0'\nassert solution('1 2 10') == '1'"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\n\"\"\"\n\nn, k, m = map(int, stdin.split())"
    },
    {
        "number": 3157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 0 10') == '0'\nassert solution('1 2 10') == '1'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"15 30\") == \"1 pan\"\nassert solution(\"15 50\") == \"3 zoom out\"\nassert solution(\"15 30\") == \"3 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('.......XXXXXX..........XXXXXXXXXXXXX...........') == '1 zoom out'\nassert solution('.........XXXX..........XXXXXXXXXXXXX...........') == '2 pan'\nassert solution('..............XXXX.......XXXXXXXXXXXXX..........') == '3 zoom in'\nassert solution('..............XXXX.......XXXXXXXXXXXXX..........') == '1 pan'\nassert solution('..............XXXX.......XXXXXXXXXXXXX..........') == '3 rotate left'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n1\\n\") == \"1 pan\"\nassert solution(\"1 1\\n1\\n\") == \"1 pan\"\nassert solution(\"5 2\\n2\\n\") == \"5 zoom out\"\nassert solution(\"5 1\\n1\\n\") == \"4 pan\"\nassert solution(\"2 1\\n1\\n\") == \"1 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n..............................................X............\n...................................................XX........\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\nSample Output 1:\n3 pan\n\"\"\") == \"3 pan\"\nassert solution(\"\"\"\n............................................................\n............................................................\n...............................................XX...........\n.....................................XXX......XXXX..........\n....................................XXXX........X...........\n..............................................X............\n...................................................XX........\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\n.......................................................XX..\nSample Output 2:\n4 zoom out\n\"\"\") == \"4 zoom out\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('...') == '3 zoom out'\nassert solution('....') == '1 pan'\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1 pan\"\nassert solution(\"1 2\") == \"1 zoom out\"\nassert solution(\"2 1\") == \"2 pan\"\nassert solution(\"2 2\") == \"2 zoom in\"\nassert solution(\"3 1\") == \"3 pan\"\n"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n....XXXX...................... \n....XXXX..................................XXXX..........\n....XXXX...................................XXX..........\n\"\"\") == \"1 zoom out\"\nassert solution(\"\"\"\n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n.............................. \n........................"
    },
    {
        "number": 3158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"pan\"\nassert solution(\"1 1\") == \"pan\"\nassert solution(\"1 1\") == \"pan\"\nassert solution(\"1 1\") == \"pan\"\nassert solution(\"1 1\") == \"pan\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 20\napples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!  \\n oranges are      \\n way better!      \\n check out our      \\n fresh apples!      \\n'\nassert solution('''7 7\n+++++++\n+  =  +\n+ +++ +\n+ + + +\n+ +++ +\n+     +\n+++++++\n''') == '       \\n       \\n       \\n       \\n       \\n       \\n'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 20') == 'apples are great!\\n'\nassert solution('7 7') == '+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\n'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n8 20\n apples are great!  \n++++++++++++++++++++\n+ oranges are      +\n+ way better!      +\n+ #oranges>apples  +\n++++++++++++++++++++\n check out our      \n fresh apples!      \n''') == 'apples are great!\\ncheck out our\\nfresh apples!'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 20') == 'apples are great!\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\ncheck out our fresh apples!'\nassert solution('7 7') == 'check out our fresh apples!'\nassert solution('0 0') == ''\nassert solution('1') == ''\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n+ oranges are\\n+ way better!\\n+ oranges>apples\\n+\\ncheck out our fresh apples!\"\nassert solution(\"7 7\") == \"+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++\\ncheck out our fresh apples!\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 20') == 'apples are great!'\nassert solution('7 7') == '+++++++'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''8 20\n     apples are great!\n        + oranges are\n        + way better!\n        + #oranges>apples'''\n    ) == 'apples are great!\\n\\n\\ncheck out our\\nfresh apples!'"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 20\") == \"apples are great!\\n\" + \\\n    \"+++++++\\n\" + \\\n    \"+  =  +\\n\" + \\\n    \"+ +++ +\\n\" + \\\n    \"+ + + +\\n\" + \\\n    \"+ +++ +\\n\" + \\\n    \"+     +\\n\" + \\\n    \"+++++++\\n\" + \\\n    \"check out our\\n\" + \\\n    \"fresh apples!\\n\"\n\nassert solution(\"7 7\") == \"+++++++\\n\" + \\\n    \"+  =  +\\n\" + \\\n    \"+ +++ +\\n\" + \\\n    \"+ + + +\\n\" + \\\n    \"+ +++ +\\n\" + \\\n    \"+     +\\n\" + \\\n    \"+++++++\\n\" + \\\n    \"check out our\\n\" + \\\n    \"fresh apples!\\n\"\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 7\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '\\n   \\n   \\n   \\n   \\n   \\n'\nassert solution('12 12\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '\\n    \\n    \\n    \\n    \\n    \\n'\nassert solution('3 3\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '\\n    \\n    \\n    \\n    \\n    \\n    \\n'\nassert solution('1 1\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '\\n    \\n    \\n    \\n    \\n    \\n'\nassert solution('10 10\\n+++++++\\n+  =  +\\n+ +++ +\\n+ + + +\\n+ +++ +\\n+     +\\n+++++++') == '\\n    \\n    \\n    \\n    \\n    \\n    \\n'\n"
    },
    {
        "number": 3159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 20\\n'\n        ' apples are great!  \\n'\n        '++++++++++++++++++++\\n'\n        '+ oranges are      +\\n'\n        '+ way better!      +\\n'\n        '+ #oranges>apples  +\\n'\n        '++++++++++++++++++++\\n'\n        ' check out our      \\n'\n        ' fresh apples!      \\n') == 'apples are great!  \\n'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nTHT\nHHT\nHHT\nHHT\nTHT\nHHT\nHHT\nHHT\nTHT\nHHT\nHHT\nTHT\nTHT\nHHT\nTHT\nTHT\nHHT\nHHT\nHHT\nTHT\nTHT\nHHT\nHHT\nHHT\nTHT\nHHT\nHHT\nHHT\nTHT\nHHT\nTHT\nHHT\nHHT\nTHT\nTHT\nHHT\nHHT\nHHT\nTHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nHHT\nH"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n'''\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''HH''') == '2.0'''\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('HHHHHH') == '2.0'\nassert solution('H?') == '1.5'\nassert solution('H') == '0.0'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nHHHHHH\n''') == '2.0'\n\nassert solution('''\nH?\n''') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('HH') == '2.0'\nassert solution('H?') == '1.5'\n"
    },
    {
        "number": 3160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('HH') == \"2.0\"\nassert solution('H?') == \"1.5\"\n\n\"\"\""
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\nassert solution('4') == '6'\nassert solution('100') == '1256'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1110\n''') == '6'\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n0001\n0001\n0011\n1110''') == '1'\nassert solution('''4\n1111\n1111\n1111\n1111''') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\nassert solution('4') == '1'\nassert solution('1000000') == '1000000'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0011\\n0011\\n0011\\n1111\\n') == '1'\nassert solution('4\\n0001\\n0001\\n0011\\n1111\\n') == '2'\nassert solution('3\\n111\\n111\\n111\\n111\\n') == '4'\nassert solution('3\\n111\\n111\\n111\\n111\\n') == '4'\nassert solution('1\\n1111\\n1111\\n1111\\n1111\\n') == '6'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4\n1110\n1111\n1111\n1111\"\"\") == \"1\"\nprint('Tests passed!')"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '1'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n101\\n111\\n') == '6\\n0011\\n0011\\n0111\\n1111\\n'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('4') == '1'\nassert solution('16') == '8'\nassert solution('512') == '16'\nassert solution('256') == '4'\n"
    },
    {
        "number": 3161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0001\n0001\n0011\n1110\n''') == '1'\n\nassert solution('''\n4\n1111\n1111\n1111\n1111\n''') == '6'"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\\n') == '2'\nassert solution('4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\\n') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\nh 2 4 1\\nh 10 2 2\\nv 1 10 1\\nv 5 10 3\") == \"2\"\nassert solution(\"5\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"4\"\nassert solution(\"5\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3\") == \"4\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\nassert solution(\"4\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"4\"\nassert solution(\"4\\nh 1 4 1\\nh 10 4 2\\nv 1 4 1\\nv 10 4 3\\nh 1 10 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3\") == \"2\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\nassert solution('''\n4\nh 1 10 1\nh 5 10 2\nv 1 10 1\nv 5 10 3\n''') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n''') == '2'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nh 1 4 1\\nv 2 4 2\\nh 10 2 2\\nv 11 2 3') == '2'\nassert solution('4\\nh 1 4 1\\nh 5 10 2\\nv 1 10 1\\nv 5 10 3') == '4'\n"
    },
    {
        "number": 3162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\nh 1 4 1\nv 2 4 2\nh 10 2 2\nv 11 2 3\n\"\"\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 3') == '4'\nassert solution('3 4') == '-1'\nassert solution('1 2 3') == '2'\nassert solution('4 5 6') == '3'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '4'\nassert solution('''3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '-1'\n\nassert solution('''3 4\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '6'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\n\nassert solution('''5 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '4'\n\nassert solution('''2 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '2'\n\nassert solution('''2 2\n1 0\n3 3\n0 1\n1 0\n1 1\n''') == '-1'\n\nassert solution('''5 1\n2\n1 1\n1 2\n0 0\n1 1\n''') == '1'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 3') == '4'\nassert solution('3 4') == '-1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2', 'Test #1 failed'\n\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4', 'Test #2 failed'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4\\n1 0 2 0\\n3 5 4 0\\n2 1 0 0\\n3 0 4 5\\n') == '2'\nassert solution('3 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '4'\nassert solution('6 3\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '-1'\nassert solution('10 2\\n1 2 3\\n4 5 6\\n7 8 0\\n4 2 3\\n6 5 1\\n0 7 8\\n') == '-1'\nassert solution('1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n') == '1'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 3') == '4'\nassert solution('1 2 3') == '1'\nassert solution('4 5 6') == '-1'\nassert solution('7 8 0') == '3'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '2'\nassert solution('3 3') == '4'"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == '2', 'first'\nassert solution('3 3') == '4','second'\n"
    },
    {
        "number": 3163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '2'\nassert solution('''\n3 3\n1 2 3\n4 5 6\n7 8 0\n4 2 3\n6 5 1\n0 7 8\n''') == '4'\nassert solution('''\n2 4\n1 0 2 0\n3 5 4 0\n2 1 0 0\n3 0 4 5\n''') == '-1'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '2'\nassert solution('''\n7\n1 2 3 4 5 3\n''') == '3'\nassert solution('''\n4\n1 1 1 2 2\n''') == '2'\nassert solution('''\n8\n1 2 3 3 4 2\n''') == '4'\nassert solution('''\n7\n1 2 3 2 2 2\n''') == '3'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 3 4 2') == '2'\nassert solution('8 1 2 1 3 1 3 1 2') == '4'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n10\n2 1 2 3 4 1 4 2 3 4 5\n''') == '4'\n\nassert solution(\n'''\n7\n1 1 1 2 2 2\n''') == '2'\n\nassert solution(\n'''\n8\n1 1 1 1 2 2 2\n''') == '3'\n\nassert solution(\n'''\n10\n3 3 3 3 3 2 3 2 3\n''') == '3'\n\nassert solution(\n'''\n8\n1 1 1 1 1 1 2 2\n''') == '3'\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == None, \"This test requires a non-empty input.\"\nassert solution('') == '', \"This test requires a non-empty input.\"\nprint(\"All tests are passed.\")"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n3\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n1\n5\n3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n5\n4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n3\n2\n3\n1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '4'"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n1 2 3\n1 2\n3\n1''') == '2'\n\n'''"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input_1) == '2'\nassert solution(example_input_2) == '4'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\"\nassert solution([1, 2, 1, 3, 1, 3, 1, 2]) == \"2\""
    },
    {
        "number": 3164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n2 4 2 4\n''') == '2', 'Wrong answer'\nassert solution('''\n1\n1\n''') == '1', 'Wrong answer'"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3 4 4\n1 1 2 1\n1 2 1 1\n1 3 2 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n10 10 10\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n\"\"\") == \"103\"\nassert solution(\"\"\"\n10 10 10\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n\"\"\") == \"110\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2''') == \"4\"\nassert solution('''2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == '4'\nassert solution('1 1 1') == '0'\nassert solution('2 2 2') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 2') == '4'\nassert solution('1 1 1') == '4'\nassert solution('2 2 2') == '0'\nassert solution('1 1 1 2') == '2'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\nprint('1st Test Cases Passed!')\n\nassert solution('''\n1\n''') == '0'\nprint('2nd Test Cases Passed!')\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n''') == '4'\n"
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 2 2\n1 1 1\n2 2 1\n2 2 2 1\n1 1 1 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5 5 5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n1 2 1\n1 3 1\n4 5 1\n3 4 1\n2 4 1\n\"\"\") == \"23\""
    },
    {
        "number": 3165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 3\") == \"impossible\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\") == \"impossible\"\nassert solution(\"4 3\") == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2\"\n    ) == \"1\"\nassert solution(\n    \"4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\"\n    ) == \"impossible\"\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '1'\nassert solution('4 2') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"impossible\"\nassert solution(\"3 4\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\") == \"1\""
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n0 2') == '1'\nassert solution('4 2\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == 'impossible'\nassert solution('5\\n0 1\\n0 1\\n1 0\\n1 0\\n2') == '2'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '1'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 2\n''') == '2'\nassert solution('''\n4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2') == '1'\nassert solution('4 5\\n0 0 1 1\\n1 0 0 1\\n0 1 0 0\\n0 0 1 0\\n1 2\\n1 3') == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == '1'\nassert solution('''3 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2\n''') == 'impossible'\n"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '1'\nassert solution('4 2') == 'impossible'\nassert solution('1 2') == 'impossible'\nassert solution('4 2') == 'impossible'"
    },
    {
        "number": 3166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n0 0 1 1\n1 0 0 1\n0 1 0 0\n0 0 1 0\n1 2''') == '1'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 2 1\n3\n0 9\n2 6\n7 7''') == '35'\n\nassert solution('''5\n1 1 2 1\n3\n0 10\n2 6\n7 7\nSample Output 3:\n8\n4\n1\n2\n''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4\n1 1 2 1\n3\n0 9\n2 6\n7 7''') == '18', 'first example'\nassert solution('''5 4\n1 1 2 1\n3\n0 10\n2 6\n7 7''') == '8','second example'\nassert solution('''3 4\n1 2 2 3\n0 1 2\n2 3 4''') == '3', 'third example'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '8'"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(t1) == \"9\"\nassert solution(t2) == \"11\""
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 4\n1 1 2 1\n3\n0 10\n2 6\n7 7''') == '35'\n\nassert solution('''5 7\n1 1 2 1\n3\n0 10\n2 6\n7 7\n10''') == '18'\n\nassert solution('''3 2\n1 1 2\n2\n0 10\n2 6\n7 7''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\nSample Output 3:\n35\n18\n3\n\nSample Input 4:\n11 3\n1 1 2 1\n3\n0 10\n2 6\n7 7\nSample Output 4:\n8\n2\n1\n\nSample Input 5:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 5:\n20\n16\n6\n\nSample Input 6:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 6:\n20\n16\n6\n\nSample Input 7:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 7:\n20\n16\n6\"\"\") == \"\"\"35\n18\n3\n\nSample Input 8:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 8:\n8\n2\n1\n\nSample Input 9:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 9:\n8\n2\n1\n\nSample Input 10:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 10:\n8\n2\n1\n\nSample Input 11:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 11:\n8\n2\n1\n\nSample Input 12:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 12:\n8\n2\n1\n\nSample Input 13:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 13:\n8\n2\n1\n\nSample Input 14:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 14:\n8\n2\n1\n\nSample Input 15:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 15:\n8\n2\n1\n\nSample Input 16:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 16:\n8\n2\n1\n\nSample Input 17:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 17:\n8\n2\n1\n\nSample Input 18:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 18:\n8\n2\n1\n\nSample Input 19:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 19:\n8\n2\n1\n\nSample Input 20:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 20:\n8\n2\n1\n\nSample Input 21:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 21:\n8\n2\n1\n\nSample Input 22:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 22:\n8\n2\n1\n\nSample Input 23:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 23:\n8\n2\n1\n\nSample Input 24:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 24:\n8\n2\n1\n\nSample Input 25:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 25:\n8\n2\n1\n\nSample Input 26:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 26:\n8\n2\n1\n\nSample Input 27:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 27:\n8\n2\n1\n\nSample Input 28:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 28:\n8\n2\n1\n\nSample Input 29:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 29:\n8\n2\n1\n\nSample Input 30:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 30:\n8\n2\n1\n\nSample Input 31:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 31:\n8\n2\n1\n\nSample Input 32:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 32:\n8\n2\n1\n\nSample Input 33:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 33:\n8\n2\n1\n\nSample Input 34:\n10 5\n4 4 4 4\n4\n0 1 2 3\n1\n0 5\n2\n1 3\nSample Output 34:\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 4\n1 1 2 1\n3\n0 9\n2 6\n7 7\n''') == '35'\nassert solution('''\n10 4\n1 1 2 1\n3\n0 10\n2 6\n7 7\n''') == '18'\nassert solution('''\n11 3\n3 7 10\n3\n0 10\n2 6\n7 7\n''') == '8'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''8\n2 6\n7 7\nSample Output 2:\n2\n1\n''') == '2'\n"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 4') == '35'\nassert solution('11 3') == '8'\nassert solution('10 5') == '2'\nassert solution('9 3') == '2'"
    },
    {
        "number": 3167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8\n1 2\n5 6\n4\n5 8\n''') == '8'\n\nassert solution('''\n10\n1 1 2 1\n3\n0 9\n2 6\n7 7\nSample Output 3:\n\n''') == '18'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2\\n1\\n3\\n4\") == \"1\\n2\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\") == \"0\\n1\\n2\\n4\\n6\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1\\n2\\n4\\n6\\n\"\nassert solution(\"8\") == \"1\\n2\\n3\\n5\\n6\\n7\\n8\\n\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4') == '0\\n1\\n3\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5') == '0\\n1\\n3\\n6'\nassert solution('6\\n5\\n4\\n3\\n2\\n1') == '0\\n1\\n2\\n3\\n4\\n5'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n3\\n4\\n\") == \"0\\n1\\n3\\n6\"\nassert solution(\"5\\n3\\n2\\n4\\n1\\n5\\n\") == \"0\\n1\\n2\\n4\\n6\""
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\\n3\") == \"0 1\"\nassert solution(\"5\\n1\\n3\\n2\\n4\\n5\") == \"0 1 2 4\"\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n1\") == \"0\\n1\\n3\\n6\"\nassert solution(\"4\\n1\\n2\\n3\") == \"0\\n1\\n2\\n3\""
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0\\n1\\n3\\n6'\nassert solution('5\\n3\\n2\\n4\\n1\\n5\\n') == '0\\n1\\n2\\n4\\n6'\n"
    },
    {
        "number": 3168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1 0'\nassert solution('4') == '0 1 3'"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '2 4 1 3'\nassert solution('8') == '5 4 3 1 2'\nassert solution('5') == '4 3 2 1'\n\n\"\"\"\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Point({self.x}, {self.y})\"\n\n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n\nclass Line:\n    def __init__(self, start: Point, end: Point):\n        self.start = start\n        self.end = end\n\n    def __repr__(self):\n        return f\"Line({self.start}, {self.end})\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '2 4 1 3'\nassert solution('5') == '1 4 1 2 3'\nassert solution('6') == '1 2 3 4 5'\nassert solution('7') == '1 3 5 4 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 3 2 1\"\nassert solution() == \"1 1 3 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 3 2 2\n1 1 3 2\n2 4 7 3\n3 3 5 3\n''') == '2 4 1 3'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 0 1\") == \"2 4 0 1\"\nassert solution(\"4 0 3 1\") == \"4 3 1 2\"\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '1 2 3'\nassert solution('4') == '4 3 1 2'\nassert solution('4') == '4 3 1 2'\n"
    },
    {
        "number": 3169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3 2 2\\n1 1 3 2\\n2 4 7 3\\n3 3 5 3\\n') == '2 4 1 3'\nassert solution('4\\n0 0 1 1\\n1 2 0 3\\n2 2 3 3\\n4 0 3 1\\n') == '4 3 1 2'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'Theta wins'\nassert solution() == 'Theta loses'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\nassert solution(\"1A\") == \"Theta wins\""
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution(\n    '89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\", \"Your function doesn't work\"\nassert solution(\n    \"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\nSample Output 2:\nTheta wins''') == 'Theta wins'\nassert solution('''89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\nSample Output 2:\nTheta wins''') == 'Theta wins'\nassert solution('''456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\nSample Output 2:\nTheta wins''') == 'Theta wins'\nassert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\nSample Output 2:\nTheta wins''') == 'Theta wins'\nassert solution('''89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\nSample Output 2:\nTheta loses''') == 'Theta loses'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\n89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49''') == 'Theta wins'\n\nassert solution('''ABCDATABECDVADAD\nDCDADGBAADBBA\nCADBABCAB\nBDADCDBCCDD''') == 'Theta wins'\n\nassert solution('''TTTTTTTTTT\nTAAAQQQQQQQQ\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT\nTTTTTTTTTT''') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5') == 'Theta wins'\nassert solution('89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49') == 'Theta wins'\n"
    },
    {
        "number": 3170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"23456789TJ23456789TJA89Q66JK37T2A4AQK3AK5T8Q24K97JQ5\") == \"Theta wins\"\nassert solution(\"89724TJTA67K4J87Q8T6Q7J2324T558KA99A3KA356QJ6523QK49\") == \"Theta wins\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1\\n') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2\\n') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == 'truther'\nassert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'fabulist'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\nassert solution('3 1\\n1 and charlatan 1\\n1 charlatan 2\\n1 not charlatan 1') == 'truther'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1 not charlatan 1\n1 not charlatan 1\n''') == 'truther'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\n'''\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('\\n'.join(['1 2', '1 charlatan 1', '1 not charlatan 1'])) == 'charlatan'\nassert solution('\\n'.join(['2 1', '1 and fabulist 1 fabulist 2'])) == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"truther\"\nassert solution(\"2 1\") == \"fabulist\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n1 2\n1 charlatan 1\n1 not charlatan 1\n    '''\n) == 'charlatan'\nassert solution(\n    '''\n2 1\n1 and fabulist 1 fabulist 2\n    '''\n) == 'fabulist'\nassert solution(\n    '''\n2 2\n1 and fabulist 1 fabulist 2\n    '''\n) == 'fabulist'\nassert solution(\n    '''\n2 3\n1 and fabulist 1 fabulist 2\n    '''\n) == 'truther'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n\"\"\""
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"truther\"\n\"\"\"\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 charlatan 1\\n1 not charlatan 1') == 'charlatan'\nassert solution('2 1\\n1 and fabulist 1 fabulist 2') == 'fabulist'\n"
    },
    {
        "number": 3171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2\n1 charlatan 1\n1 not charlatan 1\n''') == 'charlatan'\nassert solution('''\n2 1\n1 and fabulist 1 fabulist 2\n''') == 'fabulist'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('4\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\\n') == '3'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"4\", 'Failed test'\nassert solution(\"3\") == \"3\", 'Failed test'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('2') == '1'\nassert solution('1') == '1'\n\n--------------------------------------------------------------------------------\n\n2. Read an array of integers where each element is the index of an array from stdin. The array is sorted according to its values.\n\nFor each array print the number of elements smaller than each element of the array.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single integer $i$ and the array of integers:\n\n    $i$ is the index of an array from stdin.\n\n    $i$ is the size of the array.\n\n    $i$ integers, each is the index of an array from stdin.\n\nOutput\nThe output should contain $n$ integers.\n\nInput Constraints\n1 \\leq n \\leq 100\n1 \\leq i \\leq 100\n1 \\leq a_i \\leq 100\n\nOutput Constraints\n1 \\leq i \\leq 100\n\nSample Input 1:\n2\n1\n2\n4\n5\nSample Output 1:\n0\n0\n0\nSample Input 2:\n3\n1\n4\n5\n3\nSample Output 2:\n0\n1\n0\nSample Input 3:\n1\n2\nSample Output 3:\n0\nSample Input 4:\n2\n1\n2\nSample Output 4:\n0\n0\n\n--------------------------------------------------------\n\n3. Write a program to accept a string from a user and print its string length.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s$ is the string.\n\nOutput\nPrint the string length of the string.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\n5\nSample Input 2:\n1\ncat\nSample Output 2:\n5\nSample Input 3:\n1\ncat\nSample Output 3:\n4\n\n--------------------------------------------------\n\n4. Write a program to accept a string and print its reverse\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a string:\n\n    $s$ is the string.\n\nOutput\nPrint the string in reverse order.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\ntac\nSample Input 2:\n1\ncat\nSample Output 2:\ntca\nSample Input 3:\n1\ncat\nSample Output 3:\nac\n\n--------------------------------------------------------\n\n5. Write a program to accept a string from a user and print the characters of the string in reverse order.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s$ is the string.\n\nOutput\nPrint the characters of the string in reverse order.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\ngcta\nSample Input 2:\n1\ncat\nSample Output 2:\ntac\nSample Input 3:\n1\ncat\nSample Output 3:\ngcta\n\n--------------------------------------------------------\n\n6. Write a program to accept a string from a user and print the characters of the string in a single line of output.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s$ is the string.\n\nOutput\nPrint the characters of the string in single line.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\nc\nSample Input 2:\n1\ncat\nSample Output 2:\nt\nSample Input 3:\n1\ncat\nSample Output 3:\nt\n\n--------------------------------------------------------\n\n7. Write a program to accept a string from a user and print the characters of the string in a single line of output.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s$ is the string.\n\nOutput\nPrint the characters of the string in single line of output.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\nc\nSample Input 2:\n1\ncat\nSample Output 2:\nt\nSample Input 3:\n1\ncat\nSample Output 3:\nt\n\n--------------------------------------------------------\n\n8. Write a program to accept a string from a user and print the characters of the string in a single line of output.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s$ is the string.\n\nOutput\nPrint the characters of the string in single line of output.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\nc\nSample Input 2:\n1\ncat\nSample Output 2:\nt\nSample Input 3:\n1\ncat\nSample Output 3:\nt\n\n--------------------------------------------------------\n\n9. Write a program to accept a string from a user and print the characters of the string in a single line of output.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s$ is the string.\n\nOutput\nPrint the characters of the string in single line of output.\n\nInput Constraints\n1 \\leq n \\leq 100\n\nSample Input 1:\n1\ncat\nSample Output 1:\nc\nSample Input 2:\n1\ncat\nSample Output 2:\nt\nSample Input 3:\n1\ncat\nSample Output 3:\nt\n\n--------------------------------------------------------\n\n10. Write a program to accept a string from a user and print the characters of the string in a single line of output.\n\nInput\nThe first line contains a single integer $n$ (1 \\leq n \\leq 100) indicating the number of lines in the input. Then follow $n$ lines, each containing a single string:\n\n    $s"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '4'\nassert solution('3') == '3'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00\") == \"4\"\nassert solution(\"3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1.00 5.00\\n3.00 3.00\\n4.00 2.00\\n6.00 4.50\\n7.00 1.00') == '4'\nassert solution('3\\n-1.50 -1.00\\n1.50 -1.00\\n0.00 1.00') == '3'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1\\n0.5 0.5\\n3.0 3.0') == '4'\nassert solution('2\\n1.00 1.00\\n3.00 3.00') == '2'\nassert solution('3\\n2.00 2.00\\n1.00 1.00') == '1'\n"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n3.00 3.00\n4.00 2.00\n''') == '2'\nassert solution('''\n3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '3'"
    },
    {
        "number": 3172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\n\nassert solution('''3\n-1.50 -1.00\n1.50 -1.00\n0.00 1.00\n''') == '3'\n\nassert solution('''3\n-1.50 2.00\n1.50 2.00\n0.00 1.00\n''') == '2'\n\nassert solution('''5\n1.00 5.00\n3.00 3.00\n4.00 2.00\n6.00 4.50\n7.00 1.00\n''') == '4'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n\"\"\") == \"16\"\nassert solution(\"\"\"\n2 3 1\nX..\n.?.\n10 1000 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10 50 50 50 50 50 50 50 50 50 50 50\n99.R.9.X.8.R.3.L.1.X.1.L.9.L.9.L.9.R.9.L.8.R.9.L.9.R.8.X.9.L.9.R.9.L.9.R.9.R.9.L.8.L.9.R.8.X.8.R.9.R.9.R.8.L.9.R.9.R.8.R.8.R.8.L.8.R.8.L.9.R.9.R.9.L.9.R.8.R.8.L.9.R.9.L.8.R.9.R.8.R.8.R.8.R.9.R.8.L.8.R.9.R.8.L.9.R.9.L.8.R.9.R.9.R.9.R.9.R.9.L.8.R.9.R.8.L.9.R.9.L.8.R.9.R.8.R.8.L.8.R.8.L.9.R.9.L.8.R.9.L.8.R.9.L.8.R.9.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.L.9.R.8.R.8.R.8.R.8.L.8.R.8.R.8.R.8.L.8.R.8.R.8.R.8.R.8.R.8.L.8.L.8.R.8.R.8.L.9.R.8.R.8.R.8.R.8.R.8.L.8.R.8.L.8.R.9.R.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.L.8.R.8.L.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.L.9.R.8.R.8.R.8.R.8.R.8.L.8.R.8.L.8.R.8.R.8.R.8.R.8.L.8.L.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.L.8.L.8.R.8.R.8.R.8.L.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.L.8.R.8.R.8.L.9.R.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.L.8.R.8.R.8.R.8.L.8.R.8.L.8.R.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.L.8.R.8.L.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.R.8.R.8.L.8.R.8.R.8.R.8.R.8.R.8.R.8.L.8.L.8.R.8.R.8.L.8.L.8.R.8.R.8.L.8.L.8.R.8.R.8.R."
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nassert solution('''\n2 3 1\nX..\n.?.\n10 1000 1\n''') == '10'"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 5 2\nR..?.\n.X...\n100 100 7 100 8\nSample Output 1:\n16\n\nSample Input 2:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output 2:\n10\n''') == \"10\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 5 2\nR..?.\n.X...\n100 100 7 100 8\n''') == '16'\nprint(solution('''2 5 2\nR..?.\n.X...\n100 100 7 100 8\n'''))\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 5 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"16\"\nassert solution(\"3 3 1\\nX..\\n.X..\\n100 100 7 100 8\") == \"10\"\nassert solution(\"10 10 1\\nX.X.\\n.X.X\\n100 100 7 100 8\") == \"100\"\nassert solution(\"2 10 2\\nR..?.\\n.X...\\n100 100 7 100 8\") == \"100\"\nassert solution(\"5 5 1\\nR.X.\\n.X.X\\n100 100 7 100 8\") == \"100\"\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_stdin) == stdout"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 5 2') == '16'\nassert solution('2 3 1') == '10'\nprint('All tests passed')\n\n'''\n\nR, C, K = map(int, input().split())\n\ngrid = []\n\nfor _ in range(R):\n    grid.append(input())\n\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == 'X':\n            continue\n        if i == 0:\n            if j == 0:\n                grid[i][j] = 'R'\n            else:\n                grid[i][j] = 'R'\n                grid[i][j-1] = 'R'\n        elif i == R-1:\n            if j == C-1:\n                grid[i][j] = 'R'\n            else:\n                grid[i][j] = 'R'\n                grid[i][j+1] = 'R'\n        else:\n            if j == 0:\n                grid[i][j] = 'R'\n                grid[i-1][j] = 'R'\n            elif j == C-1:\n                grid[i][j] = 'R'\n                grid[i+1][j] = 'R'\n            else:\n                grid[i][j] = 'R'\n                grid[i-1][j] = 'R'\n                grid[i+1][j] = 'R'\n                grid[i][j+1] = 'R'\n                grid[i][j-1] = 'R'\n\nfor line in grid:\n    print(line)\n\nscores = []\nfor i in range(R):\n    scores.append(map(int, input().split()))\n\nmax_score = 0\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == 'R':\n            continue\n        for k in range(1, K+1):\n            if (i+k) < R:\n                if grid[i+k][j]!= 'X':\n                    if grid[i+k][j] == 'L':\n                        grid[i+k][j] = 'R'\n                    else:\n                        grid[i+k][j] = 'R'\n                        grid[i+k-1][j] = 'R'\n            if (i-k) >= 0:\n                if grid[i-k][j]!= 'X':\n                    if grid[i-k][j] == 'L':\n                        grid[i-k][j] = 'R'\n                    else:\n                        grid[i-k][j] = 'R'\n                        grid[i-k+1][j] = 'R'\n            if (j+k) < C:\n                if grid[i][j+k]!= 'X':\n                    if grid[i][j+k] == 'L':\n                        grid[i][j+k] = 'R'\n                    else:\n                        grid[i][j+k] = 'R'\n                        grid[i][j+k-1] = 'R'\n            if (j-k) >= 0:\n                if grid[i][j-k]!= 'X':\n                    if grid[i][j-k] == 'L':\n                        grid[i][j-k] = 'R'\n                    else:\n                        grid[i][j-k] = 'R'\n                        grid[i][j-k+1] = 'R'\n\nfor line in grid:\n    print(line)\n\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == 'R':\n            continue\n        for k in range(1, K+1):\n            if (i+k) < R:\n                if grid[i+k][j]!= 'X':\n                    if grid[i+k][j] == 'L':\n                        grid[i+k][j] = 'R'\n                    else:\n                        grid[i+k][j] = 'R'\n                        grid[i+k-1][j] = 'R'\n            if (i-k) >= 0:\n                if grid[i-k][j]!= 'X':\n                    if grid[i-k][j] == 'L':\n                        grid[i-k][j] = 'R'\n                    else:\n                        grid[i-k][j] = 'R'\n                        grid[i-k+1][j] = 'R'\n            if (j+k) < C:\n                if grid[i][j+k]!= 'X':\n                    if grid[i]["
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('2 2 1') == '1'\nassert solution('1 1 2') == '2'\n"
    },
    {
        "number": 3173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3 1\nX..\n.?.\n100 100 7 100 8''') == '16'\nassert solution('''2 4 2\nR..\n.X.\n100 100 7 100 8''') == '16'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == \"1.414\"\nassert solution('6 11') == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '1.414'\nassert solution('6 11') == '5.657'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\nassert solution('''\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n''') == '5.657'\nprint('all tests passed')\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"1.414\"\nassert solution(\"6 11\") == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == '1.414'\nassert solution('6 11') == '5.657'\nassert solution('0 0 1') == '1.414'\nassert solution('0 1 2') == '1.414'\nassert solution('1 0 3') == '1.414'\n"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 3') == '1.414'\nassert solution('7 6') == '5.657'"
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3\n0 4 4\n1 5 1\n2 6 1\n\"\"\") == \"1.414\"\nassert solution(\"\"\"\n6 11\n0 0 1\n0 1 2\n1 0 3\n1 1 4\n5 5 1\n20 20 10\n\"\"\") == \"5.657\""
    },
    {
        "number": 3174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3\n0 4 4\n1 5 1\n2 6 1\n''') == '1.414'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1 2') == '0.433'\nassert solution('3 2 1 1') == '0.433'\nassert solution('3 2 2 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 2 2 2') == '1.0'\nassert solution('4 1 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3 1 1 1') == '0.433'\nassert solution('4\\n1 1 1 1') == '1.0'\nassert solution('4\\n3 1 1 1') == '0.433'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4 1 1 1 1\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n3 1 1 1\n\"\"\") == \"0.433\"\nassert solution(\"\"\"\n4 4 4 4 4\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n\"\"\") == \"0.0\"\nassert solution(\"\"\"\n6 4 4 4 4 4 4\n\"\"\") == \"0.0\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 1') == '0.433'\nassert solution('4 1 1 1 1 1') == '1.0'\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1 1 1 1\n''') == \"1.0\"\nassert solution('''\n3 1 1 1\n''') == \"0.433\"\n\nassert solution('''\n5 1 1 1 2 2\n''') == \"2.0\"\nassert solution('''\n5 4 1 1 2 2\n''') == \"0.75\"\nassert solution('''\n8 1 1 1 1 1 1 2 2\n''') == \"1.0\"\n''') == \"0.75\"\n"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5 3\") == \"1.0\"\nassert solution(\"4 4 2\") == \"0.5\"\nprint(solution(open('input.txt')))"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1 1 1 1') == '1.0'\nassert solution('3 1 1 1') == '0.433'"
    },
    {
        "number": 3175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3 1 1 1') == '1.0'\nassert solution('2 1 1 1') == '0.433'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == \"5\"\nassert solution('''8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == \"36\""
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5') == '5'\nassert solution('8 10') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n''') == '5'\nassert solution('''\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n''') == '36'\n\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestThis(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        main()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        print('\\n'.join(output))\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n\"\"\"\n        output = \"\"\"\n5\n4\n1 1\n1 2\n2 2\n3 2\n3 3\n\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"\n8 10\n1 1 15\n2 2 30\n1 2 8\n2 1 7\n3 2 8\n2 3 7\n4 2 100\n3 3 15\n\"\"\"\n        output = \"\"\"\n36\n5\n1 1\n1 2\n2 2\n3 2\n3 3\n4 2\n4 3\n5 5\n\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5') == '5'\nassert solution('6 9') == '5'\nassert solution('5 8') == '8'\nassert solution('8 8') == '8'"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5\\n') == '5\\n4\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\\n', \"First\"\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15\\n') == '36\\n5\\n1 1\\n1 2\\n2 2\\n3 2\\n3 3\\n', \"Second\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 1 5\\n2 1 5\\n1 2 4\\n2 3 5\\n3 2 30\\n3 3 5') == '5'\nassert solution('8 10\\n1 1 15\\n2 2 30\\n1 2 8\\n2 1 7\\n3 2 8\\n2 3 7\\n4 2 100\\n3 3 15') == '36'\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"8 10\") == \"36\"\n"
    },
    {
        "number": 3176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 5\n1 1 5\n2 1 5\n1 2 4\n2 3 5\n3 2 30\n3 3 5\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"1 2 3\") == \"2 3 1\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n2 1\n1 2\n''') == '1'\n\nassert solution('''3 2\n2 1 3\n1 3\n2 3\n''') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\""
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"5 7\") == \"1,2,3,4,5\"\nassert solution(\"3 1\") == \"1,2,3\"\nassert solution(\"3 10\") == \"1,2,3,4,5,6,7,8,9,10\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 1\n2 1\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n2 1 3\n1 3\n2 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 3\n1 2 3 4 5 6\n1 6 4 3 2 5\n4 2 3 1 5 6\n4 3 6 2 5 1\n5 1 2 3 6 4\n5 3 6 2 1 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n2 1\\n1 2\\n') == '1'\nassert solution('3 2\\n2 1 3\\n1 3\\n2 3\\n') == '3'\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2 1\n2 1\n1 2\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n3 2\n2 1 3\n1 3\n2 3\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n4 3\n2 1 4\n1 3\n2 4\n3 4\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n5 4\n1 3 5\n1 4\n2 3\n2 4\n3 4\n\"\"\"\n) == \"4\"\n\nassert solution(\n\"\"\"\n6 5\n3 5 1\n5 2 1\n5 4\n3 4\n4 5\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n2 1\n1 2\n''') == '1'\nassert solution('''\n3 2\n2 1 3\n1 3\n2 3\n''') == '3'\n\nassert solution('''\n5 1\n1 2 3 4 5\n1 3 2 4 5\n1 4 3 2 5\n1 5 4 3 2\n1 2 5 4 3\n1 4 5 2 3\n''') == '2'\n\nassert solution('''\n4 1\n1 2 3 4\n1 3 2 4\n1 4 3 2\n1 5 4 3 2\n1 2 3 5 4\n1 4 5 2 3\n''') == '4'\n\nassert solution('''\n5 1\n1 3 2 4\n1 4 3 2\n1 5 4 3 2\n1 2 3 5 4\n1 4 5 2 3\n''') == '5'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n4 2\n2 2\n3 4\n1 4''') == '1'\nassert solution('''4 4\n1 2\n2 3\n3 4\n3 4''') == '2'\nassert solution('''5 2\n1 2\n3 4\n2 3\n3 4\n2 3\n3 5''') == '1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5') == '5'\nassert solution('8 8') == '-1'\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"5\"\n\"\"\"\n\ntest_cases = int(input())\nfor i in range(test_cases):\n    n, m = map(int, input().split())\n    costs = list(map(int, input().split()))\n    cycle = [[] for _ in range(n)]\n    decorations = {}\n    for i in range(m):\n        a, b = map(int, input().split())\n        if b not in decorations:\n            decorations[b] = []\n        decorations[b].append(a)\n        if a not in cycle[b - 1]:\n            cycle[b - 1].append(a)\n\n    # print(cycle)\n    # print(decorations)\n\n    min_cost = float('inf')\n    if len(decorations) < 3:\n        for i in range(n):\n            min_cost = min(min_cost, costs[i] + costs[i + 1])\n    else:\n        for i in range(n):\n            # if cycle[i]:\n            #     min_cost = min(min_cost, costs[i] + costs[i + 1])\n            #     continue\n            # else:\n            #     cycle[i].append(i + 1)\n            #     cycle_cost = costs[i] + costs[i + 1]\n            #     for key in decorations:\n            #         if key in cycle[i]:\n            #             cycle_cost = min(cycle_cost, costs[i] + costs[i + 1] + 2 * key)\n            #         else:\n            #             cycle_cost = min(cycle_cost, costs[i] + costs[i + 1])\n            #     min_cost = min(min_cost, cycle_cost)\n            if not cycle[i]:\n                cycle[i].append(i + 1)\n                min_cost = min(min_cost, costs[i] + costs[i + 1])\n                continue\n            else:\n                cycle_cost = costs[i] + costs[i + 1]\n                for key in decorations:\n                    if key in cycle[i]:\n                        cycle_cost = min(cycle_cost, costs[i] + costs[i + 1] + 2 * key)\n                    else:\n                        cycle_cost = min(cycle_cost, costs[i] + costs[i + 1])\n                min_cost = min(min_cost, cycle_cost)\n    # print(min_cost)\n    if min_cost == float('inf'):\n        print(-1)\n    else:\n        print(min_cost)\n\n\"\"\"\nInput:\n5\n5\n2 4\n3 5\n1 5\n3 6\n1 6\nOutput:\n5\n\nInput:\n6\n5\n2 4\n3 5\n1 5\n3 6\n1 6\nOutput:\n5\n\nInput:\n6\n5\n2 4\n3 5\n1 5\n3 6\n1 6\nOutput:\n-1\n\"\"\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '-1', f\"Your solution ({solution('1 2 3 4')}) doesn't work!\"\nprint('All tests passed!')"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"3\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 8\") == \"-1\"\nassert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 5\") == \"5\"\nassert solution(\"10 10\") == \"20\"\nassert solution(\"6 3\") == \"3\""
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 8') == '-1'\nassert solution('6 5') == '5'\nprint('All tests passed.')"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 8\\n1 4\\n4 5\\n1 5\\n1 2\\n1 3\\n2 3\\n3 5\\n2 5\\n') == '-1'\nassert solution('6 5\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == '5'\nassert solution('5 6\\n2 4\\n3 5\\n1 5\\n3 6\\n1 6\\n') == '6'"
    },
    {
        "number": 3178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 8\") == \"-1\"\nassert solution(\"6 5\") == \"5\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 1\n5 1\n5 5\n4 2\n\"\"\") == \"4.00\"\nassert solution(\"\"\"\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n\"\"\") == \"9.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 3\n-8 -8\n0 -1\n8 -8\n1 0\n0 10\n-1 0\n''') == '9.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n1 1\\n5 1\\n5 5\\n4 2\") == \"4.00\"\nassert solution(\"6 3\\n-8 -8\\n0 -1\\n8 -8\\n1 0\\n0 10\\n-1 0\") == \"9.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 1\n1 1\n5 1\n5 5\n4 2\n''') == '4.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '1.00'\nassert solution('6 3') == '9.00'\nassert solution('6 1') == '4.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3') == '9.00'\nassert solution('3 2') == '5.00'"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 1\") == \"4.00\"\nassert solution(\"6 3\") == \"9.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1.00'\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 1\\n5 1\\n5 5\") == \"3.00\"\nassert solution(\"3 3\\n-1 -1\\n1 -1\\n1 1\") == \"2.00\"\n"
    },
    {
        "number": 3179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '0.50'\nassert solution('1 1') == '0.50'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"2 1 2 3\"\nassert solution(\"3 3 4\") == \"1 2 1 2\"\nassert solution(\"3 3 4\") == \"1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n'\nassert solution('''4 3 2\nPAINT 2 0 0 3 3\nSAVE\nSAVE 1\nPAINT 2 1 1 2 2\nLOAD 1\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\nassert solution('''4 3 2\nPAINT 2 0 0 3 3\nSAVE\nSAVE 2\nPAINT 3 0 3 3 3\nLOAD 2\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1 2 1 2\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\n\") == \"2 1 2 3\"\nassert solution(\"5 3 2\\nPAINT 2 0 0 3 3\\nPAINT 3 0 3 3 3\\nPAINT 3 1 3 3 3\\n\") == \"1 2 1 2\"\nassert solution(\"5 3 2\\nPAINT 2 0 0 3 3\\nSAVE\\nPAINT 3 0 3 3 3\\nLOAD 1\\n\") == \"3 1 1\"\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n''') == '2 1 2 3\\n1 2 1 2\\n2 1 2 3\\n1 2 1 2\\n'\nassert solution('''\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\nSample Output 2:\n3 1 1\n1 3 1\n1 1 1\n1 2 1\n''') == '3 1 1\\n1 3 1\\n1 1 1\\n1 2 1\\n'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 2') == '2 1 2 3'\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 2') == '2 1 2 3'\n\n----Hints----\nUsing enumerate\nUsing lists and dicts\n'''"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == \"2 1 2 3\"\nassert solution('''\n5 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n''') == \"1 2 1 2\"\n'''\n"
    },
    {
        "number": 3180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 1 1\\n1 2 1\\n1 1 1\\n2 1 1'\nassert solution('3 3 4\\nPAINT 3 0 0 1 1\\nSAVE\\nPAINT 2 1 1 2 2\\nLOAD 1\\n') == '1 1 1\\n1 2 1\\n1 1 1\\n2 1 1\\n1 2 1\\n2 1 1\\n1 1 1\\n'\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == '1 4 2 3'\nassert solution('5 1\\n') == '-1'"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"-1\"\nassert solution(__import__(\"sys\").stdin.read()) == \"1 4 2 3\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '-1'\nassert solution('4 3') == '1 4 2 3'\n\n-----Explanation-----\nSample case 1:\n\nThe longest monotone subsequence of length 3 (ascending) is {1, 2, 3}.\n\nSample case 2:\n\nThe longest monotone subsequence of length 2 (descending) is {2, 3}.\n\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 4 2 3''') == '1 4 2 3'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == '1 4 2 3'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1 2'\nassert solution('5 1') == '-1'\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"1 4 2 3\"\n\"\"\"\n"
    },
    {
        "number": 3181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1 4 2 3\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 1\\n1 3') == '1'\nassert solution('4 2\\n2 1\\n1 3') == '0'\nassert solution('3 2\\n2 1\\n1 3') == '1'\nassert solution('3 3\\n2 1\\n1 3') == '3'\nassert solution('3 3\\n2 3\\n1 3') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5 0\") == \"0\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n4 2\n2 1\n1 3\n''') == '1'\nassert solution('''\n4\n5 0\n2 6\n8 6\n5 7\n''') == '0'\n'''\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '1'\nassert solution('5 0') == '1'\nassert solution('2 1') == '1'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1', \"Wrong answer in test case 3\"\nassert solution('4') == '0', \"Wrong answer in test case 4\"\nassert solution('5') == '1', \"Wrong answer in test case 5\"\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n4 2\n2 1\n1 3\n\"\"\") == \"1\", \"First\"\nassert solution(\"\"\"\n3\n5 0\n2 6\n8 6\n5 7\n\"\"\") == \"0\", \"Second\""
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 0\n2 6\n8 6\n5 7\n''') == '1'\n\nassert solution('''4 2\n2 1\n1 3\nSample Output 3:\n2\n\nSample Input 4:\n4\n1 1\n2 1\n3 1\nSample Output 4:\n0\n''') == '0'\n"
    },
    {
        "number": 3182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 0') == '0', \"Should be zero\"\nassert solution('2 6') == '1', \"Should be one\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\n\nassert solution('''\n1 1 0 1\n0 1 1000 100\n''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''\n2 1 0 1\n0 1 1000 100\n''') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\nassert solution(\"2 10 0 3\") == \"10 1000\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\""
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '4 140'\nassert solution('''\n4 5 4 0 3\n0 1 4 10\n1 2 2 10\n0 2 4 30\n2 3 4 10\n''') == '10 100000'"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100\"\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 0 4') == '4 0'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 0 3') == '4 140'\nassert solution('2 1 0 1') == '1000 100000'\n"
    },
    {
        "number": 3183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 0 3\") == \"4 140\"\nassert solution(\"2 1 0 1\") == \"1000 100000\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 2') == '3'\nassert solution('8 3') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n10 10\n1 1\n1 2\n4 4\n3 3\n3 3\n3 5\n4 4\n4 4\n4 4\n5 5\n''') == '3'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"5\") == \"impossible\""
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '1'\nassert solution('''\n10 1\n5 6\n7 9\n9 2\n''') == '2'\nassert solution('''\n5 3\n2 4\n7 8\n1 1\n''') == '2'\nassert solution('''\n10 4\n1 2\n2 3\n3 4\n4 5\n5 6\n7 8\n8 9\n9 10\n10 11\n''') == 'impossible'\nassert solution('''\n6 5\n1 2\n2 3\n3 4\n4 5\n6 7\n7 8\n8 9\n9 10\n10 11\n''') == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 1\n0 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1\n0 1\n1 0\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 2\n0 1\n1 0\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n6 1\n0 1\n1 2\n2 2\n3 3\n4 4\n5 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 1\n0 2\n1 2\n2 0\n3 2\n4 4\n5 5\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n20 1\n1 20\n5 10\n4 20\n15 10\n10 20\n7 10\n8 10\n20 10\n''') == '3'\nassert solution('''\n1 1\n1 1\n1 1\n''') == 'impossible'\nassert solution('''\n4 5\n4 5\n4 6\n4 7\n4 5\n''') == 'impossible'\nassert solution('''\n3 3\n1 3\n3 2\n4 4\n''') == 'impossible'\nassert solution('''\n7 7\n1 4\n2 5\n5 3\n4 6\n6 7\n7 5\n6 7\n7 6\n7 3\n5 3\n4 3\n''') == '2'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('\\n'.join(map(str, [[3, 2], [4, 6], [2, 1]]))) == '3'\nassert solution('\\n'.join(map(str, [[3, 2], [5, 6], [2, 1]]))) == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('\\n'.join(['3 3', '1 50', '50 70', '70 90', '90 40', '20 60', '60 80', '80 20'])) == '3'\nassert solution('\\n'.join(['3 5', '8 4', '4 5', '5 7', '8 3'])) == 'impossible'\n"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    '6 3',\n    '7 3',\n    '5 7',\n    '3 2',\n    '3 1',\n    '1 3',\n    '2 1',\n    '1 2',\n    '2 1',\n    '1 1',\n    '1 1',\n    '1 2',\n    '2 2',\n    '1 3',\n    '3 2',\n    '1 1',\n    '2 3',\n    '2 2',\n    '3 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '3 2',\n    '3 2',\n    '1 1',\n    '2 3',\n    '2 1',\n    '3 2',\n    '2 2',\n    '2 2',\n    '3 2',\n    '3 2',\n    '3 2',\n    '2 2',\n    '1 3',\n    '1 2',\n    '2 1',\n    '2 2',\n    '1 3',\n    '3 3',\n    '2 2',\n    '3 3',\n    '3 3',\n    '1 1',\n    '2 3',\n    '2 3',\n    '2 2',\n    '3 2',\n    '3 2',\n    '3 2',\n    '2 2',\n    '3 3',\n    '3 3',\n    '2 2',\n    '3 2',\n    '1 3',\n    '3 3',\n    '1 2',\n    '1 2',\n    '2 2',\n    '3 3',\n    '1 3',\n    '1 3',\n    '1 3',\n    '2 2',\n    '3 3',\n    '3 3',\n    '3 3',\n    '3 3',\n    '3 3',\n    '3 3',\n    '2 2',\n    '2 2',\n    '3 3',\n    '3 3',\n    '3 3',\n    '3 3',\n    '2 2',\n    '1 1',\n    '3 3',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',\n    '2 2',"
    },
    {
        "number": 3184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n5 7\\n1 2') == 'impossible'\nassert solution('6 4\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == '4'\nassert solution('2 2\\n1 1\\n1 1') == 'impossible'\nassert solution('2 3\\n1 4\\n3 2\\n3 2\\n2 4') == 'impossible'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(['5', '120']) == '5'\nassert solution(['21', '51090942171709440000']) == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '21'\n\n\"\"\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"120\") == \"5\"\nassert solution(\"51090942171709440000\") == \"21\"\nprint(\"Congratulations, you passed the test!\")\n\"\"\"\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n120\n''') == '5'\nassert solution('''\n51090942171709440000\n''') == '21'\n"
    },
    {
        "number": 3185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('120') == '5'\nassert solution('51090942171709440000') == '21'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 2\") == \"45\"\nassert solution(\"10 1 2\") == \"10\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\nassert solution('''\n100 100 10\n''') == '0'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 1 2\n''') == '45'\nassert solution('''\n3 3 3\n''') == '10'\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 1 2\",\n    \"3 3 3\") == \"10\"\n\nassert solution(\n    \"10 1 2\",\n    \"3 3 3\") == \"45\"\n"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 1 2') == '45'\nassert solution('3 3 3') == '10'"
    },
    {
        "number": 3186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 1 2\") == \"45\"\nassert solution(\"3 3 3\") == \"10\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '20', 'First Example'\nassert solution('''\n10\n2 2\n5 4\n7 2\n''') == 'impossible', 'Second Example'"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\""
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == 'impossible'\nassert solution('10') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('5') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10\\n') == \"20\"\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n5\\n') == \"impossible\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3') == '18'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3') == 'impossible'\nassert solution('5\\n3 1\\n4 1\\n5 9\\n2 6\\n5 3\\n10') == 'impossible'"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n5\n''') == '20'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2 3\\n1 1') == '20'\nassert solution('2\\n1 1\\n3 3') == '20'\nassert solution('4\\n3 2\\n2 2') == '20'\nassert solution('5\\n4 5\\n3 4') == 'impossible'\nassert solution('6\\n3 3\\n1 2') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"10\") == \"impossible\"\nassert solution(\"3 1\") == \"18\"\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == 'impossible'\nassert solution('''\n1\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == '18'\nassert solution('''\n5\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == 'impossible'\nassert solution('''\n3\n4 3\n5 6\n3 1\n''') == '10'\nassert solution('''\n1\n3 1\n4 1\n5 9\n2 6\n5 3\n10\n''') == 'impossible'\n"
    },
    {
        "number": 3187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"impossible\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 5 10\\n7 8 2\\n') == '3'\nassert solution('4\\n-1 -1 -1\\n5 5 5\\n10 10 10\\n') == '11'\nprint('all tests passed')\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"11\"\n\"\"\""
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 5 10\\n7 8 2\") == \"3\"\nassert solution(\"3\\n-1 -1 -1\\n5 5 5\\n10 10 10\") == \"11\"\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 5 10\n7 8 2\n''') == '3'\nassert solution('''\n1 2 1\n1 2 1\n''') == '3'\nassert solution('''\n10 10 10\n7 8 2\n''') == '11'\nassert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n2\n1 2\n''') == '1'\n'''"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '11'"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 1\n110\n011\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 2\n1000\n1000\n0000\n0010\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\nassert solution('1000 1000') == '0'\nassert solution('10000 10000') == '1'\nassert solution('11000000 100000000') == '24'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1\n110\n011\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 2\n1000\n1000\n0000\n0010\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 5\n00010\n00100\n00010\n00010\n00010\n\"\"\") == \"0\""
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n00\n''') == '2'\nassert solution('''\n2 3\n000\n110\n''') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 2') == '0'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"1000 1000\") == \"1\"\nassert solution(\"1000 1000\") == \"1\"\nassert solution(\"1001\") == \"2\"\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '2'\nassert solution('10 1') == '10'\nassert solution('6 9') == '4'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n110\\n011\\n') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010\\n') == '0'\nassert solution('5 5\\n01010\\n10110\\n00010\\n10010\\n01110\\n00111\\n11000\\n10001\\n00011\\n') == '5'\n"
    },
    {
        "number": 3189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n110\\n011\\n') == '2'\nassert solution('4 2\\n1000\\n1000\\n0000\\n0010\\n') == '0'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\n\nassert solution('''3\n1 2 3\n3\n2''') == '1'\n\nassert solution('''3\n1 2 3\n2\n1''') == '2'\n\nassert solution('''3\n1 2 3\n3\n2''') == '1'\n\nassert solution('''3\n2 3 1\n2\n1''') == '1'"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"15\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == \"1\"\nassert solution('''3\n1 3 2\n2\n3''') == \"5\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n3\n2''') == '1'\n\nassert solution('''3\n1 3 2\n2\n3''') == '2'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('1 2 3') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n10 12 5 6 7 8 10 7 4 5 2\n7\n\"\"\") == \"\"\"1\"\"\", \"Wrong Output\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"1\"\n"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\n\n'''"
    },
    {
        "number": 3190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n3') == '1'\nassert solution('3\\n1 3 2\\n2') == '4'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 100 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 100 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n10 1 2\n\"\"\") == \"9\"\n\nassert solution(\"\"\"\n100 1 2\n\"\"\") == \"99\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\nassert solution('12 10 1') == '19'\nassert solution('6 10 1') == '19'\nassert solution('-1 100 20') == '0'\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'\n\n---Submission---\nTest Case 1:\n\nSample Output 1:\n0\n\nSample Output 2:\n19\n\"\"\"\n\nimport sys\nsys.stdin = open(\"input.txt\", \"rt\")"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 2') == '0', \"Wrong\"\nassert solution('10 10 1') == '19', \"Wrong\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 100 20') == '0'\nassert solution('10 10 1') == '19'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 100 20\\n\") == \"0\"\nassert solution(\"10 10 1\\n\") == \"19\""
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3\\n2\\n2\\n') == '1'\nassert solution('1\\n4\\n4\\n2\\n1\\n') == '4'\nassert solution('5\\n2\\n1\\n1\\n1\\n') == '3'\nassert solution('2\\n2\\n4\\n2\\n2\\n') == '5'\nassert solution('2\\n4\\n4\\n2\\n2\\n') == '2'"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n"
    },
    {
        "number": 3191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 100 20\") == \"0\"\nassert solution(\"10 10 1\") == \"19\"\n\"\"\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n a b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'\n\n\"\"\"\n\n\nfrom collections import deque\nimport sys\nsys.setrecursionlimit(1500)\nn=int(input())\nimport_=input()\nimport_=import_.split(\",\")\nimport_=[i.split(\" \") for i in import_]\nf=set()\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"SHIP IT\"\nassert solution(\"2 3\") == \"SHI\"\nassert solution(\"2 3 4 5\") == \"SHIP I\"\nassert solution(\"2 3 4 5 6\") == \"SHI\"\nassert solution(\"1\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n\") == \"SHIP IT\"\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\\n') == 'SHIP IT'\nassert solution('5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\\n') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nclassa classb myfilec execd libe\nclassa 2\nimport classb\nimport myfilec, libe\nclassb 1\nimport execd\nmyfilec 1\nimport libe\nexecd 1\nimport libe\nlibe 0\n''') == 'SHIP IT'\nassert solution('''\na b c d\na 1\nimport d, b, c\nb 2\nimport d\nimport c\nc 1\nimport c\nd 0\n''') == 'c'\n\nNote: If your code is able to handle large inputs (for example, if it can\u2019t handle a single input longer than\u00a0500 lines), then your solution will not be tested on the sample inputs.\n\n\n'''"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\nimport a\nimport b\n\nc = a + b\n\nd = c + 1\n\"\"\") == \"SHIP IT\"\n\nassert solution(\"\"\"\nimport a\nimport b\nimport c\n\nc = a + b + c\n\"\"\") == \"SHIP IT\"\n\nassert solution(\"\"\"\nimport a\n\nb = a + 1\n\"\"\") == \"SHIP IT\"\n\nassert solution(\"\"\"\nimport a\nimport b\nimport c\n\nc = a + b\n\"\"\") == \"SHIP IT\"\n\nassert solution(\"\"\"\nimport a\n\na = b + c\n\"\"\") == \"SHIP IT\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nc 1\\nimport c\\nd 0\") == \"c\"\nassert solution(\"5\\nclassa classb myfilec execd libe\\nclassa 2\\nimport classb\\nimport myfilec, libe\\nclassb 1\\nimport execd\\nmyfilec 1\\nimport libe\\nlibe 0\") == \"c\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport d\\nimport c\\nc 1\\nimport c\\nd 0\\n') == 'c'\nassert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport c\\nc 1\\nimport c\\nd 0\\n') == 'c'\nassert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport c\\nc 1\\nimport c\\nd 0\\n') == 'SHIP IT'\nassert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport c\\nc 1\\nimport c\\nd 0\\n') == 'SHIP IT'\nassert solution('5\\na b c d\\na 1\\nimport d, b, c\\nb 2\\nimport c\\nc 1\\nimport c\\nd 0\\n') == 'SHIP IT'\n"
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nimport a, b, c\na 1\nimport b\na 2\nimport c\nb 2\nimport a\nc 1\n''') == \"SHIP IT\"\n\nassert solution('''\nimport a\na 1\nimport b, c\na 2\nimport c\nb 1\nimport a, b\nc 1\n''') == \"SHIP IT\"\n\nassert solution('''\nimport a, b, c, d\na 1\nimport b, c, d\nb 1\nimport a, b, c\nc 1\nimport a, b, c, d\nd 1\nimport a, b, c, d\n''') == \"SHIP IT\"\n\nassert solution('''\nimport a, b, c\na 1\nimport b, c\nb 1\nimport a, c, d\nc 1\nimport a, b, c, d\nd 1\nimport a, b, c, d\n''') == \"SHIP IT\"\n\nassert solution('''\nimport a, b\na 1\nimport b\nb 1\nimport c, d\nc 1\nimport a, c, d\nd 1\nimport a, b, c\n''') == \"SHIP IT\""
    },
    {
        "number": 3192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"SHIP IT\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''9 10''') == '2'\n''')\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\nassert solution(\"4+2+x\") == \"4\"\nassert solution(\"5+-3+x\") == \"1\"\nassert solution(\"20+-3+x\") == \"1\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"5+3+x\"\"\",\n\"\"\"9 10\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"20+3+x\"\"\",\n\"\"\"0 5\"\"\"\n) == \"2\""
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5+3+x''') == '1'\nassert solution('''20+3+x''') == '2'\n''')\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5+3+x') == '1'\nassert solution('20+3+x') == '2'\n\"\"\"\nimport math\n\nn, p, m = map(int, stdin.split())"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5+3+x\") == \"1\"\nassert solution(\"20+3+x\") == \"2\"\n"
    },
    {
        "number": 3193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5+3+x\"\n) == \"1\"\nassert solution(\n    \"20+3+x\"\n) == \"2\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\nassert solution('''\n2 10\n1 15\n0 20\n''') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n0 1\n1 7\n2 3\n3 3\n''') == 'yes'\nassert solution('''\n5 4\n0 1\n1 7\n2 3\n3 3\n4 4\n''') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10\\n0 15\\n5 20') == 'yes'\nassert solution('1 10\\n1 15\\n0 20') == 'no'\nprint(solution(input()))\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 10\\n0 15\\n5 20') == 'yes'\nassert solution('3 100\\n5 200\\n0 300') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 10\\n1 15\\n0 20') == 'yes'\nassert solution('2 10\\n1 15\\n0 20') == 'no'\nassert solution('2 10\\n1 20\\n0 15') == 'no'\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'\n\nassert solution('''\n5 2\n3 5\n4 1\n5 3\n''') == 'no'\n\nassert solution('''\n6 2\n0 3\n3 6\n4 3\n5 3\n6 5\n7 2\n''') == 'no'\n\nassert solution('''\n2 0\n4 0\n5 0\n''') == 'no'\n\nassert solution('''\n2 10\n0 15\n5 20\n''') == 'yes'"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 10\\n\"\n    \"0 15\\n\"\n    \"5 20\"\n) == \"yes\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"yes\"\nassert solution(\"1 15\") == \"no\"\nassert solution(\"0 20\") == \"no\"\n"
    },
    {
        "number": 3194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'yes'\nassert solution('1 2') == 'no'\n\"\"\"\n\nn, t = list(map(int, input().split()))\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    if a + t <= b:\n        print('yes')\n    else:\n        print('no')"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3 1\n1 1\n3\n3 1''') == '0.25'\nassert solution('''4 4 4\n2\n1 green\n1\n4\n1\n3\n2 yellow\n4 red\n2 red\n4 red\n5 red\n5 red''') == '1'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 4') == '0.25'\nassert solution('10 5 10') == '1'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4 4\") == \"0.25\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"0.25\"\nassert solution(\"4 5\") == \"0.25\"\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 4\\n4\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25', 'Should be 0.25'\nassert solution('''4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0', 'Should be 0'\n"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\n\nassert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\n\nassert solution('''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0.25'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n''') == '0.25'\nassert solution('''\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0'\nassert solution('''\n4 4 4\n4\n4 green\n6 yellow\n10 red\n14 green\n4 red\n''') == '0'\n''')"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n2 green\\n18 yellow\\n34 red\\n5 green\\n') == '0.25'\nassert solution('4\\n4\\n4\\n') == '0.25'"
    },
    {
        "number": 3195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 4 4\n2\n1 green\n1 red\n''') == '0.5'\nassert solution('''3 4 4\n4\n2 green\n5 yellow\n7 red\n''') == '0.25'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1\\n1 2\\n2 1') == '1'\nassert solution('3 2\\n3 1\\n1 2') == '2'\nassert solution('3 3\\n1 3\\n3 1') == 'inf'\nassert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '4'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3') == '3'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\\n\") == \"inf\"\nassert solution(\"5\\n1 2\\n3 4\\n5 6\\n1 2\\n3 4\\n5 6\\n\") == \"6\"\nassert solution(\"10\\n9 10\\n3 4\\n1 5\\n5 1\\n1 5\\n6 9\\n\") == \"1\"\nassert solution(\"5\\n1 2\\n3 4\\n5 6\\n1 2\\n3 4\\n5 6\\n\") == \"5\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 7\") == \"3\"\nassert solution(\"6 8\") == \"inf\""
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('1 2\\n3 2\\n3 2\\n5 5\\n6 6\\n7 7\\n8 8') == '6'\nassert solution('1 2\\n3 2\\n4 2\\n5 5\\n6 6\\n7 7\\n8 8') == 'inf'\nassert solution('1 2\\n3 4\\n5 2\\n6 2\\n7 3\\n8 4') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"3\"\nassert solution(\"6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\") == \"inf\"\nassert solution(\"100 10\\n1 2\\n1 3\\n3 2\\n3 3\\n3 4\\n4 5\\n5 6\\n5 6\\n5 7\\n6 8\\n8 8\\n7 9\\n9 9\\n8 8\") == \"inf\"\nassert solution(\"1000 10\\n1 2\\n1 3\\n3 2\\n3 3\\n3 4\\n4 5\\n5 6\\n5 6\\n5 7\\n6 8\\n8 8\\n7 9\\n9 9\\n8 8\") == \"6\"\nassert solution(\"10000 10\\n1 2\\n1 3\\n3 2\\n3 3\\n3 4\\n4 5\\n5 6\\n5 6\\n5 7\\n6 8\\n8 8\\n7 9\\n9 9\\n8 8\") == \"inf\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3'\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == 'inf'\nassert solution('''\n3\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3'\nassert solution('''\n3\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == 'inf'\nassert solution('''\n10\n5\n1 2\n1 3\n1 4\n3 4\n2 4\n5 4\n2 5\n3 4\n5 5\n4 5\n''') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == '3'\nassert solution('6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('6 1\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4') == 'inf'\nassert solution('6 8\\n1 2\\n1 2\\n3 4\\n4 3\\n5 6\\n6 5\\n3 4') == 'inf'\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == \"3\"\nassert solution('''6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == \"inf\"\nassert solution('''3 5\n1 2\n2 3\n3 4\n''') == \"4\"\nassert solution('''7 6\n1 2\n1 3\n3 4\n2 4\n3 5\n2 6\n''') == \"inf\"\nassert solution('''5 7\n1 2\n3 4\n5 6\n4 7\n''') == \"5\"\n"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '6 7\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n'\n) == '3'\nassert solution(\n    '6 8\\n1 3\\n1 4\\n3 2\\n4 2\\n5 6\\n6 5\\n3 4\\n4 3\\n'\n) == 'inf'"
    },
    {
        "number": 3196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3', \"First\"\nassert solution('''\n6 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n4 3\n''') == 'inf', \"Second\"\nassert solution('''\n7 8\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '5', \"Third\"\nassert solution('''\n7 7\n1 3\n1 4\n3 2\n4 2\n5 6\n6 5\n3 4\n''') == '3', \"Fourth\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 4\"\n) == \"4\"\nassert solution(\n    \"12 3\"\n) == \"2\"\nassert solution(\n    \"1 2 3 4\"\n) == \"4\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('3 3') == '2'\nassert solution('2 5') == '2'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\n\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2 3 4\n''') == '4'\n\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 4\\n1 2 3 4\\n\"\n) == \"4\"\nassert solution(\n    \"12 3\\n2 3 4 5 6 7 4 7 8 8 12 12\\n\"\n) == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 4\n1 2 3 4''') == '4'\nassert solution('''12 3\n2 3 4 5 6 7 4 7 8 8 12 12''') == '2'\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == \"4\"\n\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == \"2\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(solution.__doc__) == \"4\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"4\"\nassert solution(\"12 3\") == \"2\"\nassert solution(\"12 0\") == \"12\"\nassert solution(\"12 12\") == \"12\"\n"
    },
    {
        "number": 3197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n1 2 3 4\n''') == '4'\nassert solution('''\n12 3\n2 3 4 5 6 7 4 7 8 8 12 12\n''') == '2'\nassert solution('''\n10 2\n2 3 4 5 6 7 8 8 9 9 10 10\n''') == '4'\nassert solution('''\n7 7\n7 8 9 9 10 11 11 12 13 13 14 14\n''') == '4'\nassert solution('''\n10 10\n1 1 2 2 2 2 2 2 2 2\n''') == '1'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"NO TYPOS\"\nassert solution(\"4\") == \"NO TYPOS\"\nassert solution(\"1\") == \"NO TYPOS\"\nassert solution(\"0\") == \"NO TYPOS\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"NO TYPOS\""
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\nhoose\nhose\noose\nmoose''') == 'hoose,moose,oose'\nassert solution('''3\nhose\nhoose\noose''') == 'hose,moose,oose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\nhoose') == 'hoose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\nhose\nhoose\noose\nmoose''') == 'hoose'\nassert solution('''1\nhose''') == 'hose'\nassert solution('''6\nhoose\nhose\noese\nmoose\nnoises\nnoise''') == 'hoose'\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"hoose\\nnoises\\nnoise\"\nassert solution(\"4\") == \"hose\\nhoose\\noose\\nmoose\"\n\n'''"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nhose\\noose\\nmoose\\n') == 'hoose'\nassert solution('5\\nhose\\nhose\\nnoises\\nnoise\\n') == 'hoose, noise'"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == \"hoose,noises,noise\"\nassert solution('4') == \"hoose,moose,def\"\nassert solution('10') == \"noise,noises,noises,noise,noises,noise,noises,noise,noises,noise,noise\"\n"
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"NO TYPES\""
    },
    {
        "number": 3198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nhoose\\nhose\\nnose\\nnoises\\nnoise') == 'hoose\\nmoose\\nnoise'\n\nassert solution('4\\nhose\\nhoose\\noose\\nmoose\\n') == 'hose\\nmoose\\nnoise'\n\nassert solution('1\\n') == 'NO TYPO'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n3') == '2'\nassert solution('2 3\\n4') == '5'"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"2 2\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"4 2\") == \"16\"\n\nstdin = \\\n\"\"\"\n10\n3\n\"\"\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '16'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 3\") == \"5\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 1\"\n    \"3\"\n    ) == \"2\"\n\nassert solution(\n    \"2 3\"\n    \"4\"\n    ) == \"0\"\n\nassert solution(\n    \"5 4\"\n    \"10\"\n    ) == \"8\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1\n3\n''') == '2'\nassert solution('''2 3\n4\n''') == '0'\nassert solution('''1 1\n2\n''') == '3'\nassert solution('''1 2\n3\n''') == '1'\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 1\n3\n\"\"\") == \"\"\"2\"\"\"\nassert solution(\"\"\"\n2 3\n4\n\"\"\") == \"\"\"5\"\"\"\nassert solution(\"\"\"\n1 2\n3\n\"\"\") == \"\"\"0\"\"\""
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(solution.__doc__) == \"2 2 16\"\n"
    },
    {
        "number": 3199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '2'\nassert solution('2 3') == '5'\n\nimport os\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1\n50 45 45\"\"\") == \"68.52419365\"\nassert solution(\"\"\"5\n5 5 5 5 5\"\"\") == \"18.071289732\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n2\n50 45 45\n    \"\"\") == \"68.52419365\"\nassert solution(\n    \"\"\"\n1\n100 100 100\n    \"\"\") == \"101.000000000\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"44.72135955\"\nassert solution(\"2\") == \"68.52419365\"\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n50 45 45''') == '68.52419365'\nassert solution('''1\n50 45 45\n40 40 40''') == '6.70583421'\nprint(solution(stdin))\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '44.72135955'\nassert solution('2') == '68.52419365'\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"44.72135955\"\nassert solution(\"2\") == \"68.52419365\"\nprint(solution(*[*map(float, stdin.strip().split())]))\n"
    },
    {
        "number": 3200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"44.72135955\"\nassert solution(\"2\") == \"68.52419365\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '0'\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == \"0\\n1\\n1\\n2\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 4 1') == '1'\n\nassert solution('7 3 4 1 5 2 6') == '0'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 1 5') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 5') == '1\\n3\\n2'\nassert solution('3 4 2 3') == '1\\n3\\n2'\nassert solution('3 2') == '1\\n2'\nassert solution('4 2') == '1\\n2'\n\nn, k, b, m = [int(x) for x in stdin.split()]\n\nres = 1\nfor i in range(1, k+1):\n    res = res * (b ** i) % m\n\nprint(res)\n\nfor i in range(1, k+1):\n    res = res * (b ** (k - i)) % m\n\nprint(res)\n\n\"\"\""
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 5\") == \"1\"\nassert solution(\"3 4 2 3\") == \"2\"\nassert solution(\"10 0\") == \"4\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '2'\nassert solution('5 5 5 5') == '2'\nassert solution('1 3 1') == '3'\nassert solution('2 2 2 2') == '1'\n"
    },
    {
        "number": 3201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1 5') == '1'\nassert solution('3 4 2 3') == '0'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5\\n1 1') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1\n2 2\n3 3\n''') == '3'\nassert solution('''5\n1 1\n2 2\n3 3\n4 4\n5 5\n''') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"3\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 5\\n\"\n    \"1 1\\n\"\n) == \"3\"\n\nassert solution(\n    \"5 3\\n\"\n    \"2 2 3 2 2\\n\"\n) == \"2\""
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 5\n1 1\n''') == '3'\nassert solution('''4 4\n1 1 1 1\n''') == '2'\nassert solution('''5 3\n1 1 1 1\n''') == '1'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 5') == '3'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1\n''') == '1'\nassert solution('''\n2\n1 2\n''') == '2'\nassert solution('''\n3\n2 1 1\n''') == '2'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n') == '3', f'Not an expected result: {solution(stdin)}'\nassert solution('2\\n1\\n') == '2', f'Not an expected result: {solution(stdin)}'\nassert solution('1\\n1\\n') == '1', f'Not an expected result: {solution(stdin)}'\n"
    },
    {
        "number": 3202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 5\\n1 1') == '3'\nassert solution('5 3\\n2 2 3 2 2') == '2'\nprint('\"Run\" is good. Time to check.')\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n100\\n50\\n\") == \"50\"\nassert solution(\"2\\n0\\n50\\n50\\n\") == \"25\"\nprint(solution(*(input().split())))\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '25'\nassert solution('2') == '50'\nprint('all tests passed')"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '50'\nassert solution('0 0') == '50'\nassert solution('100 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n10 10\n10 10\n''') == '50', 'First'\n\nassert solution('''\n2\n5 5\n5 5\n''') == '50', 'Second'\n\nprint('First: %s' % solution('''\n3\n4 0.3\n2 0.2\n'''))\n\nprint('Second: %s' % solution('''\n3\n5 0.3\n2 0.2\n'''))"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n100 100\\n50 50') == '50'\nassert solution('3\\n10 10 10\\n1 1 1 1\\n5 5 5 5') == '25'"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\n100 100\\n50 50\") == \"50\"\nassert solution(\"2\\n0 50\\n50 0\") == \"25\"\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '50'\nassert solution('0 50') == '25'\nassert solution('1 100') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 50\\n50 0') == '25'\nassert solution('1\\n100 100\\n50 50') == '50'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '50'\nassert solution('0 50') == '25'\n"
    },
    {
        "number": 3203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0 50\\n50 0') == '25.0'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n100\n200''') == '160'\nassert solution('''3\n100\n200\n2010''') == '250'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n100\n200\n\"\"\") == \"160\"\nassert solution(\"\"\"\n2\n100\n200\n\"\"\") == \"250\"\nassert solution(\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"250\""
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n100\n200\n2010\n\"\"\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n100\n200\n\"\"\") == \"160\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"160\"\nassert solution(\"3\") == \"250\"\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n100\n200\n100\n100\nSample Output 3:\n250\n''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n100\n200\n2010''') == '160'\n"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '160'\nassert solution('3') == '250'"
    },
    {
        "number": 3204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '160'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4 2\n0 1 1\n2 3 1\n3 4 3\n4 0 3\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n\"\"\"\n) == \"2\"\n\nassert solution(\n\"\"\"\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n\"\"\"\n) == \"0\""
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5') == '2'\nassert solution('10 1 2 3') == '2'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 5') == '0'\nassert solution('3 3') == '0'\nassert solution('9 5') == '1'\nassert solution('20 1') == '20'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4\\n0 1 1\\n2 3 1\\n') == '2'\nassert solution('5 5\\n0 1 3\\n1 2 3\\n2 3 3\\n3 4 3\\n4 0 3\\n') == '0'\n"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\nassert solution('''\n7 7\n0 1 7\n1 2 7\n2 3 7\n3 4 7\n4 5 7\n5 6 7\n''') == '1'\nassert solution('''\n10 4\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n0 1 1\n2 3 1\n3 4 3\n1 2 1\n''') == '2'\n\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\n\nassert solution('''\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '4'\n\nassert solution('''\n8 2\n0 1 2\n1 1 1\n2 3 3\n3 4 3\n4 5 4\n5 5 5\n6 7 7\n7 8 8\n''') == '2'\n\nassert solution('''\n6 5\n0 1 5\n1 2 2\n2 3 3\n3 4 1\n4 5 5\n5 6 6\n6 7 7\n''') == '3'\n\nprint('All Tests Passed!')"
    },
    {
        "number": 3205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n0 1 1\n2 3 1\n''') == '2'\n\nassert solution('''5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\n''') == '0'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 2\\n1 2\\n2 3 4'\nassert solution('''\n4 2\n3 3 2 2\n6 3\n''') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 2\n3 2 2\n2 4 5''') == '-1'\nassert solution('''3\n2 4\n4 8''') == '2 2'\n\nprint(solution('''7\n6 4\n3 8\n1 2\n9 4\n8 3\n7 5\n1 3'''))\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('2 4') == '2 3 4'\nassert solution('3 2') == '-1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 4\n1 2 2 2 2\n1 2 3 3 4\n4 5\n2 4 2 1 4\n2 4 2 2 3\n4 5\n\"\"\") == \"1 1\\n1 2\\n1 2\\n1 2\\n-1\\n\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n3 3 2 1\n3 3 3\nSample Input 3:\n5 2\n1 1 1 1\n2 1 1 2\nSample Output 3:\n1 1\n1 1 1\n2 2\nSample Input 4:\n2 5\n1 2 3 4 5\nSample Output 4:\n-1''') == '1 1 1 1 1 1'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"1 1 2 2 2\"\nassert solution(\"6 3\") == \"1 1 2 2 3 3\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3') == '1 2'\nassert solution('2 3') == '1 2'\nassert solution('4 3') == '1 2'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3\\n3 3 2 1\\n3 3 3\") == \"1 1\\n1 2\\n2 3 4\"\nassert solution(\n    \"4 2\\n3 3 2 2\\n6 3\") == \"-1\"\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n3 3 2 1\n3 3 3\n''') == '1 1\\n1 2\\n2 3 4\\n'\n"
    },
    {
        "number": 3206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n2 2') == '1 1'\nassert solution('2 3\\n3 3 2') == '1 2'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"10.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    3 3 10\n    0 0 D\n    10 1 L\n    ''') == '10.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 10\n0 0 D\n10 1 L\n''') == '10.0\n\nassert solution('''\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\n''') == '10.0\n''')\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3 10\n0 0 D\n10 1 L\n\n2 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D''') == '10.0\\n4.0\\n1.0\\n'''\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2 5\n0 0 L\n1 1 D\n2 2 L''') == '7.0'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '10.0\\n10.0\\n1.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 10\n0 0 D\n10 1 L\nSample Output 1:\n10.0\n10.0\n0.0\n''') == '10.0\\n10.0\\n0.0\\n'\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 10') == \"10.0\"\nassert solution('4 3 7') == \"10.0\""
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'\n\n\"\"\"\n"
    },
    {
        "number": 3207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 10') == '10.0'\nassert solution('4 3 7') == '10.0'\nprint('Congratulations! All test cases passed')\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"ex eoii jpxbmx cvz uxju sjzzcn jzz\") == \"we will avenge our dead parrot arr\"\nassert solution(\"wl jkd\") == \"Impossible\"\n\n'''"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nex eoii jpxbmx cvz uxju sjzzcn jzz\n''') == 'we will avenge our dead parrot arr'\n'''\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\nprint(solution(input()))\n'''"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.readline()\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl jkd''') == 'we will avenge our dead parrot arr'''\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == \"be will will dead hook ship blood sable will\"\nassert solution(example_input_2) == \"Impossible\"\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl jkd''') == 'we will avenge our dead parrot arr'\nprint(solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz\nwl jkd'''))\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ex eoii jpxbmx cvz uxju sjzzcn jzz') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n"
    },
    {
        "number": 3208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''ex eoii jpxbmx cvz uxju sjzzcn jzz''') == 'we will avenge our dead parrot arr'\nassert solution('wl jkd') == 'Impossible'\n\n\"\"\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Hamburg Bremen\\n3') == '68.3'\nassert solution('Amsterdam Rotterdam\\n1') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\n\nassert solution(\"\"\"\nAmsterdam Utrecht\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == \"68.3\"\n\"\"\"\n--- Part Two ---\n\nI now know the time the delays are distributed. How do I know the time of my initial departure?\n\nThe deltas of the delay distribution are sorted. (That is, the delays for the earliest time are in the beginning.) If you multiply all the deltas together, you get the total delay of the first train in minutes.\n\nHowever, there are a few things you should take into account:\n\n1. The trains must arrive at their destination at the same time as they leave it.\n2. If they arrive later, the delay is the difference in the two times.\n3. If they arrive the same time, their total delay is the difference between their departure and arrival times.\n\nBy observing these first three cases, you can determine how many trains must wait and by how much to wait before the first train can arrive.\n\nWhat is the minimum total delay for each train?\n\nWhen you have this information, you can now count the number of trains that must wait and by how much before the first train can arrive.\n\n-----Input-----\n - one line with the judges\u2019 place of origin and destination, these are different.\n - one line with an integer $n$ ($1 \\leq n \\leq 1000$): the number of train connections.\n - $n$ lines, each describing a train connection:\n - the origin and destination of this connection, these are different.\n - an integer $m$ ($0\\leq m\\leq 59$), the departure time in minutes after each full hour.\n - an integer $t$ ($1\\leq t\\leq 300$), the standard journey time (assuming no delays).\n - an integer $p$ ($0\\leq p\\leq 100$), the probability of delays as a percentage.\n - an integer $d$ ($1\\leq d\\leq 120$), the maximum delay in minutes.\n\nAll place names are given as strings of upper and lower case alphabetical characters, of length at most 20. If a train is delayed, then the length of the delay will be a whole number of minutes, and will be uniformly distributed in the range $[1,d]$.\n\n-----Output-----\nOutput a floating point number: the minimum total delay of the trains, in minutes. This number should be accurate up to $10^{-6}$ relative or absolute precision. Output IMPOSSIBLE if the destination is not reachable.\n\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n\"\"\") == '68.3'\n\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == 'IMPOSSIBLE'\n\nassert solution(\"\"\"\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == 'IMPOSSIBLE'\n\nassert solution(\"\"\"\nAmsterdam Rotterdam\n2\nAmsterdam Utrecht 10 22 5 10\nAmsterdam Utrecht 10 22 5 10\n\"\"\") == 'IMPOSSIBLE'"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('Hamburg Bremen') == '68.3', solution('Hamburg Bremen')\nassert solution('Bremen Frankfurt') == 'IMPOSSIBLE', solution('Bremen Frankfurt')\nassert solution('Amsterdam Rotterdam') == 'IMPOSSIBLE', solution('Amsterdam Rotterdam')"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nToby was 17 years old when he met his mother.\nToby has a dog named \"Sammy\".\nSammy is 6 feet tall.\nSammy is 2.5 inches tall.\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nToby was 17 years old when he met his mother.\nToby has a dog named \"Sammy\".\nSammy is 6 feet tall.\nSammy is 2.5 inches tall.\n\"\"\") == \"103.3\"\nassert solution(\"\"\"\nToby was 17 years old when he met his mother.\nToby has a dog named \"Sammy\".\nSammy is 6 feet tall.\nSammy is 2.5 inches tall.\n\"\"\") == \"IMPOSSIBLE\"\nassert solution(\"\"\"\nToby was 17 years old when he met his mother.\nToby has a dog named \"Sammy\".\nSammy is 6 feet tall.\nSammy is 2.5 inches tall.\n\"\"\") == \"103.3\"\nassert solution(\"\"\"\nToby was 17 years old when he met his mother.\nToby has a dog named \"Sammy\".\nSammy is 6 feet tall.\nSammy is 2.5 inches tall.\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\nassert solution('''\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\nassert solution('''\nAmsterdam Rotterdam\n2\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\nassert solution('''\nAmsterdam Rotterdam\n3\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\n'''"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\n''') == '68.3'\nassert solution('''\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\nassert solution('''\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\nassert solution('''\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == 'IMPOSSIBLE', 'Invalid test 1'\nassert solution(\"10\") == '46.25', 'Invalid test 2'\nassert solution(\"20\") == '42.5', 'Invalid test 3'\n\nassert solution(\"Hamburg Bremen\") == '68.3', 'Invalid test 4'\nassert solution(\"Bremen Frankfurt\") == '42.5', 'Invalid test 5'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n*-*.*\n|.|.|\n*.*-*''') == '3'\nassert solution('''2\n*.*\n...\n*.*''') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n***\\n***\") == \"3\"\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"1\""
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\nprint('All test cases passed!')"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '5'\nassert solution('4') == '5'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n*-*.*\\n|.|.|\\n*.*-*') == '3'\nassert solution('2\\n*.*\\n...\\n*.*') == '4'"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\n''') == '2'\n\nassert solution('''\n2\n*.*\n...\n*.*\n''') == '4'\n'''\n"
    },
    {
        "number": 3210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"4\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12210020\") == \"4\"\nassert solution(\"1111\") == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\n\n###Test2\nimport inspect\nimport sys\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8') == '4'\nassert solution('12210020') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"impossible\""
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8') == 'impossible'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"impossible\"\nprint(solution(__import__('sys').stdin.read()))\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"0\") == \"impossible\"\nassert solution(\"0 1 1 1\") == \"impossible\"\nassert solution(\"0 0 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8') == '4'\nassert solution('12210020') == 'impossible'\n"
    },
    {
        "number": 3211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"impossible\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n''') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill will be bitten.\\n\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n500 500 499\\n0 0 999\\n1000 1000 200\\n') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"2\") == \"Bill will be bitten.\\n\"\nassert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\n\"\nassert solution(\"4\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\\nBill enters at (0.00, 800.00) and leaves at (1000.00, 500.00).\\n\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n500 500 499\n0 0 999\n1000 1000 200\n\"\"\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\"\nassert solution(\n\"\"\"\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\n\"\"\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n500 500 499\\n0 0 999\\n1000 1000 200\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\nassert solution(\"4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\") == \"Bill will be bitten.\""
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '3\\n500 500 499\\n0 0 999\\n1000 1000 200\\n'\n) == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution(\n    '4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300\\n'\n) == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n500 500 499\\n0 0 999\\n1000 1000 200') == 'Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).'\nassert solution('4\\n250 250 300\\n750 250 300\\n250 750 300\\n750 750 300') == 'Bill will be bitten.'\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Bill enters at (0.00, 0.00) and leaves at (0.00, 1000.00)\"\nassert solution(\"2\") == \"Bill will be bitten.\"\nassert solution(\"3\") == \"Bill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00)\"\n"
    },
    {
        "number": 3212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n500 500 499\n0 0 999\n1000 1000 200\nSample Input 3:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 3:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n''') == '''\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\n'''\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 3\nxxxxxxxx\n''') == 'xxooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"xxoooooo\""
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\n\nassert solution('''8 3\nxx++ooo+o++\n''') == 'xxooxxooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"++xx+o++\"\n\nassert solution(\"8 5\") == \"xxooooo\"\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 3\n++xx+x++\n''') == '++xx+o++'\nassert solution('''8 4\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\nxxxxxx+x+x+x+x+x+x+x+x\n''') == 'xxoooooo'\nassert solution('''8 3\nxxo+xx++\n''') == 'xxo+xxo+o++'\nassert solution('''8 3\nxxox+xx++\n''') == 'xxoo+xoo++'\nassert solution('''8 3\nx+x++x+x+x\nx+x++x+x+x\nx+x++x+x+x\nx+x++x+x+x\nx+x++x+x+x\nx+x++x+x+x\nx+x++x+x+x\nx+x++x+x+x\n''') == 'xxooo+xoooxx+xooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 2') == 'xxooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([8, 3], '++xx+x++') == '++xx+o++'\nassert solution([8, 3], 'x+xx+xx') == 'xxoooooo'\nprint(solution([8, 3], 'xxo++o++'))\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('8 1') == 'xxooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 3') == '++xx+o++'\nassert solution('10 3') == 'xxoooooo'\n"
    },
    {
        "number": 3213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 3\\n++xx+x++') == '++xx+o++'\nassert solution('8 3\\nxxxxxxxx') == 'xxoooooo'"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"clock: oclock\\the: hen the\\the: hen when\\tis: it\\tis: is\\till: will\\twhen: hen\\twill: till\\tclock: oclock\\tdef: solution\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"***\") == \"***\"\nassert solution(\"The fox said, \\\"When?\\\"\") == \"clock: oclock the when hen\"\n\nprint(solution('''\nLost is Close to Lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n'''))"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"***\"\nassert solution(\"Lost is Close to Lose\") == \"close: lose\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\\"Not till 12 o'clock\\\", replied the hen.\\n\\\"That clock is stopped, it will never strike.\\\" he said.\") == \"clock: oclock\\the: hen the\\tis: it\\tit: is\\till: will\\till: will\\till: will\\till: will\"\n\"\"\"\nfrom collections import defaultdict\nimport re\n\ninput_ = \"\"\"Lost is Close to Lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\n\"\"\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('The fox said, \"When?\"') == 'oclock: clock\\the: hen the\\nhen: he when\\nis: it\\nit: is\\ntill: will\\nwhen: hen\\ntill: will\\nthat clock is stopped, it will never strike.'\n\nassert solution('lost: close lose') == 'close: lose\\nlost: lose\\the: he\\the: he\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis: in\\nis:"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('The fox said, \"When?\"\\n\"Not till 12 o\\'clock\", replied the hen.\\n\"That clock is stopped, it will never strike.\"\\n') == 'clock: oclock\\nhe: hen the\\nhen: he when\\nis: it\\nit: is\\noclock: clock\\ntill: will\\nwhen: hen\\nwil: till\\nwill: till'\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n''') == 'oclock: clock the when hen hen that clock is clock oclock will not clock strike when it is not clock not clock oclock not clock not clock strike clock strike clock not clock not clock not clock not clock not clock strike clock strike clock not clock not clock not clock not clock not clock strike clock strike clock not clock not clock not clock not clock not clock not clock not clock not clock not clock strike clock strike clock not clock not clock not clock not clock not clock strike clock strike clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock not clock"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n\"\"\") == \"\"\"\noclock: clock\nhe: hen the\nhen: he when\nis: it\nit: is\ntill: will\nwhen: hen\nwill: till\n\"\"\".strip()\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"The fox said, \\\"When?\\\"\") == \"clock: oclock\\the: hen the\\till: will\\thay: hen\\tin: is\\tit: is\"\nassert solution(\"The fox said, \\\"When?\\\"\\n\\t\\\"When?\\\"\") == \"clock: oclock\\the: hen the\\till: will\\thay: hen\\tin: is\\tit: is\\tclock: oclock\\tthat clock is stopped, it will never strike.\"\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('lost is close to lose') == 'close: lose'\nassert solution('The fox said, \"When?\"') == 'close: lose'\nassert solution('The fox said, \"When?\" ') == 'close: lose'\nassert solution('The fox said, \"When?\" ') == 'close: lose'\nassert solution('The fox said, \"When?\" ') == 'close: lose'\n"
    },
    {
        "number": 3214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"lost is close to lose\") == \"close: lose\\n\"\nassert solution(\"the fox said, \\\"When?\\\"\") == \"the: fox is when\\n\"\nassert solution(\"the fox said, \\\"Not till 12 o'clock, it will never strike.\\\"\") == \"the: fox, not till, not till, it will never strike.\\n\"\n\n'''"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 2\n3 4\n''') == '1'\n\nassert solution('''10\n1 2 7 3 8 9 4 5 10 6\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n5\n5 8\n5 6\n6 1\n3 4 7\n9 5 2 8\n''') == '2'\nassert solution('''\n1\n10\n9 8 7 6 5 4 3 2 1\n''') == '1'\nassert solution('''\n2\n1 3 2\n''') == '1'\nassert solution('''\n10\n5 8 1 4 7 2 9 3 6 5\n''') == '1'\nassert solution('''\n10\n5 4 1 3 8 2 7 9 6\n''') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('3 8 1 9 4 5 2 7 10 6') == '3 8 1 9 4 5 2 7 10 6'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n10\n1 2 7 3 8 9 4 5 10 6\n''') == '1'\nassert solution(\n'''\n10\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10') == '1'\nassert solution('10 1 2') == '1'\nassert solution('1 2') == '0'\nassert solution('10 7 6') == '2'\nassert solution('7 8 2 6 1 10 3') == '3'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('5\\n1 2 7 3 8 9 4 5 10 6\\n') == '1'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n3 8 1 9 4 5 2 7 10 6\n''') == '1'\nassert solution('''\n10\n3 8 1 9 4 5 2 7 10 6\n3 8 1 9 4 5 2 7 10 6\n''') == '2'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n3 8 1 9 4 5 2 7 10 6\n''') == '0'\n"
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 4 5 6 7 8 9 10\\n') == '1'\nassert solution('1\\n3 1 2 3 4 5 6 7 8 9 10\\n') == '2'\nassert solution('5\\n1 2 3 4 5 6 7 8 9 10\\n') == '3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\nassert solution(\"1.2 1\") == \"2/1\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0.142857') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('-0.9') == '-1/3'\nassert solution('2.7') == '0'\nassert solution('0.00142857') == '1/7'\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0.142857 6\") == \"1/7\"\nassert solution(\"1.6 1\") == \"5/3\"\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0.142857') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('1 2 3') == '3/2'\nprint('Yay!')\n"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nassert solution('0.142857 6 0.142857 6') == '1/7'\nassert solution('1.6 1 0.142857 6') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'"
    },
    {
        "number": 3216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0.142857 6') == '1/7'\nassert solution('1.6 1') == '5/3'\nprint('\u2705 This seems to be what you were looking for!')"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n0 0 0\\n0 0 1\") == \"6\"\nassert solution(\"2\\n0 0 0\\n0 0 1\\n0 1 0\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n0 0 2') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('2\\n0 0 0\\n0 0 1\\n0 1 2') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n''') == '6'\nassert solution('''\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n0 0 0\n0 0 1\n''') == '10'\nassert solution('''\n0 0 0\n0 0 1\n''') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n0 0 0\n0 0 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n0 0 0\n0 0 1\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1\\n') == '6'\n\"\"\""
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n0 0 0\\n0 0 1') == '6'\nassert solution('3\\n0 0 0\\n0 0 1\\n0 0 2') == '10'"
    },
    {
        "number": 3217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\\\n3\n-1 2 -1\n2 2\n1 -1 1\n\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"\\\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"7\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '2'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '3'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\nassert solution('''7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\nprint(solution('''8\n-1 4 -1\n-1 3 2\n-1 4 -1\n1 3 4 2\n0 2 3\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n'''))\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3\n-1 2 -1\n2 2\n1 -1 1\n''') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6\n-1 2 -1\n2 2\n1 -1 1\n3 -1 4\n-1 4 5\n-1 5 -1\n''') == '1'\nassert solution('''\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\n''') == '2'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"1010\") == \"10\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n\ninput:\n1010\noutput:\n2\n\ninput:\n1111\noutput:\n1\n\ninput:\n0\noutput:\n1\n\ninput:\n1\noutput:\n0\n\ninput:\n1000\noutput:\n0\n\"\"\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1001') == \"3\"\nassert solution('1111') == \"1\"\nassert solution('010111') == \"3\"\nassert solution('111') == \"1\"\nassert solution('11111111') == \"8\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1001\") == \"3\"\nassert solution(\"1111\") == \"1\""
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1001') == '3'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1001\n1111\n''') == '3'\nassert solution('''10000\n1111\n''') == '1'\nassert solution('''1010\n10011\n''') == '2'\nassert solution('''1111\n10101\n''') == '3'\nassert solution('''1001\n1111\n''') == '4'"
    },
    {
        "number": 3219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1001\n''') == '3'\nassert solution('''\n1111\n''') == '1'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'LLL'\nassert solution('4') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 1 1 1''') == 'LLLLRRRLR'\nassert solution('''5\n1 2 2 2 1''') == 'LLRRRRRRRLR'\nassert solution('''4\n1 1 1 1''') == 'RRLLRRRRRR'\nassert solution('''5\n1 1 1 2''') == 'LLRRLRLLRL'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == 'RRRRRRRRRRRRR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1\\n\") == \"LLL\"\nassert solution(\"5\\n1 2 2 1 2\\n\") == \"LLRLR\"\nassert solution(\"15\\n1 2 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2\\n\") == \"LLRRLLRRLLRLLRLLRLLRLLRLLRLLRRLLRLLRRLLRLLRRLLRRLRLLRLLRRLLRRLLRLLRLLRLLRLLLLRLLRLLRLLRLLRRLLRLLRLLRLLRLLRLLRRLRLLRLRRLLRLLRRLLRRLLRLLRLRRLLRRLLRRLRLLRLRRLLRLRLRRLLRRLRLRRLLRLLRLLRLLRRLLRLLRRLRLLRLRLRRLLRRLRLRRLLRRLRLRRLLRLLRRLLRLLRLLRLLRLLRLLRLLRLLRLRLRRLLRRLRLRRLLRLLRLLRLLRLLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRRLLRRLRLRR"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n3\n1 1 1\n\"\"\") == \"LLL\"\nassert solution(\n\"\"\"\n5\n1 2 2 1 2\n\"\"\") == \"LLRLR\"\nprint('\"Run\" is good practice.')\n"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'LLL'\nassert solution('5') == 'LLRLR'"
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"LLL\"\nassert solution(\"3\") == \"LLR\"\nassert solution(\"4\") == \"LLRLLRLL\"\nassert solution(\"5\") == \"LLRLLRLLRLL\""
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"LLLRLLRLLRR\""
    },
    {
        "number": 3220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"LRRLR\""
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'Poor girl'\nassert solution('7 7 10') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '25000000000021'\nassert solution('''\n7 5 8\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '49000000000070'\nassert solution('''\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '25000000000021'\nassert solution('''\n3 2 5\n1 2 1000000\n3 1 3000000\n2 4 3000000\n4 1 4000000\n''') == 'Poor girl'\nassert solution('''\n5 7 10\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n7 1 7000000\n''') == 'Poor girl'\nassert solution('''\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n7 1 7000000\n''') == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 7 10') == '49000000000070'\nassert solution('6 6 7') == '25000000000021'"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000''') == '49000000000070'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n\"\"\"\n) == \"49000000000070\"\nassert solution(\n    \"\"\"\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n\"\"\"\n) == \"25000000000021\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\n''') == '49000000000070'\nassert solution('''\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\n''') == '25000000000021'\nassert solution('''\n5 5 2\n3 1 4\n4 1 1\n1 1 3\n2 3 1\n''') == 'Poor girl'\nassert solution('''\n5 5 2\n3 1 4\n4 1 1\n1 1 3\n2 3 1\n3 3 3\n''') == 'Poor girl'\nassert solution('''\n10 20 100\n5 1 2\n6 1 3\n1 5 2\n3 5 2\n4 4 2\n2 4 3\n1 2 3\n2 1 4\n''') == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 5\") == \"Poor girl\"\nassert solution(\"3 3 7\") == \"750000000\"\nassert solution(\"5 5 7\") == \"Rich girl\"\nassert solution(\"6 6 7\") == \"950000000\"\nassert solution(\"6 6 4\") == \"Poor girl\"\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 6 7') == '49000000000070'\nassert solution('7 7 10') == '77000000000006'\nassert solution('7 7 10') == 'Poor girl'\nassert solution('6 6 7') == 'Poor girl'\n"
    },
    {
        "number": 3221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 6 7\") == \"25000000000021\"\nassert solution(\"7 7 10\") == \"49000000000070\"\nassert solution(\"12 3 5000000\") == \"25000000000021\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '2\\n2\\n0\\n1'\nassert solution('4 5') == 'yeah!'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"4 4\") == \"Yeah!\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4\\n0 1\\n1 0\\n2 3\\n3 3') == '2\\n2\\n0\\n1\\n2\\n2'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\\n2\\n2\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\\n\") == \"Yeah!\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\\n3 3\") == \"2\\n2\\n0\\n1\\n2\\n2\\n3\\n3\\n3\"\nassert solution(\"2 2\\n1 1\\n1 1\") == \"2\\n2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 4') == \"2\\n2\\n0\\n1\"\nprint(solution('4 4'))\n\"\"\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"2\\n2\\n0\\n1\\n2\\n2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"2\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\\n4 4\") == \"Yeah!\"\nassert solution(\"5 3\\n0 1\\n1 0\\n2 3\\n3 3\\n4 4\") == \"1\\n1\\n2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 4\n0 1\n1 0\n2 3\n3 3\n''') == '2'\nassert solution('''\n4 4\n0 1\n1 0\n2 3\n3 3\n''') == '2'\nassert solution('''\n4 5\n0 1\n1 0\n2 3\n3 2\n4 2\n3 1\n''') == '3'\nassert solution('''\n10 9\n0 1\n0 0\n1 2\n1 1\n1 4\n1 5\n2 3\n3 0\n3 3\n4 3\n4 4\n4 5\n5 2\n5 3\n6 4\n6 5\n6 7\n7 3\n''') == '3'\nassert solution('''\n20 10\n0 1\n0 2\n2 3\n3 2\n4 5\n5 4\n6 5\n7 7\n8 5\n9 6\n10 1\n10 2\n10 3\n10 4\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n12 1\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n13 2\n13 3\n13 4\n13 5\n13 6\n13 7\n13 8\n13 9\n13 10\n13 11\n13 12\n14 2\n14 3\n14 4\n14 5\n14 6\n14 7\n14 8\n14 9\n14 10\n14 11\n15 2\n15 3\n15 4\n15 5\n15 6\n15 7\n15 8\n15 9\n15 10\n15 11\n15 12\n16 2\n16 3\n16 4\n16 5\n16 6\n16 7\n16 8\n16 9\n16 10\n16 11\n16 12\n16 13\n''') == '3'\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 2\") == \"2\\n2\\n0\\n1\"\nassert solution(\"4 4\\n0 1\\n1 0\\n2 3\\n3 3\") == \"Yeah!\"\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 1 2\n3\n''') == 'POSSIBLE'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n11\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"IMPOSSIBLE\", \"1st example\"\nassert solution(\"2\") == \"POSSIBLE\", \"2nd example\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == 'POSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 1 1\n2 2\n3 3\n''') == 'POSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n1 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\n1 1 2\n''') == 'POSSIBLE'\n''')\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 2') == 'POSSIBLE'\nassert solution('2 1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('1 2') == 'POSSIBLE'\nassert solution('1 2 3') == 'IMPOSSIBLE'\nassert solution('1 2 3 4') == 'IMPOSSIBLE'"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 1 2\nSample Output 1:\nPOSSIBLE\n1 3\n2 3\n''') == 'POSSIBLE'\n\nassert solution('''\n2\n1 2\nSample Output 2:\nIMPOSSIBLE\n1 3\n2 3\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"POSSIBLE\"\nassert solution(\"2\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"POSSIBLE\"\nassert solution(\"1 1\") == \"POSSIBLE\"\nassert solution(\"1 2 3\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n4 2 1\\n1 2 3') == 'POSSIBLE\\n1 3\\n2 3'\nassert solution('3\\n2 1\\n2 2') == 'IMPOSSIBLE'\nassert solution('3\\n1 1\\n1 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nprint(solution(input()))\n\"\"\"\nimport math"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.0 0.0 -0.0'\nprint('All test cases passed!')"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\nassert solution('-1 0 0\\n-1 0 0\\n1 0 0\\n0 0 1') == '0.0 0.0 0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1\\n2 2 2\\n3 3 3') == '0.5 0.5 -0.5'\nassert solution('0 0 1\\n1 0 0\\n0 1 1') == '0.5 -0.5 0.5'"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.0 0.0 -0.0'\nprint('All tests passed.')\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.5 0.5 0.5'\nassert solution('-1 0 0\\n1 0 0\\n0 1 0\\n0 0 1') == '0.0 0.0 -0.0'\n"
    },
    {
        "number": 3224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 0 0\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0.5 0.5 0.5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\n\nsolution('5')\n\nsolution('10')\n\nsolution('20')\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n3 2 3 2 2\n''') == '0'\nassert solution('''\n2\n2 2\n''') == '1'\nassert solution('''\n4\n4 5 1 7 2 2\n''') == '3'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10\n3 6 2 3 2 2 2 1 5 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n17 17 17\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n3 6 2 3 2 2 1 5 6') == '2\\n3 2\\n6 6\\n'\nassert solution('10\\n3 6 2 3 2 2 1 5 6') == '2\\n3 2\\n6 6\\n'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 3 2\n''') == '1 2'\n\nassert solution('''\n5\n3 5 5 8 8 8\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n2 1 3\n3 4\n1 2\n1 3\n1 4\n3 1\n3 3\n''') == '5'\n''')\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1 2 3\"\nassert solution(\"4\") == \"1 3 4\"\nassert solution(\"5\") == \"1 4 5\"\n"
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n3 6 2 3 2 2 2 1 5 6\n''') == '2\\n3 2 2 1 5\\n3 2 2\\n6 6\\n'\n\"\"\"\n--- Day 5: Doesn't He Have Intern-Elves For This? ---\nSanta needs help figuring out which strings in his collection contain the most amount of repeated letters. To help him do this he has created a special formatting string that says:\n\n\"The letter X occurs once every N letters, and every K letters in the preceding N letters.\"\n\nFor example, the formatting string is aba, which means \"each occurrence of a is preceded by a, and then every occurrence of b is preceded by ab\". The first few letters in the string are ab, aba, ababa, and so on. They form a geometric series that begins at 1 and ends at N, so the first occurrence of a is the same as the last occurrence of a, and the first occurrence of b is the same as the second to last occurrence of b, and so on.\n\nHelp Santa decide what the value of the letter X is.\n\nFor example, if the string is aba, the value of X is ab. If the string is abc, the value of X is ab.\n\nWhat is the value of X?\n\nYour puzzle answer was a1122.\n\n--- Part Two ---\nFinally, you notice that Santa has gone over to another collecting stop: the Universal Cyclotron. The collection stop is a little further along than the one where you started. The collection stop will have exactly the same layout as the previous one, but with a different set of letters.\n\nHow many letters are we missing?\n\nYour puzzle answer was 5517.\n\n--- Part Two ---\nSeeing how similar the collection stop layout is to the first one, you recognize that you can solve this puzzle by combining the two.\n\nStart with your puzzle input. In the first round, you could visit the Universal Cyclotron 25 times. In the second round, in the third round, etc., you'd visit the Universal Cyclotron 125 times.\n\nWhat is the total number of visits required to reach the Universal Cyclotron over the course of Santa's journey?\n\nYour puzzle answer was 23674.\n\"\"\""
    },
    {
        "number": 3225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('3 2 1') == '74.6666666667'\nassert solution('3 2 1') == '74.6666666667'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\") == \"74.6666666667\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2 3\\n1\\n3 2\\n1') == 'IMPOSSIBLE'\nassert solution('1\\n2 3\\n1\\n3 2\\n1') == '74.6666666667'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE', 'First'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == '74.6666666667', 'Second'\nassert solution('''\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\n''') == 'IMPOSSIBLE', 'Third'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == '74.6666666667'\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n2 3 8\\n1') == '74.6666666667'\nprint(solution(*[*map(int, input().split())]))\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == 'IMPOSSIBLE'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == '74.6666666667'\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == 'IMPOSSIBLE'"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == \"IMPOSSIBLE\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == \"74.6666666667\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 1\\n1 2 7\\n2 3 8\\n1') == \"IMPOSSIBLE\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == \"74.6666666667\"\nassert solution('3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n') == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\") == \"IMPOSSIBLE\"\nassert solution(\"3 2 1\\n1 2 7\\n2 3 8\\n1\\n2 3\\n\") == \"74.6666666667\"\nprint(solution(input))\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 6') == '1'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n\") == \"1\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n\") == \"2\"\nassert solution(\"5 6\\n1 2\\n2 3\\n3 1\\n3 4\\n1 4\\n4 5\\n5 6\\n6 7\\n7 4\\n\") == \"2\""
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\nSample Output 2:\n1\n2\n1\n2\n2\n1\n''') == '1'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4''') == '1'\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\nSample Output 3:\n0\n''') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4''') == '2','sample #1'\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\nSample Output 2:\n0\n''') == '1','sample #2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n1 2\n2 3\n3 1\n''') == '1'\nassert solution('''\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '2'\nassert solution('''\n3 3\n1 2\n2 3\n3 1\n''') == '2'\nassert solution('''\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n''') == '1'\nassert solution('''\n5 6\n1 2\n2 3\n3 1\n4 5\n5 6\n''') == '1'\n''')\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\n5 6\n6 7\n7 4\n''') == '1'\nassert solution('''7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\n''') == '2'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '1'\nassert solution('7 7') == '2'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"7 7\") == \"1\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 6') == '5'\nassert solution('3 7 2') == '11'\nassert solution('1 3 7') == '3'\nassert solution('5 5 7') == '4'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 10 2\n0\n15\n30\n45\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n4 10 3\n0\n15\n30\n45\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n4 10 1\n30\n\"\"\") == \"31\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n') == '10'\nassert solution('10\\n') == '5'\nassert solution('100\\n') == '50'\nassert solution('1000\\n') == '250'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 1\\n0\\n15\\n30\\n45\\n') == '5'\nassert solution('2 4 5\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('3 2 1\\n0\\n15\\n30\\n45\\n') == '0'\nassert solution('3 1 1\\n0\\n15\\n30\\n45\\n') == '10'\nassert solution('3 5 5\\n0\\n15\\n30\\n45\\n') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10'\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '5'\n\nassert solution([4, 10, 2]) == '10'\nassert solution([4, 10, 3]) == '5'"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 10 2\n0\n15\n30\n45\n''') == '10', 'First example'\nassert solution('''4 10 3\n0\n15\n30\n45\n''') == '5', 'Second example'\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2\") == \"1\"\nassert solution(\"4 10 2\") == \"2\"\nassert solution(\"4 10 3\") == \"3\"\nassert solution(\"4 10 3\") == \"4\"\nassert solution(\"10 10 3\") == \"10\"\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 10 2\n0\n15\n30\n45\n''') == '10'\n\nassert solution('''\n4 10 3\n0\n15\n30\n45\n''') == '5'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 5') == '10'\nassert solution('4 5 6') == '10'\nassert solution('1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '4 2'\n    '50 50 75'\n    '25 25 25'\n) == '1'\nassert solution(\n    '5 2'\n    '50 50 50 50'\n    '25 25 25 25'\n) == '3'\nassert solution(\n    '3 2'\n    '50 50 75'\n    '25 25 25'\n) == '1'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n\nimport math\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n50 50 75\n25 25 25\n''') == '1'\nassert solution('''\n5 2\n50 50 50 50\n25 25 25 25\n''') == '2'\nassert solution('''\n4 2\n50 50 50 50\n25 25 25 25\n''') == '3'\nassert solution('''\n4 2\n50 50 50 50\n25 25 25 25\n''') == '2'\nassert solution('''\n4 2\n50 50 50 50\n25 25 25 25\n''') == '2'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\nassert solution('10 2') == '3'\nprint('all tests passed')"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n50 50 75\\n25 25 25\\n\") == '1'\nassert solution(\"5 2\\n50 50 50 50\\n25 25 25 25\\n\") == '2'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"50 50 50 50\") == \"2\"\nassert solution(\"25 25 25 25\") == \"1\"\nprint(solution('''\n
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\n50 50 75') == '1'\nassert solution('5 2\\n50 50 50 50') == '2'\nassert solution('4 1\\n0 0 0') == '3'\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n50 50\\n25 25\\n\") == \"1\"\nassert solution(\"10 2\\n45 45 45 45 45 45 45 45 45 45\\n23 23 23 23 23 23 23 23 23 23 23\\n\") == \"9\"\nassert solution(\"6 2\\n45 45 45 45 45 45\\n23 23 23 23 23 23 23 23 23\\n\") == \"1\"\nassert solution(\"8 3\\n45 45 45 45 45 45\\n23 23 23 23 23\\n\") == \"2\"\nassert solution(\"3 1\\n100 100\\n1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '2'\nassert solution('5 2') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n...L\n.X..\n''') == '1', 'First'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..\n''') == '2', 'Second'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n.X.\\n.L.\\n.L.\\n') == '1'\nassert solution('3 4\\n.X.\\n.X.\\n.X.\\n.L.\\n') == '0'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n.LX.\\n.X..\\n....\\n.L..\") == \"1\"\nassert solution(\"4 4\\n.LX.\\n.X..\\n...XL\\n.X..\\n\") == \"2\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n.LX.\n.X..\n....\n.L..''') == '1'\nassert solution('''4 4\n.XLX\n.X..\n...L\n.X..''') == '2'\n\"\"\"\n\n\n\"\"\"import math\n\nR, C = map(int, input().split())\nmap_data = [input().split() for _ in range(R)]\ncheck_list = []\nfor x in range(R):\n    for y in range(C):\n        if map_data[x][y] == 'L':\n            check_list.append((x, y))\n\nd = {(x, y): (math.sqrt((x - check_list[0][0]) ** 2 + (y - check_list[0][1]) ** 2)) for x, y in check_list}\nprint(min(d.values()))\"\"\"\n\n\n\"\"\"import math\n\nR, C = map(int, input().split())\nmap_data = [input().split() for _ in range(R)]\nx_check, y_check = None, None\nfor x in range(R):\n    for y in range(C):\n        if map_data[x][y] == 'X':\n            x_check, y_check = x, y\n            break\n\nfor x in range(R):\n    for y in range(C):\n        if map_data[x][y] == 'X':\n            continue\n        if (x, y)!= (x_check, y_check):\n            print('No')\n            exit()\n\nfor y in range(C):\n    for x in range(R):\n        if map_data[x][y] == 'X':\n            continue\n        if (x, y)!= (x_check, y_check):\n            print('No')\n            exit()\n\nprint('Yes')\"\"\"\n\n\n\"\"\"def solution(stdin: str) -> str:\n    pass\n\nprint(solution('''5\n...X.\n...X.\n...X.\n...X.\n...X'''))\n\"\"\"\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\n4 4\n.LX.\n.X..\n....\n.L..\n\"\"\") == \"1\", \"First\"\nassert solution(r\"\"\"\n4 4\n.X..\n.X..\n...L\n.X..\n\"\"\") == \"2\", \"Second\"\nassert solution(r\"\"\"\n2 2\n.X..\n.X..\n\"\"\") == \"0\", \"Third\"\nassert solution(r\"\"\"\n2 2\n.L.\n.L.\n\"\"\") == \"1\", \"Forth\"\nassert solution(r\"\"\"\n2 2\n.X.\n.X.\n\"\"\") == \"2\", \"Fifth\""
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n.LX.\\n.X..\\n...L') == '1'\nassert solution('3 4\\n.XLX\\n.X..\\n...L') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '1'\nassert solution('4 4') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 5\n.L.X\nX..X\n...X\n.X...\n..X.X\nX.X..''') == '2'\nassert solution('''4 4\n.X.X\n.L.L\n.X.X\n.X...\n''') == '1'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\n.L..\n.X..\n...L\n.X..\n.L..''') == '1'\n\nassert solution('''1 1\n.X.\n.X.\n.X.\n.X.''') == '2'\n"
    },
    {
        "number": 3230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4\n...L\n...X\n''') == '1'\nassert solution('''\n4 4\n.L..\n.X..\n...L\n.X..\n''') == '2'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n4 3\\n') == 'detention'\nassert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n4 3\\n') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"detention\"\nassert solution(\"4 2 1\\n1 2\\n2 3\\n2 0 2\\n2 1 3\\n1 3\") == \"home\"\nassert solution(\"4 2 1\\n0 0\\n1 1\\n2 2 2\\n2 3 3\\n1 3\") == \"home\"\nassert solution(\"4 2 1\\n1 2\\n2 3\\n2 0 2\\n2 1 3\\n1 3\") == \"home\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == 'home'\nassert solution(\"\"\"4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n\"\"\") == 'home'\nassert solution(\"\"\"5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n\"\"\") == 'detention'\nassert solution(\"\"\"3 2 3\n1 2\n1 0\n2 0\n\"\"\") == 'detention'\nassert solution(\"\"\"2 2 1\n1 1\n2 0 2\n1 0\n\"\"\") == 'home'"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\n''') == 'home', 'first'\nassert solution('''\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\n''') == 'detention','second'\n'''\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 2 1\n1 1\n2 0 2\n2 1 3\n1 2''') == 'home'\nassert solution('''5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Input 3:\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 2\nSample Output 3:\ndetention\n0\n0 1 2\n0 2 3\n0 1 2''') == 'detention'\n\nassert solution('''10 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n2 3 5\n2 4 6\n1 3\n1 4\n1 5\n2 6\n0 7\n0 8\n0 9\n1 10\nSample Input 4:\n10 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n2 3 5\n2 4 6\n1 3\n1 4\n1 5\n2 6\n0 7\n0 8\n0 9\n1 10\nSample Output 4:\nhome\n0\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n0 2 3\n0 1 2\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2') == 'home'\nassert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'detention'"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"home\"\nassert solution(input_data=\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\") == \"home\"\nassert solution(input_data=\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\") == \"detention\"\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3') == 'home'\n"
    },
    {
        "number": 3231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1\\n1 1\\n2 0 2\\n2 1 3\\n1 2\\n\") == \"home\"\nassert solution(\"5 2 1\\n1 1\\n2 0 2\\n2 1 3\\n2 2 4\\n1 3\\n\") == \"detention\"\n\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"tralalal\"\n) == \"allatral\"\nassert solution(\n    \"zzzz\"\n) == \"-1\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\ntralalal\n''') == 'allatral'\nassert solution('''\nzzzz\n''') == '-1'\n''')\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\ntralalal\n''') == 'allatral'\nprint(solution('''\nzzzz\n'''))"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"allatral\"\nassert solution(input()) == \"allatral\"\nassert solution(input()) == \"allatral\"\n\"\"\"\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''tralalal''') == 'allatral'\nassert solution('''zzzz''') == '-1'"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\nassert solution('tsll') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tralalal') == 'allatral'\nassert solution('zzzz') == '-1'\n"
    },
    {
        "number": 3232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"tralalal\") == \"allatral\"\nassert solution(\"zzzz\") == \"-1\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '5'\nassert solution('''\n6\n3 2 1 6 4 5\n''') == '8'\nassert solution('''\n7\n1 5 6 3 7 2\n''') == '10'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\nassert solution('3 2 1 6 4 5') == '5'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 3 4 5') == '5'\nassert solution('6\\n3 2 1 6 4 5') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '5'\n\nassert solution('''\n6\n3 2 1 6 4 5\n''') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"8\""
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '1'\nassert solution('6') == '8'"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'\n"
    },
    {
        "number": 3233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '5'\nassert solution('6') == '8'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == output_string, \"Should be able to find output\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"2\""
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('47') == '1'\nassert solution('523') == '2'"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'\nprint(solution(__import__('sys').stdin.read()))\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '0'\nassert solution('10\\n') == '1'\nassert solution('23\\n') == '2'\nassert solution('523\\n') == '2'\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10000000000000\") == \"1\"\nassert solution(\"10101\") == \"2\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"10\\n\"\n    \"523\\n\"\n) == \"2\"\nassert solution(\n    \"10\\n\"\n    \"12\\n\"\n) == \"1\"\nassert solution(\n    \"1\\n\"\n) == \"1\"\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n) == \"0\"\nassert solution(\n    \"3\\n\"\n    \"10\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1\\n0 1 15\\n'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"3 2\") == \"3 2\"\nassert solution(\"2 3\") == \"2 3\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 5') == '0'\nassert solution('7 7') == '1 2 3 4 5 6 7'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1\\n0 1 15\\n'\nassert solution('''\n2 2\n0 1 20\n1 0 5\n''') == '1\\n0 1 15\\n'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n0 1 10') == '0'\nassert solution('2\\n0 1 10') == '1'\nassert solution('3\\n0 1 10') == '1'\nassert solution('4\\n0 1 10') == '2'\nassert solution('5\\n0 1 10') == '2'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 10\") == \"0\"\nassert solution(\"2 2 10\") == \"1\"\nassert solution(\"1 1 20\") == \"1 2 15\"\nassert solution(\"2 2 20\") == \"0 1 15\"\nassert solution(\"0 0 0\") == \"1\"\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '1'\n\nassert solution('''\n2 2\n0 1 20\n1 0 5\n''') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\n''') == '0'\n\nassert solution('''\n6 5\n0 1 10\n1 0 5\n0 3 10\n3 2 10\n2 1 20\n''') == '1'\n"
    },
    {
        "number": 3235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n0 1 10\\n1 2 10\\n0 3 10\\n3 2 10\\n2 0 20\") == \"1\\n0 1 15\"\nassert solution(\"2 2\\n0 1 20\\n1 0 5\") == \"1\\n0 1 15\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == '5'\nassert solution('''4 3\n4 4 8 12\n1 2\n2 3\n3 4\n''') == '1'\nassert solution('''5\n3\n1 2\n3 4\n2 5\n''') == '0'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5''') == '5'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 3 2 1 5\\n1 3') == '5'\nassert solution('4 3\\n4 4 8 12\\n1 2\\n2 3') == '1'"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '5'\nassert solution('4 3') == '1'\nassert solution('4 4 8 12') == '4'\nassert solution('3 5') == '0'\nassert solution('12 34 5') == '12'\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n''') == \"5\"\nassert solution('''\n4 3\n4 4 8 12\n1 2\n2 3\n3 4\nSample Output 2:\n1\n''') == \"1\"\nprint('All tests passed!')"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n\"\"\") == \"5\"\nassert solution(\"\"\"\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6\") == \"5\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"4 4 8 12\") == \"5\"\n"
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(INPUT) == \"1\""
    },
    {
        "number": 3236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''12\n5''') == '7'\nassert solution('''20\n7''') == '12'\nassert solution('''200\n9''') == '9'\nassert solution('''13\n8''') == '11'\nassert solution('''9\n10''') == '14'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('001234') == '1'\nassert solution('211212') == '3'\nassert solution('111122') == '12'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''13 11\n14 7''') == '15'\nassert solution('''12 12\n22 18''') == '24'\nassert solution('''12\n11\n''') == '17'\nassert solution('''1 2\n''') == '2'\nassert solution('''0 1\n''') == '1'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"030201\") == \"8\"\nassert solution(\"1311\") == \"24\""
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''101\n0202\n0201\n0102''') == '6'\n\nassert solution('''21\n22\n23\n0202''') == '0'\n\nassert solution('''21\n0202\n0201\n0102''') == '2'\n\nassert solution('''0201\n0102\n0202\n0202''') == '2'\n\nassert solution('''021\n0202\n0201\n0102''') == '4'"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"02210\") == \"2\"\nassert solution(\"1311\") == \"24\"\nprint(solution(input()))\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n11\n''') == '1'\n\nassert solution('''\n10\n''') == '11'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0123456789\n''') == '2'\nassert solution('''\n0123456789\n''') == '5'\nassert solution('''\n0123456789\n''') == '8'\nassert solution('''\n0123456789\n''') == '1'\nassert solution('''\n0123456789\n''') == '0'\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"0212\") == \"7\"\nassert solution(\n    \"1311\") == \"24\"\n"
    },
    {
        "number": 3237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"1221\") == \"1221\"\nassert solution(\"1221221\") == \"1221221\"\n\nassert solution(\"1311\") == \"1311\"\n\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 10\") == \"3 1 3 10\"\nassert solution(\"5 20\") == \"1 15 5 15\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.#.\\n###########...#.###.\\n##########..##.#..##.\\n###########..#.#.##.##\\n###########.###...#.##\\n\") == \"1 15 5 15\""
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 10\\n
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 10') == '3 1 3 10'\nassert solution('5 20') == '1 15 5 15'\nassert solution('1 1 1') == '1 1 1'\nassert solution('1 1') == '1 1 1'\nassert solution('2 2') == '1 1 1'\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n#.##....#.##.###.##.##....###.#.#.##.###.#.##.##...###.#.##.##.##.##....##.#.#.#.##.###.#.##.##.#.##.##..##.##.##.#.##.##\\n#.##...##.##.####.#.##.##.#.###..##.##.#.##...##.##.##.##.##.##.##.#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#.##.##.##.#.##.###.#.#.##.##.##.###.#.#.##.##.##.####\\n#.###.##.##.###.##.##.##.#.#.##.##.##.##.##.##.##.##.##.##.##.##.#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#.###.##.##.##.##.##.###.##.##.#.##.##.##.##.##.##.###.##.##.##.##.#\\n#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#\\n###.##.##.##.##.##.#.###.#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.###.##.##.##.##.##.##.##.##.##.##.#\\n#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#\\n###.##.##.##.##.##.##.#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.###.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##\\n#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#\\n###.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##."
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 10\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"8 10\\n#.#..##..#\\n####..####\\n###.##....\\n...#..####\\n....##....\\n.#.##..##.\\n##########\\n##########\") == \"3 1 3 10\"\nassert solution(\"5 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.#.##.\\n###########.###...#.\\nSample Output 2: \\n1 15 5 15\") == \"1 15 5 15\"\nassert solution(\"10 20\\n###########.#.#.#.\\n###########...#.###.\\n##########..##.#..##\\n###########..#.#.##.\\n###########.###...#.\\nSample Output 2: \\n1 15 5 15\") == \"1 15 5 15\""
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\") == \"3 1 3 10\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    10 10\n    #.#..##..#\n    ####..####\n    ###.##....\n    ...#..####\n    ....##....\n    #.##..##.\n    ##########\n    ##########\n    ##########\n    \"\"\"\n) == \"1 15 5 15\"\n\nassert solution(\n    \"\"\"\n    10 20\n    #.##....#.\n    ####.#..##.\n    ##..##.###.\n    ##...#..#..\n    ..#.#.....\n    ..##..###.\n    ..#.##....\n    ##########\n    ##########\n    ##########\n    \"\"\"\n) == \"1 15 5 15\"\n"
    },
    {
        "number": 3238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8 10\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''50 0.125\n201 1.000''') == '16.339203308'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\""
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\""
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('50 0.125') == '16.339203308'\nassert solution('201 1.000') == '5.000000000'\n\n---\n\nWrite a program which prints the sum of the squares of the first n natural numbers in decimal. For example if n is 3, then the program will print:\n\n1 4 9\nThe program should work in this way:\n\nEnter number: 2\nThe sum of squares of first 2 natural numbers is\n16.339203308\nEnter number: 3\nThe sum of squares of first 3 natural numbers is\n1 16 81\nEnter number: 4\nThe sum of squares of first 4 natural numbers is\n1 16 81 81\nThe program should work in this way:\n\nEnter number: 3\nThe sum of squares of first 3 natural numbers is\n1 16 81\nEnter number: 5\nThe sum of squares of first 5 natural numbers is\n1 16 81 81 81\nEnter number: 6\nThe sum of squares of first 6 natural numbers is\n1 16 81 81 81 81 81\nEnter number: 7\nThe sum of squares of first 7 natural numbers is\n1 16 81 81 81 81 81 81 81\nEnter number: 8\nThe sum of squares of first 8 natural numbers is\n1 16 81 81 81 81 81 81 81 81\nEnter number: 9\nThe sum of squares of first 9 natural numbers is\n1 16 81 81 81 81 81 81 81 81 81\nEnter number: 10\nThe sum of squares of first 10 natural numbers is\n1 16 81 81 81 81 81 81 81 81 81 81 81\n\nYour program should accept an input line of numbers separated by a space and your program should print the sum of the squares of the numbers after the space."
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"50 0.125\") == \"16.339203308\"\nassert solution(\"201 1.000\") == \"5.000000000\"\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n50 0.125\n''') == '16.339203308'\nassert solution('''\n201 1.000\n''') == '5.000000000'\n"
    },
    {
        "number": 3239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''50 0.125''') == '16.339203308'\nassert solution('''201 1.000''') == '5.000000000'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\n0.5 1\\n') == '2'\nassert solution('2 3\\n1 11\\n0.4 1\\n') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '2'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n0.5 1\n0.4 1\n1 11\n0.4 1''') == '3'\nprint(solution('''4 3\n1 11\n0.4 1\n0.4 1\n0.4 1'''))\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n0.5 1\n0.4 1''') == '2'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 3') == '3'"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 3') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n0.5 1\\n1 11\\n0.4 1') == '2'\nassert solution('4 3\\n1 11\\n0.4 1\\n1 11\\n0.4 1') == '3'\n"
    },
    {
        "number": 3240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n0.5 1\n''') == '2'\nassert solution('''\n4 3\n1 11\n0.4 1\n''') == '3'\nassert solution('''\n5 5\n0.5 1 0.5 1\n0.5 1 0.5 1\n0.5 1 1 1\n0.5 1 1 1\n''') == '2'\nassert solution('''\n6 6\n0.5 1 0.5 1 0.5 1\n0.5 1 0.5 1 0.5 1\n0.5 1 0.5 1 0.5 1\n0.5 1 0.5 1 0.5 1\n0.5 1 0.5 1 0.5 1\n0.5 1 0.5 1 0.5 1\n''') == '2'\nassert solution('''\n7 7\n0.5 0.5 1 0.5 1 0.5 1\n0.5 0.5 1 0.5 1 0.5 1\n0.5 0.5 1 0.5 1 0.5 1\n0.5 0.5 1 0.5 1 0.5 1\n0.5 0.5 1 0.5 1 0.5 1\n0.5 0.5 1 0.5 1 0.5 1\n0.5 0.5 1 0.5 1 0.5 1\n''') == '3'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n7 1\n3 2\n10 0\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n3\n2 1\n4 0\n0 3\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n1\n10 1\n10 2\n0 3\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n1\n2 1\n4 0\n0 3\n\"\"\") == \"-1\"\n\nassert solution(\"\"\"\n3\n1 1\n4 0\n0 3\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n7 1\n3 2\n10 0\n''') == '10.5', 'First'\n\nassert solution('''\n3\n0 2\n10 1\n''') == '-1', 'Second'\n\nassert solution('''\n7\n0 1\n10 0\n4 0\n''') == '-1', 'Third'\n\nassert solution('''\n7\n0 1\n10 0\n0 3\n''') == '-1', 'Fourth'\n\nassert solution('''\n3\n1 1\n10 0\n0 3\n''') == '10', 'Fifth'\n\nprint(solution(open('input.txt')))\n\nprint('Check complete')\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n7 1\n3 2\n10 0\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n3\n0 0\n3 1\n5 2\n\"\"\") == \"-1\""
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n7 1\\n3 2\\n10 0') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3') == '-1'\nprint('ok')"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '-1'\nassert solution('5 2') == '-1'\nassert solution('5 7') == '10.5'"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 2\n3 4\n3 5\n10 1\n3 2\n''') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n7 1\n3 2\n10 0\n\"\"\") == \"10.5\"\nassert solution(\"\"\"\n3\n2 1\n4 0\n0 3\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n6 1\\n3 2\\n10 0\\n') == '10.5'\nassert solution('3\\n2 1\\n4 0\\n0 3\\n') == '-1'\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1 3\n2 2\n1 2\n0 0''') == '4'\nassert solution('''2\n0 1\n1 1\n1 1\n0 0''') == '1'\nprint('\"Run\" is good for you!')\n"
    },
    {
        "number": 3241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n1 3\n2 4\n0 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n2 1\n3 2\n1 3\n1 1\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\n5\n1 3\n3 3\n2 2\n2 3\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n1 3\n2 2\n1 2\n1 3\n\"\"\") == \"2.3333333333333333\"\nassert solution(\"\"\"\n5\n1 3\n2 3\n1 2\n1 3\n\"\"\") == \"2.3333333333333333\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"1\"\nassert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 0.5\") == \"1\", \"Simple Case\"\nassert solution(\"2 0.51\") == \"2\", \"Simple Case\"\nassert solution(\"1 0.49\") == \"2\", \"Simple Case\"\nassert solution(\"2 0.49\") == \"1\", \"Simple Case\"\nassert solution(\"5 0.5\") == \"4\", \"Simple Case\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 0.5\n2 0.51\n1 0.49''') == '1'\nassert solution('''2 0.51\n2 0.5\n1 0.49''') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49\\n') == '1'\nassert solution('3 0.7\\n3 0.61\\n2 0.5\\n') == '2'\nassert solution('6 0.4\\n2 0.5\\n1 0.5\\n3 0.5\\n2 0.5\\n') == '3'\nprint('Hurray! All test cases passed.')"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 0.5\\n2 0.51\\n1 0.49\") == \"2\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"5\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"6\\n0.5\") == \"2\"\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '2'\nassert solution('10 5 1\\n10 10 1\\n') == '10'\nassert solution('0 0.5\\n0.5 0.5\\n1 0.49') == '0'\nassert solution('20 30 1\\n20 30 1\\n') == '0'\n\nimport unittest\nimport io\nfrom utils import *\nfrom solution import *\n\nclass Test(unittest.TestCase):\n    def test(self):\n        pass"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2.3') == '2'\nassert solution('2.51') == '2'\nassert solution('1.9') == '1'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2.5') == '1'\nassert solution('3 1.5') == '2'\n"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0.5\\n2 0.51\\n1 0.49') == '1'"
    },
    {
        "number": 3242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0.5') == '1', \"Should be 1\"\nassert solution('2 0.51') == '2', \"Should be 2\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"yes\"\nassert solution(\"3 3 3 3\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"yes\"\nassert solution(\"5 4 0\") == \"no\"\nassert solution(\"5 4 1\") == \"no\"\nassert solution(\"5 4 2\") == \"no\"\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 2') == 'yes'\nassert solution('5 4 4') == 'yes'\nassert solution('1 1 2 2 2') == 'no'\nassert solution('4 4 4') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 2\\n3 3 3 3\\n0 1\\n0 3\\n1 3\\n1 2\\n2 3') == 'yes'\nassert solution('4 5 2\\n3 3 3 3\\n0 1\\n2 3\\n3 4\\n4 2\\nSample Output 2:') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 2') == 'yes'\nassert solution('4 5 2') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == 'yes'\nassert solution('5 4 4') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"yes\"\nassert solution(\"100 5 4 4\") == \"no\""
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2') == 'yes'\nassert solution('5 4 2') == 'no'\n"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\n''') == 'yes'\nassert solution('''\n4 5 3\n1 2 3 1\n2 3\n1 2\n3 1\n''') == 'no'"
    },
    {
        "number": 3243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\") == \"yes\"\nassert solution(\"5 4 4\") == \"no\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"4\"\nassert solution(\"8\") == \"5\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '1'\nassert solution('20') == '5'\nassert solution('15') == '8'\nassert solution('17') == '2'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2 1'\nassert solution('4') == '5 8'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n20\n15\n17\n14''') == '2 5 1 8 7'\n\nassert solution('''5\n20\n15\n17\n14''') == '5 8 1 7 2'\n\nassert solution('''4\n20\n15\n17\n14''') == '2 1 8 5 7'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2 1\"\nassert solution(\"4\") == \"5 8\"\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2 1 0'\nassert solution('4') == '5 8 12'\nassert solution('5') == '8 5 7 4 1'"
    },
    {
        "number": 3244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n10\\n5\\n15\\n') == '5 8\\n2 7\\n'\nassert solution('5\\n10\\n5\\n15\\n') == '2 7\\n5 8\\n'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\npython\\n2\\njava\\n') == 'python\\njava'\nassert solution('5\\npython\\njava\\n') == 'python\\njava'\nassert solution('1\\npython') == 'python'\nassert solution('5\\n') == ''\nassert solution('1\\n') == ''\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\npython\njava\n^\n^^^\n^^^\n^ -n 10\nSample Input 3:\n10\npython\njava\n^\n^^^\n^^^\n^^^\n^^^\n^^^\n^ -n 10\n^ -n 20\nSample Output 3:\npython\njava\njava\npython\njava\npython\njava\njava\npython\npython\njava\njava\njava\npython\njava\npython\njava\njava\njava\npython\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava\njava\npython\njava\njava\njava"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == 'python'\nassert solution('5') == 'python java'"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n\"\n    \"p^ python\\n\"\n    \"p^ -n 10\\n\"\n    \"^ main.py\\n\"\n    \"^^^\\n\"\n    \"^ ^-n 10\\n\"\n    ) == \"python main.py -n 10\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"python\"\nassert solution(\"5\") == \"python java main.py -n 10\"\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\npython\\njava\\njava\\n^') == 'pythonjava\\npythonjava\\njava\\npython\\njava\\n'\nassert solution('3\\npython\\njava\\njava\\n^') == 'pythonjava\\npythonjava\\njava\\npython\\njava\\n'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\npython\np^ main.py\n^ -n 10\n''') == 'python main.py\\np -n 10\\n'\n"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n') == 'python\\njava\\njava\\npython\\njava'\n\nassert solution('3\\n') == 'python\\npython\\npython'\n\nassert solution('2\\n') == 'python\\npython'\n\nassert solution('1\\n') == 'python'\n\nassert solution('0\\n') == ''"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\npython\np^ main.py\n^ -n 10\n2\njava\n^''') == 'pythonjava'\nassert solution('''3\npython\njava\n^''') == 'pythonjava'\nassert solution('''6\njava\n^''') == 'java'\n''')"
    },
    {
        "number": 3245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\npython\\njava\\n') == 'python\\njava'\nassert solution('2\\npython\\njava\\n') == 'python\\njava'\nassert solution('3\\npython\\njava\\n') == 'python\\njava\\n'\nassert solution('4\\npython\\njava\\n') == 'python\\njava\\n'\nassert solution('5\\npython\\njava\\n') == 'python\\njava\\n'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne''') == 'this sentence makes perfect sense'\nassert solution('''tihssnetnceemkaesprfecetsesne''', 5) == 'this sentence makes perfect sense'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"hitehre\") == \"impossible\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\nassert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hitehre') == 'impossible'\n\n'''\n\nimport random\n\ns, n = stdin.split()"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hello there') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"tihssnetnceemkaesprfecetsesne\") == \"tihssnetnceemkaesprfecetsesne\""
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"tihssnetnceemkaesprfecetsesne\") == \"this sentence makes perfect sense\"\nassert solution(\"hitehre\") == \"impossible\"\nassert solution(\"hello world\") == \"impossible\"\nassert solution(\"i am\") == \"impossible\"\n\n## Example 2:\n## ------"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''tihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\n''') == 'this sentence makes perfect sense'\nassert solution('''hello\n2\nhello\n''') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense'\nassert solution('hello') == 'impossible'\n"
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('tihssnetnceemkaesprfecetsesne') == 'this sentence makes perfect sense', 'First'\nassert solution('tihssnetnceemkaesprfecetsesne') == 'impossible', 'Second'\n\nIn the second example, it is possible to decipher the sentence: \u201chitehre\u201d. In the first, it is not possible to decipher the sentence: \u201ctihssnetnceemkaesprfecetsesne\u201d."
    },
    {
        "number": 3246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'impossible', \"Tests Failed\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '4'\nassert solution('2 2') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '16'\nassert solution('3 4') == '120'\nassert solution('4 4') == '432'\nassert solution('2 3') == '12'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 2\n1 2\n''') == '4', 'First Test Case'\nassert solution('''3 2\n5 4\n''') == '5', 'Second Test Case'\nassert solution('''4 4\n5 5\n''') == '29', 'Third Test Case'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"4\"\nassert solution(\"2 2\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == \"4\"\nassert solution('2 2') == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n') == '4'\nassert solution('2 2\\n') == '16'\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"4\"\nassert solution(\"2 2\") == \"16\"\n"
    },
    {
        "number": 3247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n2 3''') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\nabcbab\n2\ncb\ncbab\nbac\nbaba\n''') == '2'\n''')\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('100') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\nab\\n\\nabcb\\n\\n') == '2'\nassert solution('\\n\\n') == '1'\nassert solution('\\n\\n\\n') == '1'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(solution.__doc__) == \"2\"\nprint(solution())\nSample Input 3:\n15\naabcbaabcbaabcbaabcba\n4\nbaab\nbaaab\nSample Output 3:\n1\n\"\"\""
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\\nabcbab\\n2\\ncb\\nbaba\") == \"2\"\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\nabab\\n2\\nbac\\nbaba\") == \"4\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n4\\n3 10\\n10 10\\n10 0\\n3 0') == '6\\n85\\n90\\n95\\n100\\n105'\nassert solution('10\\n5\\n0 1\\n0 3\\n2 3\\n2 2\\n3 2\\n4 2\\n4 2\\n4 3\\n5 3') == '7\\n17.071067\\n20\\n22.928932\\n24\\n26.878456\\n27.354037\\n30.366962'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4\n10 10\n80 10\n80 0\n110 0''') == '6'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n4\n2 2\n1 1\n2 4''') == '3'\nassert solution('''2\n4\n2 2\n1 1\n2 4''') == '5'\nassert solution('''3\n4\n2 2\n1 1\n2 4''') == '4'\nassert solution('''24\n3\n2 2\n1 1\n2 4''') == '5'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"6\"\nassert solution(\"7\") == \"8\"\nassert solution(\"10\") == \"12\"\nassert solution(\"12\") == \"18\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"50\\n4\\n110 10\\n80 10\\n80 0\\n110 0\\n\") == \"6\\n85\\n90\\n95\\n100\\n105\\n\"\nassert solution(\"24\\n3\\n10 10\\n30 10\\n20 20\\n\") == \"4\\n17.071067\\n20\\n22.928932\\n\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\\n4\\n110 10\\n80 10\\n80 0\\n110 0\") == \"6\\n85\\n90\\n95\"\nassert solution(\"100\\n5\\n10 10\\n20 20\\n30 30\\n40 40\") == \"4\\n17.071067\\n20\\n22.928932\\n30\\n40\"\nassert solution(\"100\\n5\\n10 10\\n20 20\\n30 30\\n40 40\") == \"4\\n17.071067\\n20\\n22.928932\\n30\\n40\"\nassert solution(\"1\\n1\\n10 10\\n20 20\\n30 30\\n40 40\") == \"1\\n1.0\\n10\\n20\\n30\\n40\"\nassert solution(\"10\\n0\\n10 10\\n20 20\\n30 30\\n40 40\") == \"1\\n0.0\\n10\\n20\\n30\\n40\""
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('24') == '4'\nprint('Tests completed')"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''50\n4\n110 10\n80 10\n80 0\n110 0\n''') == '6'\n\nassert solution('''24\n3\n10 10\n30 10\n20 20\n''') == '4'\n"
    },
    {
        "number": 3249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == '6'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == 'no'\nassert solution('10 11') == 'yes'\nassert solution('10 7') == 'yes'\nassert solution('10000000 1000000000') == 'no'\nassert solution('10000001 1000000000') == 'yes'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"10 0\") == \"no\"\nassert solution(\"11 0\") == \"yes\"\nassert solution(\"10 7 0\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6') == 'no'\n\"\"\"\n\nstdin = input()\nn = int(stdin.split()[0])\nk = int(stdin.split()[1])"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([10,11]) == \"yes\"\nassert solution([10,7]) == \"no\"\nassert solution([10,11,1]) == \"yes\"\nassert solution([10,7,3]) == \"no\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\""
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 11') == 'yes'\nassert solution('10 7') == 'no'\n\n'''"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"no\"\n"
    },
    {
        "number": 3250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 11\") == \"yes\"\nassert solution(\"10 7\") == \"yes\"\nassert solution(\"1 1\") == \"no\"\nassert solution(\"1 2\") == \"no\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '10 60'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6\\n') == '3\\n1 6\\n2 5\\n3 4\\n'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"1 6\"\nassert solution(\"10 30\") == \"10 60\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3 4\n2 5\n1 6\n\"\"\") == \"3 1 6\"\nassert solution(\"\"\"\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n\"\"\") == \"3 1 6 2 5\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '3'\nassert solution('10') == '3'\nassert solution('20') == '2'\nassert solution('30') == '2'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n3 4\\n2 5\\n1 6') == '3\\n1 6\\n2 5\\n3 4'\nassert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '10 60'\n"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 30\\n20 40\\n30 50\\n10 60\\n30 40') == '3\\n10 60\\n30 50\\n30 40'\n\nassert solution('1\\n2\\n3\\n4\\n5\\n6') == '2\\n5\\n4\\n3\\n1\\n6'"
    },
    {
        "number": 3251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3 4\n2 5\n1 6\n''') == \"3\"\nassert solution('''\n5\n10 30\n20 40\n30 50\n10 60\n30 40\n''') == \"3\"\nassert solution('''\n1\n100 100\n''') == \"2\"\nassert solution('''\n100\n100\n''') == \"1\"\nassert solution('''\n3\n100 100\n100 100\n''') == \"3\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1, 5, 1, 4, 2, 5]) == 5836\nassert solution([3, 1, 5, 1, 4, 2, 5]) == 1828"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '1828'\nassert solution('8 8\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '4104'\nassert solution('1\\n4 4\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '2208'\nassert solution('5\\n2 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16\\n') == '105'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '5836'\nassert solution('''\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n''') == '1828'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n\"\"\") == \"5836\"\nassert solution(\"\"\"\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n\"\"\") == \"1828\"\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '5836'\nassert solution('''5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16''') == '1828'\nassert solution('''1\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1''') == '1'\nassert solution('''5\n5\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1''') == '1'\n"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '5836'\nassert solution('5 2') == '1828'"
    },
    {
        "number": 3252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '5836'\nassert solution('5 2\\n10 10 5\\n9 8 10\\n4 12 20\\n12 4 8\\n2 3 16') == '1828'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3]) == \"impossible\"\nassert solution([5]) == \"impossible\"\nassert solution([5, 5, 6, 3, 7]) == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99') == 'impossible'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\nassert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''\n6\n72401 3299 0\n62401 2399 0\n2 750 750 99\n''') == 'impossible'\n'''"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n\"\"\") == \"50\"\nassert solution(\"\"\"\n3\n7 100 200 200\n8 100 300 200\n9 100 400 200\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 2401 3299 0\") == \"50\"\nassert solution(\"3\\n6 2401 2399 0\") == \"impossible\"\nassert solution(\"3\\n2 750 750 99\") == \"impossible\"\nassert solution(\"3\\n1 2 3\") == \"impossible\""
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n7 2401 3299 0\\n6 2401 2399 0\\n2 750 750 99') == '50'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\\n') == 'impossible'\nassert solution('3\\n7 100 200 200\\n8 100 300 200\\n9 100 400 200\\n') == 'impossible'\nassert solution('1\\n2 2 2\\n') == 'impossible'\nassert solution('2\\n2\\n') == 'impossible'\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"50\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"6\") == \"impossible\"\n"
    },
    {
        "number": 3253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == '50'\nassert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\nassert solution('''3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\n''') == 'impossible'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\"\"\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\"\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\""
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n\"\"\"\nimport math"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5.0') == '0 0 0 0 1'\nassert solution('4.5') == '0 0 0 1 1'\n"
    },
    {
        "number": 3254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5.0\") == \"0 0 0 0 1\"\nassert solution(\"4.5\") == \"0 0 0 1 1\""
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '8 3 1\\n1 7 8 2 6 4 3 5\\n'\n) == '8'\nassert solution(\n    '8 2 1\\n1 7 8 2 6 4 3 5\\n'\n) == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3 1\\n1 7 8 2 6 4 3 5') == '8'\nassert solution('8 2 1\\n1 7 8 2 6 4 3 5') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == \"3\"\nprint('\"test\" passed')\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''8 3 1\n1 7 8 2 6 4 3 5\n''') == '8'\nassert solution('''8 2 1\n1 7 8 2 6 4 3 5\n''') == '3'"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 3 1') == '8'\nassert solution('8 2 1') == '3'\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"8 3 1\\n1 7 8 2 6 4 3 5\") == \"8\"\nassert solution(\"8 2 1\\n1 7 8 2 6 4 3 5\") == \"3\"\n"
    },
    {
        "number": 3255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8 3 1\n1 7 8 2 6 4 3 5\"\"\") == \"8\"\nassert solution(\"\"\"8 2 1\n1 7 8 2 6 4 3 5\"\"\") == \"3\"\nassert solution(\"\"\"8 3 1\n1 7 8 2 6 4 3 5\"\"\") == \"4\"\nassert solution(\"\"\"8 4 1\n1 7 8 2 6 4 3 5\"\"\") == \"6\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\nassert solution_2() == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '3'\nassert solution('6 3') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\n2 3 4 1\n''') == '3'\n\nassert solution('''\n6 3\n2 2 2 4 4 4\n''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 2\n2 3 4 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n6 3\n2 2 2 4 4 4\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"0\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n2 3 4 1''') == '4'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"6 3\") == \"4\"\n"
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n2 3 4 1''') == '3'\nassert solution('''6 3\n2 2 2 4 4 4''') == '4'\nassert solution('''10 5\n2 2 2 3 4 4 5 6 7 8 9''') == '2'\nassert solution('''13 13\n2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3''') == '2'\nassert solution('''15 15\n2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3''') == '3'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1.732050\n''') == '1.732050880'\n''')\n\nSample Input 3:\n1 1 3.0\nSample Output 3:\n-1\n\n''')\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1 1.732050\n''') == '1.7320508'\nassert solution('''\n1 1 3.0\n''') == '-1'\nassert solution('''\n1 2 5.0\n''') == '5.0'\nassert solution('''\n-10 5 5.0\n''') == '-5.0'\nassert solution('''\n1 1 1.0\n''') == '1.0'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1.732050') == '1.7320508'\nassert solution('1 1 3.0') == '-1'\nassert solution('2 2 3.0') == '-1'\nassert solution('3 3 2.0') == '-1'\n\n'''\nimport math"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1.732050\") == \"1.7320508\"\n\nassert solution(\"1 1 3.0\") == \"-1\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1.732050') == '1.732050818'\nassert solution('1 1 3.0') == '-1'\nassert solution('1.1 1.3 1.3') == '1.3000000000000003'\nassert solution('2.1 2.1 3.0') == '-1'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 3.0') == '1.732050808'\nassert solution('1 1 4.2') == '-1'\nassert solution('1 1 4.2 1.732050') == '1.732050808'\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1.732050') == '1.732050808'\nassert solution('1 1 3.0') == '-1'\nassert solution('1.23 0.45 0.5') == '-1'\n\"\"\"\n"
    },
    {
        "number": 3257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 3.0') == '1.732050808'\nassert solution('1 1 1.732050') == '1.732050808'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n3 4 2\n.75\n\"\"\") == \"2.4999999987500003\"\nassert solution(\"\"\"\n2\n0 100 10\n0 -100 100\n.80\n\"\"\") == \"9.999999999000002\"\nassert solution(\"\"\"\n3\n0 -5 0.3\n0 5 0.3\n0 0.3\n\"\"\") == \"4.939999999399998\"\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3 4 2') == '2.4999999987500003'\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == '9.999999999000002'\nassert solution('3\\n5 2 2\\n-10 -10 1\\n.80') == '9.999999999000002'\nassert solution('2\\n10 4 2\\n.80') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\nassert solution('''\n1\n-5 -5 3\n.75\n''') == '9.999999999000002'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3 4 2\\n.75') == \"2.4999999987500003\"\nassert solution('2\\n0 100 10\\n0 -100 100\\n.80') == \"9.999999999000002\""
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2.5000001'\nassert solution('2') == '9.5'\nassert solution('3') == '7.0'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2.4999999987500003'\nassert solution('2') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"2.4999999987500003\"\nassert solution(\"2\") == \"9.999999999000002\""
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'\nassert solution('''\n1\n1 0 0\n''') == '0.0'\nassert solution('''\n1\n1 0 0\n''') == '0.0'\nassert solution('''\n3\n0 0 0\n0 0 0\n0 0 0\n''') == '0.0'\n"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 4 2\n.75\n''') == '2.4999999987500003'\nassert solution('''\n2\n0 100 10\n0 -100 100\n.80\n''') == '9.999999999000002'"
    },
    {
        "number": 3258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3 4 2\n.75\n''') == '2.4999999987500003'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 6\") == \"3\"\nassert solution(\"4 5\") == \"2\""
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '0'\nassert solution('5 1') == '1'\nassert solution('4 5') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '3'\nassert solution('''4\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n''') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4') == '0'\nassert solution('6 3\\n1 1 5 1 2\\n2 1 6\\n3 2 3\\n4 1 5 1 2\\n5 2 2\\n4 3 3\\n6 4 4') == '3'\nassert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n3 1 5 1 2') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '3'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0\\n3\\n1\\n0\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"5 2\") == \"5\"\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 1 5 1 2\\n2 1 6\\n') == '3'\nassert solution('4\\n1 1 4 3 4\\n2 1 1\\n2 2 2\\n2 3 3\\n2 4 4\\n') == '2'\n"
    },
    {
        "number": 3259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1 6\n2 1 6\n1 1 5 1 2\n2 1 6\n''') == '3'\nassert solution('''6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n''') == '0'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\"\n\nassert solution(\"10 3 1000000007\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 7') == '1'\nassert solution('3 2') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 7 1000000007\n''') == '1'\nassert solution('''\n3 2 1000000007\n''') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 7 1000000007') == '1'\nassert solution('3 2 1000000007') == '4'"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 7 1000000007\") == \"1\"\nassert solution(\"3 2 1000000007\") == \"4\""
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 1000000007\n''') == '4'\nassert solution('''\n3 2 1000000007\n''') == '4'\n"
    },
    {
        "number": 3260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 7 1000000007\n''') == '1'\nassert solution('''\n3 2 1000000007\n''') == '4'\n''')\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n2\\n\") == \"1\"\nassert solution(\"10 10\\n10\\n\") == \"1\"\nassert solution(\"10 10\\n15\\n\") == \"8\"\nassert solution(\"10 10\\n9\\n\") == \"1\"\nassert solution(\"10 10\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5\n6\n''') == '8'\nassert solution('''10 10\n6\n''') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5') == '8'\nassert solution('10 10') == '5'\nassert solution('0') == '0'\nassert solution('0 0') == '0'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3, 1]) == \"1\"\nassert solution([7, 12, 4]) == \"2\"\nassert solution([2, 3, 1, 2, 1, 1]) == \"5\"\nassert solution([5, 2, 4, 5, 2, 4]) == \"5\"\nassert solution([10, 20, 10, 10, 20, 10, 10, 20, 20, 20]) == \"22\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n10 10\n6\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n3 5\n11\n\"\"\"\n) == \"8\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 10\n6''') == '5'\nassert solution('''3 5\n11''') == '8'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 5\n11\nSample Output 2:\n8''') == '8'\nprint('All tests passed!')\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n5') == '8'\nassert solution('10 10\\n6') == '5'\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"8\"\nassert solution(\"10 10\") == \"5\"\nassert solution(\"3 5\") == \"8\"\n"
    },
    {
        "number": 3261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__) == '5'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"4 5 3\") == \"3\"\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '2'\nassert solution('4 5 3\\n1 2 3\\n0 1 1\\n0 3 1\\n0 2 1\\n1 2 1\\n3 2 1\\n') == '3'"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 5 3') == '2'\nassert solution('4 5 3') == '3'\nassert solution('4 5 3') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\n''') == '3'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n3 5 3\n0 1 3\n0 2 3\n0 1 2\n1 2 2\n'''\n) == '3'\n\nassert solution(\n'''\n4 5 3\n0 1 3\n0 2 2\n0 3 2\n0 2 3\n1 2 1\n3 2 1\nSample Output 3:\n4\n'''\n) == '4'\n"
    },
    {
        "number": 3262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 5 3\") == \"2\"\nassert solution(\"3 3 3\") == \"4\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 2\") == \"2\"\nassert solution(\"0 1 1\") == \"1\""
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 5\\n2 5 10\\n1 20\\n3 12') == '3'\nassert solution('3 3\\n4 4 10\\n1 20\\n1 30\\n1 20\\n1 20\\n2 30') == '2'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '3'\nassert solution('2 1') == '2'\nassert solution('3 1') == '2'\nassert solution('4 4') == '4'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '2'\nassert solution('5 3') == '4'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == '3'\nassert solution('4 3') == '3'\nassert solution('3 4') == '3'\nassert solution('1 2') == '2'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('1 1') == '1'\nassert solution('3 2') == '2'\nassert solution('4 2') == '1'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n4 5 10\n2 10\n5 10\n3 10\n''') == '3'\nassert solution('''\n2\n2\n3\n''') == '1'\nassert solution('''\n3\n1\n1\n2\n''') == '1'\nassert solution('''\n4\n1\n2\n2\n1\n''') == '1'"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3'\nassert solution('3 1') == '3'\nassert solution('3 3') == '2'\nassert solution('2 10') == '2'\nassert solution('4 2') == '1'\n"
    },
    {
        "number": 3263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\n10\n10\n1 10\n1 10\n1 10\n''') == '3'\n\nassert solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n''') == '3'\n\nprint(solution('''\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\n'''))\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"1\\n\"\nassert solution(\"2\\n3\") == \"5\\n\"\nassert solution(\"5\\n7\") == \"2\\n\"\nassert solution(\"100\\n1000\") == \"6\\n\"\nassert solution(\"1000000000000000\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n12345678901234567\\n1234567"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '5'\nassert solution('2\\n') == '1'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\nprint(solution(input()))\n\n--Python3--\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\", \"First\"\nassert solution(\"3\") == \"5\", \"Second\""
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2\n3\n4\n''') == '1'\nassert solution('''\n4\n2\n3\n4\n''') == '5'"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '5'\n"
    },
    {
        "number": 3264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"5\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 1\n0 11 9\n1 0 10\n0 0 0\n''') == '2'\nassert solution('''\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n0 11 9\n1 0 10\n0 0 0''') == '2'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '-1'\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"2\""
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input_1) == '2'\nassert solution(sample_input_2) == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution([0, 1, 0, 19, 0, 5, 0, 3, 0, 0]) == '2'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n0 11 9') == '2'\nassert solution('3 1\\n0 11 9\\n1 0 10\\n0 0 0') == '-1'"
    },
    {
        "number": 3265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '1'\nassert solution('3 1') == '2'\nassert solution('4 3') == '2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == stdout_string\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 1 2'\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\n''') == '4 3 5\\n0 1 2\\n0 2 1\\n1 2 1\\n1 3 1\\n2 3 2\\n'''\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 0 3\") == \"3 1 5\"\nassert solution(\"2 1 0 1\") == \"1 2 1\"\nassert solution(\"0 1 10\") == \"1 2 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 0 3\") == \"4 3 5\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\"\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 0 3') == '4 3 5'\nassert solution('2 1 0 1') == '2 100000 1'\nprint('all tests passed')\n"
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 0 1\") == \"2 100000 1\"\nassert solution(\"2 1 0 1\") == \"2 100000 1\""
    },
    {
        "number": 3266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 1\n1 2 1\n0 2 1\n1 3 1\n0 2 1\n2 3 10\n''') == '''\n2 2 2\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\n'''\n\nassert solution('''\n5 5 1\n0 1 5\n1 2 2\n1 3 1\n1 4 2\n2 3 1\n2 4 1\n''') == '''\n4 3 2\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 1\n2 4 1\n'''\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\nSM\nMM\n''') == '3 5'\n\nassert solution('''\n2 3\nSS.\nMM\n''') == '2 0'\n\nassert solution('''\n2 3\nS.M\nM..\n''') == '0 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n.M.\nS.M''') == '2 0'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '3 5'\nassert solution('2 3') == '2 0'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nassert solution(\"2 3\\nSMS\\nM..\") == \"2 0\"\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nSMS\\nMMS\") == \"3 5\"\nassert solution(\"2 3\\nSMS\\nM.M\") == \"2 0\"\nassert solution(\"2 3\\nS.M\\nM.M\") == \"2 0\""
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\nSMS\nMMS''') == '3 5'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\nSM\nMS''') == '3 5'\nassert solution('''2 2\nSM\nMS''') == '0 0'"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == \"2 5\""
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '3 5'\n"
    },
    {
        "number": 3267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\nSMS\\n\") == \"3 5\"\nassert solution(\"2 3\\nSMS\\nSMS\\n\") == \"2 0\"\nassert solution(\"1 1\\n.S\\n\") == \"0 0\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\n\"\"\""
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('12') == '1'\nassert solution('13') == '2'\nassert solution('30') == '2'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"1\"\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1 c'\n\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\nSample Output 2:\n1\n6 b\n''') == '6 b'"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a') == '1 c'\nassert solution('13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S') == '2 c'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n13\n0 B\n1 B\n2 E a\n2 E b\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '2'\nassert solution('''\n6\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 T a\n''') == '1'\nassert solution('''\n7\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n''') == '1'\n'''\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\") == \"2 c\"\nassert solution(\"\"\"\n1\n0 S\n1 T a\n1 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T a\n\"\"\") == \"1 b\"\nassert solution(\"\"\"\n10\n0 B\n1 B\n1 T a\n2 E a\n2 S\n5 G a\n5 T a\n5 E a\n5 E b\n1 S\n10 E a\n10 G b\n1 T"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('13') == '2'\nassert solution('0 B') == '3 c'\nassert solution('1 B') == '6 c'\nassert solution('1 T a') == '6 b'\n"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\"\nassert solution(\"13\\n0 B\\n1 B\\n2 E a\\n2 E b\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\" ) == \"2\"\nassert solution(\"6\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 T a\\nSample Output 2:\n1\n6 b\n\n\"\"\"\nimport sys\nimport bisect"
    },
    {
        "number": 3268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 B\\n1 B\\n1 T a\\n2 E a\\n2 S\\n5 G a\\n5 T a\\n5 E a\\n5 E b\\n1 S\\n10 E a\\n10 G b\\n1 T a\") == \"1 c\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n4 8\n\"\"\") == \"39\"\nassert solution(r\"\"\"\n5 4\n\"\"\") == \"69\""
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\nassert solution('0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 5\n''') == '40'\nassert solution('''288 291\n''') == '76'\nassert solution('''3 5\n''') == '37'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"40\"\nassert solution(\"288 291\") == \"76\"\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'"
    },
    {
        "number": 3269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5') == '40'\nassert solution('288 291') == '76'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'CAT'\nassert solution('2') == 'COG'\nassert solution('3') == 'COT'\nassert solution('4') == 'DOG'\nassert solution('5') == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nCAT\\nDOG') == 'COG', \"First\"\nassert solution('2\\nCAT\\nDOG') == '0', \"Second\""
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nCAT\\nDOG\\n') == 'COG'\nassert solution('2\\nCAT\\nDOG\\n') == 0\nassert solution('3\\nCAT\\nDOG\\n') == 'COG'\n\n'''"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == 'COG'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nCAT\\nDOG\\nCOT\\n') == 'COG'\nassert solution('2\\nCAT\\nDOG\\nCOT\\n') == '0'\nassert solution('3\\nCAT\\nDOG\\nCOT\\n') == 'COG'\nassert solution('4\\nCAT\\nDOG\\nCOT\\n') == 'CAT'\nassert solution('5\\nCAT\\nDOG\\nCOT\\n') == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\nCAT\nDOG''') == 'COG'\nassert solution('''3\nCAT\nDOG\nCOT''') == 'COG'\nassert solution('''5\nCAT\nDOG\nCAT\nCOT\nCAT''') == 'DOG'\nassert solution('''13\nCAT\nDOG\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT''') == 'CAT'\nassert solution('''15\nCAT\nDOG\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT\nCAT''') == 'CAT'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\nCAT\\nDOG\\n') == 'COG'\nassert solution('2\\nCAT\\nDOG\\n') == '0'\n\nassert solution('3\\nCAT\\nDOG\\nCOT\\n') == 'COG'\nassert solution('4\\nCAT\\nDOG\\nCOT\\n') == '0'\nassert solution('5\\nCAT\\nDOG\\nCOT\\n') == '-1'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nCAT\\nDOG\\n\") == \"COG\"\nassert solution(\"2\\nCAT\\nDOG\\n\") == \"0\"\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nCAT\nDOG\n''') == 'COG', 'First'\nassert solution('''\n2\nCAT\nDOG\n''') == '0', 'Second'\nassert solution('''\n2\nCAT\nDOG\n''') == 'COG', 'Third'\nassert solution('''\n1\nCAT\n''') == 'CAT', 'Fourth'\nassert solution('''\n1\nCAT\n''') == '0', 'Fifth'\n"
    },
    {
        "number": 3270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\nCAT\\nDOG') == 'COG'\nassert solution('3\\nCAT\\nDOG\\nCOT') == 'COG'\nassert solution('5\\nCAT\\nDOG\\nCOT\\nCAT') == 'COG'\nassert solution('100\\nCAT\\nDOG\\nCOT\\nCAT') == '0'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '9', \"3, 9\"\nassert solution('10') == '10', \"10, 10\"\nassert solution('100') == '100', \"100, 100\"\nassert solution('1000000') == '100000000', \"1000000, 100000000\""
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n\"\"\"\n\nn, c = list(map(int, input().split()))\n\nprint((2 ** (n - 1) - 1) // (2 - 2 ** (n - 1)))\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '2'\nassert solution('5 4') == '4'\nassert solution('2 2') == '1'\nassert solution('100 100') == '1'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"12 3\") == \"6\"\nassert solution(\"12 1\") == \"0\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '6'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '1 1\\n') == '9\\n'\n\nassert solution(\n    '4 3\\n') == '6\\n'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 1') == '9'\nassert solution('4 3') == '6'\n"
    },
    {
        "number": 3271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '1 3 5 2 7 6 4'\n) == '8'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\\\n5 5\n.V.\n.V.\n..#..\n.V.#.\n.V./\n''') == '3'\nassert solution('''\\\n5 4\n.V.\n.V.\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5') == '3'\nassert solution('2 5') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5\\nV...\\nH...V\\n') == '3'\nassert solution('2 5\\nV...\\nH...V\\n') == '-1'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\nV.V.V.V.\\nH.H.H.H.\\nV.V.V.V.\\n.V.V.V.\\nV.V.V.V\") == \"3\"\nassert solution(\"5 5\\nH...H\\nH...H\\nH...H\\nH...H\\nH...H\") == \"2\"\nassert solution(\"6 6\\nV...V\\nH...H\\nH...H\\nH...H\\nV...V\\nV...V\") == \"3\"\nassert solution(\"6 6\\nH...H\\nV...V\\nH...H\\nV...V\\nH...H\\nH...H\") == \"1\"\nassert solution(\"6 6\\nH...H\\nV...V\\nV...V\\nV...V\\nH...H\\nH...H\") == \"0\"\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\nV...\\nH...V\\n\") == \"3\"\nassert solution(\"1 2\\n.V.\\n.V.\\n\") == \"1\"\nassert solution(\"1 3\\n.V.\\n.#.#\\n\") == \"2\"\nassert solution(\"8 8\\n.V.\\n#..#\\n..##\\n..#.\\n#...#\\n###.#\\n..##.\\n..#..\\n\") == \"3\""
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '3'"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\n.V.\\n./.V.\\n..#..\\n.V.#.\\n.V./') == '3'\nassert solution('2 5\\nV...\\nH...V') == '-1'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5\\n'\n                '.V.\\n'\n                './.V.\\n'\n                '.V.#.\\n'\n                '#.V./\\n') == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 5\n.V.\n./.V\n..#..\n.V.#.\n.V./\n''') == '3'\n"
    },
    {
        "number": 3272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\nV...\\nH...V') == '3'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n7\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n\"\"\") == \"AMBIGUOUS\"\nassert solution(\"\"\"\n4\ncdefghi\nefghijk\nefghijx\nabcdefg\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('n fox jumps ove\\nudg brown f\\nxyz efghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('n fox jumps ove') == 'The quick brown fox jumps over the lazy dog.'\nassert solution('uick brown f') == 'AMBIGUOUS'\nassert solution('y dog.') == 'AMBIGUOUS'\nassert solution('rown fox') == 'AMBIGUOUS'\nassert solution('mps over the l') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\ncdefghi\\nefghijk\\nefghijx\\nabcdefg') == 'AMBIGUOUS'\nassert solution('3\\nfox\\njumps\\nover\\n') == 'fox jumps over'\n\"\"\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"AMBIGUOUS\"\nassert solution(\"4\") == \"AMBIGUOUS\""
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nn fox jumps ove\nuick brown f\nThe quick b\ny dog.\nrown fox\nmps over the l\nthe lazy dog\n''') == 'AMBIGUOUS'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '7\\n'\n    'n fox jumps ove\\n'\n    'uick brown f\\n'\n    'y dog.\\n'\n    'rown fox\\n'\n    'mps over the l\\n'\n    'efghijx\\n'\n    'abcdefg\\n'\n    ) == 'AMBIGUOUS'\n\nassert solution(\n    '10\\n'\n    'abcdefghijklmnopqrstuvwxyz\\n'\n    'x'\n    ) == 'AMBIGUOUS'\n\nassert solution(\n    '2\\n'\n    'q'\n    ) == 'AMBIGUOUS'\n\nassert solution(\n    '1\\n'\n    'A'\n    ) == 'AMBIGUOUS'\n\nassert solution(\n    '5\\n'\n    'abcdefgh\\n'\n    'AB\\n'\n    'abC\\n'\n    'AbC\\n'\n    'Abc\\n'\n    'ABc\\n'\n    'ABC\\n'\n    'abABC\\n'\n    'ABCa\\n'\n    'ABCA\\n'\n    'ABCab\\n'\n    'ABCabc\\n'\n    'ABCabc\\n'\n    'ABCABCa\\n'\n    'ABCABCab\\n'\n    'ABCABCabc\\n'\n    'ABCABCabc\\n'\n    'ABCABCABCab\\n'\n    'ABCABCABCabc\\n'\n    'ABCABCABCabc\\n'\n    'ABCABCABCABCab\\n'\n    'ABCABCABCABCabc\\n'\n    'ABCABCABCABCABCab\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABCABCABCABCabc\\n'\n    'ABCABC"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    n fox jumps ove\n    uick brown f\n    The quick b\n    y dog.\n    rown fox\n    mps over the l\n    the lazy dog\n\"\"\") == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7') == 'The quick brown fox jumps ove\\n'\nassert solution('4') == 'AMBIGUOUS\\n'\n"
    },
    {
        "number": 3273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"7\\n\"\n    \"n fox jumps ove\\n\"\n    \"uick brown f\\n\"\n    \"The quick b\\n\"\n    \"y dog.\\n\"\n    \"rown fox\\n\"\n    \"mps over the l\\n\"\n    \"the lazy dog\\n\"\n) == \"AMBIGUOUS\"\nassert solution(\n    \"4\\n\"\n    \"cdefghi\\n\"\n    \"efghijk\\n\"\n    \"efghijx\\n\"\n    \"abcdefg\\n\"\n) == \"AMBIGUOUS\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n-3 -2 3\\n-2 -2 4\\n2 3 3\\n-1 1 2\\n0 1 4\\n2 5 1\") == \"--+0-\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\"\"\") == \"\"\"--+0-\n\"\"\"\n\nassert solution(\"\"\"5 5\n1 2 1\n-1 0 2\n2 3 3\n-2 0 2\n0 0 1\"\"\") == \"\"\"0+-\n\"\"\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(s) == \"impossible\""
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n\"\"\") == \"--+0-\", \"First\"\nassert solution(\"\"\"\n3 2\n1 2 1\n-2 0 2\n\"\"\") == \"0+-\", \"Second\"\n\nassert solution(\"\"\"\n4 1\n1 2 2\n1 0 0\n0 1 1\n\"\"\") == \"--+0-\", \"Third\"\n\nassert solution(\"\"\"\n4 3\n1 2 0\n0 2 0\n0 0 1\n\"\"\") == \"--+0-\", \"Fourth\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\nSample Input 3:\n5 4\n0 1 4\n1 4 3\n2 3 3\nSample Output 3:\n--0+-\n''') == '0+-0--'\nassert solution('''5 4\n0 1 4\n1 4 3\n2 3 3\nSample Output 4:\nimpossible''') == 'impossible'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == \"--+0-\", \"The first example.\"\nassert solution('3 2') == \"0+-\", \"The second example.\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n1 2 1\n-2 0 2''') == '+-0-'\nassert solution('''5 1\n1 2 1\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\nSample Input 3:\n5 2\n1 2 1\n-2 0 2\nSample Output 3:\n0+-\n''') == '+--'\nassert solution('''3 3\n1 2 1\n2 3 3\n3 4 3\nSample Input 4:\n5 2\n1 2 1\n2 3 3\n3 4 3\n4 5 2\nSample Output 4:\n+-0+-\n''') == 'impossible'\nassert solution('''1 3\n0 1 2\n1 0 1\n1 3 3\n1 4 1\nSample Output 5:\n+-0+-\n''') == 'impossible'"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == \"0+-\", \"Sample Test 1\"\nassert solution('5 6') == \"--+0-\", \"Sample Test 2\"\nassert solution('12 3') == \"0+-\", \"Sample Test 3\"\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1''') == '--+0-'\n"
    },
    {
        "number": 3274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+--+0-0--+-0--+-0--+-0--+-0--+-0--+-0--+--+0-0-0+'\n\nassert solution('''3 2\n1 2 1\n-2 0 2\n''') == '0+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0-0-0-'\n\nassert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+--+0-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+0-0-0+'\n\nassert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '+--+0-0--+-0--+-0--+-0--+-0--+-0--+-0--+-0--+0-0-0+'\n\nassert solution('''5 6\n-3 -2 3\n-2 -2 4\n2 3 3\n-1 1 2\n0 1 4\n2 5 1\n''') == '0+-0--+-0--+-0--+-0--+-0--+-0--+-0--+0-0-0+'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 2') == '1'"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1 1 1 1') == '3'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sample_input_1) == \"1\"\nassert solution(sample_input_2) == \"4\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"1\""
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n1 1\n1 1\n1''') == '1'\nassert solution('''2 2\n1 2\n2 3\n2\n1 2 2\n2 2 2\nSample Input 3:\n2 100\n1 1\n1 1\n1\nSample Output 3:\n1\nSample Input 4:\n100 1\n1 1\n1 1\n1\nSample Output 4:\n9\n'''\n    ) == '10'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 1\\n1 1\\n1') == '1'\nassert solution('2 2\\n1 2\\n2 3\\n2\\n1 2 2\\n2 2 2\\n') == '4'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\nassert solution('1 2') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('3 4') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == 'YES'\nassert solution('''\n3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 5\nRRRRR\nRRRRR\nRRRRR\nBBBBB\n''') == 'YES'\nassert solution('''3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('4 2') == 'NO'\nassert solution('3 5') == 'YES'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n\n'''\n\n'''\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 5\nWRRRG\nWRRRG\nWRRRG\nWBBBB\n''') == 'YES'\n\nassert solution('''\n3 4\nWWRR\nWRRR\nWRRR\n''') == 'NO'\n\nassert solution('''\n1 2\n''') == 'NO'\n\nassert solution('''\n1 1\n''') == 'YES'\n\nassert solution('''\n3 3\nRWRR\nWRRB\nBRRB\n''') == 'NO'"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\nWWRR\\nWRRR\\nWRRR\") == \"NO\"\nassert solution(\"4 5\\nWRRRG\\nWRRRG\\nWRRRG\\nWBBBB\") == \"YES\"\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES'\n"
    },
    {
        "number": 3276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4') == 'YES'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 5') == '1'\nassert solution('6 3 5') == '3'\nassert solution('4 2 4') == '2'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 3 5\\n1\") == \"3\"\nassert solution(\"4 6 4 2\\n1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"10 20 30\\n1 2 3 4 5 6 7 8 9 10\") == \"1\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n2\n3\n''') == '1'\nassert solution('''\n1\n2\n1\n''') == '2'\nassert solution('''\n5\n3\n2\n1\n''') == '2'\nassert solution('''\n3\n5\n7\n''') == '3'\nassert solution('''\n7\n7\n4\n''') == '2'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 3 5\n1\n2\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n6 3 5\n1\n2\n3\n3\n2\n1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n6 3 5\n1\n2\n3\n4\n5\n6\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 3 5') == '3'\nassert solution('3 3 5') == '1'\nassert solution('4 5 1') == '1'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 3 5') == '3'\nassert solution('3 3 5') == '1'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 5') == '1', 'Wrong!'\nassert solution('1') == '0', 'Wrong!'\nassert solution('1 2 3') == '2', 'Wrong!'\nassert solution('6 3 5') == '3', 'Wrong!'"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('6 3 5') == '3'\n"
    },
    {
        "number": 3277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('6 3 5') == '3'\n\nstdin = \"\"\"\n6 3 5\n1\n2\n3\n3\n2\n1\n\"\"\"\n\nprint(solution(stdin))\n\n\"\"\"\nYUAN WANG\n\n\u90a3\u5c31\u662f\u8ba4\u771f\u7684\u8981\u601d\u8003\u4e0b\n\n\u6240\u4ee5\u7b54\u6848\u5c31\u662f\n\ndp[i] = dp[i-1]+dp[i-2]+...+dp[i-K]\n\ndp[i] = max(dp[i-1]+dp[i-2]+...+dp[i-K], dp[i-K]+dp[i-1])\n\n\u82e5dp[i] = dp[i-1]+dp[i-2]+...+dp[i-K], \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5230\u5f53\u524d\u7684\u503c\u5c31\u884c\u4e86\n\n\u8fd8\u6709dp[i-K]+dp[i-1], \u662f\u4e00\u79cd\u66f4\u4f18\u7684\u89e3\u6cd5\n\n\"\"\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n0 2\n1 2\n3 3\n\"\"\") == \"3 2\"\nassert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"12 3\"\nassert solution(\"2\") == \"2 2\"\nassert solution(\"0 2\") == \"2 2\"\nassert solution(\"1 3\") == \"3 3\"\nassert solution(\"3 3\") == \"3 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3 2'\nassert solution('5') == '12 3'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\"\n) == \"3 2\"\nassert solution(\n    \"5\"\n) == \"12 3\""
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\"\nassert solution(\"\"\"\n10\n1 2\n2 3\n4 5\n4 6\n7 6\n8 7\n9 8\n10 8\n\"\"\") == \"14 6\"\nassert solution(\"\"\"\n20\n0 2\n1 3\n2 4\n3 4\n4 6\n5 5\n6 7\n7 7\n8 8\n9 9\n10 9\n11 9\n12 9\n13 8\n13 8\n13 7\n14 7\n15 7\n16 7\n17 7\n18 7\n19 7\n20 7\n\"\"\") == \"29 18\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 2\n1 2\n3 3\n\"\"\") == \"3 2\"\n\nassert solution(\"\"\"\n5\n0 2\n1 3\n3 3\n7 5\n9 5\n\"\"\") == \"12 3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 2\\n1 2\\n3 3\\n') == '3 2\\n'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n') == '12 3\\n'\n\n\"\"\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0 2\\n1 2\\n3 3\\n') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n') == '12 3'"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3 2\"\nassert solution(\"5\") == \"12 3\"\n"
    },
    {
        "number": 3278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n3 3') == '3 2'\nassert solution('5\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5') == '12 3'\nassert solution('10\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n1 4\\n2 5\\n5 7\\n9 9\\n3 6\\n8 8') == '10 3'\nassert solution('100\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n1 4\\n2 5\\n5 7\\n9 9\\n3 6\\n8 8\\n1 5\\n2 6\\n5 8\\n9 10') == '100 3'\nassert solution('100\\n0 2\\n1 3\\n3 3\\n7 5\\n9 5\\n1 4\\n2 5\\n5 7\\n9 9\\n3 6\\n8 8\\n1 5\\n2 6\\n5 8\\n9 10\\n3 6\\n8 8') == '100 3'"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == \"100000\"\nprint('YOUR ANSWER:', solution(input_data))\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '100'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '0010'\nassert solution('''\n4\n0\n1 1\n1\n1 1\n1\n1\n''') == '0000'\nassert solution('''\n4\n0\n1 1\n1\n1 1\n1\n1\n''') == '1001'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2\") == \"100\"\nassert solution(\"1\") == \"010\"\nassert solution(\"0\") == \"000\"\nassert solution(\"0 0 0\") == \"101010\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1\n0\n0\n3\n''') == '100'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '1001'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '0010'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\n''') == '100'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"000001100101000010100000110\"\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1\n0\n0\n3\n''') == '100'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Input 3:\n3\n0\n1 1\n1\n0\n1\nSample Output 3:\n0011\n0101\n0101\n0101\n0101\n0101\n0101\n''') == '010101010101010101010101'\nassert solution('''\n4\n0\n0\n1 1\n1\n1\n1\n1\nSample Input 4:\n4\n0\n1 1\n1\n1\n0\n0\nSample Output 4:\n0001\n0101\n0101\n0101\n0101\n0101\n0101\n0101\n''') == '010101010101010101010101'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1\n0\n0\n3\nSample Output 2:\n100\n000\n01\n01\n01\n01\n00\n10\n00\n10\n01\n010\n000\n100\n010\n000\n010\n010\n010\n010\n000\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010\n010"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0\n0\n3\n0\n''') == '100'\nassert solution('''\n3\n0\n1 1\n1\n1 1\n1\n1\nSample Input 3:\n4\n0\n1 1\n1\n1 1\n1\n1\nSample Output 3:\n01\n010\n100\n010\n\nSample Input 4:\n6\n0\n1 1\n1\n1 1\n1\n1\nSample Output 4:\n100\n010\n001\n010\n000\n001\n\nSample Input 5:\n7\n0\n1 1\n1\n1 1\n1\n1\nSample Output 5:\n100\n000\n001\n010\n000\n001\n\n''') == '01010001010'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0101'\n"
    },
    {
        "number": 3279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == \"10010\"\nassert solution(s) == \"101010\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2', \"Should record two shows\"\nassert solution('4 1') == '3', \"Should record three shows\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"4 1\") == \"3\"\n\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\""
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('4 1') == '3'"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1\n1 2\n2 3\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3 2\n1 4\n1 3\n2 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 1\n1 3\n4 6\n7 8\n2 5\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1 0\n4 1\n1 3\n2 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\n1 2\n2 3\n2 3\n''') == '2'\nassert solution('''\n4 1\n1 3\n4 6\n7 8\n2 5\n''') == '3'\n''')\n"
    },
    {
        "number": 3280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3') == '2'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 495\") == \"126.86989765\"\nassert solution(\"5 6 300\") == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"90.00000000\"\n\nIn Sample Case #2:\n\nSample Input 1:\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\nSample Output 1:\nImpossible\n\nSample Input 2:\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\nSample Output 2:\n126.86989765\n\nSample Input 3:\n5 6 450\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\nSample Output 3:\nImpossible\n'''\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '90.00000000'\nassert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5\\n') == '126.86989765'"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6 500\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == \"90.00000000\"\nassert solution('5 6 700\\n-100 0\\n-100 100\\n0 200\\n100 100\\n100 0\\n1 2\\n1 3\\n2 3\\n3 4\\n3 5\\n4 5') == \"126.86989765\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 450') == '126.86989765'\nassert solution
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 6 500\n-100 0\n-100 100\n0 200\n100 100\n100 0\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n''') == '90.00000000'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 1 100\") == \"90.00000000\"\nassert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"10 0 1\") == \"Impossible\"\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 6 500\") == \"90.00000000\"\nassert solution(\"5 6 100\") == \"126.86989765\"\nprint(solution(input()))\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6 500') == '90.00000000'\nassert solution('5 6 500') == '126.86989765'\n"
    },
    {
        "number": 3281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 6 500\\n\"\n    \"-100 0\\n\"\n    \"-100 100\\n\"\n    \"0 200\\n\"\n    \"100 100\\n\"\n    \"100 0\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"3 5\\n\"\n    \"4 5\"\n) == \"90.00000000\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\"\"\""
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''37\n30014\n''') == '4'\nassert solution('''30014\n''') == '7'\nassert solution('''37\n30014\n''') == '7'\nassert solution('''37\n30014\n''') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('30014') == '7'\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n37\n\"\"\") == \"4\"\nassert solution(\"\"\"\n30014\n\"\"\") == \"7\""
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\nprint(solution(input()))\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '7'\nassert solution('37') == '4'\nassert solution('30014') == '7'"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"37\"\n    ) == \"4\"\n\nassert solution(\n    \"30014\"\n    ) == \"7\"\n"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'"
    },
    {
        "number": 3282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('37') == '4'\nassert solution('30014') == '7'\n\n\"\"\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 4 3\n''') == '4.900000000000002'\nprint('All tests passed!')\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3 1\n1\n1\n1''') == '3.5'\n\nassert solution('''3 3 2\n2\n1\n3''') == '4.9'\n\nassert solution('''5 5 3 2\n1\n3\n3\n2\n2\n1''') == '3.4'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 1\n''') == '3.5'\nassert solution('''3 3 2\n''') == '4.9'\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\\n\") == \"3.5\"\nassert solution(\"3 3 2\\n\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1') == '3.5'\nassert solution('3 3 2') == '4.9'\nprint('Check passed')\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1\") == \"3.5\"\nassert solution(\"3 3 2\") == \"4.9\"\n"
    },
    {
        "number": 3283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3 2\n\"\"\") == \"4.9\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '19'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5 1 5\") == \"19\"\nassert solution(\"12 12 1 12\") == \"4\"\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 5 1 5\n''') == '19'\nassert solution('''\n12 12 1 12\n''') == '4'\n"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 5 1 5\n12 12 1 12''') == '4'"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 1 5') == '19'\nassert solution('12 12 1 12') == '4'\nprint(solution(input()))\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 3284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == '0'\nprint(solution(''))\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 5\n''') == '4'\n\nassert solution('''\n1 12\n''') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5\\n') == '4'\nassert solution('1 12\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('5 5') == '5'\nassert solution('10 10') == '10'\nassert solution('10000 10000') == '10000'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '4'\nassert solution('1 12') == '4'\n"
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n0\n0\n\"\"\",\n\"\"\"\n10\n\"\"\") == \"3\nassert solution(\n\"\"\"\n1\n1\n\"\"\",\n\"\"\"\n2\n\"\"\") == \"1\nassert solution(\n\"\"\"\n1\n1\n\"\"\",\n\"\"\"\n2\n\"\"\") == \"1\nassert solution(\n\"\"\"\n1\n1\n\"\"\",\n\"\"\"\n2\n\"\"\") == \"1\n\"\"\")\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\nassert solution(\"cat\") == \"0\"\nassert solution(\"dog\") == \"0\"\nassert solution(\"catcat\") == \"0\"\n\n##def solution(stdin: str) -> str:\n##    vowels = \"aeiou\"\n##    n = len(stdin)\n##    res = 0\n##    for i in range(1, n):\n##        cnt = 0\n##        if stdin[i - 1] in vowels:\n##            cnt += 1\n##        if stdin[i] in vowels:\n##            cnt += 1\n##        if stdin[i - 1] not in vowels:\n##            cnt += 1\n##        if stdin[i] not in vowels:\n##            cnt += 1\n##        res += (cnt * (cnt + 1)) // 2\n##    return str(res % 1000000009)\n##\n##\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\"\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''car\ncocar''') == \"1\"\nassert solution('''car\ncocacar''') == \"2\"\nassert solution('''car\ncocacar\ncar''') == \"3\"\nassert solution('''car\ncocacar\ncar\ncar''') == \"4\"\nassert solution('''car\ncocacar\ncar\ncar\ncar''') == \"5\"\n\n## Solution"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('car') == '1'\nassert solution('cocar') == '2'\n"
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"car\") == \"1\"\nassert solution(\"cocar\") == \"2\""
    },
    {
        "number": 3286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''car\ncocar\nco\n''') == '1'\n\nassert solution('''cocar\nco\n''') == '2'\n\nassert solution('''cocar\nco\n''') == '2'\n\nassert solution('''cocar\nco\n''') == '2'\n\nassert solution('''cocar\nco\n''') == '2'"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 1\n''') == '6'\nassert solution('''4\n1 2 1 1\n''') == '6'\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\nassert solution('''6\n1000000 1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n0 2 0 1\n''') == '8'\nassert solution('''\n5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n2\n0 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5\n1000000 1 1 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4\n0 2 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n4\n0 1 1 1\n\"\"\") == \"0\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6\\n0 2 0 1') == \"8\"\nassert solution('4\\n0 2 0 1') == \"1\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 2 0 1\") == \"8\"\nassert solution(\"5\\n1000000 1 1 1 1\") == \"0\"\nassert solution(\"1000000\\n1000000\") == \"0\"\n"
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"5\") == \"0\""
    },
    {
        "number": 3287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n0 2 0 1\n''') == '8'\nassert solution('''5\n1000000 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 650\n''') == 'zyz'\nassert solution('''\n2 651\n''') == '-1'\nassert solution('''\n1 1\n''') == 'a'\n''')\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 650\") == \"zyz\"\nassert solution(\"2 651\") == \"-1\""
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 10\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n395 397\n397 398\n397 399\n398 400\n399 401\n400 402\n401 403\n402 404\n403 405\n404 406\n405 407\n407 408\n407 409\n408 410\n409 411\n410 412\n411 413\n412 414\n413 415\n414 416\n415 417\n416 418\n417 419\n418 420\n419 421\n420 422\n421 423\n422 424\n423 425\n424 426\n425 427\n426 428\n427 429\n428 430\n429 431\n430 432\n431 433\n432 434\n433 435\n434 436\n435 437\n436 438\n437 439\n438 440\n439 441\n440 442\n441 443\n442 444\n443 445\n444 446\n445 447\n446 448\n447 449\n448 450\n449 451\n450 452\n451 453\n452 454\n453 455\n454 456\n455 457\n456 458\n457 459\n458 460\n459 461\n460 462\n461 463\n462 464\n463 465\n464 466\n465 467\n466 468\n467 469\n468 470\n469 471\n470 472\n471 473\n472 474\n473 475\n474 476\n475 477\n476 478\n477 479\n478 480\n479 481\n480 482\n481 483\n482 484\n483 485\n484 486\n485 487\n486 488\n487 489\n488 490\n489 491\n490 492\n491 493\n492 494\n493 495\n494 496"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"aba\"\nassert solution(\"2 7\") == \"zyz\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == '5'\nassert solution('3 5 7 1 2 6') == '1'\nassert solution('2 3 5 1 2 3') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 650') == 'zyz'\nassert solution('2 651') == '-1'\nassert solution('100') == '-1'\nassert solution('2 123') == '-1'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"aba\"\nassert solution(\"2 1\") == \"ac\"\nassert solution(\"2 2\") == \"ab\"\nassert solution(\"2 3\") == \"yz\"\nassert solution(\"3 1\") == \"zyz\"\n"
    },
    {
        "number": 3288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"zyz\"\nassert solution(input(\"\")) == -1\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('7') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '4'\nassert solution('2\\n0 1\\n') == '1'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6\n0 10 0\n10 0 1\n12 8 1\n5 5 0\n11 2 1\n11 3 0\n\"\"\") == \"4\"\nassert solution(\"\"\"\n10\n6 1 1\n0 2 0\n2 1 1\n6 1 1\n8 2 0\n4 4 0\n4 0 0\n2 3 1\n6 1 0\n6 3 1\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0') == \"4\"\nassert solution('10\\n6 1 1\\n0 2 0\\n2 1 1\\n6 1 1\\n8 2 0\\n4 4 0\\n4 0 0\\n2 3 1\\n6 1 0\\n6 3 1\") == \"8\"\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == \"4\""
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '4'\nassert solution('10') == '8'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"10\") == \"8\"\nassert solution(\"10\") == \"4\"\n\"\"\"\n\nimport sys\nimport os\nfrom collections import defaultdict\nsys.path.append(os.path.dirname(__file__)+'/..')\nfrom utils import *"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n0 10 0\\n10 0 1\\n12 8 1\\n5 5 0\\n11 2 1\\n11 3 0\\n') == '4'\n"
    },
    {
        "number": 3289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 2') == '1'\nassert solution('3 5 2') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10\\n') == '0'\nassert solution('3 5 2\\n1 4 7 9 11\\n2 3\\n') == '2'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('3 2') == '-1'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 5 2') == '2'\nassert solution('4 7 9 11') == '1'"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4 3\n3 4 5 7\n1 2 10\n''') == '0'\nassert solution('''\n3 5 2\n1 4 7 9 11\n2 3\n''') == '2'\n''')\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10\\n') == '0'\nassert solution('3 5 2\\n1 4 7 9 11\\n2 3\\n') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4 3\\n3 4 5 7\\n1 2 10\\n') == '0'\nassert solution('3 5 2\\n1 4 7 9 11\\n2 3\\n') == '2'\n"
    },
    {
        "number": 3290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\nassert solution(stdin='''\n2 3\n1 2 3\n2 3\n''') == '1'\nassert solution(stdin='''\n2 4\n1 2 3\n2 3\n''') == '-1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n3 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n100000 6\n100000 2\n\"\"\") == \"100001\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n3 2\") == \"1\"\nassert solution(\"1 2\\n3 4\") == \"3\"\nassert solution(\"1 2\\n3 4\") == \"1\"\nassert solution(\"1 2\\n1 2\") == \"1\"\nassert solution(\"2 2\\n3 4\") == \"3\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '1'\nassert solution('3 2') == '1'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2 3\n3 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2 1\n4 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n2 2\n2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 2\n1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n3 2\n''') == '1'\nassert solution('''\n1 2\n3 4\n''') == '3'\nassert solution('''\n1 5\n7 9\n''') == '2'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 2') == '2'\nassert solution('4 8') == '3'\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"3 2\") == \"0\"\n"
    },
    {
        "number": 3291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution('1 2') == '2'\nassert solution('2 3') == '1'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '24'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1\\n'\nassert solution('2') == '1\\n2\\n'\nassert solution('3') == '2\\n4\\n'\nassert solution('4') == '3\\n4\\n5\\n'\nassert solution('5') == '4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '0'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '4'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n\"\n    \"IVO\\n\"\n    \"JASNA\\n\"\n    \"JOSIPA\\n\"\n    ) == \"4\\n\"\n\nassert solution(\n    \"5\\n\"\n    \"MARICA\\n\"\n    \"MARTA\\n\"\n    \"MATO\\n\"\n    \"MARA\\n\"\n    \"MARTINA\\n\"\n    ) == \"24\\n\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"24\"\nassert solution(\"6\") == \"720\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nIVO\\nJOSIPA\\nMARA\") == \"4\", 'Wrong!'\nassert solution(\"2\\nIVO\\nMARIA\\nMARY\\nJASNA\\nJOSIPA\\nMARA\") == \"17\", 'Wrong!'\nassert solution(\"3\\nIVO\\nMARIA\\nMARY\\nJOSIPA\\nMARTA\") == \"4\", 'Wrong!'\nassert solution(\"4\\nIVO\\nMARTA\\nMARY\\nJOSIPA\\nMARIA\") == \"17\", 'Wrong!'\nassert solution(\"5\\nIVO\\nMARTA\\nMARY\\nJOSIPA\\nMARIA\") == \"24\", 'Wrong!'"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"1\"\nassert solution(\"2\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"4\"\nassert solution(\"3\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"6\"\nassert solution(\"4\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"21\"\nassert solution(\"5\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"7\"\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nMARTINA\\nMARTA\\nMARICA\\nMATO') == '4'\n"
    },
    {
        "number": 3292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\nIVO\\nJASNA\\nJOSIPA\\n\") == \"4\"\nassert solution(\"2\\nMARICA\\nMARTA\\nMATO\\nMARA\\nMARTINA\\n\") == \"24\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\\n2 3 1\\n3 3 4 1\\n3 4 5 1\") == \"3\"\nassert solution(\n    \"5\\n3 2 3 3 4 3\\n4 3 4 4 5 2\\n2 3 2 4 1 2\\n1 3 4 4 1 2\\n2 3 4 5 1 1\") == \"0\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"1 2 3 1\") == \"3\"\nassert solution(\"2 3 4 1\") == \"9\"\nassert solution(\"3 4 5 1\") == \"39\"\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3', 'First'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39', 'Second'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2 3 1\n2 3 4 1\n3 4 5 1\n1 9 4 7\n''') == '39'\nassert solution('''\n4\n1 2 3 1\n2 3 4 1\n3 4 5 1\n1 9 4 7\n''') == '41'\nassert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n1 9 4 7\n''') == '0'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\nassert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '36'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '37'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1\\n2 3 4 1\\n3 4 5 1\\n') == '3'\nassert solution('6\\n2 2 4 1\\n3 3 5 1\\n1 4 6 1\\n5 4 8 1\\n') == '41'\nprint('all tests passed')\n\n'''"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\nassert solution('''\n3\n2 2 3 8\n3 1 5 6\n1 9 4 7\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '3'\n\nassert solution('''1 2 3 1\n2 3 4 1\n3 4 5 1\n''') == '39'\n"
    },
    {
        "number": 3293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3 3 4 1\\n3 1 5 6\\n1 9 4 7') == '39'\nassert solution('1\\n2 2 3 1\\n3 1 5 6\\n1 9 4 7') == '40'\nassert solution('1\\n3 3 4 1\\n3 1 5 6\\n1 9 4 7') == '41'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '5.2696518641'\nassert solution('1') == '9'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '5.2696518641'\nprint(solution('''5\n8 9 3 -14 -14 14 -14 0 20\nSample Input 1:\n2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\nSample Output 1:\n5.2696518641\nSample Input 2:\n1\n8 9 3 -14 -14 14 -14 0 20\nSample Output 2:\n9'''))\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1.732051877'\nassert solution('1') == '1'"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2\\n-1 -2\\n3\\n4\\n5\\n-1 -2\") == \"3.3169696969\"\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '5.2696518641'\n"
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"5.2696518641\"\nassert solution(\"1\") == \"9\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5 8 4 -2 0 0 -3 2 0 0 3\") == \"5.2696518641\"\nassert solution(\"1\\n8 10 4 -1 -1 1 -1 1 1 -1 1\") == \"9\""
    },
    {
        "number": 3294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"9.2696518641\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"8\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 1 1\n5 2 3\n5 0 3\n''') == '6'\nassert solution('''\n3\n1 1 1\n2 0 2\n3 1 1\n''') == '8'\nassert solution('''\n3\n4 1 1\n5 2 3\n5 0 3\n''') == '4'\n'''\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 0 2\") == \"8\"\nassert solution(\"3 1 1\") == \"4\"\n\nimport itertools\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '4'\nassert solution('10') == '11'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 1 1\n2 0 2\n3 1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 1 1\n5 2 3\n5 0 3\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n1 2 3\n0 1 2\n1 2 2\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n3 3 3\n1 2 3\n1 3 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4 4\n3 2 1 2\n2 1 1 3\n2 2 2 3\n\"\"\") == \"6\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('2 0 2') == '8'\nassert solution('3 1 1') == '4'\n\nstdin = '''\n4\n1 1 1\n2 0 2\n3 1 1\n5 0 3\n'''\n\nprint(solution(stdin))"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '''\n    1 1 1\n    2 0 2\n    3 1 1\n    '''\n) == \"1\"\n\nassert solution(\n    '''\n    4 1 1\n    5 2 3\n    5 0 3\n    '''\n) == \"8\"\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1 1 1\") == 1\nassert solution(\"2 0 2\") == 8\nassert solution(\"3 1 1\") == 4\nassert solution(\"4 1 1\") == -1\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('4 1 1') == '8'\nassert solution('5 2 2') == '4'\nassert solution('5 0 2') == '24'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 3') == '6'\nassert solution('4 4') == '28'\nassert solution('5 5') == '210'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '6 6'\n) == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"10 3\") == \"24\"\nassert solution(\"10000 5\") == \"10000\"\nassert solution(\"3 5\") == \"3\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n8 4\n''') == '27'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '3'\nassert solution('3 3') == '6'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n3\n1 2''') == '3'\nassert solution('''6\n6\n1 3\n1 4\n1 5\n1 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n''') == '240'\nassert solution('''10\n10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"5 3\") == \"8\"\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '3'\nassert solution('6 6') == '240'\n"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 4') == '16'\nassert solution('4 5') == '4'\nassert solution('5 6') == '1'"
    },
    {
        "number": 3296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 1') == '2'\nassert solution('1 2 2') == '3'\nassert solution('1 1 1 2') == '3'\nassert solution('1 2 2 1') == '3'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'impossible'\n\nassert solution('SEND+MORE=MONEY') == '9567+1085=10652'\n\nassert solution('AAAA+BBBB=AAAA') == '2+1=3'\n\nassert solution('AAAAA+BBBB=AAAA') == '2+1=3'\n\nassert solution('CCCC+DDDD=CCCC') == '2+1=3'"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''SEND+MORE=MONEY''') == '9567+1085=10652'\nassert solution('''A+A=A''') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''SEND+MORE=MONEY\nA+A=A''') == \"9567+1085=10652\"\nassert solution('''A+A=A\nSEND+MORE=MONEY''') == \"impossible\""
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == \"impossible\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''SEND+MORE=MONEY''') == \"9567+1085=10652\"\nassert solution('''C+B=A''') == \"2+1=3\"\nassert solution('''Z+W=L''') == \"2+1=3\"\nassert solution('''BY+F=W''') == \"2+1=3\"\n''')\n"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('SEND+MORE=MONEY') == '9567+1085=10652'\nassert solution('A+A=A') == 'impossible'\nprint('all test cases passed')"
    },
    {
        "number": 3297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"SEND+MORE=MONEY\") == \"9567+1085=10652\"\nassert solution(\"A+A=A\") == \"impossible\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"5\\n1 1 2 1 1\") == r\"1\"\nassert solution(r\"10\\n1 2 3 4 5 6 7 8 9 10\") == r\"5\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n0 1 2 3\n\"\"\") == \"14\"\n\nassert solution(\n\"\"\"\n4\n0 1 2 3\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n5\n1 1 2 1 1\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n3\n1 1 1\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n7\n2 1 1 2 1 2 3\n\"\"\") == \"2\""
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1 2 1 1\n''') == '1'\nassert solution('''4\n0 1 2 3\n''') == '14'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 2 3\") == \"14\"\nassert solution(\"5\\n1 1 2 1 1\") == \"1\""
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '1'\nassert solution('10') == '7'\nassert solution('100') == '24'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'\nassert solution('2 1') == '2'\nassert solution('4 5 3 4 1 3 2') == '4'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3\n''') == '1'\nassert solution('''\n1 1 1\n''') == '1'\nassert solution('''\n0\n''') == '0'\nassert solution('''\n0 0 0\n''') == '1'\nassert solution('''\n0 1 1\n''') == '2'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '1'\nassert solution('3') == '0'\nassert solution('5') == '14'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 1 2 1 1\n''') == '14'\n\nassert solution('''\n5\n0 1 2 3 4\n''') == '1'"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == \"88\"\nassert solution('5 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n0 0 0 15') == \"-1\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10') == 88\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"88\"\nassert solution(\"1 2 3 0\") == \"88\"\nassert solution(\"0 0 5 6\") == \"88\"\nassert solution(\"0 4 7 8\") == \"88\"\nassert solution(\"7 0 0 10\") == \"-1\""
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 4\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10') == \"88\"\nassert solution('4 4\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n1 2 3') == \"88\"\nassert solution('4 4\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n0 0 0') == \"1\"\nassert solution('1 1\\n1 1\\n1 1\\n1 1') == \"3\"\nassert solution('5 5\\n0 0 0 0 0\\n1 1 1 1 1\\n0 0 0 0 0\\n0 0 0 0 0\\n0 0 0 0 0') == \"4\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 0') == '88', \"Wrong\"\nassert solution('4 4') == '88', \"Wrong\"\nassert solution('4 4') == '88', \"Wrong\"\nassert solution('4 4') == '88', \"Wrong\"\nassert solution('4 4') == '88', \"Wrong\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '88'\nassert solution('4 4') == '88'\nassert solution('5 5') == '-1'\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n') == '88', solution('4 4\\n1 2 3 0\\n0 0 5 6\\n0 4 7 8\\n7 0 0 10\\n')\nassert solution('3 3\\n1 2 3\\n0 0 5\\n0 0 7\\n') == '-1', solution('3 3\\n1 2 3\\n0 0 5\\n0 4 7\\n')\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 0\\n0 0 5 6\\n0 0 7 8\\n7 0 0 10\\n\") == \"88\"\n"
    },
    {
        "number": 3299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n1 2 3 0\n0 0 5 6\n0 4 7 8\n7 0 0 10\n''') == '88'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"0.000\"\nassert solution(\"1 99999\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\nassert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\nassert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\nassert solution('''\n2\n1 99999\n99999 99999\n''') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.000\"\nassert solution(\"\"\"\n3\n1 10\n1 10\n1 10\n\"\"\") == \"10.000\"\nassert solution(\"\"\"\n5\n1 3\n1 1\n1 2\n1 4\n1 5\n\"\"\") == \"8.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0.000'\nassert solution('3') == '1.000'\nassert solution('1000000') == '999999999999.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1') == '0.000'\nassert solution('2\\n1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0.000'\nassert solution('1 99999') == '9999700002.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n1 1\n1 1\n''') == '0.000'\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '9999700002.000'\nassert solution('1') == '0.000'\nprint('Tests passed.')"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\\n\") == \"0.000\"\nassert solution(\"2\\n1 1\\n1 1\\n\") == \"9999700002.000\"\n"
    },
    {
        "number": 3300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n1 1\n1 1\n\"\"\") == \"0.000\"\n\nassert solution(\"\"\"\n2\n1 99999\n99999 99999\n\"\"\") == \"9999700002.000\"\n\nassert solution(\"\"\"\n4\n1 1\n1 1\n1 1\n1 1\n\"\"\") == \"0.000\"\n\nassert solution(\"\"\"\n3\n1 1\n1 1\n1 1\n\"\"\") == \"0.000\"\n\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"0.000\""
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\"\"\") == \"3\"\nassert solution(\"\"\"6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\"\"\") == \"4\"\nassert solution(\"\"\"7 3 1 2\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\"\"\") == \"Infinity\"\nassert solution(\"\"\"3 4 1 2\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\"\"\") == \"3\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\n''') == 'Impossible'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 8 1 6\") == \"3\"\nassert solution(\"3 4 1 2\") == \"Infinity\"\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == '3'\nassert solution(sample_input_2) == 'Infinity'\nassert solution(input) == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3 1') == '3'\nassert solution('3 2 4 1') == 'Infinity'\nassert solution('4 3 2 5 2') == '5'\nassert solution('4 2 3 1') == '3'\nassert solution('4 2 5 1') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '3'\nassert solution('''4 1 2 5\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5''') == '3'\nassert solution('6 8 1 6\\n1 2 5\\n1 3 1\\n2 6 6\\n2 3 6\\n4 2 3\\n3 4 1\\n4 5 1\\n5 6 1\\n5') == '3'\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == '3'\nassert solution('''\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\n''') == 'Impossible'\n'''\n"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 8 1 6') == '3'\nassert solution('3 4 1 2') == 'Infinity'"
    },
    {
        "number": 3301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4 1 2') == '3'\n\nassert solution('6 8 1 6') == '4'\n\nassert solution('3 4 1 6') == 'Impossible'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'impossible'\nassert solution('6 1') == 'impossible'\nassert solution('3 1') == '000 001 011 010 011 010'\nassert solution('3 2') == '000 001 011 010 011 010'\nassert solution('3 2') == '000 001 011 010 011 010'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n10\n3\n1\n4\n9\n11\n15\n7\n''') == 'impossible'\nassert solution('''8\n2\n3\n2\n4\n3\n1\n5\n1\n''') == '000'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(samples[0]) == \"impossible\"\nassert solution(samples[1]) == \"000\""
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\n\nassert solution(\"1\") == \"impossible\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1') == \"impossible\"\nassert solution('6 1') == \"000\"\nassert solution('8 1') == \"00011\"\nassert solution('5 1') == \"01010\"\nassert solution('13 1') == \"11001011\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == '010'\nassert solution('3') == '111'\nassert solution('4') == '110'\nassert solution('5') == '011'\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"impossible\"\nassert solution(\"3 1\") == \"000\"\nassert solution(\"6 1\") == \"impossible\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'impossible'\nassert solution('3 1') == '000 001 011 010 1111'\nassert solution('4 1') == '000 001 011 010 0011 1110'\nassert solution('5 1') == '000 001 011 010 0011 1110 1111'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 1\\n\"\n    \"1\\n\") == \"impossible\"\nassert solution(\n    \"6 1\\n\"\n    \"6\\n\") == \"0001110\\n\"\n"
    },
    {
        "number": 3302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 2\n1\n''') == 'impossible'\nassert solution('''\n4 2\n2\n''') == '000'\nassert solution('''\n4 2\n1\n''') == '011'\nassert solution('''\n4 2\n2\n''') == '010'\nassert solution('''\n4 2\n2\n''') == '011'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10\n99\n''') == '1'\nassert solution('''90\n10''') == '10'\nassert solution('''90\n99''') == '1'\nassert solution('''10\n10''') == '2'\n\n'''"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '1'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"10\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"99\") == \"2\"\nassert solution(\"90\") == \"10\"\nassert solution(\"11\") == \"11\"\nassert solution(\"543\") == \"3\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '1'\nassert solution('99') == '2'\nassert solution('90') == '10'\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n90\n10\n''') == '1', f\"failed on input '{stdin}'\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10\\n90\") == \"1\"\nassert solution(\"9\\n9\") == \"1\"\nassert solution(\"99\\n10\") == \"2\"\n"
    },
    {
        "number": 3303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '10\\n99') == '1', \"Wrong Answer\""
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('10') == '1'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 3') == '2'\nassert solution('4 1 10') == '1'\nassert solution('2 7 3') == '0'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 3 3\\n4 1 10\\n2 7 3\") == \"1\"\nassert solution(\"4\\n3 1 3 3\\n5 8 7 10\\n4 1 2 6\") == \"2\"\nassert solution(\"2\\n3 1 3 3\\n4 1 10\\n2 7 3\") == \"1\"\nprint('tests pass')\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n2 3 3\n4 1 10\n2 7 3\n''') == '1'\nassert solution('''4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '1'\n\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '2'\n"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\n\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\n\nassert solution('''\n5\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '0'\n\nassert solution('''\n10\n10 1 1 4 1 5 1 2 5\n10 1 1 1 4 1 5 1 2 5\n''') == '2'\n\nassert solution('''\n12\n2 1 1 1 2 1 1 2\n1 1 1 1 2 1 1 2\n''') == '0'"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 3 3\n4 1 10\n2 7 3\n''') == '2'\nassert solution('''\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\n''') == '1'\nprint('all tests passed')"
    },
    {
        "number": 3304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '5'\nassert solution('4 8') == '11'\nassert solution('1 9') == '16'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2\\nab\\nabc\\nef\\n') == 'abbcef'\nassert solution('3 3\\nabcd\\nfed\\n') == 'abfedcd'\nassert solution('3 1\\nad\\n') == 'a'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == ''\nassert solution('2') == '11'\nassert solution('3') == '6'\nassert solution('4') == '7'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"7\"\n\"\"\"\nimport sys\nfrom functools import reduce\nfrom collections import deque\nfrom collections import defaultdict\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"11\"\n\nassert solution(\"\"\"\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"16\"\n\nassert solution(\"\"\"\nbeginning\n1 5\n4 8\n1 9\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('9 3\\nbeginning\\n1 5\\n4 8\\n1 9') == '5'\nassert solution('6 1\\nvelvet\\n1 6') == '7'\nassert solution('1 5\\n4 8\\n1 9') == '11'\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == 5\nassert solution('4 8') == 11\nassert solution('1 9') == 16\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nbeginning\n1 5\n4 8\n1 9\n''') == '11'\nassert solution('''\n6 1\nvelvet\n1 6\nSample Output 2:\n7\n"
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n    1 1\n    1 3\n    1 7\n    1 9\n    1 11\n    1 13\n    1 17\n    1 19\n    1 21\n    1 23\n    1 29\n    1 31\n    1 37\n    1 41\n    1 43\n    1 47\n    1 53\n    1 59\n    1 61\n    1 67\n    1 73\n    1 79\n    1 81\n    1 89\n    1 97\n    1 101\n    1 107\n    1 109\n    1 113\n    1 119\n    1 121\n    1 127\n    1 131\n    1 137\n    1 141\n    1 143\n    1 149\n    1 151\n    1 157\n    1 163\n    1 167\n    1 173\n    1 179\n    1 181\n    1 191\n    1 193\n    1 197\n    1 199\n    1 207\n    1 209\n    1 211\n    1 223\n    1 227\n    1 229\n    1 233\n    1 239\n    1 241\n    1 247\n    1 253\n    1 259\n    1 261\n    1 263\n    1 269\n    1 271\n    1 277\n    1 281\n    1 283\n    1 289\n    1 291\n    1 293\n    1 293\n    1 296\n    1 298\n    1 298\n    1 299\n    1 301\n    1 301\n    1 303\n    1 304\n    1 305\n    1 307\n    1 309\n    1 311\n    1 313\n    1 314\n    1 315\n    1 316\n    1 317\n    1 318\n    1 318\n    1 319\n    1 320\n    1 321\n    1 323\n    1 324\n    1 326\n    1 327\n    1 328\n    1 329\n    1 330\n    1 331\n    1 332\n    1 333\n    1 335\n    1 336\n    1 338\n    1 339\n    1 340\n    1 341\n    1 343\n    1 343\n    1 346\n    1 346\n    1 347\n    1 348\n    1 349\n    1 350\n    1 351\n    1 353\n    1 354\n    1 356\n    1 357\n    1 358\n    1 358\n    1 359\n    1 360\n    1 361\n    1 362\n    1 363\n    1 364\n    1 366\n    1 367\n    1 368\n    1 369\n    1 370\n    1 371\n    1 373\n    1 375\n    1 376\n    1 376\n    1 377\n    1 378\n    1 379\n    1 380\n    1 381\n    1 381\n    1 382\n    1 383\n    1 384\n    1 385\n    1 386\n    1 386\n    1 387\n    1 388\n    1 389\n    1 390\n    1 391\n    1 392\n    1 393\n    1 394\n    1 395\n    1 396\n    1 397\n    1 398\n    1 399\n    1 400\n    1 401\n    1 403\n    1 404\n    1 405\n    1 406\n    1 406\n    1 407\n    1 408\n    1 409\n    1 410\n    1 411\n    1 412\n    1 414\n    1 415\n    1 416\n    1 417\n    1 418\n    1 419\n    1 420\n    1 421\n    1 422\n    1 423\n    1 424\n    1 425\n    1 426\n    1 427\n    1 428\n    1 429\n    1 430\n    1 431\n    1 432\n    1 433\n    1 434\n    1 435\n    1 436\n    1 437\n    1 438\n    1 439\n    1 440\n    1 441\n    1 442\n    1 443\n    1 444\n    1 445\n    1 446\n    1 447\n    1 448\n    1 449\n    1 450\n    1 451\n    1 452\n    1 453\n    1 454\n    1 455\n    1 456\n    1 457\n    1 458\n    1 459\n    1 460\n    1 461\n    1 462\n    1 463\n    1 464\n    1 465\n    1 466\n    1 467\n    1 468\n    1 469\n    1 470\n    1 471\n    1 472\n    1 473\n    1 474\n    1 475\n    1 476\n    1 477\n    1 478\n    1 479\n    1 480\n    1 481\n    1 482\n    1 483\n    1 484\n    1 485\n    1 486\n    1 487\n    1 488\n    1 489\n    1 490\n    1 491\n    1 492\n    1 493\n    1 494\n    1 495\n    1 496\n    1 497\n    1 498\n    1 499\n    1 500\n    1 501\n    1 502\n    1 503\n    1 504\n    1 505\n    1 506\n    1 507\n    1 508\n    1 509\n    1 510\n    1 511\n    1 512\n    1 513\n    1 514\n    1 515\n    1 516\n    1 517\n    1 518\n    1 519\n    1 520\n    1 521\n    1 522\n    1 523\n    1 524\n    1 525\n    1 526\n    "
    },
    {
        "number": 3305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5 2\nabcd\n3\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n10 1\nbe\n1 5\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2\nabc\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n5\nall\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\na\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 4\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 3\n1 23\n2 17\nSample Output 2:\n23\n\"\"\") == \"23\"\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '23'\nassert solution('1 23') == '23'\nassert solution('2 17') == '17'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 1\\n2 2\\n1 1') == '2'\nassert solution('2 3\\n1 23\\n2 17') == '23'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n3 1\\n2 2\\n1 1\\n') == '2'\nassert solution('5 5\\n1 1\\n1 2\\n3 2\\n2 4\\n4 5\\n3 4\\n2 2\\n1 1\\n') == '4'\nassert solution('8 10\\n2 2\\n4 2\\n6 4\\n4 6\\n6 6\\n1 3\\n2 3\\n4 5\\n3 7\\n5 7\\n2 8\\n4 8\\n1 9\\n2 9\\n2 9\\n4 8\\n3 9\\n1 7\\n2 7\\n3 8\\n3 8\\n3 8\\n3 9\\n4 9\\n4 9\\n4 9\\n') == '27'"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n3 1\n2 2\n1 1\n''') == '2'\nassert solution('''\n1 1\n1 1\n''') == '1'\nassert solution('''\n2 3\n1 23\n2 17\n''') == '23'\nassert solution('''\n7 3\n1 2\n2 4\n3 4\n5 6\n6 8\n7 5\n''') == '10'\nassert solution('''\n5 6\n3 1\n4 1\n2 2\n1 1\n''') == '7'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '2'\nassert solution('2 3') == '23'\n"
    },
    {
        "number": 3306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n3 1\n2 2\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == '0.0000000000'\nassert solution(\"4\") == '0.0000000000'\nassert solution(\"6\") == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n\"\"\") == \"0.0000000000\"\n\nassert solution(\"\"\"\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n\"\"\") == \"9.476048311178\"\n\nassert solution(\"\"\"\n5\n3 4\n1 2\n1 5\n3 4\n\"\"\") == \"6.00099765574\"\n\nassert solution(\"\"\"\n1\n0 0\n1 1\n\"\"\") == \"0.0000000000\"\n\nassert solution(\"\"\"\n3\n0 1\n0 4\n1 2\n\"\"\") == \"5.0000000000\""
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3''') == '0.0000000000'\n\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0''') == '9.476048311178'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n0 0\n2 0\n2 2\n''') == '0.0000000000'\nassert solution('''6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n''') == '9.4760483111786'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n') == '9.476048311178'\nassert solution('10\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n') == '11.0'\nassert solution('9\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n') == '12.0'\nassert solution('16\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0\\n') == '11.0'"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '0.0000000000'\nassert solution('1') == '0.0000000000'\nassert solution('100000') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '0.0000000000'\nassert solution('4') == '0.0000000000'\nassert solution('10') == '0.0000000000'\nassert solution('1000') == '0.0000000000'\nassert solution('10000') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n2 0\\n2 2\\n0 2\\n0 -1 0 3') == '0.0000000000'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n2 0\\n2 2') == '0.0000000000'\nassert solution('6\\n0 1\\n0 4\\n3 6\\n7 5\\n4 2\\n7 0\\n5 7 2 0') == '9.476048311178094'\n"
    },
    {
        "number": 3307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\n\"\"\") == \"0.0000000000\"\n\nassert solution(\"\"\"\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\n\"\"\") == \"9.476048311178\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '0.5'\nassert solution('6') == '0.5'\nassert solution('4') == '0.0'\n\n----Hints----\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5 0.2 0.00') == '0.0200000000'\nassert solution('5 1.2 1.00') == '0.0000000002'\nassert solution('5 -1.2 -1.00') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n\") == \"8.0000000000\"\nassert solution(\"5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n\") == \"0.0200000000\"\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 1\\n1 0\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('3\\n-1 -1\\n1 1\\n-1 -1\\n') == '0.0000000000'\nassert solution('1\\n1\\n0\\n') == '1.0000000000'\nassert solution('4\\n-2 -1\\n1 1\\n-2 -1\\n0.0000000000') == '8.0000000000'\nassert solution('4\\n-2 -1\\n1 1\\n-2 -1\\n0.0000000000\\n') == '4.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20\\n') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3.0000000000'\nassert solution('1') == '1.0000000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n2 0\n1 1\n0 2\n-2 0\n0 -2\"\"\") == \"8.0000000000\"\nassert solution(\"\"\"5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\"\"\") == \"0.0200000000\"\nassert solution(\"\"\"5\n-1.5 0\n-0.5 0\n1.0 0\n0 -1.5\n0 -0.5\"\"\") == \"1.38709677419\"\n\nstdin = open('input.txt', 'r')\nstdout = open('output.txt', 'w')\nn = int(stdin.readline().strip())\nvertices = []\nfor i in range(n):\n    line = stdin.readline().strip()\n    x, y = map(float, line.split())\n    vertices.append((x, y))\n\nvertices = sorted(vertices, key=lambda x: x[1])\nans = 0.0\nfor i in range(n):\n    ans += (vertices[i][1] - vertices[i - 1][1]) * (vertices[i][0] - vertices[i - 1][0])\n\nstdout.write(f'{round(ans, 4)}\\n')\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0.0 0\\n-0.2 0\\n0 0.20') == '8.0000000000'\nassert solution('5\\n0.2 0.00\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20') == '0.0200000000'\nassert solution('5\\n0.20 0\\n0 -0.20\\n0.0 0\\n-0.20 0\\n0 0.20') == '0.0200000000'\nassert solution('5\\n0.20 0\\n0 -0.20\\n0.0 0\\n-0.20 0\\n0 0.20') == '0.0200000000'\nassert solution('5\\n0.20 0\\n0 -0.20\\n0.0 0\\n-0.20 0\\n0 0.20') == '0.0200000000'\n"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '8.0000000000'\nassert solution('5') == '0.0200000000'"
    },
    {
        "number": 3308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 0\\n1 1\\n0 2\\n-2 0\\n0 -2\\n0.0 0\\n-0.2 0\\n0 0.20') == '8.0000000000'\nassert solution('5\\n0.2 0\\n0 -0.2\\n0.0 0\\n-0.2 0\\n0 0.20') == '0.0200000000'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('3 5 2') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 3') == '2'\nassert solution('1000000 3 10000000 5') == '2'"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5 2') == '2'\nassert solution('6 7 1') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"10 4 3\"\n) == \"2\"\nassert solution(\n    \"9 4 3\"\n) == \"1\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\nassert solution('''\n10 3 3\n1 1 1 1 1 2 2 2 2 2\n''') == '3'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1 1 2 2 2 2 2') == '2'\nassert solution('10 2 2') == '2'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n9 4 3\n1 1 9 9 1 6 6 39 9\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 2 2\n1 1 1 1 1 2 2 2 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 3') == '2'\nassert solution('10 2 2') == '2'\nassert solution('2 6 3') == '1'\n"
    },
    {
        "number": 3309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''9 4 3\n1 1 9 9 1 6 6 39 9\n''') == '2'\nassert solution('''10 2 2\n1 1 1 1 1 2 2 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n3 4 7\n1 2 3 1\n''') == '7.500000000000001'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2\") == \"0.5\"\nassert solution(\"4 10 10 10\") == \"20.000000000\"\nassert solution(\"4 20 20 20\") == \"20.000000000\"\nassert solution(\"4 30 30 30\") == \"28.33333333333\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 2\") == \"3.666666667\"\nassert solution(\"4 11 4\") == \"20.000000000\"\n\"\"\"\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3 2') == '3.666666667'\nassert solution('4 11 4') == '20.000000000'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''4 11 4\n10 10 10 10\n''') == '20.000000000'\nprint('All tests passed!')"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000', 'First'\nassert solution('''\n5 5 5\n3 1 1 1 1\n''') == '8.000000000', 'Second'\nassert solution('''\n10 5 5\n6 2 3 2 2 2 1 2\n''') == '10.000000000', 'Third'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nassert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nassert solution('''\n6 5 2\n1 2 3 4 5\n''') == '6.600000000000001'\nassert solution('''\n4 1 2\n1 2 3\n''') == '4.3333333333333333'\nassert solution('''\n4 2 3\n1 2 3\n''') == '4.75'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 2\n1 2 3\n''') == '3.666666667'\nassert solution('''\n4 11 4\n10 10 10 10\n''') == '20.000000000'\nassert solution('''\n5 5 2\n1 2 3 4 5\n''') == '5.4'\nassert solution('''\n6 6 2\n2 3 2 1 1\n''') == '7.5'\nassert solution('''\n8 6 2\n1 2 3 4 5 6 7\n''') == '7.5'\n"
    },
    {
        "number": 3310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 2') == '3.666666667'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 42''') == '2'\nassert solution('''5 123456789''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 42\n5 123456789''') == '16317634'''"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 42\n''') == '2'\nassert solution('''\n5 123456789\n''') == '16317634'\nassert solution('''\n5 3\n''') == '2'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n\n'''\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'\nprint(solution(input()))\n"
    },
    {
        "number": 3311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 42') == '2'\nassert solution('5 123456789') == '16317634'"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '0'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 1 0 0 2\n1 2 2\n1 1 1\n''') == '0'\nassert solution('''\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\n''') == '4'\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1 1 0 0 2\") == \"0\"\nassert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"0 1 1 1 8\") == \"2\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 0 0 2') == '0'\nassert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\nassert solution('3 2 2') == '1'\nassert solution('5 5 5') == '5'"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 0 0 2\") == \"0\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"3 1 1 1 8\") == \"4\"\nassert solution(\"3 1 1 1 8\") == \"4\"\n"
    },
    {
        "number": 3312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 0 0 2') == '0'\nassert solution('3 1 1 1 8') == '4'\nassert solution
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 100 100\") == \"3\""
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\nassert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '4'\n'''\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n''') == '3'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n''') == '3'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n\n''') == '1'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n\n''') == '0'\nassert solution('''\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\n\n''') == '1'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 100 100\n8 8\n5 1\n4 6\n4 7\n7 9\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n4\n4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 10 10\") == \"3\"\nassert solution(\"5 1 10 10\") == \"3\"\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 10 10') == '3'\nassert solution('5 1 100 100') == '3'\n"
    },
    {
        "number": 3313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 2\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 3\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABBBAAAA\") == 3\nassert solution(\"BBBCCCBB\") == 4\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"2\"\nassert solution(input_2) == \"3\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABC') == 2\nassert solution('ABBBAAAA') == 3\nassert solution('BBBCCCBB') == 5\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == 2\nassert solution(\"ABCD\") == -1\nassert solution(\"BBBBAABC\") == 1\nassert solution(\"ABBBAAABB\") == 3\nassert solution(\"AAABBBBCDD\") == -1\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"ABC\") == \"2\"\nassert solution(\"ABCAB\") == \"4\"\nassert solution(\"ABCABC\") == \"1\"\nassert solution(\"ABCABCABCABCABC\") == \"2\"\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '3'\nassert solution('CCCCAAAC') == '4'\nassert solution('CCCAAAA') == '1'\n"
    },
    {
        "number": 3314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('ABC') == '2'\nassert solution('ABBBAAAA') == '3'\nassert solution('BBBCCCBB') == '3'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('ABC'), '2')\n        self.assertEqual(solution('ABBBAAAA'), '3')\n        self."
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nAA\\nBBB\\nABABA\\nAAAAAB\\n') == '3'\nassert solution('0\\n') == '0'\nassert solution('\\n') == '0'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"A\") == \"1\"\nassert solution(\"AB\") == \"2\"\nassert solution(\"AA\") == \"2\"\nassert solution(\"AAB\") == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\nA\nABA\nBBB\nAAA\n''') == \"3\"\nassert solution('''4\nA\nAA\nAAB\nAAA\n''') == \"4\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\nA\nB\nAA\nBBB\nAAA\n''') == \"3\"\nassert solution('''\n3\nAA\nAA\nAAA\nAAA\n''') == \"3\"\nassert solution('''\n3\nAA\nAA\nA\nAAA\n''') == \"4\"\nassert solution('''\n3\nAA\nAA\nAAA\n''') == \"2\"\nassert solution('''\n3\nAA\nAA\nAA\nAAA\n''') == \"2\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == \"3\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\nA\\nB\\nAA\\nBBB\\nAAA\") == \"3\"\nassert solution(\"5\\nA\\nABA\\nBBB\\nABABA\\nAAAAAB\") == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(t1) == \"3\"\nassert solution(t2) == \"2\"\nassert solution(t3) == \"0\"\nassert solution(t4) == \"3\"\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\nA\nB\nAA''') == '3'\nassert solution('''5\nA\nB\nAA\nBBB\nAAA''') == '3'\n"
    },
    {
        "number": 3315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\nA\\nB\\nAA\\nBBB\\nAAA\\n') == '3'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 10 2 1\n''') == '0.1'\nassert solution('''\n10 10 2 2\n
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 1\") == \"0.1\"\nassert solution(\"100 10 2 1\") == \"0.1\"\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('100 10 2 1') == '0.1', solution('100 10 2 1')\nassert solution('100 10 2 2') == '0.1909090909', solution('100 10 2 2')\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1 1') == '0.16666666666666666'\nassert solution('1000000 1000000 1000000 1000000') == '0.1111111111111111'\nassert solution('2 2 2 2') == '0.3125'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '0.4000000000000004'\nassert solution('1 2 3 4') == '0.4000000000000004'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\") == \"0.1\"\nassert solution(\"10 3 3\") == \"0.1428571429\"\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 10 2 1') == '0.1'\nassert solution('100 10 2 2') == '0.1909090909'\n"
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100 10 2 1') == '0.1'\nassert solution
    },
    {
        "number": 3316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 2 3') == '0.2'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(ABABABcABABAbAbab) == 4\nassert solution(ABABABcABABAbAbab) == 5\nassert solution(ABABABcABABAbAbab) == 4\nassert solution(ABABABcABABAbAbab) == 4\nassert solution(ABABABcABABAbAbab) == 5\n\nA = \"qwertasdfg\"\nlen(A)\nlen(A)\nA = A[::-1]\nA\nA\nA\nB = A\nB\nlen(A)\nlen(B)\nA[-1]\nA[-1]\nB[-1]\nB[-1]\nA\nB\n\nB = A\nA\nA\nA = A[::-1]\nA\nA\nA\nA\nB\nA\nA\nA\nB\nB\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution('AAAAAABAABBAABBAAABAAABAAABAAABAA') == '4'\nassert solution('AAAAAABAABBAABBAAABAAABAAABAAABAAABAAABAAABAABAABAABAABAABBAABBAAABAAABAAABAAABAAABAAABAAABAAABAA') == '12'\nassert solution('AAAAAABAABBAABBAAABAAABAAABAAABAA') == '0'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('ABABABcABABAbAbab') == '5'\nassert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBAADcBA"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('ABABABcABABAbAbab') == \"4\""
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"0\"\nassert solution(\"ABCcADCbBDABABCBABAbABAB\") == \"5\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('ABABABcABABAbAbab') == '4'\nassert solution('ABABABcABABAbAbab') == '0'\nassert solution('ABABABcABABAbAbab') == '5'\nassert solution('ABABABcABABAbAbab') == '1'\nassert solution('ABABABcABABAbAbab') == '5'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\nassert solution(\"ABABABcABABAbAbab\") == \"0\"\nassert solution(\"ABABABcABABAbAbab\") == \"1\"\nassert solution(\"ABABABcABABAbAbab\") == \"0\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(ABABABcABABAbAbab) == '4'\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"ABABABcABABAbAbab\") == \"4\"\n"
    },
    {
        "number": 3317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    'ABABABcABABAbAbab') == '4'\n'''"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '2'\nassert solution('3 2') == '1'\nassert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 3') == '1'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0\n0\n1\nSample Output:\n2\n''') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"8 2\") == \"3\"\nassert solution(\"12 2\") == \"4\"\nassert solution(\"16 2\") == \"5\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4') == '2'\nassert solution('4 4') == '2'\nassert solution('0 0') == '1'\nassert solution('1 0') == '1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4') == '2'\nassert solution('5 4') == '4'\nassert solution('5 2') == '3'"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 3\\n0') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n1 0\\n0 1\\n') == '2'\nassert solution('4 3\\n0\\n1\\n0\\n') == '3'\nassert solution('4 3\\n0\\n1\\n0\\n') == '3'"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3\\n0\\n0\\n1\\n\") == \"2\"\nassert solution(\n    \"4 3\\n0\\n0\\n1\\n2\") == \"3\"\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '2'\nassert solution('5 6') == '3'\nassert solution('10 10') == '1'\nassert solution('8 8') == '1'\nassert solution('5 5') == '2'\n"
    },
    {
        "number": 3318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n3\n2\n0\n''') == '2'\nassert solution('''\n1\n1\n0\n''') == '1'\nassert solution('''\n3\n3\n3\n2\n''') == '3'\nassert solution('''\n5\n1\n0\n0\n1\n0\n''') == '4'\nassert solution('''\n5\n4\n4\n3\n2\n1\n0\n''') == '5'\n'''"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 8 8 8\\n12 4 1 4 5 3 -2') == '1\\nP0: 22 1 4 2 6 -1 0'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n2 2 1 2 1\n1 1 2 1 2\n''') == '1'\n'''"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\nassert solution('1 1 2 1 1') == '2'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\n\"\"\"\nThe plan is to try to implement a simple collision model.\n\nWe will assume that every value is an integer.\n\nWe will assume that the planetoids don't overlap.\n\nWe will try to model collisions on the same dimension\n\nWe will create a grid of cubes in a 2D grid\n\nOnce we have the grid, we will iterate over the grid to compute the collision\n\nWe will iterate over the grid again to update the grid\n\nWe will repeat until all planets have collided\n\n\"\"\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n''') == '1'\nassert solution('''\n3 3 3 3\n13 0 1 13 2 0 1 1 13 2 1 1 1 13\n13 0 1 13 2 0 1 1 13 2 1 1 1 13 2 1 1 1 13\n''') == '13'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '0'\nassert solution('2 1 1 1 1') == '1'\nassert solution('3 2 1 2') == '2'\nassert solution('3 3 3 3') == '4'\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 8 8 8') == '1'\nassert solution('10 1 2 1 8 -6 1') == '2'\nprint('Tests passed')\n\"\"\""
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\\n0 1 2 1 8 -1 0\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 7\") == \"1\"\nassert solution(\"5 7\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"6 8\") == \"2\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '1'\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\nprint('all done!')\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '2'\nassert solution('''\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\n''') == '3'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"2\"\nassert solution(\"5 5\") == \"4\"\nassert solution(\"10 10\") == \"4\"\nassert solution(\"5 5\") == \"4\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1'\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"4 7\\n1 2 1\\n1 2 3\\n1 3 2\\n1 4 1\\n2 3 4\\n2 4 4\\n3 4 4\\n3\\n1 2\\n1 3\\n3 4\"\n) == \"2\\n3\\n3\\n3\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 7\") == \"1\\n2\\n3\\n\"\nassert solution(\"3 1\") == \"1\\n\"\n"
    },
    {
        "number": 3320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 7') == '1'\nassert solution('3 6') == '2'\nassert solution('1 1') == '0'\nassert solution('4 7') == '1'\nassert solution('2 7') == '1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 5 4 3 2 6\n1 2 5 4 3 6''') == '2'\nassert solution('''6\n1 5 4 3 2 6\n1 2 5 4 3 6''') == '3'\nassert solution('''3\n1 2 5 4 3 6\n1 2 5 4 3 6''') == '2'\nassert solution('''8\n1 2 5 4 3 6 7 8\n1 2 5 4 3 6 7 8''') == '1'\nassert solution('''10\n1 2 5 4 3 6 7 8 9 10\n1 2 5 4 3 6 7 8 9 10''') == '1'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 5 4 3 2 6\\n1 2 5 4 3 6\") == \"2\"\nassert solution(\"3\\n1 2 3\\n2 3 1\") == \"1\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\") == \"9\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5 4 3 2 6\") == \"1 2 5 4 3 6\"\nassert solution(\"1 2 5 4 3 6\") == \"1 5 4 3 2 6\"\nassert solution(\"1 2 5 4 3 6\") == \"1 5 4 3 2 6\"\nassert solution(\"1 2 5 4 3 6\") == \"1 5 4 3 2 6\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3 4\n5 1 2 3 4\n2 3 1 4\n5 4 2 3 1\n''') == '3'\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\n\"\"\") == \"2\""
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"6\\n\"\n    \"1 2 5 4 3 6\\n\"\n    \"1 2 5 4 3 6\"\n) == \"2\""
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"6\\n\"\n    \"1 5 4 3 2 6\\n\"\n    \"1 2 5 4 3 6\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6\\n1 5 4 3 2 6\\n1 2 5 4 3 6') == '2'\n\n\"\"\""
    },
    {
        "number": 3321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '60', 'First'\nassert solution('''\n4 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n''') == '-1', 'Second'\nassert solution('''\n4 3 2\n1 30 2 50\n2 50 3 10\n3 20 1 80\n''') == '-1', 'Third'\nassert solution('''\n4 3 2\n1 30 2 50\n2 50 3 10\n3 20 1 80\n''') == '60', 'Fourth'\nassert solution('''\n4 3 2\n1 30 2 50\n2 50 3 10\n3 20 1 80\n''') == '60', 'Fifth'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '60'\nassert solution('4 3 2') == '-1'\n\n'''"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 3, 2]) == \"60\"\nassert solution([5, 7, 5, 1, 6, 5, 2, 1, 1]) == \"65\"\nassert solution([10, 20, 1]) == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n1 30 2 50\\n2 70 3 10\") == \"60\"\nassert solution(\"1 2 3\\n2 2 5\\n3 1 1\\n4 0 0\") == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3 2\") == \"60\"\nassert solution(\"1 30 2 50 2 70 3 10\") == \"60\"\nassert solution(\"3 3 2\") == \"-1\"\nassert solution(\"1 30 2 50 2 70 3 10\") == \"60\"\nassert solution(\"3 3 2\") == \"-1\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == '60'\nassert solution('3 3 2') == '-1'\nassert solution('2 3 2') == '60'\nassert solution('3 3 2') == '-1'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 2') == '-1'\nassert solution('1 3 2 1 3 2') == '60'\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == \"60\"\nassert solution(\"3 2 5 1\") == \"70\"\nassert solution(\"5 5 6 2\") == \"120\"\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"60\"\n\nassert solution(\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n10 5 5\n3 4 5\n4 4 3\n1 3 1\n1 4 4\n2 4 1\n1 2 1\n3 2 1\n1 3 1\n2 1 1\n1 2 1\n\"\"\") == \"0\"\n\nprint(\"AoC 2020 Day 15 - Part 1\")\n"
    },
    {
        "number": 3322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\n\"\"\"\n) == \"60\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Case #1: 1\\nCase #2: 2\\n\"\nassert solution(\"3\") == \"Case #1: 1\\nCase #2: 2\\nCase #3: 3\\n\""
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\n'\n\nassert solution('''\n2\n1\n1\n0\n1\n''') == 'Case #1: 1\\nCase #2: 1\\n'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"Case #1: 1\\nCase #2: 2\\nCase #3: 1\"\nassert solution(\"5\") == \"Case #1: 1\\nCase #2: 2\\nCase #3: 1\\nCase #4: 1\\nCase #5: 2\"\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n\"\"\") == \"Case #1: 1\\nCase #2: 2\\n\"\"\")\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000''') == 'Case #1: 1\\nCase #2: 2'"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Case #1: 1\\nCase #2: 2'"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2'"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 0'\n"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3\\n10000 0 0\\n0 10000 0\\n0 0 10000') == 'Case #1: 1\\nCase #2: 2\\n'\nassert solution('2\\n5\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n10000 0 0\\n0 10000 0') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 2\\nCase #4: 2\\nCase #5: 3\\n'\nassert solution('2\\n4\\n10000 0 0\\n0 10000 0\\n0 0 10000\\n10000 0 0\\n0 10000 0') == 'Case #1: 1\\nCase #2: 2\\nCase #3: 2\\nCase #4: 2\\n'"
    },
    {
        "number": 3323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\n''') == 'Case #1: 1\\nCase #2: 2'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\\\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\n''') == '6 6 6 1'\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\"\nassert solution(\"+1 2 C 1 O 2\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\") == \"1 1 1 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"3 3 3 3 3 3 3 3 3 1\"\nassert solution(\"0 0\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\", solution(\"+1 2 H 2 O 1\")\nassert solution(\"+1 2 C 1 O 2\") == \"6 6 6 1\", solution(\"+1 2 C 1 O 2\")\nassert solution(\"-1 1 O 2\") == \"1 1 1 2\", solution(\"-1 1 O 2\")\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"1 1 1 2\", solution(\"-1 3 C 6 H 12 O 6\")\nassert solution(\"0 0\") == \"0 0\", solution(\"0 0\")"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('+1 2 H 2 O 1') == '6 6 6 1'\nassert solution('+1 2 C 1 O 2') == '6 6 6 1'\nassert solution('-1 1 O 2') == '1 1 1 1 1'\nassert solution('-1 3 C 6 H 12 O 6') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+1 2 H 2 O 1\") == \"6 6 6 1\"\nassert solution(\"+1 2 C 1 O 2\") == \"6 6 6 1\"\nassert solution(\"-1 1 O 2\") == \"5 5 5 1\"\nassert solution(\"-1 3 C 6 H 12 O 6\") == \"8 8 8 1\"\nassert solution(\"0 0\") == \"0 0\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 6 H_2 O_2\\n+1 2 C O_2\\n-1 1 O_2\\n-1 3 C_6 H_12 O_6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 3 H_2 O_2\\n+1 2 C O_2\\n-1 1 O_2\\n-1 3 C_6 H_12 O_6\\n0 0\\n\") == \"6 6 6 1\"\nassert solution(\"+1 4 H_2 O_2\\n+1 2 C O_2\\n-1 1 O_2\\n-1 3 C_6 H_12 O_6\\n0 0\\n\") == \"6 6 6 1\"\n"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\\n\", \"First\"\nassert solution(\"-1 1 O 2\\n+1 2 C 1 O 2\\n+1 2 C 1 O 2\\n+1 2 C 1 O 2\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\\n\", \"Second\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\\n\", \"Third\"\n\"\"\""
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+1 2 H 2 O 1\\n'\n                    '+1 2 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '-1 3 C 6 H 12 O 6\\n'\n                    '0 0\\n') == '6 6 6 1'\nassert solution('-1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 6 H 12 O 6\\n'\n                    '+1 1 O 2\\n'\n                    '+1 3 C 1 O 2\\n'\n                    '+1 1 O 2\\n'\n                    '+"
    },
    {
        "number": 3324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"6 6 6 1\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"1 1 1 2\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"2 2 2 2\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"4 4 4 4\"\nassert solution(\"+1 2 H 2 O 1\\n+1 2 C 1 O 2\\n-1 1 O 2\\n-1 3 C 6 H 12 O 6\\n0 0\") == \"5 5 5 5\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0.83\"\nassert solution(\"2\") == \"2.83\"\nassert solution(\"3\") == \"3.83\"\nassert solution(\"4\") == \"2.83\""
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('2\\n0 0\\n0 0\\n100 100') == '100.0'\nassert solution('3\\n0 0\\n0 0\\n10 10') == '0.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n\") == \"20.83\"\nassert solution(\"2\\n100 100\\n\") == \"100.0\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n30 50\n20 0\n100 0\n100 40\n20 40''') == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == \"20.83\"\nassert solution('1\\n10 1\\n10 10\\n') == \"10.0\"\nassert solution('1\\n100 1\\n100 100\\n') == \"100.0\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n1 2\\n2 2\\n3 3\\n\") == \"2.5\"\nassert solution(\"2\\n4 4\\n0 0\\n4 4\\n0 4\\n0 0\\n0 0\") == \"6.000\"\nassert solution(\"4\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"4.000\"\nassert solution(\"5\\n4 0\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"3.000\""
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n50 50\\n100 100\\n100 50\") == \"20.83\"\nassert solution(\"3\\n50 100\\n20 50\\n100 100\") == \"21.8\"\nassert solution(\"2\\n30 50\\n20 0\\n100 0\\n100 40\") == \"20.83\"\nassert solution(\"3\\n30 100\\n20 0\\n100 100\") == \"20.83\"\nassert solution(\"2\\n50 100\\n20 0\\n100 100\") == \"20.83\"\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('4\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('2\\n30 50\\n20 0\\n') == '30.0'\nassert solution('2\\n30 50\\n20 0\\n') == '30.0'\nassert solution('2\\n30 50\\n20 0\\n') == '30.0'\n"
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10 10\\n20 20\\n30 30\") == \"40.0\""
    },
    {
        "number": 3325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n30 50\\n20 0\\n100 0\\n100 40\\n20 40\\n') == '20.83'\nassert solution('2\\n1 1\\n3 1\\n') == '5.00'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n2\n5\n\"\"\") == \"49\"\nassert solution(\"\"\"\n2\n3\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n2\n5\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join([\n    '4',\n    '1 2',\n    '3 4'\n])) == '49'\nassert solution('\\n'.join([\n    '8',\n    '1 2 3',\n    '7 8 5',\n    '4 5 6',\n    '9 8 3',\n    '7 8 1',\n    '5 7 3',\n    '4 5 2',\n    '4 5 1',\n    '5 5 1',\n    '3 2 1',\n    '3 2 1',\n    '2 3 1'\n])) == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"49\"\n\nassert solution(\"\"\"\n2\n2\n1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n3\n5\n4\n3\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n4\n5\n4\n3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n5\n4\n3\n2\n1\n\"\"\") == \"3\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 5\\n7 6 4\\n9 8 3') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n\nassert solution(\"\"\"\n5 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n\nassert solution(\"\"\"\n3 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n\nassert solution(\"\"\"\n4 5\n1 2 3 4 5\n6 7 8 9\n2 3 4 6 7 8\n9 10 11 12 13\n\"\"\") == \"49\"\n\nassert solution(\"\"\"\n5 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"46\""
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 2 3\n1 2 3\n''') == '49'\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 3\n1 2 5\n7 6 4\n9 8 3\n\"\"\") == \"49\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 2 5\n7 6 4\n9 8 3\n''') == '49', \"Wrong\"\nassert solution('''\n3 2\n1 2\n3 4\n''') == '0', \"Wrong\"\n"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '49'"
    },
    {
        "number": 3326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 5\\n7 6 4\\n9 8 3\") == \"49\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 15\") == \"CROSSWORD\"\nassert solution(\"2 3\") == \"CROSSWORD\"\nassert solution(\"3 2\") == \"CROSSWORD\"\nassert solution(\"5 5\") == \"CROSSWORD\"\nassert solution(\"6 3\") == \"CROSSWORD\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 15\\nCROSSWORD') == '##CROSSWORD####'\n\nassert solution('1 5\\n.####..#.\\n.###.###.###.##\\n.##.##.##.##\\n#####.##.###\\n##.#.#.#.#.###\\n##.##.###.###.##\\n####.##.##.##\\n#####.##.####\\n##.#.#.#.####\\n##.##.####.###\\n##.##.###.####\\n##.###.#####.##\\n####.###.#####\\n##.##.####.##\\n####.#####.##\\n###.##.##.##\\n####.##.####\\n#######.##.##\\n###.##.##.##\\n####.##.####') == '##CROSSWORD####'\n\n\"\"\"\n\nR, C = map(int, input().split())\ngrid = []\nfor _ in range(R):\n    grid.append(input().split())\nN = int(input())\nfor _ in range(N):\n    r, c = input().split()\n    r, c = int(r)-1, int(c)-1\n    r = (r//3)*3\n    c = (c//3)*3\n    ans = \"\"\n    for i in range(r, r+3):\n        ans += grid[i][c:c+3]\n    for i in range(c, c+3):\n        ans += grid[r][i:i+3]\n    for i in range(r, r+3):\n        for j in range(c, c+3):\n            if grid[i][j]!= '#':\n                grid[i][j] = ans[i-r][j-c]\nfor i in range(R):\n    print(''.join(grid[i]))\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\nassert solution(input_5) == output_5\n\nINPUT:\n1 15\n##CROSSWORD##\n1\nTURNING\n1\nCROSSWORD\nINPUT:\n1 15\n##CROSSWORD##\n1\nTURNING\n1\nCROSSWORD\nOUTPUT:\n##CROSSWORD####\n\"\"\"\n\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"##CROSSWORD####\""
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 15\") == '##CROSSWORD####'\nassert solution(\"1 5\") == '##CROSSWORd####'\nassert solution(\"1\") == '##CROSSWORD####'\nassert solution(\"1 10\") == '##CROSSWORD####'\nassert solution(\"1 2\") == '##CROSSWORD####'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 1\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5') == '# # # # #'\nassert solution('1') == '# #'\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 15\") == \"##CROSSWORD####\"\nassert solution(\"1 1\") == \"##CROSSWORD####\"\nassert solution(\"10 10\") == \"##CROSSWORD####\"\nassert solution(\"4 1\") == \"##CROSSWORD####\"\nassert solution(\"5 1\") == \"##CROSSWORD####\"\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1 2\n1 2\n\"\"\") == \"\"\"\n1 2\n1 2\n\"\"\", \"One of the words is missing\"\nassert solution(\"\"\"\n1 1\n1 1\n\"\"\") == \"\"\"\n1 1\n1 1\n\"\"\", \"Each word must be at least one character long\"\nassert solution(\"\"\"\n1 5\n"
    },
    {
        "number": 3327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\n1 15\n##.........####\n1\nCROSSWORD\n''') == '''\\\n##CROSSWORD####'''\nassert solution('''\\\n1 15\n##.........####\n1\nCROSSWORD\n''') == '''\\\n##CROSSWORD####'''\nassert solution('''\\\n3 4\n###1#######\n2\nCROSSWORD\n''') == '''\\\n###1#######\n2\nCROSSWORD\n'''\nassert solution('''\\\n3 4\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1\n2 7\n3 1''') == '31'\nassert solution('''3 3\n2 7\n5 1''') == '1'\nassert solution('''2 7\n3 1\n1 3\n5 1''') == '6'\nassert solution('''6 7\n5 1\n1 3\n3 1\n2 7\n8 1\n5 1''') == '25'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '11', \"3 2\"\nassert solution('5 3 1') == '7', \"5 3 1\"\nassert solution('4 2') == '0', \"4 2\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4\\n7 6\\n8 5 1') == '13'\nassert solution('1 2 3\\n6 7 8\\n9 5 1') == '11'\nassert solution('2 2 2\\n3 4 4\\n5 6 6') == '10'\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"31\"\nassert solution(\"3 2\") == \"10\"\nassert solution(\"3 3\") == \"11\"\nassert solution(\"3 4\") == \"7\"\nassert solution(\"3 5\") == \"8\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 6') == \"32\"\nassert solution('3 5 8') == \"50\"\nassert solution('4 8 5') == \"2\"\nassert solution('5 5 9') == \"6\"\nassert solution('2 4 5') == \"2\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nassert solution('''\n5 4\n1 2 4 3 5\n7 8 9 10 11\n13 14 15 16 17\n19 20 21 22 23\n25 26 27 28 29\n''') == '110'\n'''"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"31\"\nassert solution([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]) == \"44\"\nassert solution([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]) == \"88\"\nassert solution([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [19, 20, 21, 22], [23, 24, 25, 26], [27, 28, 29, 30]]) == \"46\"\nassert solution([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [19, 20, 21, 22], [23, 24, 25, 26], [27, 28, 29, 30], [31, 32, 33, 34]]) == \"71\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n2 7 6\n9 5 1\n4 3 8\n''') == '31'\nassert solution('''\n3 5\n3 2 8 9 4 5\n1 2 3 4 5\n5 2 1 4 3\n8 3 1 2 4\n4 3 2 1 5\n''') == '41'\nassert solution('''\n1 1\n1 1\n1 1\n''') == '1'\n'''\n\nfrom collections import defaultdict\nn, k = list(map(int, input().split()))\ntable = defaultdict(set)\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    table[(x, y)].update([i])\n    table[(y, x)].update([i])\n\nk_copy = k\nmax_row = 0\nmax_col = 0\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                max_row = max(max_row, len(table[(i, j)]))\n        if j < i:\n            if (j, i) in table:\n                max_col = max(max_col, len(table[(j, i)]))\n\nk = min(k, max_row + max_col)\nres = k\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(k):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(k):\n    for j in range(k):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            if (i, j) in table:\n                table[(i, j)].update(table[(i, j) - k])\n        if j < i:\n            if (j, i) in table:\n                table[(j, i)].update(table[(j, i) - k])\n\nfor i in range(n):\n    for j in range(n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 4 7\") == \"4\"\n"
    },
    {
        "number": 3328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1\\n2 7 6\\n9 5 1\\n4 3 8\\n') == '31'\nassert solution('100 200\\n100 200\\n100 200\\n100 200\\n') == '0'\n\"\"\"\n\nn, k, *lst = map(int, input().split())\n\nfor x, y in zip(*[iter(lst)] * 2):\n    if x >= y:\n        print(k + 1)\n        break\nelse:\n    print(sum(map(abs, lst)))\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '2'\nassert solution('10 10') == '22'\nassert solution('1 1') == '1'\nassert solution('10 1') == '1'\nassert solution('2 2') == '2'\n\"\"\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1, 'BBW']) == '2'\nassert solution([3, 1, 'BBWWBW']) == '1'\nassert solution([3, 1, 'WWWWWWW']) == '0'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 1\nBBW\n''') == '2'\nassert solution('''\n4 1\nBBW\n''') == '1'\nassert solution('''\n6 1\nBBWBBBB\n''') == '2'\n\n'''\nThis is the solution of this kata. Please read the description for the method \"solution\" above.\n'''\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\nBBW\") == \"2\"\n\nassert solution(\"5 1\\nBBWWBW\") == \"3\"\n\nassert solution(\"6 1\\nBBWWWWW\") == \"4\"\n\nassert solution(\"4 1\\nBBWWWWWW\") == \"2\"\n\nassert solution(\"5 2\\nWWWWWBBBB\") == \"1\""
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 1\nBBW\n''') == '2'\n\nassert solution('''\n4 1\nBBBWW\n''') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\nBBBWBWB\n''') == '4'\nassert solution('''5 5\nBWBWBWB\n''') == '1'\nassert solution('''5 5\nBWBWBWB\n''') == '0'\nassert solution('''10 10\nBWBWBWBBBWBWBBBBBWB\n''') == '1'\nassert solution('''7 7\nBWBWBWBBBWBWBWB\nBBBBBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBBBBB\nBBBBBBBBBBBBBBBBBBBB\n''') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 1], 'BBW') == '2'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\nB\n''') == '1'\nassert solution('''3\nBW\n''') == '2'\nassert solution('''2\nBW\n''') == '3'\nassert solution('''10\nBWWBBW\n''') == '2'\nassert solution('''1\nBW\n''') == '1'\n"
    },
    {
        "number": 3329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '0.556'\nassert solution('1 3') == '0.556'\nassert solution('3 4') == '0.556'\nassert solution('4 8') == '0.455'\nassert solution('1 5') == '0.455'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"0.556\"\nprint(solution())\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1\n2''') == \"0.5\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '3 1\\n'\n    '3 2 1\\n'\n    '1 2 3'\n) == '0.556'\n\"\"\""
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1') == '0.556'\nassert solution('3 1') == '0.556'\nassert solution('1 2') == '0.5'\nassert solution('1 3') == '0.4'\nassert solution('2 1') == '0.5'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n2 1 1\\n1 2 3\\n') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n1\\n3\\n') == '0.556'\nassert solution('2\\n1\\n1\\n2\\n') == '0.828'\nassert solution('3\\n3\\n1\\n2\\n') == '0.416'"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 1\n3 2 1\n1 2 3\"\"\") == \"0.556\"\nassert solution(\"\"\"3 1\n3 2 1\n1 2 3\"\"\") == \"0.553\"\nassert solution(\"\"\"3 1\n3 2 1\n1 3 2\"\"\") == \"0.552\"\nassert solution(\"\"\"3 1\n3 2 1\n1 2 3\"\"\") == \"0.555\"\nassert solution(\"\"\"3 1\n3 2 1\n1 3 2\"\"\") == \"0.555\"\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '0.556'\nassert solution('3 2 1') == '0.556'\nassert solution('1 2 3') == '0.556'\n"
    },
    {
        "number": 3330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\n1 2 3\") == \"0.556\"\nassert solution(\"3 1\\n3 2 1\") == \"0.556\"\nassert solution(\"5 1\\n3 2 1\\n1 2 3\\n1 2 3 4\") == \"0.555\"\nassert solution(\"1 5\\n3 2 1\\n1 2 3\\n1 2 3 4\") == \"0.554\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 4 3 2\n''') == '3'\nassert solution('''\n3 1 3 1\n''') == '3'\nassert solution('''\n8 9 3 3\n''') == '12'\nassert solution('''\n100 20 1 2\n''') == '49'\nassert solution('''\n1 100 1 100\n''') == '100'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 4 3 2\n1 1 1 1\n2 2 2 2\n3 3 3 3\n4 4 4 4\n5 5 5 5\n''') == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"5 4 3 2\"\n) == \"3\""
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 3 2') == '3'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('50 50 50 50') == '60'\nassert solution('100 100 100 100') == '99999'\nassert solution('1000 1000 1000 1000') == '9999999'\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4 3 2\") == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('1 2 3 4 5') == '0'\n\"\"\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('7 4 3 2') == '6'\nassert solution('2 9 2 3') == '8'\nassert solution('1 10 2 2') == '10'\nassert solution('10 5 2 3') == '6'"
    },
    {
        "number": 3331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 3 2') == '3'\nassert solution('1 10 10 10') == '99'\nassert solution('1 2 3 4 5') == '44'\nassert solution('2 5 5 6 7') == '2'\nassert solution('1 5 7 2') == '0'\n\"\"\""
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n2\n1 2\n2 3\n''') == '4'\nassert solution('''\n3\n1 2 3\n2 3 4\n3 4 5\n''') == '12'\nassert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '11'\nassert solution('''\n2\n1 2\n2 3\n''') == '5'\n"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '13'\nassert solution('1') == '13'\nassert solution('3') == '6'\nassert solution('5') == '10'\nassert solution('1') == '0'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3 6\") == \"13\"\nassert solution(\"2 5 8\") == \"17\"\nassert solution(\"3 3 5\") == \"17\"\nassert solution(\"5 3 6\") == \"16\""
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 6') == '13'\nassert solution('2 5 8') == '17'\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 6') == '13'\nassert solution('2 5 8') == '33'\nassert solution('3 3 5') == '35'\nassert solution('5 3 6') == '33'\nprint('ALL TEST CASES PASSED')\n\"\"\""
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nprint(solution('''3\n2\n1 3\n2 5\n'''))\n\"\"\"\n\nfrom collections import deque\n\nn = int(input())\nstreams = deque()\nmax_priority = 0\nfor i in range(n):\n    s, d, p = map(int, input().split())\n    streams.append([s, d, p])\n    max_priority = max(max_priority, p)\n\ncnt = 1\nresult = 0\nwhile streams:\n    if streams[0][2] == max_priority:\n        result += cnt\n        streams.popleft()\n        cnt += 1\n    else:\n        streams.rotate(-1)\n\nprint(result)"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 6\\n2 5 8\\n3 3 5\\n5 3 6') == '13'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '13'\nassert solution('''\n8\n5 4 3 6\n4 5 4 8\n5 4 3 6\n6 6 5 8\n4 5 4 8\n5 4 3 6\n6 6 5 8\n6 6 5 8\n''') == '30'\nassert solution('''\n1\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\n''') == '3'\nassert solution('''\n8\n5 4 3 6\n4 5 4 8\n5 4 3 6\n6 6 5 8\n4 5 4 8\n5 4 3 6\n6 6 5 8\n6 6 5 8\n''') == '30'"
    },
    {
        "number": 3332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"13\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n10\n10\n1\n1\n1\n2\n1\n1\n1''') == '3.141593', 'First'\n\nassert solution('''1\n10\n10\n1\n1\n1\n2\n1\n1\n1''') == '4.141593', 'Second'\n\nassert solution('''1\n1\n1\n1\n1\n1\n2\n1\n1\n1''') == '0.0', 'Third'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10.000000 20.123456\\n1\\n13.141593 20.123456') == '3.141593'\nassert solution('1000000000\\n1000000000') == '1000000000'\n\n'''\n\nstdin = input()\nN = int(stdin)"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5.000000 2.123456') == '2.12345'\nassert solution('5.000000 3.141593') == '4.141593'\nassert solution('5.000000 2.123593') == '2.123593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10.000000 20.123456') == '3.141593'\nassert solution('10.000000 20.123456') == '3.141593'\nassert solution('10.000000 20.123456') == '3.141593'\nassert solution('10.000000 20.123456') == '3.141593'\nassert solution('10.000000 20.123456') == '3.141593'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10.000000 20.123456\\n1\") == \"3.141593\"\nassert solution(\"10.000000 20.123456\\n10\") == \"10.000000\"\nassert solution(\"10.000000 20.123456\\n20\") == \"10.000000\"\nassert solution(\"10.000000 20.123456\\n1\") == \"3.141593\"\nassert solution(\"10.000000 20.123456\\n13.141593 20.123456\") == \"3.141593\"\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10.000000 20.123456\n1\n13.141593 20.123456\n''') == '3.141593'\nassert solution('''\n10.000000 20.123456\n1\n15.002389 20.1234\n''') == '3.002389'\nassert solution('''\n10.000000 20.123456\n1\n16.002389 20.123456\n''') == '3.002389'\nassert solution('''\n10.000000 20.123456\n1\n17.002389 20.123456\n''') == '3.002389'\nassert solution('''\n10.000000 20.123456\n1\n13.141593 20.123456\n''') == '3.141593'\n''')"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1,1,1,1,1\\n3,3,3,3,3\\n') == '3.141593'\nassert solution('5\\n10.00,20.10\\n13.30,20.11\\n20.30,30.00\\n25.00,20.10\\n30.00,20.00\\n') == '5.0'"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"1 1\") == \"1.791759\"\n\"\"\""
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10.000000 20.123456') == '3.141593'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10.000000 20.123456') == '3.141593'\nassert solution('10.000000 1.2') == '5.2'\nassert solution('10.000000 1.2') == '5.2'\n\"\"\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 4\n2\nSample Input 2:\n3\n9 2\n3\nSample Output 2:\nimpossible\n''') == '2.13333333333333'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'impossible'\nassert solution('3') == '2.13333333333333'\nassert solution('4') == '2.13333333333333'\nassert solution('5') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n3 2\n5\n1\n2\n4\n2\n4\n\"\"\") == \"2.13333333333333\"\nassert solution(\"\"\"\n10\n3 3 3 3 3 3 2 3 2 2 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n2 3 3 2 3 2 3 3\n4\n\"\"\") == \"impossible\""
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4 4\n2\nSample Input 2:\n8\n3 2\n1\n3 2\n3\nSample Output 2:\n2.13333333333333\n''') == 'impossible'\n\nassert solution('''\n10\n3 2\n1\n3 2\n3\nSample Output 3:\n1.300000000000004\n''') == '1.300000000000004'\n\nassert solution('''\n10\n3 2\n1\n3 2\n3\nSample Output 4:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\n\nassert solution('4') == '2.13333333333333'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n1\n1\n2\n1\n2\n1\n1\n2\n1\n2\n1\n2\n1\n1\n2\n1\n2\n1\n1\n2\n1\n1\n2\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == 'impossible'\nassert solution('10') == '2.5'\nassert solution('20') == '3.0'\nassert solution('30') == '3.0'\nassert solution('40') == '3.5'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4 4\") == \"2.13333333333333\"\nassert solution(\"3\\n4 2\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2.13333333333333'\nassert solution('12') == 'impossible'\n"
    },
    {
        "number": 3334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 4\n2\n''') == '2.13333333333333'\n\nassert solution('''\n10\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('9') == '12'\nassert solution('100000000000000000') == '107934786786565589145637351715689357681715351282814791109079555063443728139996728781367894537341877201451814350368897296286718337880331428274490245077681437606962128941636325038809037652240416459503479012957366717135305925575140179103713657468285724655030943289601990514191476262417874238906890125260107455559171955871048652110856600979782815999816351706703979657803876245864648380235733594598146971249746795600854612141317942389907456207372268649917395242259174775687241453637241010711089640261645981436346967499602702505499614336757027262591328478934718212982895396417239552895346736467853267126793129395776433806694467498056736128870363747997283373080753224169512842766127038249905412934989131636141640255522873268979383711944128423295870984627452186940172451911147700725298600057609745486846814798297929966374492833508060274601759393614117558508020577092972508671927741677556337319350931928360594916358214897911877282594874158520249728853162548653913138290541284318777937193310590833685921695509218229578712114727057964618608565275025152457332636981159046655803465643891179593414674825589153450702114565082325461474144887174493546133035914054337271130463756385379823334739603059887549453560692216119466242899693915890715759183475572996976602954144876722140882243065644056387311175504840691854278418977714794481035992347203580915107312385749440338289732079697664686722166658443324591094614896845908069689983638689895007323616299960701137779182672865489218842433531440085329676024134533551527512532828467957898839963680517684064441541759661193311658460442938508264826999860291765807038129549332026463533258469189610331674299670691175745085566352516376588246773680525705379060365026168073445303420676025167937447880390982485755568452408533527541694788394526747590408311885214559345671363287750549986258535158550880390313739220669437802384261039275036562877897166890361408815949272567711929372497265175886688007874416789951669386032714393860659418861048865087814897244297510991593171077803664333064695317143439855543094332619323088389181060696558132418366529936258082814430384834414571252\n'''\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '0'\nassert solution('5') == '10'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7') == '18'\nassert solution('99999') == '212281597'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '1', \"Wrong\"\nassert solution('5') == '30', \"Wrong\"\nassert solution('1000') == '3125', \"Wrong\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('6') == '16'\nassert solution('1') == '0'\nassert solution('2147483647') == '134217727'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1', \"Wrong!\"\nassert solution('2') == '3', \"Wrong!\"\nassert solution('3') == '8', \"Wrong!\"\nassert solution('4') == '15', \"Wrong!\"\nassert solution('5') == '31', \"Wrong!\"\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '0\\n'\nassert solution('5\\n') == '0\\n'\nassert solution('15\\n') == '0\\n'\nassert solution('150\\n') == '0\\n'\nassert solution('500\\n') == '0\\n'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '0'\nassert solution('10') == '4'\nassert solution('20') == '6'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n') == '17'\nassert solution('40\\n') == '32'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n35 M\\n0 M\\n43 M\\n30 F') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n10 F baroque skiing\\n5 M baroque chess\\n0 M baroque soccer\") == \"3\"\n\nassert solution(\"2\\n43 M classicism programming\\n10 F baroque skiing\\n0 M baroque chess\\n20 M baroque soccer\") == \"2\"\n\nassert solution(\"1\\n22 F baroque programming\\n0 M baroque skiing\\n0 M baroque chess\\n0 M baroque soccer\") == \"3\"\n\nassert solution(\"1\\n12 M classicism programming\\n0 M baroque skiing\\n0 M baroque chess\\n0 M baroque soccer\") == \"1\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\") == \"3\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer''') == '3'\nassert solution('''4\n35 F classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 M baroque soccer''') == '4'\nassert solution('''4\n50 M classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 M baroque soccer''') == '5'\nassert solution('''4\n40 F classicism programming\n0 F baroque skiing\n43 M baroque chess\n30 M baroque soccer''') == '3'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n\") == \"3\"\nassert solution(\"2\\n40 M classicism programming\\n0 F baroque skiing\\n30 F baroque chess\\n0 M baroque soccer\\n\") == \"2\"\nassert solution(\"3\\n35 M classicism programming\\n0 F baroque skiing\\n43 M baroque chess\\n30 F baroque soccer\\n\") == \"4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '3'\nassert solution('1\\n35 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '1'\nassert solution('3\\n1 M classicism programming\\n0 M baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '0'\nassert solution('10\\n33 M classicism programming\\n0 F baroque skiing\\n43 M baroque chess\\n30 F baroque soccer') == '0'\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n35 M\\n0 M\\n43 M\\n30 F\\n') == '2'"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n35 M\\n0 M\\n43 M\\n30 F\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4\n35 F classicism programming\n0 F baroque skiing\n43 F baroque chess\n30 M baroque soccer\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n10\n16 F classicism programming\n0 F baroque skiing\n43 F baroque chess\n31 F baroque basketball\n30 F baroque soccer\n25 F baroque volleyball\n16 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 M baroque soccer\n25 M baroque volleyball\n\"\"\") == \"7\""
    },
    {
        "number": 3336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''0 M baroque skiing\n0 F baroque chess\n0 M baroque soccer\n30 F baroque programming\n43 M classicism programming\n35 M classicism programming''') == '3'\n\nassert solution('''4\n0 F baroque chess\n0 M baroque chess\n0 F baroque programming\n0 F baroque programming\n0 F baroque soccer\n0 F baroque soccer\n0 M baroque programming\n0 M baroque programming''') == '5'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n0\\n1\\n3\\n0\\n') == '2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2\\n1\\n2\\n2\\n2\\n'\n\nassert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\na 5\n''') == '2\\n1\\n2\\n1\\n2\\n2\\n'\n\nassert solution('''\na 0\na 1\na 2\nc 2 3\nb 4\nb 5\nc 6\n''') == '3\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n'\n\nassert solution('''\na 0\na 1\na 2\nc 2 3\nb 4\nb 5\nc 6\na 7\n''') == '3\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n'\n\nassert solution('''\na 0\na 1\na 2\nc 2 3\nb 4\nb 5\nc 6\na 7\na 8\n''') == '4\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\na 2\nb 1\na 3\nc 2\nb 3\n''') == '''\n1\n1\n2\n'''\n\nassert solution('''\n3\na 2\na 3\nb 1\nc 2\nb 4\n''') == '''\n1\n2\n2\n'''\n\nassert solution('''\n4\na 2\na 3\na 1\nc 2\nb 1\nb 3\n''') == '''\n1\n2\n2\n'''\n\nassert solution('''\n5\na 1\na 2\na 3\na 4\nc 1\nc 3\n''') == '''\n1\n1\n2\n2\n3\n'''\n\nassert solution('''\n5\na 1\na 2\na 3\na 4\nc 1\nc 3\n''') == '''\n1\n1\n1\n1\n1\n'''\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2 1'\n\nassert solution('''\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '3 1 2'\n\nassert solution('''\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1 3'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2 1'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('2 b 2 3') == '2'\nassert solution('2 c 2 3') == '2'"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\na 0\\na 1\\nb 2\\nc 2 3\\nb 4\\n') == '2\\n1\\n2\\n'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n0\\na 1') == '1'\nassert solution('3\\n0\\nb 1 2') == '2'\nassert solution('4\\n0\\nc 2 3\\nb 4') == '2'\n"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read()"
    },
    {
        "number": 3337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\na 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2\\n1\\n2\\n'\n\nassert solution('''\nb 0\na 1\nb 2\nc 2 3\nb 4\n''') == '1\\n1\\n1\\n2\\n'\n\nassert solution('''\nc 0\na 1\nb 2\nc 2 3\nb 4\n''') == '2\\n3\\n3\\n'\n'''\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '5'\nassert solution('7 5') == '3'\nassert solution('6 2') == '2'\nassert solution('1') == '0'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n3') == '0'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n6\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\n10\\n10\\n8\\n5\\n10\\n5\\n7\\"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"6 1\") == \"5\"\nassert solution(\"78 61 88 71\") == \"8\"\nassert solution(\"80 80 90 90\") == \"9\"\nassert solution(\"70 90 80 100\") == \"11\"\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0') == '5'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n7 1\\n78 61 88 71\\n80 80 90 90\\n70 90 80 100\\n90 70 0 0\\n80 67 0 0\\n90 63 0 0\\n') == '5'\nassert solution('6 2\\n1 1 1\\n2 2 2\\n1 1 1\\n1 1 1\\n2 2 2\\n') == '2'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1') == '4'\nassert solution('6 1') == '5'\nassert solution('9 1') == '8'\n"
    },
    {
        "number": 3338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\n''') == \"5\"\n\n\"\"\"\n\nimport sys\nimport functools\n\nsys.setrecursionlimit(10**6)\n\n@functools.lru_cache()\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2\n1 3\n1 4\n2 3\n2 4''') == '5'\n\nprint('solution is ok')\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '4'\nassert solution('100000\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '0'\nassert solution('4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n') == '2'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '4', 'First'\n\nassert solution('''10 2\n1 2\n1 3\n1 4\n2 3\n2 4\n3 5\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100''') == '404', 'Second'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '1'\n\nassert solution('''\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '2'"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"4\"\nassert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n1 4\n2 3\n2 4\n''') == '6'\n'''\n'''"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 2\n1 3\n1 4\n2 3\n2 4\n\"\"\") == \"4\"\nassert solution(\"\"\"3\n1 2\n1 3\n1 4\"\"\") == \"0\"\nassert solution(\"\"\"5\n1 2\n1 3\n1 4\n2 3\n2 4\"\"\") == \"1\"\nassert solution(\"\"\"100\n1 2\n1 3\n1 4\n2 3\n2 4\n4 6\n5 7\n6 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\"\"\") == \"903071\"\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '1 2'\n) == '4'\nassert solution(\n    '1 3'\n) == '4'\nassert solution(\n    '1 4'\n) == '4'\nassert solution(\n    '2 3'\n) == '0'\nassert solution(\n    '2 4'\n) == '0'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n1 4\n2 3\n2 4\nSample Output:\n6\n''') == '6'\n"
    },
    {
        "number": 3339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"100 500\") == \"0\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n') == '2\\n3\\n4\\n'\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"2 1 3 4\"\nassert solution(\"10\") == \"2 4 3 1\"\nassert solution(\"50\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"200\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"3000\") == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"4\n1 2\n2 3\n3 4\n    \"\"\"\n) == \"2 4\"\n\nassert solution(\n    \"\"\"5\n1 2\n2 3\n3 4\n4 5\n    \"\"\"\n) == \"3 4\"\n\nassert solution(\n    \"\"\"9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n    \"\"\"\n) == \"5 6 7 8 9 10\""
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2 3 4'"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2 4\"\nassert solution(\"4\") == \"2 4\""
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"4\n1 2\n2 3\n3 4\n\"\"\") == \"2 4\"\n\nassert solution(\"\"\"5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"2 5\"\n\nassert solution(\"\"\"10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"3 6 9\"\n\nassert solution(\"\"\"10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"3 6 9\"\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\"\n) == \"2 3\"\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n3 4\n\"\"\"\n) == \"3 4\"\nassert solution(\n\"\"\"\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 222\n122 333\n123 444\n124 555\n125 666\n126 777\n127 888\n128 999\n129 1000\n130 1001\n131 1002\n132 1003\n133 1004\n134 1005\n135 1006\n136 1007\n137 1008\n138 1009\n139 1010\n140 1011\n141 1012\n142 1013\n143 1014\n144 1015\n145 1016\n146 1017\n147 1018\n148 1019\n149 1020\n150 1021\n151 1022\n152 1023\n153 1024\n154 1025\n155 1026\n156 1027\n157 1028\n158 1029\n159 1030\n160 1031\n161 1032\n162 1033\n163 1034\n164 1035\n165 1036\n166 1037\n167 1038\n168 1039\n169 1040\n170 1041\n171 1042\n172 1043\n173 1044\n174 1045\n175 1046\n176 1047\n177 1048\n178 1049\n179 1050\n180 1051\n181 1052\n182 1053\n183 1054\n184 1055\n185 1056\n186 1057\n187 1058\n188 1059\n189 1060\n190 1061\n191 1062\n192 1063\n193 1064\n194 1065\n195 1066\n196 1067\n197 1068\n198 1069\n199 1070\n200 1071\n201 1072\n202 1073\n203 1074\n204 1075\n205 1076\n206 1077\n207 1078\n208 1079\n209 1080\n210 1081\n211 1082\n212 1083\n213 1084\n214 1085\n215 1086\n216 1087\n217 1088\n218 1089\n219 1090\n220 1091\n221 1092\n222 1093\n223 1094\n224 1095\n225 1096\n226 1097\n227 1098\n228 1099\n229 1100\n230 1101\n231 1102\n232 1103\n233 1104\n234 1105\n235 1106\n236 1107\n237 1108\n238 1109\n239 1110\n240 1111\n241 1112\n242 1113\n243 1114\n244 1115\n245 1116\n246 1117\n247 1118\n248 1119\n249 1120\n250 1121\n251 1122\n252 1123\n253 1124\n254 1125\n255 1126\n256 1127\n257 1128\n258 1129\n259 1130\n260 1131\n261 1132\n262 1133\n263 1134\n264 1135\n265 1136\n266 1137\n267 1138\n268 1139\n269 1140\n270 1141\n271 1142\n272 1143\n273 1144\n274 1145\n275 1146\n276 1147\n277 1148\n278 1149\n279 1150\n280 1151\n281 1152\n282 1153\n283 1154\n284 1155\n285 1156\n286 1157\n287 1158\n288 1159\n289 1160\n290 1161\n291 1162\n292 1163\n293 1164\n294 1165\n295 1166\n296 1167\n297 1168\n298 1169\n299 1170\n300 1171\n301 1172\n302 1173\n303 1174\n304 1175\n305 1176\n306 1177\n307 1178\n308 1179\n309 1180\n310 1181\n311 1182\n312 1183\n313 1184\n314 1185\n315 1186\n316 1187\n317 1188\n318 1189\n319 1190\n320 1191\n321 1192\n322 1193\n323 1194\n324 1195\n325 1196\n326 1197\n327 1198\n328 1199\n329 1200\n330 1201\n331 1202\n332 1203\n333 1204\n334 1205\n335 1206\n336 1207\n337 1208\n338 1209\n339 1210\n340 1211\n341 1212\n342 1213\n343 1214\n344 1215\n345 1216\n346 1217\n347 1218\n348 1219\n349 1220\n350 1221\n351 1222\n352 1223\n353 1224\n354 1225\n355 1226\n356 1227\n357 1228\n358 1229\n359 1230\n360 1231\n361 1232\n362 1233\n363 1234\n364 1235\n365 1236\n366 1237\n367 1238\n368 1239\n369 1240\n370 1241\n371 1242\n372 1243\n373 1244\n374 1245\n375 1246\n376 1247\n377 1248\n378 1249\n379 1250\n380 1251\n381 1252\n382 1253\n383 1254\n384 1255\n385 1256\n386 1257\n387 1258\n388 1259\n389 1260\n390 1261\n391 1262\n392 1263\n393 1264\n394 1265\n395 1266\n396 1267\n397 1268\n398 1269\n399 1270\n400 1271\n401 1272\n402 1273\n403 1274\n404 12"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '2 4\\n3 4\\n3 4'"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '1 2\\n3 4\\n2 4'\nprint('You passed: ', solution('Input.txt'))\n"
    },
    {
        "number": 3340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n2 3\\n3 4\\n\") == \"2 4\\n3 4\\n2 4\"\nassert solution(\"4\\n2 3\\n3 4\\n\") == \"2 4\\n3 4\\n1 4\""
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"3 5\") == \"7\"\nassert solution(\"7 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '4'\nassert solution('2 1') == '0'\nassert solution('3 5') == '7'\nassert solution('7 2') == '0'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '3'\nassert solution('2 1') == '2'\nassert solution('3 5') == '5'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\n\nassert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\n\nassert solution('''\n1 1\n1 1\n1 1\n1 1\n''') == '1'\n\nassert solution('''\n1 5\n5 2\n''') == '0'\n\nassert solution('''\n1 5\n5 1\n''') == '0'"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nassert solution('''\n1 10\n5 7\n3 2\n1 5\n9 3\n5 9\n''') == '0'\n'''\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"5\"\nassert solution(\"1 3\") == \"4\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 5\") == \"7\"\nassert solution(\"7 2\") == \"0\"\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2') == '2'\nassert solution('1 2') == '2'\nassert solution('1 3') == '0'\nassert solution('2 2') == '3'\nassert solution('2 1') == '1'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 1') == '1'\nassert solution('3 5') == '5'\nassert solution('7 2') == '2'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '5'\nprint('Solution:', solution('''\n3 2\n1 3\n2 1\n3 5\n7 2\n'''))\nassert solution('''\n2 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\nprint('Solution:', solution('''\n3 2\n1 3\n2 1\n3 5\n7 2\n'''))\nassert solution('''\n3 2\n1 3\n2 1\n3 5\n7 2\n''') == '0'\n"
    },
    {
        "number": 3341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '5'\nassert solution('1 3') == '4'\nassert solution('2 1') == '0'\nassert solution('3 5') == '6'\nassert solution('7 2') == '0'"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"5 5 10\n1 1\n4 3\n5 2\n1 4\n1 5\n1 2\n2 2\n3 3\n4 4\n5 5\n\"\"\") == \"5\"\nassert solution(\"\"\"5 5 1\n0 0\n0 0\n1 1\n2 3\n0 0\n0 3\n2 3\n1 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"10 10 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\"\"\") == \"2\"\nassert solution(\"\"\"5 3 3\n2 2\n1 3\n0 0\n3 0\n3 1\n3 2\"\"\") == \"1\"\nassert solution(\"\"\"10 5 3\n1 1\n4 4\n0 0\n1 1\n0 0\n1 2\n1 3\n0 0\n0 0\n3 0\n1 4\n0 0\n1 5\n3 4\"\"\") == \"1\""
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\nassert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '1'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n'''\n4 5 2\n0 0\n0 2\n1 3\n0 1\n2 2\n'''\n) == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('5 5 3') == '3'\nassert solution('3 3 3') == '3'\nassert solution('5 4 3') == '3'\nassert solution('2 2 2') == '2'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n0\n0\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\nassert solution('''6 4 4\n3 4\n0 1\n0 2\n4 5\n0 0\n0 3\n3 2\n3 1\nSample Output:\n3''') == '1'\n"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\nassert solution('''\n2 3 3\n3 0\n3 1\n''') == '3'\n'''"
    },
    {
        "number": 3342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"GHOST\"\nassert solution(\"2 1\") == \"SAFE\"\nassert solution(\"2 2\") == \"SAFE\"\nassert solution(\"3 1\") == \"SAFE\"\nassert solution(\"3 2\") == \"SAFE\"\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 C\n2 C\n3 C''') == 'GHOST'\nassert solution('''4\n3 C\n2 C\n1 C\nSample Output:\nSAFE''') == 'SAFE'\nassert solution('''5\n3 C\n1 D\n2 C\n3 E\n3 C\nSample Output:\nSAFE''') == 'GHOST'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1\\nC\\n') == 'GHOST'\nassert solution('2 2\\nC\\nC\\n') == 'SAFE'\nassert solution('3 4\\nC\\nCC\\n') == 'GHOST'\nassert solution('4 5\\nCCCC\\nCCCC\\nCCCC\\nCCCC\\n') == 'SAFE'\nassert solution('8 5\\nCCCC\\nCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'GHOST'"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 3\n3 C\n2 C\n1 C\n''') == 'GHOST'\nassert solution('''4 1\n0 C\n1 C\n2 C\n''') == 'SAFE'\nassert solution('''4 5\n0 C\n2 C\n3 C\n4 C\n''') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == 'GHOST'\nassert solution('2 3') == 'SAFE'\n\"\"\""
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n1\\n') == 'GHOST'\nassert solution('2\\n1\\n1\\n1\\n') == 'SAFE'\nassert solution('3\\n1\\n1\\n1\\n') == 'GHOST'\nassert solution('4\\n1\\n1\\n1\\n') == 'SAFE'\nassert solution('5\\n1\\n1\\n1\\n1\\n') == 'SAFE'\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nCC\") == \"GHOST\"\nassert solution(\"4 2\\nCC\\nCC\") == \"SAFE\"\nassert solution(\"4 2\\nCC\\nCC\\nCC\") == \"SAFE\"\nassert solution(\"4 2\\nCC\\nCC\\nCC\\nCC\") == \"SAFE\"\nassert solution(\"4 3\\nCC\\nCC\\nCC\") == \"SAFE\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1\nC\nC\nC\n''') == \"GHOST\"\n"
    },
    {
        "number": 3343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'GHOST'\nassert solution('5\\n7 C\\n1 C\\n5 C\\n3 C\\n2 C') == 'SAFE'\nassert solution('5\\n7 C\\n1 C\\n5 C\\n3 C\\n2 C') == 'SAFE'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    3 2\n    1 1 1\n    ''') == '1'\n\nassert solution(\n    '''\n    2 2\n    1 1\n    ''') == '1'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2 3\n0.00 2.00\n\"\"\") == \"2\"\nassert solution(\"\"\"2 3\n0.00 2.00\n\"\"\") == \"no fika\"\nassert solution(\"\"\"10 10\n5.30 6.90\n\"\"\") == \"5.30\"\nassert solution(\"\"\"100 100\n6.90 6.90\n\"\"\") == \"5.30\"\n\"\"\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '2'\n\"\"\"\n\nimport math\nimport itertools\nimport functools"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 2\n0.00 2.00\n0.00 5.00\n0.00 7.00\nSample Input:\n1 7\n0.00 0.00\nSample Output:\n0.00\n\"\"\"\n) == \"0.00\""
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2'\nassert solution('2 2') == 'no fika'\nassert solution('2.00 3') == 'no fika'\nassert solution('2.00 2.00') == '2'\nassert solution('1.0 2.0') == 'no fika'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n0.00 2.00\\n\") == \"2\"\nassert solution(\"2 3\\n0.00 2.00\\n\") == \"no fika\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n0.00 2.00\") == \"2\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n0.01 0.00\\n1 0.00\\n0.01 0.00\\n0.01 0.00\") == \"1\"\nassert solution(\"10\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\\n9.9 9.9\") == \"10\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2 3\n0.00 2.00\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3\\n0.00 2.00') == '2'\n"
    },
    {
        "number": 3344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n2 3\n0.00 2.00\n'''\n) == '2', 'First'\n\nassert solution(\n'''\n2 5\n0.00 0.00 0.00 0.00 0.00\n'''\n) == '5', 'Second'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\\n') == '10'\n\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2') == '10'\nassert solution('3\\n0 0\\n10 0\\n2') == '12'\nassert solution('4\\n0 0\\n10 0\\n2') == '12'\nassert solution('5\\n0 0\\n10 0\\n2') == '12'\nassert solution('6\\n0 0\\n10 0\\n2') == '12'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2\n0 0\n10 0\n2\n30 0\n15 0\n\"\"\") == \"10\"\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0 0\\n10 0\\n2\\n30 0\\n15 0') == '10'\n\nassert solution('3\\n0 0\\n10 0\\n20 0\\n30 0\\n50 0\\n60 0\\n70 0\\n80 0\\n90 0\\n100 0\\n') == '90'\n\nassert solution('1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '0'\n\nassert solution('8\\n0 0\\n1 1\\n0 0\\n1 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n') == '0'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '10'\nassert solution('20') == '13'\nassert solution('7') == '8'\nassert solution('3') == '1.404818603515625'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"0\") == \"10\"\nassert solution(\"-10\") == \"10\"\nassert solution(\"-10 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('\\n'.join([\n    '3',\n    '0 0',\n    '10 0',\n    '2',\n    '30 0',\n    '15 0',\n])) == '10'\n\nassert solution('\\n'.join([\n    '3',\n    '0 0',\n    '10 0',\n    '2',\n    '30 0',\n    '15 0',\n    '20 0',\n    '25 0',\n    '12 0',\n])) == '18'"
    },
    {
        "number": 3345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n0 0\\n10 0\\n2\\n30 0\\n15 0\\n') == '10'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2 2\nW 1 0\nE 3 0\"\"\") == \"0\"\nassert solution(\"\"\"2 1\nW 1 0\nE 0 0\"\"\") == \"1\"\nassert solution(\"\"\"2 1\nW 2 0\nE 2 1\"\"\") == \"0\"\nassert solution(\"\"\"2 2\nW 1 2\nE 1 4\"\"\") == \"1\"\nassert solution(\"\"\"8 2\nW 1 2\nW 1 3\nE 8 1\nE 6 4\nE 8 8\nE 8 9\nE 3 3\"\"\") == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3\\nW 10 0\\nW 10 3\\nE 17 4\\n') == '1'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 5') == '0'\nassert solution('8 3') == '0'\nassert solution('12 5') == '1'\nassert solution('20 5') == '1'\nassert solution('50 5') == '2'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 3\nW 10 0\nE 17 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n8 3\nW 10 0\nW 10 3\nE 17 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10 2\nW 10 0\nW 10 3\nW 10 3\nW 10 3\nE 17 4\nE 17 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n15 2\nW 10 0\nW 10 3\nE 17 4\nE 17 4\nW 10 0\nE 17 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 2\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\nassert solution('''\n6 1\nE 3 0\nW 3 1\nW 8 1\nE 5 0\nE 7 2\nE 8 2\n''') == '1'\nassert solution('''\n10 5\nW 1 0\nW 9 1\nW 11 0\nE 2 5\nE 2 9\nE 9 7\nE 9 9\n''') == '3'"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 3\nW 10 0\nW 10 3\nE 17 4\n''') == '0'\n\nassert solution('''\n12 3\nW 10 0\nW 10 3\nE 10 0\n''') == '1'\n\nassert solution('''\n6 3\nW 10 0\nW 10 3\nW 10 0\nE 15 4\nE 15 4\n''') == '2'\n\nassert solution('''\n10 2\nW 0 0\nW 0 0\n''') == '2'\n\nassert solution('''\n10 1\nW 10 0\n''') == '1'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 7\nW 10 0\nW 10 3\nE 17 4\nW 17 1\nE 17 5\nE 17 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 5\nE 17 1\nE 17 2\nE 17 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\nE 17 1\nW 17 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 10\nW 10 0\nW 10 3\nE 17 4\nE 17 5\nE 17 6\nE 17 7\nW 17 1\nE 17 2\nE 17 3\nE 17 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 7\nW 10 0\nW 10 3\nE 17 4\nW 17 1\nE 17 5\nE 17 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '1'\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3\\n\"\n    \"W 10 0\\n\"\n    \"W 10 3\\n\"\n    \"E 17 4\"\n) == \"0\"\n"
    },
    {
        "number": 3346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 7\nW 10 0\nW 10 3\nE 17 4\nE 13 3\nW 12 2\n''') == \"0\"\nassert solution('''3\nW 10 0\nW 10 3\nE 17 4\n''') == \"1\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('5 8') == '2'\nassert solution('5 6') == '2'\nassert solution('3 4') == '1'\nassert solution('5 13') == '1'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n5 8\n5 6\n3 4\n5 13\n6 10\"\"\") == \"3\"\nassert solution(\"\"\"1\n1 1\"\"\") == \"1\"\n\nSample Input:\n3\n4 3\n2 5\n3 6\nSample Output:\n1\n\"\"\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"4\"\nassert solution(\"20\") == \"4\"\nassert solution(\"100\") == \"3\"\nassert solution(\"40000\") == \"3\"\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n5 8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\nassert solution('10\\n50 30\\n40 60\\n25 50\\n45 40\\n30 70\\n50 20\\n40 60\\n35 50\\n50 50\\n25 60\\n30 40\\n35 60\\n30 20\\n40 20\\n30 30\\n') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '3'\nassert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10\\n') == '4'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n5 8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n8\\n5 6\\n3 4\\n5 13\\n6 10') == '3'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n6\\n8\\n10') == '3'\n\nassert solution('5\\n5 6\\n5 6\\n8\\n10') == '3'\n\nassert solution('5\\n6 4\\n5 6\\n8\\n10') == '2'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n8\n5 6\n3 4\n5 13\n6 10\n''') == '3'\nassert solution('''\n2\n3\n10\n5\n''') == '1'\n"
    },
    {
        "number": 3347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n10 7\\n7 8\\n5 6') == '3'\nassert solution('5\\n7 8\\n9 9\\n3 5\\n8 9\\n3 5\\n2 9\\n8 9\\n5 5\\n5 5\\n5 6\\n6 9\\n5 5\\n6 6') == '3'"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([2, 4, 4, 3]) == 'AABCD'\nassert solution([4, 2, 4, 1]) == 'AACAB'\nassert solution([4, 4, 2, 1]) == 'AABBC'\nassert solution([2, 2, 4, 1]) == 'AAABB'\nassert solution([3, 2, 4, 1]) == 'AABBBC'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 3 1\") == \"ABAB\"\nassert solution(\"2 2\\n1 2 2\") == \"AAAB\"\nassert solution(\"5 5\\n8 3 1\") == \"AAABAA\"\nassert solution(\"5 5\\n8 2 1\") == \"AAABAA\"\nassert solution(\"10 10\\n10 3 1\") == \"AAABAABBBBAAB\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == 'ABBABABAB'\nassert solution('5 3') == 'AAABAAAB'\nassert solution('4 8') == 'BAAAAAB'\nassert solution('10 7') == 'BAAABAAB'\nassert solution('20 10') == 'ABAAABBA'\n\nimport sys\nsys.path.append('..')\nfrom utils import *\n\nfrom intcode import IntCode"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 4\n3 3\n1 2\n1 3\n\n''') == 'ABBBBBBC', 'impossible'\nassert solution('''\n3 4\n3 4\n1 2\n1 3\n\n''') == 'AAABBBBBC', 'impossible'\nassert solution('''\n5 5\n2 4 2 4 1\n\n''') == 'BAAABBBBBAB', 'impossible'\nassert solution('''\n5 5\n5 5\n1 2\n1 3\n1 4\n\n''') == 'AAABBBBBAAAB', 'impossible'\nassert solution('''\n5 5\n2 2 2 2 2\n\n''') == 'BBBBBB', 'impossible'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n10 3 3\n''') == 'BACCA'\nassert solution('''\n2 2\n1 2\n''') == 'AAB'\nassert solution('''\n3 3\n1 1 1\n''') == 'AAA'\nassert solution('''\n1 1\n2 1\n''') == 'B'\nassert solution('''\n2 2\n2 1 2\n''') == 'BBA'\n''') == 'impossible'\n\nIn this example, there is no good arrangement of the bonbons. The bonbons will either be placed at the center or the corners, depending on the width of Ylva\u2019s tray.\n\nIf the X (i.e., column) fills the whole space, then no arrangement is feasible. Here is an example:\n\nSample Input:\n2 2\n2 2\n\nSample Output:\nimpossible\n\nThe bonbons can either be placed at the center or the corners of the space, as illustrated in the above example.\n\nFor the last example, we could easily place the bonbons anywhere, since the top and bottom rows have a width of 1 (i.e., they occupy one space). However, if we can only place the bonbons on the left or the right column, then the third and fourth rows should be at least as small as the ones on the left or the right. If we can place the bonbons in the middle, then the third and fourth rows should be at least as small as the ones at the middle.\n\nThe solution function will receive the input from stdin and should return a string that represents the solution to the problem.\n\n-----Hints-----\nFor this problem, the solution has the following properties:\n\nThe bonbons must be placed at the center of the Ylva\u2019s tray.\nThe area of the Ylva\u2019s tray is guaranteed to be even, so no two rows are more than 2 extra rows apart.\nThe number of rows and columns of the Ylva\u2019s tray are guaranteed to be even.\nThe number of rows, columns and bonbons in the Ylva\u2019s tray is always even.\nYour task is to place the bonbons at the desired arrangement.\n\nIn this problem, the number of bonbons is a variable, so don\u2019t worry about printing the whole input.\n'''"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"AAABBBCCC\"\nassert solution(\"5 5\") == \"AAABBBBAAAAA\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3 1\\n1 3 2\\n2 1 3\\n3 2 2\\n4 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 2 2') == 'AB'\nassert solution('2 2\\n2 2') == 'AB'\nassert solution('4 4\\n1 1 1') == 'ABAB'\nassert solution('2 2\\n1 2') == 'ABA'\nassert solution('4 4\\n1 1 1') == 'ABAB'\n"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n1 2 3\\n3 3 4') == 'ABC'\nassert solution('4 4\\n5 3 1\\n3 3 1') == 'BAC'\nassert solution('7 6\\n10 5 1\\n5 10 1') == 'BAAABB'\nassert solution('7 7\\n2 2 1\\n2 2 1') == 'AA'\nassert solution('10 10\\n1 1 1\\n1 1 1') == 'AB'\n\"\"\"\n\nR, C = list(map(int, input().split()))\n\nR, C = list(map(int, input().split()))\n\ndic = dict()\nfor i in range(C):\n    dic[input()] = i\n\nnums = list()\nfor i in range(R):\n    nums.append(list(map(int, input().split())))\n\ndic = dict()\nfor i in range(C):\n    dic[input()] = i\n\nfor r in range(R):\n    for c in range(C):\n        if nums[r][c] in dic.keys() and r + 1 in nums[r] and c + 1 in nums[r]:\n            print('impossible')\n            break\n        else:\n            print(dic[nums[r][c]] * nums[r][c])"
    },
    {
        "number": 3348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10 3 3\") == \"BAC\"\nassert solution(\"4 4\") == \"CAB\"\nassert solution(\"10 5 5\") == \"BACD\"\nassert solution(\"8 2 8\") == \"DBBD\"\nprint(\"solution() tests passed\")"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('11') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('10000000') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nassert solution('SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION') == 'SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\nANGLERS\nEVIDENCE\nHAUNCH\nMAYBE\nSHE\nSHE\n\n''') == 'ANGLERS EVIDENCE HAUNCH MAYBE SHE SHE'\nprint(solution('''\n5\nANGLERS\nEVIDENCE\nHAUNCH\nMAYBE\nSHE\nSHE\n\n''')) == 'ANGLERS EVIDENCE HAUNCH MAYBE SHE SHE'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\NUANCE\\IQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n\nassert solution('''\n2\nSET\nSET\n''') == 'SET SET'\n\nassert solution('''\n2\nSET\nSET\n''') == 'SET SET'\n\nassert solution('''\n2\nSET\nSET\n''') == 'SET SET'\n\nassert solution('''\n10\nI\nT\nH\nO\nW\nE\nI\nT\nR\nS\nC\nL\nP\nB\n''') == 'HIT REPAIRER'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"11\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\nassert solution(\"20\\nBETWEEN\\nSUBTLE\\nSHADING\\nAND\\nTHE\\nABSENCE\\nOF\\nLIGHT\\nLIES\\nNUANCE\\nIQLUSION\\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\") == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == \"BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\"\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == 'BTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN'\nassert solution('10') == 'ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\n"
    },
    {
        "number": 3349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n''') == 'BETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION'\nprint(solution('''\n10\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n'''))\n'''\n10\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\n'''"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''abrahell\n''') == '12'\n\nassert solution('''hello\n''') == '0'\n\nassert solution('''abra\n''') == '4'\n\nassert solution('''alllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '12'\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abrahellehhelleh\") == \"12\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abrahellehhelleh') == '12'\n\"\"\"\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('abracadabra') == '12'\nassert solution('abracadabra') == '8'\nassert solution('abrahellabracadabra') == '12'\nassert solution('abrahellabracadabrazzzzzzz') == '8'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abrahellehhelleh') == '12'\n"
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abrahellehhelleh') == '12'\n\n\"\"\""
    },
    {
        "number": 3350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('abra') == '4'\nassert solution('abrahelleh') == '12'\nassert solution('abrahellehhelleh') == '12'\nassert solution('abraheh') == '6'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '70'\nassert solution('2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1') == '67'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1 1 1 1 1''') == '1'\nassert solution('''4\n1 1 1 1 1''') == '0'\nassert solution('''7\n1 1 1 1 1 1 1''') == '13'\nassert solution('''6\n1 1 1 1 1 1''') == '67'\nassert solution('''1\n5''') == '57'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('65\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '70'\nassert solution('1\\n2 1 1\\n3 2 1\\n3 3 1\\n4 4 1\\n5 5 1\\n6 6 1\\n7 7 1\\n8 8 1\\n9 9 1\\n10 10 1\\n11 11 1\\n12 12 1\\n13 13 1\\n14 14 1\\n15 15 1\\n16 16 1\\n17 17 1\\n18 18 1\\n19 19 1\\n20 20 1\\n21 21 1\\n22 22 1\\n23 23 1\\n24 24 1\\n25 25 1\\n26 26 1\\n27 27 1\\n28 28 1\\n29 29 1\\n30 30 1\\n') == '54'\nassert solution('1\\n2 1 1\\n3 2 1\\n3 3 1\\n4 4 1\\n5 5 1\\n6 6 1\\n7 7 1\\n8 8 1\\n9 9 1\\n10 10 1\\n11 11 1\\n12 12 1\\n13 13 1\\n14 14 1\\n15 15 1\\n16 16 1\\n17 17 1\\n18 18 1\\n19 19 1\\n20 20 1\\n21 21 1\\n22 22 1\\n23 23 1\\n24 24 1\\n25 25 1\\n26 26 1\\n27 27 1\\n28 28 1\\n29 29 1\\n30 30 1\\n31 31 1\\n32 32 1\\n33 33 1\\n34 34 1\\n35 35 1\\n36 36 1\\n37 37 1\\n38 38 1\\n39 39 1\\n40 40 1\\n41 41 1\\n42 42 1\\n43 43 1\\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n65\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\nassert solution('''\n1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '13'\nassert solution('''\n0\n1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '70'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '150'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n4\n5\n6\n1\n2\n3\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1') == '70'\n"
    },
    {
        "number": 3351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == '70'\nassert solution('''\n13\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '7\\n8\\n7\\n8'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1 2\n2 1\n2 2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n1 2 3 4 5\n2 1 2 3 4\n0 1\n0 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3\n1 2 3\n2 1 2\n2 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n2\n5 6 7\n5 6 7\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"8\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"7\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\n0 1\n0 4\n1 4\nSample Output:\n10\n7\n8\n7\n''') == '7'"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\") == \"10\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9\n0 1\n0 4\n1 4\n0 1\n0 4\nSample Output:\n10\n7\n8\n7\n''') == '7'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8'\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\nassert solution(\"10 5\\n1 2 3 4 5 6 7 8 9 10\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n\") == \"10\\n7\\n8\\n7\\n\"\n"
    },
    {
        "number": 3352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 5\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9\\n0 1\\n0 4\\n1 4\\n0 1\\n0 4\\n') == '10\\n7\\n8\\n7\\n'\nassert solution('10 20\\n10 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20 20 20 20 20 20 20 20\\n10 20 20 20 20 20"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([2, 4, 7]) == \"6\""
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('5 2 1') == '0'"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == \"6\"\n\nassert solution('''\n3 4 7\n-2 0\n0 -1\n0 1\n1 0\n2 1\n2 3\n3 -1\n''') == \"3\"\n\nassert solution('''\n1 3 5\n-2 0\n1 0\n1 2\n1 3\n2 0\n2 1\n2 3\n3 0\n''') == \"5\"\n\nassert solution('''\n7 4 6\n-2 0\n0 -1\n0 1\n0 2\n0 3\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n2 3\n3 0\n''') == \"7\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 7') == '6'\nassert solution('4 8 10') == '11'\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"4 7 2\") == \"3\"\nassert solution(\"4 4 5\") == \"4\"\nassert solution(\"-2 0\") == \"0\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 7\") == \"6\"\nassert solution(\"10 20 10\") == \"0\"\nassert solution(\"10 20 10 20 10\") == \"0\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"2 4\") == \"4\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == \"6\", 'Should be 6'\nassert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == \"9\", 'Should be 9'\nassert solution('''\n2 4 7\n-2 0\n0 -1\n-2 1\n1 0\n2 1\n2 3\n3 -1\n''') == \"10\", 'Should be 10'\n'''\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\\n\") == \"6\"\nassert solution(\"3 4 5\\n1 0\\n-1 1\\n2 3\\n-2 3\\n\") == \"7\"\nassert solution(\"3 5 7\\n1 0\\n-1 -1\\n2 3\\n-2 3\\n\") == \"3\"\nassert solution(\"3 5 7\\n1 0\\n-1 -1\\n2 3\\n-2 3\\n\") == \"2\"\nassert solution(\"3 5 7\\n1 0\\n-1 -1\\n2 3\\n-2 3\\n\") == \"1\"\n"
    },
    {
        "number": 3353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4 7\\n-2 0\\n0 -1\\n-2 1\\n1 0\\n2 1\\n2 3\\n3 -1\") == \"6\"\nassert solution(\"3\\n-2 1\\n0 -1\\n2 1\") == \"2\"\nassert solution(\"3\\n-2 1\\n0 1\\n2 1\") == \"1\"\nassert solution(\"3\\n-2 1\\n0 2\\n2 1\") == \"1\"\nassert solution(\"3\\n-2 1\\n0 2\\n2 1\") == \"1\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1 1''') == '3'\nassert solution('''1 1 1 1''') == '3'\nassert solution('''4 5 6 7''') == '2'\nassert solution('''10 3 9''') == '1'\nassert solution('''4 5 5 5''') == '1'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('3 1 4 41') == '0'\nassert solution('3 2 5 40') == '2'\nassert solution('3 2 5 41') == '0'\nassert solution('3 5 5 40') == '0'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4 40\") == \"3\"\nassert solution(\"1 0.25 1 2 2 3\") == \"3\"\nassert solution(\"1 0.5 1 2 2 3\") == \"3\"\nassert solution(\"1 0.5 2 2 3\") == \"2\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('2 0.5 3 20') == '2'\nassert solution('3 1 4 40 50') == '2'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 4 40') == '3'\nassert solution('8 1 2 4 40') == '4'\nassert solution('4 5 2 9 80') == '1'\nassert solution('3 1 2 4 40') == '3'\nassert solution('10 10 10 10 10') == '1'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string = '3 1 4 40') == '3'\nassert solution(input_string = '3 1 100 5') == '4'\nassert solution(input_string = '0 1 8 4') == '0'"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4 40') == '3'\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1 4 40') == '3'\n\nSample Input:\n3 2 100 100\nSample Output:\n0\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 1 4 40\n\"\"\") == \"3\"\nassert solution(\"\"\"\n0 1 10 40\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1 4 10') == '3'\nassert solution('5 1 4 10') == '4'\nassert solution('4 1 3 4') == '5'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('1 1\\n1 1\\n1 0') == ''\nassert solution('1 1\\n1 0\\n0 0') == '0'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0') == '99'\nassert solution('1\\n-1\\n0\\n') == '0'\nassert solution('1\\n-1\\n0\\n1\\n0\\n') == '0'\nassert solution('1\\n1\\n0\\n0\\n0\\n') == '0'\nassert solution('1\\n2\\n-1\\n1\\n-1\\n0\\n1\\n0\\n') == '2'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"99\"\n\"\"\""
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 352\") == \"99\"\nassert solution(\"2 352\") == \"\"\nassert solution(\"1 2\") == \"\"\nassert solution(\"3\") == \"\"\nassert solution(\"2\") == \"\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n''') == '99'\n\nassert solution('''\n0\n0\n0\n1\n0\n''') == '0'\n\nassert solution('''\n3\n78\n87\n74\n''') == '0'\n\nassert solution('''\n3\n0\n1\n2\n3\n''') == '0'\n\nassert solution('''\n5\n1 1 3 5\n2 2 4 6\n3 2 3 4\n3 3 3 3\n4 4 4 4\n''') == '6'"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sample_input) == sample_output\nassert solution(real_input) == real_output\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n\") == \"99\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 352\n93 82 444\n92 76 436\n99 62 -1\n0 70 66 71 97\n76 0 87 66 74\n62 90 0 60 94\n60 68 68 0 69\n83 78 83 73 0\n\"\"\") == \"99\"\nassert solution(\"\"\"\n1 3 8\n0 1 4\n5 1 7\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 352\\n93 82 444\\n92 76 436\\n99 62 -1\\n0 70 66 71 97\\n76 0 87 66 74\\n62 90 0 60 94\\n60 68 68 0 69\\n83 78 83 73 0\\n') == '99'\n"
    },
    {
        "number": 3355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('\\n'.join([\n    '3 352',\n    '93 82 444',\n    '92 76 436',\n    '99 62 -1',\n    '0 70 66 71 97',\n    '76 0 87 66 74',\n    '62 90 0 60 94',\n    '60 68 68 0 69',\n    '83 78 83 73 0'])) == '99'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n3\n4\n''') == '2 4'\n\nassert solution('''\n1\n2\n3\n4\n5\n''') == '3 5'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3 2'\nassert solution(\n    '5\\n2 3 4 1\\n3 4\\n5\\n1 2\\n3 4\\n4 5\\n') == '1 3'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '2 4'\nassert solution('5\\n4 3\\n1 2\\n3 4\\n5 6\\n7 8\\n') == '3 4 5 6'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n2 1\n3 2\n3 1\n\"\"\") == \"4 3\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n5 4\n\"\"\") == \"4 4\"\n\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n5 5\n\"\"\") == \"4 3\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"2 3 4\"\nassert solution(\"3\\n1 2\\n2 3\\n3 4\") == \"3 1 4\"\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 4') == '2 4'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '2 4'\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '1'\nassert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '4 5'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n3 1 2\\n2 3') == '2 3'\nassert solution('5\\n1 2 3 4 5\\n3 4 5 2 1') == '4 1'\nassert solution('5\\n1 2 3 4 5\\n3 4 5 2 1') == '1 1'\nassert solution('5\\n1 2 3 4 5\\n3 4 5 2 1') == '1 1'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1 2'\nassert solution('5') == '2 3 4 5'\n"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '2 3'"
    },
    {
        "number": 3356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2 3'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n2 2\n2 3\n4 1\n\"\"\") == \"9.0\"\nassert solution(\"\"\"\n2\n1 1\n2 2\n\"\"\") == \"12.00000\"\nassert solution(\"\"\"\n1\n1 1\n\"\"\") == \"9.0\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '12'\nassert solution('3') == '12.0'\nassert solution('4') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '3.0'\nassert solution('4') == '9.0'\nassert solution('5') == '15.0'\nassert solution('6') == '21.0'\nassert solution('7') == '28.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 1\n2 2\n3 2\n4 1\n''') == '9.00000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"9.0000\"\nassert solution(\"4\\n1 1\\n2 2\\n3 2\\n4 1\") == \"12.00000\"\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1\n2 2\n3 2\n4 1\n''') == '9.0'\nassert solution('''1\n1 1\n''') == '1.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9.0'\nassert solution('2') == '12.0'\nassert solution('3') == '12.00000'\nassert solution('4') == '9.0'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1\\n2 2\\n3 2\\n4 1\\n') == '9.00000'\nassert solution('4\\n1 1\\n2 2\\n3 2\\n4 1\\n') == '9.0000'\n"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1\\n2 2') == '9.00000'\nassert solution('3 3\\n3 3') == '12.00000'\nassert solution('4 1\\n2 1') == '9.0'"
    },
    {
        "number": 3357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"9.000\"\nassert solution(\"4\") == \"9.000\"\nassert solution(\"8\") == \"12.000\"\nassert solution(\"5\") == \"12.000\"\nassert solution(\"7\") == \"12.000\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'ST A\\nPH A\\nPL Y\\nDI Y\\n'\nassert solution('40') == 'ST A\\nAD\\nPL Y\\nDI Y\\n'\nassert solution('257') == 'ST A\\nAD\\nPL Y\\nDI Y\\n'\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n'\n\"\"\""
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0\n''') == \"ZE A\"\nassert solution('''\n1\n''') == \"ZE A\"\nassert solution('''\n2\n''') == \"AD A\"\nassert solution('''\n3\n''') == \"PL A\"\nassert solution('''\n4\n''') == \"DI A\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'DI A\\nDI X'\nassert solution('10') == 'ST A\\nST X\\nPL Y'\nassert solution('127') == 'ST A\\nST X\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'DI Y\\n'\nassert solution('3') == 'DI Y\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\nDI ZE\\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"DI A\\nDI X\\nST A\\nST X\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"ST A\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"22\") == \"ST A\\nAD\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"255\") == \"ST A\\nAD\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"DI Y\"\nassert solution(\"0\") == \"DI Y\"\nassert solution(\"123456789\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"DI\"\nassert solution(\"2\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\n\"\nassert solution(\"1\") == \"DI\\n\"\nassert solution(\"1234\") == \"ST A\\nST X\\nPH A\\nPH X\\nAD\\nPL Y\\nDI Y\\nDI\\nDI\\nDI\\nDI\\n\"\nassert solution(\"1234\\n1234\") == \"DI\\nDI\\nDI\\nDI\\nDI\\nDI\\nDI\\nDI\\nDI\\nDI\\n\"\n"
    },
    {
        "number": 3358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'DI Y\\nDI Y\\nDI Y'\nassert solution('33') == 'DI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y\\nDI Y'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5 6\") == \"2\"\nassert solution(\"1 6 4\") == \"3\"\nassert solution(\"1 8 10\") == \"16\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '2'\nassert solution('''1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000''') == '1'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 5 6\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 FFFF 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 5 1\n0000 0000 FFFF 0000 0000 0000\n0000 FFFF 0000 0000 0000 0000\n0000 0000 FFFF 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 5 7\n0000 FFFF 0000 0000 0000 0000\nFFFF FFFF 0000 FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 FFFF FFFF FFFF FFFF 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n0000 0000 0000 0000 0000 0000\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 5 6') == '2'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('4 4 4') == '5'\nassert solution('8 3 6') == '7'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 1') == '1'\nassert solution('3 3 1') == '4'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 4 6') == '0'"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 5 6\") == \"2\"\nassert solution(\"1 5 6\") == \"2\"\nassert solution(\"100 100 100\") == \"100\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 6') == '2'\nassert solution('1 1 1') == '1'\nassert solution('7 9 8') == '2'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS ->\\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\n'\n\n\"\"\""
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\n') == 'abaaba\\nNONE\\nabbbbbbbbbbbbbbbbba\\na\\nb'"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"abaaba\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == \"NONE\"\nassert solution('2') == \"NONE\"\nassert solution('3') == \"NONE\"\nassert solution('4') == \"NONE\"\nassert solution('5') == \"NONE\"\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\nS -> aS\\nS -> bS\\nS -> a') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaabaabbbbbbbbbbba'"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\even a single a or b is a palindrome\\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\even a single a or b is a palindrome\\n') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\none\\n') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\nabbbbbbbbbbbbbbbbba\\n') == 'abbbbbbbbbbbbbbbbba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\nabbbbbbbbbbbbbbbbba\\n') == 'abbbbbbbbbbbbbbbbba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'abaaba'\nassert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\nassert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'NONE'\nassert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nabaaba\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'abaaba'\nassert solution('''\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nabaaba\nNONE\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n''') == 'NONE'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\nS -> aSa\\nS -> bSb\\nS -> a') == 'abaaba'\nassert solution('1\\nS -> a') == 'NONE'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b') == 'abaaba'\nassert solution('5\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> ') == 'abbbbbbbbbbbbbbbbba'\nassert solution('2\\nS -> a\\nS -> b') == 'NONE'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nS -> aSa\\nS -> bSb\\nS -> a\\nS -> b\\nS -> \\nwhere are the abaaba palindromes on this line\\none on this line\\nhow about this aaaaaaabbbbbbbbbbbbbbba\\neven a single a or b is a palindrome') == 'abaaba'\n"
    },
    {
        "number": 3360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"S -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nnone on this line\nhow about this aaaaaaabbbbbbbbbbbbbbba\neven a single a or b is a palindrome\n\"\"\") == \"\"\"abaaba\nNONE\nabbbbbbbbbbbbbbbbba\na\n\"\"\"[:-1]\n\n\"\"\"\n\nSample Input:\n1\nS -> aSa\nS -> bSb\nS -> a\nS -> b\nS -> \nwhere are the abaaba palindromes on this line\nNONE on this line\n\nSample Output:\na\nNONE\n\"\"\""
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n4 5 0 2\\n1 3 7\\n2 0') == '4'\nassert solution('3\\n1 2\\n2 3') == '2'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '5'\nassert solution('''7\n3 4\n3 2\n2 0\n5\n5\n''') == '0'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('3') == '0'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n\nassert solution('''\n6\n1 2 4\n3 5 0\n4 1\n0 2\n4 4\n0 1\n''') == '7'\n\nassert solution('''\n8\n5 0 2 5 1 3\n3 4 0 4 4\n0 1 4 1\n0 4\n1 4\n0 1\n3\n''') == '0'\n\nprint('All tests passed!')\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n5 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n'''\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n4\n1 2\n2 3\n''') == '3'\nassert solution('''3\n2\n1 2\n2 3\n''') == '2'\n\n---\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '4'\nassert solution('1 3 7') == '0'\nassert solution('2 0') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n7 7 7 7 7 7 7\n7 7 5 7 7 7 7\n7 7 7 7 7 7 7\n7 7 5 7 7 7 7\n7 7 7 7 7 7 7\n7 7 7 7 7 7 7\n7 7 7 7 7 7 7\n7 7 7 7 7 7 7\n''') == '3'\nassert solution('''\n7\n4 1 3 7\n1 3 7\n4 3 7\n4 1 3 7\n1 3 7\n4 3 7\n4 1 3 7\n''') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1'\nassert solution('4 5 0 2') == '4'\nassert solution('1 3 7') == '4'\n"
    },
    {
        "number": 3361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n4 5 0 2\n1 3 7\n2 0\n4\n''') == '4'\n\nassert solution('''\n10\n10 5 0 2\n10 1 7\n10 2\n5\n''') == '5'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n4 4\") == \"GO FOR IT\"\nassert solution(\"1 2\\n4 4\\nWWWW\\nWSBB\\nWWWW\") == \"GO FOR IT\"\nassert solution(\"1 2\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWGBG\\n\") == \"GO FOR IT\"\nassert solution(\"1 2\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWGBG\\nWBWG\\n\") == \"NO WAY\"\nassert solution(\"1 2\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWGBG\\nWBWG\\nWBWG\\n\") == \"SUCCESS\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"GO FOR IT\"\nassert solution(\"2 1\\n4 1\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"SUCCESS\"\nassert solution(\"2 3\\n1 2\\nWWWW\\nWSBB\\nWWWW\\nWBWG\") == \"SUCCESS\"\n\n----Hints----\n- Think carefully about where Elsa and his father are allowed to move\n- Take an input such as:\n    2 2\n    2 5\n    WWWW\n    WSBB\n    WWWW\n    WBWG\n    WBWG\n    WBWG\n- Discuss the runtime and memory complexity of this solution.\n- The runtime of this solution is O(L * W * C) and C is the number of \u2018B\u2019 tiles.\n- The memory complexity of this solution is O(C) and C is the number of \u2018B\u2019 tiles.\n\n\"\"\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"1 1\") == \"NO CHANCE\"\nassert solution(\"2 1\") == \"NO WAY\"\nassert solution(\"4 1\") == \"NO WAY\"\n\"\"\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"2 2\") == \"NO CHANCE\"\nassert solution(\"3 3\") == \"SUCCESS\"\n\n---\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"GO FOR IT\"\nassert solution(\"2 2\") == \"GO FOR IT\"\nassert solution(\"1 1\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'GO FOR IT'\nassert solution('1 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'SUCCESS'\nassert solution('2 2\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'NO WAY'\nassert solution('0 1\\n3 5\\nWWWW\\nWSBB\\nWWWW') == 'SUCCESS'\nassert solution('2 3\\n4 4\\nWWWW\\nWSBB\\nWWWW') == 'NO WAY'\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'GO FOR IT'\nassert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'NO WAY'\nassert solution('''2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG''') == 'NO CHANCE'\n'''\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n2 3\n4 4\nWWWW\nWSBB\nWWWW\nWBWG\n\"\"\") == \"GO FOR IT\"\nassert solution(r\"\"\"\n4 1\n5 5\nSWG\nSGB\nSGB\nGGB\n\"\"\") == \"NO WAY\"\n"
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"GO FOR IT\"\nassert solution(\"1 2\") == \"NO WAY\"\nassert solution(\"4 4\") == \"NO WAY\"\n\"\"\""
    },
    {
        "number": 3362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"GO FOR IT\"\nassert solution(\"5 3\") == \"NO CHANCE\"\nassert solution(\"5 5\") == \"NO WAY\"\nassert solution(\"100 200\") == \"NO WAY\"\nassert solution(\"100 200\") == \"NO WAY\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 900\\n800 700 400 300 200') == '2243'\nassert solution('7 10\\n10 20 20 20 20 20 20 20 20') == '351296'\nassert solution('6 8\\n1000 2000 2000 2000 2000 2000 2000') == '0'\nassert solution('6 8\\n2000 2000 2000 2000 2000 2000 2000') == '351296'\nassert solution('6 4\\n1 2 3 4 5 6') == '16'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == \"2243\"\nassert solution('''\n5 9\n800 700 400 300 200\n''') == \"2232\"\nassert solution('''\n4 5\n100 10 20 30 40\n''') == \"2240\"\nassert solution('''\n1 1\n''') == \"1\"\nassert solution('''\n1 1\n''') == \"1\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3\\n900\\n800\\n400\\n200') == '2243'\nassert solution('2\\n5\\n900\\n800\\n400\\n200') == '1900'"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n900 700 400 300 200') == '2243'\nassert solution('5 2\\n800 700 400 300 200') == '1900'\nassert solution('5 3\\n800 700 400 300 200') == '1900'\nassert solution('5 4\\n800 700 400 300 200') == '1905'\nassert solution('5 5\\n800 700 400 300 200') == '1900'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 900\n800 700 400 300 200\n''') == '2243'\nassert solution('''\n1 1\n''') == '0'\nassert solution('''\n2 3\n2 3\n''') == '6'\nassert solution('''\n3 4\n4 4\n''') == '6'\nassert solution('''\n5 2\n1 1\n''') == '1'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"5 100\\n200 200 200 200 200 200\") == \"0\"\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\\n\") == \"2243\"\nassert solution(\"3 3\\n2 2\\n\") == \"0\"\nassert solution(\"4 5\\n5 5\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 900\\n800 700 400 300 200\\n') == '2243'\nassert solution('6 2\\n3 5 6 1\\n') == '6'\nassert solution('10 3\\n1 1 1 1 1 1 1 1\\n') == '5'\n"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\\n\") == \"2243\"\nprint(solution(input))"
    },
    {
        "number": 3363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 900\\n800 700 400 300 200\") == \"2243\"\nassert solution(\"1 1\\n1 1\") == \"1\"\nassert solution(\"3 4\\n1 1 1 1\") == \"3\"\nassert solution(\"5 2\\n7 2\\n1 1 1 1\") == \"5\"\nassert solution(\"5 3\\n4 5\\n1 1 1 1\") == \"5\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n= 1 2') == 'yes\\nno\\n'\nassert solution('10 4') == 'yes\\nno\\nno\\nyes\\nno\\n'\nassert solution('10 2') == 'yes\\nno\\nyes\\nyes\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == 'no'\nassert solution('10 4') == 'yes'\nassert solution('10 4') == 'yes'\nassert solution('10 5') == 'yes'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\") == \"yes\\nno\\nno\\nyes\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno\\nno"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3\\n') == 'yes\\n'\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\\n= 3 4\\n= 4 6\\n? 4 2\\n= 4 5\\n? 4 2\") == \"yes\\nno\"\nassert solution(\"10\\n20\\n= 10 20\\n= 20 10\\n? 10 10\\n= 10 11\\n? 10 11\") == \"yes\\nno\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 4\n? 1 3\n= 1 8\n= 3 8\n? 1 3\n''') == 'no\\nyes'\nassert solution('''\n2 5\n? 2 7\n? 1 3\n= 2 7\n= 1 3\n? 3 1\n= 3 2\n''') == 'yes\\nno'\n'''\n\n\nfrom typing import List\nimport math"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'yes\\nyes'"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"yes\\nyes\"\n"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5\\n? 4\\n= 4 5') == 'yes'\nassert solution('2 5\\n? 4\\n= 4 6') == 'no'\n\"\"\"\n\nimport sys\n\nn, q = map(int, sys.stdin.readline().split())\narr = {}\nfor i in range(n):\n    arr[i] = []\n\nfor i in range(q):\n    op = sys.stdin.readline().split()\n    if op[0] == '?':\n        if arr[int(op[1])]:\n            print('yes')\n        else:\n            print('no')\n    else:\n        arr[int(op[1])].append(int(op[2]))\n        arr[int(op[2])].append(int(op[1]))"
    },
    {
        "number": 3364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 4\\n? 1 3\\n= 1 8\\n= 3 8\\n? 1 3') == 'yes'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == \"2\", \"Should be 2\"\n\n2\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '2'\nassert solution('5 6') == '2'\nassert solution('5 7') == '3'\nassert solution('5 8') == '3'\nassert solution('5 9') == '4'\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"2\"\n\n'''\nn, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\n\nd = {}\n\nfor i in l:\n    if i not in d:\n        d[i] = 1\n    else:\n        d[i] += 1\n\nx = 0\nfor i in range(k):\n    if d[i] == 0:\n        continue\n    for j in range(1, d[i]):\n        x = max(x, i+j)\n\nprint(x)\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n10 5 4 8 3\n''') == '2'\n\n--[2 points]--\n1. Please do not modify the input and output for verification.\n2. Please do not import any additional libraries for your solution.\n3. Please do not use any global variables defined by Python or any other library for your solution.\n4. Please do not define any class, function, method, etc. in your solution.\n5. Please use the provided style hints for your code, including:\n    * Please use a *numpy* array for any calculations.\n    * The provided code uses a *numpy* array to solve the problem.\n    * The code should be tested on Python 3.6 and python 2.7.*\n    * Your solution should take advantage of numpy's vectorization and perform well.\n    * Use *pandas* to ease your life.\n\n'''"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n10 5 4 8 3') == '2'\n\"\"\"\n\nimport math\nimport collections\nimport itertools"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10 5 4 8 3\") == \"2\"\nassert solution(\"5 3\\n10 5 7 4 8 3\") == \"3\"\n\"\"\"\nimport sys\nimport math\n\nn, k = map(int, stdin.readline().split())\ninput_arr = list(map(int, stdin.readline().split()))\nprime_arr = [2]\nfor i in range(3, n + 1):\n    if all(i % j!= 0 for j in prime_arr):\n        prime_arr.append(i)\n\nmax_prime_score = 0\nmin_prime_score = sys.maxsize\n\nfor i in range(n - k + 1):\n    current_score = 0\n    for j in range(i, i + k):\n        if input_arr[j] in prime_arr:\n            current_score += 1\n    if current_score > max_prime_score:\n        max_prime_score = current_score\n    elif current_score < min_prime_score:\n        min_prime_score = current_score\n\nprint(min_prime_score)\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '2'\nassert solution('5 4') == '0'\nassert solution('5 5 4 4') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 3\n10 5 4 8 3\n''') == '2'\nassert solution('''\n5 2\n8 8 4 3 5''') == '3'"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 100') == '110110'\nassert solution('1 10') == '110110'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 127') == '1083', 'WRONG!!'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1\n''') == '1083'\n\nassert solution('''\n1 1\n''') == '1'\n\nassert solution('''\n4 6\n''') == '65'\n\nassert solution('''\n10 10\n''') == '0'\n\nassert solution('''\n-5 -5\n''') == '0'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"6\"\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 127') == '1083'\nassert solution('2 5') == '9'\nassert solution('3 4') == '6'\nassert solution('6 6') == '7'\nassert solution('7 9') == '0'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 127\n''') == '1083', 'First'\nassert solution('''1 7\n''') == '13', 'Second'\nassert solution('''1 10\n''') == '21', 'Third'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 127') == 1083"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1') == '10'\nprint(solution('''\n1 1000000\n'''))"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1083'\n"
    },
    {
        "number": 3366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n        1 127\n        ''') == '1083'\n    '''\n    pass"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == \"2.0000000000\""
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''How much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\n''') == '2.0000000000'\n\nimport os\nimport sys\nimport atexit\nimport io\nimport time\n\nclass Capturing(list):\n    def __enter__(self):\n        self._stdout = sys.stdout\n        sys.stdout = self._stringio = io.StringIO()\n        return self\n    def __exit__(self, *args):\n        self.extend(self._stringio.getvalue().splitlines())\n        del self._stringio    # free up some memory\n        sys.stdout = self._stdout"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''How much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n\n'''"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n3 4') == '2.0000000000'\nassert solution('3 2\\n3 4') == '2.0000000000'\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0.0000\"\nassert solution(\"1\") == \"0.1\"\nassert solution(\"1 2 3\") == \"0.333\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"3 1 2\") == \"0.667\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?') == '2.0000000000'\nprint(solution('''5\nHello!\nWhat is your name?\n2\nWhat is your favorite number?\n5\nWhat is the result of: 5 + 2 =?\n2\nHow many years have you been coding?\n10\nWhat is the result of: 2 * 8 =?\n8\nWhat is the result of: 2 * 2 * 2 * 2 =?\n8\nWhat is the result of: 2 * 1 =?\n2\nWhat is the result of: 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 =?\n27\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHello!\nWhat is your name?\n2\nWhat is your favorite number?\n5\nWhat is the result of: 5 + 2 =?\n2\nHow many years have you been coding?\n10\nWhat is the result of: 2 * 8 =?\n8\nWhat is the result of: 2 * 2 * 2 * 2 * 2 =?\n8\nWhat is the result of: 2 * 1 =?\n2\nWhat is the result of: 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 =?\n27\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHello!\nWhat is your name?\n2\nWhat is your favorite number?\n5\nWhat is the result of: 5 + 2 =?\n2\nHow many years have you been coding?\n10\nWhat is the result of: 2 * 8 =?\n8\nWhat is the result of: 2 * 2 * 2 * 2 * 2 =?\n8\nWhat is the result of: 2 * 1 =?\n2\nWhat is the result of: 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 =?\n27\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHello!\nWhat is your name?\n2\nWhat is your favorite number?\n5\nWhat is the result of: 5 + 2 =?\n2\nHow many years have you been coding?\n10\nWhat is the result of: 2 * 8 =?\n8\nWhat is the result of: 2 * 2 * 2 * 2 * 2 =?\n8\nWhat is the result of: 2 * 1 =?\n2\nWhat is the result of: 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 =?\n27\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?\nHello!\nWhat is your name?\n2\nWhat is your favorite number?\n5\nWhat is the result of: 5 + 2 =?\n2\nHow many years have you been coding?\n10\nWhat is the result of: 2 * 8 =?\n8\nWhat is the result of: 2 * 2 * 2 * 2 * 2 =?\n8\nWhat is the result of: 2 * 1 =?\n2\nWhat is the result of: 3 * 3 * 3 * 3 * 3 * 3 * 3 * 3 =?\n27'''))\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 4\nHow much is 6 times 9? 42\nHow much is 9 times 6? 42\nIs there intelligent life on Earth? Probably\nWhat is the air speed velocity of an unladen swallow? African?''') == '2.0000000000'\n'''\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n1\\n1\") == \"1.0\"\nassert solution(\"1\\n2\\n3\\n4\") == \"2.0\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 4\\nHow much is 6 times 9? 42\\nHow much is 9 times 6? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\"\n) == \"2.0000000000\"\n"
    },
    {
        "number": 3367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"4 4\\nHow much is 6 times 9? 42\\nIs there intelligent life on Earth? Probably\\nWhat is the air speed velocity of an unladen swallow? African?\"\n) == \"2.0\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"POSSIBLE\"\nassert solution(\"5 1\") == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey\n''') == 'POSSIBLE'\nassert solution('''\n3 6\nlion 3 monkey penguin lion\nmonkey 2 monkey penguin monkey\npenguin 1 monkey\n''') == 'IMPOSSIBLE'\nassert solution('''\n5 6\nzebra 4 lion 5 pig\nlion 5 zebra pig\npig 1 zebra\nlion 2 pig\nzebra 3 lion\n''') == 'POSSIBLE'\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 4\") == \"POSSIBLE\"\nassert solution(\"4 2\") == \"IMPOSSIBLE\"\nassert solution(\"2 5\") == \"FALSE ALARM\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"POSSIBLE\"\nassert solution(\"3 3\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 6') == 'POSSIBLE'\n\nassert solution('5 6') == 'IMPOSSIBLE'\n\nassert solution('2 4') == 'POSSIBLE'\n\nassert solution('6 4') == 'FALSE ALARM'\n\nassert solution('5 4') == 'POSSIBLE'"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 6\nmonkey 2 lion penguin\nlion 3 monkey penguin lion\npenguin 1 monkey''') == 'POSSIBLE'\nassert solution('''3 7\nmonkey 2 lion\npenguin 3 monkey\nlion 4 monkey\nmonkey 6 penguin\nlion 7 monkey\npenguin 2 monkey\nmonkey 5 lizard\nlion 8 lizard\npenguin 1 monkey''') == 'POSSIBLE'\nassert solution('''2 2\natlas 2 titus\natlas 3 titus\ntitus 4 atlas\natlas 1 titus\ntitus 5 atlas\ntitus 6 atlas\natlas 3 titus\ntitus 4 atlas\ntitus 7 atlas\ntitus 2 titus\ntitus 8 atlas\ntitus 1 titus\n''') == 'IMPOSSIBLE'\nassert solution('''5 6\natlas 1 titus\natlas 2 titus\natlas 3 titus\natlas 4 titus\natlas 5 titus\ntitus 6 atlas\natlas 7 titus\natlas 8 titus\ntitus 9 atlas\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\ntitus 3 titus\ntitus 4 titus\ntitus 5 titus\ntitus 6 titus\ntitus 7 titus\ntitus 8 titus\ntitus 9 titus\ntitus 10 titus\ntitus 1 titus\ntitus 2 titus\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 1001 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\n2 4\n2 4\n1 5''') == \"POSSIBLE\",'should be TRUE'\nassert solution('''3 3\n2 5\n1 6''') == \"IMPOSSIBLE\",'should be FALSE'\n'''\n"
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"POSSIBLE\"\nassert solution(input(input)) == \"IMPOSSIBLE\"\nassert solution(input(input(input))) == \"FALSE ALARM\""
    },
    {
        "number": 3368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n3 3\ncat dog fish\ndog 1 cat fish\nfish 1 dog\n    \"\"\") == \"POSSIBLE\"\n\nassert solution(\n    \"\"\"\n3 3\ncat dog fish\ndog 1 cat fish\nfish 1 dog\n    \"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\n    \"\"\"\n3 3\ncat dog fish\ndog 2 dog\ndog 3 dog\nfish 1 cat\n    \"\"\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"random sequence\"\nassert solution(\"20\") == \"random sequence\"\nassert solution(\"100\") == \"random sequence\"\nassert solution(\"100 100\") == \"random sequence\"\nassert solution(\"4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'\nassert solution('6 4 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''1000\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''10000\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n''') == 'triple correlation 4(1)4(3)3 found'\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"4 5 2 9 1 4 1 4 2 4 4 7 1 2 1 3 2\") == \"triple correlation 5(0)1(0)1 found\"\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''100\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4''') == 'triple correlation 4(1)4(3)3 found'\nassert solution('''2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8''') == 'triple correlation 2(0)1(1)0(0)2(2)1(2)2(3)1(4)2(5)4(6)1(7)0(8)3(9) found'\n\n''')\n"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('100') == 'triple correlation 4(1)4(3)3 found'"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n2\n\"\"\") == \"random sequence\"\n\nassert solution(\"\"\"\n7\n3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n0 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n0 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8\n8"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"100\\n0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\") == \"triple correlation 2(0)2(5)5 found\"\nassert solution(\"100\\n0 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\") == \"triple correlation 2(0)2(5)5 found\"\nassert solution(\"100\\n0 0 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7\") == \"triple correlation 2(0)2(5)5 found\"\nassert solution(\"100\\n1 1 7 2 5 4 7 8 7 7 9 7 9 7 7 9 7 7 9 9 7 7 9 7 8 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9') == 'triple correlation 4(1)4(3)3 found'\nassert solution('100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\\n4 6 3 3 2 7 1 8 7 8 7 6 1 1 7 2 5 4 7 2 0 4 4 5 8 3 0 6 9 3 2 6 6 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n1 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n2 3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n0 3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n1 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n0 3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n2 3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n0 3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n6 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n3 4 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2 6 9 9\\n1 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 2 5 1 2 7 2 4 1 0 0 4 9 1 8 7 5 0 4 4 8 4 3 2 6 8 8 5 6 7 0 9 7 0 3 6 1 4 4 1 2 3 2"
    },
    {
        "number": 3369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"100\\n4 7 9 5 9 3 5 0 0 1 7 8 5 0 2 6 3 5 4 4\") == \"triple correlation 4(1)4(3)3 found\"\nassert solution(\"1000\\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"40.5\"\nassert solution(\"1 3\") == \"39\"\nassert solution(\"10 20\") == \"20.5\"\nassert solution(\"3 3\") == \"20.5\"\nassert solution(\"5 10\") == \"10.5\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1\n10\n20\n30\nSample Input 2:\n3 4\n8\n5\n7\nSample Output 2:\n7.0\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 4 0\") == \"4.0\"\nassert solution(\"3 4 0\") == \"4.0\"\nassert solution(\"4 4 0\") == \"4.0\"\nassert solution(\"5 4 0\") == \"4.0\"\nassert solution(\"6 4 0\") == \"4.0\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n39\n40\n''') == \"40.5\"\n\nassert solution('''\n3 1\n40\n10\n''') == \"40\"\n\nassert solution('''\n4 1\n40\n30\n20\n''') == \"40\"\n\nassert solution('''\n5 1\n40\n30\n20\n10\n''') == \"40\"\n\nassert solution('''\n6 1\n40\n30\n20\n10\n20\n''') == \"40\""
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1\n39\n10\n40''') == '40.5'\nassert solution('''9 3\n78\n1\n7\n8\n8\n8\n7\n7\n6\n8\n''') == '57.1875'\nassert solution('''7 3\n7\n8\n7\n6\n8\n7\n6\n8\n''') == '57.1875'\nassert solution('''7 3\n7\n8\n7\n7\n8\n7\n6\n8\n''') == '57.1875'\nassert solution('''7 3\n7\n8\n7\n7\n8\n7\n6\n8\n''') == '57.1875'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n39\\n10\\n') == '40.5'\nassert solution('2\\n20\\n10\\n') == '19.5'\nassert solution('3\\n100\\n10\\n') == '95.5'"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1\\n39\\n10') == '40.5'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1\n10\n30\n''') == '40.5', \"Should be 40.5\"\nassert solution('''\n3 1\n19\n20\n''') == '19', \"Should be 19\"\nassert solution('''\n10 1\n5\n4\n''') == '5.5', \"Should be 5.5\"\nassert solution('''\n10 10\n5\n4\n''') == '10', \"Should be 10\"\nassert solution('''\n10 10\n5\n4\n''') == '10', \"Should be 10\"\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '40.5'\nassert solution('3 2') == '40'\nassert solution('3 3') == '29.5'\nassert solution('2 4') == '25'\nassert solution('4 5') == '24'\n"
    },
    {
        "number": 3370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 1\n39\n10\n40\n''') == '40.5', f'actual: {solution(stdin)}'\nprint('solution() is correct')"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2 1987\\n2 3 1987\\n1 3 1987\\n2 4 1987\\n1 4 1987\\n3 4 1987\") == \"2008\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 6\") == \"2008\"\nassert solution(\"5 3\") == \"2012\"\nassert solution(\"3 3\") == \"Impossible\"\nassert solution(\"10 2\") == \"1939\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 6') == 'Impossible'\nassert solution('5 1') == '1997'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([4, 6, 2, 1, 2, 3, 1, 3, 4, 4]) == \"Impossible\"\nassert solution([4, 2, 2, 3]) == \"2008\"\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 6') == 'Impossible'\nassert solution('2 5') == '2008'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987''') == '2008'\nassert solution('''4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987''') == 'Impossible'\n"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([4, 6,\n1, 2, 1987,\n2, 3, 1987,\n1, 3, 1987,\n2, 4, 1987,\n1, 4, 1987,\n3, 4, 1987,\n]) == \"Impossible\"\nassert solution([4, 4,\n1, 2, 1987,\n2, 3, 1987,\n1, 3, 1987,\n2, 4, 1987,\n1, 4, 1987,\n3, 4, 1987,\n]) == \"1 8\"\nassert solution([2, 2,\n1, 2, 1988,\n2, 3, 1988,\n1, 3, 1988,\n2, 4, 1988,\n1, 4, 1988,\n3, 4, 1988,\n]) == \"1 8\""
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 6') == 'Impossible'\nassert solution('4 8') == '2008'\n\"\"\""
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 6, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2,"
    },
    {
        "number": 3371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 6\n1 2 1987\n2 3 1987\n1 3 1987\n2 4 1987\n1 4 1987\n3 4 1987\n''') == \"Impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([4, 0, 1]) == \"3\"\nassert solution([4, 1, 2]) == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1\n''') == '3'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'impossible'\nassert solution('1 0 2') == 'impossible'\nassert solution('1 0 2 1 0 3') == '3'\nassert solution('1 0 2 1 0 3 4') == '3'\nassert solution('1 0 2 1 0 3 4 5') == 'impossible'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 0 1\") == \"impossible\"\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"3\"\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\nprint(solution())"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '3'\n\nassert solution('''6 0 2\nN 1 2\nC 1 2\nN 1 3\nC 1 1\nN 1 4\nC 1 1''') == 'impossible'\n\nassert solution('''4 0 1\nN 1 2\nC 1 2\nN 1 3\nC 1 1''') == '4'\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 0\") == \"3\"\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"3\"\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 0\\nN 1 2\\nN 1 3\\nC 1 1\") == \"3\"\nassert solution(\"4 0 1\\nN 1 2\\nC 1 2\\nN 1 3\\nC 1 1\") == \"impossible\"\n"
    },
    {
        "number": 3372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n()\n((()\n)()\n''') == '10'\n\nassert solution('''3\n()\n(()\n)()\n''') == '10'\n\nassert solution('''3\n(()\n())(\n)\n''') == '10'\n\nassert solution('''3\n()\n(())\n(()\n)()\n''') == '10'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution(\"(())\") == 1\nassert solution(\"))\") == 1\nassert solution(\"((()\") == 2\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('()') == '0'\nassert solution('()') == '1'\nassert solution('()())') == '3'\nassert solution('(()())') == '5'\nassert solution('((()())(())())') == '12'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == 0\nassert solution(\"()\") == 1\nassert solution((\")\") == 2\nassert solution((\")(\") == 3\nassert solution(\")(())\") == 5\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == 0\nassert solution('()') == 1\nassert solution('()()') == 2\nassert solution('()(())') == 4\nassert solution('(())())()') == 6\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"()\") == 0\nassert solution(\"()()\") == 2\nassert solution(\"()((()))\") == 5\nassert solution(\"(()((()))\") == 7\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n(())') == '10'\nassert solution('2\\n())') == '2'\nassert solution('3\\n()())') == '10'\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('(') == 1\nassert solution('()') == 2\nassert solution('()())') == 4\nassert solution('((()')) == 7\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(')') == 0\nassert solution('()') == 1\nassert solution('((()') == 2\nassert solution('())(()(()(())())()()()()(())()()()()()') == 19\nassert solution('())(()(()(())())()()()()()(())()()()()()') == 13\n"
    },
    {
        "number": 3373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('((()'\n) == '10'\nassert solution('(()()()())'\n) == '10'\n\"\"\""
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\"\n) == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == \"85293\""
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\n') == '85293'\n\n'''\n\nimport math"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n9\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n''') == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"85293\"\n\nassert solution(\"\"\"\n4\n377 a\n455 h\n180 a\n211 a\n134 a\n46 h\n111 h\n213 h\n17 a\n15\n1 2\n1 4\n1 6\n2 3\n2 4\n2 5\n3 5\n4 6\n4 7\n4 9\n5 7\n5 8\n6 9\n7 9\n7 8\n\"\"\") == \"1567\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\") == \"0\"\nassert solution(\"8\\n\") == \"0\"\nassert solution(\"4\\n\") == \"0\"\nassert solution(\"7\\n\") == \"0\"\nassert solution(\"9\\n\") == \"0\"\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\") == \"85293\"\nassert solution(\"10\\n377 a\\n455 h\\n180 a\\n211 a\\n134 a\\n46 h\\n111 h\\n213 h\\n17 a\\n15\\n5\\n1 2\\n1 4\\n1 6\\n2 3\\n2 4\\n2 5\\n3 5\\n4 6\\n4 7\\n4 9\\n5 7\\n5 8\\n6 9\\n7 9\\n7 8\\nSample Output\") == \"0\""
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '85293'\n"
    },
    {
        "number": 3374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"85293\"\nassert solution(\"3\") == \"15\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n1 5\\n1 6\\n2 6\\n1 7\\n2 7') == '7'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n\"\"\") == \"5\"\nassert solution(\"\"\"\n6 5\n1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n\"\"\") == \"7\"\nassert solution(\"\"\"\n9 9\n1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\\n2 3\") == \"4\"\nassert solution(\"10 5\\n1 2\\n1 3\\n2 3\\n5 4\\n5 4\\n5 3\\n6 7\\n8 6\\n8 7\") == \"9\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"3 4\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"8 10\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 5\\n6 6\\n7 7\\n1 8\\n8 9\") == \"9\"\nassert solution(\"7 8\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\") == \"10\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 2\\n1 3') == '4'\nassert solution('4 6\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6') == '3'\nassert solution('12\\n1 2\\n2 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9') == '0'\nassert solution('4 6\\n1 2\\n1 3\\n2 3\\n3 4\\n4 5\\n5 6\\n1 7\\n7 8\\n8 9\\n1 10\\n2 11\\n11 12') == '5'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4') == '5'\nassert solution('2 3\\n1 2\\n3 4') == '2'\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n4\\n1 2\\n1 3\\n2 3') == '6'\nassert solution('6\\n5\\n1 2\\n1 3\\n2 3\\n3 4\\n3 4') == '8'\nprint('exercise done')\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n1 3\") == \"2\"\nassert solution(\"4 5\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"5\"\nassert solution(\"3 1\\n2 1\\n1 3\") == \"1\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"3\"\nassert solution(\"3 4\\n1 2\\n1 3\\n2 3\\n1 4\\n2 4\") == \"4\"\n"
    },
    {
        "number": 3375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '5'\nassert solution('''\n4 2\n1 2\n1 3\n2 3\n1 4\n2 4\n''') == '5'\nassert solution('''\n8 2\n1 2\n1 3\n2 3\n1 4\n2 4\n1 5\n2 5\n1 6\n2 6\n''') == '5'\n'''\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n''') == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n4 caterpillar 3 pupa 7\n4 dove 3 pigeon 7 aaabaaajss\n4 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3 butterfly\n3 dove 3\n3 mouse 1\n3 caterpillar 3\n3 pupa 7\n3 butterfly\n\"\"\") == \"\"\"5500\"\"\"[1:]\n\nassert solution(\"\"\"\n5\n4 caterpillar 3 pupa 7\n4 dove 3 pigeon 7 aaabaaajss\n4 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3 butterfly\n3 dove 3\n3 mouse 1\n3 caterpillar 3\n3 pupa 7\n3 butterfly\n\"\"\") == \"\"\"4900\"\"\"[1:]"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n3 caterpillar 3 pupa 7 butterfly\n3 dove 3 pigeon 7 aaabaaajss\n3 mouse 1 electromouse 5 rat\n7\n0 electromouse\n500 electromouse\n1000 electromouse\n1500 rat\n2000 aaabaaajss\n2500 pigeon\n3000 butterfly\n\"\"\") == \"5100\"\n\nassert solution(\"\"\"\n4\n10 caterpillar 9 pupa 6 butterfly\n10 rabbit 3 pupa 4 chicken\n8 mouse 2 electromonitor 5\n9 mouse 1 computer 5\n3 mouse 2 computer 6\n\"\"\") == \"15500\"\n\nassert solution(\"\"\"\n3\n2 caterpillar 5 pupa 4 butterfly\n2 rabbit 1 pupa 3\n5 mouse 2 computer\n3 mouse 1 computer\n\"\"\") == \"5500\"\n\nassert solution(\"\"\"\n5\n2 caterpillar 4 pupa 2 butterfly\n2 rabbit 1 pupa 3\n1 mouse 3 computer\n3 mouse 2 computer\n\"\"\") == \"10000\"\n\nassert solution(\"\"\"\n2\n4 caterpillar 5 pupa 1 butterfly\n2 rabbit 3 pupa 4\n2 mouse 4 computer\n\"\"\") == \"33000\""
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    3\n    3 caterpillar 3 pupa 7 butterfly\n    3 dove 3 pigeon 7 aaabaaajss\n    7 mouse 1 electromouse 5 rat\n    7\n    0 electromouse\n    500 electromouse\n    1000 electromouse\n    1500 rat\n    2000 aaabaaajss\n    2500 pigeon\n    '''\n) == '5100'\nassert solution(\n    '''\n    3\n    1 caterpillar 1 butterfly\n    1 dove 2 pupa 3 mouse\n    2 mouse 2 aaabaaajss\n    '''\n) == '9375'\nassert solution(\n    '''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n) == '26100'\n'''\n    1 caterpillar 1 butterfly\n    1 dove 2 pupa 3 mouse\n    2 mouse 2 aaabaaajss\n    '''\n'''\n    3\n    3 caterpillar 3 pupa 7 butterfly\n    3 dove 3 pigeon 7 aaabaaajss\n    7 mouse 1 electromouse 5 rat\n    7\n    0 electromouse\n    500 electromouse\n    1000 electromouse\n    1500 rat\n    2000 aaabaaajss\n    2500 pigeon\n    '''\n'''\n    3\n    1 caterpillar 1 butterfly\n    1 dove 2 pupa 3 mouse\n    2 mouse 2 aaabaaajss\n    '''\n'''\n    3\n    1 caterpillar 1 butterfly\n    1 dove 2 pupa 3 mouse\n    2 mouse 2 aaabaaajss\n    '''\n'''\n    3\n    3 caterpillar 3 pupa 7 butterfly\n    3 dove 3 pigeon 7 aaabaaajss\n    7 mouse 1 electromouse 5 rat\n    7\n    0 electromouse\n    500 electromouse\n    1000 electromouse\n    1500 rat\n    2000 aaabaaajss\n    2500 pigeon\n    '''\n'''\n    3\n    1 caterpillar 1 butterfly\n    1 dove 2 pupa 3 mouse\n    2 mouse 2 aaabaaajss\n    '''\n'''\n    3\n    3 caterpillar 3 pupa 7 butterfly\n    3 dove 3 pigeon 7 aaabaaajss\n    7 mouse 1 electromouse 5 rat\n    7\n    0 electromouse\n    500 electromouse\n    1000 electromouse\n    1500 rat\n    2000 aaabaaajss\n    2500 pigeon\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    '''\n'''\n    5\n    2 petunia 1\n    2 zoroark 1\n    1 spook 2\n    1 gloom 3\n    2 fern 1\n    "
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"10\") == \"0\"\nassert solution(\"30\") == \"2000\"\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '300'\nassert solution('6') == '6000'\nassert solution('6 5') == '6000'\nassert solution('9') == '390000'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 caterpillar 3 pupa 7 butterfly\\n3 dove 3 pigeon 7 aaabaaajss\\n7 mouse 1 electromouse 5 rat\") == '5100'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '300'\nassert solution('5') == '500'\nassert solution('7') == '1000'\nassert solution('1') == '1'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\n2\\n3 caterpillar 3 pupa 7 butterfly\") == \"1000\"\nassert solution(\"4\\n3\\n1\\n7\") == \"1000\"\nassert solution(\"5\\n2\\n3\\n5\\n2\") == \"1500\"\nassert solution(\"5\\n4\\n1\\n4\\n5\") == \"1400\"\nassert solution(\"7\\n6\\n3\\n2\\n4\\n5\\n6\") == \"7300\""
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\nassert solution(\n    \"4\\n0\\n0\\n0\\n0\\n0\\n0\\n\") == \"-1\"\nassert solution(\n    \"20\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n\") == \"6\\n1\\n2\\n3\\n1\\n4\\n5\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '-1'\nassert solution('3') == '1'\nassert solution('10') == '6'\nassert solution('25') == '6'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '6', 'First'\nassert solution('''\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n''') == '8', 'Second'"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '1\\n2'\nassert solution('2\\n1 2\\n1 4') == '1\\n2'\nassert solution('3\\n4') == '-1'\nassert solution('5\\n2\\n4\\n1\\n3') == '6\\n1'\nassert solution('1\\n3') == '1\\n3'\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n0\\n1 1\\n1 1\\n2 2 3\\n1 4\\n8\\n1\\n2\\n3\\n1\\n4\\n2\\n3\\n5\\n') == '6\\n1\\n2\\n3\\n1\\n4\\n5\\n', f\"Your {solution.__name__} is broken!\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3\n0\n1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n10\n1 1 2 3 4 5 6 7 8 9 0\n1\n\"\"\") == \"11\"\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6 1 2 3 1 4 5\"\n\nassert solution(\"\"\"\n7\n0\n1 1\n1 1\n2 2 3\n1 4\n8\n1\n2\n3\n1\n4\n2\n3\n5\n\"\"\") == \"6 1 2 3 1 4 5\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n\") == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5') == '10'\nprint('Solution: {}'.format(solution(input())))"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '10'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 1 2 1\\n4\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 1 2 1\\n4\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5') == '10'\nassert solution('3\\n2 4\\n1 2 O 3\\n1 2 R 6\\n1 2 O 3\\n2 1 O 3\\n1 2 R 5') == '17'"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '10'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 2 1 2 1\\n4\") == \"10\"\n"
    },
    {
        "number": 3378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 4') == '2'\nassert solution('6 4') == '5'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2\n0 1\n1 2\n''') == '2'\n\"\"\"\nfrom collections import defaultdict\nfrom collections import deque"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '1'\nassert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '2'\nassert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '3'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4 3\n0 1\n1 2\n2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3') == '1'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n0 1\\n1 2\\n2 3\\n') == '1'\nassert solution('1 1\\n2 2\\n3 3\\n') == '1'\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n0 1\\n1 2\\n2 3\\n\") == \"1\"\nassert solution(\"4 4\\n0 1\\n1 2\\n2 3\\n3 4\\n\") == \"5\"\n"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 2\\n0 1\\n') == '1'\nassert solution('10 10\\n0 1\\n2 5\\n3 7\\n4 4\\n8 8\\n9 9\\n10 10\\n') == '2'\nassert solution('4 2\\n0 1\\n1 2\\n1 3\\n') == '2'"
    },
    {
        "number": 3379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n''') == '1'\nassert solution('''\n2 4\n0 1\n1 3\n1 4\n1 5\n1 6\n''') == '2'\nassert solution('''\n3 2\n0 1\n0 2\n1 3\n''') == '1'\nassert solution('''\n4 3\n0 1\n1 2\n2 3\n3 4\n''') == '3'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n4\n4\n3\n3''') == '0.962962962963'''\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '0.962962962963'\nassert solution('16') == '0.6565217391304'\nassert solution('2') == '0.25'\nassert solution('3') == '0.0'\nassert solution('123456789') == '0.0'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"0.962962962963\"\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n'''\n4\n''') == '0.962962962963', 'First'\nassert solution(\n'''\n7\n''') == '0.06310344827586', 'Second'\nassert solution(\n'''\n5\n''') == '0.062869014084', 'Third'\nassert solution(\n'''\n100\n''') == '0.931668695059', 'Fourth'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"0.962962962963\"\nassert solution(\"1\") == \"1.0\"\nassert solution(\"100\") == \"0.953125\""
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n10\n10\n5\n5\n3\n2\n1\n3\n3\n''') == '0.962962962963'\nassert solution('''\n4\n9\n6\n9\n4\n4\n4\n6\n2\n''') == '0.9473684210526'\nassert solution('''\n7\n11\n10\n4\n6\n11\n11\n7\n10\n4\n''') == '0.8181818181818'\nassert solution('''\n8\n12\n10\n10\n9\n10\n12\n10\n10\n12\n9\n''') == '0.8095238095238'\nassert solution('''\n10\n11\n9\n9\n10\n9\n10\n9\n9\n9\n8\n7\n''') == '0.8181818181818'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.5'\nassert solution('4') == '0.962962962963'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '0.962962962963'"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '0.962962962963'\nassert solution('2') == '0.962962962963'\nassert solution('3') == '0.9444444444444'\nassert solution('4') == '0.9444444444444'\n"
    },
    {
        "number": 3380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '0.962962962963'\nassert solution('10') == '0.543508292568'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '0 0'\nassert solution('2\\n') == '40000000 0'\nassert solution('3\\n') == '0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\nassert solution('2') == '0 0\\n0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0 0\\n40000000 0\\n0 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\",\n    \"0 0\",\n    \"40000000 0\",\n    \"0 40000000\"\n) == \"0 40000000 0\"\n\nassert solution(\n    \"4\",\n    \"0 0\",\n    \"0 40000000\",\n    \"0 40000000\"\n) == \"40000000 0 0\"\n\nassert solution(\n    \"4\",\n    \"0 40000000\",\n    \"0 40000000\",\n    \"0 40000000\"\n) == \"0 40000000 0\"\n\nassert solution(\n    \"10\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\",\n    \"10000000 0\"\n) == \"10000000 0 10000000 0 10000000 0 10000000 0 10000000 0 10000000 0 10000000 0 10000000 0 10000000 0 10000000 0\""
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n1\\n') == '0 0\\n'\nassert solution('3\\n0 0\\n1 1\\n') == '0 1\\n40000000 0\\n'\n\"\"\"\nfrom typing import List\n\ntest_cases = int(input())\nwhile test_cases:\n    test_cases -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = sorted(a, reverse=True)\n    print(*ans, sep='\\n')\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n40000000 0\n40000000 40000000\n0 40000000''') == '''0 0\n40000000 0\n0 40000000'''\n\nassert solution('''20\n10 40000000\n6 40000000\n5 40000000\n4 40000000\n3 40000000\n2 40000000\n1 40000000\n0 40000000''') == '''1 40000000\n2 40000000\n3 40000000\n4 40000000\n5 40000000\n6 40000000\n7 40000000\n8 40000000\n9 40000000\n10 40000000\n11 40000000\n12 40000000\n13 40000000\n14 40000000\n15 40000000\n16 40000000\n17 40000000\n18 40000000\n19 40000000\n20 40000000'''\n\nassert solution('''10\n0 40000000\n4 40000000\n9 40000000\n1 40000000\n8 40000000\n2 40000000\n7 40000000\n6 40000000\n5 40000000\n3 40000000\n2 40000000\n1 40000000''') == '''0 40000000\n2 40000000\n1 40000000\n8 40000000\n6 40000000\n5 40000000\n3 40000000\n2 40000000\n1 40000000\n0 40000000'''\n\nassert solution('''4\n0 40000000\n4 40000000\n8 40000000\n0 40000000\n3 40000000\n7 40000000\n1 40000000\n6 40000000\n2 40000000''') == '''0 40000000\n2 40000000\n1 40000000\n8 40000000\n6 40000000\n5 40000000\n3 40000000\n0 40000000'''\n\nassert solution('''3\n0 0\n40000000 0\n0 40000000''') == '''0 0\n40000000 0\n0 40000000'''"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n3\n1\n3\n4\n2\n''') == '0 0\\n0 40000000\\n0 40000000\\n'''"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0 0'\nassert solution('3') == '0 40000000 0'\nassert solution('1000000000000') == '40000000 40000000 40000000 40000000 40000000'\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0 0\"\nassert solution(\"3\") == \"0 40000000\"\nassert solution(\"2\") == \"0 40000000 0\"\nassert solution(\"5\") == \"0 40000000 0 40000000\"\n"
    },
    {
        "number": 3381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '0 0'\nassert solution('4') == '40000000 0'\nassert solution('100') == '0 40000000'\nassert solution('10') == '0 40000000'\nassert solution('100000') == '40000000 40000000'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5 5 2''') == '1'\nassert solution('''10 4 3 2''') == '3'\nassert solution('''11 15 15 2''') == '2'\n''')\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"impossible\"\n'''"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"3 5 5 2 4\") == \"impossible\"\nassert solution(\"3 5 5 2 4 4\") == \"impossible\"\nassert solution(\"1 1 1 1\") == \"impossible\"\nassert solution(\"5 5 5 2\") == \"impossible\""
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 5 5 2') == '1'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 5 2\") == \"1\"\nassert solution(\"3 5 5 3\") == \"0\"\nassert solution(\"7 9 3 4\") == \"2\"\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('7 9 4 3') == '0'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('4 4 4 4') == 'impossible'\nassert solution('4 4 5 2') == '2'\nassert solution('4 4 4 5') == 'impossible'\nassert solution('5 5 5 5') == 'impossible'\n"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 5 2') == '1'\nassert solution('3 5 5 3') == 'impossible'\nassert solution('5 5 5 3') == 'impossible'"
    },
    {
        "number": 3382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(None) == \"impossible\"\nassert solution(\"3 5 5 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\nassert solution('''40 -1\n20 -2\n30 -3\n40 -4''') == '0'\nassert solution('''10 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '4'\nassert solution('''10 4 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('20 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '2'\nassert solution('20 10 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '1'\nassert solution('20 10 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '-1'\nassert solution('20 20 10 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0') == '0'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"20 3 5 5\") == \"2\"\nassert solution(\"50 5 1 2\") == \"6\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"3 5 5 5\") == \"6\"\nassert solution(\"3 2 3 4\") == \"6\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\nassert solution('''20 1 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '1'\nassert solution('''20 1 0 0\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '0'\nassert solution('''20 3 0 0\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '0'"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 5 5\") == \"2\"\nassert solution(\"5 2 2 2 2\") == \"0\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"20 3 5 5\") == \"2\"\nassert solution(\"3 3 3 3\") == \"0\"\nassert solution(\"3 2 4 4\") == \"1\"\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n0\\n0\\n0\\n') == '2'\n\"\"\"\nfrom typing import List, Tuple\nfrom collections import namedtuple\nimport operator\nimport math"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\nprint('PASSED')"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '2'\nassert solution('''20 3 5 5\n0 0 0\n0 -10 0\n30 0 0\n0 0 0''') == '1'\nassert solution('''10 7 9\n-1 -2 -3\n0 0 0\n0 0 0\n0 0 0\n0 0 0''') == '-1'\n"
    },
    {
        "number": 3383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"2\"\nassert solution(\"1 100000 3 5 5\\n0 0 0\\n0 -10 0\\n30 0 0\\n0 0 0\") == \"0\"\nassert solution(\"1 10 1 1 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"0\"\nassert solution(\"1 10 1 1 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"0\"\nassert solution(\"1 10 1 1 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"1\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '4 5'\nassert solution('15') == '15 16'\nassert solution('2') == '3 3'\nassert solution('1') == '1 1'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"1 1\"\nassert solution(\"1 1 2\") == \"1 2\"\nassert solution(\"1 2 1\") == \"1 2\"\nassert solution(\"1 2 2\") == \"1 2\"\nassert solution(\"4 7 2\") == \"6 4\"\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('13') == '12 14'\nassert solution('100') == '99'\n\"\"\""
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '6 8'\nassert solution('153') == '143 153'\nassert solution('15') == '15'\nassert solution('13') == '12 14'\nassert solution('14') == '14'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('23') == '21'\nassert solution('1234') == '1234'\nassert solution('99999') == '10001'\nassert solution('11') == '11'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('2') == '4'\nassert solution('15') == '16'\nassert solution('13') == '12'\n"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"12 14\""
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n9\n5\n5\n4\n7\n4\n3\n7\n2\n''') == '12 14'\n\nassert solution('''\n37\n-1\n-5\n-7\n-2\n''') == '-2 -1'\n\nassert solution('''\n9\n0\n1\n2\n3\n4\n5\n6\n7\n8\n''') == '1 2'\n\nassert solution('''\n9\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n''') == '-2 -1'\n\nassert solution('''\n-9\n2\n7\n8\n3\n0\n5\n-3\n6\n-1\n''') == '-7 -3 -1'"
    },
    {
        "number": 3384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9') == '3'\nassert solution('1') == '2'\nassert solution('9223372036854775807') == '99999999999999999999999999999999999999999'\nassert solution('-1234') == '-1234'\nassert solution('-9') == '-9'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1\\n') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '0'\nassert solution('1 0 0') == '1'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '0'\nassert solution('10') == '8'\nassert solution('8') == '3'\nassert solution('13') == '6'\nassert solution('14') == '2'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 0\\n1 0 1\\n3 0 1\\n3 0 0\\n3 0 1') == '0'\nassert solution('8\\n1 0 0\\n1 1 0\\n2 0 1\\n2 0 0\\n2 0 0\\n2 1 1') == '5'"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n0 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\"\n) == '0'\n\nassert solution(\n\"\"\"\n0 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\"\n) == '0'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '2'\nassert solution('3') == '3'\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n1 0 0\n1 0 1\n3 0 1\n3 0 0\n3 0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n0 0 1\n1 0 1\n3 0 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"1 0 0\") == \"1\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"3 0 1\") == \"1\"\nassert solution(\"3 0 0\") == \"0\"\n"
    },
    {
        "number": 3385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\nassert solution_two() == '0'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2 3\n3\n1 1\n1 2\n1 3\n2 1\n2 2\n1 3\n2 3\n\"\"\") == \"\"\"1 2\n3 1\n1 2\n1 3\n2 1\n2 3\n\"\"\"\n\nassert solution(\n\"\"\"\n2 3\n3\n1 1\n2 2\n1 3\n1 4\n2 1\n2 3\n\"\"\") == \"\"\"1 3\n1 2\n3 1\n1 4\n2 1\n2 3\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([2, 3]) == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3'\n\"\"\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 2\n2 1\n3 1\n3 2''') == '1 3 2 3 2'\nprint(solution('''6 5\n1 3\n3 4\n3 5\n4 2\n5 1\n4 5'''))"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3]) == '1 1\\n2 2'\nassert solution([2, 4]) == '1 1 2\\n1 3\\n2 1 3\\n3 2'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\\n'\nassert solution('6 6') == '1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n'\nassert solution('10 10') == '1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n'\nassert solution('0 0') == '0 0\\n'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n2 1') == '1 1'\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '1 1\\n2 2\\n1 3\\n2 1'\nprint(solution(input()))\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n\") == \"1 1\\n2 2\\n1 3\\n2 1\\n1 2\\n2 3\"\nassert solution(\"4 2\\n\") == \"-1\"\nassert solution(\"3 1\\n\") == \"-1\"\nassert solution(\"4 3\\n\") == \"1 2\\n1 3\\n2 1\\n2 3\"\nassert solution(\"5 4\\n\") == \"1 2\\n1 3\\n2 3\\n3 4\\n4 5\"\n"
    },
    {
        "number": 3386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1 1\\n2 2\\n1 3\\n2 1\"\nassert solution(\"1\") == \"1 1\\n2 2\\n1 3\\n2 1\"\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n3 10\n0 10 1\n0 10 1\n0 10 1\n\"\"\") == \"3.33333333\"\nassert solution(\"\"\"\n3 1\n0 1 1\n\"\"\") == \"1.0\"\nassert solution(\"\"\"\n10 5\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0 10 1\n0"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nprint(solution('''3 10\n0 10 1\n0 10 1\n0 10 1\n'''))"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 5\n1 5 1\n1 5 1\n1 5 1\n''') == '1.66666667'\nassert solution('''\n3 1\n0 1 1\n''') == '0.25'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('3 1\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'\nassert solution('3 1\\n0 10 1\\n0 10 1\\n0 10 1\\n') == '3.33333333'"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10\\n0 10 1\\n0 10 1\\n0 10 1') == '3.33333333'\nassert solution('5 10\\n1 2 3\\n3 4 2\\n4 5 2\\n2 1 2\\n1 1 3\\n4 5 3') == '5.5'\nassert solution('2 5\\n1 2 2\\n2 3 4\\n2 2 2\\n3 2 2\\n1 1 3') == '1.3333333333333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\n\n'''"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 4\n0 10 1\n0 10 1\n''') == '2.6666666666666667'\nassert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.3333333333333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 10\n0 10 1\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n2 10\n0 10 1\n0 10 1\n''') == '3.33333333'\n"
    },
    {
        "number": 3387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 10\n0 10 1\n0 10 1\n''') == '3.33333333'\nassert solution('''\n3 5\n0 2 3\n0 2 3\n0 2 3\n''') == '3.33333333'\nassert solution('''\n3 5\n0 2 3\n0 2 3\n0 2 3\n0 2 3\n''') == '1.58333333'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n5 5 4 4\n''') == '1'\n\nassert solution('''\n6\n5 5 4 5 6\n''') == '2'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"3\\n3 2 2\\n2 4 6\\n2 3 7\\n\") == \"2\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('3 4 4') == '1'\nassert solution('3 2 3') == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nassert solution(sample_input_3) == sample_output_3\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3 5 7\") == \"0\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('2') == '1'\nassert solution('1') == '0'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\nabba\n''') == '2'\nassert solution('''1\na\n''') == '0'\nassert solution('''1\na\nb\n''') == '1'\nassert solution('''1\nb\na\n''') == '1'\nassert solution('''2\nb\na\n''') == '0'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"ababa\") == \"2\"\nassert solution(\"abab\") == \"1\"\nassert solution(\"abba\") == \"2\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 2\nabba\n''') == '2'\nassert solution('''\n4 1\na\n''') == '1'\nassert solution('''\n4 2\naaa\n''') == '4'\nassert solution('''\n4 4\nabcd\ncba\n''') == '2'\nassert solution('''\n4 10\nabcdabcde\ncbabcdc\nbcdabcd\ncdabcd\nbcdcd\n''') == '0'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2\naba\n''') == '2'\nassert solution('''\n4 3\naaa\nbbb\nccc\n''') == '3'\nassert solution('''\n4 4\naaa\naaa\naaa\naaa\naaa\naaa\n''') == '1'\nassert solution('''\n10 1\naaa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\naa\n''') == '10'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '2'\n\nassert solution('1 2') == '1'\n\nassert solution('1 2 3 4') == '1'\n\nassert solution('1 2 2 3') == '2'\n\nassert solution('1 2 1 3') == '1'"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\naba\\n\") == \"1\"\nassert solution(\"5 1\\na bb cc dd\\n\") == \"2\"\nassert solution(\"5 5\\na\\n\") == \"1\"\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"9 8\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"7 5\") == \"4\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n2 4') == '3'\nassert solution('5 4\\n1 2\\n2 3\\n3 4\\n4 5') == '2'\nassert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '1'"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nprint(solution('''\n8 5\n1 2\n1 3\n3 4\n2 4\n2 5\n3 6\n4 7\n6 8\n'''))\nprint(solution('''\n6 5\n1 2\n1 3\n3 4\n2 4\n2 5\n3 6\n4 7\n6 8\n'''))\nprint(solution('''\n3 2\n1 3\n2 1\n'''))\nprint(solution('''\n3 1\n1 2\n1 3\n'''))\nprint(solution('''\n1 1\n1 2\n'''))"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\n2 3\n2 4''') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n2 3\\n2 4') == '3'\nassert solution('4 3\\n1 2\\n2 3\\n2 4') == '4'\nassert solution('4 3\\n1 2\\n2 3\\n3 4') == '5'\nassert solution('4 3\\n1 2\\n3 3\\n3 4') == '1'\nassert solution('4 4\\n1 1\\n2 2\\n3 3\\n3 4') == '0'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n2 3\\n2 4\") == \"3\"\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n2 3\\n2 4\\n') == '3'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '5'\nassert solution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n') == '10'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 4') == '3'\nassert solution('2 1') == '1'\nassert solution('4 1') == '1'\nassert solution('3 5') == '3'\n"
    },
    {
        "number": 3390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n2 4\n''') == '3'\nassert solution('''\n4 3\n1 2\n1 3\n1 4\n''') == '1'\nassert solution('''\n3 4\n1 2\n2 4\n2 3\n''') == '2'\nassert solution('''\n1 2\n2 3\n2 4\n''') == '2'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\nassert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 2\\n'\n    '1 0\\n'\n    '0 1\\n'\n    '1000 1\\n'\n    '1 3\\n'\n    '2 3\\n'\n) == '1'\n\nassert solution(\n    '3 2\\n'\n    '1 0\\n'\n    '0 1\\n'\n    '1000 1\\n'\n    '1 3\\n'\n    '2 3\\n'\n) == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    5 5\n    0 0\n    0 1\n    1 1\n    1 3\n    3 3\n    ''') == '1'\nassert solution('''\n    5 5\n    0 0\n    0 1\n    1 0\n    1 1\n    3 3\n    ''') == '0'\n''')\n\n\n'''\n    Your input\n    2\n    3 3\n    2 3\n    Your output\n    0\n    3\n\n-----Explanation-----\nTest Case 1:\n    house coordinates: (0,0), (0,1), (1,0), (1,1)\n    house numbers: 1,2,3,4\n    zone coordinates: (0,0), (0,1), (1,1), (1,2)\n    zone numbers: 1,2,3,4\n    zone coordinates: (0,0), (0,1), (1,0), (1,1)\n    zone numbers: 1,1,1,2\n    house coordinates: (0,0), (1,0)\n    house numbers: 1,2\n    answer: 1\n\nTest Case 2:\n    house coordinates: (0,0), (0,1), (1,0), (1,1)\n    house numbers: 1,2,3,4\n    zone coordinates: (0,0), (0,1), (1,1), (1,2)\n    zone numbers: 1,2,3,4\n    zone coordinates: (0,0), (0,1), (1,0), (1,1)\n    zone numbers: 1,1,1,2\n    house coordinates: (0,0), (1,0)\n    house numbers: 1,2\n    answer: 0\n'''\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '0'\nassert solution('3 2') == '1'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 0\\n0 1\\n1000 1\\n1 3\\n2 3\\n') == '1'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n0 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 5\n0 0\n0 1\n1 4\n2 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 5\n0 0\n1 1\n2 2\n4 4\n3 3\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1 4\n0 0\n0 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n1 0\n0 1\n1000 1\n1 3\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 4\n1 0\n0 1\n0 2\n3 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n4 4\n1 0\n0 1\n1 2\n1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 2\n1 2\n1 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 3\n1 0\n0 1\n2 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4') == '1'\nassert solution('2 2') == '0'\nassert solution('3 3') == '0'"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 2') == '0'\nassert solution('3 1') == '0'\nassert solution('3 2') == '0'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n0 1\n1 2\n''') == '0'\nassert solution('''\n5\n1 0\n1 1\n2 1\n2 2\n1 2\nSample Output:\n1\n0\n''') == '1'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"7\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n10\n3 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"7\"\nassert solution(\"\"\"\n10\n3 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"7\"\nassert solution(\"\"\"\n10\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == \"12\"\n\"\"\")"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '7'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n3 2 2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n''') == '7'\nassert solution('''\n1 1 1\n1 2 1\n1 3 1\n''') == '3'\n'''\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n3\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '7'\n\"\"\""
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n3 2 2\\n5 2 1\\n3 2 1\\n1 2 1\\n1 2 3') == '7'\n\n\"\"\"\n\nn = int(input())\n\nfor _ in range(n):\n    x, y, z = input().split()\n    x, y, z = int(x), int(y), int(z)\n    if z > x + y:\n        print(z - (x + y))\n    else:\n        print(x + y)\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '7'\nassert solution('3 2 2') == '5'\nassert solution('5 2 1') == '1'\nassert solution('3 2 1') == '1'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 2\n3 2\n3 2\n3 2\n\"\"\") == '7'\nassert solution(\"\"\"\n2\n5 2 1\n3 2 1\n1 2 1\n1 2 3\n\"\"\") == '7'\nprint('ok')\n"
    },
    {
        "number": 3392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"7\"\nassert solution(\"\") == \"\"\nassert solution(\"3\") == \"7\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"5 5\") == \"15\"\nassert solution(\"6 4\") == \"3\"\nassert solution(\"7 7\") == \"7\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100\n''') == '20'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\n\") == \"20\"\nassert solution(\"3 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\n\") == \"20\"\nassert solution(\"3 2\\nlinearalgebra 10\\ncalculus1 10\\n\") == \"20\"\nassert solution(\"3 2\\nlinearalgebra 10\\n\") == \"20\"\nassert solution(\"3 2\\nlinearalgebra 10\\n\") == \"20\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == \"20\"\nassert solution('''4 2\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == \"30\"\nassert solution('''5 3\nlinearalgebra 10\ncalculus1 10\ncalculus2 20\nhonorsanalysis1 50\nhonorsanalysis2 100''') == \"10\""
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\") == \"20\"\nassert solution(\"3\\n10\\n20\\n50\") == \"50\"\nassert solution(\"20\\n20\\n100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 2') == '20'"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n') == '1'\nassert solution('3\\n5\\n3\\n1\\n1\\n') == '9'\nassert solution('2\\n2\\n') == '2'\nassert solution('1\\n1\\n') == '1'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\n') == '20'\nassert solution('2\\n2\\nlinearalgebra 10\\ncalculus1 10\\n') == '10'\nassert solution('3\\n1\\nlinearalgebra 10\\n') == '10'\nassert solution('4\\n1\\nlinearalgebra 10\\n') == '10'\nassert solution('5\\n1\\nlinearalgebra 10\\n') == '10'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n') == '20'\n\nassert solution('5 2\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n') == '20'\n\nassert solution('1 5\\nlinearalgebra 1\\ncalculus1 1\\ncalculus2 2\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n') == '50'\n\nassert solution('4 6\\nlinearalgebra 10\\ncalculus1 10\\ncalculus2 20\\nhonorsanalysis1 50\\nhonorsanalysis2 100\\n') == '50'\n"
    },
    {
        "number": 3393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\ncalculus1 10\ncalculus2 20\ncalculus3 30\nlevelI 20\nlevelII 30\nlevelI 30\nlevelI 40\nlevelII 40\nlevelI 50\nlevelII 50\nlevelI 60\nlevelII 60\nlevelI 70\nlevelII 70\nlevelI 80\nlevelII 80''') == '60'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '6'\nassert solution('3 3') == '2'\nassert solution('5 5') == '2'\nassert solution('10 10') == '8'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n'''\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n''') == '6'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '6'\nassert solution('1 1') == '0'\nassert solution('3 4 1') == '1'\nassert solution('3 4 1 2 3 2 2') == '7'\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n3\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n1\n4\n1\n1\n1\n2\n3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n2\n4\n3\n1\n1\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n3\n2\n3\n1\n1\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n4\n1\n3\n2\n3\n4\n\"\"\") == \"2\""
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3\n1 2 2\n2 3 4\n3 4 1\"\"\") == \"6\"\nassert solution(\"\"\"4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\"\"\") == \"8\"\nassert solution(\"\"\"2\n1 2 2\n2 3 4\"\"\") == \"4\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4 4\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2 2\n1 2\n1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5 5\n1 2 2\n2 3 4\n3 4 1\n4 1 2\n3\n1 4 2\n3 3 3\n4 3 6\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '6'\nassert solution('4 4\\n1 2 2\\n2 3 4\\n3 4 1\\n4 1 2\\n3\\n1 4 2\\n3 3 3\\n4 3 6\\n') == '8'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\nSample Output:\n2\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\nSample Output:\n2\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n4 4 2\n3\n2\n1\n1\n1\n1\n1\nSample Output:\n3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5 3 2\n1\n2\n1\n3\n1\nSample Output:\n1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n6 3 1\n3\n1\n2\n1\n1\n1\n1\nSample Output:\nimpossible\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n''') == '2'\nassert solution('''\n3 4 5\n1 2 1\n2 3 1\n3 2 1\n2 3 1\n1 1\n''') == 'impossible'\nassert solution('''\n5 3 3\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 1\n''') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\\\n3 1 1\n2\n3\n1 2\n2 3 1\"\"\") == \"2\"\nassert solution(\"\"\"\\\n3 1 1\n2\n3\n1 2\n2 3 1\"\"\") == \"impossible\"\nassert solution(\"\"\"\\\n3 3 2\n1\n2 3 1\n3\n1 2\n2 3\"\"\") == \"impossible\"\nassert solution(\"\"\"\\\n4 4 2\n1\n2 3\n1 2\n2 3\"\"\") == \"2\"\nassert solution(\"\"\"\\\n4 4 2\n1 2\n2 3\n1 2\n2 3\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '2'\nassert solution('1 1') == '2'\nassert solution('3') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1 1\\n2\\n3\\n1 2\\n2 3 1') == 'impossible'\nassert solution('5 1 5\\n2\\n3\\n1 2\\n2 3 1\\n3 3\\n2 2\\n4 1\\n1 2\\n2 3 1\\n4 3\\n3 3\\n2 4\\n3 4\\n4 3\\n4 2\\n3 2\\n1 1\\n1 2\\n1 3\\n2 4\\n1 1\\n2 4\\n4 4\\n2 2\\n4 2\\n2 2\\n3 2\\n1 4\\n4 4\\n2 4\\n3 2\\n4 3\\n3 4\\n3 3\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n1 1\\n3 3\\n2 2\\n2 4\\n3 4\\n1 1\\n1 1\\n1 3\\n3 2\\n2 2\\n3 4\\n1 2\\n1 1\\n2 4\\n1 2\\n2 3\\n3 3\\n2 4\\n4 4\\n1 4\\n3 3\\n2 4\\n3 3\\n2 3\\n4 2\\n1 2\\n1 4\\n2 4\\n1 4\\n1 4\\n2 4\\n1 4\\n2 4\\n2 4\\n2 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n2 4\\n3 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\n1 4\\"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1') == '2'\nassert solution('2') == 'impossible'\nassert solution('3') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('2') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 4 1\n3\n3\n1 2\n2 3 1\n1 1\nSample Input 2:\n3 1 1\n3\n1\n1 2 3\n1\nSample Output 2:\nimpossible\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5 4 1\n1 1\n1\n3\n2 3 1\n1 1\nSample Output 3:\n2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 4 1\n1 1\n1\n2\n1 2 3\n2\n1 1\nSample Output 4:\nimpossible\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1 1\n2\n3\n1 2\n2 3 1\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n1\n2\n3\n2''') == 'impossible'\nassert solution('''3\n1\n1\n2\n3''') == '2'\nassert solution('''2\n2\n3\n1\n1''') == 'impossible'\n"
    },
    {
        "number": 3395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == 'impossible'\nassert solution('2') == 'impossible'\nassert solution('3') == '2'\nassert solution('1 1') == '2'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n500\\n500\\n250\\n500') == '500.00'"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n10\n10 10\n20 10\n15 20\n20 15\n20 20\n15 20\n20 20\n20 20\n15 20\n15 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20 20\n20"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n1\n100 100\n''') == '100.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n300 300\n200 200\n2\n500 500\n''') == \"5.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '500'\nassert solution('3') == '1000'\n\"\"\""
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n0.5 0.5') == '0.5\\n'\nassert solution('2\\n10 20\\n30 30\\n5 5') == '75.00\\n'"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n1\n2 2\n''') == '5.00'\nassert solution('''\n1\n2\n3\n4\n5\n''') == '6.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10 1\\n20 2\\n30 3\\n40 4\\n50 5\\n60 6\\n70 7\\n80 8\\n90 9\\n100 10') == '500.00'\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n250 250\n250 750\n\"\"\") == \"500.00\"\nassert solution(\"\"\"\n1\n200 300\n\"\"\") == \"200.00\"\nassert solution(\"\"\"\n5\n200 100\n300 400\n400 300\n500 500\n500 300\n\"\"\") == \"300.00\"\n"
    },
    {
        "number": 3396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n250 250\n250 750\n''') == '500.00'\nassert solution('''\n2\n100 100\n250 250\n''') == '500.00'\nassert solution('''\n2\n200 200\n300 300\n''') == '500.00'\n'''\nsolution('''\n1\n1\n''') == '1.0'\n'''\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '3'\nassert solution('2 2') == '0'\nassert solution('4') == '8'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '0'\nassert solution('1 2 3') == '0'\nassert solution('1 2 4') == '0'\nassert solution('2 2 1') == '1'\nassert solution('2 2 2') == '1'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '0'\nassert solution('2 2') == '0'\n\n\"\"\"\n\n\nclass MinWaitingTime:\n    def solution(self, N, M, stdin: str):\n        pass\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 2') == '1'\n\"\"\""
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == '0'\nassert solution('10 10') == '30'\nassert solution('100 100') == '300'\nassert solution('1 1') == '1'\nassert solution('10 10') == '90'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n2 100 10\n100 1 10\n''') == '0'\nassert solution('''\n4 1\n3 6 1\n5 6 2\n6 4 2\n''') == '6'\nassert solution('''\n5 1\n3 2 2 2\n1 2 2\n5 2 2\n2 2 2\n''') == '9'\n'''\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '0'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '0'\nassert solution('1 2') == '3'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 3397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n2 100 10\\n100 1 10\") == \"0\"\nassert solution(\"3 3\\n1 100 5\\n2 100 5\\n3 100 5\") == \"4\"\nassert solution(\"4 4\\n1 100 4\\n3 100 4\\n2 100 4\") == \"0\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    80 50 3 2\n    75 5 25 20 50 35\n    50 5 25 35\n    \"\"\") == \"2\"\n\nassert solution(\n    \"\"\"\n    80 50 3 2\n    75 5 25 20 50 35\n    50 5 25 35\n    \"\"\") == \"2\"\n\nassert solution(\n    \"\"\"\n    80 80 3 3\n    70 70 70 70\n    80 80 80 80\n    \"\"\") == \"0\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35') == '2'\nassert solution('80 50 4 3\\n75 5 25 20 50 35\\n50 5 25 35\\n50 7 20 50 35') == '1'\nassert solution('80 50 4 3\\n75 5 25 20 50\\n50 5 25 35') == '0'\nassert solution('10 20\\n10 20\\n20 20') == '0'\nassert solution('60 30\\n40 40\\n30 30\\n40 40') == '1'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([80, 50, 3, 2]) == \"2\"\nassert solution([75, 5, 25, 20, 50, 35]) == \"5\"\nassert solution([50, 5, 25, 35]) == \"4\"\n\n'''\n\nimport numpy as np"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('\\n'.join(['3 3 2',\n                            '1 1 25 20 50 35',\n                            '1 1 25 20 50 35'])) == '2'\nassert solution('\\n'.join(['5 5 3',\n                            '1 5 25 20 50 35',\n                            '1 5 25 20 50 35'])) == '1'\n\nimport sys\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"1 2 3 4 5\") == \"2\"\nassert solution(r\"5 10 20 15 5\") == \"2\"\nassert solution(r\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == \"2\"\nassert solution('''80 50 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n''') == \"1\"\nassert solution('''40 60 50 50 20 50 40 50 60 50 40 40\n60 40 40 60 20 50 40 40 60 40 40 40\n40 40 40 60 20 50 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60 20 50 40 40\n40 40 40 60 20 50 40 40 40 60"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"80 50 3 2\\n75 5 25 20 50 35\\n50 5 25 35\") == \"2\"\nassert solution(\"5 4 10 5\\n2 3 5 10 11\\n6 3 4 11\\n10 6 9 11\\n5 8 10 11\\n11 3 5 10\\n6 2 5 10\\n\") == \"0\""
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('1 2 3 4 5 6 7 8 9') == '1 2 3 4 5 6 7 8 9'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35''') == '2'\nassert solution('''80 50 3 2\n75 5 25 20 50 35\n50 5 25 35\n50 5 25 35\n50 5 25 35''') == '2'\n'''\n\n\nimport math"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 4\n2211\n1112\n1112''') == 'AAAA'\nassert solution('''3 4\n2211\n1112\n1112''') == 'BBBB'\nassert solution('''3 4\n2211\n1112\n1112''') == 'BBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\n...C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    3 4\n    2211\n    1112\n    1112\n''') == 'AAAABBBB'\nassert solution('''\n    3 4\n    2211\n    1112\n    1112\n    ''') == 'AAAABBBB'\nassert solution('''\n    3 4\n    2211\n    1112\n    1111\n    ''') == 'impossible'\nassert solution('''\n    3 4\n    2211\n    1112\n    1111\n    ''') == 'AAAABBBB'\nassert solution('''\n    3 4\n    1111\n    1112\n    1111\n    ''') == 'AAAABBBB'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2211\\n1112\\n1112') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('3 4\\n1112\\n2211\\n1112') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('3 4\\n2211\\n1112\\n2211') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('3 4\\n1112\\n2211\\n1112') == 'AAAA\\n...A\\n....\\n...C'\nassert solution('3 4\\n2211\\n1112\\n2211') == 'AAAA\\n...A\\n....\\n...C'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 2\\n1 2') == \"AAAA\"\nassert solution('3 3\\n1111\\n1111\\n1111') == \"BBBB\"\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4\n2211\n1112\n1112\n''') == 'AAAA'\n\nassert solution('''\n2 4\n2211\n1112\n1112\n''') == 'BBBB'\n\nassert solution('''\n2 4\n2211\n1112\n1112\n''') == '...B'\n\nassert solution('''\n2 4\n2211\n1112\n1112\n''') == '...C'\n\nassert solution('''\n2 4\n2211\n1112\n1112\n''') == 'impossible'\n"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'AAAA'\nassert solution('5 6') == 'AAAA...BBBB'\nassert solution('7 6') == 'AAAA...BBBB....CCCC'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'AAAA\\n...A\\n....\\n'\nassert solution('10 4') == 'AA...\\n..AA\\n.A.A\\nAAABB\\nAAABC\\nAAABBB\\nAAABBC\\nAAABCD\\nAAABBCD\\nAAABCDC\\nAAABBCCD\\nAAABCDCC\\nAAABBCCC\\nAAABCDCCC\\nAAABBCDCCD\\nAAABCDCCCD\\nAAABBCDCCCD\\nAAABBCDCCCDD\\nAAABBCDCCCCD\\nAAABBCDCCCCDD\\nAAABBCDCCCCDC\\nAAABBCDCCCCDCD\\nAAABBCDCCCCDCDA\\nAAABBCDCCCCDCDC\\nAAABBCDCCCCDCDCDA\\nAAABBCDCCCCDCDCDC\\nAAABBCDCCCCDCDCDCDA\\nAAABBCDCCCCDCDCDCDC'\nassert solution('10 2') == 'AAABBB\\nAAABC\\nAAABBC\\nAAABCD\\nAAABBBD\\nAAABCBD\\nAAABCCD\\nAAABBBBD\\nAAABCABC\\nAAABCDCD\\nAAABBBBDD\\nAAABCABCD\\nAAABCDCBD\\nAAABCDCBDD\\nAAABCDCBDBD\\nAAABCDCBDDD\\nAAABCDCBDDC\\nAAABCDCBDDCDA\\nAAABCDCBDDCDCD\\nAAABCDCBDDCDCDDA\\nAAABCDCBDDCDCDA\\nAAABCDCBDDCDCDABA\\nAAABCDCBDDCDCDCDABDC\\nAAABCDCBDDCDCDCDABCD\\nAAABCDCBDDCDCDCDABCDD\\nAAABCDCBDDCDCDCDABCDDC'\nassert solution('1 1') == 'impossible'\nassert solution('1 1 1') == 'impossible'\n\n--Solution by Python--\n\nimport math"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4\n2211\n1112\n1112\n''') == 'AAAA'\n\nassert solution('''\n3 4\n2211\n1112\n1112\n''') == 'BBBB'\n\nassert solution('''\n3 4\n1111\n1111\n1111\n''') == 'BBBB'\n\nassert solution('''\n3 4\n1111\n1111\n1111\n''') == 'BBBB'\n\nassert solution('''\n3 4\n1111\n1111\n1111\n''') == 'BBBB'"
    },
    {
        "number": 3399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\\\n3 4\n2211\n1112\n1112\n''') == \"AAAA\"\nassert solution('''\\\n3 4\n2211\n1112\n1112\n''') == \"....\"\nassert solution('''\\\n3 4\n2211\n1112\n1112\n''') == \"impossible\"\n\n'''\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 3 3\") == \"9\"\nassert solution(\"3 4 1 2 3 2\") == \"13\"\nassert solution(\"4 3 1 2 1\") == \"3\"\nassert solution(\"1 4 1 2 1 3\") == \"5\""
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(None) == '9'"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n''') == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2 2 2') == '3'\nassert solution('4 5 2 4 4 4') == '4'\nassert solution('5 3 2 1 4 3 2') == '4'\nassert solution('7 4 2 3 6 2 2 3') == '4'\nassert solution('8 1 5 2 7 4 3 8') == '7'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 1 5 2\n1 1 1 1 1\n1 2 2 2 2\n2 1 1 1 1\n2 3 1 1 1\n2 2 1 1 1\n3 1 2 1 1\n2 3 1 2 1\n3 4 1 2 1\n2 2 1 1 1\n3 3 1 1 1\n1 2 2 1 1\n3 1 2 2 1\n2 1 1 1 1\n1 2 2 2 1\n3 4 1 2 1\n''') == '16'\nassert solution('''\n5 4 2\n1 1 1 1\n2 1 1 1\n2 1 2 1\n2 2 1 1\n3 1 1 1\n3 3 1 1\n2 2 1 1\n1 1 1 1\n2 1 1 1\n1 3 1 1\n''') == '20'\nassert solution('''\n4 1 3 2\n1 1 1 1\n2 1 1 1\n2 2 1 1\n3 3 1 1\n2 3 1 1\n3 3 1 1\n4 1 3 2\n''') == '13'\nassert solution('''\n2 1 3\n1 2\n3 1\n''') == '3'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n4 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\n'''\n) == '9'\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1 3 3\") == \"9\"\nassert solution(\"4 3 1 2 3 2\") == \"11\"\nassert solution(\"4 3 1 2 1 3\") == \"10\"\nassert solution(\"1 4 1 2 1 3\") == \"8\"\nassert solution(\"2 2 2 2 2\") == \"0\"\n\nN, A, R, T = map(int, stdin.split())\nd = {}\nfor _ in range(T):\n    d[(int(stdin.split()[0]), int(stdin.split()[1]))] = int(stdin.split()[2])"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1 3 3\") == \"9\"\nassert solution(\"3 4 1 2 3 2\") == \"17\"\nassert solution(\"4 3 1 2 1\") == \"11\"\nassert solution(\"1 4 1 2 1 3\") == \"7\"\nassert solution(\"2 5 4 7 2\") == \"11\"\n"
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"9\""
    },
    {
        "number": 3400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2 1\n1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n3 1\n3 2\n1 2\n2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n3 1\n3 2\n1 2\n2 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n3 2\n3 1\n1 2\n2 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2 2 8') == \"20.396078\"\nassert solution('3 4 7') == \"IMPOSSIBLE\"\nassert solution('6 8 8') == \"20.396078\"\nassert solution('6 0 6') == \"30.0\"\nassert solution('6 4 8') == \"25.0\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"6 2 3 8\") == \"IMPOSSIBLE\"\nassert solution(\"4 3 8 8\") == \"15.982489\"\nassert solution(\"6 2 3 5\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 3 1\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\nassert solution('''\n6 2 2\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '21.809426'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n''') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 4\\n6 0 6\\n6 8 8\") == \"20.396078\"\nassert solution(\"1\\n3 4\\n6 0 6\\n6 8 8\") == \"IMPOSSIBLE\"\nassert solution(\"3\\n3 4\\n6 0 6\\n6 8 8\") == \"20.396078\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"1 5\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2 2 8') == '20.396078'\nassert solution('6 2 2 8') == '30.399999'\nassert solution('6 2 4 8') == '10.00000000'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 2 2 8') == '20.396078'\nassert solution('0 0 6') == '20.396078'\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6 2 2 8\") == \"20.396078\"\nassert solution(\"0 0 6\") == \"IMPOSSIBLE\"\nassert solution(\"3 4 7\") == \"IMPOSSIBLE\"\nassert solution(\"0 8 8\") == \"10.121236\"\nassert solution(\"6 8 8\") == \"13.402518\"\n"
    },
    {
        "number": 3401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n\"\"\") == \"20.396078\"\nassert solution(\"\"\"\n5 5 8 8\n3 4 7\n3 4 7\n3 4 7\n3 4 7\n3 4 7\n\"\"\") == \"0.0000000000\"\nassert solution(\"\"\"\n1 1 4 2\n1 2 2 2\n2 1 1 2\n2 1 2 2\n\"\"\") == \"1.0000000000\"\nassert solution(\"\"\"\n5 5 8 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\n\"\"\") == \"1.0000000000\"\nassert solution(\"\"\"\n1 1 2 2\n1 2 2 2\n2 1 2 2\n2 1 2 2\n\"\"\") == \"1.0000000000\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"p\"\n\n\"\"\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\n''') == 'bc'\n\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 7\n''') == 'ca'\n\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 10\n''') == 'cb'\n\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 6\n''') == 'ba'\n\nassert solution('''\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 4\n''') == 'ca'"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"c\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"i\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"v\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == \"c\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"d\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"e\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('abca') == 'b', solution('abca')\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'c', solution('bc cd da dd ee ff gg hh ii jj kk ll mm')\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'c', solution('nn oo pp qq rr ss tt uu vv ww xx yy zz')\nassert solution('4') == 'b', solution('4')\n\n\"\"\"\n\n\nimport itertools\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"b\"\nassert solution(\"bc cd da dd ee ff gg hh ii jj kk ll mm\") == \"c\"\nassert solution(\"nn oo pp qq rr ss tt uu vv ww xx yy zz\") == \"d\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"z\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n2\") == \"c\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n5\") == \"d\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n10\") == \"e\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n11\") == \"o\"\nassert solution(\"abca\\nbc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1\\n5\\n7\") == \"p\"\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abca') == 'c'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm\\nnn oo pp qq rr ss tt uu vv ww xx yy zz\\n1 8') == 'c'\n"
    },
    {
        "number": 3402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abca') == 'b'\nassert solution('bc cd da dd ee ff gg hh ii jj kk ll mm') == 'b'\nassert solution('nn oo pp qq rr ss tt uu vv ww xx yy zz') == 'n'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'z'\nassert solution('ca') == 'c'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi\\n\") == \"12\\n10\\n16\\n7\\n\"\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '12 10 16 7'"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '12'\n\nassert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '10'\n\nassert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '16'\n\nassert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n''') == '7'"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\nrobi\nhobit\nhobotnica\nrakija''') == '12'\n\nassert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi''') == '10'\n\nassert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi''') == '16'\n\nassert solution('''5\nhobotnica\nrobot\nhobi\nhobit\nrobi''') == '7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"robi\\nhobi\\nhobi\\nhobi\\nrobi\") == \"12\"\nassert solution(\"rakija\\nhobit\\nhobit\\nhobi\\nhobit\\nrobi\") == \"7\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hobotnica') == '12'\nassert solution('robot') == '10'\nassert solution('hobi') == '16'\nassert solution('hobit') == '7'\nassert solution('robi') == '7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('5') == '4'\nassert solution('10') == '10'\nassert solution('1') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\nhobotnica\\nrobot\\nhobi\\nhobit\\nrobi') == '12'\n\"\"\""
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '12'\nassert solution('1') == '10'\nassert solution('2') == '16'\nassert solution('3') == '7'\n"
    },
    {
        "number": 3403,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '12'\nassert solution('4') == '7'\nassert solution('3') == '10'\nassert solution('1') == '16'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n14 4\nJQ IRKEYFG EXQ\n\"\"\") == \"THIS IS A TEST\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '14 4\\nJQ IRKEYFG EXQ\\n'\n    ) == 'THIS IS A TEST\\n'\n\nassert solution(\n    '6\\nA B C D E F\\n'\n    ) == 'F\\n'\n\nassert solution(\n    '8\\nA B C D E F G\\n'\n    ) == 'G\\n'\n\nassert solution(\n    '4\\nAB BC CD\\n'\n    ) == 'ABC\\n'\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\nassert solution(\"10 10\\nA B C\") == \"A B C\"\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\nJQ IRKEYFG EXQ''') == 'THIS IS A TEST'\nassert solution('''5 4\nJQ IRKEYFG EXQ''') == 'THIS IS A TEST'\n\nassert solution('''7 7\nJQ IRKEYFG EXQ''') == 'THIS IS A TEST'\n\nassert solution('''5 4\nABCDEFGH''') == 'ABCDGH'\n\nassert solution('''4 4\nJQ IRKEYFG EXQ''') == 'THIS IS A TEST'"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4\\n\"\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\"\n\nassert solution(\n    \"5 1\\n\"\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\"\n\nassert solution(\n    \"1 5\\n\"\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\"\n\nassert solution(\n    \"6 5\\n\"\n    \"JQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\"\n\"\"\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"14 4\\nJQ IRKEYFG EXQ\") == \"THIS IS A TEST\"\nassert solution(\"4 3\\nZP JWKRZP\") == \"SHIFT\"\nassert solution(\"5 4\\nABD AGD IBD\") == \"SHIFT\"\nassert solution(\"7 4\\nRZC CRZT GCRR\") == \"SHIFT\"\nassert solution(\"16 4\\n
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 4\\nJQ IRKEYFG EXQ') == 'THIS IS A TEST'\nassert solution('2 1\\nA Q') == 'Q'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"14 4\\nJQ IRKEYFG EXQ\"\n) == \"THIS IS A TEST\"\n\nassert solution(\n    \"12 5\\nFHRBXZVJGQSDARQA\n\") == \"A\"\n\nassert solution(\n    \"30 5\\nSVZTQVCTQPQOGZQKHDCU\n\") == \"TEST\"\n\nassert solution(\n    \"11 7\\nKGDTKHATMZESOINQR\n\") == \"INQ\"\n\nassert solution(\n    \"13 10\\nQJRQQRBXKPPSHTKSC\n\") == \"G\""
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7 3\nIH IH IH IH\n''') == 'THISISATEST'\nassert solution('''\n4 6\nEXQ\n''') == 'FITSSAMGTST'\nassert solution('''\n6 4\nAQRQHQZJX\n''') == 'ISTHASOME'\nassert solution('''\n6 9\nIXX ZZ X X X\n''') == 'EXXXTHXAX'\nassert solution('''\n6 3\nIEH IH IH IH\n''') == 'THISISA'\n"
    },
    {
        "number": 3404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n14 4\nJQ IRKEYFG EXQ\n''') == 'THIS IS A TEST'\nassert solution('''\n2 6\nF G\n''') == 'A B C D E F G'\nassert solution('''\n14 4\nS L\n''') == 'A D E F G'\nassert solution('''\n10 3\nF G H I J K\n''') == 'A B C D E F G'\nassert solution('''\n100 99\nF G H I J K L M N O P Q R S T U V W X Y Z\n''') == 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2.6') == '135'\nassert solution('7.6') == '135135'\nassert solution('3.6') == '135135135'\nassert solution('2.0') == '2'\nassert solution('1.8') == 'No solution'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2.6') == '135'\nassert solution('1.7') == '0'\nassert solution('2.1') == '2'\nassert solution('1.8') == '0'\nassert solution('2.9') == '0'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2.6') == '135', \"example 1\"\nassert solution('1.6') == '135', \"example 2\"\nassert solution('1.0006') == '1353', \"example 3\"\nassert solution('1.001') == '1350', \"example 4\"\nassert solution('1.00') == '1350', \"example 5\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.6') == '135\\n270\\n135135\\n270270\\n'\nassert solution('0.25') == '0.25\\n0.5\\n1\\n1.25\\n1.75'\nassert solution('0.5') == '0.5\\n1\\n1.5'\nassert solution('3') == '3\\n3\\n3\\n3\\n3'\nassert solution('4.5') == '4.5\\n4.5\\n4.5\\n4.5\\n4.5'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2.6\") == \"135\"\nassert solution(\"1.61\") == \"135\"\nassert solution(\"2.1\") == \"135\"\nassert solution(\"1.9\") == \"135\"\nassert solution(\"1.99\") == \"135\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4.3\n''') == \"No solution\"\nassert solution('''\n2.6\n''') == \"135\"\nassert solution('''\n0.2\n''') == \"No solution\"\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2.6') == '135'\nassert solution('0.7') == '135135'\nassert solution('0.5') == '135135135135'\nassert solution('0.8') == 'No solution'"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.6') == '135'\nassert solution('2.675') == '270'\nassert solution('1.35') == '135'\nassert solution('35353535') == '270270'\nassert solution('0.9') == '0'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1.234') == '1'\nassert solution('1.567') == '135'\nassert solution('2.0') == '135135'\nassert solution('2.00') == '135135'\nassert solution('2.000') == '135135'\n"
    },
    {
        "number": 3405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2.6') == '135'\nassert solution('4') == '1'\nassert solution('0.5') == '0'\nassert solution('0.1') == '0'\nassert solution('0.001') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\n\n__EXIT__ = __HALT__\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n1\n0 1\n2\n1 3\n''') == '0'\nassert solution('''\n3\n0 1\n2 3\n''') == '0'\nassert solution('''\n1\n0 1\n3 2\n''') == '1'\n'''\n\nN = int(input())\nnums = list(map(int, input().split()))\nS = int(input())\nnums2 = list(map(int, input().split()))\n\nprint(nums[0]*nums2[0] + nums[1]*nums2[1] + nums[2]*nums2[2] + nums[3]*nums2[3])\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 7\\n4 5\\n6 5\\n9') == '1'\nassert solution('2\\n1 4\\n1 6\\n2 3\\n2 5\\n3 5\\n3 6\\n4 8\\n5 4\\n6 3\\n') == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1\n1\n5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\n\nassert solution('''\n1\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n\nassert solution('''\n1\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '0'\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\n\"\"\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\n''') == '4'\nassert solution('''\n1\n0 2\n4 2\n4 1\n2 3\n3 2\n4 4\n6 1\n''') == '0'\n''')\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"4\"\n"
    },
    {
        "number": 3406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"5\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    3\n    1 2\n    1 3\n    1 4\n    \"\"\"\n) == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n\nassert solution(\n    \"\"\"\n    2\n    1 2\n    1 3\n    1 4\n    \"\"\"\n) == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n\nassert solution(\n    \"\"\"\n    3\n    1 2\n    1 3\n    1 4\n    \"\"\"\n) == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n''') == '-1.0000000 -1.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('3\\n1 2\\n1 4\\n2 3\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('2\\n1 2\\n1 4\\n2 3\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('8\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n1.0000000 1.0000000\\n1.0000000 -1.0000000\\n-1.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000\\n0.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2\n1 3\n1 4\n1 5\n''') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n'''"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\nassert solution(\"3\\n1 2\\n1 3\\n1 4\\n1 5\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2') == '0.0000000 0.0000000'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0.0000000 0.0000000'\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n1 4\\n1 5\\n\") == \"0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\"\n"
    },
    {
        "number": 3407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n-1.0000000 0.0000000\\n0.0000000 1.0000000\\n0.0000000 -1.0000000\\n-1.0000000 1.0000000'\nassert solution('1\\n1\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000'\nassert solution('2\\n1\\n3\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000'\nassert solution('3\\n1\\n3\\n') == '0.0000000 0.0000000\\n1.0000000 0.0000000\\n0.0000000 1.0000000'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 4 4 4\") == \"3\"\nassert solution(\"5 7 7 7 6 6 5 5\") == \"7\"\nassert solution(\"1 2 3 5 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"1\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    4\n    aab\n    a*a\n    a**\n    abb\n    aba\n    *\n    ''') == '1\\n2\\n3\\n4'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a*\") == \"a*\"\nassert solution(\"a*a\") == \"a*a\"\nassert solution(\"*a\") == \"*a\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\\n1\\n1\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == '2\\n1\\n1'\nassert solution('4 4') == '1\\n0\\n0\\n0'\nassert solution('5 5') == '1\\n0\\n0\\n0\\n0'\n\n\"\"\"\n\n\"\"\"\n\nThe solution is not possible.\n\n\"\"\""
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2\\n1\\n1\\n'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"5 5\") == \"2\"\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\naaa\\nabc\\naba') == '2\\n1\\n1\\n'\nassert solution('4 4\\naba*\\nabc*\\naba*') == '2\\n2\\n1\\n'\nassert solution('4 4\\naba*\\nabc*\\naba*\\naba*') == '2\\n2\\n2\\n1\\n'\nassert solution('3 2\\naaa\\nabc\\naaa') == '1\\n0\\n'\nassert solution('3 2\\naaa\\na*b\\naaa') == '1\\n0\\n'\n"
    },
    {
        "number": 3408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\naaaa\na*a\naaa*\n*aaa\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\naaa\nabc\naba\na*a\naaa*\n*aaa\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\naaa\naaa\na*a\naaa*\n*aaa\n*aaa\na*a\na*a\na*a\na*a\na*a\na*a\naaa\na*a\naaa\naaa\na*a\na*a\n*aaa\naaa\naaa\na*a\na*a\na*a\naaa\n\"\"\") == \"3\"\n\"\"\"\nInput\n1\n1\n3\naaa\naaa\naaa\nbbb\n\nOutput\n3\n\n\"\"\""
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\n    \"4 2\\nXO\\nOX\\nXO\\nOX\\nXO\\nOO\\nXO\\nOO\\n\") == \"0\"\nassert solution(\n    \"3 2\\nXX\\nXO\\nOX\\n\") == \"0\"\nassert solution(\n    \"4 2\\nXO\\nXO\\nXO\\nXO\\nOX\\nOO\\nOO\\n\") == \"1\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 2\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nOX\\nOX\\nOX\\nXO\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nXO\\nOX\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nXO\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\n\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nXO\\nX"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"0\"\nassert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\") == \"1\""
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2\nXO\nOX\nXO\nOX\nOX\nXX''') == '1'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO') == '1'\nassert solution('4 3\\nXO\\nXO\\nOX\\nXO\\nXO\\nOX\\nXO\\nOX\\nOX\\nXX\\nOO') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3 3\nOX\nXO\nXO\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n4 4\nXOX\nXOO\nXXO\nXOO\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2 2\nOX\nOX''') == '1'\nassert solution('''2 2\nXO\nOX''') == '0'\nassert solution('''2 2\nOX\nOX\nOX''') == '1'\n'''"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nXO\\nXO') == '1'\nassert solution('3\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nOX\\nXO\\nXO\\nXO\\nXO\\nXO') == '0'\n"
    },
    {
        "number": 3409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nXO\\nOX\\nXO\\nOX\\nOX\\nOO\\nXO\\nOO\\n\") == \"1\"\nassert solution(\"4 3\\nXXO\\nOXX\\nOXX\\nXXO\\nXXO\\n\") == \"1\"\nassert solution(\"4 3\\nOXO\\nOXO\\nOXO\\nOXO\\nOXO\\n\") == \"0\"\nassert solution(\"4 3\\nXXX\\nOXX\\nOXX\\nXXX\\nXXX\\n\") == \"0\"\nassert solution(\"4 3\\nXXX\\nXXX\\nXXX\\nXXX\\nXXX\\n\") == \"0\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4\\n2 0\\n0 2\\n-2 0\\n0 -2\"\n) == \"16\"\n\nassert solution(\n    \"5\\n0 0\\n0 0\\n0 0\\n0 0\\n\"\n) == \"0\"\n\nassert solution(\n    \"3\\n1 1\\n0 0\\n1 0\"\n) == \"1\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n2 0\n0 2\n-2 0\n0 -2\nSample Input 2:\n8\n-5 0\n0 -5\n0 0\n0 0\n0 -2\n0 2\n0 -2\nSample Output 2:\n11\n''') == '16'\nassert solution('''5\n0 0\n0 -5\n0 2\n-2 0\n0 -2\n''') == '11'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n0\n0\n-2\n0\n-2\nSample Input 2:\n7\n2\n1\n3\n4\n6\n7\n5\n0\nSample Output 2:\n30\n''') == '16'\nassert solution('''4\n2\n0\n2\n0\nSample Input 3:\n2\n2\n0\n0\nSample Output 3:\n4\n''') == '4'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n0\n0\n0''') == '16'\nassert solution('''3\n1\n2\n3\nSample Input:\n9\n0\n0\n0\n0\n0\n0\n0\n0\nSample Output:\n11\n''') == '11'\nassert solution('''4\n1\n0\n0\n0''') == '12'\nassert solution('''10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0''') == '0'\n\nstdin = '''3\n1\n0\n0\nSample Output:\n11\n'''\nassert solution(stdin) == '11'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '2'\nassert solution('8') == '3'\nassert solution('10') == '4'\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n2 0\\n0 2\\n-2 0\\n0 -2\\n') == '16'"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 0\") == \"0\"\nassert solution(\"0 2\") == \"2\"\nassert solution(\"-2 0\") == \"0\"\nassert solution(\"0 -2\") == \"2\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 0\\n0 2\") == \"16\"\nassert solution(\"-2 0\\n0 -2\") == \"16\"\n"
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 3410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n2 0\\n0 2\\n-2 0\\n0 -2') == \"16\"\nassert solution('10\\n0 0\\n0 -1\\n-1 -1') == \"1\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\nassert solution('''\n4 20 50\n-2 -2 -2 -2\n''') == '40'\nassert solution('''\n5 100 20 50\n-2 -1 -1 -1\n''') == '34'\nassert solution('''\n4 100 50\n-2 2 2 2\n''') == '40'\nassert solution('''\n3 3 3 3\n1 1 1 1\n''') == '7'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 10 50\\n\"\n    \"8 8 2 -2\"\n    ) == \"80\"\n\"\"\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('7') == '3'\n\"\"\""
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 3') == '1'\nassert solution('2 1 1') == '1'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == \"80\"\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4 5\n3\n6\n-3\n2\n''') == '80'\n\nassert solution('''\n2 5 10\n3\n10\n2\n''') == '600'\n\nassert solution('''\n2 5 10\n3\n3\n-1\n2\n''') == '210'\n\nassert solution('''\n2 5 10\n3\n6\n-3\n2\n''') == '210'\n\nassert solution('''\n2 5 10\n3\n3\n-1\n2\n''') == '210'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 10 50\n8 8 2 -2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 10 50') == '80'\nassert solution('4 8 2 -2') == '144'\n"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\n\nassert solution('''\n4 10 50\n2 2 3 -2\n''') == '100'\n\nassert solution('''\n3 10 20\n-1 2 3\n''') == '50'\n\nassert solution('''\n4 10 50\n8 8 2 -2\n''') == '80'\n\nassert solution('''\n4 5 100\n100 100 -1 1\n''') == '75'"
    },
    {
        "number": 3411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4\n8 8 2 -2\n''') == '80'\n\nassert solution('''5\n10 10 10 10 10\n''') == '90'\n\nassert solution('''10\n20 20 20 20 20\n''') == '100'\n\nassert solution('''10\n10 10 10 10 10\n''') == '100'\n\nassert solution('''4\n10 20 20 20\n''') == '40'"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 8') == '0.375'\n\nassert solution('0 0 10 10') == '1.000000000'\n\nassert solution('5 1') == '5.000000000'\n\nassert solution('5 9') == '4.0000000000'\n\nassert solution('3') == '2.0000000000'"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n\"\"\") == \"3.000000000\"\nassert solution(\"\"\"\n5 8\n1 1\n5 1\n2 2\n3 2\n\"\"\") == \"2.000000000\"\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '2.000000000000001'"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n6 7') == '2.639682539'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n10 2') == '2.563811084'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2') == '4.4999999999999996'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '4.6000000000000037'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.000000000'\nassert solution('1 0\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '1.000000000'\nassert solution('1 0\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.000000000'\nassert solution('1 0\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 8') == '2.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '3.000000000'\nassert solution('1 8\\n0 0 10 10\\n5 1\\n5 9\\n3\\n5 8\\n2 2\\n9 6') == '4.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 8') == '3.000000000'\nassert solution('0 0 10 10') == '3.000000000'\nassert solution('5 1') == '0.000000000'\nassert solution('5 9') == '0.000000000'\nassert solution('3') == '0.000000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 8') == '1.00000'\nassert solution('0 0 10 10') == '1.0'\nassert solution('5 1') == '0.50000'\nassert solution('5 9') == '4.50000'\nassert solution('3') == '1.000000'\n"
    },
    {
        "number": 3412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.000000000'\nassert solution('''\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n1 1\n9 6\n''') == '3.000000000'\nassert solution('''\n1 2\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '3.0'\nassert solution('''\n1 2\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '0.0'\nassert solution('''\n5 5\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\n''') == '5.000000000'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 7\n0 0 1 1 0 1 1\n1 0 0 0 0 0\n1 1 0 0 0 1\n1 0 0 0 1 1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n4 7\n0 0 1 1 0 1 1\n1 0 0 0 0 0\n1 1 0 0 0 1\n1 0 0 0 1 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n4 7\n1 1 1 1 1 1 1\n1 0 0 0 0 0\n1 1 0 0 0 1\n1 0 0 0 1 1\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n4 7\n1 1 1 1 1 1 1\n0 0 0 0 0 0\n1 1 0 0 0 1\n1 0 0 0 1 1\n\"\"\") == \"1\""
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '1'"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"1\", \"First\"\nassert solution(\"2\") == \"1\", \"Second\"\nassert solution(\"5 3\") == \"3\", \"Third\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 3\\n0 1 0 0\\n1 2') == '1'\nassert solution('4 3\\n0 0 0 1\\n1 2') == '1'\nassert solution('4 3\\n0 0 0 1\\n1 2\\n1 3\\n1 4') == '1'\nassert solution('4 3\\n0 0 0 1\\n1 2\\n2 3\\n3 4') == '1'\nassert solution('5 3\\n0 0 0 0\\n0 0 0 1\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3\", \"edge case 1\"\nassert solution(\"2 3\") == \"3\", \"edge case 2\"\nassert solution(\"3 4\") == \"3\", \"edge case 3\"\nassert solution(\"4 5\") == \"2\", \"edge case 4\"\n\nassert solution(\"3 5 3 2 5 2 2 3 2 2 2 2 2 3\") == \"6\", \"edge case 5\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5\n0 1 0 0\n1 2\n2 3\n2 4\n3 4\n0 0 1 1\n1 2\n1 2\n1 3\n''') == '1'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1 2\\n2 3\\n2 4\\n') == '1'\n\n'''\n\nfrom itertools import product"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\n''') == '1', 'First'\nassert solution('''\n5 1\n0 0\n1 0\n0 1\n0 2\n''') == '2', 'Second'\nassert solution('''\n3 3\n0 1 0 0\n0 1\n0 2\n''') == '1', 'Third'\nassert solution('''\n2 2\n0 0\n0 1\n''') == '1', 'Fourth'\n"
    },
    {
        "number": 3413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5\\n1 0 0 0\\n2 3\\n3 4\\n4 5\\n') == '1'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '6.283185'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n\"\n) == \"6.283185\"\nassert solution(\n    \"1\\n1\\n0\\n\"\n) == \"0.0\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n''') == '6.283185'\nassert solution('''\n10 5\n0 1\n0 3\n1 2\n1 4\n2 2\n2 5\n3 4\n3 6\n4 5\n4 7\n5 6\n5 8\n6 7\n6 9\n7 7\n7 10\n8 9\n8 11\n9 10\n9 12\n10 11\n10 13\n''') == '1.121320'\nassert solution('''\n20 7\n0 0\n1 1\n1 2\n2 0\n2 1\n3 0\n3 1\n3 2\n3 3\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n5 13\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n7 9\n7 10\n7 11\n7 12\n7 13\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n8 8\n8 9\n8 10\n8 11\n8 12\n8 13\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n9 9\n9 10\n9 11\n9 12\n9 13\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n10 10\n10 11\n10 12\n10 13\n11 1\n11 2\n11 3\n11 4\n11 5\n11 6\n11 7\n11 8\n11 9\n11 10\n11 11\n11 12\n11 13\n12 1\n12 2\n12 3\n12 4\n12 5\n12 6\n12 7\n12 8\n12 9\n12 10\n12 11\n12 12\n12 13\n13 1\n13 2\n13 3\n13 4\n13 5\n13 6\n13 7\n13 8\n13 9\n13 10\n13 11\n13 12\n13 13\n''') == '0.4359485979631113'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('3 4\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2\\n2 0\\n2 1\\n') == '0.7853981633974483'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n\"\"\") == \"6.283185\"\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '6.283185'\nassert solution('10 10') == '1.570796'\nassert solution('100 100') == '3.14159265'\nassert solution('0 0 0 0 0 1') == '0.0'\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n0 0\\n0 1\\n1 0\\n0 1\\n0 2\\n1 2') == '6.283185'\nassert solution('4 4\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n3 2\\n') == '2.09439535897435897462679480839895612'\n\nprint(solution(input()))\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n3 2\n4 4''') == '6.283185'\nassert solution('''9\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\n2 1\n3 2\n4 2\n5 2\n6 1\n6 2\n5 3\n4 3\n3 2\n2 1\n1 0\n1 0\n''') == '1.5707963267948966'\nprint('all test cases passed')"
    },
    {
        "number": 3414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '6.283185'\nassert solution('4 4') == '6.283185'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n2\n3\n''') == '1 2 3'\nassert solution('''\n5\n2 4 6 3 1\n''') == '1 2 4 5 6 3 1'\nassert solution('''\n6\n1\n2\n3\n4\n5\n6\n''') == '1 2 3 4 5 6 1 2 3'\nassert solution('''\n8\n1 2 4 6 5 3 7 8\n''') == '1 2 4 5 3 7 8 6 2 1'\nassert solution('''\n1\n''') == '1'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '1 2 3'\nassert solution(\"5\") == '1 2 3 4 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n2\n''') == '1 2 3'\nassert solution('''\n3\n2 1 5\n''') == '1 2 1 2 3 5'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1 2 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 2 3'\nassert solution('8') == '1 2 3 4 5 6 7 8'\nassert solution('12') == '1 2 3 4 5 6 7 8 9 10 11 12'\nassert solution('15') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1 2'"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1 2 3\"\nassert solution() == \"1 2 1 3\"\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1 2'\nassert solution('5') == '1 3 5 2 4'\n\"\"\"\n\n\nclass Node:\n    def __init__(self, data, left=None, right=None):\n        self.data = data\n        self.left = left\n        self.right = right\n"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1 2'"
    },
    {
        "number": 3415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 2 3\n''') == '1 2 3'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"4 4\") == \"1 2 3 4\"\nassert solution(\"3 4\") == \"1 2 3 4\"\nassert solution(\"10 10\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"3 3\") == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4 5\\n6 7') == '2'\nassert solution('5 4\\n3 2\\n1 5\\n4 7\\n6 8') == '2 3 4 5 6 7'\nassert solution('3 2\\n1 2\\n2 3') == '3'\nassert solution('3 3\\n1 2\\n2 2\\n2 3') == '2'\nassert solution('10 11\\n12 13\\n14 15\\n16 17\\n18 19\\n20 21\\n22 23\\n24 25\\n26 27\\n28 29\\n30 31\\n32 33\\n34 35\\n36 37\\n38 39\\n40 41\\n42 43\\n44 45\\n46 47\\n48 49') == '10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''\n10 10\n1 2\n1 3\n1 4\n2 4\n2 5\n3 6\n3 7\n4 7\n4 8\n5 9\n6 10\n7 11\n7 12\n8 13\n8 14\n9 15\n9 16\n''') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 2\n1 2\n1 3\n2 4\n3 4''') == '1 2 3 4'"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 4\\n3 4') == '1 2 3 4'\n\n------Task------\nGiven the list of routes, a list of destinations, and a list of customers, find the shortest route to visit each destination, and return the total travel time for the route.\n\nEach route will be a list of the cities (starting from the city of departure, and ending at the city of arrival), and each destination will be a city of the list.\n\nEach customer will be a city of the list.\n\nEach city will have a list of customer indexes, where each index points to a city it is connected to.\n\nAll the routes will be connected, so you can perform a breadth-first search and find the shortest path.\n\nYou should return the total travel time in minutes.\n\nInput:\nThe first line contains a number n (1 <= n <= 10), the number of cities.\n\nThe second line contains n space-separated integers, each an index to the list, where the city with that index is the city being visited.\n\nThe third line contains n space-separated integers, where each integer is an index to the list, where the city with that index is the destination of the current trip.\n\nThe fourth line contains n space-separated integers, where each integer is an index to the list, where the city with that index is the customer.\n\nThe fifth line contains n space-separated integers, where each integer is an index to the list, where the city with that index is the depot.\n\nA depot is a city which does not have any city with which it can be connected.\n\n-----Output-----\nReturn a single integer, the total travel time in minutes.\n\nSample Input:\n4\n1\n2\n3\n1\n2\nSample Output:\n110\n------Hint------\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or DFS)\n-----\nDFS(or D"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1\n2 3\n2 1\n3 1\n''') == '1 2 3'\n\nassert solution('''4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'\n\nassert solution('''5 3\n3 4\n3 4\n2 3\n1 2\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution('''4 4\n1 2\n1 3\n2 4\n3 4\n''') == '1 2 3 4'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '1'\nassert solution('1 5') == '4'\nassert solution('100 2') == '1'\nassert solution('5 1') == '5'\nassert solution('4 1') == '1'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 2\\n') == '1'\nassert solution('2 5\\n1 2\\n1 3\\n1 4\\n1 5\\n') == '5'"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 1\n1 2\n2 3\n1 3\n3\n''') == '1'\nassert solution('''\n7\n1 4\n2 4\n3 4\n4 5\n4 6\n4 7\n4 8\n5\n''') == '3'\nprint('Solution:')\nprint(solution(input()))\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3 2\n1 2\n1 3\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n1 2\n1 3\"\"\") == \"2\"\nassert solution(\"\"\"3 2\n1 2\n2 3\"\"\") == \"1\"\nassert solution(\"\"\"3 3\n1 2\n1 3\"\"\") == \"2\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2\\n1 3') == '1'\nassert solution('3 2\\n2 1\\n3 1') == '2'\nassert solution('3 3\\n1 2\\n1 3\\n2 3') == '1'\nassert solution('5 5\\n1 2\\n1 3\\n3 2\\n2 4\\n2 5\\n4 3\\n3 5\\n3 6\\n6 5\\n5 4\\n4 6\\n5 6') == '3'\nassert solution('10 10\\n1 2\\n1 3\\n3 2\\n2 4\\n4 5\\n5 4\\n5 6\\n6 5\\n7 8\\n8 7\\n7 9\\n9 8\\n10 6\\n6 10\\n9 10\\n10 5\\n5 9') == '3'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n1 2\") == \"1\"\nassert solution(\"1 3\\n1 2\\n3 2\") == \"1\"\nassert solution(\"5 5\\n1 2\\n3 4\\n4 5\\n2 4\\n5 2\\n2 3\\n4 3\") == \"3\"\nassert solution(\"5 5\\n1 2\\n3 4\\n4 5\\n2 4\\n5 2\\n2 3\\n4 3\") == \"4\"\nassert solution(\"5 5\\n1 2\\n3 4\\n4 5\\n2 4\\n5 2\\n2 3\\n4 3\") == \"3\"\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n4 1\n''') == '1'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 1\n''') == '2'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n''') == '2'\n'''"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 2\") == \"1\"\nassert solution(\"4 4\\n1 3\\n2 4\\n3 4\") == \"4\""
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 2') == '1'\nassert solution('5 3\\n1 2\\n2 3\\n3 4\\n4 5\\n3 1') == '4'\n"
    },
    {
        "number": 3417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2') == '1'\nassert solution('3 2\\n1 2\\n1 3') == '2'\nassert solution('7 2\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3') == '3'\nassert solution('5 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6') == '5'\nassert solution('10 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10') == '10'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('6') == '12'\nassert solution('10') == '2222'\nassert solution('13') == '1111'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '45'\nassert solution('10') == '3120'\n\nassert solution('12') == '14657'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(__import__('sys').stdin.read()) == '45'\nprint(solution())\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '8'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '45'\nassert solution('4') == '4'\nassert solution('1000') == '40000'\n\"\"\""
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"45\"\nassert solution(\"5\") == \"6579\"\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"45\"\nassert solution(\"10\") == \"510\"\nassert solution(\"100\") == \"3740\"\nassert solution(\"1000\") == \"61303792\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '0'\nassert solution('10') == '2'\nassert solution('10') == '10'"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''10\n10\n20\n10\n30\n30\n10\n50\n20\n30\n10\n20\n30\n10\n20\n30\n20\n30\n10''') == '45'\nassert solution('''1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010\n1010''') == '45'\nassert solution('''\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10''') == '210'\nassert solution('''\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n110\n120\n130\n140\n150\n160\n170\n180\n190\n200\n210\n220\n230\n240\n250\n260\n270\n280\n290\n300\n310\n320\n330\n340\n350\n360\n370\n380\n390\n400\n410\n420\n430\n440\n450\n460\n470\n480\n490''') == '255'\nassert solution('''\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n110\n120\n130\n140\n150\n160\n170\n180\n190\n200\n210\n220\n230\n240\n250\n260\n270\n280\n290\n300\n310\n320\n330\n340\n350\n360\n370\n380\n390\n400\n410\n420\n430\n440\n450\n460\n470\n480\n490''') == '49'\n"
    },
    {
        "number": 3418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '45'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n\nimport sys\nimport os\nfrom decimal import *\n\nsys.setrecursionlimit(10 ** 6)\n\ngetcontext().prec = 1000\n\ninput = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 1 3\") == \"2\"\nassert solution(\"3 4 3\") == \"2\""
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('10 2 4 8 5') == '6'\nprint('Congratulations! All test cases passed!')"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '4'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '5'"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(inp) == \"4\""
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 20 20\\n7 11 9 12 2\\n') == '4'\nassert solution('1000 1 1\\n1 1000000000\\n2 1000000000\\n3 1000000000\\n4 1000000000\\n') == '0'\n\n'''"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '5'\n\nINPUT:\n5 10 20\n7 1 3 5 2\nOUTPUT:\n5\n'''\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 20 20\n7 11 9 12 2\n''') == '4'\nassert solution('''1 100 1\n1\n''') == '0'\nassert solution('''1 5 1\n1\n''') == '0'\nassert solution('''5 100 100 100\n100 100 100 100\n''') == '1'\nassert solution('''1 100 100 100\n0 0 0 0\n0 1 0 0\n0 1 1 1\n0 0 0 0\n0 0 0 0\n''') == '2'\n'''"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 20 20') == '4'\nassert solution('7 11 9 12 2') == '3'\n"
    },
    {
        "number": 3419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\nassert solution('''\n2 2\ncharlie 1 lordoftherings\nkenny 1 harrypotter1\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '1'\nassert solution('''\n3 3\nlaura 1 harrypotter1\njenny 1 harrypotter1\nkenny 1 harrypotter1\n''') == '1'\nassert solution('''\n3 2\nlaura 1 harrypotter1\njenny 1 harrypotter1\nkenny 1 harrypotter1\n''') == '2'\nassert solution('''\n1 1\nkenny 1 harrypotter1\n''') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '2'\nassert solution('2 2') == '2'\nassert solution('2 1') == '2'\nassert solution('2 2') == '4'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n\nassert solution('''\n5 2\nkennedy 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '4'\n\nassert solution('''\n1 1\nbob\n''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\n''') == '2'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"2\"\nassert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"1\"\nassert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"0\""
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 2') == '1'\nassert solution('2 3') == '0'\nassert solution('1 3') == '1'\nassert solution('3 1') == '0'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\") == \"2\"\n\nassert solution(\"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\\njenny 2 harrypotter1\\nlaura 1 harrypotter1\") == \"1\""
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\njane 1 harrypotter1\nlaura 1 harrypotter1\njane 1 harrypotter2\nlaura 1 harrypotter2\njane 1 harrypotter3\nlaura 1 harrypotter3\njane 1 harrypotter4\nlaura 1 harrypotter4\njane 2 harrypotter5\nlaura 2 harrypotter5\njane 2 harrypotter6\nlaura 2 harrypotter6\n''') == '6'\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 lordoftherings\"\n    ) == \"2\"\nassert solution(\n    \"3 2\\nkenny 1 harrypotter1\\ncharlie 1 lordoftherings\\njenny 1 harrypotter1\\nlaura 1 harrypotter1\\nharrypotter 2 harrypotter2\"\n    ) == \"1\"\n"
    },
    {
        "number": 3420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '2'\nassert solution('kenny 1 harrypotter1') == '1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n01') == '1 2'\nassert solution('3\\n001010') == '1 3'\nassert solution('4\\n010111') == '1 2'\nassert solution('5\\n010111') == '1 5'\nassert solution('6\\n010111') == '1 6'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n0\n00\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n1\n1\n1\n0\n1\n0\n1\n0\n1\n0\n0\n0\n1\n1\n0\n0\n1\n1\n1\n1\n1\n0\n0\n0\n0\n1\n1\n0\n1\n0\n1\n0\n0\n0\n1\n0\n1\n1\n0\n0\n1\n0\n1\n1\n1\n1\n0\n1\n0\n1\n1\n0\n1\n0\n1\n1\n1\n0\n1\n1\n1\n1\n1\n1\n1\n0\n1\n0\n1\n0\n0\n1\n0\n1\n0\n1\n0\n0\n0\n0\n1\n0\n1\n1\n0\n1\n0\n0\n0\n1\n0\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n1\n0\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n1\n1\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n1\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n1\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n0\n1\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n01\n0''') == '1 2'\nassert solution('''\n01\n1''') == '1 1'\nassert solution('''\n01\n1\n1''') == '2 2'\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n01') == '1 2'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == \"2 1\"\nassert solution('1 0 0 1 1 1 0 1 1') == \"3 1\"\nassert solution('0 0 1 1 0 0 1 1 0 1') == \"3 1\"\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n11\n0\n0\n0\n0\n1''') == '1 2'"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n0 1\n0 0\n1 0\n1 1\nSample Input 2:\n2\n01\n01\nSample Output:\n2 1"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1 1'\nassert solution('0 0') == '0 1'\n"
    },
    {
        "number": 3421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1 2'\n\nassert solution('0') == '1 1'\n\nassert solution('01') == '1 1'\n\nassert solution('0101') == '1 1'\n\nassert solution('1010101') == '1 1'"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4 1\n2 123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2233\n2233\n----\n2233\n2233\n1111\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 2\") == \"4 3\"\nassert solution(\"2 1\\n2 2\") == \"2 3\"\nassert solution(\"5 2\\n1 1 1 1 1\\n2 2\\n2 2\\n3 3\\n3 3\") == \"5 5\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 1\n    2123\n    2 2\n    21\n    10\n    2 2\n    23\n    12\n    \"\"\") == \"4 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '4 3'\nassert solution('3\\n4 1') == '4 3'\nassert solution('2\\n4 1') == '4 3'\nassert solution('2 2') == '4 1'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == '5 3'\nassert solution('8 7') == '3 3'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\\\n3\n4 1\n2123\n2 2\n21\"\"\") == \"\"\"\\\n4 3\n2123\n1012\n\"\"\".strip()\n\nassert solution(\"\"\"\\\n3\n4 1\n21\"\"\") == \"\"\"\\\n3 4\n21\"\"\".strip()\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2233\n2233\n1111\n\"\"\") == \"4 3\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2\n10\n3 4\n5 6\n\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n3 1\n2\n1 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2 4'\nassert solution('10') == '4 1'\nassert solution('1') == '0 1'\n"
    },
    {
        "number": 3422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == '3 2'\nassert solution('4 1') == '4 3'\nassert solution('4 1') == '4 2'\nassert solution('4 1') == '4 3'\nassert solution('4 1') == '4 2'"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n\"\"\") == \"\"\"atk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\ngtk2\nvim-X11\n\n\"\"\"\n\nassert solution(\"\"\"\nvim-X11\ngtk2\nzlib\nlibjpeg\npango\nxorg-x11-libs\nfreetype\npcre\n3\nlisp\nemacs\n\"\"\") == \"\"\"emacs\npcre\nlisp\nfreetype\nxorg-x11-libs\npango\nzlib\ngtk2\nvim-X11\n\"\"\"\"\"\n\nassert solution(\"\"\"\nlisp\nxorg-x11\ngtk2\n3\n\"\"\") == \"\"\"lisp\nxorg-x11\ngtk2\n3\n\"\"\"\n\nassert solution(\"\"\"\n3\n\"\"\") == \"cannot be ordered\"\n\nassert solution(\"\"\"\n0\n\"\"\") == \"cannot be ordered\""
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"cannot be ordered\"\n\nassert solution([\n    \"1\",\n    \"p\",\n    \"a\",\n    \"t\",\n    \"t\",\n    \"i\",\n    \"f\",\n    \"e\",\n    \"m\",\n    \"s\",\n    \"o\",\n    \"r\",\n    \"b\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"a\",\n    \"c\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    \"n\",\n    \"g\",\n    \"o\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"a\",\n    \"r\",\n    \"e\",\n    \"m\",\n    \"i\",\n    \"f\",\n    \"o\",\n    \"p\",\n    \"u\",\n    \"l\",\n    \"i\",\n    \"s\",\n    \"u\",\n    "
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n12\nlibx11 libxcb libxdamage xcb-common libxext libxfixes libxrender libxss v4l2\nx11\nxcb\nxdamage\nxfixes\nxrender\nxss\nv4l2\nlibxext\nlibxfixes\nlibxrender\nxcb-common\nlibxdamage\nlibx11\nv4l2\nxss\n''') == 'atk pango glib2 zlib libjpeg atk pango x11 xcb-common gtk2 libx11 libxcb x11 xcb-common xdamage xfixes xrender xss freetype'\n\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() in [\"cannot be ordered\", \"1\"]\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('10\\nlibattr\\nvim-X11\\ngtk-x11\\n') == 'atk\\ngtk-x11\\nlibattr\\n'\nassert solution('10\\nlibattr\\nvim-X11\\ngtk-x11\\n') == 'atk\\ngtk-x11\\nlibattr\\n'\nassert solution('14\\nlibattr\\nvim-X11\\ngtk-x11\\n') == 'atk\\ngtk-x11\\nlibattr\\n'\nassert solution('14\\nlibattr\\nvim-X11\\ngtk-x11\\n') == 'atk\\ngtk-x11\\nlibattr\\n'\nassert solution('14\\nlibattr\\nvim-X11\\ngtk-x11\\n') == 'atk\\ngtk-x11\\nlibattr\\n'\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\nlibattr\\nvim-common gtk2 libattr\") == \"atk\"\nassert solution(\"2\\nlibattr\\nvim-common gtk2 libtiff atk pango glib2\\nlibtiff zlib libjpeg atk\\natk\\npango xorg-x11-libs freetype glib2\\nglib2\\nzlib\\nlibjpeg\\nxorg-x11-libs grep freetype\\ngrep pcre\\ngreep\\nxorg-x11-libs\\nlibattr\\n0\") == \"atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngreep\\npango\\nxorg-x11-libs\\ngtk2\\nvim-common\\nxorg-x11-libs\\n\"\nassert solution(\"13\\nlibattr\\nvim-common gtk2 libattr\\nvim-common\\natk\\npango\\nxorg-x11-libs\\nxorg-x11-libs\\nlibjpeg\\nlibtiff\\nglib2\\nzlib\\nlibtiff\\n\") == \"libattr\\natk\\nlibjpeg\\nlibtiff\\nglib2\\nzlib\\n\"\nassert solution(\"2\\nvim-common gtk2 libattr\\nlibattr\\n0\\n0\\n\") == \"atk\\ngtk2\\n\"\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\n''') == 'atk\\nfreetype\\nglib2\\nlibattr\\nlibjpeg\\npcre\\ngrep\\ngtk2\\nvim-common\\nxorg-x11-libs\\npango\\nzlib\\nlibtiff\\ngtk2\\nvim-X11\\n'''\n"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == 'xorg-x11 zlib glib2 gtk2 libattr libtiff pango libjpeg x11-libs atk grep pcre grep vim-common vim-X11 vim-common x11-libs'\n\nSample Input:\n7\nemacs\ngrep\nzlib\natk\nxorg-x11\npango\nlibjpeg\npcre\nfreetype\n\nSample Output:\natk pango libjpeg zlib libtiff vim-X11 libattr pango glib2\nzlib\nfreetype\npango\ngrep\npcre\nlibjpeg\nemacs\nx11-libs\n'''"
    },
    {
        "number": 3423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\nlibtiff\\nlibattr') == 'freetype'\nassert solution('1\\nlibattr\\n') == 'atk'\nassert solution('5\\natk\\nemacs\\n') == 'lisp'\nassert solution('0\\n') == 'cannot be ordered'\nassert solution('4\\nlibtiff\\n') == 'cannot be ordered'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''32 20''') == '16'\nassert solution('''4 10''') == '2'\nassert solution('''0 20''') == '2'\nassert solution('''1 9''') == '10'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('32 20') == '16'\nassert solution('16') == '16'\nassert solution('10') == '10'\nassert solution('80') == '8'\nassert solution('32') == '32'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '16'\nassert solution('2 1') == '2'\nassert solution('3 5') == '10'\nassert solution('4 10') == '16'\nassert solution('10 10') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"32 20\") == \"16\"\n\nstdin = \"\"\"\n25 25\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"\n23 20\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('32 20') == '16'\nassert solution('1210 21') == '12'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 32 20\") == \"16\"\nassert solution(\"32 10 20\") == \"16\"\nassert solution(\"10 10 20\") == \"16\"\nassert solution(\"10 12 20\") == \"16\"\nassert solution(\"10 18 20\") == \"16\"\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('32 20') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('32 20') == '16'\nassert solution('32 30') == '16'\nassert solution('28 18') == '8'\nassert solution('26 18') == '16'\nassert solution('5 6') == '16'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''32 20''') == '16'\nassert solution('''32 25''') == '20'\nassert solution('''32 7''') == '10'\nassert solution('''32 17''') == '15'\n"
    },
    {
        "number": 3424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n32 20\n''') == '16', solution.__doc__\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1', '1'\nassert solution('1 1') == '1', '1'\nassert solution('4 3') == '2', '4 3'\nassert solution('3 3') == '1', '3 3'\nassert solution('2 4') == '4', '2 4'\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 4\n....\n.#.#\n....\nSample Input:\n3 5\n....\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n.#.\\n...\") == \"5 13\"\nassert solution(\"3 5\\n.###\\n##...\\n#...#\\n.....\") == \"8 26\"\n\"\"\"\n\nn, m = map(int, input().split())"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n##\\n#') == '1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\n\"\"\""
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\".#.##.##\") == \"4\"\nassert solution(\".#.##.##.\") == \"3\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '13'\nassert solution(input('1\\n.\\n1\\n.\\n1\\n')) == '13'\nassert solution(input('3\\n.\\n.\\n.\\n')) == '0'\nassert solution(input('2\\n.\\n#\\n#\\n')) == '1'\nassert solution(input('3\\n.\\n.\\n#\\n')) == '0'"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4\n...\n...\n...\n....\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n.####\\n..#..\\n.####\") == \"5 13\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n..\\n...\\n#\\n...') == '1\\n1\\n2'\n\"\"\""
    },
    {
        "number": 3425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '8'\nassert solution('1 1') == '1'\nassert solution('3 4') == '13'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"5\"\nassert solution(\"2 2 5 1\") == \"5\"\nassert solution(\"3 3\") == \"?\"\nassert solution(\"3 1\") == \"?\""
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n\nassert solution('''\n5 5\n1 3 1 5 1\n3 2 2 1 1\n2 1??\n3 2 3 5 1\n3 1??\n1 2 3 4 5\n''') == '2'\n\nassert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '3'\n\nassert solution('''\n5 5\n1 3 1 5 1\n2 3 3 1 1\n3 2??\n2 3 3 1 1\n3 1??\n1 2 3 4 5\n''') == '4'\n\nassert solution('''\n5 5\n1 3 1 5 1\n2 3 3 1 1\n3 2??\n2 3 3 1 1\n3 1??\n1 2 3 4 5\n''') == '3'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\n''') == '5'\n'''"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '5'\nassert solution('4 4') == '1'\nassert solution('1 1') == '1'\nassert solution('3 3') == '5'\nassert solution('3 5') == '5'\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '1'\n\"\"\""
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 2 5 1\n2 3 3 1''') == \"5\"\nassert solution('''3 3\n1 2 5 1\n2 3 3 1\n3 1? 0''') == \"6\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 3\\n2 3 5 1\\n3 1? 0\\n') == '5'\nassert solution('5 4\\n2 1 6 1\\n1 2? 0\\n1 1? 0\\n1 3? 0\\n') == '6'\nassert solution('4 4\\n2 1 6 1\\n1 2? 0\\n1 1? 0\\n1 3? 0\\n') == '6'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 4\n1 2 3 4\n1 2 3 4\n2 3 5\n''') == '4'\nassert solution('''\n3 4\n1 2 3 4\n1 2 3 4\n3 1? 0\n''') == '2'"
    },
    {
        "number": 3426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2 3\\n'\n    '1 2 5 1\\n'\n    '2 3 3 1\\n'\n    '3 1? 0'\n    ) == '5'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n-1 0\n-1 1\n0 1\n0 2\n''') == '0'\n\nassert solution('''\n5 4\n-1 0\n-1 1\n0 1\n0 2\n0 3\n0 4\nSample Output:\n4\n''') == '4'\n\nassert solution('''\n6 6\n-1 0\n-1 1\n0 1\n0 2\n0 3\n0 4\n0 5\n1 2\n1 3\n1 4\nSample Output:\n6\n''') == '6'\n\nassert solution('''\n6 6\n-1 0\n-1 1\n0 1\n0 2\n0 3\n0 4\n0 5\n1 2\n1 3\n1 4\nSample Output:\n3\n''') == '3'\n\nassert solution('''\n10 8\n-1 0\n-1 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n1 3\n1 4\n1 5\n1 6\n1 7\nSample Output:\n0\n''') == '0'"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n-1 0\n-1 1\n0 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 3\n-1 0\n-1 1\n1 0\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5 10\n-1 -1 1 1 -1\n-1 -1 -1 -1 -1\n-1 -1 -1 -1 1\n-1 -1 -1 -1 -1\n-1 -1 -1 1 1\n-1 -1 1 -1 -1\n1 -1 -1 -1 -1\n-1 1 1 1 -1\n-1 -1 1 1 -1\n-1 -1 1 1 -1\n1 -1 1 1 -1\n-1 -1 1 1 -1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5 9\n1 -1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n1 -1 -1 -1 -1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8\n-1 1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n-1 0\n-1 1\n0 1\n-1 2\n0 3\n''') == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n0 1\n-1 1\n-1 0\n0 -1\n''') == '3'\nprint('All tests passed!')\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 3\n-1 0\n-1 1\n0 1\n''') == '0'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n-1 0\\n-1 1\\n0 1\"\n) == \"3\"\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == \"0\""
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\nassert solution(\"3 3\\n-1 0\\n-1 1\\n0 1\") == \"3\"\nassert solution(\"9 9\\n-1 0\\n-1 1\\n0 1\\n0 2\\n1 2\\n1 3\\n1 4\\n0 4\\n0 5\\n0 6\\n0 7\\n0 8\\n0 9\\n1 9\\n-1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n1 31\\n0 32\\n0 33\\n0 34\\n0 35\\n0 36\\n0 37\\n0 38\\n0 39\\n0 40\\n0 41\\n0 42\\n0 43\\n0 44\\n0 45\\n0 46\\n0 47\\n0 48\\n0 49\\n0 50\\n0 51\\n0 52\\n0 53\\n0 54\\n0 55\\n0 56\\n0 57\\n0 58\\n0 59\\n0 60\\n0 61\\n0 62\\n0 63\\n0 64\\n0 65\\n0 66\\n0 67\\n0 68\\n0 69\\n0 70\\n0 71\\n0 72\\n0 73\\n0 74\\n0 75\\n0 76\\n0 77\\n0 78\\n0 79\\n0 80\\n0 81\\n0 82\\n0 83\\n0 84\\n0 85\\n0 86\\n0 87\\n0 88\\n0 89\\n0 90\\n0 91\\n0 92\\n0 93\\n0 94\\n0 95\\n0 96\\n0 97\\n0 98\\n0 99\\n0 100\\n1 101\\n1 102\\n1 103\\n1 104\\n1 105\\n1 106\\n1 107\\n1 108\\n1 109\\n1 110\\n1 111\\n1 112\\n1 113\\n1 114\\n1 115\\n1 116\\n1 117\\n1 118\\n1 119\\n1 120\\n1 121\\n1 122\\n1 123\\n1 124\\n1 125\\n1 126\\n1 127\\n1 128\\n1 129\\n1 130\\n1 131\\n1 132\\n1 133\\n1 134\\n1 135\\n1 136\\n1 137\\n1 138\\n1 139\\n1 140\\n1 141\\n1 142\\n1 143\\n1 144\\n1 145\\n1 146\\n1 147\\n1 148\\n1 149\\n1 150\\n1 151\\n1 152\\n1 153\\n1 154\\n1 155\\n1 156\\n1 157\\n1 158\\n1 159\\n1 160\\n1 161\\n1 162\\n1 163\\n1 164\\n1 165\\n1 166\\n1 167\\n1 168\\n1 169\\n1 170\\n1 171\\n1 172\\n1 173\\n1 174\\n1 175\\n1 176\\n1 177\\n1 178\\n1 179\\n1 180\\n1 181\\n1 182\\n1 183\\n1 184\\n1 185\\n1 186\\n1 187\\n1 188\\n1 189\\n1 190\\n1 191\\n1 192\\n1 193\\n1 194\\n1 195\\n1 196\\n1 197\\n1 198\\n1 199\\n1 200\\n1 201\\n1 202\\n1 203\\n1 204\\n1 205\\n1 206\\n1 207\\n1 208\\n1 209\\n1 210\\n1 211\\n1 212\\n1 213\\n1 214\\n1 215\\n1 216\\n1 217\\n1 218\\n1 219\\n1 220\\n1 221\\n1 222\\n1 223\\n1 224\\n1 225\\n1 226\\n1 227\\n1 228\\n1 229\\n1 230\\n1 231\\n1 232\\n1 233\\n1 234\\n1 235\\n1 236\\n1 237\\n1 238\\n1 239\\n1 240\\n1 241\\n1 242\\n1 243\\n1 244\\n1 245\\n1 246\\n1 247\\n1 248\\n1 249\\n1 250\\n1 251\\n1 252\\n1 253\\n1 254\\n1 255\\n1 256\\n1 257\\n1 258\\n1 259\\n1 260\\n1 261\\n1 262\\n1 263\\n1 264\\n1 265\\n1 266\\n1 267\\n1 268\\n1 269\\n1 270\\n1 271\\n1 272\\n1 273\\n1 274\\n1 275\\n1 276\\n1 277\\n1 278\\n1 279\\n1 280\\n1 281\\n1 282\\n1 283\\n1 284\\n1 285\\n1 286\\n1 287\\n1 288\\n1 289\\n1 290\\n1 291\\n1 292\\n1 293\\n1 294\\n1 295\\n1 296\\n1 297\\n1 298\\n1 299\\n1 300\\n1 301\\n1 302\\n1 303\\n1 304\\n1 305\\n1 306\\n1 307\\n1 308\\n1 309\\n1 310\\n1 311\\n1 312\\n1 313\\n1 314\\n1 315\\n1 316\\n1 317\\n1 318\\n1 319\\n1 320\\n1 321\\n1 322\\n1 323\\n1 324\\n1 325\\n1 326\\n1 327"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    2 3\n    -1 0\n    -1 1\n    0 1\n    '''\n    ) == '3'\n"
    },
    {
        "number": 3427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n-1 0\\n-1 1\\n0 1\") == \"0\"\nassert solution(\"2 3\\n-1 0\\n-1 1\\n1 1\") == \"1\"\nassert solution(\"2 5\\n-1 1\\n-1 0\\n1 0\\n0 2\\n0 1\\n0 4\\n-1 2\\n-1 5\\n1 3\\n1 4\\n-1 3\\n0 1\\n0 2\\n-1 1\\n0 4\\n0 5\") == \"1\"\nassert solution(\"2 7\\n-1 0\\n-1 1\\n0 1\\n0 2\\n1 2\\n1 3\\n1 4\\n1 5\\n2 2\\n2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 4\\n4 5\\n5 5\") == \"4\"\nassert solution(\"3 3\\n-1 0\\n-1 1\\n0 1\\n0 2\\n0 3\\n0 4\\n1 0\\n1 1\\n1 2\\n2 2\\n2 3\\n2 4\\n3 3\\n3 4\\n4 4\\n4 5\\n5 5\") == \"3\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n9 6 2 4') == '6'\nassert solution('2\\n1 2 3 4') == '5'\nassert solution('3\\n1 1 2 3') == '3'\nassert solution('4\\n1 1 1 2') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == '6', solution('4')\nassert solution('9 6 2 4') == '6', solution('9 6 2 4')\nassert solution('10') == '1', solution('10')\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"1\\n2\\n3\\n4\\n2\\n1\"\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '6'\nassert solution('4') == '6'\nassert solution('4') == '6'"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '2'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '6'\nassert solution('4') == '4'\nassert solution('9') == '9'\nassert solution('6 2 4') == '6'\nassert solution('9 6 2 4') == '6'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n9 6 2 4') == '6'\nprint('PASSED!')\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '6'\nassert solution('1\\n') == '1'\nassert solution('5\\n') == '5'\nassert solution('18\\n') == '18'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n7\n5 6 2 4\n''') == '6'\n"
    },
    {
        "number": 3428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 5 1\") == \"3.000000\"\nassert solution(\"1 3 1\") == \"2.000000\"\nassert solution(\"1 2 1\") == \"2.000000\"\nassert solution(\"3 2 1\") == \"2.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 1 3 2\n2 5 1\n''') == '2.000000'\nassert solution('''\n10 1 1 5 2\n1 1\n''') == '4.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 1 3') == '0.500000'\nassert solution('4 1 5') == '4.000000'\nassert solution('10 1 5') == '9.000000'\nassert solution('10 1 0') == '10.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('1 2 3 4 5') == '-1.00000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '2.000000'\nassert solution('1 1 1 3 2') == '3.000000'\nassert solution('4 5 1') == '1.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"3 2 1\") == \"1.000000\"\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('4 6 2 1 1 3 1 3 5 6 6 8 7 4 3 7') == '8.50000'\nassert solution('0.000000') == '1.000000'\nassert solution('0.000000') == '0.000000'\nassert solution('0.000000') == '0.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\nassert solution('2 5 1') == '0.500000'\nassert solution('3 5 1') == '1.000000'\nassert solution('5 5 1') == '0.000000'\nassert solution('8 5 1') == '1.000000'\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1 1 3 2') == '2.000000'\n\nassert solution('0 1 1 3 2') == '2.000000'\n\"\"\"\nimport math\nimport unittest\n"
    },
    {
        "number": 3429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 3 2\") == \"2.000000\"\nassert solution(\"2 2 1 2 2\") == \"4.000000\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 3\\n4\\n1 2\\n1 3\\n1 4') == '96'\nassert solution('1\\n1 2\\n1 3\\n1 4\\n3\\n2\\n2 4') == '24'\n\"\"\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2\n2 3\n4\n1 2\n1 3\n1 4''') == \"96\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == \"96\"\nassert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == \"96\"\nassert solution('''\n1\n1 2\n''') == \"0\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n''') == '96'\nassert solution('''\n7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n''') == '504'\nassert solution('''\n12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n8\n''') == '1724'\nassert solution('''\n3\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n''') == '1104'\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"96\"\n\nassert solution(\"\"\"\n2\n3\n1 2\n1 3\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\n3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n3\n5\n1 2\n1 3\n1 4\n1 5\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n2\n3\n4\n3\n4\n4\n3\n4\n''') == '96'\n\nassert solution('''\n4\n4\n4\n4\n3\n4\n4\n3\n4\n''') == '97'\n\nassert solution('''\n2\n2\n1\n3\n2\n4\n3\n4\n''') == '100'\n\nassert solution('''\n4\n4\n4\n4\n3\n4\n4\n3\n4\n''') == '100'\n\nassert solution('''\n3\n4\n3\n2\n''') == '10'"
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"96\"\nassert solution(\n\"\"\"\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"96\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"96\", \"Should compute 96\"\nassert solution(\"\"\"\n2\n1 2\n2 3\n4\n1 2\n1 3\n1 4\n\"\"\") == \"72\", \"Should compute 72\"\nassert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n1 2\n1 3\n1 4\n\"\"\") == \"144\", \"Should compute 144\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"96\"\nassert solution(\"2\") == \"0\""
    },
    {
        "number": 3430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n1 2\n1 3\n3 4\n''') == '96'\nassert solution('''\n4\n1 2\n2 3\n3 4\n1 3\n1 4\n''') == '100'\n'''\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 1') == '1'\nassert solution('5\\n0 0 0 0\\n0 1 1 1\\n0 2 2 2\\n0 3 3 3') == '4'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '3'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2') == '5'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2') == '6'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2') == '5'\nassert solution('10\\n0 0\\n0 1\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2') == '5'\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '3'\nassert solution('5\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n2 0\\n2 1\\n2 2\\n3 0\\n3 1\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '3'\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n0 0\n0 1\n1 0\n1 1''') == '3'\nassert solution('''20\n1 1\n0 1\n0 1\n1 0\n0 1\n1 0\n0 1\n1 1\n1 0\n0 1\n1 0\n0 1\n1 0\n1 0\n0 1\n1 0\n0 1\n1 0\n0 1\n1 0\n0 1\n1 0\n0 1\n1 0\n1 1\n0 1\n0 1\n1 0\n1 0\n0 1\n0 1\n0 1\n1 1\n0 1\n1 0\n0 1\n0 1\n1 0\n1 1\n0 1\n0 1\n1 0\n1 0\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n1 0\n0 1\n1 0\n0 1\n1 1\n1 0\n1 0\n0 1\n0 1\n0 1\n1 0\n1 0\n0 1\n0 1\n0 1\n1 0\n1 0\n1 1\n1 0\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n1 1\n0 1\n1 1\n0 1\n0 1\n1 1\n1 0\n1 0\n0 1\n0 1\n1 0\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 0\n1 1\n0 1\n1 1\n0 1\n0 1\n1 0\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n0 1\n1 1\n1 0\n0 1\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n1 0\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1\n0 1"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"3\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"3\"\nassert solution(\n    \"5\\n0 0\\n0 1\\n1 0\\n1 1\\n2 0\\n2 1\\n3 0\\n3 1\\n4 0\\n4 1\") == \"4\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"100\") == \"100\"\n"
    },
    {
        "number": 3431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4\n0 0\n0 1\n1 0\n1 1\n''') == '3'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n2 8\n3 1\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3\n2 8\n3 1\n1 4\n\"\"\") == \"10\"\nassert solution(\"\"\"\n4\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n\"\"\") == \"30\"\nassert solution(\"\"\"\n10\n2 5 1 7 3 8 4 6 9 10\n1 7 1 5 8 8 7 1 6 4\n6 9 6 8 6 7 9 1 2 8\n6 9 9 5 2 7 8 1 4 1\n10 11 2 3 4 10 3 1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"10\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4\\n') == '10\\n10\\n9\\n'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 8\n3 1\n1 4\n''') == '10'\nassert solution('''\n2 5\n1 3\n1 4\n''') == '12'\nassert solution('''\n1 2\n1 3\n''') == '4'\nassert solution('''\n1 2\n1 3\n''') == '4'"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 8\n3 1\n1 4\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n3\n5 7\n6 2\n1 4\n\"\"\") == \"15\"\n\nassert solution(\"\"\"\n3\n2 8\n3 1\n1 4\n\"\"\") == \"10\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '10'\nassert solution('3 1') == '10'\nassert solution('3 1 4') == '5'\nprint('Congratulations!')"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2 8\\n3 1\\n1 4\\n') == '10\\n10\\n9'\nassert solution('20\\n2 8\\n3 1\\n1 4\\n') == '20\\n20\\n20'\nassert solution('30\\n2 8\\n3 1\\n1 4\\n') == '30\\n30\\n30'\nassert solution('40\\n2 8\\n3 1\\n1 4\\n') == '40\\n40\\n40'\nassert solution('50\\n2 8\\n3 1\\n1 4\\n') == '50\\n50\\n50'\n"
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\\n10\\n9\\n\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '10\\n10\\n10\\n'\n\"\"\""
    },
    {
        "number": 3432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 8\\n3 1\\n1 4\\n') == '10'\nassert solution('10\\n1 4\\n8 1\\n2 2\\n3 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10') == '10'\n\n\"\"\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4\\n#####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nprint(solution('''3 3\n######\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\nassert solution(\"4 4\\n###\\n#..#\\n#J#\\n#.F\") == \"2\"\nassert solution(\"4 4\\n####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n######\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\\n##.#\\n#####\\n\") == \"3\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 4\\n###\\n#J#\\n#F#\") == \"IMPOSSIBLE\"\n\nassert solution(\"2 2\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n\") == \"4\"\n\nassert solution(\"3 3\\n###\\n#.\\n#.\\n#.\\n#.\\n#.\\n\") == \"4\"\n\nassert solution(\"4 4\\n###\\n#.\\n#F#\\n#.\\n#.\\n#.\\n\") == \"3\"\n\nassert solution(\"5 5\\n###\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n#.\\n\") == \"7\""
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n#.#\\n#.#\\n#.#') == 'IMPOSSIBLE'\nassert solution('4 4\\n#####\\n#.J#\\n#.###\\n###.#') == '1'"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n####\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == 'IMPOSSIBLE', solution\nassert solution('2 2 3') == '2', solution\nassert solution('2 2 1') == '2', solution\nassert solution('4 5 2') == '1', solution\nassert solution('4 5 2') == '1', solution\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4\\n####\\n#JF#\\n#..#\\n#..#') == 'IMPOSSIBLE'\nassert solution('3 3\\n#..\\n#..\\n#..') == '2'\n"
    },
    {
        "number": 3433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n#####\\n#JF#\\n#..#\\n#..#\") == \"IMPOSSIBLE\"\n\nassert solution(\"5 4\\n#####\\n#F..\\n#..#\\n#JF#\\n#..#\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\n#...\\"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 1 3\n2\n2 2\n\"\"\") == \"0.31250000000000003\"\nassert solution(\"\"\"\n4 1 4\n1\n3 1\n\"\"\") == \"0.25\"\nassert solution(\"\"\"\n3 2 5\n1\n3 2\n\"\"\") == \"0.31250000000000003\"\nassert solution(\"\"\"\n5 2 4\n1\n2 2\n\"\"\") == \"0.25\""
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 2') == '0.3333333333'\nassert solution('5 5 1') == '0.000000'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 2\\n2\\n1 1\\n') == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '0.16666666667'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n1 2 2\n2\n1 1\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n1 2 5\n4\n1 1\n\"\"\") == \"0.3333333333\"\nassert solution(\"\"\"\n1 5\n1 1\n\"\"\") == \"0.3333333333\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2\\n2\\n1 1\") == \"0.3333333333\"\nassert solution(\"5 5 5\\n3 3 3\\n3 3 3\") == \"0.75\"\nassert solution(\"1 1 1\\n1\\n1\") == \"0.25\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 2\n2\n1 1\n''') == '0.3333333333'\nassert solution('''\n1 1\n1\n''') == '0.6666667'\nassert solution('''\n5 7 7\n4\n8 5 2 3 4 6 5 7\n''') == '0.0'\nassert solution('''\n3 5 2\n6\n8 8 8 8 8 8 8\n''') == '0.33333333333'\nassert solution('''\n10 7 10 7 10 7 10\n10\n7\n8\n''') == '0.33333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 2\n2\n1 1\n''') == '0.3333333333'\nassert solution('''\n1 2 2\n2\n1 1\n''') == '0.3333333333'\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2 2\n2\n1 1\n\"\"\") == \"0.3333333333333333333333333333333333\"\nassert solution(\"\"\"\n10 10 10\n10 10 10 10 10 10 10 10\n\"\"\") == \"0.99999999999999999999999999999996\"\n"
    },
    {
        "number": 3434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 2') == '0.3333333333'\nassert solution('5 5 6') == '0.3333333333'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1023'\nassert solution('2') == '1002'\nassert solution('3') == '1001'\nassert solution('4') == '1010'\nassert solution('5') == '1011'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '12345678901234567890'\nassert solution('10') == '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '1023'\nassert solution('1') == '1023'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n1*1''') == '23'\nassert solution('''1\n1*1\n0\n0*0''') == '23'\nassert solution('''10\n11*1''') == '1'\nassert solution('''10\n11*1\n*1\n1*1''') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n1''') == '23'\nassert solution('''10\n1''') == '1223'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1023'\nassert solution('12') == '20'\nassert solution('101') == '101'\nassert solution('1011') == '11'\nassert solution('0111') == '1'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('101') == '111'\nassert solution('1111') == '1111'\nassert solution('11111') == '1111'\nassert solution('1*1') == '10'\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    5\n    1*1\n    1010*\n    1010111\n    111111\n    ''') == '1023'\n\n''')\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"1023\"\nassert solution(\"1\") == \"1023\"\nassert solution(\"11\") == \"1023\"\nassert solution(\"0001101\") == \"104\"\n"
    },
    {
        "number": 3435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n101''') == '1023'\nassert solution('''6\n01010''') == '10010'\nassert solution('''15\n111111111101''') == '199999'\nassert solution('''18\n11111111111111111''') == '199999'\nassert solution('''25\n1111111111111111111''') == '999'\n'''\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"6\"\n\"\"\"\nx, y = map(int, stdin.strip().split())"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n''') == '6'\nassert solution('''\n3 4\n''') == '17'\n\"\"\"\n\nstdin = input()\nx, y = map(int, stdin.split())"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '6', 'Expected 6'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2\\n') == '6'\nassert solution('2 2\\n') == '6'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '6'\nassert solution('1 1') == '4'\nassert solution('0 0') == '0'\nassert solution('2 2') == '6'\nassert solution('1 1') == '4'\n\"\"\""
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n') == '6'\nassert solution('1 3\\n') == '3'"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nassert solution(\"0 0\\n\") == \"0\"\nassert solution(\"1 1\\n\") == \"1\"\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '6'"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '6', 'First'\nassert solution('1 1') == '5', 'Second'\nassert solution('2 2') == '6', 'Third'\n"
    },
    {
        "number": 3436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"2 2\") == \"6\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"10 1\") == \"4\"\nassert solution(\"2 4\") == \"10\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500''') == '2930'\nassert solution('''10 20 6\n1\n3\n5\n7\n9\n12\n13\n15''') == 'Impossible'\nassert solution('''10 20 6\n1\n4\n5\n7\n9\n12\n13\n15''') == '3000'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '1400'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n10\\n480\\n500\\n550\\n1000\\n1500\\n1400') == 'Impossible'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1400\\n1400') == 'Impossible'\nassert solution('1000 2000 7\\n10\\n480\\n500\\n550\\n1000\\n1500\\n1500') == '2930'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == '2930'\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500') == 'Impossible'\nassert solution('1000 2000 7\\n1\\n1\\n2\\n1\\n10\\n1\\n1\\n2\\n10\\n1000') == '10000'\nassert solution('1000 2000 7\\n1\\n1\\n2\\n1\\n10\\n1\\n1\\n2\\n10\\n1000') == '10000'\nassert solution('1000 2000 7\\n1\\n1\\n2\\n1\\n10\\n1\\n1\\n2\\n10\\n1000') == 'Impossible'\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 1000 1000') == '2930'\nassert solution('1000 1000') == 'Impossible'\n\n'''\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\\n\") == \"2930\"\nassert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n2000\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n\") == \"Impossible\"\n\nassert solution(\"1 1000\\n2000\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n\") == \"Impossible\"\nassert solution(\"1 1000\\n2000\\n100\\n480\\n500\\n550\\n1000\\n1500\\n1500\\n\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == '2930'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n''') == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n''') == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'\n\nassert solution('''\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\n''') == 'Impossible'"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"2930\"\nassert solution(\"2000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500\") == \"Impossible\"\nassert solution(\"1000 2000 7\\n100\\n480\\n600\\n550\\n1000\\n1400\\n1500\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1000 2000 7\") == \"2930\"\nassert solution(\"100\") == \"Impossible\"\nassert solution(\"480\") == \"Impossible\"\nassert solution(\"500\") == \"Impossible\"\nassert solution(\"550\") == \"Impossible\"\n"
    },
    {
        "number": 3437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"2930\"\nassert solution('1000 2000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"Impossible\"\nassert solution('1000 1000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"Impossible\"\nassert solution('1000 1000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"2930\"\nassert solution('1000 1000 7\\n100\\n480\\n500\\n550\\n1000\\n1400\\n1500') == \"Impossible\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('2 2 2') == '1'\nassert solution('2 2 2') == '0'\nassert solution('1 2 3') == '2'\nassert solution('1 2 3') == '0'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\\n\") == \"2\"\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9 10\\n11 12 13 14\\n15 16 17 18 19\\n20 21 22 23 24\\n25 26 27 28 29\\n30 31 32 33 34\\n35 36 37 38 39\\n40 41 42 43 44\\n45 46 47 48 49\\n50 51 52 53 54\\n55 56 57 58 59\\n60 61 62 63 64\\n65 66 67 68 69\\n70 71 72 73 74\\n75 76 77 78 79\\n80 81 82 83 84\\n85 86 87 88 89\\n90 91 92 93 94 95\\n96 97 98 99 100\\n\") == \"9\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 3\n0\n0\n1\n''') == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0 1 2') == '1'\n'''\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('0') == '0'\nassert solution('0 1 2') == '1'\nassert solution('0 2 3') == '2'\nassert solution('1 2 3 4') == '3'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\\n\") == \"2\"\nassert solution(\"1 2 2\\n0\\n0\\n1\\n\") == \"1\"\nassert solution(\"10 3 2\\n0\\n0\\n1\\n\") == \"0\"\nassert solution(\"100 3 3\\n0\\n0\\n1\\n\") == \"0\"\nassert solution(\"1000 3 3\\n0\\n0\\n1\\n\") == \"0\"\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n0\\n0\\n1\") == \"2\"\nassert solution(\"1 2 3\\n0\\n0\\n1\\n1\\n1\") == \"1\""
    },
    {
        "number": 3438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1 2 3\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"1\"\n    ) == \"2\"\n\nassert solution(\n    \"1 2 3\\n\"\n    \"0\\n\"\n    \"0\\n\"\n    \"1\"\n    ) == \"1\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\nassert solution('''3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\nassert solution('''3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\nassert solution('''5 5\n-5 -5 -5 -5\n-5 -5 -5 -5\n-5 -5 -5 -5\n-5 -5 -5 -5\n-5 -5 -5 -5''') == '0'\nassert solution('''3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\nassert solution('''10\n1 1 1 1 1 1 1 1 1''') == '37'\nassert solution('''1\n1''') == '2'"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\n''') == '10'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n-5 2 -5\\n-1 -2 -1\") == \"10\"\nassert solution(\"3 3\\n-5 2 -5\\n-1 -2 -1\\n5 4 -5\") == \"10\""
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"10\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n') == '12'\nassert solution('2\\n-5\\n-1\\n-2\\n') == '2'\nassert solution('3\\n-1\\n-2\\n-5\\n') == '12'\nassert solution('4\\n-1\\n-2\\n-5\\n') == '16'\nassert solution('5\\n-1\\n-2\\n-5\\n') == '25'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2''') == '10'\n\nassert solution('''10\n1 3 3 3 2 3 3\n-1 2 1 2 1 2 3\n-1 3 3 3 3 3 3\n-1 2 2 2 2 2 2\n3 3 3 3 3 3 3''') == '4'\n\nassert solution('''10\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1''') == '62'\n\nassert solution('''20\n-1 1 1 -1 -1 -1 -1 -1 -1\n-1 1 1 1 -1 1 -1 -1\n-1 1 1 1 1 1 -1\n-1 -1 1 -1 -1 -1 -1\n-1 1 1 1 -1 1 -1\n-1 1 1 -1 1 1 -1\n-1 1 1 1 1 1 -1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-1 1 1 1 1 1 1\n-"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"10\"\nassert solution(\"10 4 5\\n-1 -2 -1\\n5 4 -5\") == \"20\"\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '10'\nassert solution('1 1') == '0'\nassert solution('5 4 -5') == '7.5'\nassert solution('2 2') == '0'\n"
    },
    {
        "number": 3439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\nassert solution('4 5') == '13'\n'''"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '0'\nassert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '0'\n'''"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3100'\nassert solution('5 10') == '3500'\nassert solution('10 20') == '4500'\nassert solution('10 2') == '3500'\nassert solution('10 10') == '5500'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    5 3\n    1 2 1000\n    2 3 1000\n    4 5 500\n    2\n    1 4 300\n    3 5 300\n    \"\"\") == \"3300\"\nassert solution(\n    \"\"\"\n    1 2\n    2 3\n    4 5\n    2\n    1 4\n    3 5\n    \"\"\") == \"13800\""
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 4\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300'"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 1000\n2 3 1000\n4 5 500\n2''') == '3300', 'Wrong'\nassert solution('''4 3\n1 2 1000\n2 3 1000\n3 4 500\n2''') == '3100', 'Wrong'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"3100\""
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"3100\"\nassert solution(\"1 2 1000\") == \"3000\"\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300'\n'''\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == '3100'\nassert solution('2 3') == '3100'\nassert solution('4 5') == '3000'\nassert solution('2') == '2'\nassert solution('1 4 300') == '2900'\n"
    },
    {
        "number": 3440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"3100\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n0 1\n''') == '0'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 1\\n0 1\"\n) == \"0\"\nassert solution(\n    \"4 6\\n0 1 2 3 4\\n0 2 3\\n0 1 2\\n1 0\\n0 0\\n1 0\"\n) == \"2\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 1\n0 1\n''') == '0'\nassert solution('''2 1\n0 2\n''') == '1'\nassert solution('''2 1\n0 3\n''') == '0'\nassert solution('''2 1\n0 4\n''') == '1'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n0 1\") == \"0\"\nassert solution(\"3 1\\n0 0\\n1 1\\n1 0\") == \"1\"\nassert solution(\"5 3\\n0 1\\n1 0\\n2 0\\n3 1\\n3 0\\n4 0\") == \"4\"\nassert solution(\"10 20\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\") == \"10\"\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n1 2\n''') == '0'\nassert solution('''\n1 1\n1 2\n1 2\n''') == '1'\nassert solution('''\n4 5\n0 1\n0 2\n0 3\n0 4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '4'\n\n'''\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3\n0 1\n0 2\n0 3\n2 1\n''') == '1'\nassert solution('''\n4 3\n0 1\n1 2\n0 3\n2 1\n''') == '0'\nassert solution('''\n1 1\n1 1\n''') == '0'\n'''\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 1\n0 1\n''') == '0'\nassert solution('''\n2 1\n0 2\n''') == '1'\n"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n0 1\\n') == '0'\nassert solution('1 2\\n1 2\\n') == '1'\nassert solution('10 10\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\n9 9\\"
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n0 1\") == \"0\"\nassert solution(\"2 1\\n0 0\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\") == \"1\"\nassert solution(\"3 2\\n0 1\\n1 2\\n1 3\") == \"2\""
    },
    {
        "number": 3441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '''\n    5 1\n    0 1\n    0 2\n    2 2\n    2 3\n    0 3\n    3 0\n    '''\n) == \"0\"\nassert solution(\n    '''\n    5 2\n    1 1\n    1 2\n    2 0\n    3 2\n    3 1\n    '''\n) == \"1\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '0'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 10') == '10'\nassert solution('15 4') == '1'\n\n---"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(samples[0]) == '10'\nassert solution(samples[1]) == '1'\n\n\n-----Explanation-----\nThe input is a pair of numbers $X$ and $Y$. We define the interval between $X$ and $Y$ as the range defined by the numbers $X$ and $Y$. In the first sample, the range is equal to the number between $1$ and $10$. The number $73$ is the only number that is smaller than $X$ and greater than or equal to $Y$, so it is a Sheldon number. In the second sample, the number $73$ is the only number that is greater than or equal to $X$ and less than or equal to $Y$, so it is a Sheldon number.\n\n\"\"\"\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 10') == '10'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 2') == '9'\nassert solution('1 4') == '8'\n\"\"\""
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 100') == '100'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 10') == '10'\n"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == '0'\n\nassert solution(\"1 10\") == '10'\n\nassert solution(\"1 100\") == '100'\n\nassert solution(\"1 1000\") == '1001'\n\nassert solution(\"1 1001\") == '10010'"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 10') == '10'\nassert solution('1 3') == '1'\nassert solution('100 1000') == '0'\nassert solution('2 100') == '2'\nassert solution('2 5') == '1'\n\"\"\"\n\nn = input().split(\" \")\nn1 = int(n[0])\nn2 = int(n[1])\n\na = n1\nb = n2\ncount = 0\nwhile a < b:\n    if a % 2 == 0:\n        a += 1\n    else:\n        a += 2\n    count += 1\nprint(count)"
    },
    {
        "number": 3442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 10\n''') == '10'\nassert solution('''\n1 100\n''') == '99'\n\nsolution('''\n1\n''')\n\nsolution('''\n10\n''')\n\nsolution('''\n1 2\n''')\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n0 0\n1000 0\n0 1000\n1000 1000\n''') == '0'\nassert solution('''\n7\n-2000 -2000\n-2000 2000\n2000 -2000\n2000 2000\n2000 -2000\n-2000 -2000\n-2000 2000\n''') == '0'\n'''\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == 0\nassert solution(\"5\") == 0\nassert solution(\"1 0\") == 1\nassert solution(\"1 2\") == 1\nassert solution(\"1 2 3\") == 0\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\nassert solution('8\\n0 0\\n0 0\\n1000 1000\\n1000 1000\\n1000 0\\n1000 0\\n0 1000\\n1000 1000\\n0 0\\n0 0\\n1000 1000') == '4'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 0') == '1'\nassert solution('4 0') == '0'\nassert solution('3 0') == '0'\nassert solution('4 0') == '0'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0\"\nassert solution([1, 0, 1000, 0]) == \"0\"\nassert solution([1, 2, 3, 4]) == \"1\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"4 0\") == \"1\"\nassert solution(\"4 0 0\") == \"0\"\nassert solution(\"4 0 0 0\") == \"1\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '0'\n\nassert solution('1\\n0 0\\n1000 0\\n0 1000\\n1000 1000') == '1'\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0 0\\n1000 0\\n0 1000\\n1000 1000\") == \"0\"\nassert solution(\"5\\n0 0\\n1000 0\\n1000 1000\\n0 -1\\n1 1000\") == \"2\"\nassert solution(\"5\\n0 0\\n1000 0\\n1000 1000\\n0 -1\\n1 1000\") == \"1\"\n"
    },
    {
        "number": 3443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0 0\n1 0\n1 1000\n0 1000\n''') == '0'\nassert solution('''\n2\n0 0\n1 0\n0 1000\n1 1000\n''') == '1'\nassert solution('''\n3\n0 0\n1 0\n0 1000\n1 1000\n2 1000\n''') == '0'\nassert solution('''\n4\n-1000 -1000\n1000 1000\n0 0\n1 0\n0 1000\n1 1000\n''') == '1'\nassert solution('''\n5\n-1000 -1000\n1000 1000\n0 0\n1 0\n0 1000\n1 1000\n2 1000\n''') == '1'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n0 1 0.5\\n\") == \"0.500000000 1.000000000\"\nassert solution(\"2 1\\n0 1 0.5\\n\") == \"0.500000000 1.000000000\"\nassert solution(\"2 2\\n0 0.5 0.5\\n\") == \"0.500000000 1.000000000\"\nassert solution(\"2 3\\n0 0.5 0.5 0.5\\n\") == \"0.500000000 1.000000000\"\nassert solution(\"2 4\\n0 0.5 0.5 0.5 0.5\\n\") == \"0.500000000 1.000000000\"\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1') == '0.500000000 1.000000000'\nassert solution('5 5') == '0.500000000 0.500000000 0.500000000 0.500000000 0.500000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 0.5') == '0.500000000 1.000000000'\nassert solution('2 1') == '0.500000000 1.000000000'\nassert solution('1 1') == '0.500000000 1.000000000'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1\n0 1 0.5\n''') == '0.500000000 1.000000000'\nassert solution('''2 1\n0 1 0.5\n''') == '0.500000000 1.000000000'"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\\n0 1 0.5\") == \"0.500000000 1.000000000\"\nassert solution(\"3 1\\n0 1 0.5\\n0 2 0.2\\n0 2 0.2\\n1 1 0.2\\n2 2 0.5\") == \"0.2 0.2 0.2 0.500000000\"\nassert solution(\"5 1\\n0 1 0.5\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n1 2 0.5\\n2 3 0.2\\n3 3 0.2\") == \"-1 -1 -1 -1 -1\"\nassert solution(\"10 1\\n0 1 0.5\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0.2\\n0 2 0"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1\\n0 1 0.5\\n') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0.500000000 1.000000000'\nassert solution('2') == '-1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.500000000 1.000000000'\n"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n0 1 0.5\n''') == '0.500000000 1.000000000', 'The first example'\nprint('The first example passed!')\nassert solution('''\n3 5\n0 1 0.5 0.2\n0 2 0.2 0.5\n0 3 0.2 0.5\n''') == '0.300000000 1.0 0.300000000 1.0', 'The second example'\nprint('The second example passed!')"
    },
    {
        "number": 3444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1\n0 1 0.5\n\"\"\") == \"0.500000000 1.000000000\"\nassert solution(\"\"\"\n3 3\n0 1 0.2\n1 2 0.1\n0 1 0.1\n\"\"\") == \"0.400000000 1.000000000\"\nassert solution(\"\"\"\n5 5\n0 1 0.1\n1 2 0.1\n0 3 0.2\n1 2 0.2\n0 2 0.2\n\"\"\") == \"0.200000000 1.000000000\"\nassert solution(\"\"\"\n4 7\n0 2 0.2\n1 2 0.1\n0 3 0.1\n1 3 0.3\n0 2 0.3\n1 2 0.2\n\"\"\") == \"0.20000000000 1.000000000\"\nassert solution(\"\"\"\n8 8\n0 2 0.2\n1 2 0.1\n0 3 0.1\n1 3 0.3\n0 2 0.3\n1 2 0.2\n0 3 0.2\n1 3 0.3\n\"\"\") == \"0.500000000 1.000000000\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n1 1') == '7'\nassert solution('6\\n1 1\\n4 1') == '7'\nassert solution('6\\n1 1\\n4 1\\n1 5') == '7'\nassert solution('6\\n1 1\\n10 10') == '11'\nassert solution('6\\n1 1\\n10 8') == '11'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '0'\nassert solution('1\\n') == '0'\nassert solution('6\\n') == '7'\nprint('\"Run\" is good practice.')\nprint('\"Check\" is not.')\n\"\"\"\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('2') == '1'\nassert solution('5') == '5'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n1 5\n3 3\n''') == '5'\nassert solution('''8\n1 1\n3 1\n4 1\n6 1\n7 1\n''') == '6'\nassert solution('''10\n1 1\n5 1\n6 1\n7 1\n9 1\n10 3\n''') == '6'\nassert solution('''6\n1 1\n3 1\n5 1\n7 1\n9 1\n10 3\n''') == '9'\n"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == \"7\"\n\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n3\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n\"\"\"\n) == \"7\"\n\nassert solution(\n    \"\"\"\n3\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n\"\"\"\n) == \"10\"\n\nassert solution(\n    \"\"\"\n1\n1 1\n\"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n20\n20 20\n5 5\n
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 2\\n2 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n6\n1 1\n4 1\n1 5\n10 10\n10 8\n7 10\n''') == '7'\nassert solution('''\n5\n1 2\n4 2\n1 3\n10 3\n1 4\n''') == '3'\n'''"
    },
    {
        "number": 3445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n3\n3\n1 3\n2 3\n2 4\n1 4\n''') == '5'\n\nassert solution('''2\n4\n2 1\n4 2\n1 5\n3 6\n1 6\n3 8\n''') == '7'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\nab\\n3-b 5-b\\n6-a 2-b') == 'ba'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b') == '6-b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '6-a'\n\nassert solution('''\na\nb\nb\n''') == 'a'\n\nassert solution('''\na\na\nb\n''') == 'a'\n\nassert solution('''\na\na\na\n''') == 'a'\n\nassert solution('''\na\nb\na\n''') == 'a'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n0\n''') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '9-b'\nassert solution('1') == '8-a'\nassert solution('3') == '2-b'\nassert solution('6') == '6-a'\nassert solution('10') == '7-b'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"9-b\""
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\nassert solution('''\nb a\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '8-a'\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\na b\n3-b 5-b\n6-a 2-b\n2\naba\nbba\n''') == '9-b'\n\nassert solution('''\n0\naba\n''') == 'a'\n\nassert solution('''\n0\n''') == 'a'\n\nassert solution('''\n1\n''') == 'a'\n\nassert solution('''\n0\n''') == 'a'"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\na\n2-a\n3-a\n4-a\n5-a\n6-a\n7-a\n8-a\n9-a\n10-a\n11-a\n12-a\n13-a\n14-a\n15-a\n16-a\n17-a\n18-a\n19-a\n20-a\n21-a\n22-a\n23-a\n24-a\n25-a\n26-a\n\"\"\") == \"19-a\"\nassert solution(\"\"\"\n2\na\nb\n2-a\n3-a\n4-a\n5-a\n6-a\n7-a\n8-a\n9-a\n10-a\n11-a\n12-a\n13-a\n14-a\n15-a\n16-a\n17-a\n18-a\n19-a\n20-a\n21-a\n22-a\n23-a\n24-a\n25-a\n26-a\n\"\"\") == \"18-a\"\nassert solution(\"\"\"\n2\na\nb\n3-b\n4-b\n5-b\n6-b\n7-b\n8-b\n9-b\n10-b\n11-b\n12-b\n13-b\n14-b\n15-b\n16-b\n17-b\n18-b\n19-b\n20-b\n21-b\n22-b\n23-b\n24-b\n25-b\n26-b\n\"\"\") == \"11-b\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"\"\nassert solution(\"2\") == \"\"\nassert solution(\"2-b\") == \"9-b\"\nassert solution(\"2-b-a\") == \"8-a\"\n"
    },
    {
        "number": 3446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba') == '9-b'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba') == '8-a'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba') == '7-b'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba') == '6-a'\nassert solution('2\\nab\\n3-b 5-b\\n6-a 2-b\\n2\\naba\\nbba') == '5-b'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\nabc\\n1\\necho\\n1\\necho\\n1\\necho') == '3246U1R3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '3246'\nassert solution('echo') == '3246R3246'\nassert solution('echoecho') == '3246U3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\nabc\n1\nxyz\n3\nABC\n1\nABC\n\n''') == 'U3D', \"First\"\nassert solution('''\n2\nABC\n1\nXYZ\n3\nABC\n1\nABC\n\n''') == 'D1', \"Second\"\nassert solution('''\n1\nABC\n2\nDEF\n3\nGHI\n4\nJKL\n5\nMNO\n6\nPQRS\n7\nTUV\n8\nWXYZ\n9\nXZY\n\n''') == 'U1D3', \"Third\"\nassert solution('''\n1\nABC\n2\nDEF\n3\nGHI\n4\nJKL\n5\nMNO\n6\nPQRS\n7\nTUV\n8\nWXYZ\n9\nXZY\n10\nZYX\n\n''') == 'D1', \"Fourth\"\nassert solution('''\n2\nABC\n1\nXYZ\n3\nDEF\n4\nGHI\n5\nJKL\n6\nMNO\n7\nPQRS\n8\nTUV\n9\nWXYZ\n10\nXZY\n11\nZYX\n12\nYZX\n\n''') == 'U2D2', \"Fifth\"\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3246R3246\"\nassert solution
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '3246'\nassert solution('3') == '3246'\nassert solution('4') == '3246'\nassert solution('5') == '3246'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\necho\n1\nechoecho\n''') == '3246R3246', 'First'\n\nassert solution('''\n1\necho\n1\nechoecho\n''') == '2146RR22146', 'Second'\n\nassert solution('''\n1\necho\n1\nechoecho\n''') == '3246R3246', 'Third'\n\nassert solution('''\n1\necho\n1\nechoecho\n''') == '1E1E1E1E1E1E1E1E1E1E1', 'Fourth'\n\nassert solution('''\n1\necho\n1\nechoecho\n''') == '1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1', 'Fifth'"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '3246'\nassert solution('2') == '34'\nassert solution('3') == '34'\nassert solution('4') == '34'\nassert solution('5') == '34'\n"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '243'\nassert solution('2') == 'SMS'\nassert solution('3') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\necho\") == \"R3246\"\nassert solution(\"10\\nA\")) == \"5D\"\n\"\"\"\n\n\"\"\"\nFind maximum distance between two distinct numbers in an array\n\"\"\"\n\n\n\"\"\"\nFind kth largest element in a list\n\"\"\"\n\n\n\"\"\"\nFind the minimum difference between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the kth largest element in an array\n\"\"\"\n\n\n\"\"\"\nFind the minimum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the minimum difference between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the kth smallest element in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum difference between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum difference between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array\n\"\"\"\n\n\n\"\"\"\nFind the maximum distance between any pair of elements in an array"
    },
    {
        "number": 3447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1') == '1'\nassert solution('1\\necho\\n1') == '3246R3246'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"1 3\") == \"NO\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n1 2\n1 3\n''') == 'NO'\nassert solution('''3 1\n1 2\n3 1\n''') == 'YES'\nassert solution('''3 2\n1 1\n2 1\n''') == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n1 2\\n1 3') == 'YES'\nassert solution('2\\n2\\n1 2\\n1 3') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('5 5') == 'NO'\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_string) == 'YES'\n\nimport re"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 1\n1 2\n3 4\n3 2\n2 3\n5 6''') == 'NO'"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"YES\\n1 2\\n1 3\\n\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"YES\"\n"
    },
    {
        "number": 3448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('2 3') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1 4') == 'NO'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '176'\n\nassert solution('0') == '-1'\n\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '6 6',\n    '333333',\n    '300003',\n    '300003',\n    '300003',\n    '333333',\n) == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '7'\nassert solution('8') == '87'\nassert solution('13') == '326'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '176'\nassert solution('1') == '0'\nassert solution('2') == '46'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''9\n1\n6 6\n333333\n300003\n300003\n300003\n300003\n333333''') == '176'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '176'\nassert solution('8') == '176'\nassert solution('1') == '181'\nassert solution('2') == '178'\nassert solution('1') == '175'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '176'\nassert solution('8') == '304'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(None) == '1717'\nassert solution('1') == '1717'\nassert solution('8') == '749'\nassert solution('50') == '749'\nassert solution('6') == '35'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('9') == '176'\nassert solution('10') == '103'\nassert solution('1') == '73'\n"
    },
    {
        "number": 3449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('9\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\\n') == '176'\nassert solution('10\\n1\\n6 6\\n33333\\n300003\\n300003\\n300003\\n300003\\n333333\\n') == '300'\nassert solution('2\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\\n') == '0'\nassert solution('3\\n1\\n6 6\\n333333\\n300003\\n300003\\n300003\\n300003\\n333333\\n') == '0'\n\n----\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == '012'\nassert solution('123') == '123'\nassert solution('1234') == '123'\nassert solution('12345') == '12'\nassert solution('1234567') == '123'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1000000000000') == '120'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"51\") == \"5\"\nassert solution(\"9999\") == \"999\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '012'\nassert solution('999') == '999'\nassert solution('9999') == '999'\nassert solution('1') == '1'\nassert solution('1000000') == '123456789'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '12'\nassert solution('3') == '123'\nassert solution('6') == '666'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n') == '1'\nassert solution('999999\\n') == '9999'\nassert solution('2\\n') == '2'\nassert solution('4\\n') == '4'\nassert solution('8\\n') == '8'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '02'\nassert solution('3\\n') == '03'\nassert solution('10\\n') == '10'\nassert solution('9999\\n') == '999'\nassert solution('10000000\\n') == '0000'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n') == '1'\nassert solution('12\\n') == '012'\nassert solution('123\\n') == '123'\nassert solution('123456789\\n') == '123456789'\nassert solution('123456789\\n') == '123456789'\n"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"2\"\nassert solution(\"100000000000000000000000000\") == \"11\"\nassert solution(\"3\") == \"0\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10000\") == \"3\"\n\nn = int(stdin.read())"
    },
    {
        "number": 3450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '12'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"??\"\nassert solution(\"4 1\") == \"??\"\nassert solution(\"3 5\") == \"??\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n(1\\n0\\n0\\n)1\\n') == '?', \"Should be '?'\"\nassert solution('2 1\\n()\\n1\\n0\\n') == '?', \"Should be '?'\"\nassert solution('5 5\\n(())()()(())\\n') == '-500', \"Should be -500\"\nassert solution('5 5\\n()()()()(())\\n') == '-500', \"Should be -500\"\nassert solution('5 4\\n((())())\\n') == '-500', \"Should be -500\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '4 1\\n((()\\n480\\n617\\n-570\\n928\\n') == '?',\n'4 1\\n(((()\\n480\\n617\\n-570\\n928\\n'\n)\n)\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"3 5\") == \"2\"\nassert solution(\"1\") == \"??\"\nassert solution(\"4\") == \"??\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 1\\n((()\\n480\\n617\\n-570\\n928') == '?','solution')\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''(((((((((((((((()))))))))))))))))''') == '?', 'Soln 1'\nassert solution('''(((((((((((((((())))))))))))))\n(((((((((((((()))))))))))))))))\n(((((((((((((()))))))))))))))))))''') == '?', 'Soln 2'"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"??\"\n\nSample Input 2:\n5 2\n(())\n(())(\n\nSample Output:\n-100\nSample Input 3:\n5 2\n((()\n(()\n\nSample Output:\n-1000\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '?', \"Tests failing\"\n\nSample Input:\n3 6\n()\n100\n400\n500\nSample Output:\n-100\n\"\"\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1') == '480', \"Error with sample input.\"\n"
    },
    {
        "number": 3451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"??\"\nassert solution(\"3 1\") == \"??\"\nassert solution(\"2 1\") == \"??\"\nassert solution(\"3 1\") == \"??\"\nassert solution(\"10 1\") == \"??\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\n3 1 3 5\n3 1 3 6\n3 1 3 6\n3 1 3 6\n3 1 3 6\n3 1 3 6\n3 1 3 6\n3 1 3 6\n3 1 3 6\n3 1 3 6\n''') == '4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"4 5 6 7 8 9 10 11 12 13\"\n\"\"\""
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '5 6 7 8 11 12 13'\nassert solution('''\n4 5 5\n5 1 6\n2 4 4\n3 3 4\n2 3 4\n1 2 2\n1 1 2\n1 2 1\n1 3 1\n1 3 2\n''') == '5 6 7 8 11 12 13'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 3 5\n2 2 4\n3 1 3 6\n2 2 4\n''') == '''\n2 4\n5 6\n7 8 9 10 11 12 13\n'''\nassert solution('''\n5\n1 3 2 4\n2 2 5 6\n3 3 6 7\n4 1 4 7\n4 8 9 10\n5 5 10 11\n6 6 11 12\n7 7 12 13\n8 8 13 14\n9 9 14 15\n''') == '''\n4 8 9 10 11 12 13 14 15\n'''\nassert solution('''\n4\n3 1 2 2\n2 1 2 3\n3 2 3 4\n2 2 4 5\n''') == '''\n'''"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'None'\nassert solution
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n''') == '2 4\\n5 6\\n7 8 9 10 11 12 13\\n'\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10\n10 2 4\n2 3 4\n1 3 5\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\nSample Output:\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\") == \"\"\"\n2 4\n5 6\n7 8 9 10 11 12 13\n\"\"\".strip()\n\nassert solution(\"\"\"\n10\n2 2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\nSample Output:\n\"\"\") == \"\"\"\nNone\n\"\"\".strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"13\\n2 2 4\\n3 1 3 5\\n2 2 4\\n3 1 3 6\\n2 2 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8\\n2 11 13\\n2 10 12\\n2 11 13\\n2 10 12\") == \"2 4\\n5 6\\n7 8 9 10 11 12 13\"\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n2 4\n3 1 3 5\n2 2 4\n3 1 3 6\n2 2 6\n2 4 5\n2 8 9\n2 7 9\n2 7 8\n2 11 13\n2 10 12\n2 11 13\n2 10 12\n\"\"\") == \"\"\"\n5 6\n7 8 9 10 11 12 13\n\"\"\"[:-1]\n\nassert solution(\"\"\"\n3\n3 1 3\n2 2 4\n3 1 3\n\"\"\") == \"\"\"\n5 6\n7 8 9 10 11 12 13\n\"\"\"[:-1]\n"
    },
    {
        "number": 3452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 4\\n3 1 3 5') == '2 4'\nassert solution('3\\n1 3 5\\n2 1 3 6') == '1 3 6'\nassert solution('5\\n1 3 5\\n2 1 3 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8') == '2 4 5 7 8 9'\nassert solution('5\\n1 3 5\\n2 1 3 6\\n2 4 5\\n2 8 9\\n2 7 9\\n2 7 8') == '2 4 5 7 8 9'\nassert solution('2\\n6 5\\n1 3 4\\n2 1 3 5\\n1 1 1 3\\n1 1 1 1 3\\n1 1 1 1 1 4\\n1 1 1 1 1 5\\n1 1 1 1 1 6\\n1 1 1 1 1 7\\n1 1 1 1 1 8\\n1 1 1 1 1 9\\n1 1 1 1 1 10\\n1 1 1 1 1 11\\n1 1 1 1 1 12\\n1 1 1 1 1 13') == '1 1 1 1 1 2 3 4 5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 5\\n2 3\\n3 4\\n4 5\\n5 4\\n2 3 12\") == \"35 39 36 27 29\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"35 39 36 27 29\"\nassert solution(\"5 1\") == \"37\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n1 2\n''') == '35 39 36 27 29'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"6 10\\n7 11 6\\n7 2 2 2\\n3 8 4 8\\n5 3 3 3\\n5 3 1 1\\n5 3 1 1\\n5 3 3 3\\n3 8 4 8\\n5 3 3 3\\n7 11 6\\n7 2 2 2\\n3 8 4 8\\n5 3 3 3\\n5 3 1 1\\n5 3 1 1\\n5 3 3 3\\n3 8 4 8\\n7 11 6\" == \"83 20 37 12 47 39\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"35 39 36 27 29\"\nassert solution(\"4 5\\n1 2 3\\n1 4 8\\n2 3 12\\n3 5 4\\n4 5 2\") == \"16 17 17 16 17 17 16\"\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\nassert solution('''\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n10\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '10'\nassert solution('''\n15\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '15'\nassert solution('''\n10\n1\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 5') == '35 39 36 27 29'\nassert solution('0 0') == '0'"
    },
    {
        "number": 3453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n\nassert solution('''\n5 5\n1 2 3\n1 4 8\n2 3 12\n3 5 4\n4 5 2\n''') == '35 39 36 27 29'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''\n2\n3 2 1\n''') == '0 672'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 2 1') == '0 672'\nassert solution('3 3\\n3 2 1') == '0 0'\nassert solution('3 5\\n5 3 2 1') == '0 0'\nassert solution('4 5\\n5 4 3 2 1') == '0 0'\nassert solution('5 7\\n7 5 4 2 1') == '0 0'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '0 672'\nassert solution('5 4') == '0 933'\nassert solution('2 2') == '0 0'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3\\n3 2 1') == '0 672'\nassert solution('5 2\\n2 3 1') == '0 1'\nassert solution('3 3\\n4 3 2 1') == '0 4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\n\nassert solution('''\n4 5\n3 2 1\n4 3 4 1\n''') == '0 16187'\n\nassert solution('''\n3 2\n3 2 1\n''') == '0 16187'\n\nassert solution('''\n5 5\n4 3 2 1\n4 2 4 1\n2 2 4 1\n''') == '0 16188'\n\nassert solution('''\n5 4\n5 3 2 1\n4 2 4 1\n2 2 4 1\n''') == '0 16188'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n3 2 1\n''') == '0 672'\nassert solution('''\n2 3\n2 1 2\n''') == '0 0'\nassert solution('''\n3 3\n3 2 1\n''') == '1 1'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 2, 1]) == '0 672'\nassert solution([3, 1, 1]) == '0 672'\nassert solution([1, 2, 2]) == '1 3'\n"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '0 672'\nassert solution('9 1') == '1 17'\nassert solution('100 1') == '1 22'"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '0 672'\nassert solution('3 3\\n1 2 2') == '1 672'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 1\n3 2 1\n''') == '672'"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\\n\") == \"2.500000\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2.500000\"\nprint(solution())\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50\") == \"2.500000\"\n\"\"\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5 100') == '2.5'\nassert solution('5 2 100') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"2 1 100\") == \"1.0\"\nassert solution(\"4 5 100\") == \"2.5000000\"\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == \"2.500000\"\n\n\"\"\""
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 2 100\n10 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n\"\"\") == \"2.500000\"\nprint(solution(\n\"\"\"\n2 5 100\n0 10 10\n1 10 5\n1 20 35\n2 2 18\n2 40 50\n\"\"\") == \"Impossible\")\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 5 100\\n0 10 10\\n1 10 5\\n1 20 35\\n2 2 18\\n2 40 50') == '2.500000'\nassert solution('6 5 1000\\n0 0 0\\n1 1 1\\n2 2 2\\n3 3 3\\n4 4 4\\n5 5 5\\n6 6 6\\n7 7 7\\n8 8 8\\n9 9 9\\n10 10 10\\n11 11 11\\n12 12 12\\n13 13 13\\n14 14 14') == 'Impossible'\n"
    },
    {
        "number": 3455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '2.500000'\n'''\n\n'''\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 5 4\") == \"3\"\nassert solution(\"4\\n2 5 4 3\") == \"4\"\nassert solution(\"5\\n3 5 4 3 2\") == \"5\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n5 3 4''') == '3'\nassert solution('''4\n1 1 2 1''') == '2'\nassert solution('''1\n0''') == '0'\nassert solution('''2\n5 3 4\n4 5 1 3''') == '2'\n''')"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5 3 4') == '2'\nassert solution('1000000') == '3000000'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 3 4\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n5 3 4') == '3'\nassert solution('4\\n5 6 7 8') == '4'\nassert solution('100000\\n0 0 0 0 0 0 0') == '101000'\nassert solution('2\\n1 1') == '0'\nassert solution('100000\\n0 0 0 0 0 0 0') == '100000'\n\"\"\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n5 3 4\\n') == '3'\nassert solution('6\\n10 7 5 4 1\\n') == '3'\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == \"3\"\n"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 4\\n') == '3'\nassert solution('5 5 3\\n') == '2'\nassert solution('5 5 5\\n') == '1'\nassert solution('6 7 7\\n') == '4'\nassert solution('1000000 1000000000\\n') == '39999999999999996'"
    },
    {
        "number": 3456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n5 3 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n5\n5 3 4 2 6\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 2 2\") == \"3\"\nassert solution(\"5 5 5\") == \"4\"\nassert solution(\"20 200 1\") == \"81\"\nassert solution(\"1000 1000 1\") == \"999999\""
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 1 1\n''') == '2'\nassert solution('''3 1 1\n''') == '3'\nassert solution('''20 1 1\n''') == '10'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == \"2\"\nassert solution(\"2 2 1\") == \"3\"\nassert solution(\"3 3 1\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"3 3 3\") == \"6\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '2'\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n\n>>> solution('2 1 1')\n'2'\n>>> solution('2 2 1')\n'1'\n>>> solution('2 3 1')\n'0'\n>>> solution('1 1 1')\n'1'\n>>> solution('20 100 100')\n'1'\n>>> solution('20 20 100')\n'0'\n>>> solution('1000 1000 1000')\n'0'\n>>> solution('20 50 50 50')\n'1'\n>>> solution
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"2\"\nassert solution(\"2 2 1\") == \"3\"\nassert solution(\"5 1 3\") == \"13\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '2'\nassert solution('3 10 10') == '3'"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1\") == \"2\"\n"
    },
    {
        "number": 3457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1 1\n1 2 1\n1 3 2\n1 4 3\n1 5 4\n1 6 5\n1 7 6\n1 8 7\n1 9 8\n1 10 9\n1 11 10\n1 12 11\n1 13 12\n1 14 13\n1 15 14\n1 16 15\n1 17 16\n1 18 17\n1 19 18\n1 20 19\n1 21 20\n1 22 21\n1 23 22\n1 24 23\n1 25 24\n1 26 25\n1 27 26\n1 28 27\n1 29 28\n1 30 29\n1 31 30\n1 32 31\n1 33 32\n1 34 33\n1 35 34\n1 36 35\n1 37 36\n1 38 37\n1 39 38\n1 40 39\n1 41 40\n1 42 41\n1 43 42\n1 44 43\n1 45 44\n1 46 45\n1 47 46\n1 48 47\n1 49 48\n1 50 49\n1 51 50\n1 52 51\n1 53 52\n1 54 53\n1 55 54\n1 56 55\n1 57 56\n1 58 57\n1 59 58\n1 60 59\n1 61 60\n1 62 61\n1 63 62\n1 64 63\n1 65 64\n1 66 65\n1 67 66\n1 68 67\n1 69 68\n1 70 69\n1 71 70\n1 72 71\n1 73 72\n1 74 73\n1 75 74\n1 76 75\n1 77 76\n1 78 77\n1 79 78\n1 80 79\n1 81 80\n1 82 81\n1 83 82\n1 84 83\n1 85 84\n1 86 85\n1 87 86\n1 88 87\n1 89 88\n1 90 89\n1 91 90\n1 92 91\n1 93 92\n1 94 93\n1 95 94\n1 96 95\n1 97 96\n1 98 97\n1 99 98\n1 100 99\n1 101 100\n1 102 101\n1 103 102\n1 104 103\n1 105 104\n1 106 105\n1 107 106\n1 108 107\n1 109 108\n1 110 109\n1 111 110\n1 112 111\n1 113 112\n1 114 113\n1 115 114\n1 116 115\n1 117 116\n1 118 117\n1 119 118\n1 120 119\n1 121 120\n1 122 121\n1 123 122\n1 124 123\n1 125 124\n1 126 125\n1 127 126\n1 128 127\n1 129 128\n1 130 129\n1 131 130\n1 132 131\n1 133 132\n1 134 133\n1 135 134\n1 136 135\n1 137 136\n1 138 137\n1 139 138\n1 140 139\n1 141 140\n1 142 141\n1 143 142\n1 144 143\n1 145 144\n1 146 145\n1 147 146\n1 148 147\n1 149 148\n1 150 149\n1 151 150\n1 152 151\n1 153 152\n1 154 153\n1 155 154\n1 156 155\n1 157 156\n1 158 157\n1 159 158\n1 160 159\n1 161 160\n1 162 161\n1 163 162\n1 164 163\n1 165 164\n1 166 165\n1 167 166\n1 168 167\n1 169 168\n1 170 169\n1 171 170\n1 172 171\n1 173 172\n1 174 173\n1 175 174\n1 176 175\n1 177 176\n1 178 177\n1 179 178\n1 180 179\n1 181 180\n1 182 181\n1 183 182\n1 184 183\n1 185 184\n1 186 185\n1 187 186\n1 188 187\n1 189 188\n1 190 189\n1 191 190\n1 192 191\n1 193 192\n1 194 193\n1 195 194\n1 196 195\n1 197 197\n1 198 198\n1 199 199\n1 200 200\n1 201 201\n1 202 202\n1 203 203\n1 204 204\n1 205 205\n1 206 206\n1 207 207\n1 208 208\n1 209 209\n1 210 210\n1 211 211\n1 212 212\n1 213 213\n1 214 214\n1 215 215\n1 216 216\n1 217 217\n1 218 218\n1 219 219\n1 220 220\n1 221 221\n1 222 222\n1 223 223\n1 224 224\n1 225 225\n1 226 226\n1 227 227\n1 228 228\n1 229 229\n1 230 230\n1 231 231\n1 232 232\n1 233 233\n1 234 234\n1 235 235\n1 236 236\n1 237 237\n1 238 238\n1 239 239\n1 240 240\n1 241 241\n1 242 242\n1 243 243\n1 244 244\n1 245 245\n1 246 246\n1 247 247\n1 248 248\n1 249 249\n1 250 250\n1 251 251\n1 252 252\n1 253 253\n1 254 254\n1 255 255\n1 256 256\n1 257 257\n1 258 258\n1 259 259\n1 260 260\n1 261 261\n1 262 262\n1 263 263\n1 264 264\n1 265 265\n1 266 266\n1 267 267\n1 268 268\n1 269 269\n1 270 270\n1 271 271\n1 272 272\n1 273 273\n1 274 274\n1 275 275\n1 276 276\n1 277 277\n1 278 278\n1 279 279\n1 280 280\n1 281 281\n1 282 282\n1 283 283\n1 284 284\n1 285 285\n1 286 286\n1 287 287\n1 288 288\n1 289 289\n1 290 290\n1 291 291\n1 292 292\n1 293 293\n1 294 294\n1 295 295\n1 296 296\n1 297 297\n1 298 298\n1 299 299\n1 300 300\n1 301 301\n1 302 302\n1 303 303\n1 304 304\n1 305 305\n1 306 306\n1 307 307\n1 308 308\n1 309 309\n1 310 310\n1 311 311\n1 312 312\n1 313 313\n1 314 314\n1 315 315\n1 316 316\n1 317 317\n1 318 318\n1 319 319\n1 320 320\n1 321 321\n1 322 322\n1 323 323\n1 324 324\n1 325 325\n1 326 326\n1 327 327\n1 328 328\n1 329 329\n1 330 330\n1 331 331\n1 332 332\n1 333 333\n1 334 334\n1 335 335\n1 336 336\n1 337 337\n1 338 338\n1 339 339\n1 340 340\n1 341 341\n1 342 342\n1 343 343\n1 344 344\n1 345 345\n1 346 346\n1 347 347\n1 348 348\n1 349 349\n1 350 350\n1 351 351\n1 352 352\n1 353 353\n1 354 354\n1 355 355\n1 356 356\n1 357 357\n1 358 358\n1 359 359\n1 360 360\n1 361 361\n1 362 362\n1 363 363\n1 364 364\n1 365 365\n1 366 366\n1 367 367\n1 368 368\n1 369 369\n1 370 370\n1 371 371\n1 372 372\n1 373 373\n1 374 374\n1 375 375\n1 376 376\n1 377 377\n1 378 378\n1 379 379\n1 380 380\n1 381 381\n1 382 382\n1 383 383\n1 384 384\n1 385 385\n1 386 386\n1 387 387\n1 388 388\n1 389 389\n1 390 390\n1 391 391\n1 392 392\n1 393 393\n1 394 394\n1 395 395\n1 396 396\n1 397 397\n1 398 398\n1 399 399\n1 400 400\n1 401 401\n1 402 402\n1 403 403\n1 404 404\n1 405 405"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 5') == '7'\nassert solution('10\\n2 4 5 6 8 9') == '4'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 3 5\n''') == '7'\nassert solution('''\n5\n0 1 0 1 0\n''') == '1'\n\"\"\""
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 2 3') == '2'\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2 3 4\") == \"7\"\nassert solution(\"1 2 3\") == \"2\"\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 4 3 5\n''') == '7'\nassert solution('''\n9\n2 4 5 1 3 1 2 6\n''') == '8'\nassert solution('''\n9\n1 2 4 3 5\n''') == '6'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3 5') == '7'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3 5') == '7'\nassert solution('2 1 3 4 5') == '9'\nassert solution('3 1 3 5') == '9'\nassert solution('4 1 2 3 4 5') == '7'\nassert solution('5 1 2 3 4 5') == '7'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 5\\n\") == '7'\nassert solution(\"10\\n7 9 8 5 3 2 1 4 6\\n\") == '4'\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9 10\\n\") == '7'\n\"\"\"\nn = int(input())\nlist1 = input().split(' ')\nlist2 = input().split(' ')\nans = 0\nfor i in range(len(list1)):\n    ans += int(list1[i]) ^ int(list2[i])\nprint(ans)\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3') == '7'\nassert solution('1 2 3 4') == '0'\n"
    },
    {
        "number": 3458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 3 5\\n') == '7'\nassert solution('1\\n10 20 50\\n') == '55'\n\n\"\"\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n4\nfred dinosaur 2 jets\njohn rhinocerous 2 jets\nmary rhinocerous 2 jets\nruth platypus 1 rockets\n''') == '''\nfred jets\njohn jets\nruth rockets\n'''\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'john jets\\n'"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4\nfred dinosaur 2 jets\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n4\nfred dinosaur 2 jets\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\nruth platypus 1\n''') == '''\nruth jets\njohn jets\n'''\n\nassert solution('''\n3\n5\nfred dinosaur 2 jets\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n4\nfred dinosaur 2 jets\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\nruth platypus 1\n''') == '''\nruth jets\njohn jets\nmary jets\n'''\n\nassert solution('''\n2\n6\nfred dinosaur 2 jets\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n4\ndinozilla 5\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\ndinozilla 5\n''') == '''\ndinozilla 5\ndinozilla 5\n'''\n\nassert solution('''\n2\n5\ndinozilla 5\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n4\ndinozilla 5\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\ndinozilla 5\n''') == '''\ndinozilla 5\ndinozilla 5\n'''\n\nassert solution('''\n2\n3\ndinozilla 5\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\n4\ndinozilla 5\njohn rhinocerous 2\nmary rhinocerous 2\nruth platypus 1\ndinozilla 5\n''') == '''\nruth platypus 1\ndinozilla 5\n'''"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Impossible\"\nassert solution(\"5\") == \"john jets\"\nassert solution(\"4\") == \"ruth rockets\"\nassert solution(\"10\") == \"john jets\"\nassert solution(\"15\") == \"john jets\"\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == '''\nmary jetsons\njohn jets\nruth rockets\n'''\nassert solution('''\n2\n2\njets\n''') == '''\njets\n'''"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == 'Impossible.'\nassert solution('4') == 'john rockets'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == 'Impossible.'\nassert solution('2\\n') == 'Fred dinosaur 2 jets\\nJohn Rhinocerous 2 jetsons\\nMary Rhinocerous 2 jetsons rockets\\nRuth Platypus 1 rockets'\n\nIn sample input, the first and only test case is a sample input.\n\"\"\""
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == 'ruth jetsons'\n"
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"Impossible.\"\nassert solution(\"2\") == \"fred jetsons\\njohn jets\\nruth rockets\\n\"\nassert solution(\"3\") == \"fred jetsons\\njohn jets\\n\"\nassert solution(\"4\") == \"fred jetsons\\njohn jets\\n\"\nassert solution(\"2 4\") == \"ruth rockets\\n\""
    },
    {
        "number": 3459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n4\nfred dinosaur 2 jets jetsons\njohn rhinocerous 2 jets rockets\nmary rhinocerous 2 jetsons rockets\nruth platypus 1 rockets\n''') == '''\nfred jetsons\njohn jets\nruth rockets\n'''\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n5 1\n0 1\n''') == '2 0 1'\nassert solution('''\n2\n5 3\n-10 9\n-2 2\n''') == '1 1 1'\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1 2'\nassert solution('3') == '1 2 1'"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"1 1 1\"\n\nassert solution(\"\"\"\n1\n2\n1\n\"\"\") == \"2 2 1\"\n\nassert solution(\"\"\"\n1\n2\n1\n\"\"\") == \"1 2 2\"\n\nassert solution(\"\"\"\n1\n3\n1\n\"\"\") == \"1 1 1\"\n\nassert solution(\"\"\"\n1\n3\n1\n\"\"\") == \"1 1 1\""
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n4 3\n-10 9\n-2 3\n\"\"\") == \"1 2 1\"\nassert solution(\"\"\"\n2\n5 5\n-2 -2 -5\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\n'''\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n4 3\n-10 9\n-2 3\n\"\"\") == \"1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1 2 1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1 2 1 2 1\"\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n4 3\n-10 9\n-2 3\n''') == \"1 2 1\"\nassert solution('''2\n5 3\n-4 9\n2 -3\n3 6\n-5 4\n''') == \"3 3\"\nassert solution('''3\n8 3\n-3 -5\n1 1\n-4 -7\n''') == \"2 1\"\n''')"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1', 'Case Not Passed'\nassert solution('2') == '1 2', 'Case Not Passed'\nassert solution('3') == '1 2 1', 'Case Not Passed'\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass TestSum(unittest.TestCase):\n    def test_case_01(self):\n        self.assertEqual(solution('1'), '1 1 1', 'Case Not Passed')\n"
    },
    {
        "number": 3460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n4 3\n-10 9\n-2 3\n''') == '1 2 1'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n1\\n7\\n3\\n2\\n3') == '2.125'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nprint(solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n'''))\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '2.125'\nassert solution('3') == '2.125'\nassert solution('5') == '4.875'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125'\nprint(solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n'''))"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 3\n3 4 5\n5 6 7\n''') == '2.125'\nassert solution('''\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '1.414'\nassert solution('''\n3\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '0.714'\nassert solution('''\n4\n2 6 10\n1 3 7\n5 6 9\n4 7 10\n''') == '2.125'\n'''\nThe test cases are inspried to complete the task in small time. For each test case, at most 2 minutes should be used to compute the task. It is required to return the output after the function is called.\n\nTEST CASE 1:\nInput:\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\nOutput:\n2.125\nTest Case 2:\nInput:\n4\n2 6 10\n1 3 7\n5 6 9\n4 7 10\nOutput:\n0.714\nTest Case 3:\nInput:\n4\n1 1 7\n3 2 3\n5 1 4\n6 10 10\nOutput:\n2.125\n'''\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2.125\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([4, 1, 7]) == \"2.125\"\n\nassert solution([3, 2, 3]) == \"2.125\"\n\nassert solution([5, 1, 4]) == \"1.75\"\n\nassert solution([6, 10, 10]) == \"1.0\"\n\"\"\""
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '2.125'\nassert solution('2\\n') == '1.5'\nassert solution('1\\n') == '1'"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '4\\n'\n    '1 1 7\\n'\n    '3 2 3\\n'\n    '5 1 4\\n'\n    '6 10 10\\n'\n    ) == '2.125'\n\nassert solution(\n    '3\\n'\n    '0 0 1\\n'\n    '1 1 2\\n'\n    '2 2 3\\n'\n    '3 3 4\\n'\n    '4 4 5\\n'\n    '5 5 6\\n'\n    '6 6 7\\n'\n    '7 7 8\\n'\n    '8 8 9\\n'\n    '9 9 10\\n'\n    ) == '2.1375'\n\nassert solution(\n    '5\\n'\n    '0 1 1\\n'\n    '1 2 2\\n'\n    '2 3 3\\n'\n    '3 4 4\\n'\n    '4 5 5\\n'\n    '5 6 6\\n'\n    '6 7 7\\n'\n    '7 8 8\\n'\n    '8 9 9\\n'\n    '9 10 10\\n'\n    ) == '2.2375'\n"
    },
    {
        "number": 3461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'First'\nassert solution('''\n4\n2 2 2\n2 2 2\n3 2 3\n3 2 3\n''') == '2.125', 'Second'\nassert solution('''\n9\n7 9 9\n3 2 4\n5 8 7\n8 8 8\n9 8 9\n9 9 9\n10 9 9\n10 9 9\n''') == '2.125', 'Third'\nassert solution('''\n1 1 7\n3 2 3\n5 1 4\n6 10 10\n''') == '2.125', 'Fourth'\n'''\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('*.*') == ['main.c', 'a.out', 'def solution(stdin: str) -> str:', 'pass']\n\n--->\n\n\nSample Input:\na*.c\n10\na.out\na.out\ny.c\nb.c\nb.c\na.out\nc.c\nd.c\nSample Output:\na.c\na.c\na.out\nc.c\nd.c\nb.c\ny.c\n\"\"\""
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"*.*\") == [\"main.c\", \"a.out\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == [\"main.c\", \"a.out\", \"readme\"]\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"main.c\""
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''*.*''') =='main.c\\na.out\\ndef solution(stdin: str) -> str:\\n\\tpass'\nassert solution('''*.*''') =='main.c\\na.out\\ndef solution(stdin: str) -> str:\\n\\tpass''')"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('*.*') == ['main.c', 'a.out', 'def', 'yacc']\nassert solution('*.c') == ['main.c', 'a.out', 'def', 'yacc']\nassert solution('*.*.c') == ['main.c', 'a.out', 'def', 'yacc']\nassert solution('*.[ch]') == ['main.c', 'a.out', 'def', 'yacc']\nassert solution('*.c*') == ['main.c', 'a.out', 'def', 'yacc']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('*.*') == ['main.c', 'a.out','readme']\n\"\"\""
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('a.out') =='main.c', 'First assert failed'\nassert solution('*.c') == 'a.out', 'Second assert failed'\nassert solution('a.txt') == 'a.txt', 'Third assert failed'\nassert solution('*.txt') =='main.c', 'Forth assert failed'\nassert solution('*.c') == 'a.c', 'Fifth assert failed'\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '*.*') == ['main.c', 'a.out', 'def solution(stdin: str) -> str:']\nassert solution(\n    '*.*') == ['a.out', 'def solution(stdin: str) -> str:']\nassert solution(\n    'a.*') == ['a.out', 'def solution(stdin: str) -> str:']\nassert solution(\n    '*') == ['main.c', 'a.out', 'def solution(stdin: str) -> str:']\nassert solution(\n    'a') == ['a.out', 'def solution(stdin: str) -> str:']\n"
    },
    {
        "number": 3462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '*.*\\n\\n\\nmain.c\\n\\nreadme\\n\\nyacc\\n') =='main.c\\nreadme\\nyacc'\nassert solution(\n    '*.c\\n\\n\\nmain.c\\n\\nreadme\\n\\nyacc\\n') =='main.c\\nreadme\\nyacc'\nassert solution(\n    '*.c*\\n\\n\\nmain.c\\n\\nreadme\\n\\nyacc\\n') =='main.c\\nreadme\\nyacc'\n\"\"\"\nimport re\nimport sys\npattern = sys.stdin.readline().strip()\nn = int(sys.stdin.readline())\nfiles = [sys.stdin.readline().strip() for _ in range(n)]\nmatches = []\nfor f in files:\n    if re.search(pattern, f):\n        matches.append(f)\n\nfor i in matches:\n    print(i)\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1\n0.500000\n''') == '0.500000', 'Should be 0.500000'\nassert solution('''\n1 1\n1.00000\n''') == '0.500000', 'Should be 0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('1 2') == '1.000000'\nassert solution('2 1') == '1.000000'\nassert solution('1 0.1') == '0.990000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1 1\n0.500000\n0.30000''') == '0.30000'\nprint(solution('''1 1\n0.500000\n0.30000'''), end='')\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 1\\n0.50') == '0.5'\nassert solution('1 1\\n0.501') == '0.501'\nassert solution('1 1\\n0.5001') == '0.5'\nassert solution('1 1\\n0.499') == '0.499'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n0.500000\\n') == '0.500000'\nprint('solution() is working!')"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n0.5\n0.5\n0.7\n0.25\n0.125\n0.16666666666666666\n''') == '0.8333333333333334'\nassert solution('''\n3 3\n0.2\n0.5\n0.7\n0.1\n0.7\n0.1875\n''') == '0.421875'\nassert solution('''\n4 4\n0.2\n0.5\n0.7\n0.1\n0.7\n0.1875\n''') == '0.5'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n0.500001\") == \"0.500000\"\nassert solution(\"1 1\\n0.500001\") == \"0.500000\"\nassert solution(\"1 1\\n0.500001\") == \"0.500000\"\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\n0.500000') == '0.500000'\nassert solution('1 1\\n0.501000') == '0.501000'\nassert solution('1 1\\n0.500000\\n0.500001') == '0.500000'\nassert solution('1 1\\n0.500000\\n0.500001\\n0.499976') == '0.500000'\nassert solution('1 1\\n0.500000\\n0.500001\\n0.499976\\n0.499976\\n0.499976') == '0.500000'\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('0.1 0.4 0.99 0.01 0.2 0.3 0.8') == '0.9900'\n'''\n"
    },
    {
        "number": 3463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.500000'\nassert solution('2 2') == '0.500000'\nassert solution('3 3') == '0.500000'\nassert solution('4 4') == '0.500000'\nassert solution('5 5') == '0.500000'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"0 4.9\") == \"0.0\"\nassert solution(\"0 4.1\") == \"0.0\"\nassert solution(\"0 4.01\") == \"0.0\"\nassert solution(\"0.9 4.1\") == \"0.0\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 50.0') == '50.0'\nassert solution('0 51.1') == '50.0'\nassert solution('0 50.1') == '50.0'\nassert solution('0 50.4') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0 49.9') == '0.0'\nassert solution('0 10.9') == '10.0'\nassert solution('0 100.0') == '100.0'\nassert solution('0 50.0') == '0.0'"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 49.9') == '0.0'\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0 0.4\") == \"0.0\"\nassert solution(\"20.25 0.1\") == \"7.75\"\nassert solution(\"19.4 0.1\") == \"2.2\"\nassert solution(\"0.5 1.2\") == \"3.32\"\nassert solution(\"10.7 0.1\") == \"10.1\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\nassert solution(\"0 0.9\") == \"1.0\"\nassert solution(\"1 0.9\") == \"1.0\"\nassert solution(\"10 0.9\") == \"0.1\"\nassert solution(\"1 0.1\") == \"0.9\"\n"
    },
    {
        "number": 3464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 49.9\") == \"0.0\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n1 2\n2 3\n3 1\n4 1''') == '1 2\\n2 1\\n3 2\\n1 3\\n'''"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1 2\\n3 1\\n2 1\\n4 1'\n\n---Input:---\n10\n1 2\n2 3\n3 1\n4 1\n5 6\n6 7\n7 8\n8 9\n9 10\n10 5\nSample Output:\n7 1\n2 3\n1 4\n9 10\n5 6\n10 7\n8 8\n7 9\n6 6\n4 5\n5 4\n6 5\n7 5\n3 5\n1 4\n3 5\n2 4"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('3') == '1 2 3'\nassert solution('4') == '1 2 3 4'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n2 3\n3 1\n4 1''') == '''1 2\n2 3\n3 1'''"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n2\n1 2\n2 3\n3 1\n4 1\n\"\"\") == \"\"\"\n2 1\n2 1\n3 2\n1 3\n\"\"\".strip()\n\nassert solution(\"\"\"\n1\n2 3\n3 1\n4 1\n\"\"\") == \"\"\"\n2 1\n1 3\n3 2\n4 1\n\"\"\".strip()\n\nassert solution(\"\"\"\n3\n1 2\n2 3\n3 1\n\"\"\") == \"\"\"\n1 2\n3 1\n3 2\n\"\"\".strip()\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2\\n2 3\\n3 1\\n4 1\\n') == '1 2\\n2 3\\n3 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 3\\n3 1\\n4 1\\n\") == \"4 1\\n2 1\\n3 2\\n1 3\"\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2\\n2 3') == '2 1'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2\\n2 3\\n3 1') == '4 1\\n2 1\\n3 2\\n1 3'\nassert solution('3\\n1 2\\n2 1\\n3 1') == '3 1\\n1 3\\n2 2'\nassert solution('3\\n1 2\\n2 3\\n3 1') == '4 1\\n2 1\\n3 2\\n1 3'\n"
    },
    {
        "number": 3465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 1') == '1 2\\n2 3\\n3 1'\nprint(solution('4\\n1 2\\n2 3\\n3 1\\n4 1'))\n\"\"\""
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\n3 2 5 1\\n2 3 4 1') == '1'\n\nassert solution('5 5\\n1 2 3 4 1\\n2 1 4 3\\n1 4 4 1\\n3 2 1 1') == '1'\n\nassert solution('5 5\\n1 2 3 4 1\\n1 1 5 4\\n2 3 4 1\\n2 1 4 3\\n1 4 4 1\\n3 2 1 1') == '0'\n\nassert solution('4 4\\n1 2 3 4 1\\n2 1 4 3\\n1 4 4 1\\n3 2 1 1') == '0'\n\nassert solution('6 5\\n1 2 3 4 1\\n1 1 5 4\\n2 3 4 1\\n2 1 4 3\\n1 4 4 1\\n3 2 1 1') == '0'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('4\\n1 1 2 1') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n3 1 6 3 5\\n1 2 5 3 5') == 'inf'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n2 1 6 3 5 3\") == \"1\"\nassert solution(\"5 3\\n1 2 4 1 1\") == \"1\"\nassert solution(\"6 5\\n4 3 2 5 3 1\") == \"2\"\nassert solution(\"6 5\\n5 3 3 3 2 2\") == \"3\"\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n3 2 3 3 1\\n1 2 5 3 5') == '0'\nassert solution('6 5\\n3 3 3 1\\n1 2 5 3 5') == '0'\nassert solution('6 5\\n1 2 5 3 5\\n1 2 5 3 5') == '1'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2 2 2') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n1 3\\n2 3\\n3 4') == '1\\n'\nassert solution('5\\n2 3 1 5\\n1 2 3 4') == '4\\n'"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3') == '1'\nassert solution('6 5\\n1 2 5 3 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5\\n1 2 3 4 5') == '3'\nassert solution('6 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5') == 'forever'\nassert solution('6 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5') == '3'\nassert solution('6 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5\\n1 2 5 3 5') == 'forever'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5') == '1'\nassert solution('6 5\\n2 1 6 3 5 3\\n1 2 5 3 5\\n2 3 5 5 3') == '2'\n"
    },
    {
        "number": 3466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n1 2\\n3\\n2 3\\n3 5') == '1'\nassert solution('6\\n5\\n1 2 3 5 3\\n4 5\\n4 3 5\\n5 5') == '10'\nprint(solution('''1\n2\n1 2\n3\n2 3\n3 5'''))\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1 10\n0 1 1 2 6\n''') == '3'\nassert solution('''\n2 1 10\n0 1 1 2 6\n1 3 4 5 6\n''') == '3'\nassert solution('''\n3 1 10\n0 1 1 2 6\n1 3 4 5 6\n''') == '3'\nassert solution('''\n3 1 10\n0 1 1 2 6\n1 3 4 5 6\n''') == 'impossible'\nassert solution('''\n3 2 10\n1 3 4 5 6\n1 3 4 5 6\n''') == 'impossible'\n''')"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6') == '3'\nassert solution('3 2 10\\n0 1 1 2 6') == '9'\nassert solution('2 2 10\\n0 1 1 2 6') == 'impossible'\nassert solution('3 3 10\\n0 1 1 2 6') == 'impossible'\nassert solution('6 3 10\\n0 1 1 2 6') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 1 10\n0 1 2 3 4 5 6 7 8 9 10\n''') == '3'\n\nassert solution('''\n10 1 10\n0 1 2 3 4 5 6 7 8 9 10\n''') == '10'\n\nassert solution('''\n8 1 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9 10\n''') == '7'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 10\\n0 1 1 2 6') == '3'"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1 10\n0 1 1 2 6\n''') == '3'\nassert solution('''\n2 1 1\n1 1 1 1\n''') == 'impossible'\nassert solution('''\n5 0 1\n0 1 1 2\n''') == 'impossible'\nassert solution('''\n5 1 1\n0 0 0 0\n''') == '0'\nassert solution('''\n5 5 1\n1 2 0 2\n''') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 5 2 6\\n1 2 1 3 5\\n') == '3'\nassert solution('5 1 10\\n0 1 1 2 6\\n') == '1'\nassert solution('5 1 10\\n0 1 2 3 4\\n') == 'impossible'\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 10\\n0 1 1 2 6\\n') == '3'\nassert solution('1 1 10\\n0 1 1 2 6\\n') == 'impossible'\nassert solution('2 1 10\\n1 2 1 2 6\\n') == 'impossible'"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n2 1 10\n0 1 1 2 6\n\"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n2 1 10\n0 1 1 2 6\n0 1 0 3 8\n\"\"\"\n) == \"3\"\n\nassert solution(\n    \"\"\"\n1 1 10\n0 1 1 2 6\n\"\"\"\n) == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1 10\\n0 1 1 2 6\") == \"3\"\nassert solution(\"1\\n0 0 0 1\") == \"impossible\"\n"
    },
    {
        "number": 3467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([\"2 1 10\", \"0 1 1 2 6\"]) == \"3\"\nassert solution([\"3 3 3\", \"0 0 0\", \"0 0 0\"]) == \"impossible\"\nassert solution([\"1 1\", \"0 0\", \"0 0\"]) == \"impossible\"\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 100') == '2'\nassert solution('99 1') == '1 2'\nassert solution('1 99') == '1 2'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 100\n20 3\n1 100\n1 79\n2 66\n''') == '2'\n\nassert solution('''\n5 100\n2 1\n1 5\n2 3\n1 7\n2 1\n''') == '2'\n\nassert solution('''\n5 100\n2 1\n1 5\n2 3\n1 7\n1 1\n''') == '2'\n\nassert solution('''\n5 100\n2 3\n1 5\n2 3\n1 7\n1 1\n''') == '1'\n\nassert solution('''\n5 100\n1 2\n1 5\n1 3\n1 7\n1 1\n''') == '2'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n99 1\\n1 99') == '2 1'\nassert solution('2\\n99 1\\n1 99') == '1 2'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 100') == '1 2'\nassert solution('1 100') == '1'\nassert solution('5 200') == '2 2'\nassert solution('4 2') == '1 1'\nassert solution('10 5') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 100') == '2 1'\nassert solution('1 99') == '2 1'\nassert solution('1 99') == '1 2'"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 100\n99 1\n1 99\n\"\"\") == \"\"\"2\n1 2\n\"\"\"[:-1]\n\nassert solution(\"\"\"\n2 10000\n99 1\n1 99\n\"\"\") == \"\"\"1\n\"\"\"[:-1]\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_from_stream_one_liner) == output\n"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\\n1 2\"\nassert solution(\"3 10\\n1 9\\n2 5\\n3 12\\n5 3\\n3 9\\n2 10\\n2 4\\n5 5\\n1 3\\n1 2\\n2 6\\n2 1\\n2 6\\n1 5\\n2 8\\n3 8\\n1 4\\n2 6\\n2 2\\n1 2\\n1 1\\n2 5\\n3 1\\n1 7\\n3 1\\n2 9\\n4 9\\n1 9\\n2 6\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 2\\n2 1\\n2 5\\n1 6\\n1 3\\n1 3\\n2 2\\n2 1\\n2 5\\n2 3\\n3 3\\n2 5\\n2 1\\n2 3\\n2 2\\n3 3\\n2 6\\n2 3\\n1 5\\n3 3\\n2 7\\n4 9\\n1 9\\n2 6\\n2 1\\n2 5\\n1 6\\n2 5\\n3 2\\n2 2\\n1 2\\n1 1\\n2 5\\n3 1\\n1 7\\n3 1\\n2 9\\n4 9\\n1 9\\n2 6\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\n3 2\\n1 2\\n2 5\\n3 2\\n2 6\\n2 4\\n1 7\\n2 1\\n2 5\\n1 3\\n1 3\\n2 3\\"
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 100\\n99 1\\n1 99\") == \"2\"\nassert solution(\"2 100\\n99 1\\n1 99\") == \"1 2\"\nassert solution(\"2 100\\n99 1\\n1 99\") == \"1 2\"\nassert solution(\"2 100\\n99 1\\n1 99\") == \"2 1\""
    },
    {
        "number": 3468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 100\\n\"\n    \"99 1\\n\"\n    \"1 99\"\n) == \"2 1 2\"\n\nassert solution(\n    \"1 10\\n\"\n    \"99 1\\n\"\n    \"99 1\"\n) == \"1 2 1\"\n\nassert solution(\n    \"1 100\\n\"\n    \"99 1\\n\"\n    \"1 100\"\n) == \"1 1 1\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('H\\nT') == '0.5'\nassert solution('H\\nT\\n0.1') == '0.1'\nassert solution('H\\nT\\n0.9999') == '0.9999'\nassert solution('H\\nT\\n1') == '0.5'\nassert solution('H\\nT\\n1\\n0.5') == '0.5'\n\"\"\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('Gon\\nKillua\\n0.1') == '0.5'\nprint(solution('Gon\\nKillua\\n0.1'))\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\nassert abs(solution('H\\nT\\n0.1') - 0.1) <= 10**-6\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    Gon\n    Killua\n    0.5\n''') == '0.5', f'actual: {solution(stdin)}'\n\nSample Input:\nH\nT\n1.0\nSample Output:\n1.0\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nH\nH\n0.5\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\nH\nH\n0.5\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\nH\nH\n0.5\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\nH\nT\n0.5\n\"\"\") == \"0.5\"\nassert solution(\"\"\"\nT\nT\n0.5\n\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n0.5\\n2\") == \"0.5\"\nassert solution(\"1\\n1\\n2\") == \"0\"\nassert solution(\"1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"0.5\\n1\\n1\") == \"0.5\"\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('H') == '0.5', 'Should be 0.5'\nassert solution('T') == '0.5', 'Should be 0.5'\nassert solution('0.5') == '0.5', 'Should be 0.5'\nassert solution('1.0') == '0.5', 'Should be 0.5'\nassert solution('10.0') == '0.5', 'Should be 0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('H\\nH\\n0.5') == '0.5'\n"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nH\nT\n0.5\n''') == '0.5'"
    },
    {
        "number": 3469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('H\\nT\\n0.5') == '0.5'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == '4'\nassert solution(\"3\") == '8'\nassert solution(\"4\") == '3'\n\"\"\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([6]) == \"1 3 5 7 9 11 13 15\"\nassert solution([6, 3]) == \"1 3 5 7 9 11 13 15\"\nassert solution([6, 3, 5]) == \"1 3 5 7 9 11 13 15\"\nassert solution([6, 3, 5, 7]) == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1 3'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"8 1 3 5 7 9 11 13 15\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '8'\nassert solution('6') == '1 3 5 7 9 11 13 15'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"8 1 3 5 7 9 11 13 15\"\nassert solution(\"4\\n\") == \"7 8 1 3 5 6 11 13\"\nassert solution(\"5\\n\") == \"4 5 6 8 11 13 15\"\nassert solution(\"6\\n\") == \"3 4 5 6 7 8 11 12 13\"\nassert solution(\"7\\n\") == \"2 3 4 5 6 7 9 12 13\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1\\n3\\n'\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"1 3 5 7 9 11 13 15\""
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"8\\n1 3 5 7 9 11 13 15\"\nassert solution(\"2\") == \"11\\n1 3 5 7 9\"\nassert solution(\"3\") == \"11\\n1 3 5\"\nassert solution(\"4\") == \"8\"\n"
    },
    {
        "number": 3470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"8\"\nassert solution(\"10\") == \"1 3 5 7 9 11 13 15\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\nprint('Solution:')\nprint(solution(*(input().split())))"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 5 7\\n3\\n2 2\\n2 5\\n1 5\\n') == '3\\n1\\n0\\n'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10\\n5\\n6\\n9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '6\\n5\\n4\\n3\\n2\\n1\\n'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '5'\nassert solution('5') == '7'\nassert solution('7') == '11'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n''') == '1\\n0\\n0\\n0'\n\nassert solution('''3\n1 1\n2\n3\n''') == '1\\n0\\n0\\n'\n\nassert solution('''4\n1 2\n3\n5\n7\n''') == '3\\n1\\n1\\n1'\n\nassert solution('''10\n5 6\n4\n2 5\n7\n9 8\n''') == '1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0'\n\nassert solution('''9\n5 6\n4\n2 5\n7\n9 8\n''') == '3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4\\n\"\n    \"1 3 5 7\\n\"\n    \"3\\n\"\n    \"2 2\\n\"\n    \"2 5\\n\"\n    \"1 5\\n\"\n) == \"3\"\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 5 7') == '3'\nassert solution('3\\n2 2') == '0'\nassert solution('2\\n2 5') == '1'\nassert solution('1\\n5') == '0'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '3'\n\nassert solution('''4\n1 3 5 7\n3\n2 2\n2 5\n1 5''') == '0'"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n2 2') == '0\\n1'\nassert solution('4\\n1 3 5 7') == '3\\n1\\n0\\n1\\n0'\nassert solution('3\\n2 2') == '1'\nassert solution('4\\n1 3 5 7') == '3'\nassert solution('5\\n2 2') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 3 5 7') == '3'\nassert solution('3') == '1'\nassert solution('2 2') == '0'\nassert solution('2 5') == '1'\nassert solution('1 5') == '0'\n"
    },
    {
        "number": 3471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"4\n1 3 5 7\n3\n2 2\n2 5\n1 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\""
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 1 -2 0') == '0'\nassert solution('2 1\\n-1 -1 -2 0') == '2'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 2\n0 0 0\n-1 -1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2 2\n0 0 0\n1 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n-1 0 0\n0 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2 2\n0 0 0\n1 0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 3\n0 0 0\n1 0 0\n2 0 0\n\"\"\") == \"1\""
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 1 -2 0\") == \"0\"\nassert solution(\"2 4\\n1 1 -2 0\\n1 -1 0\\n1 -2 0\\n-1 2 -2 -1\") == \"1\""
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n1 1 -2 0\n''') == '0'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '0'\nassert solution('2 1') == '0'\nassert solution('3 10') == '1'\nassert solution('9 8') == '4'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1') == '0'\nassert solution('3 5') == '5'\nassert solution('4 2') == '5'\nassert solution('1 2') == '4'\nassert solution('10 1') == '2'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1 -2 0\\n') == '0'\nassert solution('2 3\\n0 0 0 0\\n1 1 -2 0\\n') == '2'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1\n-1 -1\n''') == '0'\nassert solution('''\n2 1\n1 -2 0\n''') == '1'\n"
    },
    {
        "number": 3472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '2'\nassert solution('3 1') == '3'\nassert solution('2 3') == '0'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '194'\nassert solution('1') == '2019 10 25'\nassert solution('2') == '2019 10 25'"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '204'\nassert solution('2') == '190'\nassert solution('3') == '290'\nassert solution('4') == '311'\nassert solution('5') == '191'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '194'\nassert solution('4') == '1015'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"19 10 25\"\nassert solution(\"3\") == \"404 10 17\"\nassert solution(\"5\") == \"19 10 25 2020 10 23\"\nassert solution(\"5\") == \"19 10 25 2020 10 23\"\nassert solution(\"5\") == \"19 10 25 2020 10 23\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n3 10\\n2 11\\n2 12\\n') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"194\"\nassert solution(\"3\") == \"2019020125\"\nassert solution(\"4\") == \"2019020130\"\nassert solution(\"5\") == \"2019020305\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n\"\"\") == \"194\"\n\nassert solution(\"\"\"\n2\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n\"\"\") == \"194\"\n\nassert solution(\"\"\"\n2\n6\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n\"\"\") == \"193\"\n\nassert solution(\"\"\"\n2\n7\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n\"\"\") == \"192\"\n\nassert solution(\"\"\"\n3\n2\n2019 10 18\n2019 10 19\n\"\"\") == \"192\""
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n2019 10 18\n2019 10 19\n2020 10 02\n2020 10 16\n2020 10 23\n''') == '194'\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"194\"\nassert solution(\"2\") == \"2019 10 25\"\nassert solution(\"3\") == \"2019 10 26\"\n"
    },
    {
        "number": 3473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"194\"\nassert solution(\"4\") == \"190\"\nassert solution(\"3\") == \"180\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == 'negative-infinity -5'\nassert solution('6 10 10 10 10 0') == '5 12.5'\nassert solution('6 10 10 5 10 0') == 'negative-infinity -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 10 10 10 0\\n5 10 10 5 10 0') == 'negative-infinity 0\\n5 12.5'\nassert solution('6 10 10 10 10 0\\n6 10 10 5 10 0') == 'negative-infinity -5\\n6 11.5'\nassert solution('1000000000 10000000 10000000 10000000 0\\n1000000000 10000000 10000000 10000000 0') == 'negative-infinity -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"5 10 10 5 10 0\") == \"negative-infinity -5\"\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 10 10 10 10 0') == '-5 -12.5'\nassert solution('6 10 10 10 10 0') == '-5 -12.5'\n\n----\nSample Input:\n10 10 10 10 10 0\n5 10 10 5 10 0\n6 10 10 10 10 0\nSample Output:\nnegative-infinity 0\nnegative-infinity 0\n5 12.5\nnegative-infinity -5\nnegative-infinity 0\n\n----\nSample Input:\n10 10 10 10 10 0\n10 10 10 10 10 0\n10 10 10 5 10 0\n6 10 10 10 10 0\nSample Output:\nnegative-infinity 0\nnegative-infinity 0\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity 0\n\n----\nSample Input:\n6 10 10 10 10 0\n6 10 10 10 10 0\n6 10 10 5 10 0\n5 10 10 10 10 0\nSample Output:\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity 0\n\n----\nSample Input:\n5 10 10 10 10 0\n10 10 10 10 10 0\n6 10 10 10 10 0\nSample Output:\nnegative-infinity 0\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity -5\nnegative-infinity 0\n\n----\nSample Input:\n10 10 10 10 10 0\n10 10 10 10 10 0\n10 10 10 10 10 0\nSample Output:\nnegative-infinity 0\nnegative-infinity 0\nnegative-infinity -5\nnegative-infinity -5\nnegative-infinity 0\n'''"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\nassert solution(\"5 10 10 10 10 0\") == \"negative-infinity 0\"\nassert solution(\"6 10 10 10 10 0\") == \"negative-infinity -5\"\nassert solution(\"3 1 1 1 1 0\") == \"negative-infinity -infinity\"\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'\nassert solution('10 10 10 10 10 0') == '10 12.5'\nassert solution('10 10 10 10 0') == '10 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '10 10 10 10 0'\n) == 'negative-infinity 5'\nassert solution(\n    '5 10 10 10 0'\n) == 'negative-infinity 0'\nassert solution(\n    '5 10 10 5 10 0'\n) == 'negative-infinity -5'\nassert solution(\n    '6 10 10 10 10 0'\n) == 'negative-infinity -5'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity -5'\nassert solution('6 10 10 10 10 0') == '6 12.5'\nassert solution('1 1 1 1 1 0') == '3.0 2.0'\n"
    },
    {
        "number": 3474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 10 10 10 0') == 'negative-infinity 0'\nassert solution('5 10 10 5 10 0') == '5 12.5'\nassert solution('6 10 10 10 10 0') == 'negative-infinity -5'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 4') == '2'\nassert solution('100 30000') == 'IMPOSSIBLE'\nassert solution('200 20000') == 'IMPOSSIBLE'\nassert solution('300 10000') == '2'\nassert solution('400 0') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 4') == '2'\nassert solution('2 5') == 'IMPOSSIBLE'\nassert solution('5 5') == '3'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000') == \"2\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1 100 30000\\n200 20000\\n300 10000\\n400 0\\n50 10000\\n75 20000\\n400 -40000\") == \"2\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"10 4\") == \"IMPOSSIBLE\"\nassert solution(\"11 5\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4') == '2'\nassert solution('5 7') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 4\n100 30000\n200 20000\n300 10000\n400 0''') == '2'\nassert solution('''4 4\n200 1000\n100 100\n200 200\n0 0''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2\\nrotS 2 1\\nnegR 2\\n'\nassert solution('3 4\\n1 1 2 2 3\\n0 0 0 0 1\\n1 3 4 4 5\\n0 0 0 0 1\\n') == '43526 5\\nrotR 1 1\\nrotS 3 1\\nrotR 1 1\\nrotR 2 2\\nnegR 2\\nnegR 2\\nrotS 1 1\\nrotS 3 1\\nrotS 3 1\\nrotS 1 1\\nrotS 1 1\\nnegS 2\\nnegS 2\\nrotR 2 2\\nrotS 2 1\\nrotS 2 1\\nrotR 2 2\\nnegR 2\\nnegR 2\\nrotS 4 1\\nrotS 4 1\\nrotS 4 1\\nrotS 4 1\\nrotS 4 1\\nrotR 1 1\\nnegR 2\\nnegS 2\\nrotR 1 1\\nnegS 2\\nnegS 2\\nrotR 2 2\\nnegR 2\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nnegR 3\\nnegS 3\\nrotR 1 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotR 3 2\\nrotR 3 2\\nrotR 3 2\\nrotR 3 2\\nrotR 3 2\\nrotR 3 2\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotR 3 2\\nrotR 3 2\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\nrotS 3 1\\"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2'\nassert solution('''\n3 5\n1 2 3 4 5\n-1 -2 -3 -4 -5\n-2 -3 -4 -5 -1\n-3 -4 -5 -1 -2\n-4 -5 -1 -2 -3\n-5 -1 -2 -3 -4\n''') == '543 1'\nassert solution('''\n5 4\n-1 -2 -3 -4 -5\n2 4 1 0 1\n3 -1 -2 1 0\n-1 3 2 0 1\n0 1 -1 -2 -3\n''') == '-13 1'\nassert solution('''\n5 4\n1 -2 -3 -4 -5\n2 4 1 0 1\n3 -1 -2 1 0\n-1 3 2 0 1\n0 1 -1 -2 -3\n''') == '-13 1'\nassert solution('''\n3 3\n1 1 -2\n-1 1 -2\n-1 -1 -2\n''') == '1 0 1'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\"\n\nassert solution(\"\"\"\n1\n10\n-10\n-10\n\"\"\") == \"0 0\""
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('10 1\\n0 -1\\n-100 0\\n100 100\\n-10 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 100\\n-1 1\\n0 1\\n-10 0\\n0 1\\n-100 1\\n100 1\\n1 1\\n-10 1\\n0 1\\n0 0\\n-1 0\\n1 0\\n0 1\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1\\n-1 0\\n0 1\\n0 0\\n-1 0\\n1 0\\n-100 0\\n100 1\\n-1 1\\n0 1\\n0 0\\n-1 1\\n1 1\\n-100 1\\n100 1') == '345 2\\nrotS 2 1\\nrotS 2 1\\nnegR 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nnegS 2\\nneg"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\nassert solution(\"\"\"\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n\"\"\") == \"345 2\\nrotS 2 1\\nnegR 2\\n\"\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\n''') == '345 2\\nrotS 2 1\\nnegR 2'\n\nassert solution('''\n4 2\n1 2 3 4\n5 -1 -2 -3\n''') == '345 -3 2\\nrotS 2 1\\nnegR 2'\n\nassert solution('''\n4 4\n1 2 3 4\n5 -1 -2 -3\n6 -4 -5 7\n8 -8 -7 8\n''') == '345 -3 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2'\n\nassert solution('''\n4 4\n1 2 3 4\n5 -1 -2 -3\n6 -4 -5 7\n8 -8 -7 8\n''') == '345 -3 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2\\nrotS 2 1\\nnegR 2'"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1 2 3'\nassert solution('3 4') == '3 4'\nassert solution('3 4 2 4') == '3 4 8'\nassert solution('4 4 2 4') == '12 4'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n''') == '345 2'\n\nassert solution('''\n2 5 3\n-4 -10 1\n11 4 0\n0 2 10\n3 6 9\n''') == '345 2'\n\nassert solution('''\n3 4\n1 -2 5 200\n-8 0 -4 -10\n11 4 0 100\nSample Output:\n345 2\nrotS 2 1\nnegR 2\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '345 2'\nassert solution('1 1') == '1 1'\nassert solution('3 3') == '3 3'\nassert solution('3 4') == '3 4'\nassert solution('3 4') == '3 4'\n"
    },
    {
        "number": 3476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 4\\n1 -2 5 200\\n-8 0 -4 -10\\n11 4 0 100') == '345 2'\nassert solution('2 3\\n0 0 0\\n0 0 0') == '0'\nassert solution('6 5\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '0'\nassert solution('6 5\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '0'\nassert solution('10 10\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0') == '15'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('3 1 1') == '1.0'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '0.5'\nassert solution('3 3') == '0.0'\nassert solution('3 1 1') == '0.5'\nassert solution('3 2 3') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '0.5'\nassert solution('1 2 3') == '0.5'\nassert solution('1000000 1000000') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2') == '0.5'\nassert solution('6\\n1 2 1 3 4 5\\n3 2 1') == '1.0'\nassert solution('5\\n1 1 2 3 5\\n2 2 2 3 3') == '0.6666666666666666'\nassert solution('5\\n3 1 2 2 1\\n2 2 1') == '0.5000000000000005'\nassert solution('1\\n3\\n3 3') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"0.5\"\nassert solution(\"1 2\") == \"1.5\"\nassert solution(\"10 5\") == \"0.5\"\nprint(\"Congratulations! All test cases passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0.5\"\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 1 1') == '0.5'\nassert solution('5 5\\n1 3 2 4 1') == '0.5'\n"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n3 1 1\n''') == '0.5'"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0.5'\nassert solution('3 1 1') == '0.5'\nassert solution('3 2') == '0.5'\n'''"
    },
    {
        "number": 3477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n3 1 1\n''') == '0.5'\nassert solution('''\n3 3\n5 2 1\n''') == '0.3'\nassert solution('''\n10 2\n10 5 1\n''') == '0.9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('9 11\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9') == '1 4 5\\n2 6 7\\n3 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1 3 2'\nassert solution('9 11') == '1 4 5 6 7 8 9'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\\\n4 5\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5 2 6 7 7 3 8 9 8 5 9\"\nassert solution(\"\"\"\\\n11 10\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5 2 6 7 7 3 8 9 8 5 9\"\nassert solution(\"\"\"\\\n9 11\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5 2 6 7 7 3 8 9 8 5 9\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2 1 6'"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3 4 5\\n1 2 4\\n4 8\\n7 2\\n5 9\\n7 7\\n4 8') == '1 4 5 2 6 7 9 8'\nassert solution('4 8\\n1 2\\n3 5\\n3 6\\n2 4\\n5 6\\n3 7\\n1 8\\n') == '1 4 5 2 6 7 8'"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2 6 7\\n1 2 5\\n\", solution()\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"impossible\"\nassert solution(\"2\") == \"impossible\"\nassert solution(\"3\") == \"1 4 5\"\nassert solution(\"4\") == \"2 6 7\"\nassert solution(\"5\") == \"2 6 7\"\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 10\\n1 4\\n5 4\\n1 5\\n6 2\\n6 7\\n7 2\\n3 8\\n3 9\\n8 9\\n6 8\\n5 9\\n') == '1 4 5\\n2 6 7\\n3 8 9\\n'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 10\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n''') == '1 4 5\\n2 6 7\\n3 8 9\\n4 9 8\\n5 9 1'\n"
    },
    {
        "number": 3478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 4\n5 4\n1 5\n6 2\n6 7\n7 2\n3 8\n3 9\n8 9\n6 8\n5 9\n\"\"\") == \"1 4 5 2 7 3 8 6 8 5 9\"\n\nassert solution(\"\"\"\n6 5\n1 2\n3 4\n5 6\n1 3\n3 5\n3 1\n2 3\n2 1\n\"\"\") == \"1 2 3 5 6 3 1 1 2\"\n\nassert solution(\"\"\"\n8 7\n4 5\n7 5\n1 2\n5 7\n2 1\n3 3\n1 3\n1 4\n\"\"\") == \"1 2 3 5 6 4 5 1 4 1 5 7\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\n''') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\nassert solution('4500') == '13500'\nassert solution('10000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\nassert solution('4500') == '13500'\nassert solution('10000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('11 2') == '13500'\nassert solution('12000') == '13500'\nassert solution('9000') == '13500'\nassert solution('4500') == '13500'\nassert solution('10000') == '13500'\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"13500\"\nassert solution('1 2') == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000''') == \"13500\"\nassert solution('''5 2\n12000\n11000\n11000\n9000\n12000''') == \"1000\"\n\nSample Input:\n11 2\n12000\n9000\n4500\n10000\n12000\n11000\n12000\n18000\n10000\n9000\n12000\nSample Output:\n13500\n'''"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 2') == '1350'\nassert solution('18000') == '1350'\nassert solution('80000') == '0'\nassert solution('0') == '0'\nassert solution('8000') == '0'\n\n--- Day 11: The City & The Road ---\n--- Part Two ---\nNow you arrive at the football ground. You see a building with a single sign: \"A store for people and cars.\"\n\nEvery time a car reaches the front of the store, it makes a random drive that isn't as simple as all of the cars in the store are. It then parks at the back of the store (or else it would drive through the building), but after everyone parks it's an instant.\n\nHowever, there are two exceptions:\n\nThe new car that arrives at the store must be parked immediately before the store (because it's the only car that can drive around the store), or else it can drive right through the building.\n\nThe car that parks in the building doesn't have to be a car that arrives first (it can drive any car at the back of the store), or else it has to wait for the car to arrive.\n\nThe store is the first person to arrive at the store, so the car has to park in the building immediately before the store.\n\nThe person who parks the car at the back of the store can't drive until it gets to the front of the store, so they wait until the store arrives.\n\nThe person who arrives first (and has the car in the back) can drive immediately, and they start driving the car immediately to the store, with the front of the store having the car.\n\nIn the above example, the person who arrives first at the store has the car in the back.\n\nThe store arrives first at the back, and immediately drives the car to the back of the store. After the car makes its first (and only) simple drive, it waits for the car to arrive.\n\nThe person who arrives at the front of the store has the car in the front.\n\nThe person who arrives at the front of the store has the car in the front, so they drive immediately.\n\nThe person who arrives first at the front of the store has the car in the front.\n\nThe store arrives first at the front, and immediately drives the car to the front of the store, after the car makes its first (and only) simple drive, before it arrives at the front of the store again.\n\nNow the store is empty, and the person who arrives at the front of the store has the car in the front.\n\nThe car doesn't get parked until it arrives at the front of the store, so the car makes its first simple drive (or else it would wait for the car to arrive).\n\nThe person who arrives at the front of the store has the car in the front.\n\nFinally, the car makes its first simple drive, and then the store arrives first at the front. The first car makes its first simple drive (so the person who arrives first is the only one with a car), and the second person starts driving the car immediately.\n\nThe first person arrives first (and has a car in the front), and they drive immediately.\n\nThe second person arrives first (and has a car in the front), and they wait for the car to arrive.\n\nThe third person arrives first (and has a car in the front), and they drive immediately.\n\nThe fourth person arrives first (and has a car in the front), and they wait for the car to arrive.\n\nFinally, the fourth person arrives first (and has a car in the front), and the third person starts driving the car immediately.\n\nThe first person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe second person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe third person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe fourth person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nFinally, the third person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe person who arrives first at the front of the store (and has a car in the front) has the car in the front at the end of the drive.\n\nThe car makes its first simple drive (so the person who arrives first is the only one with a car), and the store is empty.\n\nThe second person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe third person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe fourth person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nFinally, the third person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe car makes its first simple drive (so the person who arrives first is the only one with a car), and the store is empty.\n\nThe second person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe third person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe fourth person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nFinally, the third person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nFinally, the second person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe car makes its first simple drive (so the person who arrives first is the only one with a car), and the store is empty.\n\nThe fourth person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe fourth person has a car in the front at the end of the drive, and they wait for the car to arrive.\n\nThe person who arrives first at the front of the store (and has a car in the front) has the car in the front at the end of the drive.\n\nThe car makes its first simple drive (so the person who arrives first is the only one with a car), and the store is empty.\n\nThe person who arrives first at the front of the store (and has a car in the front) has the car in the front at the end of the drive.\n\nThe car makes its first simple drive (so the person who arrives first is the only one with a"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"11.000\"\nassert solution(\"10 5\") == \"11.000\"\nassert solution(\"12 9\") == \"11.000\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(samples[0]) == \"13500\"\nassert solution(samples[1]) == \"22000\"\nassert solution(samples[2]) == \"10100\"\nassert solution(samples[3]) == \"12000\"\n"
    },
    {
        "number": 3479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11 2\") == \"13500\"\nassert solution(\"12000\") == \"13500\"\nassert solution(\"9000\") == \"13500\"\nassert solution(\"4500\") == \"18000\"\nassert solution(\"10000\") == \"13500\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 16\\n\"\n    \"Hot cross buns! = Hot cross buns! =\\n\"\n    \"4 4 4 4 4 4 4 4\\n\"\n    \"One a pen- ny, Two a pen- ny, Hot cross buns! =\\n\"\n    \"2 2 2 2 2 2 2 2 4 4 4 4\") == (\n    \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n\"\n    \"____________________Hot_cross_buns!_=\\n\"\n    \"One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\"\n    \"Hot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\\n\"\n    \"def solution(stdin: str) -> str:\\n\"\n    \"\\tpass\\n\"\n    \"\\tpass\"\n)"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 16') == \"\"\"Hot_cross_buns!=___Hot_cross_buns!=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 16\") == \"Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\\n\"\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '2 16\\nHot cross buns! = Hot cross buns! =\\n'\n    '4 4 4 4 4 4 4 4\\n'\n    'One a pen- ny, Two a pen- ny, Hot cross buns! =\\n'\n    '2 2 2 2 2 2 2 2 4 4 4 4\\n'\n    'Sample Output:\\nHot_cross_buns!_=___Hot_cross_buns!_=\\n____________Hot_cross_buns!_=___________Hot_cross_buns!_=') == (\n    'Hot_cross_buns!_=___Hot_cross_buns!_=\\n____________Hot_cross_buns!_=___________Hot_cross_buns!_=')"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2\n''') == 'Hot_cross_buns!_=___Hot_cross_buns!_=\\n________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=Hot___cross____buns!_=\\nOne_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___cross____buns!_=One_a_pen-ny,_Two_a_pen-ny,_Hot___"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 4 4 4 4\nSample Output:\nHot_cross_buns!_=___Hot_cross_buns!_=\n____________________Hot_cross_buns!_=\nOne_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!_=\nHot___cross____buns!_=________One_a_pen-_ny,_Two_a_pen-_ny,\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Hot_cross_buns!=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!=\\nHot_cross_buns!=________One_a_pen-_ny,_Two_a_pen-_ny,_Hot___cross____buns!=\", solution(input())\n"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == output_data"
    },
    {
        "number": 3480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 16\nHot cross buns! = Hot cross buns! =\n4 4 4 4 4 4 4 4\nOne a pen- ny, Two a pen- ny, Hot cross buns! =\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('4 5 9 7 9') == '11'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 2 1\\n\"\n    \"1 2 10\\n\"\n    \"1 4 6 6\\n\"\n    \"1 6 10 5\\n\"\n    \"2 10 30 33\\n\"\n) == \"33\"\nassert solution(\n    \"3 2 1\\n\"\n    \"1 2 10\\n\"\n    \"1 4 6 6\\n\"\n    \"1 6 10 5\\n\"\n    \"2 10 30 33\\n\"\n    \"10 30 33\\n\"\n    \"10 30 33\\n\"\n) == \"30\"\n\nimport math\n\nimport sys\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n\"\"\") == \"33\"\n\nassert solution(\"\"\"\n3 2 2\n3 4 8\n1 2 6 6\n1 4 10 4\n2 2 8 3\n2 4 9 6\n2 5 2 3\n2 5 8 2\n3 5 2 2\n2 1 8 2\n\"\"\") == \"30\"\n\nassert solution(\"\"\"\n2 10 8\n2 5 8 5\n2 5 2 2\n3 2 4 6\n\"\"\") == \"30\"\n\nassert solution(\"\"\"\n1 2 3 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1 2\n\"\"\") == \"0\""
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\nassert solution('3 2 1\\n1 2 10\\n1 4 6 6\\n1 6 10 5\\n2 10 30 33') == '33'\n\n'''"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"33\""
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\nassert solution('3 2 1') == '33'\n\n\"\"\"\nfrom copy import deepcopy"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33'\nassert solution('''3 1 1\n1 2 10\n2 10 10 3\n2 8 10 4\n2 10 30 33\n''') == '33'\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"33\"\nassert solution(\"2 10 30 33\") == \"70\"\n"
    },
    {
        "number": 3481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 1\n1 2 10\n1 4 6 6\n1 6 10 5\n2 10 30 33\n''') == '33', solution.__doc__\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n20 15 10\n7 7\n30 0\n''') == '405'\nassert solution('''5\n20 15 10\n7 7\n30 0\n20 15 10\n1 1\n''') == '405'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n2\n1 1\n1 2\n''') == '2'\n\nassert solution(\n'''\n3\n3 3\n2 0\n1 1\n''') == '4'\n\nprint('All test cases passed.')"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n1\n3\n2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n5\n1\n2\n3\n4\n\"\"\") == \"9\""
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\nassert solution(\"\"\"\n5\n10 20 10 20 20\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n10 10 10 10 10\n\"\"\") == \"500\"\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('4\\n10 10 10 10\\n0 0 0 0\\n10 10 10 10\\n0 0 0 0\\n0 0 0 0') == '1830'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == '405'\nprint('Congratulations, have a nice day!')\n--------------------------------------------------\nSample Input:\n3\n2 10 5\n7 1\n5 4\n5 5\nSample Output:\n3"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('2\\n20 15 10\\n7 7\\n30 0') == '405'\nassert solution('3\\n20 15 10\\n7 7\\n30 0') == '411'\n"
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n\nassert solution(\"\"\"\n3\n20 15 10\n7 7\n30 0\n\"\"\") == \"405\"\n\nassert solution(\"\"\"\n2\n3 4 6\n1 1 1\n3 4\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n4\n2 4 5 7\n0 0 0 0\n0 1 1 1\n0 0 0 0\n0 1 1 1\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n3\n2 3 5\n1 0 1\n0 1\n\"\"\") == \"5\""
    },
    {
        "number": 3482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '405'\n\nassert solution('5') == '405'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 4 7') == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 3\n3\n4\n5''') == '28 4 21 14.0'\nassert solution('''5\n1 2 3 4 5\n5\n4\n3\n2''') == '28 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n4 7 5\n''') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n1 2 4 7\n''') == '28 4 21 14.0'\n\nassert solution('''4\n1 2 4 7\n''') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2 4 7\n''') == '28 4 21 14.0'\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n2\n4\n7\"\"\") == \"28 4 21 14.0\"\nassert solution(\"\"\"\n1\n2\n3\n7\n\"\"\") == \"12 7 6.0\"\n"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4 7') == \"28 4 21 14.0\"\n\n\"\"\""
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '4 5 7'\n\n'''"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n3 4 5 6') == '28 4 21 14.0'"
    },
    {
        "number": 3483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 7\") == \"28 4 21 14.0\""
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n2 3 4 1\\n\") == \"yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4 \\n2 3 4 1 \\n3 4 1 2 \\n4 1 2 3'\nassert solution('4 2\\n2 3 4 1\\n3 4 1 2\\n') == 'no'"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'''"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\nassert solution('2 1\\n1\\n2\\n') == 'no'\nassert solution('8 3\\n1 2 3\\n4 5 6\\n7 8 9\\n') == 'no'\nassert solution('7 1\\n8 2 4\\n3 5 6\\n9 7\\n') == 'yes\\n1 2 3\\n4 5 6\\n7 8 9'\nassert solution('8 4\\n1 2 3\\n4 5 6\\n7 8 9\\n') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(r\"\"\"\n4 2\n1 2 3 4\n2 3 4 1\n\"\"\") == \"\"\"yes\n1 2 3 4 \n2 3 4 1 \n3 4 1 2 \n4 1 2 3\n\"\"\"\nassert solution(r\"\"\"\n10 3\n10 6 2 3 6 5 8 2 5 1 2\n7 4 8 9 5 3 6 1 8 2\n8 4 3 6 2 5 7 9 1\n5 8 9 2 7 4 1 6 3\n9 5 7 4 6 8 2 3\n8 4 1 6 2 3 5 7\n7 5 9 8 4 6 3 2\n2 3 5 9 1 6 4 8\n1 7 8 2 4 6 5 9\n\"\"\") == \"\"\"yes\n8 4 8 9 5 7 9 1\n6 3 2 5 4 5 1 6\n7 4 1 2 6 3 9 8\n2 8 4 9 1 7 5 6\n9 5 8 2 1 1 6 9\n6 5 9 1 5 1 6 8\n1 4 8 9 6 7 5 2\n5 7 4 2 3 6 8 9\n9 8 4 1 7 6 3 5\n8 2 4 1 7 9 5 6\n7 6 1 8 5 2 3 4\n4 6 1 9 5 8 7 2\n2 3 4 9 5 8 7 6\n4 9 5 1 8 6 7 2\n8 1 6 2 7 5 4 9\n\"\"\"\"\"\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2 3 4\\n2 3 4 1\\n') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3'\n\n'''"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n1 2 3\n2 3 1\n3 1 2''') == 'yes'\nassert solution('''5 4\n1 2 3 4 5\n3 4 5 2 1\n2 5 1 4 3\n4 5 3 2 1\n5 1 4 3 2''') == 'yes'\nassert solution('''5 4\n1 2 3 4 5\n3 4 5 2 1\n2 5 1 4 3\n4 5 3 2 1\n5 1 4 3 2''') == 'no'\nassert solution('''5 4\n1 2 3 4 5\n3 4 5 2 1\n2 5 1 4 3\n4 5 3 2 1\n5 1 4 3 2''') == 'no'\n"
    },
    {
        "number": 3484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\n1 2 3\n2 3 4\n3 4 1\n4 1 2\n''') == 'yes\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n'''\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1.5'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('1000000') == '0.0'\n\"\"\"\nfrom math import sqrt\nn = int(input())"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '10.0'\nassert solution('10000000') == '0.0'\nassert solution('10 20 30 40 50') == '20.0'\nassert solution('20 20 -10 20 20') == '20.0'"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n10 10 -10 -4 10\\n') == '10.000000000'\nprint('SUCCESS')"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    2\n    10 -10 -4 10\n    ''') == '10.000000000'\nassert solution('''\n    3\n    10 -10 -4 10\n    ''') == '10.000000000'\nassert solution('''\n    4\n    10 -10 -4 10\n    ''') == '10.000000000'\nassert solution('''\n    6\n    10 -10 -4 10\n    ''') == '10.000000000'\nassert solution('''\n    7\n    10 -10 -4 10\n    ''') == '10.000000000'\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '10.0'\nassert solution('4') == '0.0'\nassert solution('1') == '0.0'\nassert solution('2') == '0.0'\n'''\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"10.000000000\"\nassert solution(\"1\") == \"0.000000000\"\nassert solution(\"1234\") == \"0.000000000\"\nassert solution(\"-5\") == \"-5.000000000\"\nassert solution(\"-1234\") == \"-1234.000000000\"\n"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '10.0'\nassert solution('3') == '0.0'\nassert solution('6') == '7.0'\n\"\"\""
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '10.000000000'\nassert solution('4') == '4.0'\n\n'''"
    },
    {
        "number": 3485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n4\n10 10 -10 -4 10\n''') == '10.000000000'\nassert solution('''\n1\n10 10 -10 -4 10\n''') == '10.000000000'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == \"0\"\nassert solution('2') == \"1\"\nassert solution('3') == \"0\"\nassert solution('4') == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45\\n') == '1\\n'\n\nassert solution('4\\n30\\n3\\n2\\n45\\n') == '2\\n'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"100\") == \"0\"\nassert solution(\"8\") == \"0\""
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3\\n2\\n45\") == \"1\"\n\nassert solution(\"4\\n30\\n3\\n2\") == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n30\n3\n2\n45\n''') == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\n\n'''\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n30\\n3\\n2\\n45') == '1'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n30\n3\n2\n45''') == '1'\nassert solution('''5\n2\n5\n3\n4\n5''') == '0'\nassert solution('''8\n2\n5\n3\n4\n5\n6\n7''') == '1'\nassert solution('''10\n2\n5\n3\n4\n5\n6\n7\n8\n9\n10''') == '0'\nassert solution('''15\n2\n5\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14''') == '0'\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n30\\n3\\n2\\n45\") == \"1\"\n"
    },
    {
        "number": 3486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\\n3\\n2\") == \"1\"\nassert solution(\"4\\n30\\n3\\n2\") == \"2\"\nassert solution(\"4\\n3\\n2\\n45\") == \"1\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 -1.000000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '1.02037965897'\nprint(solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n'''))"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 6 3.0 0.66') == '0.000000000 1.360000000'\nassert solution('2 4 8') == '0.000000000 1.000000000'\nassert solution('4 6 1') == '0.000000000 1.000000000'\nassert solution('3 6 1') == '0.000000000 1.000000000'\nassert solution('4 5 5') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\nassert solution('''\n5 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 0.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 -1.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\\n\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.360000000'\nassert solution('''\n6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\n''') == '0.000000000 1.000000000'\nassert solution('''\n5 6 7.000000000 -5.000000000\n3 5 8.000000000 8.000000000\n1 3 8.000000000 8.000000000\n2 4 4.000000000 5.000000000\n4 6 1.000000000 5.000000000\n2 5 7.000000000 7.000000000\n5 3 4.000000000 4.000000000\n2 4 8.000000000 8.000000000\n''') == '-1.000000000 1.000000000'\nassert solution('''\n5 6 7.000000000 -5.000000000\n3 5 8.000000000 8.000000000\n1 3 8.000000000 8.000000000\n2 4 4.000000000 5.000000000\n4 6 1.000000000 5.000000000\n2 5 7.000000000 7.000000000\n5 3 4.000000000 4.000000000\n2 4 8.000000000 8.000000000\n''') == '0.360000000 0.000000000'\nassert solution('''\n5 6 7.000000000 -5.000000000\n3 5 8.000000000 8.000000000\n1 3 8.000000000 8.000000000\n2 4 4.000000000 5.000000000\n4 6 1.000000000 5.000000000\n2 5 7.000000000 7.000000000\n5 3 4.000000000 4.000000000\n2 4 8.000000000 8.000000000\n''') == '0.000000000 0.000000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 6 3.0 0.66\") == \"0.000000000 1.360000000\"\nassert solution(\"2 4 8\") == \"0.000000000 1.000000000\"\nassert solution(\"4 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"3 6 1\") == \"0.000000000 1.000000000\"\nassert solution(\"4 5 5\") == \"0.880000000 0.000000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 6 3.0 0.66\n2 4 8\n4 6 1\n3 6 1\n4 5 5\n1 5 7\n3 5 3\nSample Output:\n0.000000000 1.360000000\n0.000000000 1.000000000\n0.000000000 -1.000000000\n0.000000000 0.360000000\n0.880000000 0.000000000\n-0.880000000 -0.360000000\n1.02037965897\n''') == '0.000000000 0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 1.000000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 -1.000000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '0.000000000 0.360000000'\nassert solution('6 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\\n') == '-0.880000000 -0.360000000'\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == \"0.000000000 1.000000000\"\nassert solution(\"3 1 3\") == \"0.000000000 -1.000000000\"\nassert solution(\"1 1 3\") == \"0.000000000 0.000000000\"\nassert solution(\"2 2 5\") == \"0.000000000 1.000000000\"\nassert solution(\"2 3 8\") == \"0.000000000 -1.000000000\"\n"
    },
    {
        "number": 3487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\nassert solution(\"5 6 3.0 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\nassert solution(\"10 10 5 0.66\\n2 4 8\\n4 6 1\\n3 6 1\\n4 5 5\\n1 5 7\\n3 5 3\") == \"0.000000000 1.360000000\\n0.000000000 1.000000000\\n0.000000000 -1.000000000\\n0.000000000 0.360000000\\n0.880000000 0.000000000\\n-0.880000000 -0.360000000\\n1.02037965897\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '2'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n0 0\n0 3\n3 3\n''') == '4'\nassert solution('''\n4\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n''') == '4'\nassert solution('''\n2\n1 1\n1 1\n''') == '0'\nassert solution('''\n2\n0 0\n0 3\n3 3\n3 0\n2\n''') == '3'\nassert solution('''\n3\n0 0\n0 3\n3 3\n3 0\n2\n''') == '3'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1\\n0\\n2') == '1'"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2\n0 0\n0 3\n3 3\n3 0\n2\n1 1\n2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n0\n1\n2\n3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1\n0\n1\n2\n3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n-1\n-3\n-5\n-7\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n\") == \"4\"\nassert solution(\"20\\n-100 -100\\n-100 -30\\n-30 -30\\n-30 -100\\n0 -100\\n30 -30\\n30 -100\\n30 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\n100 30\\n100 30\\n100 0\\n100 -30\\n100 -100\\n100 0\\n100 30\\"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 0\\n0 3\\n3 3\\n3 0\\n2\\n1 1\\n2 2\\n') == '4'\nassert solution('5\\n0 0\\n0 2\\n1 2\\n2 2\\n3 3\\n4 3\\n5 2\\n') == '5'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input) == '4'\n\nSample Input:\n5\n-10 -10\n0 -3\n10 -3\n-10 -10\n3 0\n0 0\nSample Output:\n0\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '4'\nassert solution('4') == '4'\nassert solution('3') == '2'\nassert solution('10') == '7'\n"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    4\n    0 0\n    0 3\n    3 3\n    3 0\n    2\n    1 1\n    2 2\n    ''') == '4'\n\"\"\"\n\n\"\"\"\nThe number of vertices of a polygon is just the number of vertices - 1.\n\nHowever, if the polygon is not convex, then the number of vertices is the number of vertices - 2.\n\nThus, the condition is just the number of vertices - 1.\n\nComplexity:\nO(N^2) time O(N) space\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def solve(self, A, B, K):\n        result = 0\n        if len(A) < 4:\n            result = len(A) - 1\n        else:\n            result = 1\n        \n        A.sort()\n        \n        for i in range(K):\n            if A[i].x == B[i].x or A[i].y == B[i].y:\n                result += 1\n        \n        return result"
    },
    {
        "number": 3488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 0') == '2\\n3 1\\n3 2'\nassert solution('7 0') == '3 1 2\\n3 1 3\\n3 2 1\\n3 2 2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 0\n0 1\n0 2\n0 3\n''') == '2 3 1'\n\nassert solution('''\n5 0\n0 1\n0 2\n0 3\n0 4\nSample Output:\n3\n''') == ''"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 0\n0 1\n0 2\n0 3\n\"\"\") == \"\"\"2\n3 2\n3 1\n\"\"\", \"Do not return anything, modify nums in-place instead.\"\n\nassert solution(\"\"\"6 5\n0 1\n0 2\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"4\n3 3\n3 2\n3 1\n\"\"\", \"Do not return anything, modify nums in-place instead.\"\n\nassert solution(\"\"\"9 10\n0 1\n0 2\n1 2\n2 3\n2 4\n3 5\n4 5\n4 6\n4 7\n5 8\n\"\"\") == \"\"\"7\n4 4\n4 3\n4 2\n4 1\n\"\"\", \"Do not return anything, modify nums in-place instead.\"\n\nassert solution(\"\"\"8 10\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"\"\"4\n4 4\n3 4\n2 4\n1 3\n\"\"\", \"Do not return anything, modify nums in-place instead.\"\n\nassert solution(\"\"\"5 10\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\") == \"\"\"3\n2 3\n2 1\n2 4\n\"\"\", \"Do not return anything, modify nums in-place instead.\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '2'\nassert solution('5 2') == '2 3 1'\nassert solution('10 5') == '3 3 2 2 2 1 1'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 0\") == \"2\"\nassert solution(\"5 0\") == \"3 1\"\nassert solution(\"10 0\") == \"3 1 4 5 6 7 8 9 10\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"2 0\") == \"1\"\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 0\") == \"2\"\nassert solution(\"4 0 1 1\") == \"2 3 2\"\nassert solution(\"4 0 1 2\") == \"2 3 1\"\nassert solution(\"4 0 1 3\") == \"2 3 1\"\nassert solution(\"4 0 1 2 3\") == \"2 3 1 2\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0') == '2'\nassert solution('4 0') == '4'\nassert solution('6 0') == '6'\nassert solution('1') == '1'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 0\\n0 1\\n0 2\\n0 3') == '2\\n3 2\\n3 1'\nassert solution('6 0\\n0 1\\n0 2\\n0 3\\n0 4\\n0 5') == '0\\n2 1\\n2 5\\n3 2\\n3 4\\n4 5'\n"
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1') == '2'\nassert solution('5 2') == '4 2 1 3'\n\"\"\""
    },
    {
        "number": 3489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '2'\nassert solution('4 2') == '1 2'\nassert solution('3 3') == '3 1 2'"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0 0 0\n0 1.5 0\nSample Input 2:\n10\n-100 -50 -75 -95 -55 -85 -55 -95 -50 -100\nSample Output 2:\nno''') == 'no'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == \"ok\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'ok'\nassert solution('2') == 'ok'\nassert solution('3') == 'ok'\nassert solution('5') == 'ok'"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n0 0 0\n0 1.5 0\n''') == 'ok'\n\nassert solution('''\n2\n0 0 0\n0 1.5 0\n''') == 'crash'\n\n\"\"\"\n\nfrom math import sin, pi\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 'ok'\nassert solution(\"2\") == 'ok'\nassert solution(\"0 0 0\") == 'ok'\nassert solution(\"0 1.5 0\") == 'ok'\nassert solution(\"1 2 1\") == 'crash'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([0, 0, 0]) == 'ok'\nassert solution([0, 1.5, 0]) == 'ok'\nassert solution([0, 0, 1.5]) == 'ok'\nassert solution([0, 1.5, 1.5]) == 'ok'\nassert solution([0, 0, 1.5, 1.5]) == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n0 0 0\n0 1.5 0\n''') == 'ok'\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0 0\\n0 1.5 0\\n\") == \"ok\"\nprint(solution(open(\"input.txt\")))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"1\\n\"\n    \"0 0 0\\n\"\n    \"0 1.5 0\\n\"\n) == \"ok\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"R 2\"\nassert solution(\"2\") == \"R 0 G 2\"\nassert solution(\"3\") == \"R 2 G 2\"\nassert solution(\"4\") == \"R 2 G 2 R 4\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\nassert solution('4 5\\n0 1\\n0 3\\n1 2\\n2 4\\n') == '3'\nassert solution('5 10\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '5'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"2\"\nassert solution(\"10 5\") == \"9\"\nassert solution(\"6 2\") == \"11\"\nassert solution(\"10 6\") == \"11\"\nassert solution(\"6 2\") == \"11\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '2'\nassert solution('''\n5 4\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n''') == '4'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n\") == \"2\"\nassert solution(\"10 3\\n4 2\\n3 4\\n2 2\\n1 3\\n1 1\\n2 2\\n1 4\\n2 1\\n1 3\\n2 2\\n\") == \"10\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4\\n') == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n0 1\n0 3\n1 2\n2 4\n0 2\n0 4\n2 3\n2 4\n\"\"\") == \"2\"\n\n\"\"\"\n----SOLUTION----\nWe can use a brute force approach:\n\nWe need to try all combinations of $M$ button presses. We can represent this problem as a min-weight matching problem.\n\nThe process consists of considering each possible stair case as a pair of vertices.\n\nThen, we greedily assign the possible pairs of vertices such that if a pair is not part of a matching, the assignment does not introduce any of the pair of vertices in the matching.\n\nWe stop if the weight of a matching is less than or equal to $M$.\n\nHere's an example:\n\nConsider the case when the vertices are $0$ and $N-1$.\n\n1. If we assign a pair of vertices to each other, the sum of the weight of the matching is at most $M$, which is at most $250000$.\n2. If we assign a pair of vertices to each other, but the vertices are not adjacent, the sum of the weight of the matching is not at most $M$.\n\nIn this case, we can use a greedy approach: we need to assign all the vertices of the first room of the room of the second room, except for the vertices of the second room that are not adjacent to the vertices of the first room. Then we can try to add the vertices of the second room that are adjacent to the vertices of the first room. If this weight is less than or equal to $M$, we are done. Otherwise, we need to consider the rest of the vertices.\n\nBut we need to be careful with the vertices that are not adjacent. If the vertices are adjacent, we can try to add them only if they are not already in the matching. If they are already in the matching, we need to keep them in the matching.\n\nIn the above example, we need to add vertices 2 and 4 because they are not adjacent to vertices 0 or 1. But we can add them only if they are not already in the matching.\n\nIf the vertex that is not adjacent to the first room is in the matching, we can add it and still use the algorithm discussed above, because the pair of vertices (0, 1) is adjacent to the first room, and the weight of the matching is less than $M$ (thus, we can stop).\n\nHowever, if the vertex that is not adjacent to the second room is not in the matching, we can still add it and continue using the algorithm discussed above.\n\nIf this weight is at most $M$, then we can stop.\n\nThe above algorithm makes sure that we are not adding any vertices to the matching that are already in the matching.\n\nNow let's solve an alternate problem:\n\nGiven the edges of the room of the first room, which vertices are in the matching?\n\nWe can use a similar approach as above:\n\nIn this case, we need to consider all the edges in the first room.\n\nWe need to assign a pair of vertices to each other if the vertices are adjacent, or not adjacent if they are not.\n\nThen, we can try to add a pair of vertices to the matching, and stop if the weight of the matching is less than or equal to $M$.\n\nHowever, we need to be careful with the vertices that are not adjacent. If the vertices are adjacent, we can try to add them only if they are not already in the matching. If they are already in the matching, we need to keep them in the matching.\n\nIf the vertex that is not adjacent to the first room is in the matching, we can add it and still use the algorithm discussed above, because the pair of vertices (0, 1) is adjacent to the first room, and the weight of the matching is less than $M$ (thus, we can stop).\n\nHowever, if the vertex that is not adjacent to the second room is not in the matching, we can still add it and continue using the algorithm discussed above.\n\nIf this weight is at most $M$, then we can stop.\n\nAs a last resort, if this weight is at least $M$ but less than $250000$, then we need to add a vertex to the matching that is not adjacent to the first room and it is not already in the matching.\n\n\"\"\"\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '5 4\\n'\n    '0 1\\n'\n    '0 3\\n'\n    '1 2\\n'\n    '2 4\\n'\n    '0 2\\n'\n    '0 4\\n'\n    '2 3\\n'\n    '2 4\\n'\n    ) == '2'\n"
    },
    {
        "number": 3491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == \"2\"\nassert solution('5 4\\n0 1\\n0 3\\n1 2\\n2 4\\n0 2\\n0 4\\n2 3\\n2 4') == \"2\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n3 C D E F\n''') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('7 5 5 5') == '5'\nassert solution('2 4 2 2') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '3'\nassert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '1'\nassert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '3'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n3 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '1'\nassert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '0'\nassert solution('''\n1\nA\n''') == '0'\nassert solution('''\n1\nA\n''') == '0'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == '2'\nassert solution('7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F') == '4'\nassert solution('4\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n') == '1'\nassert solution('1\\nA\\nB\\n') == '1'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"7 3 3 3\\nA B C\\nD E F\\n3 A E G\\n3 A C E\\n3 B D F\\n\"\n) == \"2\"\n\nassert solution(\n    \"4 5 2 3\\nA B C\\nD E F\\nG H I\\n1 C F\\n1 C G\\n1 B D\\n\"\n) == \"1\"\n\nassert solution(\n    \"2 5 2 5\\nA B C\\nD E F\\nG H I\\nA G C\\nA B D\\n\"\n) == \"3\"\n\nassert solution(\n    \"2 5 2 5\\nA B C\\nD E F\\nG H I\\nA G C\\nA B D\\n\"\n) == \"2\"\n\nassert solution(\n    \"2 5 2 5\\nA B C\\nD E F\\nG H I\\nA G C\\nA B D\\n\"\n) == \"2\""
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n\nassert solution('''\n7 5 5 5\nA B C D E\nF G H I J\nK L M N O\nP Q R S T\nU V W X Y\nZ''') == '4'\n\nassert solution('''\n5 2 2 3\nA B C D E\nF G H I J\nK L M N O\nP Q R S T\nU V W X Y\nZ''') == '3'\n\nassert solution('''\n5 5 5 5\nA B C D E\nF G H I J\nK L M N O\nP Q R S T\nU V W X Y\nZ\nAA AB BC CD\nAA BC AC CD\nAA BC AC CD\nAA BC CD E\nAA AB AC E\nAA AB AC CD\nAA BC AD CD\nAA AC CD EF\nAA AB AC CD E\nAA AB AC CD EF\n''') == '6'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '2'\nassert solution('''\n7 3 3 3\nA B C\nD E F\n3 A E G\n3 A C E\n3 B D F\n''') == '1'\n'''\n"
    },
    {
        "number": 3492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('7 3 3 3') == '2'\nassert solution('10 9 2') == '10'\nassert solution('6 8 7') == '3'\nassert solution('5 9 5') == '1'\n\nstdin = \"\"\"\n5 2 2\nA B\nB C\nB D\nA C\nA D\n\"\"\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '2 3 1 2'\nassert solution('4') == '3 1 2 1'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2 1 2'\nassert solution('5') == '5 2 4 1 3'\nassert solution('1') == '1 1 1'"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"2 1 3\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\nYYY\nNYY\nYNY\"\"\") == \"2 1 2\"\n\nassert solution(\"\"\"5\nYYY\nNYY\nYNY\nNYY\"\"\") == \"2 1 2 2 3\"\n\nassert solution(\"\"\"50\n
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"YYY\") == \"2\"\nassert solution(\"NYY\") == \"1 2\"\nassert solution(\"YNY\") == \"3 1 2\""
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2 1 2'\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\nYYY\nNYY\nYNY\n\"\"\"\n) == \"\"\"\n2\n1 2 3\n3 1 2\n\"\"\"\n\nassert solution(\n\"\"\"\n3\nNYY\nYYY\nYNY\n\"\"\"\n) == \"\"\"\n3\n1 2 3\n1 1 2\n1 1 1\n\"\"\"\n"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3 1 2'\nassert solution('4') == '2 2 2 2'\nassert solution('5') == '2 3 1 2'\nassert solution('6') == '2 3 1 2 2 2'"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\nYYY\\nNYY\\nYNY\\n') == '2 1 2 3\\n3 1 2'\n\nSample Input:\n4\nNYY\nYNY\nYNY\nYYY\nSample Output:\n0\n1 1 2 1\n2 1 2 3\n3 1 2 3\n4 2 4 2"
    },
    {
        "number": 3493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\nYYY\nNYY\nYNY\n''') == '1 2 3'\nassert solution('''\n2\nYYY\nNYY\n''') == '1 2 3'\nassert solution('''\n1\nYYY\n''') == '1 1 1'\nassert solution('''\n8\nYNYYNYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\n''') == '2 1 2 1 3 2 2 2 3 3'\nassert solution('''\n4\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\nYYYYYYYYYYY\n''') == '2 2 2 3 3'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n\"\"\") == \"4 0 5\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '4'\nassert solution('10 10') == '0'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\nx..\\n...\\n') == '4'\nassert solution('6 1\\n2 3\\n1 2\\n4 5\\n2 2\\n5 3\\n') == '0\\n5\\n25'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '4'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '4 0 5'\nassert solution('''\n3 3\nx..\n...\n...\n3\n1 3\n1 1\n3 2\n''') == '4 0 5'\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n') == '0'\nassert solution('3\\n1 2\\n1 2\\n') == '5'\nassert solution('5\\n3 2 4 1\\n1 1\\n3 3\\n4 1\\n') == '5'"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"5 1\") == \"1\""
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"x..\\n...\\n...\") == \"0\"\nassert solution(\"1 3\\n1 1\\n3 2\\n\") == \"5\"\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '4'\nassert solution('3 3') == '4'\nassert solution('3 3') == '4'\n\nimport sys\n"
    },
    {
        "number": 3494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\n.....\n....x\n.....\n.....\n''') == '8'"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n3\\n4\\n5 3\\n\") == \"4.114 -2.842\"\nassert solution(\"3\\n1\\n5\\n3\\n4\\n5 3\\n\") == \"1.118 -2.037\"\nassert solution(\"3\\n5\\n3\\n4\\n5 3\\n\") == \"5.000 3.000\"\nassert solution(\"3\\n1\\n5\\n3\\n4\\n5 3\\n\") == \"6.297 -0.784\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '4.114 -2.842'\nassert solution('1') == '6.297 -0.784'\nassert solution('2') == '7.000 -1.000'\nassert solution('4') == '0.000 -2.000'\nassert solution('5') == '1.000 -1.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == \"4.114 -2.842\\n6.297 -0.784\\n5.000 3.000\"\nprint(solution(input()))\n\nassert solution('''\n10\n20\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n''') == \"5.500 -3.000\\n6.000 -2.000\\n6.000 -3.000\\n5.500 -2.000\\n5.500 -3.000\\n5.000 -1.000\\n5.000 -2.000\\n4.500 -1.000\\n4.000 -2.000\\n3.000 -1.000\\n2.000 -2.000\\n0.000 -2.000\\n0.000 -3.000\\n0.000 -4.000\"\nprint(solution(input()))\n\nassert solution('''\n7\n5\n3\n4\n2\n6\n5\n''') == \"4.123 -1.918\\n3.981 -2.164\\n1.797 -1.824\\n1.794 -2.183\\n1.843 -1.874\\n2.067 -1.894\\n0.829 -1.906\"\nprint(solution(input()))\n\nassert solution('''\n5\n4\n1\n1\n3\n''') == \"1.321 1.578\\n1.786 2.014\\n2.307 1.586\\n2.852 1.675\\n3.740 1.595\"\nprint(solution(input()))\n\nassert solution('''\n1\n1\n1\n''') == \"0.000\"\nprint(solution(input()))\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5\n3\n4\n5 3\n''') == '5.000 3.000'\nassert solution('''\n3\n5\n3\n4\n5 3\n''') == '4.114 -2.842'\nassert solution('''\n3\n5\n3\n4\n5 3\n''') == '5.000 3.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3\n    3\n    4\n    5 3\n    ''') == '4.114 -2.842'\nassert solution('''\n    1\n    2\n    3\n    4\n    5 2\n    ''') == '1.118 2.037'\nassert solution('''\n    4\n    3\n    4\n    5 3\n    ''') == '5.000 3.000'\n''')\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n5\\n3\\n4\\n5 3\\n') == '4.114 -2.842\\n6.297 -0.784\\n5.000 3.000'\nassert solution('3\\n0\\n3\\n4\\n5 3\\n') == '5.000 3.000'\nassert solution('0\\n-1000\\n1000\\n-1000\\n1000\\n-1000\\n1000\\n-1000\\n1000') == '0.000 -0.000'\nassert solution('1\\n-2\\n-1\\n1\\n1\\n1\\n1') == '1.000 1.000 1.000'\nassert solution('2\\n3\\n-2\\n1\\n2\\n-2\\n2\\n1\\n1\\n1\\n1\\n1\\n1') == '1.000 1.000 1.000'\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == '1.118 2.037'\nassert solution(\"5\") == '4.000 3.000'\nassert solution(\"3\") == '1.118 2.037'\nassert solution(\"5\") == '4.000 3.000'\n\n\"\"\"\n"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n3\\n5\\n3') == '4.114 -2.842'\nassert solution('2\\n1\\n10\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n15\\n19\\n23\\n26\\n28\\n31\\n36\\n41\\n45\\n50\\n55\\n60\\n65\\n70\\n75\\n80\\n85\\n90\\n95\\n100\\n105\\n110\\n115\\n120\\n125\\n130\\n135\\n140\\n145\\n150\\n155\\n160\\n165\\n170\\n175\\n180\\n185\\n190\\n195\\n200\\n205\\n210\\n215\\n220\\n225\\n230\\n235\\n240\\n245\\n250\\n255\\n260\\n265\\n270\\n275\\n280\\n285\\n290\\n295\\n300\\n305\\n310\\n315\\n320\\n325\\n330\\n335\\n340\\n345\\n350\\n355\\n360\\n365\\n370\\n375\\n380\\n385\\n390\\n395\\n400\\n405\\n410\\n415\\n420\\n425\\n430\\n435\\n440\\n445\\n450\\n455\\n460\\n465\\n470\\n475\\n480\\n485\\n490\\n495\\n500\\n505\\n510\\n515\\n520\\n525\\n530\\n535\\n540\\n545\\n550\\n555\\n560\\n565\\n570\\n575\\n580\\n585\\n590\\n595\\n600\\n605\\n610\\n615\\n620\\n625\\n630\\n635\\n640\\n645\\n650\\n655\\n660\\n665\\n670\\n675\\n680\\n685\\n690\\n695\\n700\\n705\\n710\\n715\\n720\\n725\\n730\\n735\\n740\\n745\\n750\\n755\\n760\\n765\\n770\\n775\\n780\\n785\\n790\\n795\\n800\\n805\\n810\\n815\\n820\\n825\\n830\\n835\\n840\\n845\\n850\\n855\\n860\\n865\\n870\\n875\\n880\\n885\\n890\\n895\\n900\\n905\\n910\\n915\\n920\\n925\\n930\\n935\\n940\\n945\\n950\\n955\\n960\\n965\\n970\\n975\\n980\\n985\\n990\\n995\\n1000\\n1005\\n1010\\n1015\\n1020\\n1025\\n1030\\n1035\\n1040\\n1045\\n1050\\n1055\\n1060\\n1065\\n1070\\n1075\\n1080\\n1085\\n1090\\n1095\\n1100\\n1105\\n1110\\n1115\\n1120\\n1125\\n1130\\n1135\\n1140\\n1145\\n1150\\n1155\\n1160\\n1165\\n1170\\n1175\\n1180\\n1185\\n1190\\n1195\\n1200\\n1205\\n1210\\n1215\\n1220\\n1225\\n1230\\n1235\\n1240\\n1245\\n1250\\n1255\\n1260\\n1265\\n1270\\n1275\\n1280\\n1285\\n1290\\n1295\\n1300\\n1305\\n1310\\n1315\\n1320\\n1325\\n1330\\n1335\\n1340\\n1345\\n1350\\n1355\\n1360\\n1365\\n1370\\n1375\\n1380\\n1385\\n1390\\n1395\\n1400\\n1405\\n1410\\n1415\\n1420\\n1425\\n1430\\n1435\\n1440\\n1445\\n1450\\n1455\\n1460\\n1465\\n1470\\n1475\\n1480\\n1485\\n1490\\n1495\\n1500\\n1505\\n1510\\n1515\\n1520\\n1525\\n1530\\n1535\\n1540\\n1545\\n1550\\n1555\\n1560\\n1565\\n1570\\n1575\\n1580\\n1585\\n1590\\n1595\\n1600\\n1605\\n1610\\n1615\\n1620\\n1625\\n1630\\n1635\\n1640\\n1645\\n1650\\n1655\\n1660\\n1665\\n1670\\n1675\\n1680\\n1685\\n1690\\n1695\\n1700\\n1705\\n1710\\n1715\\n1720\\n1725\\n1730\\n1735\\n1740\\n1745\\n1750\\n1755\\n1760\\n1765\\n1770\\n1775\\n1780\\n1785\\n1790\\n1795\\n1800\\n1805\\n1810\\n1815\\n1820\\n1825\\n1830\\n1835\\n1840\\n1845\\n1850\\n1855\\n1860\\n1865\\n1870\\n1875\\n1880\\n1885\\n1890\\n1895"
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == \"3.923 3.100\\n1.118 2.037\\n5.000 3.000\""
    },
    {
        "number": 3495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n3\n2\n4\n3 3\n\"\"\") == \"4.144 -0.784\"\nassert solution(\"\"\"\n4\n2\n-2\n3\n2 3\n\"\"\") == \"4.144 0.784\"\nassert solution(\"\"\"\n5\n3\n2\n4\n3 3\n\"\"\") == \"5.000 -0.784\"\nassert solution(\"\"\"\n3\n5\n3\n4\n3 3\n\"\"\") == \"4.144 -0.784\"\nassert solution(\"\"\"\n4\n-5\n-2\n3\n2 3\n\"\"\") == \"2.048 -0.784\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 5') == '3'\nassert solution('2 3 5 7') == '5'\nassert solution('2') == '4'\nassert solution('3') == '5'\nassert solution('5') == '8'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8''') == '13'\nassert solution('''3 3\n6 7 9\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7''') == '4'\nassert solution('''3 6\n4 5 9\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8''') == '10'\nassert solution('''3 1\n1 2\n1 3\n2 4\n3 5''') == '2'\nassert solution('''10 5\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 9\n8 10\n9 10''') == '11'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == \"5\"\nprint('PASSED')\n\nassert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == \"8\"\nprint('PASSED')\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\n2 3 5 7\\n2\\n3\\n5\\n6\\n8') == '13'\nassert solution('2 3\\n7 5\\n5\\n2\\n8\\n10\\n13') == '3'\nassert solution('3\\n3\\n4\\n2\\n3\\n2\\n4\\n3\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '58'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 5 7\\n2\\n3\\n5\\n6\") == \"13\"\nassert solution(\"4\\n2 3 5 7\\n2\\n3\\n5\\n6\") == \"10\"\nassert solution(\"3\\n3\\n3\\n3\\n\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3 5 7\\n2\\n3\\n5\\n6\\n8\\n') == '3\\n5\\n8\\n10'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 5\n2 3 5 7\n2\n3\n5\n6\n8\n''') == '3'\nassert solution('''5 5\n5 3 2 5 7\n2\n3\n5\n6\n7\n8\n''') == '8'\nassert solution('''5 5\n2 2 5 5 7\n2\n2\n5\n6\n7\n8\n''') == '13'\n"
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10 2\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n10 5\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n10 10\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n10 5\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\"\n\nassert solution(\"\"\"\n10 5\n2 3 5 7\n2\n3\n5\n6\n8\n\"\"\") == \"13\""
    },
    {
        "number": 3496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n2 3 5 7\\n2\\n3\\n5\\n6\") == \"8\"\nassert solution(\"5 1\\n2 3 5 7\\n5\\n6\\n8\\n9\") == \"13\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 3\n0 1\n1 2\n2 3\n2 4\n1 5\n1 2 5 \n''') == '0'\nassert solution('''\n4 2\n0 1\n1 2\n2 3\n''') == '2'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1\n2\n2\n2\n2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n3\n1 1\n1 2\n1 2\n1 3\n2 4\n1 5\n2 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n3\n0 1\n1 2\n2 3\n2 4\n1 5\n2 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n3\n0 0\n0 1\n0 2\n1 3\n1 4\n1 5\n1 6\n2 7\n2 8\n\"\"\") == \"0\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5\\n0 1\\n0 3\\n0 2\\n1 3\\n2 4\\n2 5\\n') == '0'\nassert solution('3 3\\n0 1\\n1 2\\n0 2\\n') == '0'\nassert solution('5 6\\n0 1\\n0 3\\n0 4\\n0 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n') == '2'\nassert solution('9 8\\n0 1\\n0 4\\n0 2\\n0 3\\n0 5\\n0 6\\n0 7\\n0 8\\n') == '4'\nassert solution('5 9\\n0 1\\n1 4\\n1 5\\n1 6\\n0 2\\n0 3\\n0 5\\n0 7\\n0 8\\n') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '0'\nassert solution('4 3') == '1'\nassert solution('5 3') == '0'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '0'\nassert solution('1 2\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5') == '1'\n\n'''"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"0\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"6 3\") == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0 1\\n1 2\\n2 3\\n2 4\\n1 5\\n1 2 5\\n') == '0'\nassert solution('4 4\\n0 1\\n1 2\\n2 3\\n3 4\\n1 5\\n2 5\\n1 3\\n2 5\\n') == '2'\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4\n0 1\n1 2\n2 3\n2 4\n\"\"\"\n) == \"0\"\n\n\"\"\"\nIn the above example, there is only one pig left.\n\"\"\""
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 3\\n\"\n    \"0 1\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"2 4\\n\"\n    \"1 5\\n\"\n    \"1 2 5\") == \"0\"\n"
    },
    {
        "number": 3497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1') == '0'\nassert solution('6 3') == '0'\nassert solution('10 4') == '1'\nassert solution('100 4') == '1'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '106'\n\nassert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '107'\n\nassert solution('''\n5 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '106'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n''') == '106\\n107\\n71\\n'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"106\\n107\\n71\"\n\nassert solution(\"\"\"\n3 2\n1 1 5 C1 L1 C100 U1 C1\n2 2 5 L2 U2\n1 1 3 C1 L1 C100 U1 C1\n\"\"\") == \"106\\n107\\n100\"\n\nassert solution(\"\"\"\n3 1\n1 2 5 C1 L1 C1 U1 C1\n1 1 5 L1 C100 U1 C1\n\"\"\") == \"106\\n107\\n100\"\n\nassert solution(\"\"\"\n3 2\n1 1 5 C1 L1 C100 U1 C1\n2 2 5 L2 U2\n1 1 3 C1 L1 C100 U1 C1\n\"\"\") == \"106\\n107\\n100\"\n\nassert solution(\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"106\\n107\\n71\""
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"107\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1') == '106'\nassert solution('1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\nassert solution('1 1 5 C1 L1 C100 U1 C1\\n106 3 1 C1') == '71'\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"106\"\nassert solution(\"\"\"\n20 1\n30 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"107\"\nassert solution(\"\"\"\n1 1\n70 3 1 C1\n\"\"\") == \"71\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"106\"\nassert solution(\"\"\"3 2\n1 1 5 C1 L1 C1 U1 C1\n50 2 5 C1 L1 C1 U1 C1\n70 3 1 C1\n\"\"\") == \"107\"\nassert solution(\"\"\"3 1\n50 2 5 C1 L1 C1 U1 C1\n1 1 5 C1 L1 C100 U1 C1\n70 3 1 C1\n\"\"\") == \"71\"\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2\n10 1 L1 C1 U1 C1\n20 2 L1 C2 U1 C1\n10 2 C2 L1 U1 C2\n''') == '''107\n'''\n"
    },
    {
        "number": 3498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1\\n50 2 5 C1 L1 C1 U1 C1\\n1 1 5 C1 L1 C100 U1 C1\\n70 3 1 C1') == '107'\n\nassert solution('3 2\\n1 1 1 C1') == '110'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AA\") == 51\nassert solution(\"BA\") == 2\nassert solution(\"AAAB\") == 33\n\nimport io\nimport os\nimport sys\n\nfrom collections import Counter"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AA\") == \"1\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('AA') == 51\nassert solution('AABBBBB') == 0\nassert solution('AAB') == 2\nassert solution('AAABBB') == 4\nassert solution('AAABBBAABBB') == 6\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AA') == '51'\nassert solution('AB') == '100'\nassert solution('BBCCCDDAA') == '1450'\nassert solution('AAAAAAAAAA') == '11'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '51'"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AA') == '51'\nassert solution('BCCBDBCB') == '50'\nassert solution('ABCDEFGHI') == '179'\nassert solution('AAABAA') == '42'\nassert solution('ABABBA') == '8'\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"51\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"AA\") == \"51\""
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"AA\") == \"1\"\n"
    },
    {
        "number": 3499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AA') == '51'\nassert solution('BB') == '2'"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == 'no ties'\nassert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == 'no ties'\nassert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == 'no ties'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'no ties'\nassert solution('1') == 'no ties'\nassert solution('2') == 'no ties'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'no ties'\nassert solution('4') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '2 1'\nassert solution('''5\n3 4 5 6 7\n1 2 3 4 5\n2 4 3 5 1\n5 4 3 2 1\n3 4 2 5 1\n4 5 3 2 1\n1 5 4 3 2\n''') == '1 2'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n7 8 6 6 8 5 1\n3 4 7 8 9 1\n7 4 5 8 9 1\n2 6 3 9 5 1\n6 3 2 5 8 1\n8 6 3 9 5 1\n2 6 3 9 5 1\n2 7 4 9 5 1\n''') == '6 2'\nassert solution('''\n10 11 9 6 6 2 1\n4 5 5 2 5 1\n3 4 5 4 5 1\n3 5 5 5 5 1\n5 4 5 5 5 1\n5 4 5 5 5 1\n4 5 4 5 5 1\n3 5 4 5 5 1\n5 5 4 4 4 1\n3 5 4 4 4 1\n5 4 4 4 4 1\n4 4 4 4 4 1\n4 4 4 4 4 1\n5 4 4 4 4 1\n5 4 4 4 4 1\n3 5 4 4 4 1\n3 5 4 4 4 1\n4 4 4 4 4 1\n4 4 4 4 4 1\n5 4 4 4 4 1\n5 4 4 4 4 1\n''') == '4 5'\nassert solution('''\n11 7 8 1 6 4\n3 4 7 8 9 1\n7 4 5 8 9 1\n2 6 3 9 5 1\n6 3 2 5 8 1\n8 6 3 9 5 1\n2 6 3 9 5 1\n2 7 4 9 5 1\n''') == '3 4'"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n\n14 23 39 59 63\n8 17 35 55 61\n15 26 42 53 71\n10 25 31 57 64\n6 20 44 52 68\n''') == '1 2'\n\nassert solution('''3\n4 5 7\n1 2 3\n3 4 5\n5 2 3\n3 4 1\n''') == '1 2'\n\nassert solution('''2\n3 3 3\n1 2 2\n2 1 2\n2 1 1\n''') == '1 2'\n\nassert solution('''5\n1 1 2\n2 3 4\n4 5 5\n5 4 5\n4 5 4\n''') == '4 5'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n10 23 31 57 64\n5 27 42 54 71\n4 27 42 54 71\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n8 17 35 55 61\n15 26 42 53 71\n14 23 39 59 63\n4 27 42 54 71\n''') == '4 2'\nassert solution('''\n10 23 31 57 64\n5 27 42 54 71\n4 27 42 54 71\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n8 17 35 55 61\n15 26 42 53 71\n14 23 39 59 63\n''') == '1 2'\nassert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\nassert solution('''\n5 27 42 54 71\n4 27 42 54 71\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n8 17 35 55 61\n15 26 42 53 71\n14 23 39 59 63\n''') == '1 2'\n'''\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1 2'\n\nassert solution('''\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n''') == '1'\n\nassert solution('''\n4\nnn''') == '1 2'\n\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3 29 45 56 68\\n1 19 43 50 72\\n11 25 40 49 61\\n9 23 31 58 63\\n4 27 42 54 71') == '1 2'\nassert solution('5\\n14 23 39 59 63\\n8 17 35 55 61\\n15 26 42 53 71\\n10 25 31 57 64\\n6 20 44 52 68') == '1 2'\nassert solution('100\\n' * 10) == 'no ties'\n"
    },
    {
        "number": 3500,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"no ties\"\nassert solution(\"3\") == \"1 2\"\nassert solution(\"4\") == \"no ties\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n2 1\n1 2 3\n1 2 3\n''') == '0'\nassert solution('''\n5\n4 1 2 2\n1 2 3 1\n1 2 3 1\n1 2 3 1\n1 2 3 1\n''') == '1'\nassert solution('''\n4\n3 3 2 2\n2 3 1 1\n1 2 3 1\n1 2 3 1\n''') == '1'\nassert solution('''\n3\n3 3 3\n2 3 1 1\n1 2 3 1\n''') == '0'\nassert solution('''\n6\n3 4 2 1 4 3\n3 2 1 1 1 2\n1 1 1 2 2 1\n1 1 1 2 2 1\n1 1 1 2 2 1\n''') == '1'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n') == '0'\nassert solution('3\\n3 1 1\\n1 2 3\\n1 2 3\\n') == '2'\nassert solution('1\\n1 1 1\\n1 2 3\\n1 2 3\\n') == '4'\nassert solution('6\\n2 1 1\\n2 2 3\\n3 2 3\\n4 4 3\\n5 5 2\\n6 6 3\\n') == '0'\nassert solution('7\\n1 1 1\\n1 2 3\\n1 2 3\\n2 2 3\\n2 3 1\\n3 3 1\\n3 1 1\\n') == '2'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n3 2 1\\n1 2 3\\n1 2 3') == '0'\nassert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n1 2 3') == '2'\nassert solution('3\\n3 2 1\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3') == '3'\n'''\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n6\n3 2 1 2 3 1\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n7\n5 2 1 5 3 4 1\n1 2 3 4 5 2 1\n1 2 3 4 5 2 1\n1 2 3 4 5 2 1\n1 2 3 4 5 2 1\n1 2 3 4 5 2 1\n1 2 3 4 5 2 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n6\n3 2 1 2 3 1\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n1 2 3 1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\n\nassert solution('''\n10\n3 1 5 2 7 8 6 5 4 3\n1 3 5 7\n1 2 4\n1 6 7\n2 4 3\n2 5 8\n2 6 7\n3 7 8\n3 4 5\n3 5 8\n''') == '0'\n\nprint('Tests passed.')\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n3 2 1\n1 2 3\n1 2 3\n''') == '0'\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n3 2 1\n1 2 3\n1 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n1 3 2 4 5\n1 2 5 3 4\n1 5 2 3 4\n1 4 3 2 5\n1 5 2 3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n4 2 1\n1 2 3\n1 2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '4'\nassert solution('6') == '5'"
    },
    {
        "number": 3501,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0', \"doh!\"\nassert solution('2') == '1', \"doh!\"\nassert solution('3') == '2', \"doh!\""
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n') == '0.4\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0.4\\n0'\nassert solution('1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.2\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4\\n') == '0.4\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0'\nassert solution('10 2 3') == '0.2'\nassert solution('16 3 4') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n''') == '0.4\\n0\\n0.2\\n0.171428571429\\n0.228571428571\\n'''"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '0.4'\nassert solution('6 2 3') == '0'\nassert solution('10 2 3') == '0.2'\nassert solution('16 3 4') == '0.171428571429'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 2 3\n6 2 3\n10 2 3\n16 3 4\nSample Input 2:\n5\n1 2 3\n6 2 3\n10 2 3\n16 3 4\n20 4 2\nSample Output 2:\n0.352380952381\n0.5\n0.285714285714\n0.428571428571\n0.285714285714\n0.25\n0.25''') == '0.285714285714'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3\\n6 2 3\\n10 2 3\\n16 3 4') == '0.4\\n0'\n"
    },
    {
        "number": 3502,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('10') == '0.2'\nassert solution('16') == '0.2'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1 + 1 = 2'\nassert solution('3') == '2 - 2 = 0'\nassert solution('4') == '2 * 2 = 4'\nassert solution('5') == '2 / 2 = 1'\nassert solution('6') == '1 + 1 = 2'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 + 2 = 3'\nassert solution('3 2') == '3 * 2 = 6'\nassert solution('4 5') == '4 - 5 = -1'\nassert solution('-1 -6') == '-1 - -6 = 5'"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 5\\n3 3\\n4 5\\n-1 -6\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"3\\n-10 5\\n7 3\") == \"7 - 5 = 2\\n-10 * 3 = -15\\n7 + 3 = 10\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2\n2 1\n2 4\n''') == '1 + 2 = 3\\n3 * 2 = 6\\n4 - 1 = 5\\n5 - -1 = 4'\nassert solution('''\n4\n1 2\n2 1\n3 3\n4 4\n''') == '1 + 2 = 3\\n3 * 2 = 6\\n4 - 1 = 5\\n5 - -1 = 4'\nassert solution('''\n5\n1 2\n2 1\n3 2\n4 3\n5 1\n''') == '1 + 2 = 3\\n3 * 2 = 6\\n4 - 1 = 5\\n5 - -1 = 4\\n6 + 5 = 7\\n7 * 6 = 42\\n8 - 2 = 7'\nassert solution('''\n9\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 2\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n5 5\n5 6\n5 7\n5 8\n5 9\n6 6\n6 7\n6 8\n6 9\n7 7\n7 8\n7 9\n8 8\n8 9\n9 9\n''') == '1 + 1 = 2\\n2 + 2 = 4\\n3 + 3 = 6\\n4 + 4 = 8\\n5 + 5 = 9\\n6 + 6 = 10\\n7 + 7 = 11\\n8 + 8 = 12\\n9 + 9 = 13\\n1 + 2 = 3\\n3 + 3 = 6\\n4 + 4 = 8\\n5 + 5 = 9\\n6 + 6 = 10\\n7 + 7 = 11\\n8 + 8 = 12\\n9 + 9 = 13\\n1 + 2 = 3\\n3 * 3 = 9\\n4 - 4 = 0\\n5 - 5 = -5\\n6 - 6 = -6\\n7 - 7 = -7\\n8 - 8 = -8\\n9 - 9 = -9\\n1 + 2 = 3\\n3 * 3 = 9\\n4 - 4 = 0\\n5 - 5 = -5\\n6 - 6 = -6\\n7 - 7 = -7\\n8 - 8 = -8\\n9 - 9 = -9'\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 5\\n3 3') == \"1 + 5 = 6\"\nassert solution('2\\n1 4\\n1 5\\n-1 -6') == \"1 - -6 = 5\"\nprint(\"solution() finished.\")\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1 = 1\"\nassert solution(\"2\") == \"2 = 2\"\nassert solution(\"3\") == \"3 * 3 = 9\"\nassert solution(\"4\") == \"4 - 5 = -1\"\nassert solution(\"5\") == \"5 - 5 = 5\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\\n2 4\") == \"1 + 2 = 3\\n2 * 2 = 4\"\nassert solution(\"1\\n3 2\\n4 5\") == \"3 * 3 = 9\\n4 - 5 = -1\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4\n1 5\n3 3\n4 5\n-1 -6\n\"\"\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\""
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 5\\n3 3\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"4\\n1 5\\n3 3\\n4 5\") == \"1 + 5 = 6\\n3 * 3 = 9\\n4 - 5 = -1\\n-1 - -6 = 5\"\nassert solution(\"3\\n4 5\") == \"impossible\"\n"
    },
    {
        "number": 3503,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3 = 9'\nassert solution('4') == '4 - 5 = -1'\nassert solution('5') == '5 + 5 = 10'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0\\n'"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n        4\n        1 3\n        2 8\n        5 6\n        3 5\n    \"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"\n        5\n        4 3\n        3 6\n        2 8\n        5 9\n        3 6\n        1 7 4\n        1 3 1\n    \"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '4'\nassert solution('1 2') == '2'\nprint('AoC 2020 Day 10 Part 1 solution:', solution(\n    get_input()))\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '''4'''\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '4'\nassert solution('3 1') == '0'\nassert solution('5 8') == '7'\nassert solution('3 2') == '1'\nassert solution('5 9') == '4'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '4\\n1\\n4\\n6\\n0'\nassert solution([5,3]) == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3\\n1 8\\n2 3\\n2 8\\n5 8\\n5 9\\n3 6 6\\n1 7 4\\n1 3 1') == '4\\n1\\n4\\n6\\n0'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n1\\n4\\n6\\n0\\n'\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"4\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 3504,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\n''') == '4\\n0\\n4\\n6\\n0'\nassert solution('''\n4 5\n8 3\n5 9\n3 4\n1 8\n1 3\n1 7\n1 3\n''') == '4\\n0\\n4\\n6\\n0\\n'\nassert solution('''\n4 5\n8 5\n3 4\n1 5\n1 7\n1 3\n''') == '3\\n0\\n4\\n6\\n0\\n'\nassert solution('''\n4 5\n8 7\n3 4\n1 5\n1 7\n1 3\n''') == '3\\n0\\n4\\n6\\n0\\n'\nassert solution('''\n3\n3\n4\n1\n3\n''') == '0\\n0\\n0\\n0\\n0\\n'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3 4\") == \"4\"\n\nassert solution(\"1 2 3 4\") == \"0\"\n\nassert solution(\"3 4 4 5\") == \"4\"\n\n\"\"\"\n\n\"\"\"\n--- Day 6: Probably a Fire Hazard ---\nOn the way to your gravity assist around the Moon, your ship computer beeps angrily about a \"fire\".\nOn the radio, an Elf is already explaining how to handle the situation: \"Don't worry, that's perfectly norma--\" The ship computer bursts into flames.\n\nYou notify the Elves that the fire has escaped, and they fly you back to safety.\n\nWhen you reach safety, they're winged toward a giant spiderweb at the base of a giant pyramid, pyramid_floor.\nThe spiderweb's legs are all long and thin, and it's unclear which direction the giant spiderweb is headed.\n\nIn the middle of the tunnel is a small room with a giant pyramid ceiling, Ceiling_Room. The wall between the pyramid floors is smooth and cold,\nbut there are no windows, so it appears to be a man-made wall that has been carved in to the floor.\n\nThe Ceiling_Room is to the north, so when you reach it, you look down and see that the wall has magically turned to a pyramid ceiling,\na giant Python room with a pyramid ceiling and walls. The ceiling is made of flooring and ceiling_roof, all of the same color as the walls.\nThe room is to the south, so when you reach it, you see a small chamber to the south.\n\nHow many times will the room and the ceiling look like this in either direction?\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n6\n1 2 3 4 5 6\n\"\"\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 1 4') == \"4\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3 4\n''') == '4'\nassert solution('''5\n2 6 5 4 5\n''') == '5'\n\"\"\""
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('4 1 2 3') == '0'"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 4 3') == 4\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 4\\n') == '4'\nassert solution('3 1 2 3\\n') == '5'\n\n---"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 3 5') == '5'\nassert solution('3 2 4 5') == '5'\nassert solution('-1 0 -2 -3') == '5'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3505,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"2\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1\\n20 60\\n50 90') == '4 3'\nassert solution('100 10\\n20 60\\n50 90') == '6 2'\nassert solution('10 10\\n20 60\\n50 90') == '6 2'\nassert solution('1 10\\n20 60\\n50 90') == '6 2'\nassert solution('1 100\\n20 60\\n50 90') == '6 2'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('20 60') == '2 1'\nassert solution('50 90') == '3 1'\n\n\"\"\""
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4 3'\nassert solution('3 2') == '3 3'\n\"\"\"\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 20 2') == '4 3'\n\nassert solution('20 60') == '4 3'\n\nassert solution('30 50') == '7 4'\n\nassert solution('50 30') == '7 4'\n\nassert solution('60 20') == '4 3'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n15 50\n25 20\n\"\"\") == \"3 2\"\nassert solution(\"\"\"\n5 2\n20 80\n30 50\n\"\"\") == \"4 3\"\n\"\"\"\n\n\nimport sys\nimport math\nimport os\nfrom io import StringIO\nimport re\n\n\"\"\"\nimport os\nos.environ[\"OUTPUT_PATH\"] = os.environ[\"OUTPUT_PATH\"].replace(\"OUTPUT_PATH\", os.path.dirname(__file__) + '/test_files')\n\"\"\"\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\n\nclass Input:\n    def __init__(self, input_txt):\n        self.input_txt = input_txt\n\n    def integer_list(self):\n        return self.input_txt\n\n    def integer_list(self):\n        return map(int, self.input_txt.split())\n\n    def integer_list(self):\n        return map(int, self.input_txt.split()[1:])\n    def integer_list(self):\n        return map(int, self.input_txt.split())\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 20\\n'\n    '20 50\\n'\n    '30 60\\n'\n    '10 50\\n'\n    '20 80\\n'\n    '20 100\\n'\n    '20 20\\n'\n    '20 60\\n'\n    '20 100\\n'\n    '20 60\\n'\n    '20 60\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'\n    '20 50\\n'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 32\\n20 60') == '4 3'\nassert solution('5 1 2\\n20 60') == '5 1'\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '3 5'"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3 2'\nassert solution('1 31 2') == '4 3'\nassert solution('20 60') == '3 2'\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 3506,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 1 2\n20 60\n50 90\n5 10\n4 20\n3 50\n2 60\n1 70\n0 10\n1 20\n4 50\n2 60\n1 70\n''') == '3 1'\n\nassert solution('''\n10 1 2\n20 60\n50 90\n5 10\n4 20\n3 50\n2 60\n1 70\n0 10\n1 20\n4 50\n2 60\n1 70\n''') == '0 1'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == \"3\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1 2 3 4\") == \"10\"\nassert solution(\"1 2 3 4 5\") == \"15\"\nassert solution(\"1 2 3 4 5 6\") == \"20\"\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 2') == '3'\nassert solution('1 1') == '2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string()) == '3'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1''') == '3'\nassert solution('''2 3 1''') == '6'''\nassert solution('''5 3 2''') == '10'''\nassert solution('''100 3 2''') == '200'''\nassert solution
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 1\n''') == '3'\nassert solution('''\n2 2 2\n''') == '1'\nassert solution('''\n2 2 3\n''') == '0'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('1 1 2') == '3'\nassert solution('1 2 1') == '2'\n'''"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2 1\n''') == '3'\nassert solution('''\n1 1 2\n''') == '2'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('5 2 3') == '10'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2 1\n''') == '3'\nassert solution('''\n2 2 3\n''') == '2'\n"
    },
    {
        "number": 3507,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 1') == '3'\nassert solution('1 2 2') == '2'\nassert solution('10 2 9 4') == '4'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1 1 1 1\"\n\nassert solution(\"5\") == \"1 1 1 1 1\"\n\nassert solution(\"1\") == \"1\"\n\nassert solution(\"2\") == \"1\"\n\nassert solution(\"3\") == \"2\""
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution('''\n4\n5245 812 48900 56410\n''') == '2 4'\nassert solution('''\n2\n10 3\n''') == '2 0'\n'''\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1341 2412 1200 3112 2391''') == '3 1'''"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n1341 2412 1200 3112 2391\n''') == '3 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1248 5101 200 661 3112') == '1 2'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n6\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution(\n'''\n7\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution(\n'''\n8\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution(\n'''\n9\n1341 2412 1200 3112 2391\n''') == '3 1'\nassert solution(\n'''\n10\n1341 2412 1200 3112 2391\n''') == '2 1'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1341 2412 1200 3112 2391') == '3 1'\nassert solution('5\\n4 3 6 5') == '4 2'\nassert solution('4\\n1 5 7 5') == '2 4'\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1341\\n2412\\n1200\\n3112\\n2391') == '3 1'\nprint(solution(input()))\n"
    },
    {
        "number": 3508,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5\\n1341 2412 1200 3112 2391\\n\"\n) == \"3 1\\n\"\n\nassert solution(\n    \"10\\n121737 2359 1112 4637 8116 1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"9 2\"\n\nassert solution(\n    \"5\\n121737 2359 1112 4637 8116 1 2 3 4 5 6 7 8 9 10 11 12\\n\"\n) == \"9 2\"\n\nassert solution(\"3\\n1000 1000 1000 1000 1000 1000 1000\\n1\") == \"2 1\"\n\nassert solution(\"4\\n1000 1000 1000 1000 1000 1000\\n\") == \"1 3\""
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"10 20\\n\"\n    \"3 5\\n\"\n    \"1 3 7\\n\"\n    \"2 1 1\\n\"\n    \"2 3 2\\n\"\n    \"2 3 5\\n\"\n    \"3 2 4\"\n    ) == \"6\"\nassert solution(\n    \"10 20\\n\"\n    \"6 5\\n\"\n    \"1 3 7\\n\"\n    \"2 1 1\\n\"\n    \"2 3 2\\n\"\n    \"2 3 5\\n\"\n    \"3 2 4\"\n    ) == \"0\"\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"6\"\nprint(solution())\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5') == '7'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 20') == '6'\nassert solution('10 20') == '6'\nassert solution('10 20') == '6'\nassert solution('10 20') == '6'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([\n'10',\n'20',\n]) == '6'\nassert solution([\n'3',\n'5',\n]) == '7'\nassert solution([\n'1',\n'3',\n'7',\n'2',\n'1',\n'2',\n'2',\n'3',\n'5',\n'2',\n'3',\n'4',\n'2',\n'3',\n'5',\n'3',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n'5',\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\n1 2 4\\n2 3 5\\n2 3 6\\n2 4 1\\n3 2 5\\n4 3 3\\n3 4 6') == '6'\nassert solution('10 10\\n1 2 3\\n2 2 2\\n3 3 2\\n4 4 2\\n5 5 5\\n6 6 4\\n7 7 5\\n8 8 5\\n9 9 5\\n10 10 6') == '7'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '6'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '5'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '4'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '3'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4''') == '6'\nassert solution('''2 2\n1 2\n1 1''') == '2'\nassert solution('''5 6\n2 3\n3 2\n4 1\n1 4\n1 3''') == '6'\nassert solution('''9 6\n2 1\n2 1\n2 2\n3 1\n3 1\n4 1\n4 1\n5 1''') == '9'\nassert solution('''16 2\n1 2\n2 1\n3 1\n3 1\n4 1\n5 1\n6 1\n6 1\n7 1\n7 1\n8 1\n8 1\n9 1\n9 1\n10 1\n10 1\n11 1\n11 1\n12 1\n12 1\n12 1\n13 1\n13 1\n13 1\n14 1\n14 1\n14 1\n15 1\n15 1\n16 1\n16 1\n16 1''') == '16'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 8\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4') == '6'\nassert solution('7 9\\n3 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n1 2 4') == '5'\nassert solution('7 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n1 2 4') == '8'\n"
    },
    {
        "number": 3509,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '6'\nassert solution('10 20\\n3 5\\n1 3 7\\n2 1 1\\n2 3 2\\n2 3 5\\n3 2 4\\n') == '10'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 ab b\\n1 b\") == \"1 -1\"\nassert solution(\"2 ab b\\n2 b\") == \"0 1\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\nab\n1 b\n''') == '0 1'\nassert solution('''\n2\nab b\n1 c\n''') == '-1 0'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 ab b\n1 b\n\"\"\") == \"\"\"0 1 \n-1 0\n\"\"\"[1:-1]\n\nassert solution(\"\"\"\n1 ab b\n2 b\n\"\"\") == \"\"\"0 1 \n0 -1\n\"\"\"[1:-1]\n\nassert solution(\"\"\"\n7 ab b\n1 b\n\"\"\") == \"\"\"0 0 \n0 -1\n\"\"\"[1:-1]\n\nassert solution(\"\"\"\n5 ab b\n2 b\n\"\"\") == \"\"\"0 1 \n-1 0\n\"\"\"[1:-1]\n\nassert solution(\"\"\"\n1 ab b\n2 b\n\"\"\") == \"\"\"0 0 \n0 -1\n\"\"\"[1:-1]"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"1 0\"\nassert solution(\"2\\nab\") == \"1 0\"\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '0 1'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '0 1'\nassert solution('''\n1 ab\n2 a\n''') == '-1 -1'\n\nassert solution('''\n1 ab\n2 a\n''') == '1 1'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 ab b\n1 b\n''') == '0 1'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 ab b\\n1 b\\n') == '0 1\\n-1 0'\n"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\nassert solution('2 ab b\\n0 1') == '-1 0'\nassert solution('1 ab b\\n-1 0') == '0 1'\nassert solution('1 ab b\\n0 1') == '-1 0'"
    },
    {
        "number": 3510,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 ab b\\n1 b') == '0 1'\nassert solution('3 b b\\n2 a\\n3 b') == '0 1 0'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\\n\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1 2\n2\n1 1 2\n2''') == '3'\nassert solution('''1 1 2\n1 1 2\n2''') == '0'\nassert solution('''2 2 2\n1 1 2\n2\n1 1 2\n2''') == '3'\nassert solution('''1 1 1\n1 1 2\n1 2 1\n2\n1 2 1\n2''') == '2'\nassert solution('''2 2 2\n1 1 2\n1 1 2\n2\n1 1 2\n2''') == '0'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '3'\nassert solution('1 2') == '3'\nassert solution('2') == '2'\nassert solution('1 1') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5\n1 1 1 2\n2\n1\n2\n''') == '1'\nassert solution('''\n5 6\n1 1 1 1 1 2\n1\n1\n2\n''') == '1'\nassert solution('''\n7 9\n1 1 1 1 1 1 2 1 1\n1\n2\n''') == '3'\nassert solution('''\n10 20\n1 1 1 1 1 1 2 1 1 1 2\n1\n2\n''') == '2'\nassert solution('''\n20 21\n
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\\n3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\\n1 1 2\\n2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n2 4\n1 1 2\n2\n1 1 2\n2\n\"\"\") == \"1\"\n\nassert solution(\n\"\"\"\n2 4\n2 2 1\n2\n1 1 2\n2\n\"\"\") == \"3\""
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n1 1 2\\n2\") == \"1\"\nassert solution(\"2 4\\n1 1 2\\n2\\n\") == \"3\"\n"
    },
    {
        "number": 3511,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2') == '3'\nassert solution('2 4\\n1 1 2\\n2\\n1 1 2\\n2') == '8'\nassert solution('1\\n2\\n') == '1'\nassert solution('1\\n1\\n') == '2'\nassert solution('2\\n') == '2'\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n0 5 2\n5 0 4\n2 4 0\n\"\"\") == \"7\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n5 2 4\\n0 5 2') == '7'\nprint('Day 15: First Unique Character in a String')\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 0 4') == '7'\nassert solution('0 5 2') == '4'\nassert solution('5 0 4') == '7'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 2\\n2 1 1') == '1 1 2 2'\nprint('All test cases passed!')\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n0 5 2\\n5 0 4\\n2 4 0') == '7'\n\nassert solution('4\\n0 2 2\\n0 0 0\\n0 1 1') == '0'"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n0 5 2\n5 0 4\n2 4 0''') == '7'\n''')"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '7'\nassert solution('5') == '6'\nassert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 5 2\n5 0 4\n2 4 0\n''') == '7'\n\n'''\n====================================================================================================================\n657. Robot Return to Origin\nhttps://leetcode.com/problems/robot-return-to-origin/\n\nThere is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\n\nThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\n\nNote: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\nExample 1:\n\nInput: \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n\nExample 2:\n\nInput: \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n\n=========================================\n"
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"7\""
    },
    {
        "number": 3512,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '5'\nassert solution('3') == '7'\n\"\"\"\nimport sys"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3\n4\n5''') == \"2\"\n\nassert solution('''1\n2\n3\n5\n6''') == \"5\"\n\nassert solution('''1\n2\n4\n7\n8''') == \"2\""
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1099511627776\") == \"8\"\nassert solution(\"1234567890123456\") == \"16\"\nassert solution(\"1234567890123456789\") == \"32\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '8'\nprint(solution(input()))\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1099511627776') == '8'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\nassert solution('1000000000000000000') == '7'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"9999999999999\") == \"28\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1099511627776\") == \"8\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"1227776\") == \"2\"\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '9'\nassert solution(input()) == '9'\nassert solution(input()) == '10'"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    1099511627776\n    4\n    1 2 3\n    3 4 5\n    4 2 5\n    2 3 5\n    2 1 5\n    2 2 5\n    2 1 5\n    2 4 5\n    2 3 5\n    2 2 5\n    1 2 5\n    2 3 5\n    2 2 5\n    3 4 5\n    3 2 5\n    3 1 5\n    2 3 5\n    2 2 5\n    2 4 5\n    2 1 5\n    ''') == '8'\n"
    },
    {
        "number": 3513,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''12\n3\n3\n5\n2\n3\n''') == '8'\nassert solution('''8\n10\n5\n7\n6\n''') == '8'\nassert solution('''4\n1\n4\n2\n1\n''') == '3'\nassert solution('''17\n6\n8\n7\n8\n7\n''') == '9'\nassert solution('''11\n7\n7\n8\n9\n1\n''') == '7'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"\n3 3\nx..\n.x.\nx.x\n\"\"\") == \"2\"\n\nassert solution(r\"\"\"\n5 4\nx.x.x.x.\nx.x.x.x.\nx.x.x.x.\nx.x.x.x.\nx.x.x.x.\n\"\"\") == \"3\"\n\nassert solution(r\"\"\"\n3 1\nx.x.\nx.x.\nx.x.\n\"\"\") == \"1\"\n\nassert solution(r\"\"\"\n3 3\nx.x.\nx.x.\nx.x.\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 3\nx.x\nx.x\nx.x\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1 1\nx.x\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n4 4\n.x.x.x.\n.xx.x.x.\n.xx.xx.x.\n.xx.xx.xx.\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '2'\nassert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('10 10') == '10'"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\n\nassert solution('''\n2 3\nx..\n.x.\nx.x\n''') == '2'\n\nassert solution('''\n2 2\nx.x\n''') == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\nx..\\n.x.\\nx.x') == '2'\nassert solution('3 3\\n.x.\\nx..\\nx.x') == '1'\nassert solution('2 3\\nx.\\nx.x') == '1'\nassert solution('2 3\\n.x.\\nx.x') == '0'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '2'\nassert solution() == '1'\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\nx..\n.x.\nx.x\n''') == '2'\n\nassert solution('''\n5 5\nx.x.x.\nx.x.x.\nx.x.x.\n.x..x.\n.x..x.\n''') == '4'\n\nassert solution('''\n1 1\nx.x\nx.x\n''') == '0'\n\n\n'''\ni'm too lazy to even do so in code\n'''"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n.x.\\nx.x\\n\") == \"2\"\nassert solution(\"3 2\\nx.x\\n.x.\\n\") == \"1\"\nassert solution(\"3 1\\n.x.\\n.x.\\n\") == \"0\"\nassert solution(\"3 3\\n.x.\\n.x.\\n\") == \"0\"\n"
    },
    {
        "number": 3514,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n\"\"\") == \"9\"\nassert solution(\"\"\"\n3\n1 2 3\n1 4 3\n1 5 2\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n7\n1 2 3\n2 3 2\n3 2 1\n4 1 1\n5 1 2\n6 1 1\n\"\"\") == \"13\"\nassert solution(\"\"\"\n6\n4 3 2\n5 2 5\n2 3 4\n0 0 1\n2 3 1\n3 5 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n7\n3 1 2\n2 3 1\n3 4 2\n3 1 3\n4 2 3\n4 5 3\n5 1 2\n\"\"\") == \"9\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\\n\") == \"9\\n-1\\n5\\n6\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\\n\"\nassert solution(\"4\\n1 2 3\\n2 3 3\\n3 3 2\\n4 3 2\\n\") == \"12\\n-1\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"9\"\n\nassert solution([5, 3, 2]) == \"6\"\nassert solution([4, 2, 4]) == \"8\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\nassert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\nassert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\nassert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\nassert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0\") == \"9\\n-1\\n5\\n6\\n\"\nassert solution(\"4\\n1 5 2\\n3 0 0\\n2 4 4\\n5 3 0\") == \"5\\n6\\n-1\\n4\\n\"\n"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n''') == '9'\nprint(solution('''5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\n'''))"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 2\\n2 5 2\\n3 0 0\\n4 2 4\\n5 3 0') == '9\\n-1\\n5\\n6\\n'"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '9'\nassert solution() == '-1'"
    },
    {
        "number": 3515,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '9\\n-1\\n5\\n6\\n'\nassert solution('10') == '5\\n6\\n'"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == \"91\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\nprint(solution('''\n5\n1 1 2 2 4 2\n2 1 1 2 2 4\n3 1 1 2 2 4\n4 1 1 2 2 4\n5 1 1 2 2 4\n'''))\nprint(solution('''\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n'''))"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"91\"\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"91\""
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == \"91\"\nassert solution('2') == \"118\"\nassert solution('3') == \"144\"\n\"\"\"\nimport itertools\n\nfrom sys import setrecursionlimit\n\nsetrecursionlimit(100000)\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n''') == '91'\nassert solution('''5\n2 5 4 4 5 1\n1 1 1 1 1 1\n2 1 1 1 1 1\n1 2 1 1 1 1\n1 2 1 1 1 1\n''') == '103'\n"
    },
    {
        "number": 3516,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"91\"\nassert solution(\"\"\"\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\n\"\"\") == \"36\"\nassert solution(\"\"\"\n1 1 40 30 20 10\n2 1 95 95 95 10\n\"\"\") == \"61\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '15'\nassert solution('2') == '30'\nassert solution('3') == '55'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"15\"\nassert solution(\"20\") == \"20\"\nassert solution(\"15 20\") == \"15\""
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\\n15 20\\n0\") == \"15\"\nassert solution(\"2\\n15 20\\n0\\n1 1\") == \"15\"\nassert solution(\"2\\n15 20\\n0\\n1 1\\n1 1\") == \"20\"\nassert solution(\"2\\n15 20\\n0\\n1 1\\n1 2\") == \"20\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '15'\nassert solution('2') == '20'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"15\"\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n15 20\n0\n1 1\n''') == '15'"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n15 20\n0\n1 1\n''') == '15'\n\n'''\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n15 20\\n0\\n1 1\\n') == '15'\nassert solution('2\\n16 20\\n0\\n1 2\\n') == '20'\nassert solution('3\\n16 20\\n0\\n1 2\\n') == '24'\nassert solution('3\\n16 20\\n0\\n1 2\\n') == '24'\nassert solution('3\\n16 20\\n0\\n1 2\\n') == '24'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '15'\nassert solution('3') == '60'\nassert solution('4') == '90'\nassert solution('5') == '120'\n"
    },
    {
        "number": 3517,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n15 20\n0\n1 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n2\n15 20\n0\n1 1\n\"\"\") == \"20\"\nassert solution(\"\"\"\n0\n5\n0 0\n1 1\n1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\n50\n0\n0 0\n1 1\n1 0\n\"\"\") == \"60\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 4\n1 3 375\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n\"\"\") == \"29\"\nassert solution(\"\"\"\n10 10\n3 1 3 5 25 25 50\n1 5 9\n1 3 1 1 2\n2 1 1\n2 5 4\n2 7 4\n3 2 1\n3 6 5\n3 7 7\n4 1 3\n4 3 3\n4 5 1\n4 6 6\n4 7 1\n5 1 1\n5 3 3\n5 4 4\n5 7 7\n6 1 1\n6 2 2\n6 4 4\n6 5 5\n6 7 6\n\"\"\") == \"24\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4') == 'impossible'\nassert solution('5 6') == '1498'\nassert solution('8 10') == '1367'\nassert solution('8 10') == '1367'\nassert solution('10 8') == '1729'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == 'impossible'"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 4\n1 3 5 7\n2 4 6 8\n3 5 7 8\n3 4 5''') == \"impossible\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n5\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n\"\"\"\n) == \"impossible\"\nassert solution(\n\"\"\"\n3\n1 1 375\n2 2 283\n3 3 98\n\"\"\"\n) == \"375\"\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('1 2\\n3 4\\n5 6\\n9 8\\n1 2 3\\n5 9 8\\n3 6 7') == 'impossible'\nassert solution('3\\n2\\n2\\n1\\n1\\n1') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98\\n\") == \"impossible\"\nassert solution(\"5 6\\n1 2 592\\n2 3 999\\n3 4 600\\n4 5 1\\n5 6 6\\n\") == \"9514\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"impossible\"\n\nassert solution('''\n5 3\n1 1 2\n3 4 6\n''') == \"10\"\n\nassert solution('''\n5 3\n1 1 2\n3 4 6\n''') == \"impossible\"\n\nassert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"10\"\n\nassert solution('''\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n''') == \"impossible\""
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98''') == 'impossible'\nassert solution('''5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\n4 2''') == '14'\nassert solution('''3 2\n1 5 8\n2 6 12\n''') == 'impossible'\nassert solution('''2 5\n1 5 8\n2 6 12\n''') == 'impossible'\nassert solution('''2 6\n1 5 8\n2 6 12\n''') == 'impossible'\n"
    },
    {
        "number": 3518,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4\\n3 1 375\\n2 5 283\\n1 4 716\\n3 4 98') == 'impossible'\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n1 1 2 1 1 2 2 1 1 2\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1') == '99999'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1.000000000'\nassert solution('100') == '4.999999997'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '1'\n) == '1.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('2') == '0.0'\nassert solution('4') == '1.000000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '2.000000000'\n\"\"\"\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('2') == '0.5'\nassert solution('3') == '0.3333333333'\nassert solution('4') == '0.5'\nassert solution('5') == '0.5'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '1.0'\nassert solution('4') == '4.0'\nassert solution('8') == '5.0'\nassert solution('16') == '7.0'\nassert solution('32') == '10.0'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1.000000000'\nassert solution('10') == '3.999999999'\nassert solution('1001') == '6.000000000000000001'\nassert solution('1234') == '12.500000000000001'\nassert solution('12345') == '12.500000000000005'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1.000000000'\n"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1.000000000'\nassert solution('3') == '2.000000000'\n'''"
    },
    {
        "number": 3519,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '3.0'\nassert solution('5') == '8.0'\nassert solution('1') == '1.0'\nassert solution('2') == '2.0'\nassert solution('1000') == '1.0'\nprint('solution is ok')\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == \"115.000000000\"\nassert solution(sample_input_2) == \"116.00999999\"\n\n## While working on it, I went over some of my code and changed a few things to make it more readable.\n## I had issues finding the index in the array of pills that are introduced, and also looking into how to\n## use a while loop to have the index loop only until the index is equal to the length of the array,\n## and also making sure to only count up to the index of the array.\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    100 3 10\n    15 99 98\n    40 3 2\n    90 10 9\n''') == '115.000000000'\nassert solution('''\n    100 3 5\n    15 99 98\n    40 3 2\n    90 10 9\n''') == '105.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\n\nassert solution('''\n100 5 50\n15 99 98\n40 3 2\n90 10 9\n''') == '123.000000000'\n\nassert solution('''\n100 10 10\n15 99 98\n40 3 2\n90 10 9\n''') == '101.000000000'\n\nassert solution('''\n100 10 10\n15 99 98\n40 3 2\n90 10 9\n''') == '101.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n10 3 10\n15 99 98\n40 3 2\n90 10 9\n\"\"\") == \"115.000000000\"\nassert solution(\"\"\"\n10000000 3 10\n15 999 98\n40 3 2\n90 10 9\n\"\"\") == \"11111.99999\"\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 5 4\n3 7\n4 8\n''') == '12.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('1000000000 1') == '1000000000'\nprint(solution([float(i) for i in input().split()]))\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n95 1 0\n''') == '124.000000000'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n95 1 0\n''') == '131.999999999'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n95 1 0\n''') == '109.999999999'\nassert solution('''\n100 3 10\n15 99 98\n40 3 2\n90 10 9\n95 1 0\n''') == '93.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10 3 10\n15 99 98\n40 3 2\n90 10 9\n''') == '115.000000000'\nassert solution('''\n10 3 100\n15 99 98\n40 3 2\n90 10 9\n''') == '153.011722222'\nassert solution('''\n10 1 1\n15 99 98\n40 3 2\n90 10 9\n''') == '91.000000000'\nassert solution('''\n10 1 5\n15 99 98\n40 3 2\n90 10 9\n''') == '90.000000000'\nassert solution('''\n10 0 5\n15 99 98\n40 3 2\n90 10 9\n''') == '99.000000000'\n"
    },
    {
        "number": 3520,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('100 3 10') == '115.000000000'\nassert solution('15 99 98') == '114.000000000'\nassert solution('40 3 2') == '84.000000000'\nassert solution('90 10 9') == '108.000000000'"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('2\\n100 1 0.5\\n100 1 1.5') == '199.500000'\nassert solution('2\\n100 1 1\\n100 2 1.5') == '200.000000'\nassert solution('2\\n100 1 1\\n100 1 1.5') == '200.000000'\nassert solution('2\\n100 1 1\\n100 1 1.5') == '200.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n1 2 1\n\"\"\") == \"199.500000\"\n\nassert solution(\"\"\"\n2\n5 1 1\n\"\"\") == \"199.500000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('5\\n100 2 2 3 3\\n100 2 2 2 3\\n100 2 2 2 2') == '199.500000'\nassert solution('7\\n100 9 9 9\\n100 9 9 9\\n100 9 9 9\\n100 9 9 9\\n100 9 9 9\\n100 9 9 9\\n100 9 9 9\\n100 9 9 9\\n') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0.000000\"\nassert solution(\"2\") == \"199.500000\"\nassert solution(\"2 2 1\") == \"202.000000\"\nassert solution(\"2 1 1\") == \"201.500000\"\nassert solution(\"1 1 1\") == \"200.000000\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n100 1 1\n100 1 1.5\n''') == '199.500000'\nassert solution('''\n1\n100 1 1\n''') == '199.500000'\nassert solution('''\n3\n1 1 1\n1 1 1.5\n''') == '200.000000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n1 1\\n1 1.5') == '199.500000'\nassert solution('10\\n500\\n1 1\\n1 1.5') == '997.500000'\nassert solution('1\\n100\\n1 1\\n1 1.5') == '198.500000'\nassert solution('1\\n1000\\n1 1\\n1 1.5') == '198.500000'\nassert solution('1\\n1000\\n1 1\\n1 1.5') == '199.500000'\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n100 1 1\\n100 1 1.5\") == \"199.5\"\nassert solution(\"3\\n-100 1 1\\n-100 1 1.5\") == \"199.5\"\nassert solution(\"3\\n-100 1 1\\n100 1 1.5\") == \"199.5\"\nassert solution(\"5\\n-1.1 1.1 1.1 1.1 1.1\") == \"2.8\"\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n10\n3 1 1\n3 1 1.5\n''') == '199.500000000000005'\nassert solution('''\n10\n2 1 1\n2 1 1.5\n''') == '199.500000000000005'\n'''\n"
    },
    {
        "number": 3521,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n100 1 1\\n100 1 1.5') == '199.500000'\nassert solution('3\\n100 1 1.5\\n100 1 1.5\\n100 1 2\\n') == '199.500000'\nassert solution('3\\n100 1 2\\n100 1 1.5\\n100 1 2\\n') == '199.500000'\nassert solution('3\\n100 1 2\\n100 1 2\\n100 1 1.5\\n') == '199.500000'\n\"\"\"\n\nn = int(input())\n\nstar_distance = []\nfor i in range(n):\n    star_distance.append(tuple(map(float, input().split())))\n\nstar_distance.sort(key=lambda x: x[0])\nmax_distance = 0\nfor i in range(len(star_distance)):\n    a, b, c = star_distance[i]\n    max_distance += max(0, (a - b) * abs(b - c))\n\nprint(max_distance)"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\"\nassert solution(\n    \"2 4\\n\"\n    \"1 3 4 5 6 7 8 9 10\"\n) == \"0\"\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('6 1') == '0'\nassert solution('10 2') == '0'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\n1 2 3 4 5 6 7 8 9 10 11 12''') == '1'\nassert solution('''4 8\n1 2 3 4 5 6 7 8 9 10 11 12''') == '3'\nprint(\"You're all set!\")\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\"\n\nassert solution(\n    \"1 2\\n\"\n    \"1 2 3 4 5 6 7 8 9 10 11 12\"\n) == \"1\"\n\nprint(solution(\n    \"1 2\\n\"\n    \"3 4 5 6 7 8 9 10 11 12\"\n))\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12''') == '1'\n''')"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\n\nassert solution('''\n5 3\n10 9 1 2 5 6 7 8 4 3\n''') == '2'\n\nassert solution('''\n3 3\n1 2 3 4 5 6 7 8\n10 11 12\n''') == '1'\n\nassert solution('''\n3 1\n1 1 1 1 1\n''') == '1'\n\nassert solution('''\n4 5\n8 7 6 5 4 3 2 1\n10 12 14 15 16 17 18 19 20\n''') == '2'"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '1'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '1'\nassert solution('''\n3 3\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '3'\nassert solution('''\n4 4\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\nassert solution('''\n5 5\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '3'\nassert solution('''\n6 6\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '2'\n"
    },
    {
        "number": 3522,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(s) == \"Impossible\"\nassert solution(i) == \"5\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('13 2 1 1') == '5'\nassert solution('13 12 1 1') == 'Impossible'\n\"\"\""
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"10\"\nassert solution(\"5000000\") == \"Infinite\"\nassert solution(\"-1\") == \"Infinite\"\nassert solution(\"13\") == \"5\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2 1 1\n3\n5\n1\n5\n1\n1''') == 'Impossible'\n\nassert solution('''5\n2\n2\n5\n5\n10\n10\n10''') == '10'\n\nassert solution('''100\n5\n1\n1\n1\n1\n5\n5\n5\n5\n1\n1\n1\n1\n5\n5\n5\n1\n1\n5\n5\n1\n1\n5\n5\n5\n5\n5\n1\n1\n5\n5\n5\n5\n5''') == '50'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1\n1\n1\n1\n''') == 'Impossible'\n\nassert solution('''\n3\n2\n1\n''') == '5'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"Impossible\"\nassert solution(\"3 2 1 1\") == \"5\"\nassert solution(\"5 3 4 2\") == \"Impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8\\n3 2 1 1') == 'Impossible'\nassert solution('4\\n4 4 4 4') == '4'"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '1'\nassert solution('15') == '2'\nassert solution('15') == '2'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 2 1 1\n''') == 'Impossible'\nassert solution('''\n3 2 1 1\n''') == '5'\n"
    },
    {
        "number": 3523,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == 'Impossible', 'Wrong solution'\nassert solution('1 2 5 10 25') == '5', 'Wrong solution'"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'yes'\nassert solution(input('abcd\\nxyz')) == 'no'\n\"\"\"\n\nn = int(input())\na = input()\nb = input()\na, b = a.lower(), b.lower()\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'no'\nassert solution('a') == 'no'\nassert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'yes'\n\nfor i in range(10000):\n    string_1 = stdin.readline().strip()\n    string_2 = stdin.readline().strip()\n    if len(string_1)!= len(string_2):\n        print('no')\n        continue\n    \n    for i in range(len(string_1)):\n        if i < len(string_1) - 1:\n            if string_1[i] > string_1[i+1]:\n                print('no')\n                break\n        if i < len(string_1) - 2:\n            if string_1[i] > string_1[i+2]:\n                print('no')\n                break\n        if i < len(string_1) - 3:\n            if string_1[i] > string_1[i+3]:\n                print('no')\n                break\n    else:\n        print('yes')\n\n'''\n\n\ns = input()\ns_1 = input()\ns_2 = input()"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"yes\"\nassert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"no\"\nassert solution(\"acd\") == \"no\"\n\"\"\"\nfrom itertools import product"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\nprint('YOUR CODE SUCCESSFULLY COMPLIES WITH THE CONVENTIONS')\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"no\"\nassert solution(\"acd\") == \"no\"\n'''\nimport unittest"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aabcad\") == \"yes\"\nassert solution(\"aba\") == \"yes\"\nassert solution(\"acd\") == \"no\""
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aabcad') == 'yes'\nassert solution('aba') == 'no'\nassert solution('acd') == 'no'\n\"\"\"\n\ns = input()\ns1, s2 = input(), input()\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'no'\nassert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''aabcad\naba\nacd\n''') == 'yes'\nassert solution('''fdsa\nasd\nsfd\n''') == 'no'\n'''\nExplanation:\n\nCora merged the string in such a way that the following conditions are satisfied:\n\n- For any two integers $0\\leq i<j<|s_1|$ (where $|s_1|$ is the length of $s_1$), the index of $s_1[i]$ in $s$ is less than the index of $s_1[j]$ in $s$\n- For any two integers $0\\leq i<j<|s_2|$, the index of $s_2[i]$ in $s$ is less than the index of $s_2[j]$ in $s$\n\nAs you can see, there are no two integers that satisfy the conditions.\n'''\n"
    },
    {
        "number": 3524,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == 'no'\nassert solution('aabcad') == 'yes'\nassert solution('aba') == 'yes'\nassert solution('acd') == 'no'\nassert solution('aaaaaaa') == 'no'\n\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        s = stdin.split()\n        if len(s)!= 2:\n            return \"no\"\n        s1 = sorted(s[0])\n        s2 = sorted(s[1])\n        if s1 == s2:\n            return \"yes\"\n        else:\n            return \"no\"\n\"\"\"\n\n\"\"\"\ns = input()\n\nprint(s.count('a'))\nprint(s.count('b'))\nprint(s.count('c'))\nprint(s.count('d'))\nprint(s.count('e'))\nprint(s.count('f'))\nprint(s.count('g'))\nprint(s.count('h'))\nprint(s.count('i'))\nprint(s.count('j'))\nprint(s.count('k'))\nprint(s.count('l'))\nprint(s.count('m'))\nprint(s.count('n'))\nprint(s.count('o'))\nprint(s.count('p'))\nprint(s.count('q'))\nprint(s.count('r'))\nprint(s.count('s'))\nprint(s.count('t'))\nprint(s.count('u'))\nprint(s.count('v'))\nprint(s.count('w'))\nprint(s.count('x'))\nprint(s.count('y'))\nprint(s.count('z'))\n\"\"\"\n\n\n\"\"\"\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '5'\nassert solution('10 20 30 40') == '7'\nassert solution('8 9 5 6') == '6'"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nassert solution('''\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"4 5 10\") == \"4\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 1 1 6\") == \"5\"\nassert solution(\"3 4 7 10\") == \"4\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 5 10\n2 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\nassert solution('''\n4 5 10\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '6'\nassert solution('''\n4 5 10\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '6'\nassert solution('''\n4 5 10\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '6'\nassert solution('''\n4 5 10\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '6'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\""
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 5 10') == '5'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\n''') == '5'\n\nassert solution('''2 5 7\n1 2 1 2\n1 3 3 4\n1 4 4 5\n2 4 2 6\n2 4 5 7\n3 4 3 5\n2 4 4 6\n3 4 5 7\n''') == '8'\n"
    },
    {
        "number": 3525,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 10\\n3 2\\n1 2 4 7\\n3 1 1 6\\n3 4 7 10\\n2 4 3 5\\n4 2 8 9') == '5'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n2 4 same\n3 5 same\n''') == '4'\n\nassert solution('''5 4\n2 4 false\n3 6 false\n''') == '0'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2 4\n2 3\n1 2\n''') == '4'\nassert solution('''\n1\n2 3\n3 1\n2 4\n2 4\n''') == '0'\nassert solution('''\n1\n4\n2 3\n''') == '0'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 same\n3 5 diff\n''') == '3'\nassert solution('''\n5 3\n2 4 same\n3 5 diff\n''') == '2'\nassert solution('''\n5 5\n2 4 same\n3 5 diff\n4 3 diff\n''') == '5'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\nassert solution('5 2\\n2 4 same\\n3 5 same\\n') == '0'\nassert solution('5 2\\n2 5 same\\n3 4 same\\n') == '4'\nassert solution('5 2\\n2 3 same\\n3 4 same\\n') == '3'\nassert solution('5 2\\n2 4 same\\n3 4 same\\n') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\nassert solution('5 100000\\n1000000 10000 1\\n1000000 10000 1\\n') == '1001'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"5 2\") == \"4\"\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '4'\nassert solution('1\\n1 1\\n1 1 1\\n0 1\\n1 0\\n1 0\\n0 0') == '0'"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 4 same\\n3 5 same\\n') == '4'\n\n'''\n\nimport math"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n2 4 same\n3 5 same''') == '4'\nassert solution('''10 10\n10 9 same\n10 9 same\n9 10 same\n10 9 same\n10 10\n9 10 same\n10 9 same\n9 10 same\n10 9 same\n9 10 same''') == '3'\nassert solution('''1 1\n1 1''') == '2'\nassert solution('''1 1\n1 1''') == '1'\n"
    },
    {
        "number": 3526,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n2 4 same\n3 5 same\n''') == '4'\nassert solution('''\n5 2\n2 4 same\n5 1 same\n''') == '3'\nassert solution('''\n3 5\n4 4 same\n1 5 same\n2 4 same\n''') == '5'\nassert solution('''\n3 4\n3 4 same\n1 5 same\n2 4 same\n''') == '5'\nassert solution('''\n2 5\n4 4 same\n3 5 same\n1 5 same\n2 5 same\n''') == '1'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n0 1\\n0 2\\n3 4\\n3 5\") == \"3\"\nassert solution(\"2 3\\n4 2\\n0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n0 2\\n3 4') == '3'\nassert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5\\n') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == '1'\nassert solution('9 4') == '2'\nassert solution('10 6') == '2'\nassert solution('15 4') == '3'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\nassert solution('2\\n0 1\\n0 2\\n3 4\\n3 5') == '4'\nassert solution('3\\n0 1\\n0 2\\n3 4\\n3 5') == '2'\nassert solution('3\\n0 1\\n0 2\\n0 3\\n0 4') == '1'\nassert solution('4\\n0 1\\n0 2\\n0 3\\n0 4') == '0'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5') == '3'\nprint(solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n'''))\nprint(solution('6 4\\n0 1\\n0 2\\n3 4\\n3 5'))"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 4') == '3'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 4') == '3'\nassert solution('0 1') == '1'\nassert solution('0 2') == '0'\nassert solution('3 4') == '1'\nassert solution('3 5') == '0'"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n0 2\\n3 4\\n3 5') == '3'\nassert solution('7 1\\n0 2\\n0 3\\n5 6\\n6 7\\n5 7') == '6'\nassert solution('7 1\\n0 2\\n5 3\\n3 4\\n4 5\\n5 6\\n6 7') == '2'\nassert solution('1 2\\n3 4\\n4 5\\n6 7\\n7 8') == '8'\n"
    },
    {
        "number": 3527,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 4\n0 1\n0 2\n3 4\n3 5\n''') == '3'\nassert solution('''\n3 4\n0 1\n0 2\n3 4\n3 5\n''') == '4'\nassert solution('''\n1\n0 1\n''') == '1'\nassert solution('''\n1\n0 1\n''') == '0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 4\n2 2\n4 1\n3 5\n5 3\nUDR''') == '10.5'\n\nassert solution('''5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR''') == '9.0'\n\nassert solution('''5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\nLRU''') == '8.5'"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == \"3\"\nassert solution('5') == \"11.0\"\nassert solution('10') == \"101.0\"\nassert solution('100') == \"1001.0\"\nassert solution('1002') == \"1012.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '9.0'\nassert solution('4') == '6.5'\nassert solution('3') == '2.5'\n\"\"\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR\\n') == '9.0\\n6.5\\n2.5'\nassert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nRUR\\n') == '6.5\\n2.5\\n9.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution('2\\n1 2\\n3 2\\n4 2\\n5 2\\n6 2\\nLUR') == '5.0\\n4.0\\n4.0'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n    '5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nLUR') == '9.0\\n6.5\\n2.5'\nassert solution(\n    '5\\n1 4\\n2 2\\n4 1\\n3 5\\n5 3\\nULRD') == '9.0\\n6.5\\n2.5'\n\"\"\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"9.0\"\nassert solution(\"10\") == \"10.0\"\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '9.0'\nassert solution('6') == '6.5'\nassert solution('7') == '2.5'\n"
    },
    {
        "number": 3528,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"4.0 2.0 0.0\""
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('5 5 5') == '1'\nassert solution('5 5 5') == '0'\nassert solution('1000 1000 1000') == '0'\nassert solution('10 10 10') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n4 4 2\nB 1 2\nR 3 1\nR 1 3\nR 2 3\n''') == '0'\nassert solution('''\n3 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n'''\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 3\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n\nassert solution('''\n5 5 2\nB 1 2\nB 1 3\nB 3 4\nB 5 2\nR 3 1\nR 4 5\n''') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4 3 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n4 3 2\nR 2 1\nR 1 3\n''') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 2 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\n\nassert solution('''\n7 8 6\nR 1 3\nB 2 5\nB 3 4\nB 4 7\nR 5 6\nB 6 7\nR 7 8\n''') == '0'\n\nassert solution('''\n4 5 7\nR 1 3\nB 2 5\nB 3 4\nB 4 7\nR 5 6\nB 6 7\nR 7 8\n''') == '0'\n\nassert solution('''\n7 8 6\nR 1 3\nB 2 5\nB 3 4\nB 4 7\nR 5 6\nB 6 7\nR 7 8\n''') == '1'\n\nassert solution('''\n7 8 5\nR 1 3\nB 2 5\nB 3 4\nB 4 7\nR 5 6\nB 6 7\nR 7 8\n''') == '1'"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 4 2\nR 1 2\nB 3 4\nB 3 1\nR 4 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5 5 7\nB 1 2 3 4\nB 1 5 6 7\nB 2 3 4 5\nB 3 4 5 6\nR 4 5 1 2\nB 5 1 2 3\nB 2 3 5 4\nR 4 5 2 1\nB 5 2 1 3 4\nB 3 4 5 6\nR 4 3 1 5\nB 4 1 5 6\nB 2 3 4 5\nB 3 4 6 7\nR 4 5 1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 2') == '1'\nassert solution('2 2 3') == '0'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution('2 4 1') == '0'\nassert solution('4 4 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 2 2\nB 1 2\nB 2 3\nR 3 1\n''') == '1'\nassert solution('''\n6 6 6\nR 3 2 2\nR 3 2 1\nR 3 2 3\nB 1 1 2\nB 1 1 3\nB 1 1 4\nR 1 2 1\nR 1 2 3\n''') == '0'\nassert solution('''\n3 1 2\nR 2\nB 1\n''') == '1'\nassert solution('''\n3 3 2\nB 1 2\nR 3 1\nR 3 2 3\nB 1 1 2\nR 1 1 3\nR 2 1 3\n''') == '1'\nassert solution('''\n4 5 6\nR 1 2 3\nB 1 3 2\nR 1 2 3\nR 2 3 3\nR 2 4 3\nB 1 2 3\nR 2 2 3\nR 1 3 3\nR 2 1 3\nR 1 2 3\nB 2 3 2\nB 2 2 1\nR 1 2 1\nB 3 2 1\nB 1 1 1\nR 2 1 1\nB 1 1 1\nR 1 1 1\nB 1 1 1\nR 2 2 1\n''') == '1'\n"
    },
    {
        "number": 3529,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2\\nB 1 2\\nB 2 3\\nR 3 1\\n\") == \"1\"\nassert solution(\"7 4 5\\n1 3 2\\n2 3 4\\n3 2 1\\n4 5 1\\n5 3 2\\n6 4 3\\n6 5 3\\n\") == \"0\"\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 0 5\\n7 0 7\\n4\") == \"88\\n5\\n5\\n7\"\nassert solution(\"1\") == \"1\\n1\\n1\\n1\"\nassert solution(\"4\") == \"1\\n1\\n1\\n1\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 0 5\\n7 0 7\\n4') == '88\\n5\\n5'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n5 0 5\\n7 0 7\\n4\\n88\\n5\\n6\\n7\") == \"88\\n5\\n5\\n7\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([3, 5, 7, 4]) == \"88\\n88\\n88\\n88\\n88\""
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([1, 2, 3, 4, 5]) == \"6\"\nassert solution([6, 2, 4, 8, 10, 1, 3, 5, 7, 9]) == \"7\"\nassert solution([1, 2, 3, 4, 5]) == \"6\"\nassert solution([7, 4, 8, 5, 2, 1, 3]) == \"7\"\nassert solution([10, 2, 8, 5, 4, 7, 9]) == \"9\"\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '5'\nassert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n0 5\n7 0 7\n4\n88\n5\n6\n7\n''') == '88'\n\nassert solution('''\n1\n1\n3\n4\n''') == '4'"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '88'\nassert solution('5') == '5'\nassert solution('4') == '7'\n"
    },
    {
        "number": 3530,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"88\"\nassert solution(\"5 0 5\") == \"5\"\nassert solution(\"7 0 7\") == \"7\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == -1\nassert solution('3 3 1 2') == 5\nassert solution('1 2 2') == -1\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 2\") == \"5\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"3 3 1 2\") == \"6\"\nassert solution(\"3 3 1 1\") == \"2\"\nassert solution(\"3 2 3 1\") == \"1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"5\"\nassert solution(\"2 4 1 2\") == \"-1\"\nassert solution(\"3 4 1 2\") == \"5\"\nassert solution(\"3 5 1 2\") == \"5\"\nassert solution(\"3 4 3 4\") == \"-1\"\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3 1 2') == '5'\nassert solution('4 4 4 3') == '-1'\nassert solution('3 4 2 3') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 1 2') == '5'\nassert solution('7 4 3 1 2') == '-1'\nassert solution('12 9 5 1 5 7') == '-1'\nassert solution('1 2 5 1 5 7') == '6'"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3 1 2') == '-1'\nassert solution('5 2 1 3 2') == '-1'\nassert solution('3 1 2 3') == '-1'\nassert solution('4 1 1 2') == '3'\nassert solution('1 3 1 3') == '3'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3 1 2') == '5'\nassert solution('3 3 1 2') == '-1'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\n''') == '5'\n"
    },
    {
        "number": 3531,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '5'\nassert solution('3 3 1 2') == '5'\nassert solution('4 4 2 3') == '-1'\nassert solution('4 4 2 3') == '-1'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('mirkovC4nizCC44') =='mirnoviz'\nassert solution('mirkoCC44') =='mirko'\nassert solution('mirko1111') =='mirko'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''mirkoC4nizCC44''') =='mirkniz'\nassert solution('''mirkoC4nizCC44''') =='mirkoC4nizCC44'\nassert solution('''mirkoC4nizCC44''') =='mirkoC4nizCC44'\nassert solution('''mirkoC4nizCC44''') =='mirkoC4nizCC44'\nassert solution('''mirkoC4nizCC44''') =='mirkoC4nizCC44'\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nprint(solution(\"mirkovC4nizCC44\"))"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"mirkovC4nizCC44\") == \"mirkvniz\"\nassert solution(\n    \"C4\") == \"C4\"\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovnizCC44\"\n\nSample Input:\nmirkovCCCCC44\nCCCC\nSample Output:\nFRULA"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\n\nfor i in range(0, 100):\n    for j in range(0, 100):\n        if solution('mirkovC4nizCC44') =='mirkovniz':\n            print(\"test passed\")\n            break\n    if solution('mirkovC4nizCC44')!='mirkovniz':\n        print(\"test failed\")\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"C2QzDxC\") == \"zDx\"\nassert solution(\"zDx\") == \"zDx\"\n\nprint(\"Congratulations! Your solution is correct.\")\n"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkniz'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('mirkovC4nizCC44') =='mirkovniz'\nassert solution('misscatCATnizCC44') =='misscatCATnizCC44'"
    },
    {
        "number": 3532,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"mirkovC4nizCC44\") == \"mirkovniz\"\nassert solution(\"bababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n3\\n65\\n45\\n60\\n25') == '32'\nassert solution('2\\n3\\n5\\n8\\n2') == '37'\nassert solution('2\\n3\\n5\\n8\\n5') == '37'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 10\\n65 65\\n10 10\\n') == '32'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 3, 3]) == '32'\nassert solution([3, 3, 3]) == '32'\nassert solution([3, 3, 3]) == '32'\n\nassert solution([10, 10, 10]) == '20'\nassert solution([10, 10, 10]) == '20'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '2'\nassert solution('5') == '1'"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '32'\n\"\"\"\n\nfrom typing import List\n\nN = int(input())\nnums = []\ntickets = []\nfor i in range(0, N):\n    tokens = list(map(int, input().split()))\n    nums.append(tokens[0])\n    tickets.append(tokens[1])\n\nN = len(nums)\n\ncounter = 0\nfor i in range(0, N):\n    for j in range(0, N):\n        if i == j:\n            continue\n        if nums[i] > nums[j]:\n            diff = nums[i] - nums[j]\n            if diff in nums:\n                if tickets[i] == tickets[j]:\n                    counter += abs(nums[i] - nums[j])\n                else:\n                    counter += abs(nums[i] - nums[j]) + tickets[i] + tickets[j]\n\nprint(counter)\n\n\"\"\"\n--- Day 7: Probably a Fire Hazard ---\n\nThis year, the local fire station is having a bad day. The locals are having a bad day when they fire their smoke detectors!\n\nAll the smoke detectors in the station are old smoke detectors with a simple indicator LEDs on each. The detector indicates whether a smoke is in the vicinity. The smoke detectors are wired into four electrical wires. The wires twist in all directions; they move at different speeds when the smoke is detected. The smoke detector LEDs are very similar to those of the ones you bought in your shop in 2015.\n\nThe smoke detectors have been replaced with new ones. The new ones have eight LEDs, each LED representing one of the four directions (N, E, S, W). The smoke detector LEDs are very similar to the LED they had on the old detectors (the LEDs are represented by a 1). When a smoke is detected, the LED turns red and stays red for six seconds. During this time, the LED turns white and stays white for four seconds, and then turns red for one second. Then, if you hear a sound, the LED turns green and stays green for ten seconds.\n\nIt is unfortunately no longer possible to tell which direction the smoke is coming from! A nearby airport, called \"Krummesse\", has opened up a new line of smoke detectors in their tower! Your job is to figure out which one of the detectors can be the nearest one to the airport.\n\nThe nearby airport sits just above a single dark room with a large pile of fire-proofing candles. The floor of the room is just an ordinary old wooden floor with two dark red candles on each of the four walls. A fire could be caused by the local fire station or a nearby fire station. It\u2019s pretty dark, so you don\u2019t know whether it\u2019s the local one or the nearby one. You have the same idea: you can turn on the LEDs and see whether the smoke goes the way you think it does.\n\nThe nearby fire-proofing candles are a pile of four-directional candles. The LED\u2019s are represented by the same set of eight bits (they are the same as in the old detectors). The LED is very much like a normal LED, but it doesn\u2019t blink when the smoke goes away. When the smoke is still there, the LED turns white and stays white for ten seconds. If it\u2019s not clear whether the smoke is coming from the local fire station or the nearby fire station, how can you tell?\n\nThe smoke detectors are installed in a very peculiar way. The six LEDs are wired together, with one LED per each of the four directions (N, E, S, W). So, taking any of the four directions, you can turn on any of the four LEDs. You can\u2019t turn off any of the four LEDs, but you can turn off any LED individually.\n\nEach of the four directions is represented by exactly four LEDs. The LEDs are physically connected to the wire, which is wired in the same direction as the direction the LED is on. So, when the direction is N, the first LED is on the wire to the north, the second LED is on the wire to the east, and so on. So, in N=0, the first LED is on wire to the west, the second LED is on wire to the south, and so on. (But you can\u2019t switch to the wire in the direction the LED is on.)\n\nFor example, the following lighting pattern shows the first and fourth LEDs as white and the second and third LEDs as green.\n\nTake the above example:\n\nN=0, E=0, S=0, W=0\nN=0, E=1, S=0, W=0\nN=0, E=0, S=1, W=0\nN=0, E=0, S=0, W=1\nN=0, E=0, S=1, W=1\nN=0, E=1, S=0, W=0\nN=0, E=1, S=1, W=0\nN=0, E=0, S=0, W=1\nN=0, E=0, S=1, W=1\nN=0, E=1, S=0, W=1\nN=0, E=1, S=1, W=1\n\nIf there\u2019s a nearby fire-proofing candle, you can see the fire go in only one direction. (If you\u2019re not sure, check the example.)\n\nYou know the exact location of the local fire-proofing candle, and know that the nearby fire-proofing candles are on different locations. All you know is that they all go in different directions.\n\nWrite a program that determines whether it\u2019s possible to see the fire in only one direction. You\u2019ll need to give the exact location of the fire-proofing candle and the locations of the nearby fire-proofing candles.\n\nThe first line contains two integers N, M (1 <= N, M <= 1000000) \u2014 the number of smoke detectors, and the number of nearby fire-proofing candles. The next M lines contain two integers each. Each of the next M lines contains exactly one space, and the first two numbers in each line describe the positions of the smoke detectors and the nearby fire-proofing candles.\n\nIt is guaranteed that at least one smoke detector is detecting the smoke.\n\nIn your solution, you must use only one LED. To turn the LEDs on and off, use the same method as in the old detectors.\n\nSample Input:\n3 1\n2 3\n0 1\n3 4\n2 3\n0 1\nSample Output:\ntrue\nfalse\nfalse\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '32'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '3'\nassert solution('3\\n1\\n2') == '5'\nassert solution('5\\n1\\n2\\n3') == '11'\n\"\"\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3 65\n45 10\n60 25\n\"\"\") == \"32\"\nassert solution(\"\"\"\n10\n1 100\n1 200\n2 500\n2 1000\n3 500\n3 1000\n3 2000\n\"\"\") == \"650000\"\nassert solution(\"\"\"\n5\n1 500\n2 500\n3 500\n4 500\n5 500\n\"\"\") == \"250000\"\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3 65\\n45 10\\n60 25') == '32'\nassert solution('1\\n2 2\\n4 4') == '0'\n"
    },
    {
        "number": 3533,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 0 3 1') == '3'\nassert solution('5 1 2 3 4 0') == '4'\nassert solution('10 2 1 3 4 0') == '7'"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2 0 3 1\n3 2 1''') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n1\n2\n0\n1\n''') == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 0 3 1') == '2'\nassert solution('5\\n1 2 3 1') == '3'\nassert solution('4\\n1 2 3 1') == '2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n1 2 3\\n5 6 7\"\n) == \"3\\n2\"\nassert solution(\n    \"10\\n10 10 10 10 10 10 10 10 10 10 10 10 10 10\"\n) == \"10\"\nassert solution(\n    \"7\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\"\n) == \"1\"\nassert solution(\n    \"7\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\"\n) == \"3\"\nassert solution(\n    \"4\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\"\n) == \"1\"\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 0 3 1\\n') == '3\\n2'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '3'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 0 3 1') == '2'\nassert solution('10\\n5 4 3 2 1') == '10'\nassert solution('15\\n1 2 5 3 4 0 3 4 0 1') == '4'\nassert solution('10\\n1 2 3 4 5 6 7 8 9') == '1'\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 0 3\n''') == '2'''\n"
    },
    {
        "number": 3534,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2 0 3 1\n''') == '3'\n\nassert solution('''\n10\n1 3 2 2 1 4 3 2 2\n''') == '5'\n\nassert solution('''\n100\n
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n5 5\n+ 1 1\n+ 1 2\n+ 1 3\n+ 1 4\n- 1 5\n- 1 6\n- 1 7\n+ 1 8\n- 1 9\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n10 5\n+ 1 1\n+ 1 2\n+ 1 3\n+ 1 4\n- 1 5\n- 1 6\n- 1 7\n+ 1 8\n+ 1 9\n- 1 10\n- 1 11\n- 1 12\n+ 1 13\n- 1 14\n+ 1 15\n+ 1 16\n- 1 17\n- 1 18\n- 1 19\n\"\"\") == \"162\"\n\nassert solution(\"\"\"\n4 5\n+ 1 1\n+ 1 2\n- 1 3\n+ 1 4\n- 1 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"2\"\nassert solution(\"3 3 5\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"1\"\n\nassert solution(\"3 3 6\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"0\"\n\nassert solution(\"3 3 3\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"1\"\n\nassert solution(\"3 3 3\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"0\""
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n') == '2'\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\") == \"4\""
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\n''') == '2'\n\n'''\nthe key is that if we say that we know the spin of all the electrons, we know that there are at least 2 electrons with same spin, and the third line has the same spin but different positions\nso there are at least 2 electrons with the same spin and same position. the fourth line does not have the same position, so the third line does not have the same spin, so the total count is 2\n'''\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 4') == '2'\nassert solution('-1 1') == '1'\nassert solution('+ 1 1') == '2'\nassert solution('+ 1 2') == '0'\nassert solution('-1 2') == '2'\n\n--------------------------------------------------------------------------------------------------------------------------------\n\n1188. Flatten Nested List Iterator\nMedium\n\n5188\n\n181\n\nAdd to List\n\nShare\nImplement an iterator over a binary tree. The iterator is initialized with the root node of the tree. You must use the next() method exactly once for each call to hasNext() and getNext()\n\nImplement the hasNext() and getNext() functions.\n\n\n\nExample 1:\n\n\n\nInput\n[\"FlattenIterator\",\"next\",\"hasNext\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"next\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"next\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"next\",\"next\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"next\",\"next\",\"hasNext\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"hasNext\",\"next\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext\",\"hasNext"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == 1\nassert solution('1 1') == 1\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n\") == '2'\nassert solution(\n    \"2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4\\n\") == '1'\nassert solution(\n    \"3 3 2\\n+ 1 1\\n- 1 2\\n+ 1 3\\n+ 1 4\\n- 1 5\\n\") == '3'\n"
    },
    {
        "number": 3535,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 4 4\\n+ 1 1\\n- 1 2\\n+ 1 3\\n- 1 4') == '2'\nassert solution('8 3 3\\n- 2 -\\n- 1 1\\n- 2 2\\n- 2 3\\n- 3 3\\n- 1 4\\n+ 1 4\\n+ 2 2\\n+ 2 4\\n+ 3 3\\n+ 4 4\\n') == '3'"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1000000000 0\") == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n0\n500000004\n''') == '0.68786414785493185'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n10000000000 1\n2\n30000000000 2\n4\n50000000200 5\n''') == '16000000000000'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5000000000 0') == '500000004'\nassert solution('1000000000 1') == '500000004'\nassert solution('3 1000000001 1') == '500000004'\nassert solution('1000000000 3') == '500000004'\nassert solution('1000000000 0') == '0'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1000000000 0\\n1000000000 1\\n\") == \"500000004\"\nassert solution(\"1000000000 1\\n1000000000 1\\n\") == \"4000000001\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n1\\n1\\n1\\n1\\n1\\n') == '1'\n\"\"\""
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"500000004\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1000000000 0\\n1000000000 1\\n\") == \"500000004\"\nassert solution(\"3\\n3 2 1\\n2 3 1\\n1 3 1\\n\") == \"0.666666666667\"\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1000000000 0\n1000000000 1\n''') == '500000004'\n"
    },
    {
        "number": 3536,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n2\\n1\\n3\\n2') == '1.0'\nassert solution('1000000000 0\\n1000000000 1') == '500000004'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''2\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n''') == '0'\nassert solution('''5\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 3 13 27\n3 5 23 24\n''') == '10'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 8') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"12\""
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 8\") == \"12\"\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8') == '12'\nassert solution('10 10') == '0'\nassert solution('1 2 1 10') == '12'\nassert solution('2 4 11 16') == '12'\nassert solution('2 1 9 12') == '13'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\nassert solution('''5 4\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '28'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\n''') == '12'\n"
    },
    {
        "number": 3537,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 1 10') == '12'\nassert solution('5 8') == '13'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3'\nassert solution('4 5 3') == '3'\nassert solution('10 10 4') == '1'\nassert solution('20 5 3') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n    3\n    15 5 3\n    12 4 4\n    20 10 5\n    ''') == '3'\nassert solution('''\n    4\n    5 9 1 3\n    12 4 4\n    20 10 5\n    ''') == '1'\nassert solution('''\n    5\n    15 9 1 3\n    12 4 4\n    20 10 5\n    ''') == '4'\nassert solution('''\n    6\n    15 9 1 3\n    12 4 4\n    20 10 5\n    10 12 5\n    ''') == '2'\nassert solution('''\n    9\n    15 9 1 3\n    12 4 4\n    20 10 5\n    10 12 5\n    10 12 5\n    ''') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 19\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nassert solution('''\n3 5\n1 5 1\n1 2 1\n1 3 1\n''') == '2'\nassert solution('''\n4 5\n1 5 1\n1 2 1\n1 3 1\n1 5 1\n''') == '3'\nassert solution('''\n5 5\n1 5 1\n1 2 1\n1 3 1\n1 4 1\n''') == '3'\nassert solution('''\n10 15\n1 5 1\n1 2 1\n1 3 1\n1 4 1\n1 5 1\n1 6 1\n1 7 1\n1 8 1\n1 9 1\n1 10 1\n1 11 1\n1 12 1\n1 13 1\n1 14 1\n1 15 1\n1 16 1\n1 17 1\n1 18 1\n1 19 1\n1 20 1\n1 21 1\n1 22 1\n1 23 1\n1 24 1\n1 25 1\n1 26 1\n1 27 1\n1 28 1\n1 29 1\n1 30 1\n1 31 1\n1 32 1\n1 33 1\n1 34 1\n1 35 1\n1 36 1\n1 37 1\n1 38 1\n1 39 1\n1 40 1\n1 41 1\n1 42 1\n1 43 1\n1 44 1\n1 45 1\n1 46 1\n1 47 1\n1 48 1\n1 49 1\n1 50 1\n1 51 1\n1 52 1\n1 53 1\n1 54 1\n1 55 1\n1 56 1\n1 57 1\n1 58 1\n1 59 1\n1 60 1\n1 61 1\n1 62 1\n1 63 1\n1 64 1\n1 65 1\n1 66 1\n1 67 1\n1 68 1\n1 69 1\n1 70 1\n1 71 1\n1 72 1\n1 73 1\n1 74 1\n1 75 1\n1 76 1\n1 77 1\n1 78 1\n1 79 1\n1 80 1\n1 81 1\n1 82 1\n1 83 1\n1 84 1\n1 85 1\n1 86 1\n1 87 1\n1 88 1\n1 89 1\n1 90 1\n1 91 1\n1 92 1\n1 93 1\n1 94 1\n1 95 1\n1 96 1\n1 97 1\n1 98 1\n1 99 1\n1 100 1\n1 101 1\n1 102 1\n1 103 1\n1 104 1\n1 105 1\n1 106 1\n1 107 1\n1 108 1\n1 109 1\n1 110 1\n1 111 1\n1 112 1\n1 113 1\n1 114 1\n1 115 1\n1 116 1\n1 117 1\n1 118 1\n1 119 1\n1 120 1\n1 121 1\n1 122 1\n1 123 1\n1 124 1\n1 125 1\n1 126 1\n1 127 1\n1 128 1\n1 129 1\n1 130 1\n1 131 1\n1 132 1\n1 133 1\n1 134 1\n1 135 1\n1 136 1\n1 137 1\n1 138 1\n1 139 1\n1 140 1\n1 141 1\n1 142 1\n1 143 1\n1 144 1\n1 145 1\n1 146 1\n1 147 1\n1 148 1\n1 149 1\n1 150 1\n1 151 1\n1 152 1\n1 153 1\n1 154 1\n1 155 1\n1 156 1\n1 157 1\n1 158 1\n1 159 1\n1 160 1\n1 161 1\n1 162 1\n1 163 1\n1 164 1\n1 165 1\n1 166 1\n1 167 1\n1 168 1\n1 169 1\n1 170 1\n1 171 1\n1 172 1\n1 173 1\n1 174 1\n1 175 1\n1 176 1\n1 177 1\n1 178 1\n1 179 1\n1 180 1\n1 181 1\n1 182 1\n1 183 1\n1 184 1\n1 185 1\n1 186 1\n1 187 1\n1 188 1\n1 189 1\n1 190 1\n1 191 1\n1 192 1\n1 193 1\n1 194 1\n1 195 1\n1 196 1\n1 197 1\n1 198 1\n1 199 1\n1 200 1\n1 201 1\n1 202 1\n1 203 1\n1 204 1\n1 205 1\n1 206 1\n1 207 1\n1 208 1\n1 209 1\n1 210 1\n1 211 1\n1 212 1\n1 213 1\n1 214 1\n1 215 1\n1 216 1\n1 217 1\n1 218 1\n1 219 1\n1 220 1\n1 221 1\n1 222 1\n1 223 1\n1 224 1\n1 225 1\n1 226 1\n1 227 1\n1 228 1\n1 229 1\n1 230 1\n1 231 1\n1 232 1\n1 233 1\n1 234 1\n1 235 1\n1 236 1\n1 237 1\n1 238 1\n1 239 1\n1 240 1\n1 241 1\n1 242 1\n1 243 1\n1 244 1\n1 245 1\n1 246 1\n1 247 1\n1 248 1\n1 249 1\n1 250 1\n1 251 1\n1 252 1\n1 253 1\n1 254 1\n1 255 1\n1 256 1\n1 257 1\n1 258 1\n1 259 1\n1 260 1\n1 261 1\n1 262 1\n1 263 1\n1 264 1\n1 265 1\n1 266 1\n1 267 1\n1 268 1\n1 269 1\n1 270 1\n1 271 1\n1 272 1\n1 273 1\n1 274 1\n1 275 1\n1 276 1\n1 277 1\n1 278 1\n1 279 1\n1 280 1\n1 281 1\n1 282 1\n1 283 1\n1 284 1\n1 285 1\n1 286 1\n1 287 1\n1 288 1\n1 289 1\n1 290 1\n1 291 1\n1 292 1\n1 293 1\n1 294 1\n1 295 1\n1 296 1\n1 297 1\n1 298 1\n1 299 1\n1 300 1\n1 301 1\n1 302 1\n1 303 1\n1 304 1\n1 305 1\n1 306 1\n1 307 1\n1 308 1\n1 309 1\n1 310 1\n1 311 1\n1 312 1\n1 313 1\n1 314 1\n1 315 1\n1 316 1\n1 317 1\n1 318 1\n1 319 1\n1 320 1\n1 321 1\n1 322 1\n1 323 1\n1 324 1\n1 325 1\n1 326 1"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 19\n15 5 3\n12 4 4\n20 10 5\n''') == '3'\nassert solution('''\n2 3\n1 1\n1 1\n''') == '2'\nassert solution('''\n10 30\n1 1 2\n1 1 3\n1 1 4\n1 1 5\n1 1 6\n1 1 7\n1 1 8\n1 1 9\n1 1 10\n1 2 1\n1 2 2\n1 2 3\n1 2 4\n1 2 5\n1 2 6\n1 2 7\n1 2 8\n1 2 9\n1 2 10\n1 3 1\n1 3 2\n1 3 3\n1 3 4\n1 3 5\n1 3 6\n1 3 7\n1 3 8\n1 3 9\n1 3 10\n1 4 1\n1 4 2\n1 4 3\n1 4 4\n1 4 5\n1 4 6\n1 4 7\n1 4 8\n1 4 9\n1 4 10\n1 5 1\n1 5 2\n1 5 3\n1 5 4\n1 5 5\n1 5 6\n1 5 7\n1 5 8\n1 5 9\n1 5 10\n1 6 1\n1 6 2\n1 6 3\n1 6 4\n1 6 5\n1 6 6\n1 6 7\n1 6 8\n1 6 9\n1 6 10\n1 7 1\n1 7 2\n1 7 3\n1 7 4\n1 7 5\n1 7 6\n1 7 7\n1 7 8\n1 7 9\n1 7 10\n1 8 1\n1 8 2\n1 8 3\n1 8 4\n1 8 5\n1 8 6\n1 8 7\n1 8 8\n1 8 9\n1 8 10\n1 9 1\n1 9 2\n1 9 3\n1 9 4\n1 9 5\n1 9 6\n1 9 7\n1 9 8\n1 9 9\n1 10 1\n1 10 2\n1 10 3\n1 10 4\n1 10 5\n1 10 6\n1 10 7\n1 10 8\n1 10 9\n1 10 10\n''') == '5'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n3\\n1 2\\n4 3') == '3'\nassert solution('2\\n3\\n5 2\\n3 4') == '1'\nassert solution('2\\n3\\n3 2\\n3 4') == '2'\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"1\"\nassert solution(\"6 4 8\") == \"1\"\nassert solution(\"5 20 15\") == \"1\"\nassert solution(\"6 6 6\") == \"2\"\nassert solution(\"11 7 10\") == \"3\"\n"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 19\\n15 5 3\\n12 4 4\\n20 10 5') == '3'"
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 19\\n15 5 3\\n12 4 4\\n20 10 5\"\n    ) == \"3\""
    },
    {
        "number": 3538,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n19\n5 3\n''') == '3'\nassert solution('''\n2\n19\n5 3\n''') == '0'\nassert solution('''\n4\n12 4 4\n3 8 7\n15 5 3\n''') == '4'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1\\n1 1') == '1'"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1\n1 2\n''') == '2'\n\nassert solution('''\n2 3\n1 2\n''') == '3'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n1 1') == '1'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '2'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\""
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1 2') == 1\nassert solution('2 4\\n1 4') == 2\nassert solution('3 3\\n1 3\\n2 3\\n1 3') == 4\n\"\"\""
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1\n1 1\n''') == '1'\n"
    },
    {
        "number": 3539,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('RGRR') == '4'\nassert solution('GGBG') == '2'\nassert solution('BYBY') == '2'\nassert solution('YRYR') == '2'\nassert solution('RTTR') == '5'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\") == \"3\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('RGR') == '1'\nassert solution('GBG') == '2'\nassert solution('BYB') == '3'\nassert solution('YRY') == '4'\n\n------\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"RGGR\\nGBGB\\nBYBY\\nYRYR\\n\") == \"3\"\nassert solution(\"RGR\\nGB\\nBYB\\nYRY\\n\") == \"4\"\nassert solution(\"RGR\\nGBB\\nYBY\\nRYR\\n\") == \"4\"\nassert solution(\"RGR\\nGBB\\nBYB\\nRYR\\n\") == \"4\"\nassert solution(\"RGR\\nGBB\\nYBY\\nRYR\\n\") == \"4\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nRGRR\nGBGB\nBYBY\nYRYR\n''') == \"4\"\nassert solution('''\nGGRG\nGBGB\nBYBY\nYRYR\n''') == \"2\"\nassert solution('''\nBGRR\nGBGB\nBYBY\nYRYR\n''') == \"5\"\nassert solution('''\nGBBR\nGBGB\nBYBY\nYRYR\n''') == \"4\"\nassert solution('''\nGGRR\nGBGB\nBYBY\nYRYR\n''') == \"5\"\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    R\n    G\n    B\n    Y\n    ''') == '1'\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nR\nG\nB\nY\n''') == \"4\", \"Wrong\""
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('RGGR') == '3'\nassert solution('GBGB') == '2'\nassert solution('BYBY') == '4'\nassert solution('YRYR') == '3'"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nRGGR\nGBGB\nBYBY\nYRYR\n''') == '3'\n'''\nThe shortest possible solution is 3 moves.\n'''\n"
    },
    {
        "number": 3540,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"RGGR\") == \"3\"\nassert solution(\"GBGB\") == \"2\"\nassert solution(\"BYBY\") == \"4\"\nassert solution(\"YRYR\") == \"1\"\n\n##Input:\n##RGGR\n##GBGB\n##BYBY\n##YRYR\n##\n##Output:\n##3\n##2\n##4\n##1\n##\n##Explanation:\n##You have 3 moves to solve the puzzle.\n##Move 1: you push the 1st (upper left) row (\u201cR\u201d) down by 2 rows. The 2nd (upper left) row is now on the bottom row, with the 1st (upper left) cell in the middle.\n##Move 2: you push the 2nd (upper left) row (\u201cG\u201d) down by 2 rows. The 2nd (upper right) row is now on the bottom row, with the 2nd (upper left) cell in the middle.\n##Move 3: you push the 1st (upper left) row (\u201cY\u201d) down by 2 rows. The 2nd (upper right) row is now on the bottom row, with the 3rd (upper left) cell in the middle.\n##So, you need 3 moves to solve the puzzle."
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"ABABAB\"\nassert solution(\"2\") == \"AABB\"\nassert solution(\"100\") == \"AAAB\"\n\"\"\""
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == 'ABABBA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == \"AAAAA\"\nassert solution('''\n3\n-1 -2 -3\n1 2 3\n''') == \"AAABB\"\nassert solution('''\n3\n-2 -1 0\n1 2 3\n''') == \"AAABB\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n-2 -1 0 1 2\\n2 1 0 -1 -2\\n') == 'AAABB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n\"\"\") == \"AAAAA\"\n\nassert solution(\n\"\"\"\n10\n-4 -5 -3 -1 0 1 2 3 4 5\n2 1 0 -1 -2\n\"\"\") == \"AAABBBB\"\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == 'AAAAA'\nassert solution('6') == 'AAAAA'\nassert solution('10') == 'AAAAAA'\n\"\"\"\n\nn = int(input())\ncandy1 = map(int, input().split())\ncandy2 = map(int, input().split())\n\ncandy = []\nfor i in range(n):\n    candy.append((candy1[i], candy2[i]))\n\ncandy.sort()"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'A'\nassert solution('4') == 'BB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAAAA'\nassert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n3 4 5 6 7\n''') == 'AAAAB'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n-2 -1 0 1 2\n2 1 0 -1 -2''') == 'AAAAA'\n"
    },
    {
        "number": 3541,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\n''') == 'AAAAA'\nassert solution('''\n3\n-2 -1 0\n1 0 0\n''') == 'BBAB'\nassert solution('''\n2\n0 1\n0 1\n''') == 'BB'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1') == '1'\nassert solution('3 3') == '2'\nassert solution('6 3') == '2'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n2 3\n2 0\n6 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n3\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n3\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n2\n0 2\n6 1\n\"\"\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 3\\n2 3\\n4 0\\n0 2\\n6 1\\n') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3\n2 3\n4 0\n0 2\n6 1\n''') == 'IMPOSSIBLE'\nassert solution('''\n2 5\n0 2\n2 1\n''') == '3'\nassert solution('''\n4 4\n0 2\n3 1\n0 4\n''') == '2'\nassert solution('''\n5 1\n0 2\n0 3\n1 4\n''') == 'IMPOSSIBLE'\nassert solution('''\n10 10\n1 10\n2 8\n5 9\n3 6\n4 7\n8 4\n7 8\n6 5\n5 2\n4 1\n''') == '3'\n''')\n\n\"\"\""
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    6 3\n    2 3\n    4 0\n    0 2\n    6 1\n    ''') == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\""
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 5\n0 1\n0 2\n2 3\n2 4\n3 5\n''') == '5', 'five'\n\nassert solution('''\n7 6\n0 1\n0 2\n0 3\n0 4\n1 5\n1 6\n1 7\n''') == '3', 'three'\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1 2\\n0 1\\n3 4') == \"3\"\nassert solution('1 1\\n1 1\\n1 1\\n1 1\\n') == \"IMPOSSIBLE\"\nassert solution('1 1\\n1 2\\n2 1\\n1 1\\n1 1\\n') == \"1\"\nprint('all tests passed')\n"
    },
    {
        "number": 3542,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 3\n0 1\n2 3\nIMPOSSIBLE\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n3 2\n0 1\n1 2\nIMPOSSIBLE\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n1 1\n1 1\n1 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 2\n1 3\n1 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\n1 2\n1 3\n\"\"\") == \"2\""
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria\\n') == '12\\n4\\n11\\n3\\n2\\n'\nassert solution('10 10\\nprogram\\nprogramming\\nautocorrelation\\nprogram\\nautocorrect\\ncompetition\\ncomputer\\ncompetition\\ncomputer\\n') == '15\\n12\\n14\\n'"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria') == '12'\nassert solution('10 3\\nkaj\\njii\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\nzaz\\nzak\\nzaa\\nkaa\\nkaj\\nkaj\\nzaa\\nkaa\\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nautocorrelation') == '12'\nassert solution('2\\nautocorrelation') == '3'\nassert solution('3\\nautocorrelation') == '2'\nassert solution('4\\nautocorrelation') == '1'\nassert solution('5\\nautocorrelation') == '0'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '''\n12\n4\n11\n3\n2\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12'\nassert solution('''3 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '11'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12\\n4\\n11\\n3\\n2'\n\nassert solution('''\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n''') == '12\\n4\\n11\\n3\\n2'\n\nassert solution('''\n3\naustralia\nboston\nhollywood\n''') == '12\\n4\\n11'\n\nassert solution('''\n2\naustralia\nboston\n''') == '11'\n\nassert solution('''\n1\na\n''') == '1'"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\naustria\\nautocorrect\\nprogram\\nprogramming\\ncomputer\\nautocorrelation\\nprogramming\\ncompetition\\nzyx\\naustria') == '12'\nassert solution('100 50\\n5 4\\n1234567890') == '17'\nassert solution('100 5\\nabcdef\\n3') == '0'\nassert solution('1 1\\n1') == '0'\nassert solution('3 2\\na b c\\n1') == '2'\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\n\"\"\") == \"\"\"12\"\"\"\n\nassert solution(\"\"\"\n10 4\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\n\"\"\") == \"\"\"18\"\"\"\n\nassert solution(\"\"\"\n10 4\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\n\"\"\") == \"\"\"18\"\"\"\n\nassert solution(\"\"\"\n10 4\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\nasdfg\n\"\"\") == \"\"\"18\"\"\"\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx''') == '11\\n4\\n2\\n2\\n1\\n'''\n"
    },
    {
        "number": 3543,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '12'\nassert solution('1 5') == '4'\nassert solution('2 5') == '11'\nassert solution('3 5') == '3'\nassert solution('4 5') == '2'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 1 1\n''') == '3'\nassert solution('''\n2\n0 0\n''') == '2'\nassert solution('''\n1\n10\n''') == '11'\nassert solution('''\n1\n3\n''') == '4'\nassert solution('''\n2\n3\n''') == 'impossible'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'impossible'\nassert solution('5') == '5'\n\n'''"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 2 3\n0 1 0\n''') == '3'\n\nassert solution('''\n1 2 3\n1 2 1\n''') == '1'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0 1 1') == '3'\nassert solution('5\\n1 0 1 2 1\\n5 3 2 2 3') == '5'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n1 1 1 1\n''') == '3'\n\nassert solution('''\n8\n0 0 0 1 0 0 0\n''') == '3'\n\nassert solution('''\n8\n1 1 1 1 1 1 1\n''') == '4'\n\nassert solution('''\n8\n2 2 1 1 1 1 1\n''') == '4'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 1\n''') == '3'\nassert solution('''\n2\n0 1\n0 0\n''') == '4'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n2 1 1') == '3'\nassert solution('3\\n0 1 1') == '3'\nassert solution('3\\n2 0 1') == '3'\nassert solution('3\\n1 1 1') == '3'\nassert solution('3\\n1 2 2') == '3'\n"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('6') == '4'\nassert solution('10') == '4'"
    },
    {
        "number": 3544,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\nassert solution(\"1 2 1\") == \"3\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"HFIJ\") == \"HFKI\"\nassert solution(\"HFDCD\") == \"DHDJCD\"\nassert solution(\"HFDCDG\") == \"HFDJCD\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre Pre\"\nassert solution(\"BIGEDCJFAH\") == \"Pre Pre In In In\"\nassert solution(\"BIGEDCJFAH\") == \"Pre Pre In In In\""
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('HFBJCDEGIA') == 'HFBJCDEGIA'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    HFIELDBACSEJ\n    ACEDCJAJHF\n    BCCJADBEGIE\n    ''') == '''\n    Pre Pre In In In\n    HFIELDBACSEJ\n    ACEDCJAJHF\n    BCCJADBEGIE\n    '''\n\nSample Input:\n    HFIELDBACSEJ\n    ACEDCJAJHF\n    BCCJADBEGIE\n    '''\n    Pre In Post In In\n    HFIELDBACSEJ\n    ACEDCJAJHF\n    BCCJADBEGIE\n    '''\nSample Output:\n    Pre In In In\n    HFIELDBACSEJ\n    ACEDCJAJHF\n    BCCJADBEGIE\n    '''\n    Pre In Post In In\n    HFIELDBACSEJ\n    ACEDCJAJHF\n    BCCJADBEGIE\n    '''\n\n'''\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"HFCDEGABIGEDCJA\") == \"Pre In In In Post In Pre\"\nassert solution(\"HDCDESJABIGEDCJFA\") == \"Pre In In In Post In Pre\"\nassert solution(\"ABIGEDCJAHDCDESJA\") == \"Pre In In In Post In Pre\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"Pre In In In In In In In In In In In In In In\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"Pre In In In In In In In In In In In In In In\"\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('HFIBCAHDDCA') == 'HFDCEBCAHDD'\nassert solution('HFIBCAHDDC') == 'HFDCEBCADD'\nassert solution('HFIBCAHDDCD') == 'HFDCEBCADD'\nassert solution('HFIBCAHDDCAZ') == 'HFDCEBCADDZ'\nassert solution('HFIBCAHDDCAZ') == 'HFDCEBCADDZ'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre In Post In Pre\"\n\nSample Input:\n
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('HFIELDSEDCJABIGEDCJFAHBIGEDCJFAH') == 'HFBJCDEGIABIGEDCJFAHIGEDCJBAFH'\nassert solution('JBIELBEGD') == 'JBIELBEGD'\nassert solution('EBHIEJCD') == 'EBHIEJCD'\nassert solution('EBJHIEBD') == 'EBJHIEBD'\nassert solution('HFEBIEA') == 'HFEBIEA'\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nHFCJCDDGJ\nDCJBDEEF\nCJADBCCC\n''') == 'Pre Post In Post In Pre'\nassert solution('''\nCJADBCCC\nADBCCCCD\nJCBADBCCC\n''') == 'In In In'\nassert solution('''\nCJADBCCC\nADBCCCCD\nJCBADBCCC\n''') == 'In In In'\nassert solution('''\nCJADBCCC\nADBCCCCD\nJCBADBCCC\n''') == 'In In In'\n''')\n"
    },
    {
        "number": 3545,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"HFBIGEDCJA\") == \"Pre Post In Post In Pre\"\nassert solution(\"BIGEDCJFAH\") == \"BIGEDCJFAH\"\n\nINPUT\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\nOUTPUT\n    Pre Post In Post In Pre\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre Post In Post In Pre\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre Post In Post In Pre\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGEDCJBAFH\nOUTPUT\n    Pre In Pre In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGEDCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGEDCJBAFH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGESCJBAFH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGESCJBAFH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGESCJBAFH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    IGESCJBAFH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    HFBIGEDCJA\n    BIGEDCJFAH\n    BIGEDCJFAH\nOUTPUT\n    Pre In In In In\n    HFBJCDEGIA\n    BIGEDCJFAH\n    IGESCJBAFH\n\nINPUT\n    "
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '11'\nassert solution('1') == '1'\nassert solution('4') == '12'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n2\\n10 0') == '10'\nassert solution('3\\n1 1 1') == '4'\nassert solution('4\\n1 1 0') == '3'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '10'\nassert solution('4') == '1'\n'''\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n5 4 2\n4 1 1 1\n3 4 0\n''') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == '10'\nassert solution('''\n1\n2\n3\n3\n4\n4\n4\n3\n2\n2\n1\n1\n''') == '10'\n\nprint(solution('''\n1\n2\n3\n3\n4\n4\n4\n3\n2\n2\n1\n1\n'''))\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n10 0\n3 1 1\n1\n4 1 0\n''') == \"10\"\nassert solution('''\n1\n20 2 0\n18 6 1\n10 4 1\n''') == \"18\"\nassert solution('''\n4\n10 1 0\n3 1 1\n1\n4 1 0\n''') == \"10\"\nassert solution('''\n5\n1 0 1\n1 1 1\n1\n0\n1\n''') == \"1\"\nassert solution('''\n10\n0 0 0 0\n1 0 1 0\n1 1 1 1\n0 1 1 1\n0\n1\n1\n''') == \"2\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '1'\nassert solution('1') == '0'\nassert solution('4') == '4'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"10\"\nassert solution(\"2\") == \"12\"\nassert solution(\"2\") == \"20\"\nassert solution(\"3\") == \"16\"\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n2\n10 0\n3 1 1\n1\n4 1 0''') == '10'\n"
    },
    {
        "number": 3546,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1\n2''') == '2'\nassert solution('''2\n3\n5\n1 2 1\n1\n4''') == '4'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\nassert solution('''\n1\n0 0 100 100\n''') == '10000.00'\nassert solution('''\n1\n30 30 60 60\n''') == '10000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('2\\n0 0 100 100\\n30 30 60 60\\n10 10 10 100') == '101000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n0 0 100 100\\n30 30 60 60') == '10000.00'"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nprint('solution() completed')\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1\n10 10 20 20\n10 10 20 20\n''') == '10000.00'\nassert solution('''\n10\n10 10 20 20\n10 10 20 20\n''') == '10000.00'\nassert solution('''\n10\n10 10 20 20\n10 10 20 20\n''') == '10000.00'\n'''\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n0 0 100 100\n''') == '10000.00'\nassert solution('''\n2\n0 0 100 100\n30 30 60 60\n''') == '10000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n0 0 100 100\n0 0 1 2\n''') == '100.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('2\\n0 0 100 100\\n30 30 60 60\\n30 30 60 60') == '20000.00'\n"
    },
    {
        "number": 3547,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0 100 100\\n30 30 60 60') == '10000.00'\nassert solution('1\\n0 0 100 100') == '10000.00'\nassert solution('0\\n0 0 100 100') == '0.00'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n2\n3\n4\n5\n4\n5''') == '1'\nassert solution('''10\n3\n1\n2\n2\n5\n4\n5\n4\n3\n3''') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n1 3\n4 5\n2 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4 3\n1 3\n2 2\n3 3\n2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 3\n1 3\n4 5\n2 4\n3 3\n2 4\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\nassert solution('''\n5 4\n1 2\n3 4\n2 5\n''') == '3'\nassert solution('''\n5 5\n1 2\n1 3\n1 4\n1 5\n2 4\n2 5\n''') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1', '1'\nassert solution('2') == '2', '2'\nassert solution('3') == '2', '3'\nassert solution('4') == '1', '4'\nassert solution('5') == '4', '5'"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '5'\nassert solution('10 2') == '7'\nassert solution('7 6') == '0'\nassert solution('3 5') == '3'\nassert solution('100 5') == '27'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n1 3\\n4 5\\n2 4\\n') == '5'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 3\\n4 5\\n2 4\\n\") == \"5\"\nassert solution(\"2 5\\n3 4\\n3 4\\n\") == \"1\"\nassert solution(\"1 5\\n2 4\\n3 4\\n2 4\\n\") == \"0\"\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"1 2\") == \"0\""
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 3\n1 3\n4 5\n2 4\n''') == '5'\n\nassert solution('''\n2 3\n2 4\n''') == '2'\n\nassert solution('''\n1 2\n2 3\n''') == '0'\n\nassert solution('''\n2 3\n4 4\n''') == '0'\n\nassert solution('''\n5 3\n1 2\n1 3\n3 4\n2 4\n''') == '6'\n"
    },
    {
        "number": 3548,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1\n3\n4\n5\n\"\"\") == \"10\"\nassert solution(\"\"\"\n10\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n5\n4\n5\n3\n3\n4\n4\n5\n5\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n11 13 17\n5 2 4\n0 0 0\n''') == '2095'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3 5\") == \"2095\"\nassert solution(\"7 2 5\") == \"0\"\nassert solution(\"11 13 17\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('11 13 17\\n5 2 4\\n0 0 0') == '2095'\nassert solution('6 2 0\\n5 2 4\\n0 0 0') == '1576'\nassert solution('5 2 4\\n6 2 0\\n0 0 0') == '1576'\nassert solution('6 2 0\\n5 2 4\\n6 2 0') == '1576'\nassert solution('7 2 4\\n6 2 0\\n5 2 4') == '1576'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"11 13 17\") == \"2095\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"2 2 2\") == \"2\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2095'\nassert solution(['11 13 17', '5 2 4', '0 0 0']) == '2095'\nassert solution(['3','2','1']) == '4'\nassert solution(['3','2','1']) == '4'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('15 10 10') == '11'\nassert solution('1 1 1') == '10'\nassert solution('1 1 1') == '10'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([11, 13, 17]) == \"2095\"\nassert solution([5, 2, 4]) == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2 3\n5 2 4\n0 0 0\n\"\"\") == \"2095\"\nassert solution(\"\"\"\n11 13 17\n5 2 4\n0 0 0\n\"\"\") == \"2095\"\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1,2,3\\n5,2,4\\n0,0,0') == '2095'\nassert solution('11,13,17\\n5,2,4\\n0,0,0') == '2095'\nassert solution('10,10,10\\n10,10,10') == '0'\nassert solution('100,50,100\\n100,100,100') == '0'\nassert solution('17,16,15\\n15,14,14\\n14,13,13') == '142857'\n"
    },
    {
        "number": 3549,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11 13 17') == '2095'\nassert solution('15 5 4') == '1595'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\nvar a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('a = \"Gon\";\\nb = a;\\nc = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n'''\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n''') == 'My name is Gon\\nMy name is Gon\\n'''\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n    var a = \"Gon\";\n    var b = a;\n    var c = `My name is ${a}`;\n    print c;\n    print `My name is ${b}`;\n    end.\n''') == 'My name is Gon'\n\nSample Input:\n    print `My name is ${a}`;\n    print `My name is ${b}`;\nend.\nSample Output:\nMy name is Gon\nMy name is Gon\n'''\n\nimport re\nimport sys\nfrom collections import deque"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('a = \"Gon\";\\nb = a;\\nc = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint c;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${b}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${a}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${a}`;\\nend.') == 'My name is Gon'\nassert solution('var a = \"Gon\";\\nvar b = a;\\nvar c = `My name is ${a}`;\\nprint `My name is ${a}`;\\nprint `My name is ${b}`;\\nend.') == 'My name is Gon'\n"
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.\n\"\"\") == \"\"\"My name is Gon\nMy name is Gon\"\"\"\n\nassert solution(\"\"\"print `My name is ${a}`;\nprint `My name is ${b}`;\nend.\n\"\"\") == \"\"\"My name is Gon\nMy name is Gon\"\"\"\n\nassert solution(\"\"\"var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n\"\"\") == \"\"\"My name is Gon\nMy name is Gon\nMy name is Gon\"\"\"\n\nassert solution(\"\"\"print `My name is ${a}`;\nprint `My name is ${a}`;\nend.\n\"\"\") == \"\"\"My name is Gon\nMy name is Gon\n\"\"\"\n\nassert solution(\"\"\"var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint `My name is ${b}`;\nprint `My name is ${c}`;\nend.\n\"\"\") == \"\"\"My name is Gon\nMy name is Gon\nMy name is Gon\"\"\""
    },
    {
        "number": 3550,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''var a = \"Gon\";\nvar b = a;\nvar c = `My name is ${a}`;\nprint c;\nprint `My name is ${b}`;\nend.''') == \"My name is Gon\\nMy name is Gon\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n7 8\n10\"\"\") == \"\"\"fill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 1\ntransfer 2 0\ndiscard 1\nfill 2\ntransfer 2 0\n\"\"\".strip()\nassert solution(\"\"\"1\n10\n10\"\"\") == \"\"\"transfer 1 1\ntransfer 1 0\ndiscard 1\n\"\"\".strip()\nassert solution(\"\"\"5\n9\n10\n10\n9\n10\"\"\") == \"\"\"fill 5\ntransfer 1 1\ntransfer 1 0\ndiscard 1\nfill 5\ntransfer 1 1\ntransfer 1 0\ndiscard 1\n\"\"\".strip()"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1\n8\n''') == 'discard 1\n\nassert solution('''\n2\n7\n10\n''') == 'discard 1\n\nassert solution('''\n2\n1\n8\n''') == 'fill 2\n\nassert solution('''\n1\n1\n10\n''') == 'transfer 1 0\n\nassert solution('''\n5\n10 8 5 9\n''') == 'discard 1"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'impossible'\nassert solution('2') == 'fill 2 discard 2 transfer 2 1 transfer 2 0 discard 1 fill 2 transfer 2 1 transfer 2 0 discard 1 fill 2 transfer 2 0 discard 1'\nassert solution('3') == 'impossible'\nassert solution('4') == 'fill 2 discard 2 transfer 2 1 transfer 2 0 discard 1 fill 2 transfer 2 1 transfer 2 0 discard 1 fill 2 transfer 2 0 discard 1'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1\n7 8\n10\n\"\"\") == \"fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n\"\"\".strip()\nassert solution(\"\"\"\n2\n1000000000 9999999999\n1000000000 9999999999\n\"\"\") == \"impossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\nimpossible\\"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n7 8\\n10') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1'\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"2\") == \"0 0 1\"\nassert solution(\"7 8\") == \"2 1 1 0 1\"\nassert solution(\"10\") == \"0 0 1\"\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n7 8\n10\n''') == 'discard 2\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\n'''\n"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n2\n3\n''') == 'discard 1\\ndiscard 1\\ntransfer 1 0\\ndiscard 1\\ndiscard 1\\ntransfer 1 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ntransfer 1 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ntransfer 1 0\\ndiscard 1\\ndiscard 1\\ntransfer 1 1\\ndiscard 1\\ndiscard 1\\ntransfer 1 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\ndiscard 1\\"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n7 8\\n10\\n') == 'discard 2\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\n'"
    },
    {
        "number": 3551,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n7 8\n10''') == 'fill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 1\\ntransfer 2 0\\ndiscard 1\\nfill 2\\ntransfer 2 0\\nimpossible\\n'''\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 4 3') == '27'\nassert solution('6 2 3') == '14'\nassert solution('9 3 1') == '5'\n\n\"\"\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('10 5 3') == '5'\nassert solution('10 10 10') == '1'\nassert solution('100 1000 100') == '0'\nassert solution('10000 1000 100') == '0'\n\"\"\""
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '27'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3 3') == '6'\nassert solution('10 10 10') == '0'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"10 4 3\") == \"27\"\nassert solution(\"8 10 2\") == \"10\"\nassert solution
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n10 4 3\n''') == '27'\nassert solution('''1\n1 3 3\n''') == '5'\nassert solution('''1\n3 3 3\n''') == '4'\n\n\"\"\""
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == '27'"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('4 4 4') == '0'\nassert solution('10 10 10') == '10'\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"2 2 4\") == \"7\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"10 8 2\") == \"8\"\n"
    },
    {
        "number": 3552,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 4 3') == '27'\nassert solution('1 2 3') == '0'\nassert solution('3 5 10') == '20'\nassert solution('9 4 3') == '0'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3') == '-1'\nassert solution('2') == '3'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '3'\nassert solution('4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '3'\nassert solution('''4 3 5\n2 3 1 2\n1 3 3\n2\n1 1 1\n2\nSample Input:\n4 3 5\n2 3 1 2\n1 3 3\n2\n1 1 1\n2\nSample Output:\n3\n-1\n4\n'''\n) == '4'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4 5') == '3'\n\nassert solution('4 3 5') == '3'\n\nassert solution('4 3 6') == '-1'\n\nassert solution('10 20') == '1'\n\nassert solution('5 5') == '5'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3 5\n2 3 1 2\n2''') == '3'\nassert solution('''2 3 5\n2 3 1 2\n2''') == '-1'\n\nassert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1\n2\n1 1 1\n2\n1 1 1\n2\nSample Output:\n3\n-1\n4\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '3'\nassert solution('''\n4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n''') == '-1'\nassert solution('''\n6 2 4\n1 3\n1 1 1\n2\n3\n2\n1 1 1\n2\n''') == '3'\nassert solution('''\n7 2 3\n1 1 1\n1 1 1\n1 2\n1 2\n1 2\n1 2\n2\n''') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2 5\") == \"4\"\nassert solution(\"3 1 5\") == \"3\"\nassert solution(\"3 2 3\") == \"2\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n\") == \"4\"\nassert solution(\"4 3 5\\n2 3 1 2\\n2\\n1 3 3\\n2\\n1 1 1\\n2\\n\") == \"3\"\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '3'\nassert solution('''3 4 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '-1'\nassert solution('''3 5 6\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2''') == '6'\nassert solution('''8 3 5\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1\n2\n''') == '3'\nassert solution('''8 5 6\n2 3 1 2\n2\n1 3 3\n2\n1 1 1\n2\n1 1 1\n2\n''') == '-1'\n"
    },
    {
        "number": 3553,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 5\") == \"3\"\nassert solution(\"2 3 1 2\") == \"1\"\nassert solution(\"2\") == \"-\"\nassert solution(\"2\") == \"-\"\nassert solution(\"2 3\") == \"-\""
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('80000 70000 50000') == '4000000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n1000000 1000000 1\\n') == '533.3333333333'\nassert solution('0\\n1000000 1000000 1\\n') == '1000000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('100 20 10') == '37.5'\nassert solution('10') == '10'"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1000 3000 1000\\n\") == \"533.3333333333\"\nassert solution(\"100 10000 1000\\n\") == \"843.3333333333\"\nassert solution(\"50 0 0\\n\") == \"0\"\nassert solution(\"20 10 10\\n\") == \"0\"\nassert solution(\"10000 10000 10000\\n\") == \"0\"\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\nassert solution('0 0 0\\n') == '0'\nassert solution('1 1 1\\n') == '1'\nassert solution('4 3 5\\n') == '16.6666666667'\nassert solution('4 3 1\\n') == '1'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1000 3000 1000\n''') == '533.3333333333'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1000 3000 1000\n''') == '533.3333333333'\nprint('Tests passed!')"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1000 3000 1000') == '533.3333333333'\nassert solution('4 100 1000') == '4'\nassert solution('1 1000 1000') == '1000'\nassert solution('4 100 1') == '2'\nassert solution('1 1 1000') == '1000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1000 1000') == '533.3333333333'\nassert solution('5 10 1000 10') == '45.0000000000'\nassert solution('5 100000 10') == '45.0000000000'\nassert solution('5 100000 10.01') == '45.0000000000'\nassert solution('1') == '0.0000000000'\n"
    },
    {
        "number": 3554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1000 3000 1000\\n') == '533.3333333333'\nassert solution('500 1000 100\\n') == '299.9999999999'\nassert solution('1000 1000 1000\\n') == '1000'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 0\n10 0\n10 10''') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\nassert solution(\"1 1\\n1 0\\n0 1\\n1 1\") == \"1.0\"\nassert solution(\"1 1\\n1 0\\n0 1\\n0 0\") == \"0.0\"\nassert solution(\"1 1\\n1 0\\n0 1\\n0 0\") == \"0.00\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 0') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 0\\n10 0\\n10 10\\n') == \"14.14\"\nassert solution('1\\n3\\n0 1\\n0 0\\n') == \"3.00\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1.12\"\nassert solution(\"2 1\") == \"1.42\"\nassert solution(\"3 2\") == \"1.67\"\nassert solution(\"4 1\") == \"2.33\"\nassert solution(\"5 3\") == \"4.22\"\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 0\\n10 0\\n10 10\") == \"14.14\"\n\nassert solution(\"3 1\\n4 2\\n1 1\\n2 1\\n3 2\\n\") == \"2.23\""
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    2 0\n    10 0\n    10 10\n''') == '14.14'\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0') == '14.14'\nassert solution('4 0') == '4.00'\n\n'''\n"
    },
    {
        "number": 3555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n3 5\n5 5\n4 4\n1 1\n5 7\n''') == '14.14'\nassert solution('''5 3\n10 0\n10 10\n2 2\n5 5\n3 3\n5 5\n''') == '18.72'\nassert solution('''10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\"\"\") == \"\"\"123457 0\n0 2\n123458 1\n\"\"\"[1:-1]\n\nassert solution(\"\"\"3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\"\"\") == \"\"\"123457 1\n1 0\n123458 2\n\"\"\"[1:-1]\n\nassert solution(\"\"\"2 2\n1 5\n0 1\"\"\") == \"\"\"1 2\n2 0\"\"\"[1:-1]"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"123457 2\"\nassert solution(\"4 6\") == \"123457 1\"\nassert solution(\"3 5\") == \"123456 0\"\nassert solution(\"1 5\") == \"0 2\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n123456 14323 1700000\\n123458 41412 1900000\\n123456') == '123457 0\\n0 2'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == '123457 0'\n\n'''\n\nm, q = map(int, input().split())\n\nemp = []\nfor i in range(m):\n    id, salary, height = map(int, input().split())\n    emp.append([id, salary, height])\n\nemp.sort(key=lambda x: (x[1], x[2]))\n\nchairperson = None\nfor e in emp:\n    if chairperson is None:\n        chairperson = e[0]\n    else:\n        if e[1] > chairperson:\n            chairperson = e[0]\n\nres = []\nfor e in emp:\n    if e[0] == chairperson:\n        if e[1] > e[2]:\n            res.append([e[0], 1])\n        else:\n            res.append([e[0], 0])\n    else:\n        if e[1] > e[2]:\n            res.append([e[0], 1])\n\nprint('\\n'.join(map(str, res)))\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"123457 0\\n0 2\\n123458 1\\n\"\"\n\n\"\"\"\nSample Input:\n3 1\n3\n13\nSample Output:\n13 0\n\n\"\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n''') == '123457 0\\n0 2\\n123458 1\\n'\n\nassert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n''') == '123457 1\\n0 2\\n123458 0\\n'\n\nassert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n''') == '123457 2\\n1 2\\n123458 1\\n'\n\nassert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n''') == '123457 1\\n0 2\\n123458 2\\n'\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n\"\"\") == \"123457 0\\n0 2\\n123458 1\\n\"\"\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'\n\nstdin = '''\n3 4\n1 2 3 4\n4 3 2 1\n2 5 4 1\n5 4 1 2\n3 4 5 2\n2 2 2 3\n4 2 2 4\n'''\n\nassert solution(stdin) == '4 0\\n1 3\\n3 3 1\\n2 5 2\\n2 2 2 3\\n3 3 2 4\\n2 4 4 2\\n'\n\nstdin = '''\n2 1\n3\n'''\n\nassert solution(stdin) == '3\\n'\n\nstdin = '''\n3 4\n1 2 3 4\n4 3 2 1\n2 5 4 1\n5 4 1 2\n3 4 5 2\n2 2 2 3\n4 2 2 4\n'''\n\nassert solution(stdin) == '4 0\\n1 3\\n3 3 1\\n2 5 2\\n2 2 2 3\\n3 3 2 4\\n2 4 4 2\\n'"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n''') == '123457 0\\n0 2\\n123458 1\\n'\nassert solution('''\n2 1\n123456789 100\n23456789 100\n123456789 100\n''') == '123456789 0\\n0 2\\n'''\n"
    },
    {
        "number": 3556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '0 2'\nassert solution('2 2') == '0 2'\nassert solution('1') == '0 0'\n\n--More tests--\nassert solution('12') == '0 0'\nassert solution('1') == '0 0'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '90'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '90'\nassert solution('10') == '900'\nassert solution('2') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"90\"\nassert solution(\"10\") == \"1234\"\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n3\\n2\\n3\\n') == 90\nassert solution('4\\n5 4 4 1\\n3 2\\n5 2 2 3\\n3 3 2 2 1') == 14\nassert solution('5\\n1 3 2 4 5\\n3 4 3 2 1\\n5 2 4 1\\n4 1 3 2 5\\n4 2 1 2 3\\n3 5 2 1 4\\n3 1 4 1 4 2\\n') == 23\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '90'\nassert solution('10') == '90'\nassert solution('1') == '1'\nassert solution('5') == '90'\nassert solution('10') == '90'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nassert solution('''\n3\n1 3 2\n''') == '3'\n\n'''"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '90'\nassert solution('10') == '100'\nassert solution('2') == '100'\nassert solution('3') == '50'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"90\""
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n3 5 10 2 5\n2 4 5 1 3\n''') == '90'\nprint(solution('''\n5\n3 5 10 2 5\n2 4 5 1 3\n'''))"
    },
    {
        "number": 3557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n3 5 10 2 5\n2 4 5 1 3''') == '90'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2 10') == '6.000000', \"4 2 10\"\nassert solution('7 10') == '9.000000', \"7 10\"\nassert solution('7 2') == '5.000000', \"7 2\"\nassert solution('7') == '9.000000', \"7\"\nassert solution('-10 3') == '0.000000', \"-10 3\"\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nassert solution('20 10\\n0 0 0\\n0 0 0\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n1 2 3\\n1 2 3\\n1 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2 3\\n0 2"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '3'\nassert solution('3') == '4'\nassert solution('4') == '4.500000'\nassert solution('5') == '4.400000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\n\"\"\""
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 10') == '6.000000'\nassert solution('5 3') == '3.999999'\nassert solution('5 5') == '5.000000'\n\n'''"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.000000'\nassert solution('2') == '1.000000'\nassert solution('3') == '2.000000'\nassert solution('10') == '10.000000'\nassert solution('10 20') == '19.3750000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 10\n1 2 6\n0 4 3\n0 8 2\n''') == '6.000000'\nprint(solution('''3 10\n1 2 6\n0 4 3\n0 8 2\n'''))\nassert solution('''4 10\n0 1 3\n0 5 4\n0 2 2\n1 5 6\n''') == '10.000000'\nprint(solution('''4 10\n0 1 3\n0 5 4\n0 2 2\n1 5 6\n'''))\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2') == '6.000000'\nassert solution('5 0\\n1 2 5\\n0 4 3\\n0 8 2\\n0 1 5') == '5.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 10\\n1 2 6\\n0 4 3\\n0 8 2\\n') == '6.000000'\nassert solution('5 5\\n2 3 5\\n1 4 5\\n4 5 5\\n1 4 3\\n') == '6.000000'\nassert solution('2 0\\n1 2\\n0 3\\n1 4\\n') == '4.000000'\nassert solution('5\\n2 3\\n4 5\\n1 4\\n') == '4.000000'\nassert solution('3\\n2 5\\n4 6\\n1 5\\n') == '4.000000'\n"
    },
    {
        "number": 3558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6.000000'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\") == \"1.\\n..\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n2.\\n.\\n0\\n0\\n0\\n0\\n2.\\n.\\n.\\n0\\n1.\\n.\\n0\\n2.\\n.\\n.\\n.\\n1.\\n.\\n.\\n0\\n1.\\n.\\n0\\n2.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n.\\n1.\\n.\\n.\\n0\\n1.\\n.\\n0\\n2.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n.\\n0\\n1.\\n.\\n."
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 0\\n0 0\\n1.') == '1.\\n.\\n.'\n\nstdin = \"\"\"\n4\n3 1\n2.5\n3 3\n4 1\nSample Output:\n4\n3 1\n2.5\n3 3\n4 1\n\"\"\"\n\nassert solution(stdin) == \"\"\"4\n3 1\n2.5\n3 3\n4 1\"\"\"\n\n\nstdin = \"\"\"\n5\n2 1\n2 1\n1.\n..\n0\nSample Output:\n0\n2 1\n1.\n..\n2 1\n\"\"\"\n\nassert solution(stdin) == \"\"\"0\n2 1\n1.\n..\n2 1\"\"\"\n\nstdin = \"\"\"\n4\n4 2\n3 1\n2 1\n2.5\nSample Output:\n3\n4 2\n3 1\n2 1\n2.5\"\"\"\n\nassert solution(stdin) == \"\"\"3\n4 2\n3 1\n2 1\n2.5\"\"\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n1.\n..\n\"\"\"\n\nassert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n1.\n..\n\"\"\"\n\nassert solution(\"\"\"\n2\n0 0\n1 0\n1.\n..\n0\n\"\"\") == \"\"\"\n2.\n..\n\"\"\"\n\nassert solution(\"\"\"\n2\n0 0\n0 0\n1.\n..\n0\n\"\"\") == \"\"\"\n2.\n..\n\"\"\"\n\nassert solution(\"\"\"\n2\n0 0\n1 0\n1.\n..\n0\n\"\"\") == \"\"\"\n2.\n..\n\"\"\""
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\") == \"1.\\n..\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\") == \"1.\\n..\\n0\\n0 0\\n1.\\n..\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\") == \"1.\\n..\\n0\\n0 0\\n1.\\n..\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\") == \"1.\\n..\\n0\\n0 0\\n1.\\n..\\n\"\nassert solution(\"2\\n0 0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\\n..\\n0\\n0 0\\n1.\") == \"1.\\n..\\n0\\n0 0\\n1.\\n..\\n\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1.4') == '1.4.4.5'\nassert solution('1.5') == '1.4.5.4'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n0 0\n0 0\n1.\n..\n0\nSample Output:\n1.\n..\n2.\n1.\n2.\n''') == '1.\\n1.\\n2.\\n1.\\n2.\\n'''\nassert solution('''1\n1.\n..\n''') == '1.\\n1.\\n'\nassert solution('''5\n0 0\n0 0\n0 0\n0 0\n0 0\nSample Output:\n5.\n0 0\n0 0\n0 0\n0 0\n0 0\n''') == '5.\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0.1\\n1.2\\n0.3\\n0.4\\n1.2\\n1.3\\n1.4\") == \"1.4\\n1.3\\n1.2\\n1.4\\n1.3\\n1.2\\n1.1\\n0.1\\n.2.\\n.2.\\n.2.\\n.2.\"\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n0 0\n1.\n..\n0\nSample Output:\n1.\n..\n2.\n''') == '1.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2.1.2.1.2.2.1.0.0.1.2"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2\n0 0\n0 0\n1''') == '..\\n.\\n.'\nassert solution('''2\n0 0\n0 0\n2''') == '..\\n.\\n.\\n.'\nassert solution('''2\n0 0\n0 0\n0\nSample Output:\n1.\n..\n.\\n.\n''') == '..\\n.\\n.\\n.\\n.\\n.'\nassert solution('''2\n0 0\n0 0\n2\nSample Output:\n1.\n..\n.\\n.\n''') == '..\\n.\\n.\\n.\\n.\\n.'\nassert solution('''2\n0 0\n0 0\n1\nSample Output:\n0\n.\n.\\n.\n''') == '0\\n.\\n.\\n.'\n"
    },
    {
        "number": 3559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n0 0\\n1.\") == \"1.\\n..\\n0\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == __import__(\"sys\").stdout.read().strip()"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\nabcdef\nacb\naac\nac\na\n5\nacb\n2 1\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\na\n1\n1\n1\n1\n1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\na\nbc\nabc\nbca\ncab\nacb\n''') == '1'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1'\n\nassert solution('''\n3\na\nbc\nabc\n3\n1 abca\n2 1\n2 3\n''') == '1'\n\nassert solution('''\n5\na\nbc\nabc\nbca\ncab\n''') == '2'"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\nabc\\nabcd') == '3'\nassert solution('2\\nabc\\nabcd') == '1'\nassert solution('2\\nabc\\nabcd') == '2'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n\nassert solution('2 1 abc') == '1'\n"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'\nassert solution('1') == '1'\n\n'''\n\nimport collections\nfrom itertools import islice"
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '1'\nassert solution('4') == '1'\n\nSample Input:\n6\ncba\nbca\naaaa\naaa\naaaa\nbbb\nSample Output:\n2\n1\n3\n\n\"\"\""
    },
    {
        "number": 3560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 1 1\n1\n''') == 'YES'\nassert solution('''1 1 1 1\n1\n''') == 'YES'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 3\") == \"NO\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 1 1 1\n''') == 'YES'\n\n'''\n\nimport sys\nimport math\n\nW, S, C, K = map(int, stdin.readline().strip().split(' '))\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1 1\") == \"YES\"\nassert solution(\"2 3 1 1\") == \"NO\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2 1 3') == 'YES', \"123\"\nassert solution('10 3 1 4') == 'NO', \"333\"\nassert solution('8 3 2 2') == 'YES', \"22222\"\n\"\"\"\n\nW, S, C, K = map(int, input().split())"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 2 3 4') == 'YES'\nassert solution('1 3 4 2') == 'NO'"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 1 2 2') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('1 3 4 5') == 'NO'\nassert solution('3 1 1 1') == 'YES'\nassert solution('3 3 3 3') == 'NO'\nassert solution('1 4 2 2') == 'NO'\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 1\") == \"YES\"\nassert solution(\"1 3 1 1\") == \"YES\"\nassert solution(\"1 4 1 1\") == \"YES\"\nassert solution(\"1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 3561,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'YES'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 0.0000 1.0000 2.0000') == '80.5696000000'\nassert solution('2 4.0000 -1.0000 3.0000') == '13.3264000000000004'\nassert solution('1 0.0000 -1.0000 1.0000') == '100.0000'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('1 -5 5 10') == '12.50000000000'\nassert solution('8 -1 0 0') == '8.0'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('2 10') == '80.5696000000'\nassert solution('2 200') == '80.5696000000'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 96\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000'\n'''\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 96') == '80.5696'\nprint('solution() successfully passed all tests')\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000', 'First'\n\nassert solution('''\n5 3\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000', 'Second'\n\nassert solution('''\n5 4\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n-0.0080 1.5417 25.0000\n''') == '80.5696000000', 'Third'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 96') == '80.5696000000'\nassert solution('-0.0080 1.5417 25.0000') == '80.5696000000'\n"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 96\") == \"80.5696000000\""
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '2 1.5417 25.0000'\n) == '80.5696000000'\n\nassert solution(\n    '3 -0.0080 1.5417 25.0000'\n) == '80.5696000000'\n\nassert solution(\n    '10 4.6513 13.8954 5.0000'\n) == '90.8899000000'\n\nassert solution(\n    '100 4.6513 13.8954 5.0000'\n) == '90.8899000000'\n\nassert solution(\n    '100 4.6513 13.8954 5.0000'\n) == '90.8899000000'"
    },
    {
        "number": 3562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 -0.2400 -0.2680 0.3500\n-0.2680 1.3800 0.2660\n0.3500 0.5800 0.1512\n''') == '80.5696000000'\n\nassert solution('''\n3 -0.2400 -0.2680 0.3500\n-0.2680 1.3800 0.2660\n0.3500 0.5800 0.1512\n''') == '80.5696000000'\n\nassert solution('''\n4 -0.2400 -0.2680 0.3500 1.6200\n-0.2680 1.3800 0.2660\n0.3500 0.5800 0.1512\n''') == '71.2023999999998'\n\nassert solution('''\n4 -0.2400 -0.2680 0.3500 1.6200\n-0.2680 1.3800 0.2660\n0.3500 0.5800 0.1512\n''') == '71.2023999999998'\n\nassert solution('''\n2 -0.2400 -0.2680 0.3500\n-0.2680 1.3800 0.2660\n0.3500 0.5800 0.1512\n''') == '80.5696000000'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 1 1 0 0 1 1') == '2'\nassert solution('1 2 1 2 2 1 1 1') == '3'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 2 4 3 1 1 0 1') == '3'\nassert solution('1 1 4 3 2 1 0 1') == '1'\nassert solution('1 1 1 4 3 2 1 1 1') == '2'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1 0 1 1 1') == '2'\nassert solution('1 0 1 0 0 1 0 1') == '1'\nassert solution('1 0 1 0 0 1 0 1 0') == '1'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"10 1 1 0 0 0 1 1 1 1 1 1 0 0 1\") == \"3\"\nassert solution(\"10 0 0 1 1 1 0 0 1\") == \"1\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 0 0 1 1 1 0 0 1') == '2'\n\nassert solution('1000000 0 0 1 1 1 0 1 1 1 1 1 1 0') == '1000000'\n\nassert solution('0') == '0'\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"2 3 4 5 6 7 8\") == \"8\"\n\"\"\"\nfrom collections import deque\n\nn = int(stdin.readline())\n\nholes = deque()\nfor i in range(n):\n    x, y = list(map(int, stdin.readline().split()))\n    holes.append((x, y))\n\nans = 1\nfor x, y in holes:\n    if x == 0 or y == 0:\n        ans = max(ans, 1)\n    if x == 0 and y == 0:\n        break\n    while holes:\n        x1, y1 = holes[0]\n        if x1 == 0 and y1 == 0:\n            break\n        if x1 == 0 and y1 == y:\n            ans = max(ans, 2)\n            break\n        if x1 == x and y1 == y:\n            ans = max(ans, 2)\n            break\n        if x1!= x or y1!= y:\n            ans = max(ans, 1)\n            break\n        holes.popleft()\n        x1, y1 = holes[0]\n        if x1 == x and y1 == y:\n            ans = max(ans, 2)\n            break\n        if x1 == x and y1 == x1:\n            ans = max(ans, 1)\n            break\n        if x1 == x1 and y1 == y1:\n            ans = max(ans, 1)\n            break\n\nprint(ans)\n\n\"\"\"\ndp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i][j-1]) + 1\n\n\"\"\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 1 1 1 0 0 1\") == \"2\"\nassert solution(\"5 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1\") == \"6\"\n"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 0 0 1 1 1 0 0 1\n''') == '2'"
    },
    {
        "number": 3563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n0\n0\n0\n0\n0\n0\n0\n''') == '2'\nassert solution('''3\n0\n0\n0\n0\n0\n0\n0\n''') == '2'\nassert solution('''100\n-3\n-3\n-3\n-3\n-3\n-3\n-3\n-3\n''') == '4'\nassert solution('''100\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n-2\n''') == '2'\nassert solution('''4\n0\n0\n0\n0\n0\n0\n0\n''') == '2'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == \"impossible\"\nassert solution('3 2 3') == \"impossible\"\nassert solution('1 2 4') == \"impossible\"\nassert solution('1 2 3') == \"1400\"\nassert solution('3 2 4') == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2 3') == 'impossible'\nassert solution('5 2 5') == '400'\nassert solution('10 1 2') == '0'\nassert solution('10 1 1') == 'impossible'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150''') == '1400'\n\nassert solution('''3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150''') == 'impossible'\n\nassert solution('''5 1 1\n1 1 2\n1 2 2\n1 3 2\n1 4 2\n1 5 2''') == 'impossible'\n\nassert solution('''5 1 1\n1 1 2\n1 2 2\n1 3 2\n1 4 2\n1 5 2''') == 'impossible'\n\nassert solution('''10 10 10\n1 1 2\n1 2 2\n1 3 2\n1 4 2\n1 5 2\n1 6 2\n1 7 2\n1 8 2\n1 9 2\n1 10 2\n1 11 2\n1 12 2\n1 13 2\n1 14 2\n1 15 2\n1 16 2\n1 17 2\n1 18 2\n1 19 2\n1 20 2''') == 'impossible'"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2 3') == '1400'\nassert solution('4 0 0') == '0'\nassert solution('4 0 0') == '0'\nassert solution('1 0 5') == '7.8125'\nassert solution('1 0 4') == '4'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"impossible\"\nassert solution(\"3 2 3\") == \"1400\"\nassert solution(\"2 3 2\") == \"impossible\"\nassert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"2 0 3\") == \"impossible\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2 3') == 'impossible'\nassert solution('10 10 5') == '200'\nassert solution('10 10 5 3') == '200'\nassert solution('10 10 5 2') == '100'\nassert solution('10 10 5 2 3') == '200'\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 3\n0 0 400\n1000 0 400\n2000 0 400\n300 0 150\n1300 0 150\n''') == '1400'\n\nassert solution('''\n3 2 3\n0 0 400\n100 0 400\n200 0 400\n300 0 150\n1300 0 150\n''') == 'impossible'\n\nprint(solution('''\n4 2 1\n0 0 1\n100 0 1\n0 100 0\n200 0 1\n0 100 0\n'''))\nprint(solution('''\n1 1 1\n1 1 1\n1 1 1\n'''))\nprint(solution('''\n2 1 1\n1 2 1\n1 1 1\n'''))\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3') == '1400'\nassert solution('2 2 3') == 'impossible'\nassert solution('3 2 3') == 'impossible'"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\") == \"impossible\"\nassert solution(\"10 2 3\") == \"impossible\"\nassert solution(\"7 1 3\") == \"100\"\nassert solution(\"10 1 3\") == \"500\"\nassert solution(\"10 1 4\") == \"1000\"\n"
    },
    {
        "number": 3564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 3\\n0 0 400\\n1000 0 400\\n2000 0 400\\n300 0 150\\n1300 0 150') == '1400'\nassert solution('2 1 3\\n0 0 400\\n1000 0 400\\n3000 0 400') == 'impossible'\nassert solution('5 5 5\\n1000 1000 1000\\n2000 1000 1000\\n3000 1000 1000\\n3000 1000 1000') == 'impossible'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3907\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"3907\"\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 15') == '3907'\nassert solution('15 10') == '3907'\nassert solution('15 10') == '3907'\nassert solution('15 10') == '3907'\nassert solution('15 10') == '3907'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 15') == '3907'\nassert solution('25 10') == '1209'\nassert solution('10 20') == '0'\nassert solution('40 50') == '0'\n"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 15\") == \"3907\"\nassert solution(\"10 20\") == \"3907\"\n\n\"\"\""
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam''') == '3907'\nprint('passed')"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 15') == '3907'\n\"\"\"\nimport math"
    },
    {
        "number": 3565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input) == '3907'\nassert solution(input) == '6010'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"0 5\") == \"1\"\nassert solution(\"0 9\") == \"2\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n\") == \"2\"\nassert solution(\"5 4\\n3 2 3 4 1\\n1 0\\n1 1\\n1 3\\n2 1\\n\") == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution([5,4]) == '1'\nassert solution([3, 1, 3, 4, 2]) == '0'\nassert solution([4, 5, 3, 1, 2]) == '2'\nassert solution([3, 1, 3, 4, 2, 6, 4, 1]) == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"\n5 4\n3 2 3 4 1\n0 5\n0 9\n4 5\n2 1\n\"\"\"\n) == \"1\"\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '1'\nassert solution('10 4\\n3 1 2 3 4 5 6 7 8 9 10\\n0 0') == '0'\nassert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 4') == '2'\nassert solution('6 1') == '2'\nassert solution('7 6') == '0'\nassert solution('5 5') == '2'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1') == '1'\nassert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n1 2\\n0 3') == '1'\nassert solution('5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n1 2\\n0 3') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    '5 4\\n'\n    '3 1 3 4 2\\n'\n    '0 5\\n'\n    '0 9\\n'\n    '4 5\\n'\n    '2 1\\n'\n) == '2'\n\nassert solution(\n    '10 4\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\n'\n    '1 1 1 1 1 1 1 1 1 1 1\\"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 4\n3 1 3 4 2\n0 5\n0 9\n4 5\n2 1\n''') == '2'\n\nassert solution('''5 6\n2 1 4 2 1\n0 5\n0 9\n4 5\n2 1\n''') == '1'\n\nassert solution('''5 7\n3 2 4 1 1 1\n0 5\n0 9\n4 5\n2 1\n''') == '2'\n"
    },
    {
        "number": 3566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n2 2\\n2 3\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n2 2\\n2 3\\n4 3\\n5 1\\n6 3\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n2 2\\n2 3\\n4 3\\n5 1\\n6 3\\n6 5\\n5 6\\n6 4\\n5 7\\n6 3\") == \"1\"\nassert solution(\"5 4\\n3 1 3 4 2\\n0 5\\n0 9\\n4 5\\n2 1\\n2 2\\n2 3\\n4 3\\n5 1\\n6 3\\n6 5\\n5 6\\n6 4\\n5 7\\n6 3\\n6 6\\n5 7\") == \"1\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '3 5\\n'\n    '01001\\n'\n    '11100\\n'\n    '10111\\n'\n) == '00010'\n\nassert solution(\n    '3 5\\n'\n    '01001\\n'\n    '11100\\n'\n    '10111\\n'\n    '01010\\n'\n) == '00011'\n\nassert solution(\n    '3 5\\n'\n    '10101\\n'\n    '10111\\n'\n    '10001\\n'\n    '00010\\n'\n    '00011\\n'\n) == '00011'"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 5\n01001\n11100\n10111\n''') == '00010'\nassert solution('''\n3 5\n00100\n11000\n10110\n''') == '00100'\nassert solution('''\n3 5\n10010\n11000\n10110\n''') == '10010'\nassert solution('''\n3 5\n10010\n11000\n10110\n''') == '10010'\nassert solution('''\n3 5\n00100\n11000\n10110\n''') == '00010'\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\n11100\n10111\"\"\") == \"00010\"\nassert solution(\"\"\"2\n0111\n0001\"\"\") == \"0111\"\nassert solution(\"\"\"3\n00010\n01100\n11100\"\"\") == \"00010\"\nassert solution(\"\"\"4\n00010\n01100\n11100\n00001\"\"\") == \"00010\"\nassert solution(\"\"\"5\n00001\n00010\n01100\n11100\n00001\"\"\") == \"00010\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 5\n01001\n11100\n10111''') == '00010'\nassert solution('''3 3\n01001\n11100\n10111''') == '00011'\nassert solution('''10 10\n100010\n110001\n10111''') == '00010'\nassert solution('''100000\n100001\n100010\n110001''') == '00011'\n'''"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0\\n1\\n') == '00010'\nassert solution('3\\n5\\n01001\\n11100\\n10111') == '00010'\nassert solution('3\\n5\\n01001\\n11100\\n10111') == '00010'\nassert solution('2\\n3\\n11111\\n11111\\n') == '00010'\nassert solution('2\\n3\\n11111\\n11111\\n') == '00010'"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\", \"Test 1 Failed\"\nassert solution(\"1 0 1 0 1 1 0 0 1\") == \"00010\", \"Test 2 Failed\"\nassert solution(\"1 1 0 0 1 1 1 0 1 1 0 1 1 1 1 1 0 0 0 0 1 1 1 1 0 0 0 1 1 1 1 0 1 0 0 1 1 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 1 0 0 1 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 5\\n01001\\n11100\\n10111\\n') == '00010'\nassert solution('5 3\\n111\\n101\\n011\\n') == '01100'\nassert solution('3 5\\n01001\\n11100\\n10111\\n') == '00010'\n\"\"\"\nimport itertools"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 5\n01001\n11100\n10111\n''') == '00010'\n\nassert solution('''\n3 5\n01001\n11100\n10111\n11101\n''') == '01101'\n\nassert solution('''\n3 5\n01001\n11100\n10111\n11101\n''') == '00101'\n\nassert solution('''\n3 5\n01001\n11100\n10111\n11101\n''') == '00010'"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n1\n0\n\"\"\") == \"00010\"\n\"\"\"\n"
    },
    {
        "number": 3567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n0\\n1\\n') == '00100'\nassert solution('10\\n100\\n011\\n') == '00100'\nassert solution('100\\n001\\n011\\n') == '01010'\nassert solution('101\\n010\\n011\\n') == '01010'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n6 2\\n0 4') == 'possible'\nassert solution('2\\n3 3\\n3 3') == 'impossible'\nassert solution('3\\n1 2\\n3 4') == 'possible'\n\"\"\"\nimport heapq"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12\\n') == 'possible'\nassert solution('1\\n6 2\\n0 4\\n6 12\\n6 12\\n') == 'impossible'\nassert solution('3\\n1 1\\n0 0\\n2 2\\n2 2\\n') == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n6\\n12') == 'possible'\nassert solution('4\\n8\\n8\\n8\\n12') == 'impossible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == 'impossible'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('5\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5') == 'impossible'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10') == 'possible'\nassert solution('10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12') == 'impossible'\nassert solution('13\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 7\\n8 8\\n9 9\\n10 10\\n11 11\\n12 12') == 'impossible'"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 2\n0 4\n6 12\n\"\"\") == \"possible\"\nassert solution(\"\"\"\n5 2\n3 6\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n1 5\n5 6\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 6\n1 1\n3 3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 6\n1 1\n2 2\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n3\\n0 1\\n1 1') == 'possible'\nassert solution('3\\n4\\n1 1\\n1 2') == 'impossible'\nassert solution('3\\n4\\n1 1\\n1 1') == 'impossible'\nassert solution('3\\n3\\n0 1\\n1 1') == 'possible'\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n6 2\\n0 4\\n6 12') == 'possible'\nassert solution('3\\n3 2\\n5 4\\n9 12') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 3568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n0 4\\n6 12') == \"possible\"\nassert solution('2\\n2 4') == \"impossible\"\n\nstdin = \"\"\"\n4\n2 2\n3 4\n4 5\n5 8\n6 9\n6 8\n\"\"\"\nassert solution(stdin) == \"possible\"\n\nstdin = \"\"\"\n5\n1 1\n1 2\n2 1\n3 1\n3 2\n\"\"\"\nassert solution(stdin) == \"impossible\"\n\nstdin = \"\"\"\n3\n1 2\n1 3\n2 1\n\"\"\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\nassert solution('''\n5\n0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '1'\nassert solution('''\n5\n0 1\n0 0 1\n0 -5 1\n-5 0 1\n-5 0 1\n''') == '0'\nassert solution('''\n10\n-10 -10 1\n1 0 1\n10 0 1\n-5 5 1\n-5 0 1\n-5 -5 1\n''') == '3'\nassert solution('''\n5\n-10 -10 1\n1 0 1\n10 0 1\n-5 5 1\n-5 0 1\n-5 -5 1\n''') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n5 0 1\n10 0 1\n0 5 1\n0 -5 1\n-5 0 1\n''') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '2'\nassert solution('5 0 1') == '2'\nassert solution('10 0 1') == '1'\nassert solution('0 5 1') == '1'\nassert solution('0 -5 1') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n5 0 1\\n10 0 1\\n0 5 1\\n0 -5 1\\n-5 0 1\\n') == '2'\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 0 1\") == \"2\"\nassert solution(\"5 0 1 0 0 0\") == \"1\"\nassert solution(\"5 0 1 0 0 0 0\") == \"0\"\nassert solution(\"5 0 1 0 0 0 0 0\") == \"2\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"5 0 1\") == \"2\"\nassert solution(\"5 0 0\") == \"1\"\nassert solution(\"10 0 1\") == \"2\"\nassert solution(\"10 0 -1\") == \"1\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"5 0 1\") == \"2\"\nassert solution(\"10 0 1\") == \"1\"\nassert solution(\"0 5 1\") == \"1\"\nassert solution(\"0 -5 1\") == \"1\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_string) == \"2\"\n"
    },
    {
        "number": 3569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\", \"Failed first sample test\"\nassert solution(\"2\") == \"2\", \"Failed second sample test\"\n\nn = int(input())\nd = []\nfor i in range(n):\n    x, y, r = map(float, input().split())\n    d.append((x, y, r))\n\nd.sort(key=lambda x: (x[0], x[1], x[2]))\n\nans = 0\nfor i in range(n):\n    x, y, r = d[i]\n    count = 0\n    for j in range(n):\n        if d[j][0] - r < x <= d[j][0] + r and d[j][1] - r < y <= d[j][1] + r:\n            count += 1\n    ans = max(ans, count)\n\nprint(ans)\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies\nS 3!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\nassert solution('6') == 'Yes'\nassert solution('5') == 'Plot Error'\nassert solution('0') == 'Plot Error'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Plot Error'\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies business_as_usual\\nE it_goes_on_and_on') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3 more_stuff_happens\\nS 4 more_stuff_happens\\nS 5 business_as_usual') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3 more_stuff_happens\\nS 4 more_stuff_happens\\nS 5 business_as_usual') == 'Yes'\nassert solution('5\\nE business_as_usual\\nE bobby_dies\\nS 1 bobby_died\\nE stuff_happens\\nE jr_does_bad_things\\nS 2!bobby_dies\\nS 3 more_stuff_happens\\nS 4 more_stuff_happens\\nS 5 business_as_usual\\nE more_stuff_happens') == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies business_as_usual\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n'''"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"Yes\""
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n\nassert solution('''\n10\nE business_as_usual\nE bobby_dies\nS 1 bobby_died\nE stuff_happens\nE jr_does_bad_things\nS 2!bobby_dies\nE it_goes_on_and_on\nD 4\nS 1!bobby_dies\nS 2!bobby_dies it_goes_on_and_on\n''') == 'Yes'\n\nassert solution('''\n4\nD this_is_D\nE bez_prymienia\nD - prymienia\nS 1 bez_prymienia\nD - prymienia\nE this_is_D\nD - prymienia\nE bez_prymienia\n''') == 'Yes'\n\nassert solution('''\n5\nD this_is_D\nE bez_prymienia\nD - prymienia\nS 1 bez_prymienia\nD - prymienia\nE this_is_D\nD - prymienia\nE bez_prymienia\n''') == 'Yes'\n\nassert solution('''\n4\nD this_is_D\nE bez_prymienia\nD - prymienia\nS 1 bez_prymienia\nD - prymienia\nE this_is_D\nD - prymienia\nE bez_prymienia\n''') == 'Yes'"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nS 1!bobby_dies business_as_usual\\nE stuff_happens\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('6\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nS 1!bobby_dies business_as_usual\\nE stuff_happens\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('6\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nS 1!bobby_dies business_as_usual\\nE stuff_happens\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('6\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nS 1!bobby_dies business_as_usual\\nE stuff_happens\\nS 2!bobby_dies\\nS 2!bobby_dies it_goes_on_and_on') == 'Yes'\nassert solution('6\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nD\\nS 1!bobby_dies business_as_usual\\nE stuff_happens\\nS 2!bobby_dies\\nS 2!bobby_dies') == 'Plot Error'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sample_input_1) == 'Yes'\nassert solution(sample_input_2) == 'Yes'\nassert solution(sample_input_3) == 'Yes'\nassert solution(sample_input_4) == 'Yes'\nassert solution(sample_input_5) == 'Yes'\n"
    },
    {
        "number": 3570,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"Plot Error\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\nassert solution('7 5 7') == '+--------------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+--------------------+'\nassert solution('8 5 5') == '+------------------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+'\nassert solution('9 5 5') == '+--------------------+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+--------------------+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua\nUt enim ad minim veniam quis nostrud exercitation ullamco\nlaboris nisi ut aliquip ex ea commodo consequat\nDuis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu\nfugiat nulla pariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\nassert solution('''\n5 8 7\nsunt dolores ullamco mollit\n''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\nassert solution('''\n5 8 7\nsunt dolores ullamco mollit\n''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\nassert solution('''\n5 3 7\nsunt dolores ullamco mollit\n''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\n''') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"24 5 8 7\\n\"\n    \"Lorem ipsum dolor sit amet consectetur adipisicing elit sed do\\n\"\n    \"eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\n\"\n    \"minim veniam quis nostrud exercitation ullamco laboris nisi ut\\n\"\n    \"aliquip ex ea commodo consequat Duis aute irure dolor in\\n\"\n    \"reprehenderit in voluptate velit esse cillum dolore eu fugiat\\n\"\n    \"nulla pariatur Excepteur sint occaecat cupidatat non proident\\n\"\n    \"sunt in culpa qui officia deserunt mollit anim id est laborum\") == \\\n    \"+------------------------+-+\\n\" \\\n    \"|exercitation ullamco    |^|\\n\" \\\n    \"|laboris nisi ut aliquip | |\\n\" \\\n    \"|ex ea commodo consequat |X|\\n\" \\\n    \"|Duis aute irure dolor in | |\\n\" \\\n    \"|reprehenderit in        |v|\\n\" \\\n    \"+------------------------+-+\\n\" \\\n    \"def solution(stdin: str) -> str:\\n\" \\\n    \"    pass\\n\" \\\n    \"\\n\" \\\n    \"assert solution(\\\"\\n\" \\\n    \"24 5 8 7\\n\" \\\n    \"Lorem ipsum dolor sit amet consectetur adipisicing elit sed do\\n\" \\\n    \"eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\n\" \\\n    \"minim veniam quis nostrud exercitation ullamco laboris nisi ut\\n\" \\\n    \"aliquip ex ea commodo consequat Duis aute irure dolor in\\n\" \\\n    \"reprehenderit in voluptate velit esse cillum dolore eu fugiat\\n\" \\\n    \"nulla pariatur Excepteur sint occaecat cupidatat non proident\\n\" \\\n    \"sunt in culpa qui officia deserunt mollit anim id est laborum\\n\" \\\n    \"\\\") == \\n\" \\\n    \"    +------------------------+-+\\n\" \\\n    \"|exercitation ullamco    |^|\\n\" \\\n    \"|laboris nisi ut aliquip | |\\n\" \\\n    \"|ex ea commodo consequat |X|\\n\" \\\n    \"|Duis aute irure dolor in | |\\n\" \\\n    \"|reprehenderit in        |v|\\n\" \\\n    \"+------------------------+-+\\n\" \\\n    \"def solution(stdin: str) -> str:\\n\" \\\n    \"    pass\\n\" \\\n    \"\\n\" \\\n    \"assert solution(\\\"\\n\" \\\n    \"24 5 8 7\\n\" \\\n    \"Lorem ipsum dolor sit amet consectetur adipisicing elit sed do\\n\" \\\n    \"eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\n\" \\\n    \"minim veniam quis nostrud exercitation ullamco laboris nisi ut\\n\" \\\n    \"aliquip ex ea commodo consequat Duis aute irure dolor in\\n\" \\\n    \"reprehenderit in voluptate velit esse cillum dolore eu fugiat\\n\" \\\n    \"nulla pariatur Excepteur sint occaecat cupidatat non proident\\n\" \\\n    \"sunt in culpa qui officia deserunt mollit anim id est laborum\\n\" \\\n    \"\\\") == \\n\" \\\n    \"    +------------------------+-+\\n\" \\\n    \"|exercitation ullamco"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n24 5 8 7\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur Excepteur sint occaecat cupidatat non proident sunt in\nculpa qui officia deserunt mollit anim id est laborum\n\"\"\") == \"\"\"\n+------------------------+-+\n|exercitation ullamco    |^|\n|laboris nisi ut aliquip | |\n|ex ea commodo consequat |X|\n|Duis aute irure dolor in| |\n|reprehenderit in        |v|\n+------------------------+-+\n\"\"\"\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\nassert solution('8 7 4 3') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\nassert solution('10 3 5 2') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\nassert solution('3 10 4 5 2') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consectetur |X|\\n|duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+------------------------+-+\\n'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"24 5 8 7\") == \"-----------+-+\\n|exercitation|^|\\n|laboris nisi| |\\n|ex ea commodo| |\\n|consectetur|X|\\n|adipisicing|v|\\n-----------+-+\"\nprint(solution(input()))\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 5 6 7') == '+----------------------------+-+\\n|exercitation ullamco        |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo conse    |X|\\n|Duis aute irure dolor in | |\\n|reprehenderit in        |v|\\n+----------------------------+-+'\n"
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"24 5 8 7\\nLorem ipsum dolor sit amet consectetur adipisicing elit sed do\\neiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad\\nminim veniam quis nostrud exercitation ullamco laboris nisi ut\\naliquip ex ea commodo consequat Duis aute irure dolor in\\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\\npariatur excepteur sint occaecat cupidatat non proident sunt in\\nculpa qui officia deserunt mollit anim id est laborum\") == \"+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+\""
    },
    {
        "number": 3571,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('24 5 8 7') == '+------------------------+-+\\n|exercitation ullamco    |^|\\n|laboris nisi ut aliquip | |\\n|ex ea commodo consequat |X|\\n|Duis aute irure dolor in| |\\n|reprehenderit in        |v|\\n+------------------------+-+'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'possible'\nassert solution('2 3\\n3 2\\n1 2\\n1 3\\n') == 'impossible'\nassert solution('2 4\\n3 2\\n1 2\\n1 3\\n') == 'impossible'\nassert solution('1 4\\n3 2\\n1 2\\n1 3\\n') == 'impossible'\nassert solution('2 2\\n2 2\\n1 2\\n1 3\\n') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('3 4\\n0 2 1\\n1 3 2\\n2 4 0') == 'impossible'"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\nprint(solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\"))\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n5 10\n3 4 1 0\n1 3 2 0\n2 1 0 4\n0 3 2 1\nSample Input:\n7 10\n0 0 1 2 3 4\n1 3 2 0\n2 1 0 4\n3 4 0 2\n4 4 3 2\n5 3 2 1\n6 2 1 0\n7 2 0 1\nSample Output:\nimpossible\n''') == 'impossible'\nassert solution('''4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\nSample Input:\n4 5\n0 0 1 2 3\n1 3 2 0\n2 1 0 4\n3 4 0 2\n4 4 3 2\n5 3 2 1\n6 2 1 0\n7 2 0 1\nSample Output:\npossible\n''') == 'possible'\nassert solution('''5 10\n0 0 1 2 3\n1 3 2 0\n2 1 0 4\n3 4 0 2\n4 4 3 2\n5 3 2 1\n6 2 1 0\n7 2 0 1\nSample Input:\n5 15\n0 0 1 2 3\n1 3 2 0\n2 1 0 4\n3 4 0 2\n4 4 3 2\n5 3 2 1\n6 2 1 0\n7 2 0 1\n8 2 0 2\n9 3 0 3\n10 4 2 4\n11 5 3 5\n12 6 3 6\n13 7 3 7\n14 8 3 8\n15 8 3 9\nSample Output:\nimpossible\n''') == 'impossible'\nassert solution('''10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Input:\n5 10\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\nSample Output:\npossible\n''') == 'possible'\nassert solution('''4 10\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\nSample Input:\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\nSample Output:\npossible\n''') == 'possible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\n\"\"\"\n\nn, L = [int(i) for i in stdin.split()]\nl = sorted(sorted([int(i) for i in stdin.split()])[1:])"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\\n') == 'possible'\nassert solution('7 4\\n0 4 1 3 2\\n1 3 0 2 4\\n2 4 0 3 1\\n3 1 4 2 0\\n4 0 3 2 1\\n5 3 0 2 1 4\\n') == 'impossible'\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n4 10\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'possible'\nassert solution(\n'''\n4 9\n0 3 2 1\n3 0 1 3\n2 1 0 2\n1 3 2 0\n''') == 'impossible'\nassert solution(\n'''\n5 12\n0 3 8 1\n3 0 7 4\n2 1 0 6\n1 3 7 0\n4 2 1 0\n''') == 'impossible'\n'''\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0\") == \"impossible\"\nassert solution(\"4 10\\n0 0 0 0\\n0 1 2 1\\n3 3 2 3\\n2 2 2 2\\n1 3 3 1\") == \"possible\"\nassert solution(\"4 10\\n0 1 2 1\\n1 0 2 3\\n1 2 0 3\\n2 3 3 1\") == \"impossible\"\nassert solution(\"4 10\\n0 1 2 1\\n1 2 2 2\\n2 3 3 2\\n3 2 2 2\") == \"possible\"\nassert solution(\"4 10\\n0 1 2 1\\n1 3 3 1\\n1 1 2 2\\n2 2 2 2\") == \"possible\"\n"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 10], [[0, 3, 2, 1], [3, 0, 1, 3], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'possible'\nassert solution([4, 100], [[0, 3, 2, 1], [3, 0, 1, 3], [2, 1, 0, 2], [1, 3, 2, 0]]) == 'impossible'\nassert solution([2, 100], [[0, 0], [0, 0]]) == 'impossible'\nassert solution([0, 100], [[0, 0]]) == 'impossible'"
    },
    {
        "number": 3572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 10\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'possible'\nassert solution('4 20\\n0 3 2 1\\n3 0 1 3\\n2 1 0 2\\n1 3 2 0') == 'impossible'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1.000000000\"\nprint(solution(input_))"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1 1\n1\n2\n''') == '1.00000000', \"First\"\nassert solution('''\n2 1 1\n2\n2\n''') == '0.99999994', \"Second\"\nassert solution('''\n2 1 1\n1\n1\n''') == '0.99999994', \"Third\"\nassert solution('''\n2 1 1\n1\n1\n''') == '0.99999994', \"Fourth\"\n\n-----Task-----\nYou are given an array $nums$ and a positive integer $k$. In one operation, you can select any $i \\in \\{1, 2, \\ldots, k\\}$ and remove all of its occurrences. What is the minimum number of operations needed in order to remove every occurrence of a number in $nums$ such that the resulting array contains no more than $k$ numbers?\n\n-----Input-----\nThe first line contains a single integer $n$ denoting the length of the array.\nThe second line contains $n$ space separated integers denoting the elements of the array.\nThe third and fourth lines contain a single integer $k$.\n\n-----Output-----\nReturn the minimum number of operations needed to remove all occurrences of a number in $nums$ such that the resulting array contains no more than $k$ numbers.\n\nYou are guaranteed that there will always be a solution for $nums$ with $k$ numbers and a solution with less than $k$ numbers.\n\n-----Constraints-----\n1 <= n <= 104\n1 <= k <= 104\nnums[i] \\in {1, 2, \\ldots, k}.\n\n-----Examples-----\nSample Input 1:\n2\n1 3 2 4 5 6 2 4 4 7 6 5 2 4 4 7 5 4 1 3 4\n2\n\nSample Output 1:\n4\n\nSample Input 2:\n2\n1 3 2 4 5 6 2 4 4 7 6 5 2 4 4 7 5 4 1 3 4\n3\n\nSample Output 2:\n3\n\nSample Input 3:\n2\n2 3 2 4 5 6 2 4 4 7 6 5 2 4 4 7 5 4 1 3 4\n2\n\nSample Output 3:\n3\n'''\n) == '4.0000000000', \"First\"\n\nassert solution('''\n2\n1 3 2 4 5 6 2 4 4 7 6 5 2 4 4 7 5 4 1 3 4\n2\n''') == '3.0000000000', \"Second\""
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1 1') == '1.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 1') == \"1.00000000\"\n\nstdin = \"\"\"2 1 1\n1\n2\nSample Input:\n6 4 1\n1\n3\nSample Output:\n2.5000000000000001\"\"\""
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1\") == \"1.00000000\"\n\nassert solution(\"2 2 2\") == \"1.00000000\"\n\nassert solution(\"3 3 3\") == \"1.00000000\"\n\nassert solution(\"3 1 1\") == \"1.00000001\"\n\nassert solution(\"1 1 3\") == \"0.99999999\"\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '2'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 1 1\\n1\\n2') == '1.0'\nassert solution('2 1 1\\n1 1\\n2') == '0.0'\nassert solution('2 1 1\\n2 1\\n1') == '0.0'\nassert solution('1\\n1\\n2') == '0.0'\nassert solution('2\\n1\\n2') == '0.0'\n"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '1.00000000'\n\nassert solution('1 1 1') == '0.99999994'\n\nassert solution('1 1 2') == '0.99999994'\n\nassert solution('1 2 1') == '0.99999994'\n\nassert solution('1 2 2') == '0.99999994'"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '1.000000000000001'\nassert solution('2 1 1') == '1.000000000000002'\nassert solution('3 1 1') == '1.000000000000003'\n\n'''"
    },
    {
        "number": 3573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"1.00000000\"\nassert solution(\"3 5 4\") == \"1.3333333\"\nassert solution(\"3 3 1\") == \"1.75\"\nassert solution(\"2 2 1\") == \"2.3333333\"\nassert solution(\"1 2 1\") == \"1.75\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n4 3 3 2\\n3\\n1 2\\n1 1') == '1\\n1\\n2\\n3\\n3\\n3\\n'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 4 3 3 2\") == \"2\"\nassert solution(\"1 3 5 4 3 2\") == \"3\"\nassert solution(\"1 4 7 5 3 2\") == \"3\""
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('10') == '2'\nassert solution('3 4 3 2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == \"1\"\nassert solution('3\\n') == \"1\"\nassert solution('3\\n3\\n') == \"2\"\nassert solution('3\\n3\\n1\\n2\\n') == \"1\"\nassert solution('3\\n3\\n1\\n2\\n5\\n') == \"2\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '1\\n3\\n1\\n3\\n'\nassert solution('5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '1\\n2\\n1\\n2\\n'\nassert solution('5\\n5 4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n') == '1\\n2\\n3\\n2\\n'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '1'\nassert solution('5 4 3 3 2') == '2'\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 3 3 2\\n3\\n1 2\\n1 1\\n2 4\\n\") == \"1\\n1\\n3\\n\"\n"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n'\n'5 4 3 3 2\\n'\n'3\\n'\n'1 2\\n'\n'1 1\\n'\n'2 4\\n') == '2\\n'"
    },
    {
        "number": 3574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 2\n0 1\n1 2\n0 2\n0 3\n1 3''') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 2') == '2'"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n3 2\\n0 1\\n1 2\\n0 2') == '1'\nprint('Tests passed')"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\\n\") == \"1\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n0 1\n1 2\n0 2\n''') == '1'\nassert solution('''\n4 4\n0 1\n1 2\n2 3\n0 2\n''') == '1'\nassert solution('''\n1 10\n1\n''') == '10'\n'''\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n0 1\\n1 2\\n0 2\\n\") == \"1\"\nassert solution(\"1 2\\n2 1\\n3 2\\n1 2\\n\") == \"never meet\"\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '1'\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1\n1\n1\n''') == '1\nassert solution('''\n5\n0 1\n1 2\n0 2\n0 3\n0 4\n''') == '5\nassert solution('''\n6\n0 1\n1 2\n0 3\n0 4\n0 5\n''') == '0.8\n''')"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4') == '1'\nassert solution('1\\n2\\n3\\n5') == '2'\n\nfrom functools import reduce\n"
    },
    {
        "number": 3575,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n1 2\\n2 2\\n3 2') == '2'\nassert solution('3\\n3\\n1\\n2\\n2\\n2') == '1'\nassert solution('3\\n4\\n4\\n3\\n1\\n2\\n2') == 'never meet'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1\\n') == '141100000001'\nassert solution('5 3 2\\n') == '1411100000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 4 2') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"1.0000000000000000000000000000000000000000000000\"\nassert solution(\"3 2 4\") == \"7.000000000000000002\"\nassert solution(\"8 5 1\") == \"7.000000000000001\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5 2') == '14500000001'\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"3 4 2\") == \"2\"\nassert solution(\"2 1 3\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4 2') == '14500000001'\n\nSample Input:\n6 5 6 1\nSample Output:\n178136833146662173080562091877757371028500648926695780656724991387482878447778083844784633907974\n"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\nassert solution
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 5') == '17'\nassert solution('4 6 5') == '35'\nassert solution('5 5 2') == '97'"
    },
    {
        "number": 3576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\") == \"14500000001\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n1 5\\n2 6') == '0\\n1\\n1\\n2\\n', \"First\"\nassert solution('2\\n4\\n1 6\\n2 5') == '1\\n1\\n2\\n3\\n', \"Second\""
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n3 4\\n1 6\\n2 6') == '2'\nassert solution('5\\n1 2\\n3 4\\n5 6\\n2 3') == '3'"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n2\n3\n4\n''') == '0\n1\n2\n3\n4\n''' == '0')\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n4\\n3 7\\n1 6\\n2 6\\n') == '0\\n1\\n1\\n2\\n'\nprint(solution('1\\n4\\n3 7\\n1 6\\n2 6\\n'))\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(solution.__doc__) == \"2\", solution.__doc__\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('5') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 4\n3 7\n1 6\n2 6\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n2\n2\n2\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n1\n1\n1\n1\n1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n3 4\n3 4\n3 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n3 4\n4 5\n1 4\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n4 3\n3 4\n5 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n4\n2 3\n3 4\n5 6\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 4\\n3 7\\n1 6\\n2 6\") == \"0\\n1\\n1\\n2\"\n"
    },
    {
        "number": 3577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1\\n1\\n') == '0\\n1\\n1\\n1\\n'\nassert solution('5\\n2\\n2\\n2\\n2\\n2\\n') == '1\\n1\\n1\\n1\\n1\\n1\\n'\nassert solution('1\\n3\\n4\\n3\\n2\\n1\\n') == '0\\n1\\n1\\n1\\n1\\n1\\n'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '3100'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"330\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 2\") == \"2000\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"3100\"\nassert solution(\"3 3\") == \"9000\"\nassert solution(\"10 4\") == \"120000\""
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n3 3\n1 1 1\n2 2 2\n3 3 3\n''') == '6'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 2\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300'\nassert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3300'\n\n'''"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"3100\"\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3100'\nassert solution('''\n10 3\n1 2 200\n2 3 200\n3 4 200\n4 5 200\n5 6 200\n2\n1 4 300\n3 5 300\n6 7 300\n7 8 300\n8 9 300\n9 10 300\n10 11 300\n11 12 300\n12 13 300\n13 14 300\n14 15 300\n''') == '26900'\nassert solution('''\n10 3\n1 2 1000\n2 3 1000\n3 4 1000\n4 5 500\n5 6 500\n2\n1 4 300\n3 5 300\n6 7 300\n7 8 300\n8 9 300\n9 10 300\n10 11 300\n11 12 300\n12 13 300\n13 14 300\n14 15 300\n''') == '23800'\nassert solution('''\n100 3\n1 2 1000\n2 3 1000\n3 4 1000\n4 5 1000\n5 6 1000\n2\n1 4 1000\n3 5 1000\n6 7 1000\n7 8 1000\n8 9 1000\n9 10 1000\n10 11 1000\n11 12 1000\n12 13 1000\n13 14 1000\n14 15 1000\n''') == '24410'\nassert solution('''\n20 3\n1 2 1000\n2 3 1000\n3 4 1000\n4 5 500\n5 6 500\n2\n1 4 300\n3 5 300\n6 7 300\n7 8 300\n8 9 300\n9 10 300\n10 11 300\n11 12 300\n12 13 300\n13 14 300\n14 15 300\n15 16 300\n16 17 300\n17 18 300\n18 19 300\n19 20 300\n20 21 300\n21 22 300\n22 23 300\n23 24 300\n24 25 300\n25 26 300\n26 27 300\n27 28 300\n28 29 300\n29 30 300\n30 31 300\n31 32 300\n32 33 300\n33 34 300\n34 35 300\n35 36 300\n36 37 300\n37 38 300\n38 39 300\n39 40 300\n40 41 300\n41 42 300\n42 43 300\n43 44 300\n44 45 300\n45 46 300\n46 47 300\n47 48 300\n48 49 300\n49 50 300\n50 51 300\n51 52 300\n52 53 300\n53 54 300\n54 55 300\n55 56 300\n56 57 300\n57 58 300\n58 59 300\n59 60 300\n60 61 300\n61 62 300\n62 63 300\n63 64 300\n64 65 300\n65 66 300\n66 67 300\n67 68 300\n68 69 300\n69 70 300\n70 71 300\n71 72 300\n72 73 300\n73 74 300\n74 75 300\n75 76 300\n76 77 300\n77 78 300\n78 79 300\n79 80 300\n80 81 300\n81 82 300\n82 83 300\n83 84 300\n84 85 300\n85 86 300\n86 87 300\n87 88 300\n88 89 300\n89 90 300\n90 91 300\n91 92 300\n92 93 300\n93 94 300\n94 95 300\n95 96 300\n96 97 300\n97 98 300\n98 99 300\n99 100 300\n100 101 300\n101 102 300\n102 103 300\n103 104 300\n104 105 300\n105 106 300\n106 107 300\n107 108 300\n108 109 300\n109 110 300\n110 111 300\n111 112 300\n112 113 300\n113 114 300\n114 115 300\n115 116 300\n116 117 300\n117 118 300\n118 119 300\n119 120 300\n120 121 300\n121 122 300\n122 123 300\n123 124 300\n124 125 300\n125 126 300\n126 127 300\n127 128 300\n128 129 300\n129 130 300\n130 131 300\n131 132 300\n132 133 300\n133 134 300\n134 135 300\n135 136 300\n136 137 300\n137 138 300\n138 139 300\n139 140 300\n140 141 300\n141 142 300\n142 143 300\n143 144 300\n144 145 300\n145 146 300\n146 147 300\n147 148 300\n148 149 300\n149 150 300\n150 151 300\n151 152 300\n152 153 300\n153 154 300\n154 155 300\n155 156 300\n156 157 300\n157 158 300\n158 159 300\n159 160 300\n160 161 300\n161 162 300\n162 163 300\n163 164 300\n164 165 300\n165 166 300\n166 167 300\n167 168 300\n168 169 300\n169 170 300\n170 171 300\n171 172 300\n172 173 300\n173 174 300\n174 175 300\n175 176 300\n176 177 300\n177 178 300\n178 179 300\n179 180 300\n180 181 300\n181 182 300\n182 183 300\n183 184 300\n184 185 300\n185 186 300\n186 187 300\n187 188 300\n188 189 300\n189 190 300\n190 191 300\n191 192 300\n192 193 300\n193 194 300\n194 195 300\n195 196 300\n196 197 300\n197 198 300\n198 199 300\n199 200 300\n200 201 300\n201 202 300\n202 203 300\n203 204 300\n204 205 300\n205 206 300\n206 207 300\n207 208 300\n208 209 300\n209 210 300\n210 211 300\n211 212 300\n212 213 300\n213 214 300\n214 215 300\n215 216 300\n216 217 300\n217 218 300\n218 219 300\n219 220 300\n220 221 300\n221 222 300\n222 223 300\n223 224 300\n224 225 300\n225 226 300\n226 227 300\n227 228 300\n228 229 300\n229 230 300\n230 231 300\n231 232 300\n232 233 300\n233 234 300\n234 235 300\n235 236 300\n236 237 300\n237 238 300\n238 239 300\n239 240 300\n240 241 300\n241 242 300\n242 243 300\n243 244 300\n244 245 300\n245 246 300\n246 247 300\n247 248 300\n248 249 300\n249 250 300\n250 251 300\n251 252 300\n252 253 300\n253 254 300\n254 255 300\n255 256 300\n256 257 300\n257 258 300\n258 259 300\n259 260 300\n260"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\n''') == '3600'\n"
    },
    {
        "number": 3578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 3') == '3100'\nassert solution('1 2 1000') == '3000'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 8') == '5.25'\nassert solution('4 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13') == '5.0'"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\\n\") == \"5.25\"\nassert solution(\"5 5\\n1 8\\n6 5\\n2 5\\n2 9\\n7 13\\n\") == \"5.25\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n    2 2\n    1 5\n    3 3\n''') == '3.000000000'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 5\\n2 5\") == \"2.5000000000000001\"\nassert solution(\"1 2\\n8 7\\n4 5\") == \"8.000000\"\nassert solution(\"3 3\\n1 5\\n2 5\") == \"5.5000000\"\nassert solution(\"10 3\\n1 10\\n1 5\") == \"8.5\"\nassert solution(\"5 5\\n1 5\\n1 5\") == \"3.0\"\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2') == '5.25'\nassert solution('10 10') == '11.25'\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == \"5.25\"\nassert solution('3 2') == \"3.5\"\nassert solution('3 1') == \"2.5\"\nassert solution('2 5') == \"5.5\"\nassert solution('8 4') == \"3.75\"\n\n==================================================================================================================================================\nIn the following example we need to make a prediction about the number of chickens left to feed.\n\nYou are given a list of eggs, with each egg having an integer amount of eggs left.\n\nIn this environment, the only actions are 'feed' and 'leave', where the amount of chicken left to feed increases or decreases\nby 1 per action. The goal is to find the amount of chicken left after all actions have been carried out.\n\nWrite a function that takes in a list of eggs and the maximum amount of chicken left to feed. Your function should return the\nfinal chicken amount after all actions have been carried out.\n\nFor example, if the list of eggs is:\n\n['1', '0', '2', '1', '1']\nand the maximum amount of chicken left to feed is 2, your function should return:\n\n2\nSo the final chicken amount after all actions have been carried out is 2."
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"5.25\"\n\"\"\""
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n8 2\n1 8\n6 5\n2 5\n2 9\n7 13\n''') == '5.25'\nassert solution('''\n5 6\n7 9\n10 5\n8 13\n7 6\n4 2\n4 7\n2 4\n2 4\n''') == '5.250000000'\n'''\n"
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"5.25\""
    },
    {
        "number": 3579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 7\n3 2\n7 8\n''') == '5.25'\n\nassert solution('''5\n1 7\n2 7\n3 8\n4 9\n5 5\n''') == '5.50'\n\nassert solution('''5\n1 7\n1 7\n2 7\n3 8\n4 9\n''') == '5.25'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n\"\"\") == \"7\\n2\\n2\\n0\\n4\"\n\nassert solution(\"\"\"\n2\n5 1 1 2 2\n2 1 2\n\"\"\") == \"2\"\n\nprint(\"Tests finished.\")\n\n##########################\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '7'\n\nassert solution('''\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '2'\n\nassert solution('''\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == '0'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"7\\n\"\n    \"1 2 3 1 2 1 1\\n\"\n    \"5\\n\"\n    \"1 3 1 2 3\\n\"\n    \"1 2 1 2\\n\"\n    \"2 2 2 3\\n\"\n    \"3 2 1 2\\n\"\n    \"4 2 1 2\\n\"\n) == \"7\\n2\\n2\\n4\\n0\\n\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 3 1 2 1 1') == '7'\nassert solution('5') == '2'\nassert solution('1 2 3 1 2 1 1') == '7'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\"\"\") == \"7\"\nassert solution(\"\"\"7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\nSample Output:\n7\n2\n2\n0\n4\"\"\") == \"2\""
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read()"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n7\n1 2 3 1 2 1 1\n5\n1 3 1 2 3\n1 2 1 2\n2 2 2 3\n3 2 1 2\n4 2 1 2\n''') == \"7\\n2\\n2\\n0\\n4\\n\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '7\\n'\n    '1 2 3 1 2 1 1\\n'\n    '5\\n'\n    '1 3 1 2 3\\n'\n    '1 2 1 2\\n'\n    '2 2 2 3\\n'\n    '3 2 1 2\\n'\n    '4 2 1 2\\n'\n) == '7\\n2\\n4\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 3580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '7\\n2\\n0\\n4'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input_1) == sample_output_1\nassert solution(sample_input_2) == sample_output_2\nprint(solution(input))\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(r\"\"\"4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n\"\"\") == \"32.6405451448\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n    \n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4') == '32.6405451448'\nassert solution('100') == '20.9383563053'\n\nimport math"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '4\\n40 30 30 40 20 40 50 30 30 50\\n0.0 0.0 0.45 0.45 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.3 0.3 0.3 0.3 0.1\\n0.2 0.2 0.2 0.2 0.2 0.2\\n0.3 0.0 0.3 0.3 0.3 0.1\\n0.0 0.8 0.0 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.0 0.2\\n0.4 0.4 0.0 0.0 0.0 0.2\\n0.8 0.0 0.0 0.0 0.0 0.2') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"32.6405451448\"\nassert solution(\"5\") == \"14.0\"\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\nassert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.2\n''') == '33.608759432'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '32.6405451448'"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n40 30 30 40 20 40 50 30 30 50\n0.0 0.0 0.45 0.45 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.3 0.3 0.3 0.3 0.1\n0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.0 0.3 0.3 0.3 0.1\n0.0 0.8 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.4 0.4 0.0 0.0 0.0 0.2\n0.8 0.0 0.0 0.0 0.0 0.2\n''') == '32.6405451448'\n"
    },
    {
        "number": 3581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '32.6405451448'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n2 1 4 3 5\n\"\"\") == \"2 3 4 1\"\nassert solution(\"\"\"\n4\n2 1 5 3\n\"\"\") == \"2 3 1 5\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n2\n1 1\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '3 4 1 2'\nassert solution('3') == '3 1 2'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n2 1 4 3\n''') == '3 2 1 4'\n\nassert solution('''\n2\n1 1\n''') == '1 1'\n\nassert solution('''\n5\n2 1 3 4 5\n''') == '3 2 1 4 5'\n\nassert solution('''\n4\n1 2 3 4\n''') == '1 2 3 4'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 1 4 3') == '2 3 4 1'\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1 3 4 2'\nassert solution('1 2 3 4 1') == '1 3 4 1 2'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4\n2 1 4 3\n''') == '2 3 4 1'\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 4 3\\n') == '2 3 1 4'\nassert solution('3\\n2 3 5 4\\n') == '2 3 1 4'\nassert solution('7\\n1 2 3 4 5 6 7\\n') == '7 1 2 3 4 5 6'\nassert solution('7\\n1 2 3 4 5 6 7\\n') == '7 1 2 3 4 5 6'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2 3 4\\n') == '2 3 4 1'\nassert solution('1\\n3 4 1 2\\n') == '1 3 4 2'\nassert solution('4\\n3 1 2 4\\n') == '1 3 4 2'\nassert solution('1\\n2 3 4\\n') == '2 3 4 1'"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n2 1 4 3\n\"\"\") == \"2 3 4 1\"\nassert solution(\"\"\"\n4\n2 1 4 3\n\"\"\") == \"2 3 4 1\"\n"
    },
    {
        "number": 3582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n2 1 4 3') == '2 3 4 1'\nassert solution('2\\n4 2 1 3') == '2 4 1 3'\nassert solution('3\\n4 2 1 3') == '1 4 3 2'\nassert solution('4\\n4 2 1 3') == '1 2 3 4'\nassert solution('5\\n4 3 1 2 4') == '1 4 2 3 5'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1 2') == '7.656854249492381'\nassert solution('1\\n1 2\\n1 3') == '7.656854249492381'\nassert solution('6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 2\\n1 2\\n1 3\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\nassert solution(\"5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n\") == \"14.541666666666666\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n6\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\nassert solution('''\n5\n1 3\n2 3\n3 1\n4 1\n5 2\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([\n    '1 2',\n    '1 3',\n    '2 4',\n    '3 3',\n    '3 2',\n    '2 1',\n]) == '7.656854249492381'\n\nprint(solution([\n    '1 2',\n    '1 3',\n    '2 4',\n    '3 3',\n    '3 2',\n    '2 1',\n])) == '7.656854249492381'\nprint(solution([\n    '1 2',\n    '1 3',\n    '2 4',\n    '3 3',\n    '3 2',\n    '2 1',\n])) == '7.656854249492381'\nprint(solution([\n    '1 1',\n    '2 1',\n    '3 2',\n    '4 1',\n    '4 2',\n    '3 1',\n])) == '0.4999999999999996'\nprint(solution([\n    '1 1',\n    '2 1',\n    '3 2',\n    '4 1',\n    '4 2',\n    '3 1',\n])) == '0.4999999999999996'"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 4\\n\"\n    \"3 3\\n\"\n    \"3 2\\n\"\n    \"2 1\\n\"\n    ) == \"7.656854249492381\"\nassert solution(\n    \"6\\n\"\n    \"1 2\\n\"\n    \"1 3\\n\"\n    \"2 4\\n\"\n    \"3 3\\n\"\n    \"3 2\\n\"\n    \"2 1\\n\"\n    ) == \"7.656854249492381\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 4\") == \"5\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"3 2\") == \"5\"\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2\n2 3\n1 3\n''') == '7.656854249492381'\nassert solution('''\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n55 57\n56 58\n56 59\n57 60\n57 61\n57 62\n57 63\n57 64\n57 65\n56 66\n56 67\n56 68\n56 69\n55 70\n55 71\n55 72\n54 73\n53 74\n53 75\n52 76\n52 77\n51 78\n50 79\n49 80\n48 81\n47 82\n46 83\n45 84\n44 85\n44 86\n43 87\n42 88\n41 89\n40 90\n39 91\n38 92\n37 93\n37 94\n36 95\n35 96\n34 97\n33 98\n32 99\n31 100\n30 101\n29 102\n28 103\n27 104\n26 105\n25 106\n24 107\n23 108\n22 109\n21 110\n20 111\n19 112\n18 113\n17 114\n16 115\n15 116\n14 117\n13 118\n12 119\n11 120\n10 121\n9 122\n8 123\n7 124\n6 125\n5 126\n4 127\n3 128\n2 129\n1 130\n''') == '34.08669291239803'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n1 2') == '7.656854249492381'\nassert solution('1\\n1 3') == '7.656854249492381'\nassert solution('2\\n1 2') == '7.656854249492381'\nassert solution('2\\n1 3') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2\n1 3\n2 4\n3 3\n3 2\n2 1\n''') == '7.656854249492381'\n"
    },
    {
        "number": 3583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 2\\n1 3\\n2 4\\n3 3\\n3 2\\n2 1\\n\") == \"7.656854249492381\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n''') == '2'\nassert solution('''3 2 3\n1 1\n0 2\n0 3\n''') == '0'\nassert solution('''3 2 3\n1 1\n1 0\n0 2\n''') == '1'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0''') == '2'\n\nassert solution('''2 2 2\n0 0\n0 0''') == '0'\n\nassert solution('''3 3 3\n1 2\n2 1\n1 1\n0 0\n0 0\n1 3\n1 1''') == '2'"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5 3') == '2'\nassert solution('4 6 8') == '1'\nassert solution('1 5 2') == '1'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1\\n2 2\\n1 3') == '2'\nassert solution('5 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '2'\nassert solution('3 5 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0') == '1'\nassert solution('6 1 3\\n0 0\\n3 3\\n1 4\\n2 2\\n3 2\\n1 3\\n4 4\\n2 1\\n4 0\\n1 4\\n3 4\\n2 0\\n2 3') == '3'\n"
    },
    {
        "number": 3584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n1 1\\n2 2\\n1 3\\n0 0\\n0 3\\n1 4\\n3 3\\n3 0\\n') == '2'\nassert solution('5 4 2\\n0 0\\n2 3\\n1 4\\n1 5\\n4 0\\n3 2\\n2 1\\n3 3\\n2 4\\n') == '2'\nassert solution('2 2 2\\n0 0\\n0 3\\n1 4\\n2 5\\n1 5\\n2 4\\n') == '2'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(r\"\"\"\n2 1\n\"\"\") == \"9\"\n\nassert solution(r\"\"\"\n10 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '9'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '9'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n''') == '9'\nassert solution('''\n5 4\n''') == '6'\nassert solution('''\n1 4\n''') == '3'\nassert solution('''\n1 4\n''') == '4'\nassert solution('''\n2 3\n''') == '6'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 1\n''') == '9'\nassert solution('''\n2 3\n''') == '9'\nassert solution('''\n100 10\n''') == '100'\nassert solution('''\n100 10\n''') == '100'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"9\"\nassert solution(\"2 1\") == \"9\"\nassert solution(\"3 1\") == \"9\"\nassert solution(\"1 2\") == \"9\"\nassert solution(\"2 2\") == \"9\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"9\"\nassert solution(\"10 4\") == \"15\"\nassert solution(\"7 7\") == \"17\"\nassert solution(\"5 5\") == \"17\"\nassert solution(\"1 2 3 4 5\") == \"25\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n\") == \"9\"\nassert solution(\"1 1000\\n\") == \"1000\"\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 1\n''') == '9'\nassert solution('''\n2 5\n''') == '6'\nassert solution('''\n3 1\n''') == '4'\nassert solution('''\n10 6\n''') == '5'\n"
    },
    {
        "number": 3585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '9'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"5\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\nassert solution(\"\"\"5\n1\n2\n3\n5\n7\n12\n\"\"\") == \"7\"\nassert solution(\"\"\"5\n1\n1\n1\n1\n1\n\"\"\") == \"5\"\nassert solution(\"\"\"5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"12\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"7\"\nassert solution(\"7\") == \"12\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '1'\nassert solution('7') == '1'\nassert solution('12') == '2'\nprint('all tests passed')\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\\n3\\n5\\n7\\n12\") == \"12\"\nassert solution(\"1\\n-5\\n5\\n7\\n12\\n-4\\n6\\n-1\") == \"6\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '12'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n2\n3\n5\n7\n12\n\"\"\") == \"12\"\nassert solution(\"\"\"\n10\n1\n3\n4\n8\n10\n13\n14\n17\n18\n20\n\"\"\") == \"\"\nassert solution(\"\"\"\n2\n1\n1\n\"\"\") == \"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n5\\n7\\n12\") == \"12\"\nassert solution(\"5\\n5\\n4\\n1\\n2\\n3\\n5\") == \"3\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\") == \"5\"\nassert solution(\"5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\") == \"\"\nassert solution(\"10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\") == \"\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"3\"\nassert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n3\n4\n5\n3\n''') == '12'\nassert solution('''\n10\n9\n8\n6\n3\n1\n4\n2\n6\n10\n7\n5\n4\n9\n''') == '10'\n"
    },
    {
        "number": 3586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n5\\n7\\n12\\n') == '12'\nassert solution('1\\n-1\\n-1\\n-1\\n') == ''\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n001') == '1'\nassert solution('5\\n0111') == '1111'\n\n------------------------------------------------------------\n\nSample Input:\n5\n001\n100\n111\n110\nSample Output:\n11\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\""
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1\n011\n\"\"\") == \"011\"\nassert solution(\"\"\"\n1\n111\n\"\"\") == \"111\"\nassert solution(\"\"\"\n3\n110\n010\n011\n\"\"\") == \"011\"\nassert solution(\"\"\"\n3\n111\n010\n011\n\"\"\") == \"111\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '11'\nassert solution('5') == '00'\nassert solution('20') == '111'\nassert solution('50') == '110'\nassert solution('1000') == '111'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"5\n00\n01\n10\n110\n111\nSample Input:\n3\n00\n10\n00\nSample Output:\n00\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n00\\n01\\n10\\n110\\n111') == '11', 'Should be \"11\"'\nassert solution('10\\n00\\n01\\n10\\n110\\n111') == '10', 'Should be \"10\"'\nassert solution('100\\n00\\n01\\n10\\n110\\n111') == '100', 'Should be \"100\"'\nassert solution('300\\n00\\n01\\n10\\n110\\n111') == '-1', 'Should be \"-1\"'\n\"\"\""
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '11'\nassert solution('0') == '11'\nassert solution('1') == '11'\nassert solution('10') == '11'\nassert solution('111') == '111'\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n101\\n0101\\n011\\n11\") == \"11\"\nassert solution(\"10\\n100\\n0101\\n011\\n11\") == \"100\"\nassert solution(\"10\\n00\\n0101\\n011\\n11\") == \"100\"\nassert solution(\"10\\n11\\n0101\\n011\\n11\") == \"11\"\nassert solution(\"10\\n01\\n0101\\n011\\n11\") == \"100\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '01'\n\"\"\"\n"
    },
    {
        "number": 3587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '011'\nassert solution('2') == '00'\n'''"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"100 250 320\"\n\nassert solution(input(\"\")) == \"\""
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"100 250 320\"\nassert solution(\"2\") == \"100 250 320\"\nassert solution(\"1\") == \"100 250 320\"\nassert solution(\"5\") == \"100 250 320 100 150\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320', \"First Test Case\"\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320', \"Second Test Case\"\nassert solution('''\n4\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320', \"Third Test Case\"\n\nassert solution('''\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\n''') == '100 250 320', \"Fourth Test Case\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n20 100\n100 10\n''') == '100 250 320'\nassert solution('''\n3\n20 100\n100 10\n1\n150 50\n1\n150 100\nSample Input:\n3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100\nSample Output:\n100 250 320''') == '100 250 320'\nassert solution('''\n3\n20 100\n100 10\n1\n150 50\n1\n150 100\nSample Input:\n3\n20 100\n100 10\nSample Output:\n100 250 320''') == '100 250 320'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n20 100\\n100 10\\n1\") == \"100 250 320\"\nassert solution(\"3\\n2\\n20 100\\n100 10\\n1\") == \"100 250 320\""
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\nassert solution('''3\n2\n20 100\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'\nassert solution('''5\n2\n20 100\n100 10\n100 10\n100 10\n1\n150 50\n1\n150 100''') == '100 250 320'"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '100 250 320'\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"100 250 320\"\nassert solution(\"2\") == \"100 250 320\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == \"100 250 320\"\nassert solution('3') == \"100 250 320\"\nassert solution('4') == \"100 250 320\"\n"
    },
    {
        "number": 3588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sample_input) == sample_output\nassert solution(input) == output\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('80 50') == '3 7 4 6 5 7 2 15 2'\nassert solution('800 100') == '3 7 4 6 5 7 2 15 2'\n\n<-----Task----->\nHint: Use integer division\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100\\n50') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('1 100') == '1 100'\nassert solution('1 100 2') == '1 2'\nassert solution('5 8') == '1 2 3 4 5'\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"7\"\nassert solution(\"50\") == \"7\"\nassert solution(\"100\") == \"7\"\nassert solution(\"50 50\") == \"7\"\nassert solution
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\nimport math\nimport itertools"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10050') == '3 7 4 6 5 7 2 15 2'\nprint('Solution:')\nprint(solution(*[int(i) for i in input().split()]))\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('50 100') == '3 7 4 6 5 7 2 15 2'\n\"\"\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"50 100\") == \"3 7 4 6 5 7 2 15 2\"\n"
    },
    {
        "number": 3589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n10') == '1 2 3 4 5 6 7 8 9'\nassert solution('50\\n100') == '3 7 4 6 5 7 2 15 2'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5 0\\n0 14\\n15 14\\n15 0') == 40.0000000000\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n8\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"80.0000000000\"\nassert solution(\"\"\"\n8\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"80.0000000000\"\nassert solution(\"\"\"\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"80.0000000000\"\nassert solution(\"\"\"\n4\n0 0\n0 14\n15 14\n15 0\n4\n8 3\n4 6\n7 10\n11 7\n\"\"\") == \"80.0000000000\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 4 5\\n3 6 7\\n3 4 5\\n\") == \"40.0000000000\"\nassert solution(\"3\\n0 4 7\\n0 4 7\\n0 4 7\\n\") == \"35.0\"\nassert solution(\"10\\n0 0\\n0 8\\n8 4\\n0 4\\n\") == \"37.0\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000'\n\nassert solution('''\n3\n4 2\n3 0\n2 7\n''') == '23.0'\n\nassert solution('''\n3\n0 0\n1 0\n1 1\n''') == '3.0'\n\nassert solution('''\n4\n0 0\n0 14\n15 14\n15 0\n''') == '40.0000000000'\n\nassert solution('''\n3\n2 4\n2 0\n''') == '20.0000000000'"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '0.0'\nassert solution('8\\n') == '7.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 14\\n15 14\\n15 0\\n4\\n8 3\\n4 6\\n7 10\\n11 7\\n') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '10.0000000000'\nassert solution('4') == '40.0000000000'\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0 0\n0 14\n15 14\n15 0\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n4\n0 0\n0 14\n15 14\n15 0\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n4\n0 0\n0 8\n8 8\n8 0\n\"\"\") == \"40.0000000000\"\nassert solution(\"\"\"\n5\n0 0\n0 4\n4 4\n4 0\n4 4\n4 4\n4 0\n\"\"\") == \"49.0000000000\"\nassert solution(\"\"\"\n5\n0 0\n0 10\n10 10\n10 0\n10 10\n10 10\n10 0\n\"\"\") == \"49.0000000000\"\n"
    },
    {
        "number": 3590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 14\\n15 14\\n15 0') == '40.0000000000'\nassert solution('3\\n3 2\\n2 2\\n0 2') == '16.0000000000'\nassert solution('2\\n1 1\\n0 0') == '4.0000000000'\nassert solution('2\\n0 0\\n0 1') == '4.0000000000'\nassert solution('2\\n1 1\\n0 0') == '4.0000000000'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n3\\n2 1 3') == '2\\n1\\n'"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n1\n4\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n5\n1 2 3 4 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution('''\n1\n5\n1 2 5 3 4\n''') == '1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n\nsolution(open(0).read())"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2 1 3\") == \"1\""
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 1 3\n''') == '1'\nassert solution('''\n10\n4 1 5 2 3 6 7 8 9 10\n''') == '10'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n2 1 3') == '1\\n1'\nassert solution('3\\n1 2 3') == '2\\n1\\n1'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1\\n\"\n    \"2 1 3\"\n) == \"1\"\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n3\n1 1 3\n''') == '1'\n\nassert solution('''\n2\n3\n2 1 3\n''') == '2'\n\nassert solution('''\n1\n3\n2 1 3\n''') == '0'\n"
    },
    {
        "number": 3591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n4\n1 2 3\n''') == '2"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\n\n\"\"\""
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n5.14 1.71\n6.59 1.71\n8.12 1.71\n10.20 1.71\n12.33 1.71\n''') == '199 162'\nassert solution('''5\n5.14 1.71\n6.59 1.71\n8.12 1.71\n10.20 1.71\n12.33 1.71\n''') == '199 162'\nassert solution('''2\n2.0 2.0\n2.0 2.0\n''') == 'None'\nassert solution('''4\n1.0 1.0\n1.0 1.0\n1.0 1.0\n1.0 1.0\n''') == 'None'"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0.00 1.00 2.00') == 'None'\nassert solution('0.00 1.00 2.00') == '199 162'\nassert solution('0.00 1.00 2.00') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''725.85 1.71 2.38''') == '199 162'\nassert solution('''100.0 2.0 1.5''') == '100 2'\nassert solution('''0.0 1.5 2.0''') == 'None'\nassert solution('''0.5 0.0 2.0''') == 'None'\nassert solution('''0.5 2.0 0.0''') == 'None'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0.00 1.71 0.00\n0.00 1.71 1.00\n1.71 0.00 1.00\n1.71 1.00 0.00\n2.38 0.00 1.00\n2.38 1.00 0.00\n0.00 1.71 1.00\n0.00 1.71 2.00\n1.71 1.00 1.00\n1.71 2.00 0.00\n2.38 1.00 1.00\n2.38 2.00 0.00\n1.71 2.00 1.00\n1.71 2.00 2.00\n2.38 2.00 1.00\n2.38 2.00 2.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n1.71 2.00 2.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 2.00 2.00\n1.71 2.00 1.00\n1.71 2.00 2.00\n2.38 1.00 1.00\n2.38 2.00 1.00\n1.71 2.00 1.00\n1.71 2.00 2.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00\n1.71 2.00 1.00\n2.38 1.00 2.00\n2.38 2.00 1.00\n1.71 1.00 2.00"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_stdin) == output\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"725.85 1.71 2.38\") == \"199 162\"\nassert solution(\"27.2 1.15 2.18\") == \"None\"\nassert solution(\"27.2 1.15 2.18\") == \"None\"\nassert solution(\"27.2 1.15 2.18\") == \"None\"\n\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2.08\\n3.11\\n2.07\\n') == '199 162'\nassert solution('3.14\\n4.12\\n3.13\\n') == 'none'\nassert solution('4.07\\n6.01\\n2.01\\n') == '199 162'\nassert solution('6.20\\n8.04\\n8.41\\n') == '199 162'\nassert solution('6.20\\n2.04\\n8.04\\n') == '199 162'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n3\\n0.9 5') == 'None'\nassert solution('1.77\\n2.99\\n4.8') == '3 6'\n"
    },
    {
        "number": 3592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('725.85 1.71 2.38') == '199 162'\nassert solution('1.00 2.00 3.00') == 'None'\nassert solution('0.00 0.00 0.00') == 'None'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0') == '16'\nassert solution('100 50\\n1 4 -1\\n5 3 2\\n10 9 -1\\n7 0 -1\\n7 1 -1\\n5 5 0\\n10 9 2\\n20 4 2\\n10 1 -1\\n3 0 -1\\n7 1 4\\n8 2 2\\n0 7 -1\\n0 1 3\\n8 6 1\\n5 6 0\\n1 1 1\\n10 9 1\\n2 1 3\\n5 2 -1\\n10 3 -1\\n5 2 3\\n10 6 -1\\n5 1 -1\\n3 6 5\\n7 9 1\\n4 1 -1\\n4 2 3\\n2 2 1\\n0 1 5\\n6 6 1\\n5 5 1\\n3 4 -1\\n9 1 -1\\n5 3 1\\n6 8 1\\n10 2 -1\\n10 2 2\\n5 0 -1\\n9 4 -1\\n7 2 3\\n5 3 1\\n1 3 -1\\n0 1 -1\\n9 1 -1\\n7 0 -1\\n0 8 -1\\n8 1 3\\n10 6 -1\\n8 1 -1\\n4 3 -1\\n6 7 -1\\n4 2 -1\\n7 3 3\\n5 8 -1\\n4 2 -1\\n4 2 2\\n10 3 2\\n5 3 1\\n0 6 2\\n8 3 -1\\n7 8 -1\\n9 1 3\\n10 3 1\\n6 0 -1\\n4 3 -1\\n0 4 2\\n4 1 -1\\n8 0 -1\\n10 1 -1\\n4 3 0\\n1 2 2\\n5 4 1\\n3 6 3\\n4 2 1\\n4 1 4\\n3 8 -1\\n7 0 -1\\n9 0 -1\\n7 1 5\\n1 5 1\\n7 2 2\\n4 2 1\\n7 2 -1\\n10 3 1\\n4 0 -1\\n4 1 2\\n2 1 -1\\n9 0 -1\\n4 6 2\\n8 1 1\\n10 3 -1\\n10 1 -1\\n7 5 2\\n1 1 -1\\n9 5 3\\n7 2 3\\n3 6 4\\n0 4 2\\n9 2 1\\n8 3 -1\\n3 2 1\\n2 3 3\\n8 0 -1\\n7 3 2\\n8 2 2\\n0 1 -1\\n3 4 1\\n6 7 2\\n4 3 -1\\n3 8 -1\\n0 1 -1\\n8 1 -1\\n6 0 -1\\n4 8 2\\n7 2 1\\n7 2 0\\n2 8 -1\\n7 3 -1\\n4 5 1\\n5 5 1\\n0 3 -1\\n2 2 1\\n0 3 -1\\n6 3 3\\n3 3 -1\\n4 5 2\\n2 6 2\\n5 3 1\\n0 8 -1\\n4 4 1\\n6 3 -1\\n3 8 -1\\n5 1 -1\\n0 1 1\\n10 3 1\\n6 6 0\\n3 2 1\\n4 1 1\\n10 5 -1\\n4 5 -1\\n0 0 -1\\n2 0 -1\\n7 3 3\\n2 1 2\\n4 6 -1\\n7 1 -1\\n5 4 -1\\n8 1 4\\n1 1 -1\\n6 3 3\\n8 0 1\\n3 3 -1\\n8 5 2\\n8 3 -1\\n2 3 1\\n2 5 -1\\n0 0 2\\n2 2 1\\n0 2 -1\\n8 2 0\\n3 1 0\\n2 0 -1\\n7 0 2\\n1 0 3\\n4 6 2\\n8 5 1\\n8 4 -1\\n1 1 3\\n7 4 -1\\n3 5 3\\n4 5 2\\n0 2 -1\\n0 8 -1\\n0 3 -1\\n8 0 -1\\n8 2 -1\\n0 3 -1\\n7 2 2\\n8 5 1\\n3 2 -1\\n4 2 -1\\n7 3 -1\\n5 1 -1\\n5 1 -1\\n7 1 -1\\n1 2 3\\n2 2 1\\n4 3 2\\n4 1 4\\n3 3 2\\n8 2 1\\n4 8 3\\n4 1 3\\n4 3 1\\n0 4 -1\\n0 8 -1\\n6 2 0\\n6 0 -1\\n5 4 -1\\n1 6 3\\n8 1 2\\n1 1 -1\\n5 2 0\\n3 8 -1\\n5 8 -1\\n4 6 1\\n6 6 3\\n1 0 -1\\n7 0 1\\n7 0 0\\n3 1 -1\\n0 0 -1\\n1 2 1\\n0 3 -1\\n1 2 1\\n0 4 -1\\n8 0 -1\\n0 6 -1\\n0 0 1\\n2 5 -1\\n2 1 3\\n2 6 1\\n6 4 1\\n7 1 -1\\n5 2 0\\n8 5 0\\n2 6 1\\n4 3 -1\\n3 8 -1\\n3 5 -1\\n7 2 1\\n6 8 1\\n4 5 -1\\n3 4 2\\n2 5 1\\n8 3 -1\\n3 3 -1\\n0 0 -1\\n3 0 -1\\n8 3 0\\n5 0 -1\\n1 1 -1\\n0 0 3\\n2 0 0\\n3 4 -1\\n6 0 -1\\n7 1 -1\\n5 6 0\\n1 0 -1\\n2 1 3\\n0 3 -1\\n1 5 1\\n7 6 2\\n0 1 -1\\n8 3 -1\\n0 4 2\\n4 1 1\\n4 1 4\\n0 3 -1\\n0 1 -1\\n3 0 -1\\n8 4 1\\n7 0 -1\\n4 0 -1\\n4 3 -1\\n3 8 -1\\n3 4 -1\\n5 2 -1\\n7 3 -1\\n7 1 5\\n4 2 2\\n5 3 -1\\n3 1 -1\\n8 2 -1\\n8 1 4\\n2 1 -1\\n4 1 -1\\n7 2 -1\\n8 1 -1\\n5 1 -1\\n2 2 1\\n0 1 -1\\n7 2 -1\\n6 2 1\\n2 1 1\\n0 1 3\\n2 4 -1\\n6 2 1\\n8 1 -1\\n4 3 2\\n2 8 -1\\n6 6 -1\\n5 1 -1\\n4 0 -1\\n7 2 2\\n6 1 1\\n0 2 -1\\n3 6 3\\n8 3 1\\n7 3 -1\\n0 0 -1\\n6 0 -1\\n3 8 -1\\n4 0 -1\\n2 0 -1\\n7 1 -1\\n4 2 3\\n0 2 1\\n8 1 2"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '16'\nassert solution([5,3,-1,1,2,3,0,2,1,1,3,3,2,1,1,3,3,0,2,1,1,3]) == '16'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3') == \"16\"\nassert solution('1 3 2') == \"10\"\nassert solution('2 1 -1') == \"4\"\nassert solution('3 3 0') == \"20\"\nassert solution('5 5 7') == \"36\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1\\n3 3 0\\n') == '16\\n', \"Sample Case\"\nassert solution('5 10\\n1 10 2 3 -1\\n0 -2 1 -3 0 -3 1 1 2\\n2 -1 2 2 3\\n1 1 2 0 0 1 1 1\\n1 -3 -3 -1 1 0 -1 0 1\\n-2 1 1 1 2\\n1 2 1 1 2\\n1 -1 2 -1 1 2\\n-1 -1 2 2 1\\n-1 -1 -1 2 -1 1\\n-1 -1 1 -1 2 1\\n1 -2 1 1 2\\n1 -1 1 1 -1 2\\n1 1 1 -1 2\\n-1 1 1 1 -1 2\\n-2 1 1 1 1\\n-1 -1 -1 -1 1 2\\n-2 1 2 1 -1\\n1 -1 2 -1 1\\n0 1 1 1 -1\\n2 1 1 2 -1\\n-1 2 -1 1 1\\n0 1 1 1 1\\n1 1 1 2 1\\n2 1 1 2 2\\n-1 2 2 -1 1\\n0 -1 1 1 1\\n2 -1 1 1 2\\n1 1 1 1 2\\n-2 1 1 1 1\\n1 1 1 1 -1\\n-1 1 1 1 1\\n1 1 1 1 1\\n-1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 -1 1 1 1\\n-1 -1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 0 0 0 0\\n2 1 2 2 2\\n-2 1 1 1 1\\n-1 1 2 1 1\\n2 1 2 2 2\\n0 2 3 2 0\\n2 1 1 1\\n1 1 2 2\\n2 2 1 2\\n1 2 1 2\\n1 1 2 1\\n2 2 1 1\\n2 1 1 2\\n2 2 1 2\\n1 2 1 1\\n0 1 1 1\\n2 2 1 2\\n1 2 1 2\\n-1 -1 2 1 1\\n0 1 1 1\\n1 2 1 1\\n1 1 2 1\\n1 1 1 1\\n-1 -1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 2 2 2 2\\n1 2 2 2 1\\n1 2 1 2 1\\n-1 1 1 2 2\\n0 1 2 1 0\\n2 2 1 2 2\\n1 2 1 2 1\\n1 1 1 1 1\\n-1 1 1 1 1\\n2 1 1 1 1\\n1 2 1 1 1\\n2 1 2 1 1\\n1 1 2 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 0 0 0 0\\n1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 0 0 0 0\\n-1 -1 1 1 1\\n1 1 1 1 1\\n0 -1 1 1 1\\n2 -1 1 1 1\\n1 1 1 1 1\\n2 1 2 1 1\\n0 2 2 2 2\\n2 1 2 2 2\\n1 1 2 2 1\\n0 2 1 1 0\\n2 1 1 2 1\\n-1 1 1 1 1\\n1 2 1 2 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 0 0 0 0\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 0 0 0 0\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1 1 1\\n0 0 0 0 0\\n-1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 0 0 0 0\\n0 0 0 0 0\\n-1 1 1 1 1\\n0 1 1 1 1\\n1 1 1"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3\\n2 1 -1\\n1 3 2\\n0 2 3\\n2 1 1') == '16\\n'\n\"\"\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"16\"\n\n'''\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n''') == '16'"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0''') == \"16\"\n"
    },
    {
        "number": 3593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '13'\nassert solution(\"\"\"\n5 3\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == '16'\nassert solution(\"\"\"\n2 1 -1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == '16'\nassert solution(\"\"\"\n7 3\n2 -1 2 1\n1 3 2\n0 2 3\n2 1 1\n3 3 0\n\"\"\") == '17'\nassert solution(\"\"\"\n4 4\n3 1 2\n3 1 1\n2 2 0\n\"\"\") == '16'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '2 1 4'\nassert solution('1 2') == '3 2 1'\nassert solution('1 2 3') == '3 2 1'\nassert solution('1 2 3 4') == '3 2 1'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n0\nO 1\nO 1\nO 1\nE 4\nE 4\nE 4\nI 4\nE 4\nE 4\nE 4\nE 4\nE 4\nE 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 1\nE 4\nO 1\nO 1\nO 1\n\"\"\") == \"\"\"2 1 4\"\"\"\n\nassert solution(\"\"\"\n0\nE 1\nE 1\nE 1\nI 4\nE 4\nI 4\nI 4\nO 1\nO 1\nO 1\nE 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 1\nE 4\nE 4\nE 4\nE 4\nE 4\nE 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 1\nE 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 1\nE 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 1\nE 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\nO 2\\nE 1\\nI 2\\nO 3\\nE 1\\nI 1\\n') == '2 1 3'\nassert solution('1\\nO 1\\nE 4\\nI 1\\nO 3\\nE 4\\nI 2\\n') == '2 4 1'\nassert solution('1\\nO 1\\nE 4\\nI 2\\nO 3\\nE 4\\nI 3\\n') == '2 4 1'\nassert solution('1\\nO 1\\nE 5\\nI 2\\nO 3\\nE 4\\nI 2\\n') == '2 4 1'\nassert solution('1\\nO 1\\nE 6\\nI 3\\nO 4\\nE 5\\nI 2\\n') == '2 4 1'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1 1 1'\nassert solution('2') == '1 2 3'\nassert solution('3') == '3 1 1'\n\n'''\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\nO 2') == '1 1 2'\nassert solution('2\\nE 4') == '1 1 4'\nassert solution('3\\nI 2') == '2 1 2'\nassert solution('4\\nO 2') == '1 2 1'\nassert solution('5\\nE 5') == '2 3 2'\n"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\nO 4\\n') == '2 1 4'"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nO 10\nO 2\nI 2\nE 4\nE 10\nO 8\nO 12\nI 6\nE 4\nI 4\nE 4\nE 4\nI 2\nE 10\nE 12\nE 2\nE 2\nE 8\nI 4\nE 12\nI 8\nE 8\nI 8\nO 1\nI 2\nO 2\nO 12\nI 4\nE 10\nE 4\nI 8\nO 8\nE 8\nI 4\nE 4\nI 4\nO 2\nI 10\nE 12\nI 8\nE 8\nI 8\nI 4\nE 4\nI 10\nO 8\nI 2\nE 4\nI 4\nE 8\nE 10\nE 12\nE 2\nI 4\nO 10\nI 8\nI 8\nE 8\nI 4\nO 4\nO 4\nI 8\nO 8\nI 4\nI 4\nO 2\nO 4\nI 4\nI 4\nO 8\nI 4\nI 2\nI 8\nE 8\nI 4\nI 4\nE 4\nI 4\nI 4\nI 8\nI 4\nO 4\nO 8\nI 4\nO 8\nI 8\nE 8\nE 4\nI 8\nE 4\nI 4\nE 4\nI 4\nI 4\nO 2\nO 4\nI 4\nE 4\nE 4\nE 4\nO 2\nE 8\nI 4\nO 4\nO 4\nI 4\nI 4\nI 4\nI 8\nO 4\nO 4\nI 4\nI 4\nI 8\nI 4\nO 4\nI 8\nO 4\nI 4\nO 4\nI 4\nO 8\nO 8\nI 4\nI 4\nI 8\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 2\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nO 2\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI 4\nI"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\nO 4') == '2 1 4'\nassert solution('3\\nO 4 5 6\\nE 4\\nI 4') == '2 1 4'\nprint('Congratulations, have fun!')"
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"O 4\") == \"2 1 4\"\nassert solution(\"O 4 O 4 O 4\") == \"2 2 2 2\"\n\"\"\""
    },
    {
        "number": 3594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1 2 5 8'\nassert solution('100') == '1 2 99 100'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\nassert solution('''5 15\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '12'\nassert solution('''4 4\n1 1 2 1\n1 1 4 3\n3 4 2 2\n''') == '0'\n'''\n\nstdin = []\nfor _ in range(int(input())):\n    stdin.append([list(map(int, input().split()))])"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1 1 4 5\n5 5 9 10''') == '4'\nassert solution('''5\n1 1 4 5\n5 5 9 10\n1 6 4 10\n2 11 7 14\nSample Input 2:\n5\n1 1 2 3 4\n5 5 6 7 8\nSample Output 2:\n0''') == '0'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 1 4 5\") == \"5\"\nassert solution(\"5 5 9 10\") == \"4\"\nassert solution(\"1 6 4 10\") == \"2\"\nassert solution(\"2 11 7 14\") == \"3\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\nassert solution('''\n3 8\n1 1 1\n3 3 3\n5 5 5\n1 6 5\n1 7 6\n3 4 4\n3 5 5\n''') == '1'\nassert solution('''\n3 8\n1 1 1\n3 3 3\n5 5 5\n1 6 5\n1 7 6\n3 4 4\n3 5 5\n''') == '2'\nassert solution('''\n5 6\n2 1 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n10 10 10\n11 11 11\n12 12 12\n13 13 13\n14 14 14\n''') == '5'\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == '4'\n''')\n\ns = '1 1 2 2 5'"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 8') == '4'\nassert solution('5 1 4 5') == '4'\nassert solution('5 5 9 10') == '4'\nassert solution('1 6 4 10') == '1'\nassert solution('2 11 7 14') == '2'\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14\n''') == \"4\"\nassert solution('''\n5 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n''') == \"7\"\nassert solution('''\n4\n5 1 6 7\n5 1 6 7\n5 1 6 7\n5 1 6 7\n5 1 6 7\n5 1 6 7\n''') == \"5\"\nassert solution('''\n5 5\n2 4 4 5 5\n1 1 1 2 2\n1 1 1 2 2\n1 1 1 2 2\n1 1 1 2 2\n1 1 1 2 2\n''') == \"2\"\nassert solution('''\n5 1 1 1 1 1\n1 1 1 2 2\n1 1 1 2 2\n1 1 1 2 2\n1 1 1 2 2\n1 1 1 2 2\n''') == \"5\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"5 1 12 4\") == \"2\"\nassert solution(\"5 5 9 10\") == \"1\"\nassert solution(\"1 6 4 10\") == \"2\"\nassert solution(\"2 11 7 14\") == \"3\"\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 8\n2 1 4 5\n5 1 12 4\n5 5 9 10\n1 6 4 10\n2 11 7 14''') == '4'\n\"\"\"\nThe main idea is to expand all rooms with a large distance from the phaser beam, and then check if any room is touching the phaser beam, and if it is, return it.\n\nAnother approach is to expand the phaser beam in the diagonal directions, and if any room is touching the phaser beam, return it.\n\nThe problem can also be solved by expanding the room in a negative direction and checking if it is hitting the phaser beam, and if it is, return it.\n\nThe main idea here is to expand the phaser beam in all directions, and if any room is touching the phaser beam, return it. The idea is to expand the room in a negative direction and check if it is hitting the phaser beam, and if it is, return it.\n\nThe time complexity of the algorithm is $O(r + 2^n)$, where $n$ is the length of the phaser beam and $r$ is the number of rooms. The space complexity is $O(r)$.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1 4 5\") == \"4\"\nassert solution(\"5 1 12 4\") == \"2\"\nassert solution(\"5 5 9 10\") == \"3\"\nassert solution(\"1 6 4 10\") == \"1\"\nassert solution(\"2 11 7 14\") == \"3\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n\n\"\"\"\n\nfrom math import *\n\na, b, c = map(float, input().split())\nt1, t2, t3, t4 = map(int, input().split())\nn, k, r, s, l = map(int, input().split())"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '6.627020'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"99.99 99.99 9999.99\") == \"9.585073\"\nassert solution(\"99.99 999 999 999.99\") == \"9.585073\"\nassert solution(\"99.99 999 999 999.99\") == \"9.585073\"\nassert solution(\"99.99 999 999 999.99\") == \"9.585073\"\nassert solution(\"99.99 999 999 999.99\") == \"9.585073\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"9.585073\"\nprint(solution())\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n99.99 999.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n''') == '9.585073'\n''')"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\n\nassert solution('99 9 999 9999') == '9.585073'\n\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\") == \"9.585073\"\nassert solution(\"\"\"\n1\n1\n1\n1\n\"\"\") == \"4.502327\"\nassert solution(\"\"\"\n-9.99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\") == \"8.331007\"\nassert solution(\"\"\"\n9.99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\") == \"7.967839\"\nassert solution(\"\"\"\n9.99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\n\"\"\") == \"7.967839\"\n"
    },
    {
        "number": 3596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('-99.99 99.99 9999.99') == '9.585073'\nassert solution('99 9 999 9999') == '9.585073'\nassert solution('9 99 9 99 9') == '9.585073'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"20 30\") == \"12.74 127.83\"\nassert solution(\"20 20\") == \"impossible\""
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 20\") == \"impossible\"\nassert solution(\"30 20\") == \"impossible\"\nassert solution(\"2 10 20 2 24 18 28 10\") == \"impossible\"\nassert solution(\"10 2.2 1.1\") == \"impossible\"\nassert solution(\"20 4\") == \"12.74 127.83\""
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('20 30\\n2 10 20 2 24 18 28 10') == '12.74 127.83'\nassert solution('1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1') == '12.74 127.83'\nassert solution('100 100 100 100 100 100 100 100 100 100\\n0 0 0 0 0 0 0 0 0 0 0 0\\n0 0 0 0 0 0 0 0 0 0 0 0') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('20 50') == 'impossible'\nassert solution('20 50 40') == 'impossible'\nassert solution('30 80') == '12.74 127.83'\nassert solution('60 40 30') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n2 1 5 2 3') == '1.74 1.87'\nassert solution('2 15\\n2 10 20 2 24 18 28 10') == '2.79 2.86'\nassert solution('20 10\\n2 10 20 2 24 18 28 10') == 'impossible'\nassert solution('10 10\\n2 10 20 2 24 18 28 10') == 'impossible'"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == 'impossible'\nassert solution(\"5 5\") == 'impossible'\nassert solution(\"4 10\") == '12.74'\nassert solution(\"4 20\") == '12.74'\nassert solution(\"10 10\") == '12.74'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('20 30') == '12.74 127.83'\nassert solution('1 10 20 2 24 18 28 10') == '12.74 127.83'\n\n---\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''20 30\n2 10 20 2 24 18 28 10\n''') == '12.74 127.83'\nassert solution('''20\n5 3\n1 0 5 1 0\n''') == 'impossible'\nassert solution('''20\n3 3\n1 0 5 1 0\n''') == 'impossible'\nassert solution('''15\n4 3\n1 0 3 1 0\n''') == '12.99 12.99'\nassert solution('''15\n3 3\n1 0 3 1 0\n''') == 'impossible'\n"
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 10 20 2 24 18 28 10') == '12.74 127.83'\nassert solution('30 20 10 2 24 18 28 10') == 'impossible'\nassert solution
    },
    {
        "number": 3597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"20 30\") == \"12.74 127.83\"\nassert solution(\"10 20 50 2 20 2 24 18 28 10\") == \"13.50 14.00\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\n110\n6\n''') == '0116'\nassert solution('''\n1\n110\n6\n''') == '0116'\nassert solution('''\n2\n0\n1\n''') == '11'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    1\n    1\n    \"\"\") == \"0116\"\n\nassert solution(\n    \"\"\"\n    2\n    1\n    1\n    \"\"\") == \"0116\"\n\nassert solution(\n    \"\"\"\n    2\n    1\n    1\n    \"\"\") == \"0116\"\n\nassert solution(\n    \"\"\"\n    2\n    1\n    1\n    1\n    1\n    1\n    1\n    \"\"\") == \"0116\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10\") == \"01011010\"\nassert solution(\"110\") == \"01011010\"\nassert solution(\"11110\") == \"01011010\"\nassert solution(\"1106\") == \"01011010\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n110\n6\nSample Input:\n2\n1\n2\nSample Output:\n2\n''') == '1106'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\n1\n12\n\"\"\") == \"0112\"\n\nassert solution(r\"\"\"\n2\n01\n\"\"\") == \"0\"\n\nassert solution(r\"\"\"\n3\n100\n1\n\"\"\") == \"00101\"\n\nassert solution(r\"\"\"\n3\n010\n100\n\"\"\") == \"0110101\"\n\nassert solution(r\"\"\"\n4\n01\n10\n00\n\"\"\") == \"0110101\""
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n110\n6\n\"\"\") == \"0116\"\n\nassert solution(\"\"\"\n1\n1101\n8\n\"\"\") == \"00010011\"\n\nassert solution(\"\"\"\n2\n120\n12\n\"\"\") == \"001200\"\n\nassert solution(\"\"\"\n2\n11100\n9\n\"\"\") == \"101091\"\n\nassert solution(\"\"\"\n2\n11001\n9\n\"\"\") == \"1100101\""
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5\n110\n11100\n6\n\"\"\") == \"016\"\nassert solution(\"\"\"\n7\n90\n81\n91\n1000\n1\n\"\"\") == \"0011\"\nassert solution(\"\"\"\n10\n81\n110\n1\n11100\n1\n\"\"\") == \"000110010\"\nassert solution(\"\"\"\n1000\n1\n11100\n1\n\"\"\") == \"10100101\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n110\\n6') == '0116'\nassert solution('6\\n110\\n2') == '0116'\nassert solution('3\\n110\\n2') == '0110'\nassert solution('8\\n110\\n2') == '0111'\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n1\n3\n2\n''') == '010', \"First\"\n\nassert solution('''\n2\n1\n3\n4\n2\n''') == '14', \"Second\"\n\nassert solution('''\n2\n8\n1\n7\n6\n''') == '0167', \"Third\"\n\nassert solution('''\n3\n8\n9\n1\n''') == '991', \"Fourth\"\n\nassert solution('''\n2\n8\n6\n''') == '112', \"Fifth\"\n"
    },
    {
        "number": 3598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n110\n110\n110\n110\n110\nSample Input 2:\n10\n816\n''') == '0016'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0 2 4\""
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"0 2 4\"\nassert solution(\"8 4\") == \"0 2 4 0 0\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"0 0 1\", \"Solution doesn't work\"\nassert solution(\"5 5\") == \"0 0 0 0 0\", \"Solution doesn't work\"\nassert solution(\"10 10\") == \"0 0 0 0 0 0 0 0 0 0 0 0\", \"Solution doesn't work\"\nassert solution(\"10 10\") == \"0 0 0 0 0 0 0 0 0 0 0 0\", \"Solution doesn't work\"\n\nThe Musicians\u2019 must always arrive on time and they can always arrive either at the same time or a different time.\n\nAll Musicians must have a break in the same time.\n\nThe Musicians never take more than two breaks at the same time.\n\nTwo Musicians can never come on at the same time, so the Musicians must arrive on time and the Musicians can arrive either at the same time or a different time.\n\nNote: The input data will be such that a solution, although not necessarily unique, will always exist.\n'''\n\n'''\nSample input\n10 10\n4 4 4\n4 4 4\n4 4 4\n1 2 2\n1 2 2\n1 2 2\n1 2 2\n2 2 2\n1 1 2\n1 2 2\n1 2 2\n1 1 2\nSample output\n0 1 2 0 0 0 0 0 0 0 0 0\n0 1 2 0 0 0 0 0 0 0 0 0\n0 1 2 0 0 0 0 0 0 0 0 0\n0 0 1 2 0 0 0 0 0 0 0 0\n0 0 0 1 2 0 0 0 0 0 0 0\n0 0 0 0 1 2 0 0 0 0 0 0\n0 0 0 0 0 1 2 0 0 0 0 0\n0 0 0 0 0 0 1 2 0 0 0 0\n0 0 0 0 0 0 0 0 1 2 0 0\n0 0 0 0 0 0 0 0 0 0 1 2\n'''\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 3') == '0 2 4'\nassert solution('16 3') == '0 3 5 6 7 9 11 13 15 16 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99'\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8 3\\n') == '0 2 4', \"Wrong\"\nassert solution('10 3\\n') == '1 5 10', \"Wrong\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2\") == \"2 2 1\"\nassert solution(\"6\\n5 2 1 3 4\") == \"0 1 1 2 1\"\nassert solution(\"10\\n5 2 1 3 4 5 6 8\") == \"0 1 1 2 1 2\"\nassert solution(\"12\\n2 3 1 3 4 5 6 8\") == \"0 1 1 1 1 1 1 1 1\"\nassert solution(\"8\\n6 2 1 3 4 5 6 8\") == \"0 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"0 2 4\"\n"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4\n4 4 4\n''') == '0 2 4'\nassert solution('''\n20 4\n7 7 7\n''') == '0 3 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '2 3 4'"
    },
    {
        "number": 3599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n7 6\n8 7 8''') == '4 4 4'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"impossible\"\nassert solution(\"6\") == \"possible\"\nassert solution(\"4\") == \"possible\"\nassert solution(\"100000\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n4\n4\n1 2\n2 1\n3 1\n1 2\n''') == 'impossible'\nassert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'impossible'\nassert solution('''\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n''') == 'possible'\nassert solution('''\n6\n7\n1 3\n3 2\n4 1 5\n1 2\n2 3\n3 1\n2 4\n1 4\n3 5\n4 1\n1 4\n''') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n\"\"\"\n) == \"impossible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n8\\n7\\n3 1 3 5\\n1 2') == 'impossible'\nassert solution('3\\n4\\n3 1 3 5\\n1 2\\n3 2') == 'impossible'\nassert solution('3\\n4\\n3 1 3 5\\n1 2\\n3 2\\n2 5') == 'possible'\nassert solution('3\\n4\\n3 1 3 5\\n1 2\\n3 2\\n3 5') == 'possible'\nassert solution('3\\n4\\n3 1 3 5\\n1 2\\n3 2\\n5 1') == 'impossible'\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"7\") == \"possible\"\nassert solution(\"7 0 0 4\") == \"impossible\"\nassert solution(\"10 5 5 4 7 2 5 6 1 3\") == \"possible\"\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"3\") == \"impossible\"\nassert solution(\"4\") == \"possible\"\n\n\"\"\"\nimport itertools\nimport collections\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"impossible\"\nassert solution(\"5\") == \"impossible\""
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n7\n2 2 4\n3 1 3 5\n1 2\n2 1 5\n4 2 6 4 7\n2 5 7\n2 6 5\n    ''') == 'impossible'\nassert solution('''4\n10\n4 1 2\n4 1 3\n4 2 3\n4 2 4\n4 2 5\n4 2 6\n4 3 6\n4 4 5\n4 4 6\n4 5 6\nSample Output:\nimpossible\n"
    },
    {
        "number": 3600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n7\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\nassert solution(\"5\\n5\\n2 2 4\\n3 1 3 5\\n1 2\\n2 1 5\\n4 2 6 4 7\\n2 5 7\\n2 6 5\\n\") == \"impossible\"\nassert solution(\"10\\n100\\n1 2\\n1 2 1 3\\n1 2\\n1 2 5\\n2 2 3 4 5\\n3 2\\n2 2 5\\n1 3\\n1 2\\n1 1 1 2\\n1 2\\n1 1 5\\n1 1\\n\") == \"impossible\"\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 0\\n0 10\") == \"4.00000\"\nassert solution(\"2\\n4 10\\n4 0\") == \"impossible\""
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '4.00000'\nassert solution('2 10') == '4.00000'\nassert solution('2 4 10') == 'Impossible'\nassert solution('2 4 0') == 'Impossible'\nassert solution('2 4 10') == '4.00000'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0') == '4.00000'\nprint(solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0'))"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '4.00000'\nassert solution('2 1') == '4.00000'\nassert solution('2 0 0') == '4.00000'\nassert solution('2 10 0') == '4.00000'\nassert solution('2 4 10') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 0\\n1 0 1\") == \"impossible\"\nassert solution(\"3\\n0 0\\n0 10\\n2 0\") == \"3.00000\"\nassert solution(\"3\\n4 10\\n4 0\\n2 10\\n1 0\") == \"3.00000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0 0\\n0 10\\n2\\n4 10\\n4 0\\n') == '4.00000'\nassert solution('2\\n0 0\\n0 10\\n2\\n4 10\\n4 0\\n') == 'impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n'''\n0 0\n0 10\n2\n4 10\n4 0\n'''\n) == '4.00000'\n\nassert solution(\n'''\n5\n1 2\n1 1\n2 1\n2 2\n3 2\n'''\n) == '3.00000'\n\nassert solution(\n'''\n1\n1\n1\n1\n1\n'''\n) == '2.00000'\n\nassert solution(\n'''\n1\n1\n1\n1\n1\n'''\n) == 'impossible'\n\nassert solution(\n'''\n2\n3\n1 2\n3 1\n'''\n) == 'impossible'"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n0 0\n0 10\n2\n4 10\n4 0\n''') == '4.00000'\n"
    },
    {
        "number": 3601,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n0 0\\n0 10\\n2') == '4.00000'\nassert solution('2\\n0 0\\n0 10\\n2') == 'impossible'\nassert solution('2\\n0 0\\n0 10\\n2') == 'impossible'"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5 5 6\n1 2\n2 5\n1 4\n4 2\n5 4\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n5 5 6\n1 2\n2 5\n1 4\n4 2\n5 4\n5 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1', 'Failed: First'\nassert solution('''\n10 10 10\n10 1 2\n2 9 1\n3 6 5\n6 1 7\n8 4 2\n8 9 5\n7 5 6\n6 9 4\n5 5 7\n9 4 6\n''') == '0', 'Failed: Second'\nassert solution('''\n8 6 6\n6 5 3\n6 6 8\n1 4 2\n2 1 5\n3 7 4\n4 4 6\n5 7 6\n6 7 8\n''') == '1', 'Failed: Third'\nassert solution('''\n3 3 3\n1 2\n2 1\n3 2\n3 2\n2 2\n1 1\n''') == '0', 'Failed: Fourth'\nassert solution('''\n5 5\n2 2\n3 4\n4 2\n1 1\n3 4\n''') == '1', 'Failed: Fifth'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"1\", \"Empty\"\nassert solution(\"3 2 5\") == \"1\"\nassert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n\") == \"0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n1 3\n3 1\n''') == \"1\"\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\nSample Output:\n0\n''') == \"0\"\n\n'''\n\n'''\nimport math\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1\", \"Should return 1\"\nassert solution() == \"0\", \"Should return 0\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3 5 8\n1 1\n1 3\n3 2\n2 3\n2 4\n3 1\n3 4\n4 4\n5 3\n5 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 2 5\\n1 1\\n1 3\\n3 1\\n3 3\\n2 2\\n\") == \"1\""
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\"\"\") == \"1\"\n\nassert solution(\"\"\"3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\"\"\") == \"0\"\n\nassert solution(\"\"\"4 5 2\n3 1\n2 1\n2 3\n4 2\n2 2\"\"\") == \"0\"\n\nassert solution(\"\"\"7 10 5\n8 1\n4 3\n1 4\n2 1\n2 3\n1 5\n5 2\n3 4\n4 3\n5 5\"\"\") == \"1\"\n"
    },
    {
        "number": 3602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '1'\nassert solution('''\n3 2 5\n1 1\n1 3\n3 1\n3 3\n2 2\n''') == '0'\n''')\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 6\") == \"3 1 2 4\"\nassert solution(\"6 3\") == \"3 1 0 2 4\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4'\n\nassert solution('''\n5 4\n0 1\n1 2\n1 3\n2 3\n0 1\n0 2\n0 3\n''') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"5 3\"\nassert solution(\"5 3\") == \"1 0\"\nassert solution(\"8 9\") == \"8 9\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == \"3 1 0 2 4 3\"\nassert solution(\"5 7\") == \"5 7\"\nassert solution(\"5 8\") == \"5 4\"\nassert solution(\"5 9\") == \"5 4\"\nassert solution(\"6 7\") == \"7 5\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"5 3\"\nassert solution(\"1 5\") == \"1 0\"\nassert solution(\"0 1\") == \"2 4\"\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '3 2\\n1 0\\n4 3'\nassert solution('5 6\\n0 1\\n0 2\\n1 3\\n2 3\\n1 2\\n4 3') == '3 2\\n1 0\\n2 4\\n4 3'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == 'impossible'\n\nassert solution() == '4 3'\n\nassert solution() == '3 1'"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3\\n1 0\\n2 4\\n'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '5 3'\n\nassert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == '1 0'\n\nassert solution('''5 6\n0 1\n0 2\n1 3\n2 3\n1 2\n4 3\n''') == 'impossible'\n\nassert solution('''5 6\n0 1\n0 2\n2 3\n2 3\n1 2\n4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5 6\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 2\\n'\n    '4 3'\n) == '5 3\\n1 0\\n2 4'\n\nassert solution(\n    '5 2\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 2\\n'\n    '4 3'\n) == 'impossible'\n\nassert solution(\n    '3 3\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 2\\n'\n    '4 3'\n) == '3 1\\n1 0\\n3 2\\n2 3'\n\nassert solution(\n    '1 1\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 2\\n'\n    '4 3'\n) == 'impossible'\n\nassert solution(\n    '2 4\\n'\n    '0 1\\n'\n    '0 2\\n'\n    '1 3\\n'\n    '2 3\\n'\n    '1 2\\n'\n    '4 3'\n) == 'impossible'"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nassert solution('4 1\\n0 0\\n0 1\\n1 0\\n1 1') == '2'\nprint('SUCCESS')\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 5\n1 0\n1 1\n0 0\n0 1\n1 0''') == '2\nassert solution('''5 2\n1 0\n1 1\n0 0\n0 1\n1 0''') == '1\nassert solution('''5 3\n1 0\n1 1\n0 0\n0 1\n1 0''') == '2\nassert solution('''4 5\n1 0\n1 1\n0 0\n0 1\n1 0''') == '3\nassert solution('''4 5\n1 0\n1 1\n0 0\n0 1\n1 0''') == '2\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\\n1 2'"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1') == '2 1'\nassert solution('2 2') == '1'\nassert solution('3 2') == '2'\nassert solution('2 1 2') == '2'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\\n0 0\\n0 1\\n1 0\\n1 1\") == \"2\"\nassert solution(\"3 1\\n0 0\\n0 1\\n1 0\") == \"1\"\nassert solution(\"2 1\\n0 0\\n1 0\") == \"1\""
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\\n1 2'\nassert solution('''\n4 1\n0 0\n0 1\n1 0\n1 1\n''') == '2\\n1 2'\n\n\"\"\"\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 1') == '2'\nassert solution('7 1') == '1 2 3 4 5 6'\nassert solution('10 1') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '2'\nassert solution('4 1') == '2'\nassert solution('1 1') == '1 2'\nassert solution('3 2') == '1 2'\nassert solution('6 3') == '1 2 3 4 5 6'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 1') == '2'\nassert solution('2 4') == '2'\nassert solution('1 1') == '1'\nassert solution('3 5') == '1'\nassert solution('0 0') == '1'\n"
    },
    {
        "number": 3604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"2\\n1 2\""
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 2\\n1 3 5 7 9 11 13 15 17 16\") == \"1\"\nassert solution(\"10 2\\n
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"6 10\") == \"1\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 2\n1 3 5 7 9 11 13 15 17 16\n''') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16') == '1'\nassert solution('1000000000 2\\n
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3 5 7 9 11 13 15 17 16\") == \"3\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n10 2\n1 3 5 7 9 11 13 15 17 16\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 2\\n1 3 5 7 9 11 13 15 17 16\\n') == '1'\nassert solution('6 10\\n1 3 9 13 15 7\\n') == '2'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 2') == '1'\n"
    },
    {
        "number": 3605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('10 2') == '1'\nassert solution('20 4') == '1'\n\n'''\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n7 5\nACDBB\n5 6\n8 9\n4 13\n1 10\n7 4\n10 9\n3 7\n\"\"\") == \"7 4\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('7 5\\nACDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\nassert solution('4 5\\nABAD\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7') == '7 4'\n\"\"\"\nfrom itertools import permutations\nn, k = map(int, input().split())\na = list(input())\nc = 0\nfor i in permutations(a):\n    x, y = 0, 0\n    for j in i:\n        if j == 'A':\n            x += 1\n        elif j == 'B':\n            x -= 1\n        elif j == 'C':\n            y += 1\n        else:\n            y -= 1\n        if x < 0 or y < 0:\n            c += 1\n            break\n    else:\n        if c == k:\n            print(x, y)\n        c = 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 5') == '7 4'\nassert solution('5 6') == '8 9'\nassert solution('8 9') == '4 13'\nassert solution('4 13') == '1 10'\nassert solution('1 10') == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([7,5], [\"ACDBB\", \"5 6\", \"8 9\", \"4 13\", \"1 10\", \"7 4\", \"10 9\", \"3 7\"]) == \"7 4\"\nassert solution([5,6], [\"ACDBB\", \"5 6\", \"8 9\", \"4 13\", \"1 10\", \"7 4\", \"10 9\", \"3 7\"]) == \"7 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\nABDBB\\n5 6\\n8 9\\n4 13\\n1 10\\n7 4\\n10 9\\n3 7\") == \"7 4\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4\nBAD\n2 5\n3 6\n1 7\n6 4\n\"\"\") == \"\"\"4 4\"\"\"\nassert solution(\"\"\"\n3\nBAD\n1 2\n6 7\n\"\"\") == \"\"\"1 1\"\"\"\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([3, 1, 2]) == '7 4'\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6\\nACDBB\\n5 6') == '7 4'\nassert solution('6 6\\nCBDBC\\n1 2\\n5 1\\n1 2\\n5 1\\n1 2\\n5 1\\n1 2\\n') == '5 2'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str):\n        n = int(stdin.split()[0])\n        k = int(stdin.split()[1])\n        print(n, k)\n        solution = None\n        for _ in range(k):\n            if stdin.split()[_] == 'A':\n                solution = 'A'\n            if stdin.split()[_] == 'B':\n                solution = 'B'\n            if stdin.split()[_] == 'C':\n                solution = 'C'\n            if stdin.split()[_] == 'D':\n                solution = 'D'\n        print(solution)\n        return solution\n"
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7 4\""
    },
    {
        "number": 3606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '7 5\\n'\n    'ACDBB'\n) == '7 4'\n\nassert solution(\n    '5 6\\n'\n    '8 9'\n) == '8 9'\n\nassert solution(\n    '4 13\\n'\n    '1 10'\n) == '1 10'\n\nassert solution(\n    '7 4\\n'\n    '10 9'\n) == '10 9'\n\nassert solution(\n    '10 9\\n'\n    '3 7'\n) == '10 9'"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT 'HELLO THERE '\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN 'DONE'\") == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nprint(solution(input()))\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE\\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nprint(\"YOUR CODE SUCCEEDS!\")\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n\nTest Input 1\ninp = \"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\"\nout = \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\nassert solution(inp) == out\nTest Input 2\ninp = \"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\"\nout = \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\"\nassert solution(inp) == out\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \"\n\"\\\"HELLO THERE\\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\""
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"\\n') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \"\n    \"\\\"HELLO THERE \\\"\"\n    \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\") == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 1\\n20 PRINTLN A\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 1\\n20 PRINT \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 1\\n20 PRINTLN A\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \") == \"HELLO THERE 1\"\nassert solution(\"10 LET A = 1\\n20 PRINT \") == \"HELLO THERE 1\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('10 LET A = 1\\n20 PRINT \"HELLO THERE \"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \"DONE\"') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 LET A = 1\\n20 PRINT \\\"HELLO THERE \\\"\\n30 PRINTLN A\\n40 LET A = A + 1\\n50 IF A <= 5 THEN GOTO 20\\n60 PRINTLN \\\"DONE\\\"\\n\") == \"HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE\"\n"
    },
    {
        "number": 3607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\nassert solution('''\n10 LET A = 1\n20 PRINT \"HELLO THERE \"\n30 PRINTLN A\n40 LET A = A + 1\n50 IF A <= 5 THEN GOTO 20\n60 PRINTLN \"DONE\"\n''') == 'HELLO THERE 1\\nHELLO THERE 2\\nHELLO THERE 3\\nHELLO THERE 4\\nHELLO THERE 5\\nDONE'\n''')\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 1\n0 1\n''') == '3'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 0 1\\n0 1') == '3'\nassert solution('2\\n1 0\\n0') == '2'\nassert solution('5\\n0 1 1 1 2\\n2 1 1') == '1'"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 0 1\") == \"3\"\nassert solution(\"3 1 1\") == \"2\"\nassert solution(\"3 2 1\") == \"1\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n3 0 1\n0 1\n''') == '3'\nassert solution('''\n5\n3 0 1 2\n0 1\n1 3\n2 2\n1 2\n''') == '6'\nassert solution('''\n10\n3 0 1 2 3 4 5 6 7 8 9\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n396 397\n397 398\n398 399\n399 400\n400 401\n401 402\n402 403\n403 404\n404 405\n405 406\n406 407\n407 408\n408 409\n409 410\n410 411\n411 412\n412 413\n413 414\n414 415\n415 416\n416 417\n417 418\n418 419\n419 420\n420 421\n421 422\n422 423\n423 424\n424 425\n425 426\n426 427\n427 428\n428 429\n429 430\n430 431\n431 432\n432 433\n433 434\n434 435\n435 436\n436 437\n437 438\n438 439\n439 440\n440 441\n441 442\n442 443\n443 444\n444 445\n445 446\n446 447\n447 448\n448 449\n449 450\n450 451\n451 452\n452 453\n453 454\n454 455\n455 456\n456 457\n457 458\n458 459\n459 460\n460 461\n461 462\n462 463\n463 464\n464 465\n464 466\n465 467\n466 468\n467 469\n468 470\n470 471\n471 472\n472 473\n473 474\n474 475\n475 476\n476 477\n477 478\n478 479\n479 480\n480 481\n481 482\n482 483\n483 484\n484 485\n485 486\n486 487\n487 488\n488 489\n489 490\n490 491\n491 492\n492 493\n493 494\n494 495\n495 496\n496 497\n497 498\n498 499\n499 500\n500 501\n501 502\n502 503\n503 504\n504 505"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4\") == \"7\"\nassert solution(\"1 2 3 4 5\") == \"6\"\nassert solution(\"1 2 3 4 5 6\") == \"5\"\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 0 1 2 3') == '12'\n\nSample Input:\n4\n3 3 1 2\n3 3 1 2\n1 1 1\nSample Output:\n8\n'''\n\n'''\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0 1\\n0 1') == '3'\nassert solution('3 0 1\\n0 2') == '2'\nassert solution('3 1 2\\n0 1') == '0'\nassert solution('3 1 2\\n0 2') == '1'\n"
    },
    {
        "number": 3608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '4'\nassert solution('10') == '8'"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'RLRRRLRLRL'\nassert solution('9\\n1 2\\n2 6\\n6 4\\n4 7\\n7 4\\n8 1\\n8 1\\n') == 'RLRRRRRRRR'\nassert solution('1\\n2\\n') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == 'LLRRRRLL'\nassert solution('2 1\\n1 2\\n1 3\\n1 4\\n3 5\\n5 6\\n4 7\\n7 8\\n6 9\\n9 10\\n8 11\\n5 12\\n4 13\\n3 14\\n2 15\\n') == 'LLRRRRLL'\nassert solution('1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6\\n2 7\\n2 8\\n3 9\\n3 10\\n4 11\\n4 12\\n5 13\\n5 14\\n5 15\\n') == 'LLRRRRLL'\nassert solution('1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6\\n2 7\\n2 8\\n3 9\\n3 10\\n4 11\\n4 12\\n5 13\\n5 14\\n5 15\\n') == 'LLRRRRLL'\nassert solution('1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6\\n2 7\\n2 8\\n3 9\\n3 10\\n4 11\\n4 12\\n5 13\\n5 14\\n5 15\\n') == 'LLRRRRLL'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    2\n    1 2\n    2 5\n    2 3\n    1 3\n    3 5\n    4 5\n    3 4\n    1 3\n    \"\"\"\n) == \"LLRRRRLL\"\nassert solution(\n    \"\"\"\n    5\n    1 2\n    2 5\n    2 3\n    1 3\n    3 5\n    4 5\n    3 4\n    1 3\n    \"\"\"\n) == \"LLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2\\n2 5') == 'LRLLRRLL'\nassert solution('2\\n1 2\\n2 5\\n3 5\\n3 4\\n1 3\\n3 5\\n4 5') == 'LRLLRRRLR'\nassert solution('5\\n1 2\\n2 3\\n3 5\\n4 5\\n3 4\\n1 3\\n3 5\\n4 5') == 'impossible'\nassert solution('1\\n3') == 'impossible'\nassert solution('1\\n1\\n1') == 'impossible'\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\n\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\\n') == 'LLRRRRLL'\n\nassert solution('4\\n1 2\\n2 3\\n3 4\\n1 3\\n3 4\\n') == 'impossible'\n\nassert solution('3\\n1 2\\n2 3\\n') == 'impossible'\n\nassert solution('3\\n1 2\\n2 3\\n') == 'RRRR'"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"LLRRRRLL\"\nassert solution(\"5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3\") == \"RLRRRRLL\"\nassert solution(\"3\\n3 4\\n1 3\\n1 3\") == \"impossible\"\nassert solution(\"3\\n1 3\\n3 4\\n1 3\") == \"RLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2') == 'LLRRRRLL', \"Failed test 1\"\nassert solution('5\\n1 2\\n2 5') == 'LLRRRRLL', \"Failed test 2\"\nassert solution('5\\n1 2\\n2 5\\n2 3') == 'LLRRRRLL', \"Failed test 3\"\nassert solution('5\\n1 2\\n2 5\\n2 3\\n1 3') == 'RRLLRRRRLL', \"Failed test 4\"\nassert solution('5\\n1 2\\n2 3\\n3 5\\n4 5\\n3 4') == 'RRRRRRRRRRLL', \"Failed test 5\"\n\"\"\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n\"\"\") == \"LLRRRRLL\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n2 5\\n2 3\\n1 3\\n3 5\\n4 5\\n3 4\\n1 3') == \"RLR\"\n\nassert solution('3\\n1 2\\n2 5\\n2 3\\n1 3') == \"RLRRLR\"\n"
    },
    {
        "number": 3609,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRRRRLL', 'First'\nassert solution('''\n5\n1 2\n2 5\n2 3\n1 3\n3 5\n4 5\n3 4\n1 3\n''') == 'LLRLRRLR', 'Second'\n'''\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1009 2011\n1017 2011\n''') == '12011'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2\n1009 2011\n1017 2011\n\"\"\") == \"1\"\nassert solution(\"\"\"\n10\n2999 2999\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6\n81991 81991\n91993 91993\n102030 20320\n121990 121990\n121993 121993\n121996 121996\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\nassert solution('3\\n1009 2011\\n1017 2011\\n1022 2012') == '2\\n2011\\n2012'\nassert solution('3\\n1009 2011\\n1017 2011\\n1022 2012\\n1028 2013') == '3\\n2011\\n2012\\n2013'\nassert solution('3\\n1009 2011\\n1017 2011\\n1022 2012\\n1028 2013\\n1039 2014') == '2\\n2011\\n2012\\n2013\\n2014'\nassert solution('3\\n1009 2011\\n1017 2011\\n1022 2012\\n1028 2013\\n1039 2014\\n1061 2015') == '2\\n2011\\n2012\\n2013\\n2014\\n2015'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n1009 2011\\n1017 2011\"\n    ) == \"1\\n2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1009 2011\\n1017 2011\") == \"1\\n2011\"\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1009 2011\\n1017 2011') == '1\\n2011'\n'''\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n1009 2011\n1017 2011\n''') == '1'\nassert solution('''\n2\n1001 2010\n1002 2010\n''') == '1'\nassert solution('''\n2\n2001 2011\n2002 2011\n''') == '2'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1009 2011\n1017 2011\n''') == '1'\nassert solution('''\n2\n1009 2011\n1017 2012\n''') == '1'\nassert solution('''\n2\n1009 2011\n1017 2012\n''') == '2'\nassert solution('''\n2\n1001 2012\n1003 2013\n''') == '2'\nassert solution('''\n2\n1001 2012\n1003 2013\n''') == '1'\n"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n1009 2011\n1017 2011\n''') == '1'\n\nassert solution('''\n2\n1009 2011\n1017 2011\n''') == '2'\n\nassert solution('''\n3\n1009 2011\n1017 2011\n''') == '2'\n\nassert solution('''\n4\n1009 2011\n1017 2011\n''') == '3'\n\nassert solution('''\n5\n1009 2011\n1017 2011\n''') == '3'"
    },
    {
        "number": 3610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\\n2011\"\nassert solution(\"3\") == \"1\\n1001\"\nassert solution(\"4\") == \"1\\n2001\\n1001\"\nassert solution(\"5\") == \"1\\n2001\\n1001\\n2001\\n1001\"\nassert solution(\"6\") == \"1\\n2001\\n1001\\n2001\\n1001\\n2001\\n1001\\n2001\\n1001\\n2001\\n1001\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\nassert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 2\n''') == '0 2'\nassert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 1\n''') == '0 1'\nassert solution('''\n3 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 2\n''') == '0 2'\nassert solution('''\n3 2\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 1\n''') == '0 1'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 4') == '0 3'\n\"\"\"\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n0\\n1\\n') == '1 2'\nprint('all tests passed')\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 4') == '0 3'\nassert solution('100 100') == '0 3'\nassert solution('10000 10000') == '1 3'\n\n--Input sample 3--\n\n5\n100\n0 1\n0 2\n1 3\n2 4\n3 5\n0 3\n0 4\n1 4\n\n--Output sample 3--\n\n0 2\n0 3\n1 4\n\nSample Input:\n8 5\n0 1 100\n0 2 100\n1 3 100\n2 4 100\n3 5 100\n4 6 100\n5 7 100\n6 8 100\n0 3\n0 4\n1 4\n2 4\n3 5\n4 5\n5 6\n6 7\n0 5\n0 6\n1 6\n2 6\n3 6\n4 6\n5 6\n\n--Output sample 3--\n\n0 3\n0 4\n1 4\n2 4\n3 5\n4 5\n\n\"\"\"\n\nfrom math import sqrt\nfrom heapq import heappush, heappop"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4') == '0 1 2 3'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 4') == '0 3'\nassert solution('1 1') == '0 1'\nassert solution('6 6') == '0 2 4 5 6'\n"
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"Input cannot be empty\"\nassert solution(\"5 4\") == \"0 3\", \"Should be 0 3\""
    },
    {
        "number": 3611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 4\n0 1 100\n0 2 100\n1 3 100\n2 3 100\n0 3\n''') == '0 3'\n\nassert solution('''\n5 6\n1 0 2 100\n2 3 4 100\n0 3 6 100\n2 4 5 100\n4 4 5 100\n2 1 4 100\n0 0 3 100\n3 4 5 100\n''') == '0 1 2 3 4'"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3.0 10.0\") == \"20\"\nassert solution(\"4.0 10.0\") == \"20\"\nassert solution(\"6.0 10.0\") == \"10\"\nassert solution(\"8.0 10.0\") == \"10\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"20.0\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('5.0 100.0') == '80'\nassert solution('1.0 1000.0') == '0'\n\"\"\"\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2.0 10.0') == '20'\nassert solution('3 3 0 0') == '10'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n\nassert solution('''4.0 10.0\n0 3 0 0\n0 1 0\n1 5 3\n0 2 3''') == '7.0000000000000004'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"20.0\"\n\n----"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''\n2.0 20.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0\n''') == '20'\nassert solution('''\n1.0 10.0\n1 1 0 0\n1 0 0\nSample Output:\n2.0\n''') == '1.0'\nassert solution('''\n0.5 10.0\n0 0 0 0\n0 1 0 0\nSample Output:\n0.0\n''') == '0.0'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '20.0'\n\nassert solution('''2.0 10.0\n3 3 0 0\n2001 1000 100\n1001 10000 200\n100 0 0''') == '21.0'\n"
    },
    {
        "number": 3612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"20\""
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n0 2 3 4 5\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nassert solution('7\\n0 2 3 4 5 6 7\\n0 1 3 4 5 6 7\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\nassert solution('''\n3\n0 1 2\n1 2 3\n1 3 4\n1 4 5\n1 5 6\n1 6 7\n1 7 8\n1 8 9\n1 9 10\n2 3 4 5 6\n''') == '4'\nassert solution('''\n3\n0 1 2\n1 2 3\n1 3 4\n1 4 5\n1 5 6\n1 6 7\n1 7 8\n1 8 9\n1 9 10\n2 3 4 5 6\n''') == '4'\nassert solution('''\n5\n0 1 2 3 4\n0 5 1 2 3 4\n0 6 1 2 3 4\n0 7 1 2 3 4\n1 6 7 1 2 3 4\n1 7 7 2 2 3 4\n1 8 7 2 2 3 4\n1 9 7 2 2 3 4\n2 8 7 2 2 3 4\n2 9 7 2 2 3 4\n3 8 7 2 2 3 4\n3 9 7 2 2 3 4\n4 8 7 2 2 3 4\n4 9 7 2 2 3 4\n5 6 7 2 2 3 4\n5 7 7 2 2 3 4\n5 8 7 2 2 3 4\n5 9 7 2 2 3 4\n6 7 7 2 2 3 4\n6 8 7 2 2 3 4\n6 9 7 2 2 3 4\n7 9 7 2 2 3 4\n7 10 7 2 2 3 4\n7 11 7 2 2 3 4\n8 10 7 2 2 3 4\n8 11 7 2 2 3 4\n9 10 7 2 2 3 4\n9 11 7 2 2 3 4\n10 11 7 2 2 3 4\n11 11 7 2 2 3 4\n''') == '3'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n\") == \"4\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == \"4\"\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == \"2\"\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == \"4\"\nassert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == \"4\"\nassert solution('''\n6\n0 1 2 3 4 5 6\n0 2 1 3 4 5 6\n0 3 1 4 5 2 6\n0 4 5 1 2 3 6\n0 5 2 3 1 4 6\n0 6 4 3 1 2 5\n''') == \"4\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '4'\nassert solution('6 1 2 3 4 5 6') == '4'\nassert solution('6 1 2 3 4 5 6 1') == '3'\nassert solution('6 1 2 3 4 5 6 1 1') == '2'\nassert solution('6 1 2 3 4 5 6 1 1 1') == '1'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5\n''') == '4'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1 1 2 3 4'\nassert solution('10') == '1 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3613,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n0 2 3 4 5 6\\n0 1 3 4 5 6\\n1 6 5 4 2 1\\n2 6 5 3 2 1\\n1 1 2 3 4 6\\n2 1 2 3 4 5\\n') == \"4\"\nprint(solution('''6\n0 2 3 4 5 6\n0 1 3 4 5 6\n1 6 5 4 2 1\n2 6 5 3 2 1\n1 1 2 3 4 6\n2 1 2 3 4 5'''))\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n5 6 7') == '4'"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n\"\"\") == \"4\"\nassert solution(\"\"\"\n1\n1\n1\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n2 3 4 5 6\n3 4 5 6 7\n4 5 6 7 8\n5 6 7 8 9\n\"\"\") == \"8\"\nassert solution(\"\"\"\n3\n1 2 3\n1 2 4\n1 3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 3\n1 2 4\n1 3 4\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\nassert solution([[1,1],[1,2,3,4],[2,3,4,5],[3,4,5,6],[4,5,6,7]]) == \"4\"\nassert solution([[1,1],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8]]) == \"4\"\nassert solution([[1,1],[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8,9]]) == \"5\"\nassert solution([[1,1],[1,2,3,4,5],[2,3,4,5,6,7,8],[3,4,5,6,7,8,9],[4,5,6,7,8,9,10]]) == \"8\"\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1\\n1 2 3 4\") == \"4\""
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6') == '4'\nassert solution('5\\n1 1\\n1 2 3 4\\n2 3 4 5\\n3 4 5 6\\n4 5 6 7') == '3'\n\"\"\"\n\nimport math\n\nN = int(input())\nR = int(input())\nC = int(input())\nflower = list(map(int, input().split()))"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n2 2 2 2 2 2\\n2 2 2 2\\n2 2 2 2') == '4'\nassert solution('6\\n3 3 3 3 3 3\\n3 3 3 3\\n3 3 3 3') == '3'\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n1 1\n1 2 3 4\n2 3 4 5\n3 4 5 6\n4 5 6 7\n\"\"\") == \"\"\"4\"\"\", \"Should be: 4\"\nassert solution(\"\"\"\n2\n1 1\n1 2 3 4\n2 3 4 5\n\"\"\") == \"\"\"5\"\"\", \"Should be: 5\"\nassert solution(\"\"\"\n3\n2 2 2\n1 1 1\n1 1 2\n\"\"\") == \"\"\"3\"\"\", \"Should be: 3\"\n\"\"\"[:-1]\n"
    },
    {
        "number": 3614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6', 'WRONG!'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nassert solution(\"10\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"11\"\nassert solution(\"3\\n1.0 1.0\\n1.0 3.1\\n3.1 3.1\") == \"4\"\nassert solution(\"9\\n1.0 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"10\"\nassert solution(\"1\\n1.0 1.0\\n1.0 3.1\\n3.1 3.1\") == \"2\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nassert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 3.1\") == \"6\"\nassert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 3.1\\n5.0 3.1\") == \"6\"\nassert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 3.1\\n5.0 3.1\\n5.0 3.1\\n5.0 3.1\") == \"6\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"5\"\n\"\"\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n''') == '6'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1') == '6'\nassert solution('10\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\\n5.0 1.0\\n1.0 5.0\\n5.0 3.1\\n1.0 6.0\\n5.0 4.2\\n1.0 7.0\\n4.2 7.0\\n4.2 6.0\\n7.0 3.1\\n7.0 6.0\\n4.2 5.0\\n7.0 2.0\\n1.0 7.0\\n7.0 4.2\\n2.0 4.2\\n2.0 7.0\\n7.0 3.1\\n1.0 2.0\\n1.0 5.0\\n5.0 1.0\\n4.2 3.1\\n4.2 5.0\\n2.0 7.0\\n2.0 1.0\\n2.0 4.2\\n1.0 2.0\\n4.2 3.1\\n3.1 5.0\\n4.2 5.0\\n4.2 7.0\\n3.1 7.0\\n5.0 4.2\\n3.1 2.0\\n2.0 4.2\\n2.0 6.0\\n3.1 3.1\\n4.2 5.0\\n4.2 2.0\\n1.0 2.0\\n5.0 3.1\\n4.2 5.0\\n4.2 2.0\\n4.2 4.2\\n4.2 1.0\\n5.0 4.2\\n2.0 7.0\\n1.0 5.0\\n1.0 1.0\\n2.0 5.0\\n5.0 1.0\\n7.0 3.1\\n7.0 2.0\\n4.2 2.0\\n2.0 5.0\\n2.0 3.1\\n1.0 2.0\\n4.2 3.1\\n3.1 4.2\\n4.2 4.2\\n4.2 1.0\\n4.2 3.1\\n7.0 3.1\\n7.0 6.0\\n7.0 4.2\\n2.0 5.0\\n2.0 1.0\\n2.0 3.1\\n2.0 2.0\\n2.0 7.0\\n3.1 4.2\\n3.1 7.0\\n7.0 4.2\\n7.0 2.0\\n7.0 6.0\\n6.0 3.1\\n6.0 4.2\\n6.0 1.0\\n6.0 5.0\\n6.0 7.0\\n2.0 4.2\\n3.1 7.0\\n3.1 1.0\\n2.0 2.0\\n1.0 7.0\\n7.0 3.1\\n5.0 2.0\\n7.0 4.2\\n2.0 3.1\\n3.1 3.1\\n1.0 1.0\\n5.0 5.0\\n3.1 3.1\\n4.2 5.0\\n4.2 3.1\\n1.0 5.0\\n1.0 3.1\\n5.0 1.0\\n7.0 2.0\\n4.2 7.0\\n4.2 6.0\\n7.0 4.2\\n4.2 5.0\\n7.0 5.0\\n5.0 2.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 6.0\\n7.0 6.0\\n7.0 6.0\\n7.0 6.0\\n7.0 5.0\\n7.0 4.2\\n7.0 3.1\\n4.2 7.0\\n4.2 6.0\\n5.0 1.0\\n2.0 7.0\\n2.0 7.0\\n4.2 5.0\\n4.2 4.2\\n4.2 2.0\\n4.2 3.1\\n5.0 4.2\\n5.0 7.0\\n5.0 6.0\\n5.0 3.1\\n4.2 5.0\\n4.2 1.0\\n4.2 3.1\\n5.0 2.0\\n2.0 7.0\\n2.0 2.0\\n2.0 4.2\\n4.2 3.1\\n7.0 7.0\\n7.0 6.0\\n7.0 5.0\\n7.0 4.2\\n7.0 5.0\\n4.2 7.0\\n4.2 7.0\\n4.2 7.0\\n4.2 7.0\\n4.2 7.0\\n5.0 1.0\\n2.0 3.1\\n2.0 5.0\\n7.0 4.2\\n7.0 5.0\\n7.0 7.0\\n7.0 7.0\\n2.0 3.1\\n2.0 2.0\\n4.2 2.0\\n7.0 4.2\\n7.0 2.0\\n2.0 3.1\\n3.1 2.0\\n1.0 4.2\\n1.0 5.0\\n3.1 1.0\\n3.1 3.1\\n4.2 4.2\\n4.2 5.0\\n7.0 4.2\\n7.0 5.0\\n4.2 1.0\\n5.0 2.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7.0 5.0\\n7"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1.0 1.0\\n3.1 1.0\\n1.0 3.1\\n3.1 3.1\\n4.2 3.1\") == \"6\"\nassert solution(\"2\\n1.1 1.1\\n3.3 1.1\\n1.1 3.3\\n3.3 3.3\") == \"2\"\nassert solution(\"4\\n1.1 1.1\\n3.3 1.1\\n1.1 3.3\\n3.3 3.3\\n5.5 3.3\") == \"4\"\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\nassert solution('''\n5\n2.6 2.6\n3.4 2.6\n2.7 2.7\n1.9 2.7\n2.4 2.4\n''') == '5'\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n''') == '6'\n\nassert solution('''\n10\n1.0 1.0\n3.1 1.0\n1.0 3.1\n3.1 3.1\n4.2 3.1\n5.0 3.1\n5.0 4.2\n6.1 3.1\n6.1 4.2\n7.0 3.1\n7.0 4.2\n8.0 3.1\n8.0 4.2\n9.0 3.1\n9.0 4.2\n10.0 3.1\n10.0 4.2\n11.0 3.1\n11.0 4.2\n12.0 3.1\n12.0 4.2\n13.0 3.1\n13.0 4.2\n14.0 3.1\n14.0 4.2\n15.0 3.1\n15.0 4.2\n16.0 3.1\n16.0 4.2\n''') == '18'\n\nimport os, sys\nfrom io import StringIO\nimport math\nfrom collections import Counter\nfrom decimal import Decimal\nimport inspect\nimport unittest\n"
    },
    {
        "number": 3615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n1\\n1\\n2') == '1\\n2'\nassert solution('1\\n1\\n1\\n1') == '2'\nassert solution('2\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2\n2\n''') == '5'\n\nassert solution('''\n3\n4\n3\n''') == '2'\n\nassert solution('''\n3\n2\n1\n''') == '3'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n2\\n2\\n') == '1'\nassert solution('2\\n2\\n2\\n2\\n') == '2'\nassert solution('3\\n2\\n2\\n2\\n') == '1'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n1') == '3'\nassert solution('2\\n3\\n2') == '6'\nassert solution('3\\n1\\n1') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n2\n2\n''') == '5'\nassert solution('''3\n2\n2\n''') == '7'\nassert solution('''10\n1\n10\n''') == '7'\nassert solution('''20\n1\n10\n''') == '7'\nassert solution('''23\n2\n10\n''') == '7'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n2\n2\n''') == '5'\nassert solution('''\n5\n1\n3\n4\n''') == '9'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n2\\n2\\n2') == '5'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n2\\n2') == '2'\nassert solution('3\\n2\\n2') == '3'\nassert solution('3\\n2\\n2\\n3') == '4'\nassert solution('3\\n3\\n2\\n3') == '3'"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2\\n2\\n2\\n') == '5'\nassert solution('3\\n2\\n2\\n3\\n') == '3'\nassert solution('3\\n2\\n2\\n3\\n') == '2'\nassert solution('3\\n2\\n3\\n') == '2'\n"
    },
    {
        "number": 3616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n1') == '1'\nassert solution('3\\n4\\n3') == '2'\nassert solution('5\\n3\\n4') == '4'\nassert solution('6\\n6\\n4') == '3'\nassert solution('7\\n1\\n2') == '4'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"1 1\"\nassert solution(\"5 2 2 1\") == \"3 2\"\nassert solution(\"1 3\") == \"1 1\""
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3\\n2 2 2 1') == '1 1'"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''\n1 3\n2 2 2 1\n''') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3') == '1 1'\nassert solution('2 2 2 1') == '2 2'\nassert solution('1000000') == '0 0'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\nassert solution('''\n1 2\n1 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 3\n2 2 2 1\n''') == '1 1'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('2\\n1 2\\n2 1') == '2 2'\nassert solution('2\\n1 5\\n3 3') == '2 6'\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 3\\n2 2 2 1\") == \"1 1\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"1 1\"\nassert solution(\"2 2 2 1\") == \"1 1\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"3 2\") == \"2 1\"\nassert solution(\"3 3\") == \"2 2\"\n"
    },
    {
        "number": 3617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 3\\n2 2 2 1') == '1 1'\nassert solution('2 5\\n2 2 2 1') == '1 1'\n\"\"\"\nimport math"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"8\"\nassert solution(\"11\") == \"19\"\nassert solution(\"21\") == \"23\"\nassert solution(\"22\") == \"18\"\nassert solution(\"23\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '9'\nassert solution('3') == '12'\nassert solution('4') == '6'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n') == '10'\nassert solution('1\\n') == '1'\nassert solution('1\\n') == '1'"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7\\n4') == '10'\nassert solution('1\\n10') == '10'\nassert solution('7\\n2') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '20'\nassert solution('3') == '26'\nassert solution('4') == '27'\nassert solution('5') == '28'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n''') == '1'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('8') == '3'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '10'\nassert solution('3') == '10'\nassert solution('10') == '10'\nassert solution('20') == '10'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '10'\nassert solution('2') == '7'\nassert solution('3') == '8'\nassert solution('4') == '8'\nassert solution('5') == '7'\n"
    },
    {
        "number": 3618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n140836449\n''') == '1'\nassert solution('''\n1000000\n''') == '14'\nassert solution('''\n4\n''') == '13'\nassert solution('''\n7\n''') == '1'\nassert solution('''\n55\n''') == '1'\n''') == '1'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n3 5\n2 1 1 1\n2 2 1\n1 1 1 1\n2 1 1 2\n1 2 1 2\n2 1 1 1\n1 1 1 1\n1 2 1 1\n2 1 1 1\n2 1 1 2\n1 1 1 1\n''') == '0.001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 2\n1000 1 0\n1 1000 1\n1 1000 1\n1 1000 1\nSample Input:\n10 3\n1000 1 0\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\nSample Output:\n0.00360000000000001\n''') == '0.00360000000000001'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n10 10\n0 1 0\n1 1 1\n1 100 1\n1 1 1\n1 100 1\n1 1 1\n1 100 1\n1 100 1\n1 100 1\n''') == '0.010'\n'''\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"1 2\") == \"0.0\"\nassert solution(\"1 2 3\") == \"0.0\"\nassert solution(\"1 2 3 4\") == \"0.0\"\nassert solution(\"1 2 3 4 5\") == \"0.0\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 2\n1000 1 0\n1 1000 1\n1 1000 1\n1 1000 1\n1 1000 1\nSample Input:\n2 2\n20 30\n40 50\nSample Output:\n0.0040\n\"\"\") == '0.0040'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"0.0014\"\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\nassert solution('''\n2 2\n1000 1 0\n1 1000 1\n''') == '0.01'\nassert solution('''\n1 1\n1 1\n''') == '0.01'\n'''\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n1000 1 0\n1 1000 1\n''') == '0.001'\n'''"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '0.001'\nassert solution('3 1 0 1 1000 1 1') == '0.005'\nassert solution('1 10') == '0.1'\nassert solution('5 10') == '0.1'\nassert solution('5 1 1 5 1 1') == '0.1'\n"
    },
    {
        "number": 3619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '0.001'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3 2 10000\n1 2\n2 3\n3 1\n''') == '0'\nassert solution('''\n5 3 2 10000\n1 2\n2 3\n3 1\n4 2\n''') == '1'\nassert solution('''\n5 3 2 10000\n1 2\n2 3\n3 1\n4 2\n5 4\n''') == '1'\nassert solution('''\n5 3 2 10000\n1 2\n2 3\n3 1\n4 2\n5 4\n''') == '2'\nassert solution('''\n5 3 2 10000\n1 2\n2 3\n3 1\n4 2\n5 4\n''') == '2'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3 2 10000\n1 2\n2 3\n3 1\n\"\"\") == \"0\""
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 2 10000\n1 2\n2 3\n3 1''') == '0'\nassert solution('''3 3 2 1\n1 2\n2 3\n3 1''') == '1'\nassert solution('''3 3 1\n1 2\n2 3\n3 1''') == '0'\n\nsolution('''\n12 4 2\n1 3\n2 4\n4 1\n3 5\n5 6\n6 4\n6 5\n7 4\n8 4\n9 7\n10 4\n11 7\n12 6\n13 4\n14 7\n15 5\n16 4\n17 7\n18 4\n19 6\n20 4\n21 3\n22 6\n23 6\n24 5\n25 6\n26 5\n27 6\n28 5\n29 5\n30 4\n31 5\n32 4\n33 4\n34 5\n35 4\n36 4\n37 4\n38 4\n39 4\n40 4\n41 4\n42 4\n43 4\n44 4\n45 4\n46 4\n47 4\n48 4\n49 4\n50 4\n51 4\n52 4\n53 4\n54 4\n55 4\n56 4\n57 4\n58 4\n59 4\n60 4\n61 4\n62 4\n63 4\n64 4\n65 4\n66 4\n67 4\n68 4\n69 4\n70 4\n71 4\n72 4\n73 4\n74 4\n75 4\n76 4\n77 4\n78 4\n79 4\n80 4\n81 4\n82 4\n83 4\n84 4\n85 4\n86 4\n87 4\n88 4\n89 4\n90 4\n91 4\n92 4\n93 4\n94 4\n95 4\n96 4\n97 4\n98 4\n99 4\n100 4\n101 4\n102 4\n103 4\n104 4\n105 4\n106 4\n107 4\n108 4\n109 4\n110 4\n111 4\n112 4\n113 4\n114 4\n115 4\n116 4\n117 4\n118 4\n119 4\n120 4\n121 4\n122 4\n123 4\n124 4\n125 4\n126 4\n127 4\n128 4\n129 4\n130 4\n131 4\n132 4\n133 4\n134 4\n135 4\n136 4\n137 4\n138 4\n139 4\n140 4\n141 4\n142 4\n143 4\n144 4\n145 4\n146 4\n147 4\n148 4\n149 4\n150 4\n151 4\n152 4\n153 4\n154 4\n155 4\n156 4\n157 4\n158 4\n159 4\n160 4\n161 4\n162 4\n163 4\n164 4\n165 4\n166 4\n167 4\n168 4\n169 4\n170 4\n171 4\n172 4\n173 4\n174 4\n175 4\n176 4\n177 4\n178 4\n179 4\n180 4\n181 4\n182 4\n183 4\n184 4\n185 4\n186 4\n187 4\n188 4\n189 4\n190 4\n191 4\n192 4\n193 4\n194 4\n195 4\n196 4\n197 4\n198 4\n199 4\n200 4\n201 4\n202 4\n203 4\n204 4\n205 4\n206 4\n207 4\n208 4\n209 4\n210 4\n211 4\n212 4\n213 4\n214 4\n215 4\n216 4\n217 4\n218 4\n219 4\n220 4\n221 4\n222 4\n223 4\n224 4\n225 4\n226 4\n227 4\n228 4\n229 4\n230 4\n231 4\n232 4\n233 4\n234 4\n235 4\n236 4\n237 4\n238 4\n239 4\n240 4\n241 4\n242 4\n243 4\n244 4\n245 4\n246 4\n247 4\n248 4\n249 4\n250 4\n251 4\n252 4\n253 4\n254 4\n255 4\n256 4\n257 4\n258 4\n259 4\n260 4\n261 4\n262 4\n263 4\n264 4\n265 4\n266 4\n267 4\n268 4\n269 4\n270 4\n271 4\n272 4\n273 4\n274 4\n275 4\n276 4\n277 4\n278 4\n279 4\n280 4\n281 4\n282 4\n283 4\n284 4\n285 4\n286 4\n287 4\n288 4\n289 4\n290 4\n291 4\n292 4\n293 4\n294 4\n295 4\n296 4\n297 4\n298 4\n299 4\n300 4\n301 4\n302 4\n303 4\n304 4\n305 4\n306 4\n307 4\n308 4\n309 4\n310 4\n311 4\n312 4\n313 4\n314 4\n315 4\n316 4\n317 4\n318 4\n319 4\n320 4\n321 4\n322 4\n323 4\n324 4\n325 4\n326 4\n327 4\n328 4\n329 4\n330 4\n331 4\n332 4\n333 4\n334 4\n335 4\n336 4\n337 4\n338 4\n339 4\n340 4\n341 4\n342 4\n343 4\n344 4\n345 4\n346 4\n347 4\n348 4\n349 4\n350 4\n351 4\n352 4\n353 4\n354 4\n355 4\n356 4\n357 4\n358 4\n359 4\n360 4\n361 4\n362 4\n363 4\n364 4\n365 4\n366 4\n367 4\n368 4\n369 4\n370 4\n371 4\n372 4\n373 4\n374 4\n375 4\n376 4\n377 4\n378 4\n379 4\n380 4\n381 4\n382 4\n383 4\n384 4\n385 4\n386 4\n387 4\n388 4\n389 4\n390 4\n391 4\n392 4\n393 4\n394 4\n395 4\n396 4\n397 4\n398 4\n399 4\n400 4\n401 4\n402 4\n403 4\n404 4\n405 4\n406 4\n407 4\n408 4\n409 4\n410 4\n411 4\n412 4\n413 4\n414 4\n415 4\n416 4\n417 4\n418 4\n419 4\n420 4\n421 4\n422 4\n423 4\n424 4\n425 4\n426 4\n427 4\n428 4\n429 4\n430 4\n431 4\n432 4\n433 4\n434 4\n435 4\n436 4\n437 4\n438 4\n439 4\n440 4\n441 4\n442 4\n443 4\n444 4\n445 4\n446 4\n447 4\n448 4\n449 4\n450 4\n451 4\n452 4\n453 4\n454 4\n455 4\n456 4\n457 4\n458 4\n459 4\n460 4\n461 4\n462 4\n463 4\n464 4\n465 4\n466 4\n467 4\n468 4\n469 4\n470 4\n471 4\n472 4\n473 4\n474 4\n475 4\n476 4\n477 4\n478 4\n479 4\n480 4\n481 4\n482 4\n483 4\n484 4\n485 4\n486 4\n487 4\n488 4\n489 4\n490 4\n491 4\n492 4\n493 4\n494 4\n495 4\n496 4\n497 4\n498 4\n499 4\n500 4\n501 4\n502 4\n503 4\n504 4\n505 4\n506 4\n507 4\n508 4\n509 4\n510 4\n511 4\n512 4\n513 4\n514 4\n515 4\n516 4\n517 4\n518 4\n519 4\n520 4\n521 4\n522 4\n523 4\n524 4\n525 4\n526"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3 2 10000') == '0'\nassert solution('5 2 3 1') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2 1\") == \"1\"\n\nimport math\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('5 5 3 2 100') == '16'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 5 3 2') == '0'"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n1\\n2\\n') == '0'\nassert solution('3\\n4\\n5\\n1\\n2\\n') == '5'\nassert solution('7\\n6\\n1\\n2\\n5\\n3\\n4\\n') == '7'\nassert solution('2\\n10\\n4\\n6\\n1\\n2\\n3\\n5\\n') == '6'\nassert solution('2\\n100\\n4\\n6\\n1\\n2\\n3\\n5\\n') == '2'\n"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 10000') == '0'\nassert solution('5 3 5 1000000') == '45'"
    },
    {
        "number": 3620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 3 2 10000\n1 2\n2 3\n3 1\n''') == '0'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n2 3 1\\n3 1 2') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '26'\n\"\"\"\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '26'\n\nSample Input:\n8\n0 1 1 1 1 2 2\n1 0 2 2 1 0 3\n1 2 0 3 1 0 0\n1 2 3 0 0 1 2\n1 3 1 0 0 0 0\n0 1 1 1 1 1 1 1\n1 0 2 2 1 0 0\n1 2 0 3 0 0 1\n1 2 3 0 0 1 2\n1 3 1 0 0 0 0\nSample Output:\n65\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1 1 1\\n1 0 2 2\\n1 2 0 3\\n1 2 3 0') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0 1 1\\n1 0 2\\n1 2 0\\n1 2 3\\n') == '26'"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '18'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n0 1 1\n1 0 2\n1 2 0\n''') == '26'\nassert solution('''\n3\n0 1 1\n1 0 2\n1 2 0\n''') == '26'\n"
    },
    {
        "number": 3621,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '26'\nassert solution('7') == '26'\n'''\n\nfrom collections import defaultdict\nfrom itertools import product\nimport math\nimport re\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**5)\n\nclass Solution:\n    def __init__(self):\n        self.graph = defaultdict(list)\n    \n    def update_graph(self, graph, node, color):\n        if node in graph:\n            if color not in graph[node]:\n                graph[node].append(color)\n        else:\n            graph[node] = [color]\n    \n    def find_max_subset(self, graph, node):\n        self.update_graph(self.graph, node, 1)\n        color = 1\n        for neighbor in graph[node]:\n            if neighbor in self.graph:\n                self.find_max_subset(self.graph, neighbor)\n            if self.graph[node] and neighbor in self.graph[node]:\n                if self.graph[node][0] == self.graph[neighbor][0]:\n                    color = self.graph[node][0] + color\n        if not self.graph[node]:\n            self.update_graph(self.graph, node, color)\n        return color\n    \n    def find_max_subset_brute_force(self, graph):\n        max_color = 1\n        for node in graph:\n            color = 1\n            for neighbor in graph[node]:\n                if neighbor in graph:\n                    if graph[neighbor][0] == graph[node][0]:\n                        color += graph[node][0]\n            if color > max_color:\n                max_color = color\n        return max_color\n    \n    def find_max_subset_smart(self, graph):\n        self.graph = graph\n        return self.find_max_subset(self.graph, graph[0][0])"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 2\\n\"\n    \"10 10 10 10 10\\n\"\n    \".X.X.X.X.X.X.X.X.\\n\"\n    \"T.T.T.T.T.T.T.T.T.\\n\"\n    \"X.X.X.X.X.X.X.X.X.X.X.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.T.\\n\"\n    \"T.T.T.T.T"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2\\n20 20 20 40') == '0.333333333'\nassert solution('3 3\\n20 20 20 40\\n20 20 20 20') == '0.25'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2\\n20 20 20 40') == '0.333333333'\nassert solution('3 2\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT.T\\nT"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2\n20 20 20 40\nX.X\nT.T\nSample Input:\n5 4\n1 1 1 1 1\n...\n...\n...\n...\n...\nSample Output:\n1.0\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n0.5\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.333333333\\n0.666666667\\n'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 3\n5 5 5 5 5\n.X.\nT.T\nX.\n''') == '0.6'\nassert solution('''\n5 3\n5 5 5 5 5\n.X.\nT.T\nX.\n''') == '0.95789473684210526'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n20 20 20 40\nX.X\nT.T\n''') == '0.333333333'\nassert solution('''\n3 4\n5 6 7 8\n910 100 101 102\n1100 1200 1201 1302\n''') == '0.00159625000'\n"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\n20 20 20 40\n.X.\n.T.''') == '0.333333333'\nprint(solution('''3 2\n20 20 20 40\n.X.\n.T.'''))\n\nassert solution('''2 2\n50 50 50\n.X.\n.T.''') == '0.5000000000000004'\nprint(solution('''2 2\n50 50 50\n.X.\n.T.'''))\n\nassert solution('''3 2\n10 10 10 30\n.X.\n.T.''') == '0.333333333'\nprint(solution('''3 2\n10 10 10 30\n.X.\n.T.'''))\n\nassert solution('''1 1\n10 10 10 40\n.X.\n.T.''') == '0.333333333'\nprint(solution('''1 1\n10 10 10 40\n.X.\n.T.'''))\n\nassert solution('''2 2\n5 5 5\n.X.\n.T.''') == '0.5000000000000004'\nprint(solution('''2 2\n5 5 5\n.X.\n.T.'''))"
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 2\n20 20 20 40\n.X.\nT.T\n
    },
    {
        "number": 3622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2\\n20 20 20 40\\nX.X\\nT.T') == '0.3333333333333333'\nassert solution('3 2\\n20 20 20 40\\nT.T\\nX.X\\nX.X\\nT.T\\nX.X') == '0.3333333333333333'\nassert solution('3 2\\n20 20 20 40\\nX.X\\nX.X\\nT.T\\nT.T') == '0.6666666666666666'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"20 20 5 0\") == \"0.5\"\nassert solution(\"0 0 0 0\") == \"1.0\""
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"45 45 0 0\n5 5 4 4\"\"\") == \"0.75\"\nassert solution(\"\"\"100 100 50 50\"\"\") == \"0.625\"\nassert solution(\"\"\"4 5 1 5\"\"\") == \"1.0\"\nassert solution(\"\"\"3 3 3 3\"\"\") == \"0.75\"\nassert solution(\"\"\"0.1234567899 1.234567899 1.2345678900\"\"\") == \"0.5\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"45 45 10.1 0 0\") == \"0.75\"\nassert solution(\"15 15 0.1 0.1\") == \"0.3125\"\nassert solution(\"0 0 0.1 0.1\") == \"0.34375\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('1.001 2.001 3.001 4.001') == '0.875'\nassert solution('5.555 7.567 8.578 9.59') == '0.0023354784'\nassert solution('5.55555 7.55555 8.57777 9.588888') == '0.00235'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''45 45 0 0''') == '0.75'\nassert solution('''45 0 0 45''') == '0.5'\nassert solution('''45 45 45 45''') == '1'\nassert solution('''45 0 0 45''') == '1'\nassert solution('''45 0 0 45''') == '1'\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"45 45 0 0\") == \"0.75\"\nassert solution(\"36 13 0 0\") == \"0.5\"\nassert solution(\"36 36 0 0\") == \"0.5\"\nassert solution(\"36 60 0 0\") == \"0.5\"\nassert solution(\"36 60 13 0\") == \"0.5\"\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4 1 3') == '0.5'\n\"\"\""
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '0.75'\n\nSample Input:\n135 135 0 45\nSample Output:\n1.0\n"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"45 45 0 0\n\"\"\") == \"0.75\"\nprint(solution(input()))"
    },
    {
        "number": 3623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('45 45 0 0') == '0.75'\nassert solution('23 45 0 0') == '1.0'\nassert solution('37 45 0 0') == '0.0'\nassert solution('8.0 45 0 0') == '0.3333333333333333'\nassert solution('45 45 45 45') == '0.5'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''\n5 3\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''\n7 7\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n4 5 1\n''') == '12'\nprint('All test cases passed...')\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"5 3\") == \"3\"\n\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\nassert solution('''1 2\n0 2\n''') == '2'\n"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\""
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"4\"\nassert solution(\"5 6\") == \"4\"\nassert solution(\"6 6\") == \"4\"\nassert solution(\"5 6\") == \"4\"\nassert solution(\"6 6\") == \"4\"\n\nclass TestSolution:\n\n    def test_solution(self):\n        "
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 6') == '4'\nassert solution('3 2') == '1'"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == '4'\n\nassert solution('''\n3 4\n0 1 5\n0 2 5\n1 2 3\n''') == '5'\n\nassert solution('''\n2 3\n0 1 2\n0 3 5\n1 3 1\n''') == '1'\n\nassert solution('''\n3 5\n1 5 5\n1 5 5\n1 5 5\n''') == '3'\n\nassert solution('''\n3 5\n1 5 5\n1 5 5\n1 5 5\n''') == '3'"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 6\n0 1 2\n0 3 8\n1 2 11\n2 3 5\n2 4 2\n4 3 9\n''') == \"4\"\nassert solution('''1 1\n1''') == \"0\"\nassert solution('''4 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 3624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 6\\n0 1 2\\n0 3 8\\n1 2 11\\n2 3 5\\n2 4 2\\n4 3 9') == '4'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"100\"\nassert solution(\"1\\n10 10 0 5\\n\") == \"100\"\nassert solution(\"2\\n100 0 0 5\\n\") == \"200\"\nassert solution(\"3\\n0 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"0\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\n10 10 0 5\n\"\"\") == \"100\"\nassert solution(\"\"\"\n10 1 0 1\n10 2 1 2\n10 2 2 3\n\"\"\") == \"12\"\nassert solution(\"\"\"\n1 3 2 1\n10 1 0 1\n10 2 1 2\n10 2 2 3\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 10 0 5\n''') == '100'\nassert solution('''\n1\n10 10 0 5\n''') == '10'\nassert solution('''\n1\n100 10 0 5\n''') == '100'\nassert solution('''\n5\n100 10 0 5\n''') == '100'\nassert solution('''\n10\n100 10 0 5\n''') == '0'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"100\"\nassert solution('\\n'.join(['1', '10 10 0 5'])) == \"100\"\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('10 10 0 5') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 10 0 5\n''') == '100'\nassert solution('''\n1\n10 10 0 5\n''') == '100'\nassert solution('''\n2\n3 100 3 50\n''') == '120'\nassert solution('''\n3\n2 100 2 50\n''') == '110'\nassert solution('''\n4\n2 100 2 50\n''') == '100'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n5 0 5 0\n2\n3 0 3 0\n1\n2 0 2 0\n2\n3 0 3 0\n''') == '100'\nassert solution('''\n8\n3 1 1 0\n1\n3 1 1 0\n1\n2 0 2 0\n1\n1 0 1 0\n1\n2\n''') == '5'\nassert solution('''\n2\n5 0 5 0\n1\n1 0 1 0\n1\n2\n''') == '0'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10 10 0 5\\n') == '100'\nassert solution('2\\n20 20 0 10\\n') == '110'\nassert solution('3\\n25 25 0 5\\n') == '110'\n"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n10 10 0 5') == '100'\nassert solution('2\\n1 1 1 1 1\\n1 1 1 1 1') == '8'"
    },
    {
        "number": 3625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n10 10 0 5\n20 15 0 10\n20 20 0 20\n10 20 0 5\n10 20 0 5\n''') == '100'\n\nassert solution('''4\n50 50 0 50\n50 50 0 50\n50 50 0 50\n50 50 0 50\n''') == '200'\n\nassert solution('''6\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n10 10 0 5\n''') == '150'\n\nassert solution('''3\n3 3 0 3\n3 3 0 3\n3 3 0 3\n''') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n0 0 2 2\\n1 1 3 4\\n5 7 6 8\\n') == '1\\n'\n\n__EXAMPLES__ = '''\nInput:\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\nOutput:\n1\n\nInput:\n5\n0 0 2 2\n1 1 3 4\n5 7 6 8\n0 0 1 2\n0 1 2 3\nOutput:\n0\n\nInput:\n5\n0 0 2 2\n1 1 3 4\n5 7 6 8\n0 0 2 2\n0 1 2 3\nOutput:\n0\n'''\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\n\nSample Input:\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\nSample Output:\n0"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n1 1 3 4\n5 7 6 8\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n    3\n    0 0 2 2\n    1 1 3 4\n    5 7 6 8\n''') == '1'\n"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n    3\n    0 0 2 2\n    1 1 3 4\n    5 7 6 8\n    ''') == '1'\n\nassert solution('''\n    2\n    0 0 2 2\n    1 1 3 4\n    5 7 6 8\n    ''') == '0'\n\n'''"
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n0 0 2 2\n1 1 3 4\n5 7 6 8\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3\n0 0 2 2\n1 1 3 4\n5 7 6 8\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n3\n-10 -1 1 -1\n-1 -1 5 1\n-1 -1 -1 -1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n2\n0 0 2 2\n1 1 3 4\n0 0 2 2\n0 0 2 2\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n1\n0 0 2 2\n-1 1 3 4\n0 0 2 2\n0 0 2 2\n\"\"\") == \"1\""
    },
    {
        "number": 3626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution(\n'''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '17'\nassert solution(\n'''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '20'\nassert solution(\n'''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '23'\nassert solution(\n'''5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S''') == '26'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == '12'"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\nassert solution('''\n3 3\nE E E\n1 2 3\nS S S\n''') == '5'\nassert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '11'\n'''\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"17\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1\") == \"2\""
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n\") == \"17\"\nassert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\\n\") == \"15\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\n'''\nSample Input:\n1 2\n3\n4\nS\nS\nSample Output:\n1\n'''\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\nE E E E E\n1 2 3 4 5\n5 4 3 2 1\n-2 -2 -2 -2 -2\n8 8 8 8 8\n9 9 9 9 9\nS S S S S\n''') == '17'\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nassert solution(\"1 1\\n0 1\\n1 0\\n1 1\\n1 0\\n0 0\") == \"4\"\n"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\nE E E E E\\n1 2 3 4 5\\n5 4 3 2 1\\n-2 -2 -2 -2 -2\\n8 8 8 8 8\\n9 9 9 9 9\\nS S S S S\") == \"17\"\nassert solution(\"3 6\\n1 2 1\\n1 2 2\\n1 2 3\\n1 2 3\\n1 2 3\\n2 2 3\\n3 3 3\\n3 3 3\\n4 3 3\\n4 3 3\\n4 3 3\\n5 3 3\\n5 3 3\\n5 3 3\\n6 3 3\\n6 3 3\\n6 3 3\\n7 3 3\\n7 3 3\\n7 3 3\\n8 3 3\\n8 3 3\\n8 3 3\\n9 3 3\\n9 3 3\\n9 3 3\\n10 3 3\\n10 3 3\\n10 3 3\\n11 3 3\\n11 3 3\\n11 3 3\\n12 3 3\\n12 3 3\\n12 3 3\\n13 3 3\\n13 3 3\\n13 3 3\\n14 3 3\\n14 3 3\\n14 3 3\\n15 3 3\\n15 3 3\\n15 3 3\\n16 3 3\\n16 3 3\\n16 3 3\\n17 3 3\\n17 3 3\\n17 3 3\\n18 3 3\\n18 3 3\\n18 3 3\\n19 3 3\\n19 3 3\\n19 3 3\\n20 3 3\\n20 3 3\\n20 3 3\\n21 3 3\\n21 3 3\\n21 3 3\\n22 3 3\\n22 3 3\\n22 3 3\\n23 3 3\\n23 3 3\\n23 3 3\\n24 3 3\\n24 3 3\\n24 3 3\\n25 3 3\\n25 3 3\\n25 3 3\\n26 3 3\\n26 3 3\\n26 3 3\\n27 3 3\\n27 3 3\\n27 3 3\\n28 3 3\\n28 3 3\\n28 3 3\\n29 3 3\\n29 3 3\\n29 3 3\\n30 3 3\\n30 3 3\\n30 3 3\\n31 3 3\\n31 3 3\\n31 3 3\\n32 3 3\\n32 3 3\\n32 3 3\\n33 3 3\\n33 3 3\\n33 3 3\\n34 3 3\\n34 3 3\\n34 3 3\\n35 3 3\\n35 3 3\\n35 3 3\\n36 3 3\\n36 3 3\\n36 3 3\\n37 3 3\\n37 3 3\\n37 3 3\\n38 3 3\\n38 3 3\\n38 3 3\\n39 3 3\\n39 3 3\\n39 3 3\\n40 3 3\\n40 3 3\\n40 3 3\\n41 3 3\\n41 3 3\\n41 3 3\\n42 3 3\\n42 3 3\\n42 3 3\\n43 3 3\\n43 3 3\\n43 3 3\\n44 3 3\\n44 3 3\\n44 3 3\\n45 3 3\\n45 3 3\\n45 3 3\\n46 3 3\\n46 3 3\\n46 3 3\\n47 3 3\\n47 3 3\\n47 3 3\\n48 3 3\\n48 3 3\\n48 3 3\\n49 3 3\\n49 3 3\\n49 3 3\\n50 3 3\\n50 3 3\\n50 3 3\\n51 3 3\\n51 3 3\\n51 3 3\\n52 3 3\\n52 3 3\\n52 3 3\\n53 3 3\\n53 3 3\\n53 3 3\\n54 3 3\\n54 3 3\\n54 3 3\\n55 3 3\\n55 3 3\\n55 3 3\\n56 3 3\\n56 3 3\\n56 3 3\\n57 3 3\\n57 3 3\\n57 3 3\\n58 3 3\\n58 3 3\\n58 3 3\\n59 3 3\\n59 3 3\\n59 3 3\\n60 3 3\\n60 3 3\\n60 3 3\\n61 3 3\\n61 3 3\\n61 3 3\\n62 3 3\\n62 3 3\\n62 3 3\\n63 3 3\\n63 3 3\\n63 3 3\\n64 3 3\\n64 3 3\\n64 3 3\\n65 3 3\\n65 3 3\\n65 3 3\\n66 3 3\\n66 3 3\\n66 3 3\\n67 3 3\\n67 3 3\\n67 3 3\\n68 3 3\\n68 3 3\\n68 3 3\\n69 3 3\\n69 3 3\\n69 3 3\\n70 3 3\\n70 3 3\\n70 3 3\\n71 3 3\\n71 3 3\\n71 3 3\\n72 3 3\\n72 3 3\\n72 3 3\\n73 3 3\\n73 3 3\\n73 3 3\\n74 3 3\\n74 3 3\\n74 3 3\\n75 3 3\\n75 3 3\\n75 3 3\\n76 3 3\\n76 3 3\\n76 3 3\\n77 3 3\\n77 3 3\\n77 3 3\\n78 3 3\\n78 3 3\\n78 3 3\\n79 3 3\\n79 3 3\\n79 3 3\\n80 3 3\\n80 3 3\\n80 3 3\\n81 3 3\\n81 3 3\\n81 3 3\\n82 3 3\\n82 3 3\\n82 3 3\\n83 3 3\\n83 3 3\\n83 3 3\\n84 3 3\\n84 3 3\\n84 3 3\\n85 3 3\\n85 3 3\\n85 3 3\\n86 3 3\\n86 3 3\\n86 3 3\\n87 3 3\\n87 3 3\\n87 3 3\\n88 3 3\\n88 3 3\\n88 3 3\\n89 3 3\\n89 3 3\\n89 3 3\\n90 3 3\\n90 3 3\\n90 3 3\\n91 3 3\\n91 3 3\\n91 3 3\\n92 3 3\\n92 3 3\\n92 3 3\\n93 3 3\\n93 3 3\\n93 3 3\\n94 3 3\\n94 3 3\\n94 3 3\\n95 3 3\\n95 3 3\\n95 3 3\\n96 3 3\\n96 3 3\\n96 3 3\\n97 3 3\\n97 3 3\\n97 3 3\\n98 3 3\\n98 3 3\\n98 3 3\\n99 3 3\\"
    },
    {
        "number": 3627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '17'\nassert solution('1 2 3 4 5') == '17'\nassert solution('5 4 3 2 1') == '17'\nassert solution('-2 -2 -2 -2 -2') == '17'\nassert solution('8 8 8 8 8') == '17'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '1 4 3 5 2', 'first'\nassert solution('3 2 3 1 1') == '1 4 3 5 2','second'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\nassert solution('5\\n4 2 5 1 3') == '1 4 5 3 2'\n\n---Input is read from STDIN---\n\n-----SOLUTION-----\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n3 2 3 1 1') == \"1 4 3 5 2\"\nassert solution('10\\n2 3 4 1 5 6 1 7 8 9 10') == \"7 4 1 3 2 8 9 10\"\n\n\"\"\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3 4''') == \"impossible\"\nassert solution('''3\n1 2 3''') == \"1 4 2 3\"\nassert solution('''4\n1 2 3 4''') == \"1 3 4 2\""
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n3 2 3 1 1\nSample Input:\n3\n1 2 3\nSample Output:\nimpossible\n''') == '1 4 3'\nassert solution('''4\n2 3 1\nSample Input:\n3\n3 2 1\nSample Output:\nimpossible\n''') == 'impossible'\nassert solution('''5\n4 5 1 3 2\nSample Input:\n3\n5 3 1\nSample Output:\n2 4 5\n''') == '1 4 5'\nassert solution('''5\n1 2 3 4 5\nSample Input:\n3\n1 5 2 3\nSample Output:\nimpossible\n''') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2 4 3 3') == '1 4 3 5 2'\nassert solution('7 3 2 4 5 1 6') == '1 4 3 5 6 2 7'\nassert solution('5 1 2 3 4') == 'impossible'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 3 1 1\") == \"1 4 3 5 2\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    if a[i] not in d:\n        d[a[i]] = i\n    else:\n        return \"impossible\"\n\ns = set()\nfor i in range(n):\n    s.add(d[a[i]])\n    s.add(d[a[i]] + n)\n    s.add(d[a[i]] - n)\nprint(*sorted(s), sep='\\n')\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 4 3 5 2'\nassert solution('4') == 'impossible'"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n3 2 3 1 1') == '1 4 3 5 2'\n"
    },
    {
        "number": 3628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '5\\n'\n    '3 2 3 1 1'\n    ) == '1 4 3 5 2'\nassert solution(\n    '5\\n'\n    '1 2 3 4 5'\n    ) == 'impossible'\nassert solution(\n    '5\\n'\n    '1 2 3 4 5'\n    ) == '1 4 3 5 2'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.76772047'\nassert solution('2') == '0.017120344'\nassert solution('3') == '0.5333333333333333'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 1\\n1 4') == '0.76772047'\nassert solution('2\\n0 1\\n1 1') == '0.0'\nassert solution('3\\n0 1\\n1 2') == '0.0'\nassert solution('4\\n0 1\\n1 3') == '0.8'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n0 1\n1 4\n''') == '0.76772047'\nassert solution('''\n2\n0 1\n1 4\n''') == '0.7473688'\n'''\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.75'\nassert solution('3') == '0.25'\nassert solution('4') == '0.5'\nassert solution('5') == '0.5'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n3 0 1\\n1 4\\n') == '0.76772047'\nassert solution('1\\n3 0 1\\n2 4\\n') == '0.914285714'\nassert solution('1\\n3 0 1\\n2 4\\n') == '0.914285714'\nassert solution('1\\n4 3 2\\n3 2\\n') == '0.0'\nassert solution('1\\n4 3 2\\n3 2\\n') == '0.5'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n3 0 1\\n1 4') == '0.76772047'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1\n0 1\n0 4\n\"\"\") == \"0.76772047\"\nassert solution(\"\"\"\n2\n1 0 1\n1 4\n\"\"\") == \"0.04272467\"\nassert solution(\"\"\"\n100\n0 1\n0 4\n\"\"\") == \"2.11136593e-16\"\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '0.5'\nassert solution('2') == '0.0'\nassert solution('3') == '0.0'\n"
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '0.76772047'\nassert solution('5 1 0 2') == '0.26571429'\n\"\"\""
    },
    {
        "number": 3629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n2 2 2\n1 1\n''') == '0.5'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('hello teams') == '27'\nassert solution('zd abc dasd') == '4'\nassert solution('zd aaaaaa dasd') == '5'"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('hello teams') == '27'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello hellel') == '5'\nassert solution('hello lalala') == '2'\nassert solution('hello gggg') == '1'\nassert solution('hello zzzzz') == '0'"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"hello teams\"\n) == \"27\"\n\nassert solution(\n    \"hello\"\n) == \"1\"\n\nassert solution(\n    \"hlel\"\n) == \"2\"\n\nassert solution(\n    \"hlle\"\n) == \"3\"\n\nassert solution(\n    \"hell\"\n) == \"2\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('hello teams') == '27'\nassert solution('hello aarushi') == '3'\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('hello teams') == '27'\nassert solution('zddd zzdd zzdd zddd zddd') == '5'\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('hello teams') == '27'\nassert solution('sdfkjvbdbf asfghj kjsf') == '10'\n\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"hello helmp\") == \"1\"\nassert solution(\"hello hel\") == \"2\"\nassert solution(\"hello hela\") == \"1\"\nassert solution(\"hello helap\") == \"1\"\n"
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"hello teams\") == \"27\"\nassert solution(\"helmp helmp\") == \"1\"\n\"\"\""
    },
    {
        "number": 3630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('hello teams') == '27'\nassert solution('world domination') == '9'\nassert solution('tea me tea') == '5'\nassert solution('hacker academy') == '12'\nassert solution('one two three four five six seven eight nine ten eleven twelve') == '2'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3\n3 4\n1 3\n4 3\n1 5\n4 5\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n5 4\n1 3\n4 3\n1 5\n4 5\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 3\n1 8\n5 4\n7 7\n9 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 2\n3 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 2\n6 5\n7 9\n9 2\n10 1\n4 7\n5 8\n6 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n20 3\n20 3\n19 4\n19 3\n18 5\n18 5\n17 6\n17 6\n15 7\n15 7\n14 8\n13 9\n12 10\n11 11\n10 12\n9 13\n8 14\n7 15\n6 16\n5 17\n4 18\n3 19\n2 20\n1 21\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n''') == '2'\nprint('PASSED')"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\n1 8\n5 4\n7 7\n9 2\n16 6\n17 10\n4 7 2\n6 3 1\n12 6 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3\n1 8\n5 4\n7 7\n9 2\n4 7 2\n6 3 1\n12 6 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 3') == '2'\nassert solution('1 8') == '1'\nassert solution('5 4') == '1'\nassert solution('7 7') == '0'\nassert solution('9 2') == '1'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"1\"\nassert solution(\"6 5\") == \"0\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"10 10\") == \"13\"\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 3') == '2'\nassert solution('10 2') == '3'\n"
    },
    {
        "number": 3631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 6\n1 2\n5 6\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2 2\n1 1\n5 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 2\n1 1\n5 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 2\n1 2\n5 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 1\n1 1\n5 2\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5 3\\n'\n    'a\\n'\n    'b\\n'\n    'c\\n'\n    'd\\n'\n    'e\\n'\n    'cad') == '26'\nassert solution(\n    '6 5\\n'\n    'a\\n'\n    'b\\n'\n    'c\\n'\n    'd\\n'\n    'e\\n'\n    'a\\n'\n    'b\\n'\n    'c\\n'\n    'd\\n'\n    'e\\n'\n    'ac') == '14'\nassert solution(\n    '7 5\\n'\n    'a\\n'\n    'b\\n'\n    'c\\n'\n    'd\\n'\n    'e\\n'\n    'a\\n'\n    'b\\n'\n    'c\\n'\n    'd\\n'\n    'e\\n'\n    'a\\n'\n    'c\\n'\n    'd\\n'\n    'e') == '21'"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3\\na') == '26'\nassert solution('5 3\\na\\nb') == '26'\nassert solution('5 3\\na\\nb\\nc') == '26'\nassert solution('5 3\\na\\nb\\nc\\nd') == '26'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\na\\nb\\nc\\nd\\ne\\n\") == \"26\"\nassert solution(\"5 5\\nab\\nac\\nad\\nbe\\n\") == \"11\"\nassert solution(\"5 5\\nab\\nac\\nad\\nbe\\n\") == \"11\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 3\na\nb\nc\nd\ne\ncad''') == '26'\n\"\"\""
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == '26'\nassert solution('''\n5 4\na\nb\nc\nd\ne\ncad\n''') == '23'\n\n\"\"\"\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('3\\n5') == '6'\nassert solution('4\\n6') == '3'\nassert solution('5\\n7') == '3'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4\\n6\\n10\\n3') == '26'\nassert solution('2\\n2\\n2\\n3') == '1'\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\na\nb\nc\nd\ne\ncad\n''') == '26'\n\nassert solution('''\n3 2\na\nb\nc\nd\ne\ncad\n''') == '2'\n\nassert solution('''\n5 1\na\nb\nc\nd\ne\ncad\n''') == '1'\n\nassert solution('''\n6 2\na\nb\nc\nd\ne\ncad\n''') == '6'\n'''\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 0\nassert solution('2') == 0\nassert solution('3') == 1\nassert solution('4') == 2\nassert solution('5') == 3\n"
    },
    {
        "number": 3632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 3\na\nb\nc\nd\ne\n''') == '26'\n\n'''\n1\n2\n3\n4\n5\n'''"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 10 30\n10 5 3 1 3\n''') == '3 5 2 1 4'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('5 10 10 10 10') == '4 5 4 2 3'\nprint('All tests passed!')\n\"\"\""
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"3 1 2\"\nassert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"10 10 10\") == \"10 10 10\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3 10 30\n10 5 3 1 3\n\"\"\") == \"\"\"\n3 5 2 1 4\n\"\"\"\n\nassert solution(\n\"\"\"\n5 10 30\n10 5 3 1 3\n\"\"\") == \"\"\"\n5 3 4 2 1\n\"\"\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 10 30') == '3 5 2 1 4'\nassert solution('5 10 30') == '3 5 2 1 4'\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 1 4\") == \"3 5 2 1 4\"\nassert solution(\"4 3 2 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 10 30\") == \"3 5 2 1 4\"\nassert solution(\"1 2 3 4\") == \"4 1 2 3\"\nassert solution(\"3 5 7 9\") == \"2 4 1 3\"\nassert solution(\"8 7 3 9\") == \"4 1 2 3\"\nassert solution(\"4 5 7 9\") == \"1 2 3 4\"\n\nimport sys"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5 10 30\n10 5 3 1 3\n\"\"\") == \"3 5 2 1 4\"\n\nassert solution(\"\"\"5 10 20\n10 10 4 4 1\n\"\"\") == \"4 5 2 1 3\"\n\nassert solution(\"\"\"5 10 50\n10 5 4 4 1\n\"\"\") == \"4 5 2 1 3\"\n\nprint('Tests passed')"
    },
    {
        "number": 3633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"2 3 4 1\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n2\") == \"shovel time!\"\nassert solution(\"2\\n3\\n3\") == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1\n2 3\n2 3''') =='shovel time!'\nassert solution('''8\n1 2\n2 3\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6''') =='shovel time!'\nassert solution('''1\n0 0\nSample Output:\n1''') =='shovel time!'\nassert solution('''2\n0 0\n0 1\nSample Output:\n0''') =='shovel time!'"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 1\n2 3''') == '2'\nassert solution('''2\n1 1\n1 2''') == '1'\nassert solution('''2\n1 1\n2 2''') == '1'\nassert solution('''10\n1 1\n2 1\n2 2\n2 3\n2 4\n3 2\n3 3\n4 1\n4 2\n4 3\n4 4''') == '4'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') =='shovel time!'\nassert solution('3') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n2\\n') =='shovel time!'\n\n'''\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n2 3\n2 3\n''') =='shovel time!'''\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n2 3\\n2 3\") == \"2\"\nassert solution(\"3\\n1 1\\n3 3\\n2 2\") == \"2\"\nassert solution(\"3\\n1 1\\n3 3\\n2 3\") == \"shovel time!\"\nassert solution(\"1\\n2 3\\n1 2\\n1 2\\n1 2\") == \"shovel time!\"\nassert solution(\"4\\n4 4\\n1 2\\n1 2\\n1 2\\n1 2\") == \"shovel time!\""
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') =='shovel time!'\nassert solution('3') =='shovel time!'\nassert solution('5') =='shovel time!'\nassert solution('7') =='shovel time!'\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n2 1\\n') == \"shovel time!\"\n\nassert solution('4\\n1 1\\n2 3\\n2 3\\n') == \"shovel time!\"\n"
    },
    {
        "number": 3634,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3\\n1 1\\n') =='shovel time!'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 1 2') == '3'\nassert solution('4\\n1 2 1 2\\n1 3 3') == '2'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('4') == '1'"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 1 2\\n') == '3'\nassert solution('5\\n1 2 1 2 1 2\\n') == '5'\nassert solution('10\\n1 2 1 2 1 2 1 2 1 2\\n') == '10'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 2 1 2\n''') == '3'\nassert solution('''\n4\n1 2 1 2\n''') == '2'\nassert solution('''\n6\n1 3 1 2 1 3\n''') == '4'\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 1 2\\n') == \"3\"\nassert solution('4\\n1 2 2 1\\n') == \"2\"\n\"\"\"\nfrom typing import List\nimport sys\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n2\n1''') == '1'\nassert solution('''2\n1\n2\n1''') == '1'\nassert solution('''4\n1\n2\n1\n2''') == '2'\nassert solution('''1\n1\n2\n3''') == '1'\n\n\"\"\""
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 1 2\\n\") == \"3\"\nassert solution(\"4\\n1 2 1 2\\n\") == \"2\"\nassert solution(\"4\\n1 2 1 2\\n\") == \"2\"\nassert solution(\"4\\n1 2 1 2\\n\") == \"1\"\nassert solution(\"4\\n1 2 1 2\\n\") == \"0\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2 1\n1 2\n''') == '3'\nassert solution('''\n2\n3 2\n1 2\n''') == '2'\nassert solution('''\n1\n3 1\n1 2\n''') == '2'\n'''\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('4 4 2') == '7'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4 4 999999937\n''') == '79'\nassert solution('''\n9 9 999999937\n''') == '80'\nassert solution('''\n9 9 999999937\n''') == '80'\nassert solution('''\n9999999999999937\n''') == '79'\nassert solution('''\n9999999999999937\n''') == '79'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5 6''') == '18'\nassert solution('''3 4 5''') == '6'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 3999999') == '8'\nassert solution('4 4 4') == '7'\nassert solution('2 2 2') == '0'\nassert solution('100 100 100') == '0'\nassert solution
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\n\"\"\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"79\"\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 4 999999937') == '79'\nassert solution('3 2 3') == '1'\nassert solution('3 2 4') == '2'\nassert solution('4 4 8') == '0'\nassert solution('4 4 2') == '1'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 999999937') == '79'\nassert solution('2 2 0') == '1'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 999999937') == '79'\nassert solution('1 1 5') == '0'\n"
    },
    {
        "number": 3636,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 4 999999937\") == \"79\"\nassert solution(\"1 1 1000000\") == \"100\"\nassert solution(\"2 1 1000000\") == \"200\"\nassert solution(\"2 2 1000000\") == \"200\"\nassert solution(\"3 3 1000000\") == \"400\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n4 +zucchini +mozzarella +mushrooms -artichoke\") == \"zucchini\\nmushrooms\\nmozzarella\\nartichoke\""
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke'\n\nassert solution('''\n1\n4 +zucchini +mozzarella +mushrooms -artichoke\n+1 +zucchini\n+1 +mozzarella\n''') == 'zucchini\\nmushrooms\\nartichoke\\nmozzarella'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"2\") == \"zucchini\"\nassert solution(\"3\") == \"zucchini\"\nassert solution(\"4\") == \"zucchini\"\nassert solution(\"5\") == \"zucchini\"\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"zucchini\"\nassert solution(\"3\") == \"zucchini\"\nassert solution(\"5\") == \"zucchini\""
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'zucchini'\nassert solution('2') == 'zucchini mozzarella'\nassert solution('3') == 'zucchini mozzarella mushrooms artichoke'\nassert solution('4') == 'zucchini mozzarella mushrooms artichoke mushrooms'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\nSample Output:\nzucchini\nmozzarella\nmushrooms\nartichoke\n''') == 'zucchini\\nmushrooms\\nmushrooms\\nartichoke'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini\\nmushrooms\\nmozzarella'\nassert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n-pepperoni') == 'zucchini\\nmushrooms\\nmozzarella\\npepperoni'\nassert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke\\n-pepperoni\\n+cheese') == 'zucchini\\nmushrooms\\nmozzarella\\ncheese'\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n4 +zucchini +mozzarella +mushrooms -artichoke\n''') == 'zucchini\\nmushrooms\\nartichoke\\n'''\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1\\n4 +zucchini +mozzarella +mushrooms -artichoke') == 'zucchini\\nmushrooms\\nmozzarella\\nartichoke'\n\nSample Input:\n3\n-shrimp +zucchini +mushrooms -mozzarella\n-shrimp +mozzarella +mushrooms -zucchini\nSample Output:\n-shrimp\n-mozzarella\n-mushrooms\n"
    },
    {
        "number": 3637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n+zucchini +mozzarella\n-zucchini +mozzarella\n-zucchini +mozzarella\n-zucchini -mozzarella\n+zucchini -mozzarella\n+zucchini +mozzarella''') == 'zucchini\\nmozarella\\nmushrooms\\nartichoke\\n'\nassert solution('''4\n+zucchini +mozzarella +mushrooms\n-zucchini +mozzarella +mushrooms\n-zucchini +mozzarella -mushrooms\n+zucchini -mozzarella -mushrooms\n+zucchini +mozzarella -mushrooms\n+zucchini -mozzarella -mushrooms\n+zucchini +mozzarella +mushrooms -artichoke''') == 'zucchini\\nmozarella\\nmushrooms\\nartichoke\\n'\nassert solution('''5\n+zucchini -mozzarella\n-zucchini +mozzarella\n-zucchini -mozzarella\n+zucchini +mozzarella\n+zucchini -mozzarella\n+zucchini +mozzarella +mushrooms\n-zucchini +mozzarella +mushrooms\n+zucchini -mozzarella +mushrooms\n+zucchini +mozzarella -mushrooms\n+zucchini +mozzarella -mushrooms\n+zucchini +mushrooms -artichoke''') == 'zucchini\\nmozarella\\nmushrooms\\nartichoke\\n'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS\\nSS') == 'PS\\nPP\\nRR\\nSS'\nassert solution('5 4\\nRRS\\nPPP\\nRPS\\nSPS\\nRSP') == 'RPS\\nRPS\\nSPS\\nRSP\\nRRS'"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\nPP\\nRR\\nPS\\nSS') == 'PS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"R\") == \"P\"\nassert solution(\"RPS\") == \"RPS\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"S\"\nassert solution(\"2\") == \"R\"\nassert solution(\"3\") == \"P\"\nassert solution(\"4\") == \"R\"\nassert solution(\"5\") == \"P\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4\\nPP\\nRR\\nPS') == 'PS'\nassert solution('3 4\\nPP\\nRR\\nSS') == 'PS'\nassert solution('3 4\\nPP\\nRR\\nPS') == 'PS'\nassert solution('3 4\\nPP\\nRR\\nSS') == 'PS'\nassert solution('3 4\\nPP\\nRR\\nSS') == 'PS'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\nPP\\nRP\\nRQ\\nPS\\nRJ\\nRZ\\nRS\\nRK\") == \"RJ\"\nassert solution(\"5 2\\nPP\\nPP\") == \"PP\"\nassert solution(\"5 2\\nPP\\nPS\") == \"PP\"\nassert solution(\"5 2\\nPP\\nSS\") == \"SS\"\nassert solution(\"5 2\\nPP\\nRP\") == \"PP\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nPPS\\nPPS\\nPPP\\n') == 'PPP'\n\n\"\"\"\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\nPS\nPP\nRR''') == 'PP'\nassert solution('''5 1\nPP\nRR\nRP\nRS\nSS''') == 'PS'\nassert solution('''4 1\nPS\nPP\nRR\nSS''') == 'SS'\nassert solution('''10 2\nPSSSSSS\nPPPPPPP\nRRRRRRP\nSSSSSSS\nSSSSSPS\nSSSSSSP\nSSSSSPP\nSSSSSPSS\nSSSSSPSS\nSSSSSPPS\nSSSSSPSS\nSSSSSPPS\nSSSSSPPS\nSSSSSPPS\nSSSSSPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPPPS\nSSSSSPP"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\nPP\nRR\nPS\nPS\nSS''') == 'PS'\nassert solution('''3\nPP\nRR\nPS''') == 'PP'\nassert solution('''3\nRR\nPP\nPS''') == 'PS'\nassert solution('''3\nPS\nRR\nPP''') == 'PS'\nassert solution('''10\nPPPPPPP\nPPPPPPP\nPSPPPPP\nPPPPPPP\nPSPPPPP\nPPPPPPP\nPPPPPPP\nPSPPPPP\nPPPPPPP\nPSPPPPP\nPSPPPPP\nPSPPPPP''') == 'PPPPPPP'\n"
    },
    {
        "number": 3638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2 3\\n'\n    'RRRR\\n'\n    'PPP') == 'PPP'\nassert solution(\n    '2 5\\n'\n    'RRRRR\\n'\n    'PPPPP\\n'\n    'RRRPS\\n'\n    'RRRSS\\n'\n    'RPSRSS') == 'RPSRSS'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5\n0.1 2.0\n0\n0\n0\n0\n0\n''') == '288.0', \"Wrong answer!\"\n\"\"\"\nThe rain is given for each minute interval in millilitres, indicating how wet you get from cycling through this \u2014 note that you can cycle just a fraction of a whole minute interval at the start and end of your trip: then only that fraction of the rain during that interval affects you. Sweating makes you wet at a rate of $s = c \\cdot v^2$ per minute where $v$ is your speed in $\\mathrm{km}/\\mathrm{h}$ and $c$ is a positive constant you have determined. You have to cover the distance to your home in a given time (you don\u2019t want to wait forever for it to become dry), but otherwise you can choose your strategy of when to leave and how fast to cycle (and even change speeds) as you wish. What is the least wet you can get from the combination of rain and sweat?\n\n-----Input-----\n - One line containing a single positive integer $T$ ($0 < T \\le 10000$), the number of minutes from now you want to be home by at the latest.\n - Another line with two positive floating point numbers: $c$ ($0.01 \\le c \\le 10$), the constant determining your sweating, and $d$ ($1 \\le d \\le 50$), the distance from university to home in kilometres.\n - $T$ more lines, where each line contains an integer $r_ i$ ($0 \\le r_ i \\le 100$) the number of millilitres of rain during the $i$-th minute interval (zero-based).\n\n-----Output-----\nOn a single line print a floating point number: the number of millilitres of rain and sweat you get wet from when optimally planning your cycle home. Your answer should be correct up to an absolute or relative precision of $10^{-6}$.\n\n-----Examples-----\nSample Input:\n5\n0.1 2.0\n0\n0\n0\n0\n0\nSample Output:\n288\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '128'\nassert solution('3') == '136'\nassert solution('5') == '144'\nassert solution('1') == '2.0000'\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0.0'\n\"\"\""
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n0.1 2.0\\n0\\n0\\n0\\n0\\n0') == '288.0'"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"288.0\"\nassert solution(\"5\") == \"288.0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10\n0.1 2.0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n''') == \"288\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n0.1 2.0') == '288'\nassert solution('3\\n0.5 2.0') == '0.5'\n\"\"\"\n\nfrom math import exp\nimport sys\n\ninput_lines = []\nfor line in sys.stdin:\n    input_lines.append(line.rstrip('\\n'))\n\nT = int(input_lines[0])\n\nc = float(input_lines[1])\nd = float(input_lines[2])\n\nr_list = []\nfor i in range(3, len(input_lines), 2):\n    r_list.append(float(input_lines[i]))\n\nfor t in range(T):\n    r_i = r_list[t]\n    total_rain = 0\n    total_sweat = 0\n    for r in range(t + 1):\n        sweat = r_i / (d * exp(c * t - 0.5 * r * d))\n        rain = c * t - r * d\n        total_rain += rain\n        total_sweat += sweat\n    print(total_rain, total_sweat)\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2.0 2.0 2.0 2.0 2.0\") == \"224\"\nassert solution(\"0.1 2.0\") == \"288\"\nassert solution(\"0.1\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\\n0.1\\n0\\n0\\n0\") == \"288\"\nassert solution(\"5\\n0.1\\n0\\n0\\n0\") == \"288\"\nassert solution(\"5\\n0.1\\n0\\n0\\n0\\n0\") == \"288\"\nassert solution(\"5\\n0.1\\n0\\n0\\n0\\n0\\n0\") == \"288\"\n"
    },
    {
        "number": 3639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n0.1 2.0') == \"288.000000\"\nassert solution('10\\n0.001 2.0') == \"280.99999\"\nassert solution('10\\n0.001 0.7 2.0') == \"277.99999\"\nassert solution('10\\n0.001 1.7 0.2') == \"273.95000\""
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('pastimeofwhimsy') == '1'"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('pastimeofwhimsy') == 1\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('pastimeofwhimsy') == '1'\n'''"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('meowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflapmeowlapmeowflap"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 1\n\n---Input Example---\n2\nyarn\n\n---Output---\n5\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('pastimeofwhimsy') == '1'"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"pastimeofwhimsy\") == \"1\"\nassert solution(\"meowfactortest\") == \"meowfactor\"\n\n'''\n"
    },
    {
        "number": 3640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('pastimeofwhimsy') == '1'\nassert solution('agawamstastethssgc') == '2'\nassert solution('abcdefghijklmnopqrstuvwxyz') == '0'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 2 2 1') == 'YES'\nassert solution('3 5\\n5 1 2 4 5') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(INPUT) == 'YES'\n'''"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 1\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2 1 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n1 2 1 2 \n''') == 'YES'\nassert solution('''\n10 4\n2 2 1 1 1 1 1 1 2 2 2 2\n''') == 'NO'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4\\n1 2 2 1 ') == 'YES'\nassert solution('3 2\\n1 2 1 ') == 'NO'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4\n1 2 2 1 \n''') == 'YES'\nassert solution('''2\n1 \n''') == 'NO'\nassert solution('''2\n1 \n''') == 'NO'\nassert solution('''3\n1 2\n1 2 \n''') == 'NO'\nassert solution('''3\n1 2\n1 2\n''') == 'YES'\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n1 2 2 1''') == 'YES'\nassert solution('''1 1 1\n''') == 'NO'"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"100 4\") == \"YES\"\n"
    },
    {
        "number": 3641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 2 2 1\n''') == 'YES'\nassert solution('''5 3\n2 3 2 4 1\n''') == 'NO'\n'''\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3/1'\nassert solution('3') == '6/5'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 2\\n3\\n\") == \"3/1\"\nassert solution(\"1\\n3\\n\") == \"2/1\"\nassert solution(\"1\\n2\\n\") == \"1/2\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3') == '1/2'\nassert solution('1 2\\n2 3') == '1/3'\nassert solution('1 2\\n1 2') == '1/1'\n\"\"\""
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2\n1 2\n3\n4\n\"\"\") == \"3/1\"\n\nassert solution(\"\"\"\n5\n1 2\n3 4\n2 5\n6\n1 2\n3\n4 5\n2 4\n\"\"\") == \"2/1\"\n\nassert solution(\"\"\"\n4\n1 2\n3 1\n4\n2 3\n\"\"\") == \"1/2\"\n\nassert solution(\"\"\"\n5\n1 2\n3 4\n2 5\n6\n1 2\n3\n4 5\n2 4\n\"\"\") == \"2/1\"\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3\\n') == '3/1'\nassert solution('3\\n') == '3/1'\nassert solution('3\\n') == '3/1'\nassert solution('4\\n') == '4/1'\nassert solution('2\\n5') == '5/2'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3') == '3/1'\nassert solution('1 2\\n3\\n4') == '3/1'\nassert solution('4\\n1 2\\n3') == '3/1'\nassert solution('4\\n1 2\\n3\\n2') == '1/2'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2\\n3\\n4') == '3/1'\nassert solution('3\\n4\\n5\\n6\\n7\\n8') == '8/7'\nassert solution('6\\n7\\n8\\n9\\n10\\n11\\n12') == '10/11'"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3') == '1/2'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '1/2'\nassert solution('3') == '3/1'\nassert solution('2 2') == '2/1'\n"
    },
    {
        "number": 3642,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n1 2\\n3\\n4') == '3/1'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1.2 10.2\\n2.2 15.2') == '1.114672365'\nprint(solution('''\n5\n1.2 10.2\n2.2 15.2\n1.3 20.2\n4.3 15.2\n3.4 15.2\n'''))\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1.2 10.2\\n2.2 15.2\") == \"1.114672365\"\nassert solution(\"5\\n1.2 10.2\\n2.2 15.2\\n3.2 10.4\\n4.2 15.2\\n5.2 10.4\") == \"1.29921957\"\nassert solution(\"1.2 10.2\\n2.2 15.2\\n3.2 10.4\\n4.2 15.2\\n5.2 10.4\") == \"1.29921957\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n1.2 10.2\n2.2 15.2\n4.2 15.2\n\"\"\") == \"0.0\"\n\"\"\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1.2 10.2\n2.2 15.2\n2.1 4.5\n''') == '1.114672365'\nassert solution('''5\n1.2 10.2\n2.2 15.2\n2.1 4.5\n4.1 6.7\n5.4 8.9\n''') == '0.610816325'\nassert solution('''10\n1.2 10.2\n2.2 15.2\n2.1 4.5\n4.1 6.7\n5.4 8.9\n''') == '0.625757865'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1.2 10.2\\n2.2 15.2\") == \"1.114672365\"\n\nstdin = \"\"\"1.2 10.2\n2.2 15.2\"\"\"\n\nassert solution(stdin) == \"1.114672365\"\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0.0041016'\nassert solution('1.2 10.2') == '1.1180212'\nassert solution('2.2 15.2') == '1.1180212'\n'''\n\n\n'''\n--- Day 3: Toboggan Trajectory ---\n\nWith the toboggan login problems resolved, you set off toward the airport. While travel by toboggan might be easy, it's certainly not safe: there's very minimal steering and the area is covered in trees. You'll need to see which angles will take you near the fewest trees.\n\nDue to the local geology, trees in this area only grow on exact integer coordinates in a grid. You make a map (your puzzle input) of the open squares (.) and trees (#) you can see. For example:\n\n..##.......\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('10') == '0.5'\nprint(solution(input()))\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1.2 10.2') == '1.114672365'\nassert solution('2.2 15.2') == '0.664760258447422'"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1.114672365'\nassert solution('3') == '2.22222222233333333'\n"
    },
    {
        "number": 3643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == \"0.25\"\n\"\"\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n0 3\n1 1\n2 1\n2 0\n''') == '1 2 3 2'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n0 3') == '1 2 3'\nassert solution('2\\n1 1') == '1 2'\nassert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '1 2 3 2'\nprint('You are a smart cookie!') if __name__ == \"__main__\" else None\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3\\n1 2 3 2'\nassert solution('4\\n1 2 3\\n0 0\\n1 1\\n2 1\\n2 0') == '1\\n0 2 1 3 2'\nassert solution('4\\n1 2 3\\n0 0\\n1 1\\n2 1\\n2 0') == '0\\n0 1 1 3 2'\nassert solution('4\\n1 2 3\\n0 0\\n1 1\\n2 1\\n2 0') == '1\\n0 1 1 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 3\\n1 2\\n2 2') == '3\\n1 2 3 2'\nassert solution('3\\n0 3\\n1 1\\n2 2\\n2 0') == '3\\n1 2 3 2'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3 1 2 3'\nassert solution('4\\n0 4\\n1 1\\n2 1\\n2 0') == '3 1 2 1'\nassert solution('4\\n0 3\\n1 1\\n2 1\\n2 0') == '3 1 2 3'\nassert solution('5\\n0 2\\n1 1\\n2 0\\n2 1') == '3 1 2 3 1'\nassert solution('5\\n0 2\\n1 1\\n2 0\\n2 1') == '3 1 2 3 1'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 3\n1 1\n2 1\n2 0\n''') == '''\n3\n1 2 3 2\n'''\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2 1 3 3'\nassert solution('3') == '1 2 3 3'\nassert solution('5') == '1 3 2 3 2'\nassert solution('6') == '1 4 5 5 5 5'\nassert solution('20') == '1 17 17 17 17 17 17'"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n2 3 1\\n1 2\\n0 3') == '1 2 3 2'\nassert solution('3\\n1 1\\n2 2\\n2 0') == '1 2 3 2'\n"
    },
    {
        "number": 3644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n2\\n0\\n') == '1 2 3 2'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 3') == '1'\nassert solution('3\\n1 2 1 3') == '1 2'\nassert solution('4\\n1 1 2 1 3') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3\\n') == '1'\nassert solution('3\\n1 1 2\\n') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1 2 3\n3 2 1\n''') == '1 2 3'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '1'\nassert solution('4') == 'none'\nassert solution('3') == '1'\nassert solution('4') == 'none'\n\"\"\"\n\n\"\"\"\nYou are given an array (list) A of size N which contains only 0s and 1s. The array is called a bit array, since it is just a bunch of 0s and 1s. You want to flip the bits of A, so that the 0s become 1s and the 1s become 0s.\n\nInput:\nThe first line of input contains an integer N, denoting the size of the array A. The second line contains N space separated numbers of the array.\n\nOutput:\nOutput the elements of the array separated by new line.\n\nNote: If a bit flip is needed, every bit should be flipped and new bit should be set to 1.\n\nConstraints:\n1 <= N <= 1000000\n0 <= A[i] <= 1\n\nExample:\nInput:\n2\n1 0\nOutput:\n1\n0\n\nInput:\n3\n1 0 0\nOutput:\n0\n0\n1\n\nInput:\n2\n1 0\nOutput:\n0\n1\n\"\"\"\n\n\"\"\"\nYou are given an array (list) A of size N. The array contains all integers from 0 to N-1 (both included). You have to perform a series of operations on the array.\n\nThe following operations are possible:\n\ninsert x i element: Inserts an integer x into the array at the given index i.\nprint the array: Prints the array.\nremove x element: Removes an integer x from the array. If there is no x present, do nothing.\nremove i element: Removes the element at the given index i.\nreplace x y: Replaces the value x with y in the array.\n\nNote: x and y will be integers between 0 and N-1.\n\nInput:\nThe first line of input contains an integer N. The second line contains N space separated values of the array.\n\nOutput:\nprint the array\n\"\"\"\n\n\"\"\"\nYou are given an array (list) A of size N. The array contains all integers from 0 to N-1 (both included). You have to perform a series of operations on the array.\n\nThe following operations are possible:\n\ninsert x i element: Inserts an integer x into the array at the given index i.\nprint the array: Prints the array.\nremove x element: Removes an integer x from the array. If there is no x present, do nothing.\nremove i element: Removes the element at the given index i.\nreplace x y: Replaces the value x with y in the array.\n\nNote: x and y will be integers between 0 and N-1.\n\nInput:\nThe first line of input contains an integer N. The second line contains N space separated values of the array.\n\nOutput:\nprint the array\n\"\"\"\n\n\"\"\"\nYou are given an array of integers A. All elements of array A will be integers between 0 and N - 1, where 0 <= N <= 10^9. You have to print the minimum number of operations needed to obtain a sorted array from the input array A.\n\nInput:\nThe first line contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of a single line containing N, the size of array A.\n\nOutput:\nFor each test case, in a new line, print the minimum number of operations needed to obtain a sorted array from the array A.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 100\n0 <= A[i] <= 10^9\n\nExample:\nInput:\n2\n4\n4\n3\nOutput:\n2\n2\n\nInput:\n3\n5\n2 5 1 2\nOutput:\n0\n1\n2\n\"\"\"\n\n\"\"\"\nYou are given an array A of size N. The array contains all integers from 0 to N-1 (both included). You have to perform a series of operations on the array.\n\nThe following operations are possible:\n\ninsert x element: Inserts an integer x into the array.\nprint the array: Prints the array.\nremove x element: Removes an integer x from the array. If there is no x present, do nothing.\nreplace x with y: Replaces the value x with y in the array.\n\nNote: x and y will be integers between 0 and N-1.\n\nInput:\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of a single line containing N, the size of array A.\n\nOutput:\nFor each test case, in a new line, print the minimum number of operations needed to obtain a sorted array from the array A.\n\nConstraints:\n1 <= T <= 100\n1 <= N <= 10^9\n\nExample:\nInput:\n2\n4\n4\n3\nOutput:\n2\n0\n\nInput:\n3\n5\n2 5 1 2\nOutput:\n0\n1\n2\n\"\"\"\n\n\"\"\"\nYou are given an array A of size N. The array contains all integers from 0 to N-1 (both included). You have to perform a series of operations on the array.\n\nThe following operations are possible:\n\ninsert x element: Inserts an integer x into the array.\nprint the array: Prints the array.\nremove x element: Removes an integer x from the array. If there is no x present, do nothing.\nreplace x with y: Replaces the value x with y in the array.\n\nNote: x and y will be integers between 0 and N-1.\n\nInput:\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of a single line containing N, the size of array A.\n\nOutput:\nFor each test case, in"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2 3\n''') == '2'\nassert solution('''4\n1 2 1 3\n''') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 1 3') == 'none'\nassert solution('3\\n1 2 3') == '1 2 3'\nassert solution('2\\n1 1 2') == '1'"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2 3\n''') == '1'\nassert solution('''3\n1 2 3\n''') == 'none'\nassert solution('''4\n1 2 1 3\n''') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 3\") == \"1 2 3\"\nassert solution(\"3 1 1 2\") == \"none\"\nassert solution(\"4 1 2 1 3\") == \"none\""
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 2 3\n''') == '1'\nassert solution('''4\n1 1 2 1 3\n''') == 'none'\n"
    },
    {
        "number": 3645,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('3') == '2'\nassert solution('3') == '3'\nassert solution('3') == 'none'"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1\n2 1 0 1 2 3 3\"\"\") == \"5\"\nassert solution(\"\"\"3\n3 2 1 0\"\"\") == \"3\"\n\nimport sys\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"5\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n2 1 0 1 2 3 3') == '7'\nassert solution('5\\n2 1 0 1 2 3 3') == '4'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1 0 1 2 3 3') == '5'\nassert solution('6 3 4 7 1 2') == '11'\nassert solution('3 4 8 0') == '6'\nassert solution('2 5 3 4 5 5 5') == '9'\nassert solution('2 2 4 4 4 4 4 4') == '6'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n2 1 0 1 2 3 3\n''') == '5'\n\nassert solution('''\n5\n2 3 0 3 4 4\n''') == '4'\n\nassert solution('''\n15\n
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('6') == '6'\nassert solution('8') == '7'\nassert solution('10') == '9'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6\n2 1 0 1 2 3 3\n\"\"\") == \"5\"\nassert solution(\"\"\"\n3\n0 1 2\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n0 1 1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n0 1 1 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 1 1 1 2 2\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2 1 0 1 2 3 3\") == \"5\"\nassert solution(\"2\\n1 1 0 1 2 3 3\") == \"5\"\nassert solution(\"3\\n1 1 1 0 1 2 3 3\") == \"4\"\nassert solution(\"4\\n1 1 1 1 0 1 2 3 3\") == \"3\"\nassert solution(\"5\\n1 1 1 1 1 0 1 2 3 3\") == \"2\"\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 0 1 2 3\n''') == '5'\n"
    },
    {
        "number": 3646,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '5'\nassert solution('''\n3\n0 1 2\n''') == '3'\nassert solution('''\n8\n2 1 2 3 2 3 1\n''') == '4'\nassert solution('''\n3\n1 1 2 2\n''') == '0'\nassert solution('''\n5\n1 0 1 1 1\n''') == '5'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '5 6\\n'\n    '#####\\n'\n    '#...#\\n'\n    '#_###\\n'\n    '#__.#\\n'\n    '#####\\n'\n) == '-1 -1 -1 -1 -1\\n'\n\nassert solution(\n    '5 6\\n'\n    '#...#\\n'\n    '#_###\\n'\n    '#__.#\\n'\n    '#####\\n'\n) == '-1 -1 -1 -1 -1\\n'\n\nassert solution(\n    '5 6\\n'\n    '#####\\n'\n    '#...#\\n'\n    '#_###\\n'\n    '#__.#\\n'\n    '#####\\n'\n    '#...#\\n'\n) == '-1 4 5 6 -1\\n'\n\nassert solution(\n    '5 6\\n'\n    '#...#\\n'\n    '#_###\\n'\n    '#__.#\\n'\n    '#####\\n'\n) == '-1 4 5 6 -1\\n'\n\nassert solution(\n    '5 6\\n'\n    '#####\\n'\n    '#...#\\n'\n    '#_###\\n'\n    '#__.#\\n'\n    '#####\\n'\n    '#...#\\n'\n) == '-1 4 5 6 -1\\n'"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\\n#####') == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\nassert solution('5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\\n#####') == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#\\n#####\") == \"-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('3 3') == '3'\nassert solution('1 1') == '1'\nassert solution('4 1') == '0'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('2 2') == '0 0 0 0'\n\n---Input---\n4 6\n#####\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 6\") == \"-1 4 5 6 -1\"\nassert solution(\"5 5\") == \"-1 4 4 4 -1\"\nassert solution(\"3 3\") == \"-1 3 3 3 -1\"\nassert solution(\"2 2\") == \"-1 2 2 2 -1\"\nassert solution(\"1 1\") == \"-1 2 2 2 -1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == \"0 0 0 1 2 2\"\nassert solution(\"5 5\") == \"2 2 2 1 1\"\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6\\n#####\\n#...#\\n_###\\n_M.#\\n__.#') == '-1 -1 -1 -1 -1\\n-1 4 5 6 -1\\n-1 4 -1 -1 -1\\n-1 1 0 1 -1\\n-1 3 1 2 -1\\n-1 -1 -1 -1 -1'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '-1 -1 -1 -1 -1'\nassert solution('1 1') == '0'\nassert solution('2 2') == '0 1'\nassert solution('3 4') == '0 1 1 0'\nassert solution('3 8') == '0 1 2 3 4 5 6 7'\n"
    },
    {
        "number": 3647,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4\n...#\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == 'Impossible'"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '6'\n\nIn the first sample, the maximum estimate of the cost of connecting any two of the buildings is $1$.\n\nWhen any building $x$ connects to any building $y$ by a simple path, we call it a direct line. For example, if we have a building $1$ and a building $2$ that connect with each other, we call them a direct connection.\n\nThe network can satisfy the security measure if it is possible to connect all buildings in the network to each other such that the direct lines do not pass through any of the insecure buildings.\n\nThis example would not satisfy the security measure:\n\nWhen building $1$ connects to building $2$, we would only connect the buildings that have an insecure building. So when building $1$ connects to building $3$ and building $2$ connects to building $4$, both building $3$ and $4$ should connect with building $1$ and building $2$ (we do not connect them through any direct line).\n\nWhen building $1$ connects to building $2$ and building $3$ connects to building $4$ and building $5$ connects to building $6$, then building $1$ and $2$ should connect with building $3$ and building $4$ (we do not connect them through any direct line).\n\nWhen building $1$ connects to building $2$ and building $3$ connects to building $4$ and building $5$ connects to building $6$ and building $7$ connects to building $8$ and building $9$, then building $1$ and $2$ should connect with building $3$ and building $4$ (we do not connect them through any direct line).\n\nAnd when building $1$ connects to building $2$ and building $3$ connects to building $4$ and building $5$ connects to building $6$ and building $7$ connects to building $8$ and building $9$ and building $10$ connects to building $11$ and building $12$ connects to building $13$ and building $14$ then building $1$ and $2$ should connect with building $3$ and building $4$ (we do not connect them through any direct line).\n\nFinally, when building $1$ connects to building $2$ and building $3$ connects to building $4$ and building $5$ connects to building $6$ and building $7$ connects to building $8$ and building $9$ and building $10$ connects to building $11$ and building $12$ connects to building $13$ and building $14$ then building $1$ and $2$ should connect with building $3$ and building $4$ (we do not connect them through any direct line).\n\nExample 1:\n\nInput:\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\nSample Output:\n6\n\n-----\nSample Input:\n10 1\n1\n2\n1 2\n2\n1 2\n3\n1 3\n3\n1 4\n3\n4\n1 4\n5\n1 4\n6\n5\n6\n4\n1 5\nSample Output:\n9\n-----\n\n-----\n\n'''"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '6'\n'''\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Impossible\"\nassert solution(\"2\") == \"Impossible\"\nassert solution(\"3\") == \"Impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n\"\"\") == \"6\"\nassert solution(\"\"\"10 2 1\n1\n1 3 2\n1 4 2\n3 4 2\n4 5 2\n6 6 3\n7 8 2\n8 9 2\n9 10 2\n10 11 2\n\"\"\") == \"impossible\"\nassert solution(\"\"\"10 2 2\n1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\") == \"impossible\"\nassert solution(\"\"\"10 2 3\n1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\") == \"impossible\"\nassert solution(\"\"\"10 2 4\n1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n\"\"\") == \"impossible\"\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 6 1') == '6'\nassert solution('4 6 1') == 'impossible'\nassert solution('1') == 'impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 3') == 'Impossible'\nassert solution('4 2 1') == '8'\nassert solution('4 4 1') == 'Impossible'\n"
    },
    {
        "number": 3648,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2 1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '10'\n\nassert solution('''\n4 6 1\n1\n1 2 1\n1 3 1\n1 4 1\n2 3 2\n2 4 4\n3 4 3\n''') == '11'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('1 1 1 1') == '11111'\nassert solution('2 1 1 1') == '0110'\nassert solution('1 2 1 1') == '1100'\nassert solution('2 2 2 2') == '11101'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == \"01001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 2 1\") == \"01001\"\nassert solution(\"3 4 2 2\") == \"01100\"\nassert solution(\"3 4 2 3\") == \"01101\"\nassert solution(\"3 4 2 4\") == \"01110\"\nassert solution(\"3 4 2 5\") == \"01111\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(input))\n\"\"\""
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 4 2 1\n''') == \"01001\"\nassert solution('''\n2 4 1\n''') == \"10010\"\nassert solution('''\n3 4 1\n''') == \"10100\"\nassert solution('''\n4 1\n''') == \"10111\"\nassert solution('''\n5 4 3\n''') == \"101001\"\n\n'''\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(s) == \"01001\"\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('1 4 5 2') == '01100'\nassert solution('1 4 5 6') == '00100'\nassert solution('1 4 5 6 7') == '10101'\nassert solution('1 4 5 6 7 8') == '10110'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 2 1') == '01001'\nassert solution('4 2 5 8') == '10101'\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 2 1\n''') == '01001'\nassert solution('''\n3 5 1 3\n''') == '01011'\nassert solution('''\n4 7 1 1\n''') == '11111'\n'''\n"
    },
    {
        "number": 3649,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '01'"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 6') == 'possible'\nassert solution('3 4 6') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3') == 'possible'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3') == 'impossible'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 3\\n2 3') == 'impossible'"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 5 6') == 'possible'\nassert solution('6 5 6') == 'impossible'\n\n'''\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n1 2\n2 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n1 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n3 4 6\n1 1\n1 2\n2 2\n1 2\n2 3\n3 3\n3 4\n\"\"\") == \"impossible\""
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(r'''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'possible'\n\nassert solution(r'''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\n\nassert solution(r'''\n3 4 6\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\n''') == 'impossible'\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2\\n1 1\\n2 2') == 'possible'\nassert solution('3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n') == 'impossible'\nassert solution('1 3\\n2 2\\n1 2\\n3 2\\n') == 'impossible'\nassert solution('1 2\\n1 2\\n') == 'possible'\n\"\"\"\n\nn, m, b = map(int, input().split())\nboard = []\nfor _ in range(n):\n    board.append(list(input()))\nvisited = [[False for i in range(m)] for j in range(n)]"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\") == \"possible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n\") == \"impossible\"\nassert solution(\"3 4 6\\n1 1\\n1 2\\n2 2\\n2 3\\n3 3\\n3 4\\n4 4\") == \"impossible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"possible\"\nassert solution(\"1 2\") == \"impossible\"\nassert solution(\"2 3\") == \"impossible\"\nassert solution(\"2 1\") == \"impossible\"\nassert solution(\"3 3\") == \"possible\"\n"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'impossible'\n\nSample Input:\n3 4 5\n1 1\n1 2\n2 2\n2 3\n3 3\n3 4\nSample Output:\npossible\n< 1\n^ 2\n< 2\n^ 3\n< 3\n^ 4\n< 4\n^ 5\n< 5\n^ 6\n< 6\n^ 7\n< 7\n^ 8\n< 8\n^ 9\n< 9\n^ 10\n< 10\n^ 11\n< 11\n^ 12\n< 12\n^ 13\n< 13\n^ 14\n< 14\n^ 15\n< 15\n^ 16\n< 16\n^ 17\n< 17\n^ 18\n< 18\n^ 19\n< 19\n^ 20\n< 20\n^ 21\n< 21\n^ 22\n< 22\n^ 23\n< 23\n^ 24\n< 24\n^ 25\n< 25\n^ 26\n< 26\n^ 27\n< 27\n^ 28\n< 28\n^ 29\n< 29\n^ 30\n< 30\n^ 31\n< 31\n^ 32\n< 32\n^ 33\n< 33\n^ 34\n< 34\n^ 35\n< 35\n^ 36\n< 36\n^ 37\n< 37\n^ 38\n< 38\n^ 39\n< 39\n^ 40\n< 40\n^ 41\n< 41\n^ 42\n< 42\n^ 43\n< 43\n^ 44\n< 44\n^ 45\n< 45\n^ 46\n< 46\n^ 47\n< 47\n^ 48\n< 48\n^ 49\n< 49\n^ 50\n< 50\n^ 51\n< 51\n^ 52\n< 52\n^ 53\n< 53\n^ 54\n< 54\n^ 55\n< 55\n^ 56\n< 56\n^ 57\n< 57\n^ 58\n< 58\n^ 59\n< 59\n^ 60\n< 60\n^ 61\n< 61\n^ 62\n< 62\n^ 63\n< 63\n^ 64\n< 64\n^ 65\n< 65\n^ 66\n< 66\n^ 67\n< 67\n^ 68\n< 68\n^ 69\n< 69\n^ 70\n< 70\n^ 71\n< 71\n^ 72\n< 72\n^ 73\n< 73\n^ 74\n< 74\n^ 75\n< 75\n^ 76\n< 76\n^ 77\n< 77\n^ 78\n< 78\n^ 79\n< 79\n^ 80\n< 80\n^ 81\n< 81\n^ 82\n< 82\n^ 83\n< 83\n^ 84\n< 84\n^ 85\n< 85\n^ 86\n< 86\n^ 87\n< 87\n^ 88\n< 88\n^ 89\n< 89\n^ 90\n< 90\n^ 91\n< 91\n^ 92\n< 92\n^ 93\n< 93\n^ 94\n< 94\n^ 95\n< 95\n^ 96\n< 96\n^ 97\n< 97\n^ 98\n< 98\n^ 99\n< 99\n^ 100\n< 100\n^ 101\n< 101\n^ 102\n< 102\n^ 103\n< 103\n^ 104\n< 104\n^ 105\n< 105\n^ 106\n< 106\n^ 107\n< 107"
    },
    {
        "number": 3650,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == \"possible\"\nassert solution(\"3 4 3\") == \"impossible\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([0, 1, 2]) == \"2.0\"\nassert solution([0, 1, 2]) == \"2.0\"\nassert solution([0, 1, 2]) == \"2.0\"\nassert solution([0, 1, 2]) == \"2.0\"\nassert solution([0, 1, 2]) == \"2.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\nassert solution('10\\n2 1 1\\n10 10 10\\n10 10 10') == '21.000000'\nassert solution('15\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == '16.000000'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\\n\"\n    ) == \"2.0\"\nassert solution(\n    \"3\\n0 0 1\\n0 1 1\\n2 0 3\\n\"\n    ) == \"2.0\"\nassert solution(\n    \"2\\n0 0 1\\n0 1 1\\n\"\n    ) == \"1.41\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3\") == \"2.0\"\nassert solution(\"3\\n0 0 1\\n0 1 2\\n0 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 0 3\\n1 1 4\\n1 2 5\\n1 3 6\\n2 0 4\\n2 1 5\\n2 2 6\\n3 0 4\\n3 1 5\\n3 2 6\") == \"2.35185400390625\"\nassert solution(\"100\\n0 0 1\\n0 1 1\\n0 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 0 3\\n1 1 4\\n1 2 5\\n1 3 6\\n2 0 4\\n2 1 5\\n2 2 6\\n3 0 4\\n3 1 5\\n3 2 6\") == \"11.8819052734375\"\nassert solution(\"100\\n0 0 1\\n0 1 1\\n0 2 3\\n0 3 4\\n0 4 5\\n0 5 6\\n1 0 3\\n1 1 4\\n1 2 5\\n1 3 6\\n2 0 4\\n2 1 5\\n2 2 6\\n3 0 4\\n3 1 5\\n3 2 6\") == \"11.8819052734375\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n3 0 4\n3 1 4''') == \"7.0\"\nassert solution('''6\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n3 0 4\n3 1 4\n4 0 5\n4 1 5''') == \"5.0\"\nassert solution('''3\n0 0 1\n0 1 1\n2 0 3\n2 1 3''') == \"0.0\"\nassert solution('''4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n3 0 4\n3 1 4''') == \"4.0\"\nassert solution('''5\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n3 0 4\n3 1 4''') == \"4.0\"\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n0 0 1\n0 1 1\n2 0 3\n2 1 3''') == '1.0'\nassert solution('''3\n0 0 1\n0 1 1\n2 0 3\n2 1 3''') == '2.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0 1\\n0 1 1\\n2 0 3\\n2 1 3') == '2.0'\nassert solution('10\\n0 0 1\\n0 1 1\\n1 0 2\\n1 1 2\\n2 0 3\\n2 1 3\\n3 0 4\\n3 1 4\\n4 0 5\\n4 1 5\\n5 0 6\\n5 1 6\\n6 0 7\\n6 1 7\\n7 0 8\\n7 1 8\\n8 0 9\\n8 1 9') == '6.0'\n"
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n0 0 1\n0 1 1\n2 0 3\n2 1 3''') == \"2.0\"\n\nassert solution('''3\n0 0 1\n1 0 2\n2 0 3''') == \"5.0\"\n\nassert solution('''2\n0 0 1\n1 1 2''') == \"3.0\"\n\nassert solution('''2\n1 1 2\n2 2 1''') == \"3.0\""
    },
    {
        "number": 3651,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n2 3 1\n''') == '7.617948717948718'\nassert solution('''4\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n2 3 1\n''') == '5.25'\nassert solution('''5\n0 0 1\n0 1 1\n2 0 3\n2 1 3\n2 3 1\n''') == '5.25'"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4\\n1 2 3 4\\n1 2 3 4\\n2 3 4 5 6\\n3 4 5 6 7\\n') == '2'\nassert solution('10\\n4 3 2 1 5 8 7 6 9\\n4 5 1 1 3 4 7 6 8 9\\n5 7 4 8 9 1 2 3\\n') == '3'\nassert solution('6\\n5 6 4 4 1 5\\n5 5 4 5 4 5\\n5 4 5 4 5 5\\n4 4 5 5 5 5\\n4 5 4 5 5 5\\n') == '0'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 5 3 1\\n7 6\\n5 7\") == \"2\"\nassert solution(\"5\\n5 5 1 1\\n7 6\\n3 7 1 4\\n5 6 2\") == \"4\""
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"4\"\n\nIn the second sample input, Luka can delete the second, fifth and sixth columns. After deleting these and sorting each row, all three rows contain the numbers 1, 2, 5 and 6.\n\nSample Input:\n4\n3 2 5 4 6\n7 7 3 2\n2 5 3 6 7\nSample Output:\n2\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n4 2 5 1 6 8 7 9 5\n8 1 2 4 7 9 3 5 6\n3 7 4 1 5 6 2 8 9\n5 1 9 6 7 4 2 3 8\n4 7 1 2 9 3 5 6 8\n3 4 7 5 9 8 1 6 2\n5 4 5 1 5 4 3 7 9\n4 9 3 5 2 8 5 6 7\n3 4 4 1 2 9 5 7 6\n''') == \"4\"\nassert solution('''\n8\n5 7 2 4 3 6 1 5\n8 3 2 3 5 6 1 5\n2 7 1 4 4 6 5 3\n1 5 5 7 3 6 2 3\n4 3 5 5 2 6 2 4\n5 5 7 2 4 6 1 3\n5 5 6 5 4 2 4 1\n4 7 5 5 3 4 1 2\n''') == \"3\"\nassert solution('''\n2\n3 4\n2 3 1\n''') == \"0\"\nassert solution('''\n1\n3\n0\n''') == \"3\"\n'''"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n7\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == \"4\""
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 4 3 2 1 6 7\n5 5 1 1 3 4 7\n3 7 1 4 5 6 2\n''') == '4'\nassert solution('''\n10 20 20 30 40 40 50 50 60 50\n30 40 40 30 40 30 40 40 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50 50 50 50 50 50\n50 50 50 50 50"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7\\n5 4 3 2 1 6 7\\n5 5 1 1 3 4 7\\n3 7 1 4 5 6 2') == \"4\""
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3652,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n4 1 3 2 5 4') == '4'\nassert solution('4\\n4 3 2 1 6 7') == '3'\n\n'''''''\n\nN = int(input())\nlst = list(map(int, input().split()))"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('0') == '0'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '2'"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\nprint(solution())\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 1\n4 5\n''') == '3'\nassert solution('''\n50\n-20 -10\n''') == '20'\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n-10 0\\n-10 10\\n') == '2'\nassert solution('5\\n-9 -10\\n-9 -9\\n-9 -8\\n-8 -9\\n-8 -8\\n-7 -7\\n-7 -6\\n-6 -7\\n-6 -6\\n-5 -5\\n-5 -4\\n-4 -5\\n-4 -4\\n-3 -3\\n-3 -2\\n-2 -3\\n-2 -2\\n-1 -1\\n-1 -1\\n0 -0') == '4'\nassert solution('7\\n-3 -3\\n-2 -2\\n-1 -1\\n0 -0\\n1 -1\\n2 -2\\n3 -3\\n') == '3'\nassert solution('2\\n-1 -1\\n-1 -1') == '1'\nassert solution('3\\n-2 -2\\n-1 -1\\n0 -0') == '1'\n\"\"\""
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\n\"\"\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(r\"\"\"\n4\n-10 0\n-10 10\n\"\"\") == \"2\"\nassert solution(r\"\"\"\n8\n0 10\n1 2\n4 5\n3 6\n2 8\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n-10 0\n-10 10\n''') == '2'\nassert solution('''\n10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n-10 -10\n"
    },
    {
        "number": 3653,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('10') == '10'"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '0'\nassert solution('2 1') == '1'\nassert solution('2 3') == '2'\n\"\"\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 5''') == '0'\nassert solution('''1 10''') == '1'\nassert solution('''0 1''') == '1'\nassert solution('''10 10''') == '10'\nassert solution('''1 5''') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '0'\nassert solution('12 5') == '0'\nassert solution('123 5') == '0'\nassert solution('12 34 5') == '0'\nassert solution('12345 5') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\\\n1 5\n''') == '0'\nassert solution('''\\\n1 100\n''') == '100'\nassert solution('''\\\n10 20\n''') == '90'\nassert solution('''\\\n20 30\n''') == '90'\nassert solution('''\\\n20 30\n''') == '100'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '0'\nassert solution('20 2') == '1'\nassert solution('10 4') == '8'\nassert solution('20 100') == '23'\nassert solution('10 100') == '24'\nprint('Congratulations! All test cases passed.')\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 5') == '0'\nassert solution('3 10') == '0'\nassert solution('8 8') == '1'\n\"\"\"\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '0'\nprint(solution())"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 5\n''') == '0'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '0'\nassert solution('1 10') == '2'\nassert solution('100 1') == '100'\nassert solution('1 1000000') == '1'\n"
    },
    {
        "number": 3654,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 5\n''') == '0'''"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0\\n1 1\\n', 'First Test'\nassert solution('''3 3\n1 0 0\n0 1 0\n0 0 1\n''') == '0 0 1\\n1 1 0\\n', 'Second Test'\nassert solution('''3 2\n1 0\n0 1\n''') == '0 0\\n1 1\\n', 'Third Test'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n'\nassert solution('1 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '1 2'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1 2\n0 0\n0 1\"\"\") == \"0 0\\n1 1\"\nassert solution(\"\"\"2 2\n1 0\n0 1\"\"\") == \"1 1\"\nassert solution(\"\"\"3 3\n1 0 0\n0 1 0\n0 0 1\"\"\") == \"0 0 1\\n1 1 1\"\nassert solution(\"\"\"4 4\n0 0 0 0\n1 0 1 1\n1 1 1 1\n1 1 1 1\n0 0 0 0\"\"\") == \"0 0 1 1 1\\n1 0 1 1 1 1\"\nassert solution(\"\"\"4 4\n0 0 0 0\n0 0 1 0\n1 0 1 1\n1 0 1 1\n0 0 0 0\"\"\") == \"0 0 1 1 1 1\\n1 0 1 1 1 1\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n0 0\\n0 1\\n1 0\\n1 0\\n1 0\\n0 1\\n1 0\\n0 0 1\\n0 0 1\\n\") == \"0 0\\n1 1\"\nassert solution(\"2 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n0 0 1\\n\") == \"1 1\""
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2\\n1 0\\n0 1\\n3 3\\n1 0 0\\n0 1 0\\n0 0 1\\n') == '0 0\\n1 1\\n'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"0 0\\n1 1\"\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"\"\"0 0\"\"\".strip()\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '0 0\\n1 1'\nassert solution('2 2') == '0 0\\n1 1'\nassert solution('4 4') == '0 0 1 1'\nassert solution('8 8') == '0 0 1 1 2 2 2 2 2'\nassert solution('8 8') == '0 0 1 1 2 2 2 2 2'"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == '0 0\\n1 1'\n"
    },
    {
        "number": 3655,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n1 0\n0 1\n3 3\n1 0 0\n0 1 0\n0 0 1\n\"\"\") == \"0 0\\n1 1\\n\"\"\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2 0.950000') == \"44.975\"\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('0.700000 50') == '18.25'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3 0.950000') == '44.975'\nassert solution('0.700000 50') == '44.975'\nassert solution('1 2 0.950000') == '58.735'"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\") == \"44.975\"\nassert solution(\"10 0.950000\\n0.700000 50\") == \"4.700000\"\nassert solution(\"2 0.950000\\n0.700000 50\") == \"2.700000\"\n\"\"\"\nimport math"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 0.950000') == '44.975'\nassert solution('0.700000 50') == '44.976'\nprint(solution(input()))\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 0.950000\n0.700000 50\n''') == '44.975'\n\nassert solution('''\n1 0.950000\n0.700000 50\n''') == '44.975'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n'''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'First'\n\nassert solution(\n'''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'Second'\n\nassert solution(\n'''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'Third'\n\nassert solution(\n'''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'Fourth'\n\nassert solution(\n'''\n1 2 0.950000\n0.700000 50\n''') == '44.975', 'Fifth'"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0.950000\\n0.700000 50\\n\") == \"44.975\"\nprint(solution(input))\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2 0.950000\n0.700000 50''') == '44.975'\nassert solution('''1 2 0.950000\n0.700000 100''') == '44.975'\nassert solution('''1 2 0.950000\n0.700000 200''') == '44.84375'\nassert solution('''1 2 0.950000\n0.700000 300''') == '45.25'\nassert solution('''1 2 0.950000\n0.700000 400''') == '45.0'\n"
    },
    {
        "number": 3656,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 0.950000\\n0.700000 50') == '44.975'\nassert solution('1 2 0.950000\\n-1.0 1') == '-1.0'\nassert solution('1 2 0.950000\\n-2.0 2') == '-3.0'\nassert solution('1 2 0.950000\\n0.000001 2') == '0.000001'\nassert solution('1 2 0.950000\\n-1.0 1') == '-1.0'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"2\"\nassert solution(\"2 2\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\nSample Input:\n3 2 3\n1 1\n5 2\n1 3\n3\n3\n2\n1\nSample Output:\n2\n''') == '2'\n\nassert solution('''\n2 2 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\nSample Output:\nIMPOSSIBLE\n''') == 'IMPOSSIBLE'\n\nprint(solution('''\n4 4 4\n1 1 1\n4 4 4\n1 1 1\n4 4 4\nSample Output:\n2\n'''))"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('2 2 4') == '0'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 3\\n1 1\\n5 2\\n1 3') == '2'\nassert solution('3 1 4\\n2 2\\n4 2\\n2 4') == 'IMPOSSIBLE'\nassert solution('5 5 7\\n4 4\\n3 3\\n2 5\\n2 4') == '2'"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\") == \"2\"\nassert solution(\"3 2 4\") == \"IMPOSSIBLE\"\nassert solution(\"5 2 4\") == \"IMPOSSIBLE\"\nassert solution(\"5 2 3\") == \"2\"\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '2'\nassert solution('3 2 3') == 'IMPOSSIBLE'\nassert solution('3 2 2') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 1\\n3') == '2'\nassert solution('3 2\\n5 2\\n3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 3') == '2'\nassert solution('3 2 5') == '2'\nassert solution('1 1 5') == '2'\nassert solution('2 2 2') == '2'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 3\\n5 2\\n1 3') == '2'\nassert solution('3 2 3\\n1 1\\n5 2\\n1 3') == '2'\nassert solution('2 2 2\\n1 1\\n2 2\\n1 3') == 'IMPOSSIBLE'\nassert solution('3 2 3\\n1 1\\n5 2\\n1 3') == 'IMPOSSIBLE'"
    },
    {
        "number": 3657,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2 3\\n1 1\\n5 2\\n1 3\\n3\"\n    ) == \"2\"\n\nassert solution(\n    \"3 2 3\\n1 1\\n5 2\\n1 3\\n2\"\n    ) == \"IMPOSSIBLE\"\n\nassert solution(\n    \"3 2 3\\n1 1\\n5 2\\n1 3\\n1\"\n    ) == \"1\"\n\nassert solution(\n    \"3 2 3\\n1 1\\n5 2\\n1 3\\n1\"\n    ) == \"1\"\n\nassert solution(\n    \"3 2 3\\n1 1\\n5 2\\n1 3\\n2\"\n    ) == \"2\""
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '4.0'\nassert solution('1 2') == '4.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n1.0 3.0\\n2.0 1.0\\n3.0 2.0\\n2.0 3.0\\n3.0 2.0\\n') == '2.0'\nassert solution('3 3\\n0.0 0.0\\n3.0 3.0\\n1.0 1.0\\n4.0 4.0\\n2.0 3.0\\n2.0 4.0\\n') == '4.0'\nassert solution('5 5\\n0.0 0.0\\n5.0 5.0\\n1.0 1.0\\n4.0 4.0\\n3.0 3.0\\n2.0 4.0\\n3.0 3.0\\n') == '9.0'\nassert solution('12 12\\n0.0 0.0\\n12.0 12.0\\n1.0 1.0\\n4.0 4.0\\n3.0 3.0\\n2.0 4.0\\n3.0 3.0\\n') == '20.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == \"4.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == '4.0'\nassert solution('''20 1\n1.0 0.0\n1.0 1.0\n2.0 0.0\n2.0 2.0\n2.0 1.0\n4.0 4.0\n4.0 4.0\n5.0 5.0\n5.0 6.0\n6.0 5.0\n6.0 6.0\n6.0 6.0\n7.0 7.0\n7.0 7.0\n7.0 7.0\n8.0 8.0\n8.0 9.0\n9.0 8.0\n9.0 9.0\n10.0 10.0\n10.0 10.0\n11.0 11.0\n11.0 11.0\n12.0 12.0\n12.0 12.0\n12.0 12.0\n12.0 12.0\n12.0 12.0\n12.0 12.0\n12.0 12.0\n13.0 13.0\n13.0 13.0\n13.0 13.0\n14.0 14.0\n14.0 14.0\n14.0 14.0\n14.0 14.0\n15.0 15.0\n15.0 15.0\n15.0 15.0\n15.0 15.0\n16.0 16.0\n16.0 16.0\n16.0 16.0\n16.0 16.0\n17.0 17.0\n17.0 17.0\n17.0 17.0\n18.0 18.0\n18.0 18.0\n18.0 18.0\n18.0 18.0\n18.0 18.0\n19.0 19.0\n19.0 19.0\n19.0 19.0\n20.0 20.0\n20.0 20.0\n20.0 20.0\n20.0 20.0\n20.0 20.0\n20.0 20.0\n20.0 20.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21.0\n21.0 21."
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '4.0'\nassert solution('6 3\\n0.0 0.0\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '12.0'\nassert solution('20 20\\n0.0 0.0\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\\n') == '208.0'\nassert solution('4 3\\n0.0 0.0\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '14.0'\nassert solution('8 7\\n0.0 0.0\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '34.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0\n''') == \"4.0\"\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0') == '4.0'\nassert solution('3 3\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0') == '10.0'\nassert solution('1 1\\n0.0\\n0.0\\n1.0\\n1.0') == '2.0'\nassert solution('2 2\\n5.0 5.0\\n5.0 5.0') == '5.0'\nassert solution('3 3\\n3.0 2.0\\n2.0 2.0\\n2.0 2.0') == '3.0'\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '4.0'\n\n'''"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3\n0.0 6.0\n6.0 0.0\n6.0 6.0\n4.0 4.0\n10.0 4.0\n4.0 10.0''') == '4.0'''\n"
    },
    {
        "number": 3658,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n0.0 6.0\\n6.0 0.0\\n6.0 6.0\\n4.0 4.0\\n10.0 4.0\\n4.0 10.0\\n') == '4.0'\n\"\"\"\nimport math\nfrom itertools import permutations\nfrom functools import reduce"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('4\\n30 50\\n50 20\\n100 20\\n150 60') == '1000'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\nassert solution(\"\"\"\n4\n200 21\n180 29\n200 20\n180 27\n\"\"\") == \"25000\"\nassert solution(\"\"\"\n10\n120 25\n123 21\n113 20\n123 21\n123 21\n125 21\n125 21\n126 21\n127 21\n128 21\n129 21\n130 21\n\"\"\") == \"12000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('1\\n0 0') == '0'\nassert solution('5\\n3 2 1 2\\n4 5 6 7') == '1760'\nassert solution('4\\n15 20 5 10\\n10 5 10 20\\n20 5 10 10\\n15 5 10 20') == '6720'\n\"\"\"\n\nN = int(input())\nn = []\nfor i in range(N):\n    n.append(list(map(int, input().split())))\nresult = 0\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            if i+j+k!= N:\n                result = max(result, max(n[i]) * max(n[j]) * max(n[k]))\nprint(result)\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n4\n220 29\n195 20\n200 9\n180 30\n\"\"\") == \"18000\"\nassert solution(\"\"\"\n2\n2 2\n3 5\n\"\"\") == \"20\"\nassert solution(\"\"\"\n4\n200 200 200 200\n190 220 220 220\n220 220 220 220\n190 200 200 200\n\"\"\") == \"100000000\"\nassert solution(\"\"\"\n3\n1 1 1\n2 3 4\n\"\"\") == \"12300000\"\nassert solution(\"\"\"\n3\n10 10 10\n20 20 20\n30 30 30\n\"\"\") == \"12000000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"18000\"\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n220 29\n195 20\n200 9\n180 30\n''') == '18000'\nassert solution('''\n5\n180 20\n80 10\n200 6\n220 30\n''') == '46000'\n\n'''"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n220 29\\n195 20\\n200 9\\n180 30') == '18000'\nassert solution('2\\n180 20\\n140 30\\n190 60\\n200 9') == '20400'\nassert solution('3\\n150 30\\n100 60\\n140 30') == '36900'\n"
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"18000\"\n\n\"\"\""
    },
    {
        "number": 3659,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n200 9\n180 30\n\"\"\") == \"18000\"\n\nassert solution(\"\"\"\n3\n220 29\n195 20\n200 9\n\"\"\") == \"2250\"\n\nassert solution(\"\"\"\n4\n200 9\n180 30\n180 25\n\"\"\") == \"2200\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n\"\"\") == \"28\"\n\nassert solution(\"\"\"\nTICKERS 1\nERS 8\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\nBUYSTICKERS\n4\nBUYER 1\nERS 8\nTICKERS 1\n\"\"\") == \"28\"\n\nassert solution(\"\"\"\nBUYSTICKERS\n4\nBUYER 10\nERS 8\nTICKERS 1\n\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\nTICKERS 1\nERS 8\n\"\"\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'IMPOSSIBLE'\nprint(solution(input()))\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"28\"\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\nBUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\nassert solution('''\nBUYSTICKERS\n4\nBUYER 11\nSTICKY 11\nTICKERS 2\nERS 9\n''') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''BUYSTICKERS\n4\nBUYER 10\nSTICKY 10\nTICKERS 1\nERS 8\n''') == '28'\nassert solution('''ABC\n0\n\nABC\nABC\n\nABC\nABC\n\nABC\nABC\n''') == 'Impossible'\nassert solution('''BAA\n1\n\nBAA\nBAA\n\nBAB\nBAB\n\nBAB\nBAB\n''') == 'Impossible'\nassert solution('''AB\n2\n\nAB\nAB\n\nABC\nABC\nABC\nABC\n''') == 'Impossible'\nassert solution('''BAB\n2\n\nBAB\nBAB\n\nBAB\nBAB\n\nBAB\nBAB\n''') == 'Impossible'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('BUYSTICKERS') == '28'\nassert solution('TICKERS') == 'IMPOSSIBLE'\nassert solution('ERS') == '28'\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('BUYSTICKERS\\n') == '28'\nassert solution('STICKY\\nERS\\nBUYER\\nTICKERS 1\\n') == 'IMPOSSIBLE'\nassert solution('TICKERS 1\\n') == 'IMPOSSIBLE'\n\n---Input---\n-----Output-----\n-----Examples-----\nSample Input 1:\n----Sample Output 1----\nSample Input 2:\n----Sample Output 2----\nSample Input 3:\n----Sample Output 3----\nSample Input 4:\n----Sample Output 4----\nSample Input 5:\n----Sample Output 5----\nSample Input 6:\n----Sample Output 6----\n\nSample Output 1:\n109\n\nSample Output 2:\nIMPOSSIBLE\n\nSample Output 3:\n-\n\nSample Output 4:\n109\n\nSample Output 5:\nIMPOSSIBLE\n\nSample Output 6:\nIMPOSSIBLE\n\n---Input---\n-----Output-----\n-----Examples-----\nSample Input 1:\n----Sample Output 1----\nSample Input 2:\n----Sample Output 2----\nSample Input 3:\n----Sample Output 3----\nSample Input 4:\n----Sample Output 4----\nSample Input 5:\n----Sample Output 5----\nSample Input 6:\n----Sample Output 6----\nSample Input 7:\n----Sample Output 7----\nSample Input 8:\n----Sample Output 8----\nSample Input 9:\n----Sample Output 9----\nSample Input 10:\n----Sample Output 10----\n\nSample Output 1:\n-\n\nSample Output 2:\n-\n\nSample Output 3:\n-\n\nSample Output 4:\n-\n\nSample Output 5:\n-\n\nSample Output 6:\n-\n\nSample Output 7:\n-\n\nSample Output 8:\n-\n\nSample Output 9:\n-\n\nSample Output 10:\n-\n"
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"BUYSTICKERS\") == \"28\"\nassert solution(\"STICKY TICKERS\") == \"IMPOSSIBLE\"\nassert solution(\"TICKERS BUYER\") == \"IMPOSSIBLE\""
    },
    {
        "number": 3660,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"BUYSTICKERS\\n4\\nBUYER 10\\nSTICKY 10\\nTICKERS 1\\nERS 8\") == \"28\"\nassert solution(\"TICKERS 1\\nERS 8\\nTICKERS 1\\nERS 8\\nTICKERS 1\\nERS 8\") == \"IMPOSSIBLE\"\nprint(\"Checking done.\")\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == 'INDV 1'\nassert solution('1 1') == 'INDV 1'\nassert solution('2 1') == 'INDV 1'\nassert solution('3 1') == 'CORP 1'\nassert solution('4 2') == 'INDV 4'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5'"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 8') == 'INDV 1 CORP 1 INDV 2'\nassert solution('4 3 8') == 'INDV 1 CORP 1 INDV 2'\nassert solution('1 5 8') == 'INDV 1 CORP 1 INDV 2'\nassert solution('4 3 7') == 'CORP 1 INDV 1'\nassert solution('5 3 7') == 'CORP 1 INDV 1'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"CORP 1\"\n\nprint(solution(input()))"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nINDV 3\\nCORP 1\\nCORP 2\\nCORP 3'\nassert solution('1 1') == 'INDV 1'\nassert solution('2 1') == 'INDV 2'\nassert solution('3 1') == 'CORP 1'\nassert solution('4 2') == 'INDV 4'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\n\"\"\") == \"INDV 1 CORP 1 INDV 2 CORP 2 INDV 3 CORP 3 INDV 5 CORP 4\""
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 8') == 'INDV 1 CORP 1 INDV 4 CORP 2 INDV 5'\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 3 8\n1 1\n2 1\n3 1\n4 2\n5 2\n3 3\n4 3\n5 3\"\"\") == \"INDV 1 CORP 2 INDV 4 CORP 3 INDV 5 CORP 1\"\n"
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 8') == 'INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\\nCORP 1'\nassert solution('1 1\\n2 1\\n3 1') == 'INDV 1\\nINDV 2\\nCORP 2'\n\"\"\""
    },
    {
        "number": 3661,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\\n1 1\\n2 1\\n3 1\\n4 2\\n5 2\\n3 3\\n4 3\\n5 3\") == \"INDV 1\\nINDV 2\\nCORP 1\\nINDV 4\\nCORP 2\\nINDV 3\\nCORP 3\\nINDV 5\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10 1\n1\n0\n10\n10\n''') == '2.4142135624'\nassert solution('''\n20\n5\n4\n0\n10\n''') == '14.142135624'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1.0'\nassert solution('3') == '2.5'\nassert solution('4') == '1.8'\nassert solution('5') == '3.6'\nassert solution('6') == '3.9'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2.4142135624\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n10 1\n1\n0\n10\n10\n''') == '2.4142135624'\n\nassert solution('''\n3\n5 6\n1\n0\n2\n''') == '10.0'\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10 1\\n1\\n0\\n10\\n10\\n\") == \"2.4142135624\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n10 1\\n0') == '2.4142135624'\nassert solution('4\\n15 1\\n10') == '3.7143222936'\nassert solution('6\\n1 1\\n1') == '0.0'\nassert solution('5\\n10 1\\n10') == '1.2147483648'\n\nSTDIN = \"\"\"\n5\n10 1\n0\n10\n10\n10\n10\n\"\"\"\n\nEXPECTED_RESULT = \"\"\"\n1.2147483648\n\"\"\"\n\nprint('TESTS:')\nprint(f'SOLUTION: {solution(STDIN)}')\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4\n10 1\n1\n0\n10\n10\n\"\"\") == \"2.4142135624\"\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '2.82842712475'\nassert solution('5') == '2.5'"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n10 1\\n1\\n0\\n10\\n10\\n') == '2.4142135624'\nprint(solution('''\n3\n10 1\n1\n0\n10\n10\n'''))\n"
    },
    {
        "number": 3662,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"2.4142135624\"\nassert solution(\"10 1\") == \"2.0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"10 0\") == \"0\"\nassert solution(\"10 10\") == \"2.0\""
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n3 1 5\\n2 1\\n5 0\\n1 3\") == \"15\"\n\n'''"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n    ''') == '15'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '0'\nassert solution('2') == '0'\nassert solution('2') == '0'\nassert solution('3') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\n\n[Finished in 0.1s]\n'''"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\n\"\"\"\n--- Part Two ---\n\nYou notice that your fleet is not meeting your captain's standards and you must find a way to get your people to the other side.\n\nHowever, the world is too small to move more armies, so the captain decides to build a fleet of only 2 small cruisers that will take the enemy's ships and deliver them to the other side.\n\nWhile you are at it, you note that the cruisers are smart enough to not only take in the enemy's fleet, but also place their own on a grid. You are also not sure exactly how they are going to move the ships to their destination, but you are quite confident that they have their orders laid out and it will be no different than what you expect.\n\nHere is the fleet layout of your world. The cruisers start at $1$ and move $n$ units at a time. Each cruiser moves vertically and horizontally in a 1x1 grid, from left to right and top to bottom, and captures the top left, top middle, top right, and bottom left points of the attack square of the ship. The attack square is always 1 unit by 1 unit.\n\nBecause your ships are much larger than the cruiser, you need to give each cruiser an offset, so that the ship can move in the same way as the cruiser does. The offset does not affect how the ships move, only how the attack square is positioned. So, in the above example, the attack square for the cruiser is just to the right of the ship.\n\nWhile the attack squares are positioned in a grid, they are not aligned with anything. What is the minimum total number of units that you need to move your ships to match your fleet?\n\n-----Input-----\nThe first line contains an integer $n$ (1 \\le n \\le 100).\n\nThe next $n$ lines contain $n - 1$ integers $u, v, c$ (1 \\le u, v, c \\le n$), indicating that there is a bidirectional route connecting nations $u$ and $v$ with a cost $c$. For example, the first line contains $2$, and the second line contains $1, 2, 3$ indicating that there is a bidirectional route connecting nations 1 and 2, with a cost of $3$.\n\nThe next line contains an integer $m$ (1 \\le m \\le 100000), indicating how many ships you need to move in order to conquer the world.\n\nThe last line contains $m$ integers $x_ i$ and $y_ i$, indicating that there are currently $x_ i$ armies in nation $i$, and you need at least $y_ i$ armies to end up in that nation in the final configuration. The total number of armies (the sum of the $x_ i$ values) is at least the sum of the $y_ i$ values, and no more than $10^6$.\n\n-----Output-----\nDisplay the minimum number of units needed to place your fleet so that there are at least $y_ i$ armies in nation $i$ for all $i$.\n\n\"\"\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n1\n10 10\n10 10\n''') == '20'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n2\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '15'\nassert solution('''\n5\n2 3 2 2\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n0 0 0 0\n''') == '18'\nassert solution('''\n4\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n''') == '21'\n"
    },
    {
        "number": 3663,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2 5\n3 1 5\n2 1\n5 0\n1 3\n\"\"\") == \"15\"\nassert solution(\"\"\"\n5 0\n1 3\n\"\"\") == \"16\"\nassert solution(\"\"\"\n1 5\n3 1\n2 2\n\"\"\") == \"9\"\nassert solution(\"\"\"\n2 4\n1 1\n1 1\n\"\"\") == \"11\"\nassert solution(\"\"\"\n1 5\n3 1\n2 2\n\"\"\") == \"8\"\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 5 3 3 4\") == \"...ABC\"\nassert solution(\"5 5 2 3 1\") == \"...ABC...\"\nassert solution(\"5 5 1 3 2\") == \"...ABC..\"\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5 3 3 4\") == \"BCD.D@\"\nassert solution(\"5 5 5 5 5\") == \"B@DDDD@DDDDDDDDDDDDDDDDDDDDDDDDD\"\nassert solution(\"5 10 10 10 10\") == \"BABCABBCABCD\"\nassert solution(\"1 0 0 0\") == \".\"\n\"\"\""
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n'''\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 3 3 4') == '...\\n..BBC\\n..A.C\\n....C\\n@DDDD'\nprint(solution('1 1 2 3 4'))\n'''"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 5 3 3 4\n@AAA\n..BBC\n..A.C\n....C\n@DDDD\n''') == '@AAA\\n.BBC\\n.A.C\\n....C\\n@DDDD'\nassert solution('''\n5 5 3 3 5\n.....\n.....\n.....\n....C\n''') == '@AAA\\n.BBB\\n.AAA\\n.BBB\\n@CCC'\nassert solution('''\n5 5 1 1 5\n.##..\n.###.\n..#..\n..#..\n.###.\n''') == '@AAA\\n.AAA\\n.##..\\n.####\\n@CCC'\nassert solution('''\n10 10 1 1 5\n@A..#\n@A..#\n@A..#\n.A...\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A..#\n@A"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 5 3 3 4\\n\") == \"....C\"\nassert solution(\"5 5 3 3 5\\n\") == \".....\\n.@DDD\\n..A.C\\n....C\"\nassert solution(\"10 20 10 20 30\\n\") == \"........\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\n@.@.@.@\\"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD''') == '@DDDD'\nassert solution('''5 5 3 3 4\n.....\n..BBC\n..A.C\n....C\n@DDDD\n@.A.B\n@.C.D\n@.B.A\n@.D.C\n@.D.B\n@.B.A''') == '@DDDD@.A.B@.C.D@.B.A'"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3') == '@...@'\nassert solution('5 5 3 3') == '.....'\nassert solution('1 1 5 1') == 'A...A'\nassert solution('3 5 3 3') == '@....@'\n\"\"\"\n\n\nimport itertools\nimport math\n\n\nclass Solution:\n    def solve(self, r, c, i, j, n):\n        i -= 1\n        j -= 1\n        step_size = 1\n        res = [['.' for _ in range(c)] for _ in range(r)]\n        while step_size <= n:\n            for x in range(r):\n                for y in range(c):\n                    if x == i and y == j:\n                        res[x][y] = '@'\n                    else:\n                        if (x == i or x == i + 1) and (y == j or y == j + 1):\n                            res[x][y] = '.'\n                        elif (x == i + 1 or x == i + 2) and (y == j + 1 or y == j + 2):\n                            res[x][y] = '.'\n                        else:\n                            res[x][y] = '@' if (x == i or x == i + 1) and (y == j or y == j + 1) else '.'\n            step_size += 1\n            i += 1\n            j += 1\n        return '\\n'.join([''.join(r) for r in res])\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 4 3 4') == '....ACB\\n..BBBC\\n...BCB\\n.....'\nassert solution('5 5 3 2') == '......\\n......\\n......\\n......'\nassert solution('4 4 3 5') == '....ACB\\n..BBBC\\n...BCB\\n.....'\nassert solution('5 5 3 2 3') == '....ABC\\n..BBBC\\n...CCB\\n.....'\nassert solution('5 5 2 2') == '......\\n......'\n"
    },
    {
        "number": 3664,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 5 3 3 4\n''') == '.....\\n..BBC\\n..A.C\\n....C\\n@DDDD\\n'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '001\\n001\\n001\\n111\\n200\\n'\n\nassert solution('''\n5 3\n111\n001\n000\n111\n000\n''') == '001\\n001\\n001\\n111\\n200\\n'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"5 1\") == \"100\"\nassert solution(\"5 2\") == \"010\"\nassert solution(\"5 3\") == \"001\"\nassert solution(\"5 4\") == \"001\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 3') == '1 3'\nassert solution('5 3') == '001'\nassert solution('6 4') == '001'\nassert solution('11 5') == '001'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"5 4\") == \"001\"\nassert solution(\"5 5\") == \"001\"\nassert solution(\"5 6\") == \"001\"\nassert solution(\"5 7\") == \"001\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 3\n111\n001\n000\n111\n000\nSample Input 2:\n5 3\n100\n010\n100\n010\n000\nSample Output 2:\n010\n010\n000\n010\n100\n''') == '100010'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n111\n001\n000\n111\n000''') == '001000001101001010100101000000100100'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '001000001101001010100101000000100100'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '001000001101001010100101000000100100'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '001000001101001010100101000000100100'\nassert solution('''5 3\n111\n001\n000\n111\n000''') == '001000001101001010100101000000100100'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3') == '21\\n21\\n21'\nassert solution('1\\n2\\n4') == '21\\n4\\n4'\nassert solution('1\\n2\\n4') == '22\\n4\\n4'\nassert solution('1\\n3\\n4') == '231\\n4\\n4'\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3\\n100 200\\n10 30\\n8 5\\n7 6\\n4 3\\n1 2') == '100 200\\n10 30\\n8 5\\n7 6\\n4 3\\n1 2'"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"001\"\nassert solution(\"10 10\") == \"110\"\nassert solution(\"11 0\") == \"111\"\nassert solution(\"111 1\") == \"011\"\nassert solution(\"0 1\") == \"001\"\n"
    },
    {
        "number": 3665,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n2 3 4 5\") == \"123345\"\nassert solution(\"3 1\\n7 3 2 6 5\") == \"132345\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10 20\"\nassert solution(\"19/14\") == \"14 15 14 13 7 2\"\nassert solution(\"4/3\") == \"4 5 6 7 8 9 10\"\nassert solution(\"20/7\") == \"7 8 9 10 11 12 13\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5/4\n10/1\n13/2\n12/3\n10/2\n''') == '10 14'\nassert solution('''7/8\n2/1\n3/5\n1/3\n5/7\n''') == '7 4 8'\nassert solution('''18/4\n1/1\n4/7\n3/8\n17/13\n''') == '4 7 8 17'\nassert solution('''4/4\n2/1\n3/1\n1/2\n3/2\n''') == '2 3'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10 1'\nassert solution('19/14') == '19 14'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '20 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4/3\") == \"1 1 1 2\"\nassert solution(\"20/13\") == \"7 1 1 5 4 2\"\nassert solution(\"10/7\") == \"14 2 2 1 5 3\"\nassert solution(\"20/17\") == \"15 7 1 6 4 2\"\nassert solution(\"19/2\") == \"7 9 9 1 5 4\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(None) == \"impossible\"\nassert solution(\"19/13\\n10/1\") == \"20 20\"\nassert solution(\"19/14\\n10/1\") == \"19 20\"\nassert solution(\"4/3\\n20/7\") == \"15 15 14 13 7 2\"\nassert solution(\"20/7\\n19/13\") == \"17 15 14 13 7 2\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '19 20'\nassert solution('4/3') == '20 7 13'\nassert solution('20/7') == '20 15 14 13 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"19/13\\n10/1\\n19/14\\n4/3\\n20/7\\n19/7\\n20/13\\n19/15\\n10/7\\n20/17\\n19/2\\n19/17\\n\") == \"19 20\\n17 15 14 13 7 2\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"19/13\") == \"19 20\"\nassert solution(\"10/1\") == \"10 20\"\nassert solution(\"19/14\") == \"19 17\"\nassert solution(\"4/3\") == \"4 7 5 6\"\nassert solution(\"20/7\") == \"17 20 13 13 7\"\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '19'\nassert solution('4/3') == '4 3'\nassert solution('20/7') == '20 7'\n"
    },
    {
        "number": 3666,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('19/13') == '19 20'\nassert solution('10/1') == '10'\nassert solution('19/14') == '10'\nassert solution('4/3') == '20'\nassert solution('20/7') == '20'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"possible\"\nassert solution(\"2 0\") == \"possible\"\nassert solution(\"2 1\") == \"impossible\"\nassert solution(\"3 2\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"possible\"\nassert solution(\"1 2 1\") == \"impossible\"\nassert solution(\"2 1 2 1\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 1\n0 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"possible\"\n\nassert solution(\"\"\"\n3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n4 4 4\n5 0 5\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n4 4 4\n5 0 5\n6 0 6\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"\n5 4\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n4 4 4\n5 0 5\n\"\"\") == \"impossible\""
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"impossible\"\nassert solution(\"3 3\") == \"possible\"\n\nassert solution(\"2 2\") == \"possible\"\nassert solution(\"1 2 3\") == \"possible\"\nassert solution(\"2 2 2\") == \"impossible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3''') == 'possible'\n'''))"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n''') == 'impossible'\n\nassert solution('''4 2\n0 0\n0 2\n2 0\n3 0 3\n''') == 'possible'\n\nassert solution('''5 2\n0 0\n0 2\n2 0\n3 0 3\n3 2 2\n3 2 2\n''') == 'possible'\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n0 0\n0 2\n2 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"possible\"\nassert solution(\"\"\"\n2 1\n0 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1\n1 1\n2 3\n1 3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 1\n1 1\n2 3\n1 3\n\"\"\") == \"impossible\"\nassert solution(\"\"\"\n3 2\n0 0\n1 2 3\n2 2 2\n3 0 3\n\"\"\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"possible\"\nassert solution(\"5 5\") == \"possible\"\nassert solution(\"2 2\") == \"impossible\"\nassert solution(\"2 2 2 2\") == \"impossible\"\nassert solution(\"3 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n0 0\\n0 2\\n2 0\\n1 2 3\\n2 2 2\\n3 0 3\") == \"possible\"\n"
    },
    {
        "number": 3667,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"impossible\"\nassert solution(\"3 3\") == \"possible\"\nassert solution(\"3 1\") == \"impossible\""
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == '4'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2\n2\n2''') == '4'\nassert solution('''4\n2\n3\n2\n''') == '4'\nassert solution('''3\n1\n1\n3\n''') == '4'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '4'\nassert solution('1 1') == '1'\nassert solution('2 2') == '2'\nassert solution('3 5') == '5'\nassert solution('4 2') == '4'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n2\\n1\\n') == '4\\n'\nassert solution('2\\n2\\n3\\n1\\n') == '3\\n'\nassert solution('2\\n3\\n3\\n1\\n') == '2\\n'\nassert solution('3\\n3\\n3\\n2\\n') == '2\\n'\nassert solution('4\\n4\\n4\\n3\\n') == '3\\n'"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"4 2\") == \"4\"\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2\\n3\\n') == '4'\nassert solution('5 4\\n3 4\\n2 3\\n1\\n') == '5'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2\\n2\\n') == '4'\nassert solution('10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n') == '20'\nprint(solution(*input().split()))"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 2\n2\n1\n''') == '4'\nassert solution('''\n4 5\n2\n3\n4\n''') == '6'\nassert solution('''\n4 4\n1\n1\n2\n1\n''') == '4'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2\\n1 2') == '1 2'\nassert solution('1 2\\n2 3') == '2 3'\nassert solution('1 2\\n3 4') == '2 4'\nassert solution('1 3\\n3 2') == '1 3'\nassert solution('2 5\\n3 2') == '2 3'\n"
    },
    {
        "number": 3668,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == '4'\nassert solution('4 4') == '4'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 1\n1 2\n1 3\n1 4\n''') == 'Slavko'\n\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 4\n''') == 'Slavko'\n\nassert solution('''\n6\n1 1\n1 2\n1 3\n1 4\n2 4\n''') == 'Mirko'\n\nassert solution('''\n7\n1 2\n1 3\n1 4\n2 4\n3 4\n4 4\n''') == 'Mirko'\n\nassert solution('''\n8\n1 2\n1 3\n1 4\n2 4\n3 4\n4 4\n5 4\n''') == 'Slavko'"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n1 4\\n1 5\\n') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\nassert solution('3\\n0 1\\n1 2\\n1 3') == 'Slavko'\nassert solution('3\\n1 1\\n1 2\\n1 3') == 'Slavko'\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\nassert solution('5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1') == 'Slavko'\nassert solution('8\\n2 1\\n2 2\\n2 3\\n2 4\\n2 5\\n3 1\\n3 2\\n3 3') == 'Mirko'\n\"\"\"\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2\\n1 2\\n1 2\\n1 2\\n') == 'Slavko'\nassert solution('3\\n1 2\\n1 2\\n1 2\\n') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2\\n1 2') == 'Mirko'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3') == 'Mirko'\nassert solution('3\\n1 1\\n1 2\\n1 3') == 'Slavko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'Mirko'"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == 'Slavko'\nassert solution('10') == 'Mirko'\n"
    },
    {
        "number": 3669,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n1 2\") == \"Slavko\"\nassert solution(\"3\\n0 1\\n1 2\\n0 3\") == \"Mirko\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\") == \"2 4\"\nassert solution(\"1\\n100\\n400\") == \"2 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 2 3 4\"\nassert solution(\"5 4\") == \"2 4\"\nassert solution(\"1 2 3 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n5\n1000000000\n''') == '2 4'\nassert solution('''\n2\n100000000000\n''') == '2 4'\nassert solution('''\n5\n10000000000\n''') == '4 8'\nassert solution('''\n3\n
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2 4'\nassert solution('4') == '1 4'\nassert solution('5') == '1 5'\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n\") == \"2 3\"\nassert solution(\"4\\n8\\n\") == \"4 8\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"2 4\"\nassert solution(\"3 6\") == \"2 3\"\nassert solution(\"12 34\") == \"2 3 4\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n6\\n34\\n38') == '2 4'\n\"\"\""
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n6\n34\n38\n''') == '2 4'\n\nprint(solution('''\n1\n8\n10\n'''))\nprint(solution('''\n2\n4\n3\n'''))\nprint(solution('''\n3\n8\n10\n'''))\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3\n6\n34\n38\"\"\") == \"2 4\"\nprint(solution(\"\"\"3\n6\n34\n38\"\"\"), \"2 4\")\nassert solution(\"\"\"1\n10\n34\n38\n23\"\"\") == \"1 2 3\"\nprint(solution(\"\"\"1\n10\n34\n38\n23\"\"\"), \"1 2 3\")\nassert solution(\"\"\"1\n10\n34\n38\n23\"\"\", \"\"\"4\n5\n6\n7\n8\n9\"\"\") == \"4 5 6 7 8 9\"\nprint(solution(\"\"\"1\n10\n34\n38\n23\"\"\", \"\"\"4\n5\n6\n7\n8\n9\"\"\"), \"4 5 6 7 8 9\")\n"
    },
    {
        "number": 3670,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n4\\n2\\n3') == '2 4'\nassert solution('3\\n10\\n2\\n5') == '2 4'\nassert solution('5\\n2\\n2\\n2') == '2'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.read()) == \"12\""
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '12'\nassert solution('2') == '2'\nassert solution('2') == '2'"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''5\n8 10 2 1000000 30556926000\n''') == '12'\nprint('All test cases passed')"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n10000 400000 500000 900000\\n\") == \"12\"\nassert solution(\"5\\n8 10 2 1000000 30556926000\\n\") == \"12\""
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n4 2 5 10\n5 2 5 10\n5 3 4 4\n5 3 4 6\n5 4 3 5\n''') == '12'\nassert solution('''7\n1000000 2000000 1000000\n1000000 2000000 1000000\n1000000 2000000 2000000\n1000000 2000000 1000000\n1000000 2000000 1000000\n1000000 2000000 1000000\n1000000 2000000 1000000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(samples[0]) == '12'\nassert solution(samples[1]) == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n10000 400000 500000 900000\n''') == '12'\nassert solution('''\n5\n8 10 2 1000000 30556926000\n''') == '12'\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"12\"\n"
    },
    {
        "number": 3671,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"10\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('5 5') == 'YES'\nassert solution('5 5') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\nassert solution('''\n6 6\n0\n1 2 0\n1 3 0\n1 4 0\n1 5 0\n2 4 0\n2 5 0\n3 4 0\n3 5 0\n4 5 0\n''') == 'NO'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('8 8\\n0\\n2 4 0\\n1 8 0\\n8 5 0\\n4 3 7 0\\n5 2 6 0\\n1 6 0\\n7 3 0\\n') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'YES'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"6 4\") == \"NO\""
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8 8') == 'YES'\nassert solution('10 10') == 'NO'"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n8 4\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n8 5\n0\n1 6 0\n7 3 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3672,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n8 8\n0\n2 4 0\n1 8 0\n8 5 0\n4 3 7 0\n5 2 6 0\n1 6 0\n7 3 0\n''') == 'YES'\n'''"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 2') == '5 6 1 2 3 4'"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"5 6 1 2 3 4\"\nassert solution(\"6 5\") == \"6 5 4 1 2 3\"\nassert solution(\"6 6\") == \"5 6 1 2 3 4\"\nassert solution(\"6 10\") == \"6 6 1 2 3 4\"\nassert solution(\"6 1\") == \"6 6 1 2 3 4\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '5 6 1 2 3 4'\nassert solution('6 2') == '5 6 1 2 3 4 5'\nassert solution('6 0') == 'Impossible'\nassert solution('6 1') == 'Impossible'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 2') == '5 6 1 2 3 4'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n4 5 2 1 3\\n3 4 2 5 1\\n1 2 3\\n3 4 5\\n3 5 4\\n1 2\\n3 4\\n1 3\\n2 3\\n3 3\\n3 4\\n4 4\\n4 5\\n5 5\\n4 5\\n5 5') == '1 2 3\\n4 5 4\\n4 5 5\\n1 2 3\\n3 4 5\\n2 3 4\\n3 4 5\\n'\nassert solution('4\\n4 4 2 1 3\\n3 4 2 2 1\\n2 3 3 1\\n1 3 4 1\\n3 2 3 1\\n1 2 3 1\\n2 3 2 1\\n1 4 4 1\\n4 1 2 1\\n1 2 1 1\\n2 2 1 1\\n3 2 1 1\\n3 1 3 1\\n') == '1 2 3\\n2 1 4\\n4 3 1\\n3 2 1\\n3 1 2\\n4 1 1\\n1 4 2\\n'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n3 4 5 6 1 2''') == '5 6 1 2 3 4'\n'''\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n6 2\n3 4 5 6 1 2\n\"\"\") == \"\"\"\n5 6 1 2 3 4\n\"\"\"\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n3 4 5 6 1 2''') == '5 6 1 2 3 4'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('''4\n3 2 1 1''') == '3 2 1 1'\n"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n3 4 5 6 1 2\n''') == '5 6 1 2 3 4'\n\nassert solution('''\n4 4\n4 6 5 1 2 3\n''') == '4 6 5 1 2 3 4'\n\nassert solution('''\n4 2\n3 4 5 6 1 2\n''') == 'Impossible'\n\nassert solution('''\n4 5\n6 1 2 3 4 5\n''') == 'Impossible'\n\nassert solution('''\n4 5\n3 4 5 6 1 2\n''') == 'Impossible'"
    },
    {
        "number": 3673,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '5 6 2 3 4 1'\nassert solution('10 10') == '10 11 12 13 14 15 16 17 18 19 20'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('5 2 8 4 1') == 'IMPOSSIBLE'\nassert solution('1 1 1 1') == '1'\nassert solution('1 2 3 4') == 'IMPOSSIBLE'\nassert solution('2 2 2 2') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2 8 4\n''') == \"20512\"\nassert solution('''\n5 2 8 4\n''') == \"IMPOSSIBLE\""
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 8 4') == '20512'\nassert solution('5 2 8 4') == '20512'\nassert solution('1 3 7 4') == 'IMPOSSIBLE'\nassert solution('4 1 7 4') == '4'\nassert solution('4 5 7 4') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 2 5 4\n''') == '1234'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2 8 4''') == '20512'\nassert solution('''6 3 2 6''') == '2224'\nassert solution('''1 1 2 2''') == '2'\nassert solution('''1 8 5 2''') == '2250'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('1 10 3 5') == '1120'\nassert solution('10 5 10 7') == 'IMPOSSIBLE'\nassert solution('100000 8 8765') == 'IMPOSSIBLE'\nassert solution('6 6 4 4') == '6134'"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2 8 4') == '20512'\nassert solution('0 2 8 4') == '20412'\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"IMPOSSIBLE\"\nprint(solution(input))\n'''\n\nm, n, p, q = map(int, input().split())\n\nfor i in range(p, p + m):\n    for j in range(q, q + n):\n        if (str(i)[:2] == str(j)[:2]):\n            print(str(i) + str(j))\n            break\n    else:\n        print('IMPOSSIBLE')\n"
    },
    {
        "number": 3674,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 2 8 4\") == \"20512\"\nassert solution(\"10 5 8 4\") == \"1018\"\nassert solution(\"15 1 8 4\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 3\nBAC\nABC\n''') == \"2\"\nassert solution('''\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n''') == \"3\""
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n2 3\nBAC\nABC\n    \"\"\",\n    \"BAC\",\n) == 2, \"First\"\nassert solution(\n    \"\"\"\n3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n    \"\"\",\n    \"ADBGHFCE\",\n) == 3, \"Second\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 8\") == 3\nassert solution(\"3 1\") == 1\nassert solution(\"6 1\") == 1\nassert solution(\"5 8\") == 3\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\nBAC\nABC\n''') == '2'\n\nprint(solution('''3 8\nHGBDFCAE\nADBGHFCE\nHCFGBDAE\n'''))\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3') == 2\nassert solution('3 8') == 3"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABBC\") == \"2\"\nassert solution(\"AAABBBBCCCCDDEEEE\") == \"5\"\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n\n'''\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 8') == '3'\n"
    },
    {
        "number": 3675,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2') == 2\nassert solution('2 3') == 2\nassert solution('3 4') == 1\nassert solution('4 5') == 0\nassert solution('5 6') == 0\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4 5\n1\n1\n1\n1\n''') == '3'\nassert solution('''\n3 4\n1\n1\n1\n1\n''') == '3'\nassert solution('''\n3 3\n1\n1\n1\n''') == '2'\nassert solution('''\n5 5\n1\n1\n1\n1\n''') == '2'\nassert solution('''\n5 6\n1\n1\n1\n1\n1\n''') == '4'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\nprint(solution())\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('3 3') == '6'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 1') == '1'\nassert solution('3 5') == '31'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"3\"\nassert solution(\"5 5\\n2 2\") == \"9\"\nassert solution(\"5 5\\n1 1\") == \"0\"\nassert solution(\"5 5\\n1 1\\n0 0\") == \"10\"\nassert solution(\"4 4\\n1 2\\n2 1\\n2 1\") == \"6\"\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 1') == '1'\nassert solution('4 3') == '4'\nassert solution('5 5') == '6'"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '3'\nassert solution('1 1') == '3'\nassert solution('1 1') == '3'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('4 4') == '6'\nassert solution('4 4') == '6'\nassert solution('5 5') == '18'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '3'\nassert solution('3 1') == '3'\nassert solution('5 7') == '14'\nassert solution('5 5') == '10'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 3676,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '3'"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '3'\nassert solution('10 5') == '4'\nassert solution('1 1') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 3') == '3'\nassert solution('10 2') == '2'\nassert solution('5 5') == '5'\nassert solution('1 2 3 4 5') == '1'\nassert solution('0 1 2') == '1'\n\"\"\""
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\") == \"3\"\nassert solution(\"10 10\\n1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n2 1 2\\n3 0 2 3\\n3 0 1 4\\n2 1 4\\n2 2 3') == '3'\nassert solution('5 6\\n0 1 4\\n2 3 3\\n3 4 3\\n4 1 2\\n3 2 1\\n3 4 1\\n2 0 3\\n3 3 2') == '1'\nassert solution('3 3\\n2 1 4\\n1 1 2\\n0 0 3\\n0 1 3\\n1 1 1') == '0'\nassert solution('5 10\\n1 2 4\\n2 2 2\\n3 2 1\\n3 0 1\\n1 0 0\\n4 0 2\\n4 1 3\\n4 3 1') == '3'\nassert solution('7 4\\n4 3 2\\n3 0 1\\n2 1 3\\n3 0 2\\n4 1 3\\n4 2 4\\n3 3 0') == '2'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 5') == '1'\n\"\"\"\nfrom itertools import permutations\n\nN, K = [int(i) for i in stdin.split()]\nn = list(range(N))"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n0 1 2 3\n2 0 0 0\n1 0 0 2\n0 0 2 3\n''') == '3'\nassert solution('''\n5\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n''') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10 3\n1 2 3\n0 1 4\n0 0 5\n1 3 6\n0 0 1\n0 0 5\n0 1 3\n0 2 4\n0 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n10 3\n1 2 3\n0 1 4\n0 0 5\n1 3 6\n0 0 1\n0 0 5\n0 1 3\n0 2 4\n0 2 3\n\"\"\") == \"1\"\n\"\"\"\nSAMPLE INPUT:\n5 3\n2 1 2\n3 0 2 3\n3 0 1 4\n2 1 4\n2 2 3\nSAMPLE OUTPUT:\n3\n\"\"\""
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1\\n1\\n2') == '3'\nassert solution('2\\n1\\n2') == '1'\nassert solution('5\\n2\\n1\\n2\\n3') == '4'\nassert solution('5\\n3\\n2\\n1\\n1') == '3'\n"
    },
    {
        "number": 3677,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '3'\nassert solution('10 5') == '1'\n\n'''\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"YES\"\nassert solution() == \"NO\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"YES\"\n\n=======\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n1 2\\n1 3\\n2 2\\n3 1\\n3 2\\n3') == 'YES'\nassert solution('2\\n2\\n2\\n1 1\\n1 1\\n1') == 'NO'"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\\nNO\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == 'YES'\nassert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"YES\\nNO\\n\"\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3\\n1 1\\n1 2\\n2 1\") == \"YES\"\nassert solution(\"2\\n5 3\\n0 5\\n0 5\\n1 1\\n0 5\\n3 1\\n3 1\\n2 1\\n1 1\\n1 2\\n1 1\\n0 2\\n\") == \"NO\""
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3') == 'YES'\nassert solution('2\\n8\\n1 1\\n1 2\\n1 3\\n2 2\\n2 3\\n3 2\\n4 4') == 'NO'\nassert solution('2\\n4\\n2 3\\n2 4\\n3 4\\n2 4\\n4 2\\n2 1\\n3 4\\n1 3\\n2 3\\n4 2\\n3 4') == 'YES'\n"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n6\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3') == 'YES\\nNO\\nNO'\nassert solution('1\\n2\\n1 1\\n1 2\\n2 1\\nSample Output:') == 'YES\\nNO\\nNO'"
    },
    {
        "number": 3678,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n1 1\\n1 3\\n2 2\\n2 3\\n3 1\\n3 2\\n3') == 'YES'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == 'YES'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == '3.000000000'\nassert solution('10\\n100') == '11.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1.7500000000'\nassert solution('4') == '4.2500000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == '3.000000000'\nassert solution(\"2\") == '3.000000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('15') == '40.00000000'\n\nprint('All tests passed')"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('3') == '8.000000000'\nassert solution('7') == '13.000000000'\n\"\"\"\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3''') == '3.000000000'\n'''\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '3.000000000'\nassert solution('3') == '10.00000000'\nassert solution('4') == '15.00000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '3.000000000'\nassert solution('12\\n') == '10.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n''') == '3.000000000'\nassert solution('''\n10\n''') == '15.000000000'\nassert solution('''\n1\n''') == '2.000000000'\nassert solution('''\n10\n''') == '16.000000000'\nassert solution('''\n20\n''') == '8.000000000'\n"
    },
    {
        "number": 3679,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3.000000000'"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3') == '1'\nassert solution('1 2\\n2 3') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"1 2\\n\"\n    \"3\"\n) == \"1\"\nassert solution(\n    \"1 2\\n\"\n    \"5 6 7 8 9\"\n) == \"5\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '2'\nassert solution('3\\n') == '2'\nassert solution('3\\n4') == '2'\nassert solution('3\\n4\\n') == '2'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 3\n2\n3\n2\n5''') == \"1\"\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2') == '1'\nassert solution('3') == '2'\nassert solution('3 4') == '2'\nassert solution('2 3') == '1'\nassert solution('3 3 4') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"1\""
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1\\n3\\n') == '1'\nassert solution('10 2\\n15\\n') == '2'\nassert solution('10 10\\n8\\n') == '1'\n"
    },
    {
        "number": 3680,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\n\nassert solution('''\n3 4 5\n0 2 4\n1 3 4\n1 2 4\n1 1 4\n''') == \"2\"\n\nassert solution('''\n3 4 5\n0 2 4\n1 3 4\n1 2 4\n1 1 4\n''') == \"3\"\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 4\n1 2 4\n1 1 4\n''') == \"2\"\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 4\n1 2 4\n1 1 4\n''') == \"3\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\nassert solution(\"3 4 5\\n1 3 4\\n0 2 2 3 2\\n1 3 2\\n1 2 4\\n1 1 4\\n\") == \"2\"\nassert solution(\"0 1\") == \"0\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\\n2\\n3\\n1\""
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n1 1 4\n1 1 4\n1 1 4\n1 1 4\n1 1 4''') == '3'\nassert solution('''4 1\n1 2\n1 3\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4''') == '4'\nassert solution('''5 2\n1 2\n1 3\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4\n1 4''') == '2'\nassert solution('''1 1\n1 1''') == '1'\nprint('ALL TEST CASES PASSED')\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '3'\nassert solution('1 3 4') == '1'\nassert solution('0 2 2 3 2') == '3'\nassert solution('1 3 2') == '1'\nassert solution('1 2 4') == '2'\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"2\"\nassert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"2\"\nassert solution('''\n2 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\nassert solution('''\n1 1 2\n1 2 3\n1 1 4\n''') == \"1\"\nassert solution('''\n4 3 1\n0 2 4\n1 3 1\n2 3 2\n3 2 1\n2 1 4\n3 1 4\n''') == \"2\"\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == \"3\"\n"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '3'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'\n\nassert solution('''\n3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\n''') == '2'"
    },
    {
        "number": 3681,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 4 5\n1 3 4\n0 2 2 3 2\n1 3 2\n1 2 4\n1 1 4\nSample Input 2:\n3 5\n0 0 1\n1 2 3\n2 1 4\n2 1 5\nSample Output 2:\n0\n1\n2\n1\n''') == '1'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2\nHelloWorld.c\nint Main() {\n    printf(\"Hello %d\\n\",i);\n}\n***END***\nAdd.c\nint Main() {\n  for (int i=0; i<10; i++)\n    sum += i;\n  printf(\"SUM %d\", sum);\n}\n***END***\nint Main() {\n  printf(\"Hello %d\\n\",i);\n  printf(\"THE END\\n\");\n}\n***END***''') == '2 Add.c\\n'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == 'HelloWorld.c Add.c The End'\nassert solution('1') == 'The End'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {\") == \"HelloWorld.c 2\"\n\"\"\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\"\nassert solution(\"1\") == \"The END\"\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '2 HelloWorld.c'\nassert solution('Add.c') == 'def solution(stdin: str) -> str:'\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nHelloWorld.c\\nint Main() {printf('Hello %d\\\\n',i);}\\n***END***\") == \"2 HelloWorld.c\\nint Main() {printf('Hello %d\\\\n',i);}\\nTHE END\"\nassert solution(\"1\\nAdd.c\\nint Main() {for (int i=0; i<10; i++) sum += i; printf('SUM %d', sum);}\\n***END***\") == \"1 Add.c\\ndef solution(stdin: str) -> str:\\n  pass\\nTHE END\"\nassert solution(\"0\\n\") == \"0\"\nassert solution(\"1\\nHelloWorld.c\\nint Main() {printf('Hello %d\\\\n',i);}\\n***END***\") == \"0 HelloWorld.c\\nint Main() {printf('Hello %d\\\\n',i);}\\nTHE END\"\nassert solution(\"2\\nHelloWorld.c\\nint Main() {printf('Hello %d\\\\n',i);}\\n***END***\") == \"0 HelloWorld.c\\nint Main() {printf('Hello %d\\\\n',i);}\\nTHE END\"\n\"\"\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"HelloWorld.c\\n\"\nassert solution(\"3\") == \"def solution(stdin: str) -> str:\\n  pass\\n\"\nassert solution(\"\") == \"***END***\"\nassert solution(\"4\") == \"def solution(stdin: str) -> str: \\n  pass\\n\""
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\nHelloWorld.c\\nint Main() {\\n\\tprintf(\"Hello %d\\n\",i);\\n}\\n***END***') == '1 HelloWorld.c'\nassert solution('2\\nAdd.c\\nint Main() { \\n\\tfor (int i=0; i<10; i++) \\n\\tsum += i; \\n\\tprintf(\"SUM %d\", sum); \\n}\\n***END***') == '0 Add.c'\n'''"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\nint Main() {\n    for (int i=0; i<10; i++)\n        sum += i;\n    printf(\"SUM %d\", sum);\n}\n***END***\n''') == \"2 Add.c\\nThe END\\n\"\nassert solution('''\n2\nint Main() {\n    printf(\"Hello %d\\n\",i);\n    printf(\"THE END\\n\");\n}\n***END***\n''') == \"2 HelloWorld.c\\nSUM 0\\nTHE END\\n\"\n"
    },
    {
        "number": 3682,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\n\"\"\") == \"1\\n2\\n2\\n\"\"\"\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2'\nassert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 2 2\\n4 2 1\\n4 4 1') == '1\\n2\\n2\\n2'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 2\\n3 4 1') == '1'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1\n'''\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 3\n2 2 2\n4 2 1\n4 4 1\"\"\") == \"1 2\"\n\nassert solution(\"\"\"\n3 3\n5 2 2\n3 1 1\n4 4 1\"\"\") == \"2 4\"\n\nassert solution(\"\"\"\n5 3\n8 2 2\n2 2 5\n6 1 1\n8 4 2\n8 5 1\"\"\") == \"1 2 1\"\n\nassert solution(\"\"\"\n1 1\n4 4\n1 5\n4 2\n2 1\n1 4\n2 4\n3 5\n2 5\n1 1\n2 4\n2 5\n4 1\n4 2\n4 3\n3 3\"\"\") == \"3 4 2 3 4 2 1 4 3 2 3 2\""
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n2 2 2') == '1'\nassert solution('2\\n4 2 1') == '2'\nassert solution('3\\n4 2 1') == '3'\nassert solution('3\\n5 2 1') == '4'\n\nprint(solution.__doc__)\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 3') == '1'\nassert solution('3 3') == '2'\nassert solution('4 3') == '3'\nassert solution('4 4') == '2'\nassert solution('4 5') == '3'\n\n'''\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n2 2 2\n4 2 1\n4 4 1\n''') == '1\\n2\\n2\\n'\nassert solution('''\n2 2\n2 2\n''') == '1\\n1\\n'\n"
    },
    {
        "number": 3683,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '1\\n2\\n2'\nassert solution('3 4') == '1\\n2\\n3'\nassert solution('4 5') == '1\\n2\\n3\\n4'\nassert solution('5 3') == '1\\n2\\n3\\n4\\n5'\nassert solution('5 4') == '1\\n2\\n3\\n4\\n5'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n    3 20\n    50 70 10\n    100 110 4\n    150 190 16\n    \"\"\") == \"5\"\n    assert solution(\n    \"\"\"\n    5 20\n    100 110 4\n    50 70 10\n    150 190 16\n    \"\"\") == \"10\"\n    \"\"\"\n    def solution(stdin: str) -> str:\n        n, c = map(int, stdin.split())\n        return str(min([c - max([0, p + c - b]) for p, b, u in zip(map(int, stdin.split()[::2]), map(int, stdin.split()[1::2]), map(int, stdin.split()[2::2]))]))\n    \"\"\"\n    \n    \n    \"\"\"\n    def solution(stdin: str) -> str:\n        n, c = map(int, stdin.split())\n        return str(min([c - max([0, p + c - b]) for p, b, u in zip(map(int, stdin.split()[::2]), map(int, stdin.split()[1::2]), map(int, stdin.split()[2::2]))]))\n    \"\"\""
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3 20\n50 70 10\n100 110 4\n150 190 16\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n3 20\n50 50 10\n100 110 4\n150 190 16\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n3 20\n50 70 10\n100 110 4\n150 190 16\n\"\"\") == \"5\"\n\nassert solution(\"\"\"\n2 20\n50 50 10\n100 110 4\n150 190 16\n\"\"\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 20\\n50 70 10\\n100 110 4\\n150 190 16\") == \"5\"\nassert solution(\"1 1\\n2 2\\n3 3\") == \"1\"\nprint(\"You're a smart cookie!\")\n\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 20\n50 70 10\n100 110 4\n150 190 16\n''') == '5'\n\nassert solution('''\n1\n1\n1\n1\n''') == '1'\n\nassert solution('''\n5\n5\n5\n5\n5\n''') == '1'\n\nassert solution('''\n1\n1\n1\n1\n1\n''') == '1'\n\nassert solution('''\n5\n1\n1\n1\n1\n''') == '0'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 5\\n\"\n    \"10 11 20\\n\"\n    \"20 22 5\\n\"\n    \"30 30 20\\n\"\n    \"30 35 1\\n\"\n    \"40 4 4\\n\"\n    \"10 1 2\\n\"\n    \"30 2 3\\n\"\n    \"35 2 3\\n\"\n    \"50 1 4\\n\"\n    \"90 4 6\\n\"\n    \"150 1 3\\n\"\n    \"190 4 2\\n\"\n    \"220 4 1\\n\"\n    \"30 4 2\\n\"\n    \"30 5 3\\n\"\n    \"30 5 2\\n\"\n    \"30 5 1\\n\"\n    \"30 6 3\\n\"\n    \"40 5 2\\n\"\n    \"40 5 1\\n\"\n    \"40 6 3\\n\"\n    \"40 6 2\\n\"\n    \"40 6 1\\n\"\n    \"10 6 3\\n\"\n    \"10 5 3\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 3\\n\"\n    \"30 6 1\\n\"\n    \"30 5 3\\n\"\n    \"30 5 2\\n\"\n    \"30 5 1\\n\"\n    \"30 6 3\\n\"\n    \"40 6 2\\n\"\n    \"40 6 1\\n\"\n    \"40 5 3\\n\"\n    \"40 5 2\\n\"\n    \"40 5 1\\n\"\n    \"40 6 3\\n\"\n    \"40 6 2\\n\"\n    \"40 6 1\\n\"\n    \"10 6 2\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2\\n\"\n    \"10 6 1\\n\"\n    \"10 5 2\\n\"\n    \"10 5 1\\n\"\n    \"10 6 2"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"2 100000\") == \"9\"\nassert solution(\"3 1\") == \"1\"\n\nn, u, b = list(map(int, stdin.readline().split()))\ndp = [[0] * (n + 1) for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    dp[i][i] = b[i - 1]\n    for j in range(1, i):\n        dp[i][j] = max(dp[i - 1][j] - u[i - 1], dp[i - 1][j - 1] + b[i - 1])\nprint(max(dp[n][i] for i in range(n + 1)))\n\n\"\"\"\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 20\n50 70 10\n100 110 4\n150 190 16''') == '5'\n\nassert solution('''6 40\n70 100 30\n50 100 10\n60 100 40\n50 100 20\n50 100 40''') == '7'\n\nassert solution('''10 100\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1''') == '1'"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''4\n50\n70\n10\n1\n1\n''') == '1'\nassert solution('''5\n50\n70\n10\n1\n1\n''') == '1'\nassert solution('''6\n100\n110\n4\n1\n1\n''') == '1'\nassert solution('''20\n10\n100\n110\n4\n1\n1\n1\n1\n1\n''') == '2'\n"
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3684,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(s) == '5'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5') == '26'\nassert solution('10 5') == 'IMPOSSIBLE'\nassert solution('6 5') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n(2 5)\\n.....\\n.#.#.\\n.#.#.\\n....#\\n.#.##\\n1\") == \"26\"\nassert solution(\"6 6\\n(4 2) (4 3) (3 3) (2 3) (1 3) (1 2)\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"IMPOSSIBLE\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n#.#.#\\n....#\\n.#.##\\n1\\n') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5') == 'IMPOSSIBLE'\n\nassert solution('10 10') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5\\n(2 5) (5 3)\\n.....\\n.#.#.\\n#.#.#\\n...#.') == '26'\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5\\n(2 5)\\n.....\\n.#.#.\\n#.#.\\n#...\\n#.##') == '26'\nassert solution('3 3\\n2 2) (3 3)\\n#..#\\n#.#.\\n#.##\\n1\\n1 1') == 'IMPOSSIBLE'"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 3\n...#.\n##.##\n.##.#\"\"\") == \"IMPOSSIBLE\"\n\nassert solution(\"\"\"\n5 5\n(2 5) (5 3)\n.....\n.#.#.\n.#.#.\n....#\n.#.##\"\"\") == \"26\"\n\nassert solution(\"\"\"\n4 4\n.....\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n(2 5)\\n....#\\n.#.#.\\n1\") == \"26\"\nassert solution(\"5 5\\n(2 5)\\n....#\\n#.#.\\n1\\n6 (4 2)\\n(4 3)\\n(3 3)\\n(2 3)\\n(1 3)\\n(1 2)\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3685,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"success\"\nassert solution(\"2\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\nassert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') =='success'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"failure\"\nassert solution(\"1\") == \"success\"\nassert solution(\"10000\") == \"success\"\nassert solution(\"10000\") == \"failure\""
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"success\"\nassert solution(\"3\") == \"failure\"\nassert solution(\"20\") == \"success\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1') == 'failure'\nprint(solution(\n    '7\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n-1 -1\\n0 -2'))\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\\n') == 'failure'\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"success\"\nassert solution(\"7\") == \"failure\"\nassert solution(\"6\") == \"success\"\nassert solution(\"12\") == \"failure\"\nassert solution(\"15\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"failure\"\nassert solution(\"5\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\nassert solution(\"1\\n-1 0\\n0 0\\n1 0\\n-1 1\\n0 2\\n1 1\") == \"success\"\nassert solution(\"2\\n0 0\\n1 0\\n0 0\\n1 0\") == \"failure\"\n"
    },
    {
        "number": 3686,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''\n5\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') =='success'\nassert solution(\n'''\n4\n-1 0\n0 0\n1 0\n-1 1\n0 2\n1 1\n''') == 'failure'\n'''\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2\\n3 2\\n5 2 2') == 'possible'\nassert solution('10 1 2\\n5 3\\n4 3') == 'impossible'\nassert solution('8 1\\n10 2\\n15 4') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 3\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'possible'\n\nassert solution('''\n10 10 10\n1 3\n1 4\n3 5\n2 7\n5 8\n1 9\n2 10\n''') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 2 2') == 'impossible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'possible'\nassert solution('5 2 2') == 'impossible'\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 2\n1 2\n3 3\n5 2 2\n5 2 2\n''') == 'impossible'\nassert solution('''\n4 2 2\n1 2\n2 3\n1 2\n3 2\n''') == 'possible'\n'''\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 2') == \"impossible\"\nassert solution('1 2') == \"possible\"\nassert solution('3 3') == \"impossible\"\nassert solution('5 2 2') == \"possible\"\nassert solution('5 2 2') == \"impossible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 2') == 'possible'\nassert solution('1 2') == 'impossible'\nassert solution('3 3') == 'impossible'\nassert solution('5 2 2') == 'impossible'\nassert solution('5 2 2') == 'impossible'\n\"\"\"\n\nfrom collections import deque\nfrom collections import namedtuple\nimport heapq\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"possible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n1 2\\n3 3\\n5 2 2\\n5 2 2\") == \"possible\"\nassert solution(\"3 3\\n2 2\\n3 3\\n4 4\\n6 5\") == \"impossible\"\nassert solution(\"4 5\\n1 2\\n2 2\\n3 3\\n4 4\\n5 2\") == \"impossible\"\nassert solution(\"3 5\\n1 2\\n2 2\\n3 3\\n4 4\\n5 2\") == \"possible\"\n"
    },
    {
        "number": 3687,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2\n2 2\n3 3\n5 2 2\n5 2 2\n''') == 'possible'\nassert solution('''2 5\n2 3\n3 4\n5 2 2\n5 2 2\n''') == 'impossible'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 2') == '0'\nassert solution('5 3') == '2'\nassert solution('1 2') == '0'\nassert solution('4 5') == '2'\nassert solution('8 7') == '2'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '0'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'\nassert solution(r\"\"\"\n10\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == '0'\nassert solution(r\"\"\"\n20\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == '0'\nassert solution(r\"\"\"\n20\n1 1 2\n1 2 1\n-1 1 2\n\"\"\") == '1'\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\nassert solution('''\n2 1\n1 1\n-1 1\n''') == '1'\n'''\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n1 1 2\n1 2 1\n-1 1 2\n''') == '0'\n\"\"\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"0\"\n"
    },
    {
        "number": 3688,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '0'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n1\n0''') == '1'\nassert solution('''3\n1\n0''') == '2'\nassert solution('''4\n1\n0''') == '3'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3 2\n353\n''') == '3'\nassert solution(\n'''\n4 2\n1234\n''') == '4'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1234\n''') == '1313'\nassert solution('''\n3\n54321\n''') == '22'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4') == '4\\n1313\\n'"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('4 2') == '4'\nassert solution('5 2') == '5'\nassert solution('9 2') == '7'\nassert solution('123 2') == '12'\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"1 7\") == \"1\"\nassert solution(\"1 10\") == \"2\""
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"1 5\") == \"4\"\nassert solution(\"999 999\") == \"2\"\nassert solution(\"1 9\") == \"1\"\n"
    },
    {
        "number": 3689,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '5'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"12 30 45 3 11\",\n    \"NO\"\n    ) == \"NO\"\nassert solution(\n    \"12 0 1 12 1\",\n    \"YES\"\n    ) == \"YES\"\nassert solution(\n    \"3 47 0 4 9\",\n    \"YES\"\n    ) == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''12 30 45 3 11\n3 47 0 4 9''') == 'YES'\nassert solution('''12 0 1 12 1\n3 47 0 4 9''') == 'NO'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"3 47 0 4 9\") == \"YES\"\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('3 47 0 4 9') == 'YES'\n"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('12 30 45 3 11') == 'NO'\nassert solution('12 0 1 12 1') == 'YES'\nassert solution('3 47 0 4 9') == 'YES'"
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12 30 45 3 11') == \"NO\"\nassert solution('12 0 1 12 1') == \"YES\"\nassert solution('3 47 0 4 9') == \"YES\""
    },
    {
        "number": 3690,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"12 30 45 3 11\") == \"NO\"\nassert solution(\"12 0 1 12 1\") == \"YES\"\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\""
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('1 1 2 3 1 0') == '0'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 2 3 1 0') == '3'\nassert solution('2 4 20') == '2'\nassert solution('1 1 2 3 1 0') == '0'\nassert solution('2 2 1') == '0'\nassert solution('1 1 2 3 1 0') == '0'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 2 3 1 0\\n2 4 20') == '3'\nassert solution('1 1 2 3 1 0\\n2 2 1') == '0'\nassert solution('1 1 2 3 1 0\\n15 27 26') == '2'\n"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1 2 3 1 0\n2 4 20''') == '3'\nassert solution('''1 1 2 3 1 0\n15 27 26''') == '2'\nassert solution('''1 1 2 3 1 0\n1 1 2''') == '0'"
    },
    {
        "number": 3691,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 1 2 3 1 0\n2 4 20\n\"\"\") == \"3\"\nassert solution(\n\"\"\"\n1 1 2 3 1 0\n15 27 26\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n1 1 2 3 1 0\n2 2 1\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n1 1 2 3 1 0\n15 2 3\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n1 1 2 3 1 0\n3 5 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\\n0 0 1\\n2 0 1\\n4 0 1\\n\") == \"4\"\nassert solution(\"2\\n0 0 2\\n3 0 2\\n6 0 2\\n\") == \"8\""
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('\\n'.join(input().split('\\n'))) == '4'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution() == '8'\nassert solution() == '10'\nassert solution() == '12'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''\n0 0 4\n1 1 4\n6 6 4\n''') == '12'\nassert solution('''\n0 0 1\n2 0 1\n1 1 2\n''') == '5'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\nassert solution('2 0 1') == '2'\nassert solution('2 0 2') == '4'\nassert solution('4 0 2') == '8'\nassert solution('3 0 2') == '6'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n3\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''\n1\n2 3\n4 5 6\n''') == '8'\n'''\n\n\"\"\"\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 0 1\n2 0 1\n4 0 1\n\n''') == '4'\nassert solution('''\n0 0 2\n3 0 2\n6 0 2\n\n''') == '8'\nassert solution('''\n0 0 3\n2 0 3\n1 1 3\n\n''') == '9'\n\n\n\n'''\nThe number of circles is not related to the coordinates of the circles. The only constraint is that the area is positive and not infinity.\n\nFor each circle, area and x and y are positive.\n\nThe area is less than 1,000,000,000,000,000,000,000,000,000,000\n\nThe value of x and y are not given in the input.\n\n\nThe number of circles is a natural number.\n\nSo we have an answer for each of the cases, from the first to the last.\n\nWe need to write a function that computes the number of regions formed by the circles, and returns an integer\n\n'''\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 1\n2 0 1\n4 0 1\n''') == '4'\nassert solution('''\n0 0 2\n3 0 2\n6 0 2\n''') == '8'\nassert solution('''\n0 0 2\n3 0 2\n6 0 2\n''') == '10'\nassert solution('''\n0 0 1\n2 0 1\n3 0 1\n''') == '4'\n"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0 1\\n2 0 1\\n4 0 1') == '4'\nassert solution('3\\n0 0 2\\n3 0 2\\n6 0 2') == '6'\nassert solution('3\\n0 0 2\\n2 0 2\\n1 1 2\\n') == '8'"
    },
    {
        "number": 3692,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\\\n3\n0 0 1\n2 0 1\n4 0 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\\\n3\n0 0 2\n3 0 2\n6 0 2\n\"\"\") == \"8\"\n\nassert solution(\"\"\"\\\n2\n0 0 2\n2 0 2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n') == 'YES'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n') == 'YES'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n') == 'NO'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1') == 'YES'\nassert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7') == 'NO'"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n\") == \"Yes\"\nassert solution(\"0 0 6 0 6 6 0 6\\n7 4 4 7 7 10 10 7\\n\") == \"No\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n\") == \"Yes\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('0 0 6 0 6 6 0 6') == 'YES'\nassert solution('1 3 3 5 5 3 3 1') == 'NO'\n\"\"\"\n\n\"\"\"\n------Example------\nInput\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n\nOutput\nYES\n\nInput\n0 0 6 0 6 6 0 6\n7 4 4 7 7 10 10 7\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n') == 'YES'\nassert solution('0 0 6 0 6 6 0 6\\n7 3 9 5 11 3 9 1\\n') == 'NO'\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"NO\"\nassert solution(\"6 0 6 6 0 6 0 0\") == \"YES\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"Yes\"\nassert solution('''\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n''') == \"YES\"\nassert solution('''\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n''') == \"NO\"\n''') == \"YES\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6 0 6 6 0 6 0 0\") == \"YES\"\nassert solution(\"7 4 4 7 7 10 10 7\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\\n7 4 4 7 7 10 10 7\\n\") == \"NO\"\nassert solution(\"0 0 6 0 6 6 0 6\\n1 3 3 5 5 3 3 1\\n\") == \"YES\"\nassert solution(\"0 0 6 0 6 6 0 6\\n6 7 7 7 7 7 7 7\\n\") == \"NO\""
    },
    {
        "number": 3693,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 6 0 6 6 0 6\") == \"YES\"\nassert solution(\"1 3 3 5 5 3 3 1\") == \"YES\"\nassert solution(\"6 0 6 6 0 6 0 0\") == \"YES\"\nassert solution(\"7 4 4 7 7 10 10 7\") == \"NO\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"sjfnb\"\nassert solution(\"2\") == \"sjfnb\"\nassert solution(\"2\") == \"sjfnb\"\nassert solution(\"3\") == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == \"sjfnb\"\nassert solution('2') == \"cslnb\"\nassert solution('3') == \"sjfnb\"\nassert solution('4') == \"cslnb\""
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\nassert solution('5') == 'cslnb'\nassert solution('6') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'cslnb'\nassert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') =='sjfnb'\nassert solution('5') == 'cslnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0\\n') == 'cslnb'\nassert solution('3\\n2 2 1\\n') =='sjfnb'\nassert solution('4\\n2 1 0\\n') == 'cslnb'\nassert solution('5\\n2 1 2\\n') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n0\") == \"cslnb\"\nassert solution(\"2\\n1 0\") == \"cslnb\"\nassert solution(\"3\\n2 3 1\") == \"sjfnb\"\nassert solution(\"4\\n2 2 1\") == \"sjfnb\"\nassert solution(\"5\\n3 3 2 1\") == \"sjfnb\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n0') == \"cslnb\"\nassert solution('2\\n1 0') == \"cslnb\"\nassert solution('2\\n2 2') == \"cslnb\"\nassert solution('3\\n2 3 1') == \"sjfnb\"\n\nassert solution('4\\n1 2 3 0') == \"sjfnb\"\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') =='sjfnb'\nassert solution('2') == 'cslnb'\nassert solution('3') =='sjfnb'\nassert solution('4') == 'cslnb'\nassert solution('5') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n0\n1 0\n2 2\n''') == 'cslnb'\nassert solution('''4\n0\n1 0\n2 2\n''') =='sjfnb'\nassert solution('''5\n0\n1 0\n2 2\n''') =='sjfnb'\nassert solution('''6\n0\n1 0\n2 2\n3 0\n''') =='sjfnb'\nassert solution('''7\n0\n1 0\n2 2\n3 0\n4 0\n''') =='sjfnb'\n"
    },
    {
        "number": 3694,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n0\n''') == 'cslnb', 'First example'\nassert solution('''\n2\n1 0\n''') == 'cslnb', 'Second example'\nassert solution('''\n2\n2 2\n''') =='sjfnb', 'Third example'\nassert solution('''\n3\n2 3 1\n''') =='sjfnb', 'Fourth example'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\n\n\"\"\"\n\n\nimport math\nfrom collections import deque"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 5\n1 5 3\n\"\"\") == \"2\"\nassert solution(\"\"\"1 2\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"1 1\n1\n\"\"\") == \"0\"\"\")"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"1 5\") == \"2\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == output_string\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 5\\n1 5 3') == '2'\nassert solution('1 2\\n1') == '1'\nassert solution('1 1\\n1') == '0'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == 1\nassert solution('1 1') == 0\nassert solution('1 1') == 0\nassert solution('3 4') == 1\nassert solution('3 2') == 1\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5') == '2'\nassert solution('1 2') == '1'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 2\\n1\") == \"1\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"5 1\\n5 1\\n\") == \"0\"\nprint('\"Run\" is good. Great job!')"
    },
    {
        "number": 3695,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 4\n1 5 3\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 5\n1 5 3\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 2\n1\n\n\"\"\") == \"0\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1 0 1'"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1 0 1'\nassert solution('2') == '-1 0 1'\n\n\"\"\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '-1'\nassert solution('1') == '0 1'\nassert solution('2') == '2 -1 0 1'\nassert solution('3') == '3 -1 0 1'\nassert solution('4') == '4 -1 0 1'\n\n'''\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"2 -1 0 1\"\n\nassert solution(\"1\") == \"1 0 1\"\n\nassert solution(\"0\") == \"0 1\"\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\n\nassert solution('3') == '2'\n\nassert solution('4') == '-1 0 1'\n"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1 0 1'\n\n'''"
    },
    {
        "number": 3696,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '1 0 1\\n'\nassert solution('2\\n') == '2 -1 0 1\\n'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1 5 4\\n1 2 1 3\\n') == '1 3 3\\n'\nassert solution('3 1 5 3\\n1 3 1\\n') == '1 2 2\\n'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1 5 4\n1 2 1 3\n''') == '1 3 3'\nassert solution('''3 1 5 3\n1 3 1\n''') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3 1 5 4\n1 2 1 3\n\"\"\") == \"1 3 3\"\nassert solution(\"\"\"\n3 1 5 3\n1 3 1\n\"\"\") == \"2 3 2\"\nassert solution(\"\"\"\n3 1 5 3\n1 3 1\n\"\"\") == \"1 2 2\"\nassert solution(\"\"\"\n3 5 1\n1 1 1 1 1\n\"\"\") == \"1 3 3 3 3\"\nassert solution(\"\"\"\n3 5 1\n1 1 1 1 1\n\"\"\") == \"1 2 2 2 2\"\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '3 1 5 4\\n'\n    '1 2 1 3\\n'\n) == '1 3 3\\n'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '3 1 5 4\\n'\n    '1 2 1 3\\n'\n    ) == '1 3 3\\n'\nassert solution(\n    '3 1 5 3\\n'\n    '1 3 1\\n'\n    ) == '1 2 2\\n'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 1 5 4\n1 2 1 3\n''') == '1 3 3'\nassert solution('''3 1 5 3\n1 3 1\n''') == '2 3 2'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1 5 4\n1 2 1 3\n\nOutput\n1 3 3''') == '1 3 3', 'Sample test case'\nassert solution('''3 1 5 3\n1 3 1\n\nOutput\n1 2 2''') == '1 2 2', 'Sample test case'\n"
    },
    {
        "number": 3697,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 5 4') == '1 3 3'\nassert solution('3 1 5 3') == '1 2 2'\nassert solution('3 2 5 3') == '1 2 2'\nassert solution('1 2 3 3') == '1 2 3'\nassert solution('1 1 1 1') == '1 1 1'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n\n\n------Time Limit Exceeded------"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '3'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('110') == 3\nassert solution('111111011') == 169\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''12\n1\n''') == '7'\nassert solution('''1310\n5\n''') == '171'\nassert solution('''101110110010\n2\n''') == '107'\nassert solution('''100000000000000000000000000000000000000000000\n3\n''') == '129429\nassert solution('''111111011\n2\n''') == '169'"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '4'\nassert solution('5') == '1'\nassert solution('100') == '81'\nassert solution('101') == '0'\nassert solution('11011') == '169'\n"
    },
    {
        "number": 3698,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('110') == '3'\nassert solution('111111011') == '169'\nassert solution
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([3, 1, 1, 2, 0, 0]) == '11.084259940083'\nassert solution([5, 0, 4, 2, 2, 0]) == '33.121375178000'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\n\nassert solution('''5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n\n\"\"\") == \"11.084259940083\"\nassert solution(\"\"\"\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n\n\"\"\") == \"33.121375178000\"\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\nassert solution('''\n3 1 1 2 0 0\n1 1\n2 1\n2 2\n''') == '11.084259940083'\n'''\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 1 1 2 0 0\n3\n1 1\n2 1\n2 3\n''') == '11.084259940083'\nassert solution('''\n5 0 4 2 2 0\n5\n5 2\n3 0\n5 5\n3 5\n3 3\n''') == '33.121375178000'\n"
    },
    {
        "number": 3699,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1 2 0 0') == '11.084259940083'\nassert solution('5 0 4 2 2 0') == '33.121375178000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n8 5\n''') == '2'\nassert solution('''\n8 15\n''') == '1'\nassert solution('''\n7 20\n''') == '0'\nassert solution('''\n1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''8 5\n''') == '2'\nassert solution('''8 15\n''') == '1'\nassert solution('''7 20\n''') == '0'\nassert solution('''1000000000000 1000000000001\n''') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 5') == '2'\nassert solution('8 15') == '1'\nassert solution('7 20') == '0'\nassert solution('1000000000000 1000000000001') == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '0\\n'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '2'\nassert solution(input) == '1'\nassert solution(input) == '0'\nassert solution(input) == '500000000000'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8 5''') == \"2\"\nassert solution('''8 15''') == \"1\"\nassert solution('''7 20''') == \"0\"\nassert solution('''1000000000000 1000000000001''') == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"2\"\nassert solution(\"5 15\") == \"1\"\nassert solution(\"7 20\") == \"0\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"8 5\") == \"2\"\nassert solution(\"7 20\") == \"1\"\nassert solution(\"1000000000000 1000000000001\") == \"500000000000\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('8 5\\n') == '2\\n'\nassert solution('8 15\\n') == '1\\n'\nassert solution('7 20\\n') == '0\\n'\nassert solution('1000000000000 1000000000001\\n') == '500000000000\\n'\n"
    },
    {
        "number": 3700,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5') == '2'\nassert solution('8 5') == '2'\nassert solution('7 20') == '1'\nassert solution('1000000000000 1000000000001') == '500000000000'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1 10\n01000\n''') == '11'\nassert solution('''\n5 10 1\n01000\n''') == '2'\nassert solution('''\n7 2 3\n1111111\n''') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\nassert solution('30 8 10') == '0'\n\n'''\n\nn, x, y = list(map(int, stdin.split()))\na = list(map(int, stdin.split()))\n\n'''\nwe need to find a subsequnce of a string with 0s and 1s\n\nwe need to invert a substring\n\nwe need to swap substring\n\n'''"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1 10\") == \"11\"\nassert solution(\"5 10 1\") == \"2\"\nassert solution(\"7 2 3\") == \"0\""
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1 3\") == \"2\"\nassert solution(\"10 4 1\") == \"1\"\nassert solution(\"10 10 2\") == \"0\"\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == '11'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 10') == '11'\nassert solution('5 10 1') == '2'\nassert solution('7 2 3') == '0'\n"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 1 5') == '10'\nassert solution('4 4 3') == '4'\nassert solution('10 5 3') == '10'"
    },
    {
        "number": 3701,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 1 10\n01000\"\"\") == \"11\"\n\nassert solution(\"\"\"5 10 1\n01000\"\"\") == \"2\"\n\nassert solution(\"\"\"7 2 3\n1111111\"\"\") == \"0\"\n\nassert solution(\"\"\"6 2 3\n11111\"\"\") == \"0\"\n\nprint(solution(*input().split()))\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1 2\n1\n2\n3\n5''') == '19 5'\nprint('Tests passed')"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 1 2') == '19 5'\nassert solution('3 1 1') == '2 1'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([3, 1, 1]) == \"2 1\"\nassert solution([5, 1, 2]) == \"19 5\"\nprint(solution([5, 1, 2]))\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 1\") == \"2 1\"\nassert solution(\"5 1 2\") == \"19 5\"\n\n\"\"\""
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 1 2') == '19 5'\nassert solution('3 1 1') == '2 1'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([3, 1, 1]) == '2 1'\nassert solution([5, 1, 2]) == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 1 1''') == '2 1'\nassert solution('''5 1 2''') == '19 5'\n"
    },
    {
        "number": 3702,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 1') == '2 1'\nassert solution('5 1 2') == '19 5'\nassert solution('5 1 2') == '19 5'\nassert solution('7 3 3') == '13 13'\nassert solution('7 3 3') == '13 13'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''7 1\n''') == '6'\nassert solution('''10 2\n''') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n\n\"\"\"\nimport math\n\nn, k = map(int, input().split())"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7 1''') == '6'\nassert solution('''10 2''') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"4\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"10 2\") == \"4\"\nassert solution(\"7 1\") == \"6\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\nassert solution(\"1002\") == \"4\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 1') == '6'\nassert solution('10 2') == '4'\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"10 1\") == \"4\"\nassert solution(\"7 1\") == \"6\"\n"
    },
    {
        "number": 3703,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 1\") == \"6\"\nassert solution(\"10 2\") == \"4\"\n\n'''"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '195.0.0.0/8'"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '195.0.0.0/8'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1\\n-149.154.167.99\\n') == '1\\n0.0.0.0/0\\n'\nassert solution('2\\n+149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29\\n') == '2\\n149.154.167.99\\n149.154.167.120/29\\n'\nassert solution('5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31\\n') == '5\\n195.0.0.0/8\\n127.0.0.4/30\\n'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n-149.154.167.99') == '0.0.0.0/0\\n'\nassert solution('4\\n-149.154.167.99\\n+149.154.167.100/30\\n+149.154.167.128/25\\n-149.154.167.120/29') == '2\\n149.154.167.99\\n149.154.167.120/29\\n'\nassert solution('5\\n-127.0.0.4/31\\n+127.0.0.8\\n+127.0.0.0/30\\n-195.82.146.208/29\\n-127.0.0.6/31') == '2\\n195.0.0.0/8\\n127.0.0.4/30\\n'\n\n'''"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '195.0.0.0/8'\nassert solution('6') == '-1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '195.0.0.0/8'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0.0.0.0/0'\nassert solution('4') == '0.0.0.0/0'\nassert solution('5') == '195.0.0.0/8'\nassert solution('2') == '0.0.0.0/0'\nassert solution('3') == '0.0.0.0/0'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution('-149.154.167.99') == '1'\nassert solution('+149.154.167.100/30') == '1'\nassert solution('+149.154.167.128/25') == '1'\nassert solution('-149.154.167.120/29') == '1'\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n-149.154.167.99\n\n\"\"\") == \"0.0.0.0/0\"\nassert solution(\"\"\"\n4\n-149.154.167.99\n+149.154.167.100/30\n+149.154.167.128/25\n-149.154.167.120/29\n\n\"\"\") == \"2.0.0.0/8\"\nassert solution(\"\"\"\n5\n-127.0.0.4/31\n+127.0.0.8\n+127.0.0.0/30\n-195.82.146.208/29\n-127.0.0.6/31\n\n\"\"\") == \"2.195.0.0/8\"\nassert solution(\"\"\"\n2\n+127.0.0.1/32\n-127.0.0.1\n\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n2\n+127.0.0.1/32\n-127.0.0.1\n\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3704,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1\\n0.0.0.0/0\\n1\\n149.154.167.99\\n1\\n-127.0.0.1/32\\n-127.0.0.1'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n80123456789\") == \"1\"\nassert solution(\"2\\n1000000000\") == \"0\"\nassert solution(\"11\\n31415926535\") == \"2\"\nassert solution(\"11\\n1111111111\") == \"0\"\nassert solution(\"22\\n00000000008\") == \"1\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"11\\n00000000008\\n\"\n) == \"1\"\n\nassert solution(\n    \"22\\n0011223344556677889988\\n\"\n) == \"2\"\n\nassert solution(\n    \"11\\n31415926535\\n\"\n) == \"0\""
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 1\n\nassert solution(\"11\") == 1\nassert solution(\"22\") == 2\nassert solution(\"13\") == 0\nassert solution(\"31415926535\") == 0\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"12\") == \"1\"\nassert solution(\"11\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"1\"\nassert solution(\"22\") == \"2\"\nassert solution(\"11\") == \"0\"\nassert solution(\"31415926535\") == \"0\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n11\n00000000008\n''') == '1'\nassert solution('''\n22\n0011223344556677889988\n''') == '2'\nassert solution('''\n11\n31415926535\n''') == '0'\n'''\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('11') == '1'\nassert solution('22') == '2'\nassert solution('11') == '0'"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3705,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(11) == '1'\nassert solution(22) == '2'\nassert solution(11) == '0'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\n\nassert solution('''3 3\n0 0 0\n0 1 0\n0 0 0\n''') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 5\n2 2 2 3 2\n0 0 0 1 0\n1 1 1 2 1\n''') == '4', 'Test #1'\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3', 'Test #2'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\\n'\n\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '3\\nrow 1\\nrow 2\\nrow 3\\n'\n\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1\\n'\n\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '3\\nrow 1\\nrow 2\\nrow 3\\n'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 5') == '4'\nassert solution('3 3') == '3'\nassert solution('3 3') == '3'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\\n') == '4\\nrow 1\\nrow 1\\ncol 4\\nrow 3\\n'\nassert solution('5 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '3\\nrow 1\\nrow 2\\nrow 3\\n'\nassert solution('3 3\\n1 1 1\\n1 1 1\\n1 1 1\\n') == '-1\\n'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2 2 3 2\\n0 0 0 1 0\\n1 1 1 2 1\") == \"4\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"3\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5') == '4'\nassert solution('3 3') == '3'\nassert solution('3 3') == '3'\nassert solution('4 2') == '3'\nassert solution('4 2') == '-1'\n"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2\n0 0 0\n0 1 0\n1 1 1\n''') == '4'\nassert solution('''\n3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '3'\nassert solution('''\n3 3\n0 0 0\n0 1 0\n0 0 0\n''') == '-1'"
    },
    {
        "number": 3706,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 1 1\n1 1 1\n1 1 1''') == '4'\n\nassert solution('''2 3\n0 0 0\n0 1 0\n0 0 0''') == '-1'\n\nassert solution('''3 3\n1 1 1\n1 1 1\n1 1 1''') == '3'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('8 6 4 5\\n') == 'YES'\nassert solution('8 6 4 6\\n') == 'NO'\nassert solution('10 3 11 4\\n') == 'YES'\nassert solution('4 2 1 4\\n') == 'YES'"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('8 6 4 5') == 'YES'\nassert solution('8 6 4 6') == 'NO'\nassert solution('10 3 11 4') == 'YES'\nassert solution('4 2 1 4') == 'NO'"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''8 6 4 5\n''') == 'YES'\nassert solution('''8 6 4 6\n''') == 'NO'\nassert solution('''10 3 11 4\n''') == 'YES'\nassert solution('''4 2 1 4\n''') == 'NO'\nassert solution('''4 5 3\n''') == 'YES'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''8 6 4 5''') == 'YES'\nassert solution('''8 6 4 6''') == 'NO'\nassert solution('''10 3 11 4''') == 'YES'\nassert solution('''4 2 1 4''') == 'YES'\nassert solution('''1 2 3''') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n8 6 4 5\n''') == 'YES'\nassert solution('''\n10 3 11 4\n''') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('8 6 4 5\\n') == 'YES'\nassert solution('8 6 4 6\\n') == 'NO'\nassert solution('10 3 11 4\\n') == 'NO'\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8 6 4 5\") == \"YES\"\nassert solution(\"8 6 4 6\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\""
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 2 1 4\n''') == \"NO\"\nassert solution('''\n8 6 4 5\n''') == \"YES\"\nassert solution('''\n10 3 11 4\n''') == \"YES\"\nassert solution('''\n4 2 1 4\n''') == \"NO\"\nassert solution('''\n5 5 1 5\n''') == \"NO\"\n"
    },
    {
        "number": 3707,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"6 3 11 4\") == \"YES\"\nassert solution(\"8 6 4 5\") == \"NO\"\nassert solution(\"10 3 11 4\") == \"YES\"\nassert solution(\"4 2 1 4\") == \"YES\"\nassert solution(\"11 3 1 5\") == \"YES\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\n1 2\n2 1''') == '6'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '6'\nassert solution('7 8') == '12'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 2\n1 3\n1 4\n\n''') == '6'\nassert solution('''7 8\n1 6\n2 6\n3 5\n3 6\n4 3\n5 1\n5 2\n5 3\n\n''') == '12'"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([2, 3]) == \"12\", \"2, 3\"\nassert solution([1, 2]) == \"\", \"1, 2\"\nassert solution([7, 8]) == \"12\", \"7, 8\"\nassert solution([1, 6]) == \"36\", \"1, 6\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '6'\nassert solution('7 8') == '12'\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n1 4\\n\") == \"6\"\nassert solution(\"7 8\\n1 6\\n2 6\\n3 5\\n3 6\\n4 3\\n5 1\\n5 2\\n5 3\\n\") == \"12\"\nassert solution(\"2 2\\n1 2\\n2 1\\n\") == \"-1\"\n"
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"6\"\nassert solution(\"7 8\") == \"12\""
    },
    {
        "number": 3708,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == '6', \"smaller test\"\nassert solution('7 8') == '12', \"smaller test\"\nassert solution('8 7') == '-1', \"smaller test\"\nassert solution('1 1') == '1', \"smaller test\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n\n''') == 'NO'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == \"NO\", \"First\"\n\nassert solution('''3 2\n1 0\n1 1\n0 1\n''') == \"YES\", \"Second\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"NO\"\nassert solution(\"3 2\") == \"YES\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2\\n\"\n    \"1 0\\n\"\n    \"1 1\\n\"\n    \"0 1\\n\"\n    ) == \"YES\\n\"\nassert solution(\n    \"5 3\\n\"\n    \"1 0 1\\n\"\n    \"1 1 0\\n\"\n    \"1 0 0\\n\"\n    \"1 0 0\\n\"\n    \"1 0 0\\n\"\n    ) == \"NO\\n\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 2\n1 0\n1 1\n0 1\n''') == 'NO'\nassert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0\n''') == 'YES'"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 3\n0 0\n1 1''') == 'NO'\nassert solution('''4 2\n0 1\n0 1\n0 0\n0 0''') == 'YES'\n"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 3\n1 0 1\n1 1 0\n1 0 0\n1 0 0\n1 0 0''') == 'NO'\nassert solution('''3 2\n1 0\n1 1\n0 1''') == 'YES'\n'''\n\nn = int(input())\nk = int(input())\n\nproblems = [int(input()) for _ in range(n)]\n\nproblemset = set(problems[:k])\n\nfor i in range(k, n):\n    problemset.discard(problems[i-k])\n\nprint('YES' if len(problemset) > 0 else 'NO')"
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 0 1') == 'NO'\nassert solution('5 3\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0\\n1 0 0') == 'YES'\nassert solution('4 4\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0') == 'YES'\nassert solution('3 4\\n1 0 1\\n1 1 0\\n1 0 0\\n1 0 0') == 'NO'\n\n\n\"\"\""
    },
    {
        "number": 3709,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n        '3 2\\n1 0\\n1 1\\n0 1\\n') == 'YES', \"Wrong result for input '{}'\".format(\n            repr(stdin))\n\n'''\n\n'''\nInput:\n3 2\n1 0\n1 1\n0 1\n\nOutput:\nYES\n'''\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 5\n2 3 5 12\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\n2 7\n2 3\n\"\"\") == \"No\"\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 5\n2 3 5 12\n''') == 'Yes'\nassert solution('''2 7\n2 3\n''') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == 'Yes'\nassert solution('2 7') == 'No'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n3\n''') == 'No'\n\nassert solution('''\n1 2\n2\n''') == 'Yes'\n\nassert solution('''\n10 1\n1\n''') == 'Yes'\n\nassert solution('''\n10 2\n2\n''') == 'No'\n\nassert solution('''\n10 3\n3\n''') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4 5\n2 3 5 12\n''') == 'Yes'\nassert solution('''\n2 7\n2 3\n''') == 'No'\nassert solution('''\n4 10\n1 3 7 8 9 10\n''') == 'Yes'\n"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4\") == \"Yes\"\nassert solution(\"4 2\") == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 7\") == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Yes\"\nassert solution() == \"No\""
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 5') == 'Yes'\nassert solution('2 7') == 'No'"
    },
    {
        "number": 3710,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n2 3\") == \"Yes\"\nassert solution(\"2 7\\n2 3\") == \"No\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 4 1\n\nOutput\n6\n\nOutput\n8\n\nOutput\n-1''') == \"6\"\n\nassert solution('''6 4 2\n\nOutput\n8\n\nOutput\n-1''') == \"8\"\n\nassert solution('''2 3 4\n\nOutput\n-1''') == \"-1\""
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 4 1\n\nOutput\n6''') == '6', 'Case 1'\nassert solution('''6 4 2\n\nOutput\n8''') == '8', 'Case 2'\nassert solution('''2 3 4\n\nOutput\n-1''') == '-1', 'Case 3'\nprint('all test cases passed!')"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 4 1') == '6'\nassert solution('6 4 2') == '8'\nassert solution('2 3 4') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2 4 1\n''') == '6'\n\nassert solution('''\n6 4 2\n''') == '8'\n\nassert solution('''\n2 3 4\n''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"6\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.m = 0\n        self.n = 0\n        self.k = 0\n        self.arr = []\n        self.maxArea = 0\n\n    def _get_max_area(self, n, m):\n        if n == 0 or m == 0:\n            return 0\n        self.maxArea = (n-1)*(m-1)\n        return self.maxArea\n\n    def _get_max_area_2(self, n, m):\n        self.maxArea = (n-1)*(m-1)\n        return self.maxArea\n\n    def _get_min_area(self, n, m):\n        self.minArea = m * n\n        return self.minArea\n\n    def _get_min_area_2(self, n, m):\n        self.minArea = n * m\n        return self.minArea\n\n    def solution(self, stdin: str) -> str:\n        n, m, k = map(int, stdin.split())\n        # if k == 1:\n        #     return self._get_min_area_2(n, m)\n        self.k = k\n        self.n = n\n        self.m = m\n        # self.arr = []\n        # self.m = m\n        # self.n = n\n        # self.k = k\n        # self.minArea = m * n\n        # self.maxArea = 0\n        # for i in range(0, k+1):\n        #     self.arr.append(self._get_min_area_2(self.n, self.m))\n        # return str(self.maxArea)\n\n        # self.get_max_area(self.n, self.m)\n        # self.get_min_area(self.n, self.m)\n        # self.get_min_area(self.n, self.m)\n\n        # return str(self.maxArea)\n\n        # self.get_max_area(self.n, self.m)\n        # self.get_min_area(self.n, self.m)\n        # self.get_max_area(self.n, self.m)\n\n        # return str(self.maxArea)\n\n        # print(self.arr)\n        # print(self.maxArea)\n        # return str(self.maxArea)\n        return str(self._get_max_area(self.n, self.m))"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 4 1\n''') == '6'\nassert solution('''6 4 2\n''') == '8'\nassert solution('''2 3 4\n''') == '-1'\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\") == \"6\"\nassert solution(\"6 4 2\") == \"8\"\nassert solution(\"2 3 4\") == \"-1\"\n"
    },
    {
        "number": 3711,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 4 1\n\n\"\"\") == \"6\"\nassert solution(\"\"\"6 4 2\n\n\"\"\") == \"8\"\nassert solution(\"\"\"2 3 4\n\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 2 4 3') == '2'\nassert solution('3\\n4 1 1') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 2 4 3\") == \"2\"\nassert solution(\"4\\n1 1 1\") == \"0\"\nassert solution(\"3\\n0 2 4\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '0'\nassert solution('0') == '-1'\nassert solution('2') == '0'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"0\"\nassert solution(\"7\") == \"0\"\nassert solution(\"8\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 2 4 3\\n') == '2'\nassert solution('3\\n4 1 1\\n') == '0'\nassert solution('4\\n0 3 0 4\\n') == '0'\nassert solution('2\\n0 1 0\\n') == '0'"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n1 1\\n\") == \"2\"\nassert solution(\"4\\n3 2 1\") == \"2\"\nassert solution(\"5\\n4 2 3 1\") == \"2\"\nassert solution(\"5\\n4 2 3 1\") == \"1\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"1 2 2 4 3\") == \"2\"\nassert solution(\"4 1 1\") == \"0\""
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n\n-----Input-----\n\n1\n5\n1 2 2 4 3\n\n-----Output-----\n\n2\n\n-----Input-----\n\n3\n4 1 1\n\n-----Output-----\n\n2\n\n-----Input-----\n\n4\n0 3 0 4\n\n-----Output-----\n\n0\n\n\"\"\") == \"0\"\nassert solution(\"\"\"\n\n-----Input-----\n\n2\n5\n1 2 2 4 3\n\n-----Output-----\n\n2\n\n-----Input-----\n\n3\n4 1 1\n\n-----Output-----\n\n2\n\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3712,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"5\") == '2'\nassert solution(\"4\") == '0'\nassert solution(\"0 3 0 4\") == '0'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''10000011''') == 5\nassert solution('''01''') == 2\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10101010\") == \"2\"\nassert solution(\"1101\") == \"2\"\nassert solution(\"111\") == \"1\"\nassert solution(\"001\") == \"1\"\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 5"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '5'\nassert solution('2') == '2'"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == 5\n\n\"\"\""
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10\\n01\\n') == '5'\nassert solution('10\\n01\\n') == '5'\nassert solution('10\\n01\\n') == '5'\nassert solution('10\\n01\\n') == '5'\nassert solution('10\\n01\\n') == '5'\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10000011\") == \"5\"\nassert solution(\"01\") == \"2\"\nprint(solution(input()))\n\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        char_list = stdin.split()\n        \n        count = collections.Counter(char_list)\n        \n        left = 0\n        right = 0\n        res = 0\n        \n        for i in range(1, len(char_list)):\n            \n            if count[char_list[i]] > 0:\n                left = i\n            \n            elif count[char_list[i]] == 0:\n                right = i\n            \n            while left < right:\n                res = max(res, right - left + 1)\n                left += 1\n                right -= 1\n        \n        return str(res)\n    \nassert solution(\"10000011\") == \"5\"\nassert solution(\"01\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"10011011\") == \"5\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3713,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\".1\") == \"1\"\nassert solution(\"01\") == \"2\""
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 3 1 4\n''') == \"3\"\nassert solution('''4\n4 4 4 4\n''') == \"-1\"\nassert solution('''4\n2 1 4 3\n''') == \"1\""
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'\nprint(solution('''4\n2 1 4 3\n'''))"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n2 3 1 4\n''') == '3'\nassert solution('''4\n4 4 4 4\n''') == '-1'\nassert solution('''4\n2 1 4 3\n''') == '1'"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 1 4\\n') == '3'\nassert solution('4\\n4 4 4 4\\n') == '-1'\nassert solution('4\\n2 1 4 3\\n') == '1'\n\n'''"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 1 4') == '3'\nassert solution('4\\n4 4 4 4') == '-1'\nassert solution('4\\n2 1 4 3') == '1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == \"3\""
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 1 4\\n') == '3'\nassert solution('4\\n4 4 4 4\\n') == '-1'\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 4 2 1 4\") == \"3\"\nassert solution(\"4 4 4 4\") == \"1\"\nassert solution(\"2 1 4 3\") == \"1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 4\") == \"3\"\nassert solution(\"4 4 4 4\") == \"-1\"\nassert solution(\"2 1 4 3\") == \"1\"\n"
    },
    {
        "number": 3714,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 1 4\\n\") == \"3\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"-1\"\nassert solution(\"4\\n2 1 4 3\\n\") == \"1\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([\"2\", \"2\"]) == \"1\"\nassert solution([\"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"3\"]) == \"2\"\nassert solution([\"1\", \"1\"]) == \"2\"\nassert solution([\"2\", \"0\"]) == \"2\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n\n1 3 2 0\n\n''') == '2'\n\nassert solution('''\n7\n\n1 3 3 2 1 2 3\n\n''') == '0'\n\nassert solution('''\n2\n\n2 2\n\n''') == '1'"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"7\") == \"0\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 3 2 0') == '2'\nassert solution('4') == '1'\nassert solution('7') == '0'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n10\n1 3 2 0\n''') == '2'\nassert solution('''\n3\n1 3 2\n''') == '1'\nassert solution('''\n5\n1 3 2 0\n''') == '0'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '0'\nassert solution('2') == '1'\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 1 1 2 3\") == \"1\"\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n') == '2'\nassert solution('7\\n') == '1'\nassert solution('2\\n') == '1'\nassert solution('7\\n') == '0'\n"
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2 0\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"2\") == \"1\""
    },
    {
        "number": 3715,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\") == \"2\"\nassert solution(\"7\\n\") == \"0\"\nassert solution(\"2\\n\") == \"1\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\n\"\"\"\n\nfrom math import prod\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\"\nassert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"-1\") == \"1\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\""
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"210\"\nassert solution(\"7\") == \"210\"\nassert solution(\"8\") == \"8192\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9') == '504'\nassert solution('7') == '210'\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"210\"\nassert solution(\"12\") == \"1080\"\nassert solution(\"18\") == \"1518\"\nassert solution(\"31\") == \"3531\"\nassert solution(\"50\") == \"3550\"\n"
    },
    {
        "number": 3716,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"9\") == \"504\"\nassert solution(\"7\") == \"210\""
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\n\nassert solution('''\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n''') == '1 1'\n\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\n\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '1 1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'\n\n\n'''\n\nn = int(input())\nlst = []\nfor i in range(n):\n    x1, y1, x2, y2 = map(int, input().split())\n    lst.append([x1, y1, x2, y2])\n\nfor j in range(n - 1):\n    for k in range(j + 1, n):\n        if (lst[j][1] <= lst[k][0] and lst[j][2] >= lst[k][1]) or (lst[j][1] >= lst[k][0] and lst[j][2] <= lst[k][1]):\n            print(lst[j][0], lst[k][1])\n            break\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"1 1\"\nassert solution(\"3\") == \"1 1\"\nassert solution(\"5\") == \"3 4\"\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    2\n    0 0 1 1\n    1 1 2 2\n    3 0 4 1\n''') == '1 1'\nassert solution('''\n    2\n    0 0 1 1\n    1 1 2 2\n    3 0 4 1\n''') == '1 1'\nassert solution('''\n    5\n    0 0 5 5\n    0 1 4 4\n    1 0 2 1\n    1 1 4 4\n    8 1 9 2\n''') == '3 4'\nassert solution('''\n    5\n    0 0 5 5\n    0 1 4 4\n    1 0 2 1\n    1 1 4 4\n    8 1 9 2\n''') == '3 4'\nassert solution('''\n    4\n    0 0 5 5\n    0 1 4 4\n    1 0 2 1\n    1 1 4 4\n    8 1 9 2\n''') == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1 1'\nassert solution('3') == '1 1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n\n''') == '1 1'\nassert solution('''\n3\n0 0 1 1\n0 1 1 2\n1 0 2 1\n\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n\n''') == '3 4'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3\n0 0 1 1\n1 1 2 2\n3 0 4 1\n''') == '1 1'\nassert solution('''\n4\n0 0 5 5\n0 0 4 4\n1 1 4 4\n1 1 4 4\n''') == '1 1'\nassert solution('''\n5\n0 0 10 8\n1 2 6 7\n2 3 5 6\n3 4 4 5\n8 1 9 2\n''') == '3 4'"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1 1'\nassert solution() == '1 1'\n"
    },
    {
        "number": 3717,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '1 1'\nassert solution('4') == '3 4'\nassert solution('5') == '3 4'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6') == 'YES'\nassert solution('8') == 'YES'\nassert solution('10') == 'NO'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n18 55 16 17\") == \"YES\"\nassert solution(\"6\\n40 41 43 44 44 44\") == \"NO\"\nassert solution(\"8\\n5 972 3 4 1 4 970 971\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"YES\"\n\"\"\"\n\n\n\nn = int(input())\nlist = []\nfor i in range(n):\n    list.append(int(input()))\n\nfor i in range(len(list)):\n    for j in range(i + 1, len(list)):\n        for k in range(j + 1, len(list)):\n            if list[i] == list[j] or list[i] == list[k]:\n                continue\n            elif abs(list[i] - list[j]) <= 2 and abs(list[i] - list[k]) <= 2:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n                break\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n40 41 43 44 44 44\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n18 55 16 17') == 'YES'\nassert solution('6\\n40 41 43 44 44 44') == 'NO'\nassert solution('8\\n5 972 3 4 1 4 970 971') == 'YES'\n\n\n'''"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2\n18 55 16 17\n''') == 'YES', 'First'\nassert solution('''\n4\n40 41 43 44 44 44\n''') == 'NO', 'Second'\nassert solution('''\n8\n5 972 3 4 1 4 970 971\n''') == 'YES', 'Third'"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('8') == \"NO\"\nassert solution('6') == \"YES\"\n"
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"5\") == \"YES\""
    },
    {
        "number": 3718,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(sys.stdin.read()) == 'YES'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 9') == '9'\nassert solution('5 5') == '10'"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''3 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 9') == '9'\nassert solution('5 5') == '10'\n\n\n\"\"\"\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '''\n    3 9\n    1 2 3\n    1 2 3 7 8 9 11 12 13\n    ''') == '9'\nassert solution(\n    '''\n    5 5\n    1 2 3 4 5\n    1 2 3 4 5\n    ''') == '10'\n'''\n) == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n\nassert solution('''\n1\n10\n''') == '11'\n\nassert solution('''\n3\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '10'\nassert solution('''\n3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '9'\nassert solution() == '10'\n"
    },
    {
        "number": 3719,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5''') == '10'\nassert solution('''3 9\n1 2 3\n1 2 3 7 8 9 11 12 13\n''') == '9'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\nassert solution('''5 5\n1 2 3 4 5\n1 2 3 4 5\n''') == '10'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == 'Petya'\nassert solution('8') == 'Vasya'\nassert solution('1') == 'Vasya'\nassert solution('100') == 'Petya'"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\"\nassert solution(\"8\") == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1\\n') == \"Vasya\"\nassert solution('2\\n') == \"Petya\""
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1\n''') == 'Vasya'\nassert solution('''2\n''') == 'Petya'\nassert solution('''8\n''') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 'Vasya'\nassert solution('2') == 'Petya'\nassert solution('8') == 'Petya'\n"
    },
    {
        "number": 3720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Vasya\"\nassert solution(\"2\") == \"Petya\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2 3\n1 2\n2 2\n2 1\n''') == '0'\nassert solution('''\n1 5 3\n1 3\n1 1\n1 5\n''') == '2'\nassert solution('''\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3 6\") == \"1\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"1 5 3\") == \"0\"\nassert solution(\"3 3 6\") == \"1\"\nassert solution(\"4 3 6\") == \"0\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\\n1 2\\n2 2\\n2 1\\n\") == \"0\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\\n\") == \"1\""
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 3\n1 2\n2 2\n2 1\n''') == '0'\nassert solution('''1 5 3\n1 3\n1 1\n1 5\n''') == '2'\nassert solution('''4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 3\n1 2\n2 2\n2 1\n''') == '0'\nassert solution('''\n1 5 3\n1 3\n1 1\n1 5\n''') == '2'\nassert solution('''\n4 3 6\n1 2\n1 3\n2 2\n2 3\n3 1\n3 3\n''') == '1'\n\nprint(\"OK\")"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"0\"\nassert solution(\"1 5 3\") == \"2\"\nassert solution(\"4 3 6\") == \"1\"\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2 3') == '0'\nassert solution('1 5 3') == '2'\nassert solution('4 3 6') == '1'\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n1 3\\n2 2\") == \"0\"\nassert solution(\"1 5 3\\n1 3\\n1 1\\n1 5\") == \"1\"\nassert solution(\"4 3 6\\n1 2\\n1 3\\n2 2\\n2 3\\n3 1\\n3 3\") == \"1\"\n\n\n\"\"\"\n\n\nimport numpy as np\n"
    },
    {
        "number": 3721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5 3') == '2'\nassert solution('2 5 3') == '1'\nassert solution('3 5 3') == '1'\nassert solution('4 5 3') == '1'\nassert solution('5 5 3') == '1'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '2'\nassert solution('4') == '2'\nassert solution('7') == '9'\nassert solution('101') == '10'"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('1') == '1'\nassert solution('4') == '2'\nassert solution('1000') == '146239781139'\nassert solution('17') == '0'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"1\") == 1\nassert solution(\"2\") == 0\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\nAB\\nAB\\nAB\") == \"1\"\nassert solution(\"4\\nAA\\nAB\\nBA\\nBB\") == \"2\""
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '1220'\nassert solution('10') == '1220'\nassert solution('3') == '0'\nassert solution('6') == '0'\nassert solution('11') == '0'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\nAB\\nBA\\nBB') == '2'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\nAB\\nAB\\nAB\\nAB') == '1'\nassert solution('5\\nAA\\nAA\\nAA\\nAA') == '0'\nassert solution('1\\nAA\\nAA\\nAA\\nAA') == '1'\nassert solution('2\\nAA\\nAA\\nAA\\nAA') == '2'\nassert solution('6\\nAA\\nAA\\nAA\\nAA\\nAA\\nAA') == '1'\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(r\"\"\"2\nA\nB\nB\nA\"\"\") == \"2\"\nassert solution(r\"\"\"3\nA\nB\nA\"\"\") == \"1\"\nassert solution(r\"\"\"1000\nA\nB\nA\"\"\") == \"1\"\nassert solution(r\"\"\"1000\nA\nA\nA\"\"\") == \"0\"\nassert solution(r\"\"\"4\nA\nB\nB\nA\"\"\") == \"2\"\n"
    },
    {
        "number": 3722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3 4') == '2'\nassert solution('5 2 3 4 6 7') == '3'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n2 3 4\n''') == '2'\nassert solution('''5\n2 3 4 6 7\n''') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3 4\") == \"2\"\nassert solution(\"5 2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\"\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"9\") == \"5\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n2 3 4''') == '2'\nassert solution('''5\n2 3 4 6 7''') == '3'"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 3 4\") == \"2\"\nassert solution(\"5\\n2 3 4 6 7\") == \"3\""
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n2 3 4 5 6''') == '3'\nassert solution('''15\n
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('2\\nABABC') == '3'"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\nABAAC') == '11'\nprint(solution(input()))\n\"\"\"\n\nN = int(input())\nstring = input()"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"A\") == \"1\"\nassert solution(\"ABC\") == \"2\"\nassert solution(\"ABAAC\") == \"11\"\nassert solution(\"ABCDE\") == \"17\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('6\\nBACBB') == '1'"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\nABAAC') == '11'\nassert solution('20\\nABCD') == '10'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '11'\n\n\"\"\"\n\nimport sys\n\nn = int(input())\nS = sys.stdin.readline()\ncount = 0"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == '11'\nassert solution(input('B')) == '11'\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == \"12\"\n"
    },
    {
        "number": 3724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\\nABAAC\") == \"11\"\nassert solution(\"4\\nABAB\") == \"2\"\nassert solution(\"5\\nABABC\") == \"11\"\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == '3'\n\n\"\"\"\n\nm = int(input())\n\nh_1, a_1 = map(int, input().split())\nx_1, y_1 = map(int, input().split())\nh_2, a_2 = map(int, input().split())\nx_2, y_2 = map(int, input().split())"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 2\n1 1\n0 1\n2 3\n''') == '3', solution('''5\n4 2\n1 1\n0 1\n2 3\n''')\n\nassert solution('''1023\n1 2\n1 0\n1 2\n1 1\n''') == '-1', solution('''1023\n1 2\n1 0\n1 2\n1 1\n''')\n\n'''"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2') == '3'\nassert solution('1023') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n5 2\n1 1\n0 1\n2 3\n''') == '3'\nassert solution('''\n10\n5 2\n1 1\n0 1\n2 3\n''') == '-1'\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"1023\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"1023\") == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n4 2\\n1 1\\n0 1\\n2 3') == '3'\nassert solution('1023\\n1 2\\n1 0\\n1 2\\n1 1') == '-1'\n\n\n\"\"\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"-1\"\n"
    },
    {
        "number": 3725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([5, 4, 2, 1, 0, 1, 0, 2, 3]) == \"3\"\nassert solution([1023, 1, 1, 1, 1]) == \"-1\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2\\n\"\n    \"4 5\\n\"\n) == \"2\"\n\nassert solution(\n    \"3\\n\"\n    \"4 5\\n\"\n) == \"0\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n4 5\n''') == '2'\nassert solution('''\n1\n2 3 4\n''') == '2'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"2\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"10 10\") == \"2\"\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 3726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\n\n'''\n\nfrom math import ceil"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 2 1') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == 'YES 2 0 0 1 2 3 2'\nassert solution(input_data_2) == 'NO'\n\"\"\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 1\") == 'YES'\nassert solution(\"1 2 3 4\") == 'NO'\nassert solution(\"2 2 2 3\") == 'NO'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == \"YES\"\n\n'''\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"YES\"\nassert solution(\"2 2 2 3\") == \"YES\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == 'NO'\nassert solution('2 2 2 3') == 'NO'\nassert solution('2 2 2 3') == 'YES'\nassert solution('2 2 2 3') == 'YES'\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 1\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"2 2 2 3\") == \"NO\""
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input(\"\")) == \"NO\"\nassert solution(input(\"1 2 3 4\")) == \"NO\"\nassert solution(input(\"2 2 2 3\")) == \"YES\"\nassert solution(input(\"2 2 2 3\")) == \"YES\"\n"
    },
    {
        "number": 3727,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == \"YES\"\nassert solution(input_string_2) == \"NO\"\nassert solution(input_string_3) == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2\n''') == \"YES\"\nassert solution('''3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5\n''') == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 2 3 4\\n1 3 4 2\\n') == 'YES'\nassert solution('4 4\\n1 2 3 4 5 6\\n1 2 3 4 6 5\\n1 2 3 4 6 5\\n') == 'YES'\nassert solution('3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n1 2 3 4 5 6\\n') == 'YES'\n\nimport sys\nfrom functools import reduce\nfrom operator import add"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 4], '1 2 3 4', '1 2 4 3') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n1 3 2 4\\n1 3 4 2\\n\") == \"YES\"\nassert solution(\"3 6\\n2 1 3 4 5 6\\n1 2 4 3 5 6\\n1 2 3 4 6 5\\n\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n\") == \"YES\"\nassert solution(\"3 5\\n4 1 2 3 4\\n1 2 3 4 5\\n1 2 3 4 5\\n\") == \"NO\"\nassert solution(\"4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3\\n\") == \"NO\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 4\\n1 3 2 4\\n2 3 4 1\\n2 3 4 1\") == \"YES\"\nassert solution(\"4 4\\n1 2 3 4 5 6\\n1 2 3 4 6 5\\n1 2 3 4 6 5\\n4 1 2 3 5 6\\n\") == \"YES\""
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2''') == 'YES', 'First sample'\nassert solution('''3 6\n2 1 3 4 5 6\n1 2 4 3 5 6\n1 2 3 4 6 5''') == 'YES', 'Second sample'\nassert solution('''4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3''') == 'NO', 'Third sample'\nassert solution('''5 4\n1 1 1 1 1\n2 2 2 2 2\n3 3 3 3 3\n4 4 4 4 4\n5 5 5 5 5\n''') == 'NO', 'Fourth sample'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4') == 'YES'\nassert solution('4 4') == 'NO'\n"
    },
    {
        "number": 3728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 4\n1 3 2 4\n1 3 4 2\n''') == 'YES'\nassert solution('''4 4\n1 2 3 4\n2 3 4 1\n3 4 1 2\n4 1 2 3\n''') == 'NO'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1 1 1\n\"\"\") == '0'\n\nassert solution(\n\"\"\"\n1 2 1\n\"\"\") == '666666672'\n\nassert solution(\n\"\"\"\n1 2 2\n\"\"\") == '666666666666666666666666666666666667'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1 1''') == '0'\nassert solution('''1 2 1''') == '666666672'\nassert solution('''1 3 1''') == '11111111111111111111111111111'\nassert solution('''1 4 1''') == '11111111111111111111111111111'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1') == '0', solution('1 1 1')\nassert solution('1 2 1') == '666666672', solution('1 2 1')"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\\n\") == \"0\\n\"\nassert solution(\"1 2 1\\n\") == \"666666672\\n\""
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\nassert solution('1 1 2') == '2857142857'\nassert solution('1 2 2') == '1'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\"\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '0'\nassert solution('1 2 1') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1 1\n''') == '0'\nassert solution('''1 2 1\n''') == '666666672'\n"
    },
    {
        "number": 3729,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 1\") == \"666666672\""
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution([6,7,2,3,1,5,6]) == 5\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input(\"\")) == \"0\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6') == '5'\nassert solution('7') == '4'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n7 2 3 1 5 6') == '5'\nassert solution('8\\n5 2 3 1 5 6') == '2'\nassert solution('4\\n2 2 2 2 2') == '2'\nassert solution('3\\n2 2 2 2') == '3'\nassert solution('6\\n7 2 3 1 5 6') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([6, 7, 2, 3, 1, 5, 6]) == 5\nassert solution([5, 1, 2, 3, 4]) == 4\n\n\n\"\"\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6\n7 2 3 1 5 6\n''') == 5\nassert solution('''\n2\n1 2\n''') == 1\nassert solution('''\n3\n1 2 3\n''') == 2\nassert solution('''\n3\n1 2 1\n''') == 3\nassert solution('''\n6\n1 2 3 4 5 6\n''') == 4\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\n7 2 3 1 5 6\") == \"5\"\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6') == '5'\nassert solution('7') == '6'\nassert solution('6') == '5'\nassert solution('6') == '5'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6\n7 2 3 1 5 6''') == '5'\nassert solution('''6\n7 2 3 1 5 6''') == '4'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1 1 8') == '2'\nassert solution('4 2 2 6') == '3'\nassert solution('3 7 4 6') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 7 4 6') == '1'\nassert solution('4 2 2 6') == '2'\nassert solution('3 7 4 6') == '3'\nprint('\"Run\" is good. How is \"Check\"?')"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 1 1 8''') == '2'\nassert solution('''4 2 2 6''') == '3'\nassert solution('''3 7 4 6''') == '1'\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 1 1 8''') == \"2\"\nassert solution('''4 2 2 6''') == \"3\"\nassert solution('''3 7 4 6''') == \"1\""
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 1 8\n''') == '2'\nassert solution('''\n4 2 2 6\n''') == '3'\nassert solution('''\n3 7 4 6\n''') == '1'\n\nstdin = '''\n5 1 1 8\n'''\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\""
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\nassert solution(\"3 5 4 6\") == \"1\""
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 3731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 8\") == \"2\"\nassert solution(\"4 2 2 6\") == \"3\"\nassert solution(\"3 7 4 6\") == \"1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input(\":-1 4 15\")) == \"4\"\nassert solution(input(\":-1 -5 15\")) == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2 5') == \"2\"\nassert solution('-1 4 15') == \"4\"\nassert solution('0 -1 5') == \"-1\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2 5\") == \"2\"\nassert solution(\"-1 4 15\") == \"4\"\nassert solution(\"0 -1 5\") == \"-1\""
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 5') == '2'\nassert solution('-1 4 15') == '4'\nassert solution('0 -1 5') == '-1'"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1 2 5\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n-1 4 15\n\"\"\") == \"4\"\n\nassert solution(\n\"\"\"\n0 -1 5\n\"\"\") == \"-1\"\n\n\"\"\"\nYou can find more information on this challenge in the solutions.\n\nWhat if we have a very large input?\n\"\"\"\nimport csv"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2 5\n''') == '2'\nassert solution('''\n-1 4 15\n''') == '4'\nassert solution('''\n0 -1 5\n''') == '-1'\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2 5\\n\") == \"2\"\nassert solution(\"-1 4 15\\n\") == \"4\"\nassert solution(\"0 -1 5\\n\") == \"-\"\n"
    },
    {
        "number": 3732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 2 5\n0 -1 5\n-1 4 15''') == \"2\"\nassert solution('''1 2 5\n0 -1 5\n-1 4 -5''') == \"4\"\nassert solution('''-1 4 -5\n1 2 5\n0 -1 5''') == \"-1\"\nassert solution('''1 2 5\n0 -1 5\n-1 4 7''') == \"4\"\nassert solution('''-1 -5\n1 2 5\n0 -1 5''') == \"-1\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''6 2\n2 1 2 3 4 3''') == '0'\nassert solution('''6 1\n1 1 2 2 3 3''') == '2'\nassert solution('''6 1\n1 1 2 2 3 3''') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 1\\n2 1 2 3 4 3') == '2'\nassert solution('6 2\\n1 1 2 2 3 3') == '0'\nassert solution('6 1\\n1 1 2 2 3 3') == '1'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    6 1\n    2 1 2 3 4 3\n    ''') == \"2\"\n\nassert solution('''\n    6 2\n    2 1 2 3 4 3\n    ''') == \"0\"\n\nassert solution('''\n    6 1\n    1 1 2 2 3 3\n    ''') == \"2\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\n\nassert solution('''\n6 2\n1 1 2 2 3 3\n''') == '0'\n\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''6 2\n2 1 2 3 4 3\n''') == '0'\nassert solution('''6 1\n1 1 2 2 3 3\n''') == '2'"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"6 1\n2 1 2 3 4 3\"\"\") == \"2\"\n\nassert solution(\"\"\"6 1\n1 1 2 2 3 3\"\"\") == \"0\"\n\nassert solution(\"\"\"6 1\n1 1 2 2 3 3\"\"\") == \"1\"\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == '0'\nassert solution('6 1') == '2'\nassert solution('6 2') == '0'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''6 2\n1 1 2 2 3 3\n''') == '0'\nassert solution('''6 1\n1 1 2 2 3 3\n''') == '2'\nassert solution('''6 1\n1 1 2 2 3 3\n''') == '0'\nassert solution('''6 1\n2 1 2 3 4 3\n''') == '2'\n"
    },
    {
        "number": 3733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n6 1\n2 1 2 3 4 3\n''') == '2'\nassert solution('''\n6 2\n1 1 2 2 3 3\n''') == '0'\nassert solution('''\n6 1\n1 1 2 2 3 3\n''') == '2'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\nassert solution('saturday') == 'YES'\nassert solution('sunday') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"NO\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\nassert solution(\"saturday\\nsunday\\n\") == \"NO\"\nassert solution(\"sunday\\nsunday\\n\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\nmonday\ntuesday\n''') == 'NO'\nassert solution('''\nsunday\nsunday\n''') == 'YES'\nassert solution('''\nsaturday\ntuesday\n''') == 'YES'\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"monday\\ntuesday\") == \"YES\"\nassert solution(\"saturday\\ntuesday\") == \"YES\"\nassert solution(\"saturday\\nsunday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"monday\") == \"NO\"\nassert solution(\"tuesday\") == \"YES\"\nassert solution(\"saturday\") == \"YES\"\nassert solution(\"sunday\") == \"YES\"\nassert solution(\"wednesday\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"NO\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\nassert solution(\"saturday\\nsunday\\n\") == \"YES\"\nassert solution(\"sunday\\nweekend\\n\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\nmonday\ntuesday\n''') == \"NO\"\nassert solution('''\nsaturday\ntuesday\n''') == \"YES\"\n'''\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"monday\\ntuesday\\n\") == \"NO\"\nassert solution(\"saturday\\ntuesday\\n\") == \"YES\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"monday\\ntuesday\") == \"YES\"\nassert solution(\"saturday\\ntuesday\") == \"YES\"\nassert solution(\"sunday\\ntuesday\") == \"NO\"\nassert solution(\"sunday\\nsaturday\") == \"NO\"\n"
    },
    {
        "number": 3734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('monday') == 'NO'\nassert solution('tuesday') == 'YES'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10000000000\n''') == '91'\nassert solution('''\n1\n''') == '2'\nassert solution('''\n1\n''') == '0'\nassert solution('''\n5000000001\n''') == '91'\nassert solution('''\n5000000001\n''') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"15\") == \"0\"\nassert solution(\"10000000000\") == \"91\"\nassert solution(\"100\") == \"1\""
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"3\"\nassert solution(\"13\\n\") == \"9\"\nassert solution(\"0\\n\") == \"0\"\nassert solution(\"10000000000\\n\") == \"91\""
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.read().strip()"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('35') == '17'\nassert solution('10000000000') == '91'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10000000000') == '91'\nassert solution('1') == '1'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('4') == '0'\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"17\"\nassert solution(sys.stdin.read()) == \"91\""
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"35\") == \"17\"\nassert solution(\"10000000000\") == \"91\"\n"
    },
    {
        "number": 3735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"35\") == \"17\"\nassert solution(\n    \"10000000000\") == \"91\"\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\nprint(solution(input()))\n\n\n'''\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\"\nassert solution(\"ABS\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''AHA''') == 'YES'\nassert solution('''Z''') == 'NO'\nassert solution('''XO''') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"AHA\") == \"YES\"\nassert solution(\"Z\") == \"NO\"\nassert solution(\"XO\") == \"NO\""
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('Z') == 'NO'\nassert solution('XO') == 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AHA') == 'YES'\nassert solution('XO') == 'NO'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('3 3') == '2'\nassert solution('5 1') == '1'\nassert solution('4 4') == '1'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"0\"\nassert solution(\"2 1 5\") == \"1\"\nassert solution(\"3 1 2 5\") == \"1\"\nassert solution(\"5 1 2 5\") == \"2\"\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5') == '0'\nassert solution('3 1 2') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '1'"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 5') == '0'\nassert solution('2\\n1 5') == '1'\n\n------------------------------------------\n\nfrom typing import List\n"
    },
    {
        "number": 3737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == 'Yes'\nassert solution('0 0') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2\nRU\n''') == 'Yes'\nassert solution('''1 2\nRU\n''') == 'No'\nassert solution('''-1 1000000000\nLRRLU\n''') == 'Yes'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1 2\nRUL''') == \"Yes\"\n\nassert solution('''-1 1000000000\nD''') == \"Yes\"\n\nassert solution('''0 0\nRU''') == \"Yes\"\n\nassert solution('''1 1\nRU''') == \"No\"\n\nassert solution('''-1 1000000000\nRUL''') == \"No\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2\\nRU') == 'Yes'\nassert solution('1 2\\nRU') == 'No'\nassert solution('-1 1000000000\\nLRRLU') == 'Yes'\nassert solution('0 0\\nD') == 'Yes'"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('-1 1000000000') == 'Yes'\nassert solution('0 0') == 'Yes'\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\nRU') == \"Yes\"\nassert solution('1 2\\nRU') == \"No\"\nassert solution('-1 1000000000\\nLRRLU') == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\nRURD\") == \"Yes\"\nassert solution(\"1 2\\nRURD\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\"\nassert solution(\"0 0\\nD\") == \"Yes\"\n"
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\nRU\") == \"Yes\"\nassert solution(\"1 2\\nRU\") == \"No\"\nassert solution(\"-1 1000000000\\nLRRLU\") == \"Yes\""
    },
    {
        "number": 3738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"-1 1000000000\") == \"Yes\"\nassert solution(\"0 0\") == \"Yes\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3 10 7''') == \"1\"\nassert solution('''20 20''') == \"0\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_lines) == '1'\nassert solution(input_lines_2) == '0'\nprint('PASSED')\n\n\"\"\"\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''10 3 7\n''') == '1'\nassert solution('''10   3   7\n''') == '1'\nassert solution('''314\n''') == '0'\nassert solution('''222\n''') == '0'\nassert solution('''\n    60\n''') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''10 3 7\n10 3 7\n''') == '1'\nassert solution('''10   3   7\n10   3   7\n''') == '1'\nassert solution('''314\n159 265\n358\n''') == '0'\nassert solution('''22 19 3\n22 19 3\n''') == '1'\nassert solution('''\n60\n29\n''') == '0'\n\nprint('Congratulations! You are the judge of a programming contest! You\u2019ve been put in charge of a problem, and since your problem may not have unique correct output, you\u2019ve got to write an output checker for it.')"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n10 3 7\n''') == '1'\nassert solution('''\n10   3   7\n''') == '1'\nassert solution('''\n314\n159 265\n358\n''') == '0'\nassert solution('''\n22 19 3\n''') == '1'\nassert solution('''\n1,1\n''') == '0'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''10 3 7''') == '1'\nassert solution('''10   3   7''') == '1'\nassert solution('''314''') == '0'\nassert solution('''22 19 3''') == '1'\nassert solution('''60''') == '1'"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"10 3 7\") == \"1\"\nassert solution(\"10   3   7\") == \"1\"\nassert solution(\"314\") == \"0\"\nassert solution(\"22 19 3\") == \"1\""
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 3 7') == '1'\nassert solution('10   3   7') == '1'\nassert solution('314') == '0'\nassert solution('22 19 3') == '1'\nassert solution('60') == '0'\n"
    },
    {
        "number": 3739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 3 7\n        10\n        3\n        7\n        ''') == '1'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '8'\nassert solution('3') == '7'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '9'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"2\") == \"9\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''S\n\n''') == '9'\nassert solution('''10\n\n''') == '9'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '9'\nassert solution('12345') == '1234'\nassert solution('1234567890') == '123456789'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '9'\nassert solution('10') == '19'\n\n\"\"\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '9'\nassert solution('3') == '12'\nassert solution('5') == '15'\nassert solution('10') == '23'\nassert solution('100') == '110'\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"10\") == \"9\"\nassert solution(\"1000000\") == \"9\"\n"
    },
    {
        "number": 3740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '9'\nassert solution('2') == '1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n3 6 28 9\n''') == '4'\nassert solution('''5\n5 12 9 16 48\n''') == '3'\nassert solution('''4\n1 2 4 8\n''') == '-1'\nassert solution('''4\n3 6 28 9\n''') == '4'"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n3 6 28 9\n\n''') == '4', f\"First\"\nassert solution('''\n5\n5 12 9 16 48\n\n''') == '3', f\"Second\"\nassert solution('''\n4\n1 2 4 8\n\n''') == '-1', f\"Third\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '4'\nassert solution('5 4 12 9 16 48') == '3'\nassert solution('4 5 12 9 16 48') == '-1'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == -1\nassert solution(\"1\\n2\") == -1\nassert solution(\"2\\n4\") == -1\nassert solution(\"3\\n6\\n8\\n12\") == 4\nassert solution(\"4\\n1 2 4 8\") == 3\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 12 9 16 48\") == \"3\"\nassert solution(\"4\\n3 6 28 9\") == \"4\"\nassert solution(\"5\\n1 2 4 8\") == \"-1\""
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n3 6 28 9\\n') == '4\\n'\nassert solution('5\\n5 12 9 16 48\\n') == '3\\n'\nassert solution('4\\n1 2 4 8\\n') == '-1\\n'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n5 12 9 16 48\n''') == '3'\n\nassert solution('''\n4\n3 6 28 9\n''') == '4'\n\nprint(solution('''\n5\n5 12 9 16 48\n'''))\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\nassert solution() == '3'\nassert solution() == '-1'\nassert solution() == '5'\nassert solution() == '3'\n\"\"\"\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\n3\\n4\\n1 2 4 8') == '4'\n"
    },
    {
        "number": 3741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 6 28 9\\n\") == \"4\"\nassert solution(\"5\\n5 12 9 16 48\\n\") == \"3\"\nassert solution(\"4\\n1 2 4 8\\n\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n0 5 0 2 3') == '2'\nassert solution('7\\n1 0 0 5 0 0 2') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n0 5 0 2 3\n''') == '2'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0 5 0 2 3\") == \"2\"\nassert solution(\"7\\n1 0 0 5 0 0 2\") == \"1 7 3 5 6 4 2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10\n0 5 0 2 3\n''') == '2'\nassert solution('''\n5\n1 0 0 5 0 0 2\n''') == '1'\nassert solution('''\n7\n1 0 0 5 0 0 2\n''') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n0 5 0 2 3\n\n''') == '2'\nassert solution('''7\n1 0 0 5 0 0 2\n\n''') == '1 7 3 5 6 4 2'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"2\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 5 0 2 3\") == \"2\"\nassert solution(\"7 1 0 0 5 0 0 2\") == \"1\"\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1 7 3 5 6 4 2'\nassert solution('5') == '1 5 4 2 3'\n\n\"\"\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == '5'\nprint('All test cases passed!')\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n''') == '2'\nassert solution('''\n5\n''') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"10\") == \"7\"\nassert solution(\"13\") == \"7\"\nassert solution(\"20\") == \"8\"\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('5') == '5'"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n''') == '2'\nassert solution('''\n5\n''') == '5'\nassert solution('''\n10\n''') == '5'\nassert solution('''\n200\n''') == '4'\n"
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 3743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n5\n3\n1\n4\n''') == '5'\nassert solution('''7\n5\n1\n3\n5\n2\n''') == '7'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"5 2 5 2 1\") == \"1 2 3 4\"\nassert solution(\"4 2 2 1 4\") == \"1 2 3 4\"\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4''') == '31'\nassert solution('''5 3 1\n5 2 5 1 7\n6 3 1 6 3''') == '23'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 2 2\\n1 3 4 5 2') == '18\\n3 4 \\n1 5 \\n4'\nassert solution('4 2 2\\n10 8 8 3\\n10 7 9 4') == '31\\n1 3 5 \\n4'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''\n4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'\nassert solution('''\n5 3 1\n5 2 5 1 7\n6 3 1 6 3\n''') == '23'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n''') == '18'\nassert solution('''\n4 2 2\n10 8 8 3\n10 7 9 4\n''') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '18 4'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('4 2 2') == '31'\n\nassert solution('5 3 1') == '1 3 5'\nassert solution('6 3 1 6 3') == '4'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5 2 2\n1 3 4 5 2\n5 3 2 1 4''') == '18'\nassert solution('''4 2 2\n10 8 8 3\n10 7 9 4''') == '31'\n"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 3') == '21'\nassert solution('4 2 2') == '24'\nassert solution('5 2 2') == '31'"
    },
    {
        "number": 3744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2 2') == '18'\nassert solution('5 2 2') == '23'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 3') == 'No'\nassert solution('2 1') == 'Yes'\nassert solution('10 1') == 'Yes'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('4 3') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_) == \"Yes\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 4\") == \"Yes\"\nassert solution(\"5 2\\n1 3\\n1 4\\n2 5\\n3 1\") == \"No\""
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open(0).read()) == 'Yes'\nassert solution(open(1).read()) == 'aa'\nassert solution(open(2).read()) == 'Yes'\nassert solution(open(3).read()) == 'Yes'\nassert solution(open(4).read()) == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Yes'\nassert solution('2 1') == 'No'\n"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 1') == 'Yes'\nassert solution('4 3') == 'No'"
    },
    {
        "number": 3745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n3\n''') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('0 2 2') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 1 0\n3\n''') == '7'\nassert solution('''\n0 2 1\n1 0 100\n1 2 0\n5\n''') == '87'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 1 0\n3\n''') == '7'\nassert solution('''\n0 2 2\n1 0 100\n1 2 0\n3\n''') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n\n1 1 1\n1 1 1\n1 1 1\n''') == '7'\n\nassert solution('''\n5\n\n1 1 1\n1 0 1\n0 1 0\n1 0 1\n1 1 0\n''') == '19'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"0 2 2\") == \"19\"\nassert solution(\"0 3 3\") == \"18\"\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '7'\nassert solution('''\n0 2 2\n1 0 100\n1 2 0\n3\n''') == '87'\nassert solution('''\n0 1 1\n1 0 1\n1 2 0\n3\n''') == '19'"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 1\\n1 0 1\\n1 2 0\\n3') == '7'\nassert solution('3\\n1 2 3\\n1 3 2\\n2 3 1\\n2 1 3\\n3 3 1\\n3 2 1') == '14'\n"
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0 1 1\") == \"7\"\nassert solution(\"1 0 1\") == \"7\"\nassert solution(\"1 2 0\") == \"19\""
    },
    {
        "number": 3746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 1 1') == '7'\nassert solution('1 0 1') == '7'\nassert solution('1 2 0') == '19'\nassert solution('3') == '87'"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"cB\") == \"1\"\nassert solution(\"cF\") == \"0\"\nassert solution(\"cFdsaB\") == \"1\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('F') == 0\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == 2\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '2'"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"Bulbbasaur\") == \"1\"\nassert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '2'"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('aBddulbasaurrgndgbualdBdsagaurrgndbb') == '2'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"Bulbbasaur\"\n) == \"1\"\nassert solution(\n    \"F\"\n) == \"0\"\nassert solution(\n    \"aBddulbasaurrgndgbualdBdsagaurrgndbb\"\n) == \"2\"\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''Bulbbasaur\n''') == '1'\nassert solution('''aBddulbasaurrgndgbualdBdsagaurrgndbb''') == '2'\nassert solution('''F\n''') == '0'\n"
    },
    {
        "number": 3747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"F\") == \"0\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\nassert solution(\"aBddulbasaurrgndgbualdBdsagaurrgndbb\") == \"2\"\nprint(solution(input()))\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('5 3\\nabcd\\nefgh\\nijkl') == 'NO'\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\narc\\nrac\") == \"YES\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\narc\\nrac') == 'YES'\nassert solution('4 3\\ncat\\nmat\\npat\\nbat') == 'NO'"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 3\narc\nrac''') == 'YES'\nassert solution('''2 1\narc\nrac''') == 'NO'\n'''"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\nassert solution(\"2 1\\nA\") == \"NO\"\nassert solution(\"2 2\\na b\\nc d\\ne f\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '2 3\\narc\\nrac') == 'YES'\nassert solution(\n    '2 2\\nab\\nab') == 'NO'\nassert solution(\n    '5 5\\nabcd\\nabc\\nd\\nef\\nef\\nf') == 'NO'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\narc\\nrac\") == \"YES\"\n"
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 4\narc\nrac\n''') == \"YES\"\n\nassert solution('''4 3\narc\narc\n''') == \"NO\""
    },
    {
        "number": 3748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3\\narc\\nrac\"\n) == \"YES\"\n\nassert solution(\n    \"6 9\\nfel\\nvle\\nfcr\\ndru\\nkne\\ndse\\nfru\\nfht\\nrne\\njux\\nhse\\nmci\\nfkk\\nmrq\\nfkg\\nfyl\\nmge\\ngni\\nkkl\\nfra\\nfdy\\nrhl\\nkne\\njux\\nfel\\nvle\\nfcr\\ndru\\n\"\n) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 111\") == \"4\"\nassert solution(\"10 1\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 111\n1111\n10111\n10010''') == '4'\n'''\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 0\n1\n2\n3\n4\n5\n''') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\"\n\"\"\"\nimport math\n\nN, X = map(int, input().split())\nb = list(map(int, input().split()))\n\nm = math.ceil(math.log2(X))\np = math.ceil(math.log2(N))\n\ndp = [1] * (2 ** p)\ndp[0] = 0\nfor i in range(1, 2 ** p):\n    for j in range(i):\n        if j == 0:\n            continue\n        if dp[i - 2 ** j] == 0:\n            break\n        if 2 ** (i - j) < X:\n            dp[i] += dp[i - 2 ** j]\n\ndp[0] = 0\nfor i in range(1, 2 ** p):\n    for j in range(i):\n        if j == 0:\n            continue\n        if dp[i - 2 ** j] == 0:\n            break\n        if 2 ** (i - j) < X:\n            dp[i] += dp[i - 2 ** j]\n\nprint(sum(dp) % 998244353)\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 111') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 2') == '0'\nassert solution('4 20') == '1'\n\"\"\"\n\nN, X = map(int, input().split())"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 11') == '5'\nassert solution('3 1') == '4'\nassert solution('2 3') == '1'\n\"\"\""
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 100') == '4'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 111') == '4'\nassert solution('3 2') == '3'\nassert solution('10 1') == '9'\n"
    },
    {
        "number": 3749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 111\n1111\n10111\n10010\n\"\"\") == \"4\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 11 5\") == \"1\"\nassert solution(\"1 11 2\") == \"1\"\nassert solution(\"1 11 5\") == \"-1\"\nassert solution(\"1 11 2\") == \"-1\"\nassert solution(\"1 11 -1\") == \"1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''11 11 5''') == '1'\nassert solution('''11 2 3''') == '-1'"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"11 11 5\") == \"1\", \"Testing\"\nassert solution(\"11 2 3\") == \"-1\", \"Testing\""
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11 11 5') == '1'\nassert solution('11 2 3') == '-1'\nassert solution('1 1 1') == '1'\nassert solution('1 100 1') == '-1'\nassert solution('1 100 1') == '-1'\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 5\") == 1\nassert solution(\"2 2 3\") == -1\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 3750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"11 11 5\") == \"1\"\nassert solution(\"11 2 3\") == \"-1\"\nassert solution(\"-1\") == \"1\"\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''abacaba''') == 'NO'\nassert solution('''jinotega''') == 'YES'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    'abacaba') == 'YES'\nassert solution(\n    'jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 'YES'\nassert solution('jinotega') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"jinotega\") == \"NO\""
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\nnumber string number character number string number\n''') == 'YES', 'Test #1 fail'\nassert solution('''\njinotega\n''') == 'NO', 'Test #2 fail'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\nabacaba\n''') == 'NO'\nassert solution('''\njinotega\n''') == 'NO'\n"
    },
    {
        "number": 3751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''abacaba''') == 'YES'\nassert solution('''jinotega''') == 'NO'"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\nassert solution(\"5 1 4\") == \"1.25\"\nassert solution(\"9 9 9\") == \"1.0\"\nassert solution(\"10 10 10\") == \"0.0\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\"\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n\n\n\"\"\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == '6.5'\n\n\"\"\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"6.5\"\nassert solution(\"4 2 20\") == \"20.0\""
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2 6\n''') == '6.5'\nassert solution('''\n4 2 20\n''') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n'''\n\n\n\nstdin = '''\n3 2 6\n'''"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2 6') == '6.5'\nassert solution('4 2 20') == '20.0'\n"
    },
    {
        "number": 3752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2 6''') == '6.5'\nassert solution('''4 2 20''') == '20.0'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 4\n....\n.##.\n....\n\n''') == '1'\nassert solution('''\n4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2\\n..\\n..') == '2'\nassert solution('4 4\\n....\\n#.#.') == '1'\nassert solution('3 4\\n....\\n.##') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n..\n..\n\nOutput\n2''') == '1'\n\nassert solution('''4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2') == '2'\nassert solution('3 4') == '2'\nassert solution('3 4') == '1'\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2\n..\n..\n\n''') == '2'\n\nassert solution('''\n4 4\n....\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '1'\nassert solution('3 4') == '2'"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"10 10\") == \"7\"\n"
    },
    {
        "number": 3753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3\n..\n.##\n''') == '1'\nassert solution('''4 4\n....\n.##.\n....\n''') == '2'\nassert solution('''5 5\n....\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 3\\n\") == \"6\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1 1 3\") == \"6\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 3') == '6'\n\"\"\"\n\nn = int(input())\nd = input().split()\n\narr = []\nfor i in range(n):\n    arr.append(int(d[i]))\n\nimport itertools\n\narr = list(itertools.permutations(arr))\n\ndic = {}\n\nfor i in range(len(arr)):\n    t = 0\n    for j in range(len(arr[i])):\n        t += arr[i][j]\n    dic[t] = i\n\nans = 0\nfor i in range(len(arr)):\n    for j in range(len(arr[i])):\n        if j+1 in arr[i]:\n            break\n    else:\n        ans += 1\n\nprint(ans)"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 3\\n') == '6'\nassert solution('1\\n1\\n') == '1'\nassert solution('5\\n1 1 3 4\\n') == '6'\n\n'''\n\nclass Solution:\n    def solve(self, stdin):\n        N = int(stdin.split()[0])\n        d_dict = dict()\n        for i in range(N):\n            d_dict[i] = list(map(int, stdin.split()[1:]))\n        \n        count = 0\n        d_dict_sorted = sorted(d_dict.items(), key = lambda x : (x[1][0], -x[1][1]))\n        \n        \n        for i in range(len(d_dict_sorted)-1):\n            for j in range(i+1, len(d_dict_sorted)):\n                if (d_dict_sorted[i][1][0], -d_dict_sorted[j][1][1]) not in d_dict_sorted[i+1][1]:\n                    count += 1\n        return str(count % 998244353)"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([1, 1, 3]) == \"6\"\nassert solution([2, 2, 3]) == \"6\"\nassert solution([3, 1, 3]) == \"6\"\nassert solution([2, 2, 2]) == \"4\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 3\\n\") == \"6\"\nassert solution(\"5\\n2 2 1\\n\") == \"4\"\nassert solution(\"4\\n2 2 1\\n\") == \"0\"\nassert solution(\"5\\n2 1 3\\n\") == \"1\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 3') == '6'\nassert solution('5\\n1 2 4 4') == '6'\nassert solution('4\\n2 1 2') == '1'\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 3754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 3\\n\") == \"6\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n2 3 4 5 6 7 8 9 10 11 12 13 14 15\n''') == '41'\nassert solution('''\n10\n1 4 3 7 5\n3 2 6 8 10\n4 7 9 11 12 13 14 15\n6 8 11 14 15 16 17 18\n9 12 13 16 17 18 19\n10 11 12 13 14 15 16 17\n13 14 15 17 18 19 20\n16 17 18 19 20 21 22\n19 20 21 22 23 24 25 26\n21 22 23 24 25 26 27 28\n23 24 25 26 27 28 29 30\n24 25 26 27 28 29 30 31\n25 26 27 28 29 30 31 32\n26 27 28 29 30 31 32 33\n27 28 29 30 31 32 33 34\n28 29 30 31 32 33 34 35\n29 30 31 32 33 34 35 36\n30 31 32 33 34 35 36 37\n31 32 33 34 35 36 37 38\n32 33 34 35 36 37 38 39\n33 34 35 36 37 38 39 40\n34 35 36 37 38 39 40 41\n35 36 37 38 39 40 41 42\n36 37 38 39 40 41 42 43\n37 38 39 40 41 42 43 44\n38 39 40 41 42 43 44 45\n39 40 41 42 43 44 45 46\n40 41 42 43 44 45 46 47\n41 42 43 44 45 46 47 48\n42 43 44 45 46 47 48 49\n43 44 45 46 47 48 49 50\n44 45 46 47 48 49 50 51\n45 46 47 48 49 50 51 52\n46 47 48 49 50 51 52 53\n47 48 49 50 51 52 53 54\n48 49 50 51 52 53 54 55\n49 50 51 52 53 54 55 56\n50 50 51 52 53 54 55 56 57\n51 52 53 54 55 56 57 58\n52 53 54 55 56 57 58 59\n53 54 55 56 57 58 59 60\n54 55 56 57 58 59 60 61\n55 56 57 58 59 60 61 62\n56 57 58 59 60 61 62 63\n57 58 59 60 61 62 63 64\n58 59 60 61 62 63 64 65\n59 60 61 62 63 64 65 66\n60 61 62 63 64 65 66 67\n61 62 63 64 65 66 67 68\n62 63 64 65 66 67 68 69\n63 64 65 66 67 68 69 70\n64 65 66 67 68 69 70 71\n65 66 67 68 69 70 71 72\n66 67 68 69 70 71 72 73\n67 68 69 70 71 72 73 74\n68 69 70 71 72 73 74 75\n69 70 71 72 73 74 75 76\n70 71 72 73 74 75 76 77\n71 72 73 74 75 76 77 78\n72 73 74 75 76 77 78 79\n73 74 75 76 77 78 79 80\n74 75 76 77 78 79 80 81\n75 76 77 78 79 80 81 82\n76 77 78 79 80 81 82 83\n77 78 79 80 81 82 83 84\n78 79 80 81 82 83 84 85\n79 80 81 82 83 84 85 86\n80 81 82 83 84 85 86 87\n81 82 83 84 85 86 87 88\n82 83 84 85 86 87 88 89\n83 84 85 86 87 88 89 90\n84 85 86 87 88 89 90 91\n85 86 87 88 89 90 91 92\n86 87 88 89 90 91 92 93\n87 88 89 90 91 92 93 94\n88 89 90 91 92 93 94 95\n89 90 91 92 93 94 95 96\n90 91 92 93 94 95 96 97\n91 92 93 94 95 96 97 98\n92 93 94 95 96 97 98 99\n93 94 95 96 97 98 99 100\n94 95 96 97 98 99 100 101\n95 96 97 98 99 100 101 102\n96 97 98 99 100 101 102 103\n97 98 99 100 101 102 103 104\n98 99 100 101 102 103 104 105\n99 100 101 102 103 104 105 106\n100 101 102 103 104 105 106 107\n100 101 102 103 104 105 106 108\n100 101 102 103 104 105 106 109\n100 101 102 103 104 105 106 110\n100 101 102 103 104 105 106 111\n100 101 102 103 104 105 106 112\n100 101 102 103 104 105 106 113\n100 101 102 103 104 105 106 114\n100 101 102 103 104 105 106 115\n100 101 102 103 104 105 106 116\n100 101 102 103 104 105 106 117\n100 101 102 103 104 105 106 118\n100 101 102 103 104 105 106 119\n100 101 102 103 104 105 106 120\n100 101 102 103 104 105 106 121\n100 101 102 103 104 105 106 122\n100 101 102 103 104 105 106 123\n100 101 102 103 104 105 106 124\n100 101 102 103 104 105 106 125\n100 101 102 103 104 105 106 126\n100 101 102 103 104 105 106 127\n100 101 102 103 104 105 106 128\n100 101 102 103 104 105 106 129\n100 101 102 103 104 105 106 130\n100 101 102 103 104 105 106 131\n100 101 102 103 104 105 106 132\n100 101 102 103 104 105 106 133\n100 101 102 103 104 105 106 134\n100 101 102 103 104 105 106 135\n100 101 102 103 104 105 106 136\n100 101 102 103 104 105 106 137\n100 101 102 103 104 105 106 138\n100 101 102 103 104 105 106 139\n100 101 102 103 104 105 106 140\n100 101 102 103 104 105 106 141\n100 101 102 103 104 105 106 142\n100 101 102 103 104 105 106 143\n100 101 102 103 104 105 106 144\n100 101 102 103 104 105 106 145\n100 101 102 103 104 105 106 146\n100 101 102 103 104 105 106 147\n100 101 102 103 104 105 106 148\n100 101 102 103 104 105 106 149\n100 101 102 103 104 105 106 150\n100 101 102 103 104 105 106 151\n100 101 102 103 104 105 106 152\n100 101 102 103 104 105 106 153\n100 101 102 103 104 105 106 154\n100 101 102 103 104 105 106 155\n100 101 102 103 104 105 106 156\n100 101 102 103 104 105 106 157\n100 101 102 103 104 105 106 158\n100 101 102 103 104 105 106 159\n100 101 102 103 104 105 106 160\n100 101 102 103 104 105 106 161\n100 101 102 103 104 105 106 162\n100 101 102 103 104 105 106 163\n100 101 102 103 104 105 106 164\n100 101 102 103 104 105 106 165\n100 101 102 103 104 105 106 166\n100 101 102 103 104 105 106 167\n100 101 102 103 104 105 106 168\n100 101 102 103 104 105 106 169\n100 101 102 103 104 105 106 170\n100 101 102 103 104 105 106 171\n100 101 102 103 104 105 106 172\n100 101 102 103 104 105 106 173\n100 101 102 103 104 105 106 174\n100 101 102 103 104 105 106 175\n100 101 102 103 104 105 106 176\n100 101 102 103 104 105 106 177\n100 101 102 103 104 105 106 178\n100 101 102 103 104 105 106 179\n100 101 102 103 104 105 106 180\n100 101 102 103 104 105 106 181\n100 101 102 103 104 105 106 182\n100 101 102 103 104 105 106 183\n100 101 102 103 104 105 106 184\n100 101 102 103 104 105 106 185\n100 101 102 103 104 105 106 186\n100 101 102 103 104 105 106 187\n100 101 102 103 104 105 106 188\n100 101 102 103 104 105 106 189\n100 101 102 103 104 105 106 190\n100 101 102 103 104 105 106 191\n100 101 102 103 104 105 106 192"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '11'\n\n\"\"\""
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '11'\nassert solution('2') == '2'\nassert solution('4') == '4'\nassert solution('6') == '6'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n5\n1 1 2 3 1\n''') == '10'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '5'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"10\") == \"6\"\nassert solution(\"1\") == \"10\"\nassert solution(\"5\") == \"12\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '11'\nassert solution('4') == '4'\nassert solution('3') == '1'\nassert solution('2') == '2'\nassert solution('1') == '2'\n"
    },
    {
        "number": 3755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 4 3 7 5\n''') == '11'\nassert solution('''\n4\n2 5\n''') == '11'\nassert solution('''\n5\n1 4 3 7 5\n''') == '10'\nassert solution('''\n3\n4 3\n''') == '9'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 1\n10.245\n\n6 2\n10.245\n\n3 100\n9.2\n\n3 10\n10.1\n''') == '10.25'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 1\\n10.245\") == \"10.25\"\nassert solution(\"6 2\\n10.245\") == \"10.3\"\nassert solution(\"3 100\\n9.2\") == \"9.2\""
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1') == '5.0'\nassert solution('5 2') == '5.0'\nassert solution('4 2') == '4.00'\nassert solution('3 2') == '3.00'\nassert solution('2 2') == '2.00'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 1\\n10.245') == '10.25'\nassert solution('6 2\\n10.245') == '10.3'\nassert solution('3 100\\n9.2') == '9.2'\nassert solution('5 1\\n1.1') == '1.1'\nassert solution('5 2\\n1.1') == '1.1'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n10.245\n\n''') == '10.25'\nassert solution('''5\n10.245\n\n''') == '10.26'\nassert solution('''100\n9.2\n\n''') == '9.3'\nassert solution('''3\n9.2\n\n''') == '9.2'\nassert solution('''1\n9.2\n\n''') == '9.2'"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 1\n10.245\n\n''') == '10.25'\n\nassert solution('''\n6 2\n10.245\n\n''') == '10.3'\n\nassert solution('''\n3 100\n9.2\n\n''') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == '10.25'\nassert solution('6 2') == '10.3'\nassert solution('3 100') == '9.2'\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1.0\"\nassert solution(\"2 2\") == \"1.0\"\nassert solution(\"2 3\") == \"2.0\"\nassert solution(\"3 2\") == \"2.0\"\nassert solution(\"3 3\") == \"2.0\"\n"
    },
    {
        "number": 3756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''6 1\n10.245\n\n6 2\n10.245\n\n3 100\n9.2\n\n7 5\n7.45''') == '10.25'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 2 3 4''') == '0110'\nassert solution('''1 2 2 1''') == '1120'\nassert solution('''1 2 1 1''') == '0111'\nassert solution('''1 1 1 1''') == '0111'\nassert solution('''2 1 1 1''') == '0111'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 2 3 4''') == \"Impossible\"\nassert solution('''1 2 2 1''') == \"0110\"\nassert solution('''1 1 1 1''') == \"0111\"\nassert solution('''0 1 1 0''') == \"0110\"\nassert solution('''1 1 0 1''') == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 2 1 3\n\"\"\") == \"0110\"\nassert solution(\"\"\"\n1 2 2 1\n\"\"\") == \"Impossible\""
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1 1''') == \"0110\"\nassert solution('''1 2 2 1''') == \"0110\"\nassert solution('''1 2 2 1''') == \"0110\"\nassert solution('''1 2 2 1''') == \"0110\"\nassert solution('''1 2 2 1''') == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 2 1') == '0110'\nassert solution('1 2 2 2') == '0'\nassert solution('1 2 3 1') == '0'"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == \"0110\"\nassert solution('1 2 2 1') == \"0110\"\nassert solution('1 2 1 1') == \"0111\"\nassert solution('1 2 1 1') == \"0111\"\nassert solution('1 2 1 1') == \"0111\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == 'Impossible'\nassert solution('1 2 2 1') == '0110'\nassert solution('1 2 1 2') == '11'\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([1, 2, 3, 4]) == \"0110\"\n"
    },
    {
        "number": 3757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"0110\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n.*..P*P*\n\n''') == \"3\"\nassert solution('''\n10\n.**PP.*P.*\n\n''') == \"2\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''7\n*..P*P*\n\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''7\n*..P*P*\n\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n\n''') == '2'\nassert solution('''8\n*..P*\nP*..\n**P*\n*.*P\n*.*P\n*..P*\n''') == '4'\nassert solution('''4\n*...P\n*.*P\n*.*P\n*.*P\n\n''') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"1\"\nassert solution(input_2) == \"3\"\nassert solution(input_3) == \"2\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('7') == '3'\nassert solution('10') == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '3'\nassert solution('7') == '3'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"10\") == \"2\""
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '7'\n    ) == '3'\nassert solution(\n    '10'\n    ) == '2'\n"
    },
    {
        "number": 3758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7\n*.P*.P*\n''') == '3'\nassert solution('''10\n.**PP.*P.*\n''') == '2'\nassert solution('''11\n.**P.**.P*\n''') == '3'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n\n\n\"\"\"\nimport math"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"2\") == \"8\"\nassert solution(\"3\") == \"16\"\nassert solution(\"100000\") == \"1050000\"\nassert solution(\"10\") == \"21\"\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '4'\nassert solution('3\\n') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '16'\nassert solution('1') == '4'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'\n"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '8'\nassert solution('3') == '16'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"9 9 5 5 2 1\"\n) == \"1 3 9 7\"\nassert solution(\n    \"100 100 52 50 46 56\"\n) == \"17 8 86 92\""
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"7 1 1 1 1 1\") == \"3 3\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('9 9 5 5 2 1\\n') == '1 3 9 7'\nassert solution('100 100 52 50 46 56\\n') == '17 8 86 92'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"6 3 10 9 1 1\") == \"1 3 9 7\"\nassert solution(\n    \"5 4 7 7 1 2\") == \"2 4 7 7\""
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '1 3 9 7'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '1 3 9 7'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 6 6 1 1 1\n5 5 5 2 1\n''') == '3 1 3'\nassert solution('''6 6 6 1 1 1\n3 5 5 2 1\n''') == '2 2 2'\nassert solution('''6 6 6 1 1 1\n5 5 5 2 1\n''') == '3 2 2'\nassert solution('''6 6 6 1 1 1\n5 5 5 2 1\n''') == '4 2 2'\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 9 4 5 2 1\") == \"3 9 7\"\n"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('9 9 5 5 2 1') == '1 3 9 7'\nassert solution('100 100 52 50 46 56') == '17 8 86 92'"
    },
    {
        "number": 3760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9 9 5 5 2 1\n''') == '1 3 9 7'\nassert solution('''\n100 100 52 50 46 56\n''') == '17 8 86 92'\n''')"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TFFTFFF\") == \"No\"\n\"\"\"\nimport re\nfrom typing import Dict\nimport math\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('FTFFFTHFT') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''F\nT\nF\nF\nT\nF\nF\nF''') == 'Yes', 'First Part'\nassert solution('''T\nT\nT\nT\nT\nT\nT\nF''') == 'No', 'Second Part'\nassert solution('''F\nT\nT\nT\nF\nT\nT\nT''') == 'No', 'Third Part'\nassert solution('''F\nF\nF\nF\nT\nF\nT\nF''') == 'No', 'Fourth Part'\n''')\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"FTFFF\") == \"Yes\"\nassert solution(\"TTFT\") == \"No\"\nassert solution(\"TTFF\") == \"Yes\"\nassert solution(\"FTTFF\") == \"Yes\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"FTFFTFFF\"\n) == \"Yes\"\nassert solution(\n    \"TTTTTT\"\n) == \"No\"\n\"\"\""
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('FTFFTFFF') == 'Yes'\nassert solution('TTFFTFFF') == 'No'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''F\nT\nF\nF\nF\nF\nF\nF\nT\nF''') == 'Yes'\nassert solution('''T\nF\nT\nF\nT\nF\nT\nF\nT\nF''') == 'No'\nassert solution('''F\nT\nF\nF\nT\nT\nF\nT\nT\nF''') == 'Yes'\nassert solution('''F\nT\nT\nT\nT\nF\nF\nT\nF''') == 'No'\nassert solution('''F\nF\nF\nF\nT\nT\nT\nF''') == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"FTFFTFFF\") == \"Yes\"\nassert solution(\"TFFFFF\") == \"No\"\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == 'Yes'\n"
    },
    {
        "number": 3761,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"Yes\"\n'''"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n2\n3\n''') == '5'\nassert solution('''4\n3\n1\n''') == '5'\nassert solution('''2\n1\n''') == '2'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\n\"\"\"\n) == \"5\"\nassert solution(\n\"\"\"\n2\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n4\n\"\"\"\n) == \"6\"\nassert solution(\n\"\"\"\n5\n\"\"\"\n) == \"8\""
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n''') == '2'\nassert solution('''2\n''') == '3'\nassert solution('''3\n''') == '5'\nassert solution('''4\n''') == '6'\nassert solution('''5\n''') == '7'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'\nprint(solution(input()))"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '3'\nassert solution('3') == '5'\nassert solution('4') == '6'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1\n\n2\n\n3\n\n4\n\n5\n\n6''') == '6'\n\nassert solution('''6\n\n7\n\n8\n\n9\n\n10''') == '15'\n\nassert solution('''10\n\n11\n\n12\n\n13\n\n14\n\n15''') == '20'"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\n''') == '2'\nassert solution('''3\n''') == '5'\nassert solution('''4\n''') == '6'\n"
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\""
    },
    {
        "number": 3762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '1.3333333333'\nprint(solution())\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '1.3333333333'\nassert solution('2') == '0.5'\nassert solution('3') == '0.666666666667'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2 3\n3\n\n''') == '1.3333333333'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n3 2 3 2\n3\n''') == '1.6666666666667'\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.3333333333\"\nassert solution(\"5\") == \"1.41421356237\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1.3333333333\"\nprint(solution())\n\n\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n3\\n\") == \"1.3333333333\"\nassert solution(\"4\\n1 2 3 4\\n4\\n\") == \"0.5\"\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\n3\\n') == '1.3333333333'\nprint(solution(input()))\n"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1.3333333333'"
    },
    {
        "number": 3763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2 3\n3\n\n''') == '1.'\n\nassert solution('''4\n3 4 3 3\n4\n\n''') == '1.'\n\nassert solution('''2\n1 2\n1\n\n''') == '2.'\n\nassert solution('''2\n1 2\n1\n\n''') == '2.'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2\") == \"13 7\"\nassert solution(\"5 1 2\") == \"9 7 11 15 5\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '13 7'\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"13 7\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 2 5\\n3 5 4\\n') == '2 5'\nassert solution('3 2 5\\n3 5 4\\n') == '2 5'\nassert solution('4 2 5 6\\n2 4 5 6\\n') == '3'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"13 7\""
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"13 7\\n986 605\"\nassert solution(\"\") == \"13 7\\n986 605\"\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 1 2\n9 7 11 15 5''') == '13 7'\nassert solution('''2 100000 569\n605 986''') == '986 605'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 2') == '13 7'\nassert solution('5 1 2') == '13 7'\nassert solution('7 1 2') == '11 6'"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n1\n5\n\"\"\") == \"\"\"\n13 7\n\"\"\"[:-1]\n"
    },
    {
        "number": 3764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 1 2\\n\"\n    \"9 7 11 15 5\\n\"\n    ) == \"13 7\"\n\nassert solution(\n    \"2 100000 569\\n\"\n    \"605 986\\n\"\n    ) == \"986 605\"\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '3'\nassert solution('3 4 1 1 3') == '0'\n\n'''\n\na, b, h, w, n = map(int, input().split())\n\nextensions = list(map(int, input().split()))\n\nmin_extensions = 0\n\nfor extension in extensions:\n    min_extensions += extension * h\n    min_extensions += extension * w"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2 3 3 5\\n2 3 5 4 2') == '0'\nassert solution('2 3 3 3 5\\n2 3 5 4 2') == '1'\nassert solution('5 5 1 2 3\\n2 3 5 4 2') == '3'\nassert solution('3 4 1 1 3\\n2 3 5 4 2') == '0'\nassert solution('4 5 1 1 3\\n2 3 5 4 2') == '0'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3 2 4 4\n2 5 4 10''') == '1'\nassert solution('''3 3 3 3 5\n2 3 5 4 2''') == '0'\nassert solution('''5 5 1 2 3\n2 3 5 4 2''') == '-1'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 5 1 2 3\n2 3 2''') == \"0\"\n\nassert solution('''3 4 1 1 3\n2 3 5 4 2\n\n3''') == \"-1\"\n\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n\n3''') == \"3\"\n\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n\n4''') == \"2\"\n\nassert solution('''5 5 1 2 3\n2 3 5 4 2\n\n3''') == \"1\""
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '-1'\nassert solution('3 4 1 1 3') == '3'\n\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data) == '3'\n\n\"\"\"\n\na, b, h, w, n = (int(i) for i in stdin.split())"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 3 2 4 4\n2 5 4 10\n''') == '1'\nassert solution('''\n3 3 3 3 5\n2 3 5 4 2\n''') == '0'\nassert solution('''\n5 5 1 2 3\n2 3 5 4 2\n''') == '3'\nassert solution('''\n3 4 1 1 3\n2 3 2\n''') == '3'\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '0'\nassert solution('3 4 1 1 3') == '3'"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3 2 4 4') == '1'\nassert solution('3 3 3 3 5') == '0'\nassert solution('5 5 1 2 3') == '3'\n\n\n'''\n"
    },
    {
        "number": 3765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 2 4 4\") == \"1\"\nassert solution(\"3 3 3 3 5\") == \"0\"\nassert solution(\"5 5 1 2 3\") == \"-1\"\nassert solution(\"3 4 1 1 3\") == \"3\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4\\nG4 R4 R3 B3') == '2'\nassert solution('5\\nB1 Y1 W1 G1 R1') == '4'\nassert solution('6\\nB2 Y2 W2 G2 R2') == '2'\nassert solution('7\\nB3 Y3 W3 G3 R3') == '0'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\nB1 R1 G1 W1\") == \"4\"\nassert solution(\"5\\nB1 Y1 W1 G1 R1\") == \"4\"\nassert solution(\"10\\nR4 R3 R1 G1 W1\") == \"4\"\nassert solution(\"15\\nG1 R1 R4 G3 G1 W3 R2 G2 W2\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\nB1 Y1 W1 G1 R1''') == '4'\nassert solution('''5\nB1 Y1 W1 G1 R1\nB2 Y2 W2 G2 R2\nB3 Y3 W3 G3 R3\nB4 Y4 W4 G4 R4''') == '5'\n\nassert solution('''3\nG3 G3\nG1 R1 R1''') == '2'\nassert solution('''4\nG4 R4 R3 B3\nG1 Y1 W1 G1 R1\nB1 Y1 W1 G1 R1\nG2 Y2 W2 G2 R2''') == '4'\n\nassert solution('''2\nG3 G3\nB1 R1 R1''') == '1'\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\nG3 G3\n''') == '0'\n\nassert solution('''\n4\nG4 R4 R3 B3\n''') == '2'\n\nassert solution('''\n5\nB1 Y1 W1 G1 R1\n''') == '4'\n'''\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''2\nG3 G3\n\n''') == '0'\n\nassert solution('''4\nB1 Y1 W1 G1 R1\n\n''') == '4'\n\nassert solution('''5\nB1 Y1 W1 G1 R1\n\n''') == '4'\n\nassert solution('''5\nB1 Y1 W1 G1 R1\n\n''') == '4'"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 3766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('4') == '2'\nassert solution('5') == '4'\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\n\nnums = list(map(int, input().split()))\n\ncolors = set()\nvalues = set()\n\nfor i in range(n):\n    if nums[i] % 5 == 0:\n        colors.add(nums[i])\n    elif nums[i] % 5 == 2:\n        values.add(nums[i])\n\nprint(len(colors))\nprint(len(values))\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n3 3 4 3\n4 7 6 5\n''') == '2 6'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n3 3 4 3\\n4 7 6 5') == '2 6'\nassert solution('5\\n10 30 5 6 24\\n10 41 7 8 24') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 4 3\\n4 7 6 5\\n\") == \"2 6\"\nassert solution(\"2\\n1 1\\n100 100\\n\") == \"1 1\"\nassert solution(\"5\\n10 30 5 6 24\\n10 41 7 8 24\\n\") == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n10 30 5 6 24') == '3 11'\nassert solution('3\\n1 1') == '1 1'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n4\n3 3 4 3\n4 7 6 5\n    \"\"\"\n    ) == \"2 6\"\n\nassert solution(\n    \"\"\"\n5\n10 30 5 6 24\n10 41 7 8 24\n    \"\"\"\n    ) == \"3 11\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"1 1\"\nassert solution([int(x) for x in input().split()]) == \"2 5\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 1\"\nassert solution(\"4\") == \"2 6\"\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1 1'\nassert solution('5') == '3 11'\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\nassert solution('''6\n1 1\n100 100\n''') == '1 1'\nassert solution('''10\n10 30 5 6 24\n10 41 7 8 24\n''') == '3 11'\n\n'''\n\nimport math\n"
    },
    {
        "number": 3767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2 3'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == '3B'\nprint(solution(input_string))"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 4\\n\") == \"3B\"\nassert solution(\"2 2\\n\") == \"Impossible\"\nassert solution(\"3 2\\n\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 4\\n\") == \"3B\"\nassert solution(\"2 2\\n\") == \"Impossible\"\nassert solution(\"3 2\\n\") == \"1A1B\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2B\"\nassert solution(\"3 2\") == \"Impossible\"\nassert solution(\"1 1\") == \"Impossible\"\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n3B''') == 'Impossible'\nassert solution('''1 4\n3B''') == '3B'\nassert solution('''1 2\n2A''') == '2A2A'\nassert solution('''2 2\n2A''') == 'Impossible'\nassert solution('''3 2\n1B''') == '1A1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 4') == '3B'\nassert solution('2 2') == 'Impossible'\nassert solution('3 2') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 4\n''') == '3B'\nassert solution('''\n2 2\n''') == 'Impossible'\nassert solution('''\n3 2\n''') == '1A1B'\n"
    },
    {
        "number": 3768,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 4\\n') == '3B'\nassert solution('2 2\\n') == 'Impossible'\nassert solution('3 2\\n') == '1A1B'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2''') == '3'\nassert solution('''5 4''') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\""
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"25\"\nassert solution(\"5 8\") == \"12\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 4\") == \"4\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n\n\n\"\"\""
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n\"\"\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 4') == '25'\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n"
    },
    {
        "number": 3769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 4\") == \"25\"\n\"\"\""
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\nprint(solution(input()))\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2''') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\n\n'''\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n4 1 2 3\\n0 2 -3 1\\n1 2\\n2 3\\n3 4\\n4 2\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"1\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n\n\"\"\"\n\nn, m = map(int, input().split())\nlist_of_edges = list(map(int, input().split()))\nlist_of_vertices = list(map(int, input().split()))\n\nlist_of_edges.sort()\nlist_of_vertices.sort()\n\nsum_of_edges = sum(list_of_edges)\n\nprint(sum_of_edges - list_of_vertices[0] - list_of_vertices[-1])\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n''') == '1'\nassert solution('''\n3 6\n1 2 3 5\n4\n1 2\n3 2\n2 3\n3 4\n3 5\n3 6\n''') == '2'\nassert solution('''\n6 3\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '3'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n''') == '1'\n"
    },
    {
        "number": 3770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 4\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n''') == '1'\n\nassert solution('''\n4 5\n4 1 2 3\n0 2 -3 1\n1 2\n2 3\n3 4\n4 2\n5 3\n''') == '2'\n\nassert solution('''\n5 6\n5 1 2 3 4\n-1 2 -2 1 -1\n1 2\n2 3\n3 4\n4 2\n5 3\n''') == '0'\n\nassert solution('''\n7 9\n7 1 2 3 4 5 6\n-1 2 -1 -1 1 -1\n1 2 -1\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '2'\n\nassert solution('''\n10 11\n10 1 2 3 4 5 6 7 8 9\n-1 2 -1 -1 1 -1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n13 15\n13 16\n13 17\n13 18\n13 19\n13 20\n13 21\n13 22\n13 23\n13 24\n13 25\n13 26\n13 27\n13 28\n13 29\n13 30\n13 31\n13 32\n13 33\n13 34\n13 35\n13 36\n13 37\n13 38\n13 39\n13 40\n13 41\n13 42\n13 43\n13 44\n13 45\n13 46\n13 47\n13 48\n13 49\n13 50\n13 51\n13 52\n13 53\n13 54\n13 55\n13 56\n13 57\n13 58\n13 59\n13 60\n13 61\n13 62\n13 63\n13 64\n13 65\n13 66\n13 67\n13 68\n13 69\n13 70\n13 71\n13 72\n13 73\n13 74\n13 75\n13 76\n13 77\n13 78\n13 79\n13 80\n13 81\n13 82\n13 83\n13 84\n13 85\n13 86\n13 87\n13 88\n13 89\n13 90\n13 91\n13 92\n13 93\n13 94\n13 95\n13 96\n13 97\n13 98\n13 99\n14 10\n14 1 2 3 4 5 6\n-1 2 -1 -1 1 -1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n13 15\n13 16\n13 17\n13 18\n13 19\n13 20\n13 21\n13 22\n13 23\n13 24\n13 25\n13 26\n13 27\n13 28\n13 29\n13 30\n13 31\n13 32\n13 33\n13 34\n13 35\n13 36\n13 37\n13 38\n13 39\n13 40\n13 41\n13 42\n13 43\n13 44\n13 45\n13 46\n13 47\n13 48\n13 49\n13 50\n13 51\n13 52\n13 53\n13 54\n13 55\n13 56\n13 57\n13 58\n13 59\n13 60\n13 61\n13 62\n13 63\n13 64\n13 65\n13 66\n13 67\n13 68\n13 69\n13 70\n13 71\n13 72\n13 73\n13 74\n13 75\n13 76\n13 77\n13 78\n13 79\n13 80\n13 81\n13 82\n13 83\n13 84\n13 85\n13 86\n13 87\n13 88\n13 89\n13 90\n13 91\n13 92\n13 93\n13 94\n13 95\n13 96\n13 97\n14 10\n14 1 2 3 4 5 6 7 8 9\n-1 2 -1 -1 1 -1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n13 15\n13 16\n13 17\n13 18\n13 19\n13 20\n13 21\n13 22\n13 23\n13 24\n13 25\n13 26\n13 27\n13 28\n13 29\n13 30\n13 31\n13 32\n13 33\n13 34\n13 35\n13 36\n13 37\n13 38\n13 39\n13 40\n13 41\n13 42\n13 43\n13 44\n13 45\n13 46\n13 47\n13 48\n13 49\n13 50\n13 51\n13 52\n13 53\n13 54\n13 55\n13 56\n13 57\n13 58\n13 59\n13 60\n13 61\n13 62\n13 63\n13 64\n13 65\n13 66\n13 67\n13 68\n13 69\n13 70\n13 71\n13 72\n13 73\n13 74\n13 75\n13 76\n13 77\n13 78\n13 79\n13 80\n13 81\n13 82\n13 83\n13 84\n13 85\n13 86\n13 87\n13 88\n13 89\n13 90\n13 91\n13 92\n13 93\n13 94\n13 95\n13 96\n13 97\n14 10\n14 1 2 3 4 5 6 7 8 9 10 11\n-1 2 -1 -1 1 -1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n13 15\n13 16\n13 17\n13 18\n13 19\n13 20\n13 21\n13 22\n13 23\n13 24\n13 25\n13 26\n13 27\n13 28\n13 29\n13 30\n13 31\n13 32\n13 33\n13 34\n13 35\n13 36\n13 37\n13 38\n13 39\n13 40\n13 41\n13 42\n13 43\n13 44\n13 45\n13 46\n13 47\n13 48\n13 49\n13 50\n13 51\n13 52\n13 53\n13 54\n13 55\n13 56\n13 57\n13 58\n13 59\n13 60\n13 61\n13 62\n13 63\n13 64\n13 65\n13 66\n13 67\n13 68\n13 69\n13 70\n13 71\n13 72\n13 73\n13 74\n13 75\n13 76\n13 77\n13 78\n13 79\n13 80\n13 81\n13 82\n13 83\n13 84\n13 85\n13 86\n13 87\n13 88\n13 89\n13 90\n13 91\n13 92\n13 93\n13 94\n13 95\n13 96\n13 97\n14 10\n14 1 2 3 4 5 6 7 8 9 10 11\n-1 2 -1"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"4 4\") == \"-1\"\nassert solution(\"5 5\") == \"5\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '2'\nassert solution('2 2') == '-1'\nassert solution('3 3') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 3\\n.o.\\n.o.\\no.T\\n\") == \"2\"\nassert solution(\n    \"3 3\\nS.o\\n.o.\\no.T\\n\") == \"1\"\nassert solution(\n    \"3 3\\nS.o\\n.o.\\no.T\\n\") == \"2\"\nassert solution(\n    \"3 3\\nS.o\\n.o.\\no.T\\n\") == \"1\"\nassert solution(\n    \"3 3\\nS.o\\no.o\\n.o.T\\n\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"2\"\nassert solution([\n    \".o\",\n    \"o.o\",\n    \"o.S\",\n]) == \"1\"\nassert solution([\n    \"SS\",\n    \"TT\",\n]) == \"0\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 2\n.o.\no.T''') == '2'\nassert solution('''1 1\n.S''') == '0'\nassert solution('''1 1\n.o.''') == '0'\nassert solution('''2 2\n.o.\no.T''') == '0'\nassert solution('''2 3\n.o.\no.T\n.o.\no.T''') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nS.o\\no.t\\n\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '-1'\nassert solution('2 2') == '-1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n.o\n.o.\no.T\n\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\nS.o\n.o.\no.T\n\n\"\"\") == -1\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 3771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '2'\nprint(solution(__import__(\"sys\").stdin.read()))\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1 2 3\") == \"2\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '1 1') == '1'\nassert solution(\n    '3 2') == '3'\nassert solution(\n    '199 200') == '200'\n\n\"\"\"\n\nfrom fractions import Fraction\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"199 200\") == \"200\"\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"199 200\") == \"200\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n\"\"\""
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('199 200') == '200'\n"
    },
    {
        "number": 3772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''3 2''') == '3'\nassert solution('''199 200''') == '200'\nassert solution('''1 0.5''') == '1'\nassert solution('''6.5 4.2''') == '4'\n\nprint('All tests passed')\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5 2\\n3 3\") == \"Aoki\"\nassert solution(\"10\\n50 10\\n100 100\\n50 100\") == \"Takahashi\"\n\n\"\"\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n5 2\") == \"Aoki\"\nassert solution(\"5\\n2\\n3 3\") == \"Aoki\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Aoki\", solution(\"1\")\nassert solution(\"2\") == \"Takahashi\", solution(\"2\")\nassert solution(\"3\") == \"Takahashi\", solution(\"3\")\nassert solution(\"4\") == \"Takahashi\", solution(\"4\")\nassert solution(\"5\") == \"Takahashi\", solution(\"5\")\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Aoki\"\nassert solution(\"3\") == \"Takahashi\"\n\n\"\"\""
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n5 2\\n3 3') == 'Aoki'\nassert solution('5\\n2 2\\n2 3') == 'Takahashi'\nassert solution('4\\n4 4\\n4 2') == 'Takahashi'\nassert solution('4\\n4 4\\n4 2') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n5 2\n3 3''') == 'Aoki'\nassert solution('''2\n5 2\n3 3''') == 'Takahashi'\nassert solution('''4\n5 3\n1 3\n1 3\n1 3''') == 'Takahashi'\nassert solution('''1\n5 2\n3 3\n4 4''') == 'Aoki'\nassert solution('''2\n5 2\n3 3\n4 4''') == 'Aoki'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"Aoki\"\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 'Aoki'\nassert solution('3') == 'Takahashi'"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2\\n5 2\\n3 3') == 'Aoki'\nassert solution('2\\n5 2\\n5 5') == 'Takahashi'\n"
    },
    {
        "number": 3773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n5 2\n3 3\n''') == 'Aoki'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2') == '0'\nassert solution('3 3') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n\") == \"0\"\nassert solution(\"3 3\\n\") == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 2\n''') == '0'\nassert solution('''3 3\n''') == '8'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '0\\n'\nassert solution('3 3\\n') == '8\\n'\nassert solution('10 10\\n') == '41\\n'\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"8\""
    },
    {
        "number": 3774,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 2\n''') == '0'\nassert solution('''\n3 3\n''') == '8'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1\"\nassert solution(input_) == \"0\"\nassert solution(input_) == \"0\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n1 2 3 4\n1 5 3 4\n\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n2\n1 2 3 4\n1 5 3 4\n\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n3\n1 2 3 4\n1 5 6 4\n\n\"\"\") == \"-1\""
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(examples[0]) == '1'\nassert solution(examples[1]) == '0'\nassert solution(examples[2]) == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == '1'\nassert solution(sys.stdin.read()) == '0'\nassert solution(sys.stdin.read()) == '-1'\n\n=======\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2\n1 2 3 4\n1 5 3 4\n''') == '1'\n\nassert solution('''\n2 2\n1 2 3 4\n1 5 6 4\n''') == '0'\n\nassert solution('''\n2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2\"\n    \"1 2 3 4\"\n    \"1 5 3 4\"\n    ) == \"1\"\n\nassert solution(\n    \"2 2\"\n    \"1 2 3 4\"\n    \"1 5 6 4\"\n    ) == \"0\"\n\nassert solution(\n    \"2 3\"\n    \"1 2 3 4\"\n    \"1 5 6 4\"\n    ) == \"0\"\n\nassert solution(\n    \"2 2\"\n    \"1 2 3 4\"\n    \"1 5 3 4\"\n    ) == \"1\"\n\nassert solution(\n    \"2 2\"\n    \"1 2 3 4\"\n    \"1 5 6 4\"\n    ) == \"0\""
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2') == '1'\nassert solution('2 3') == '0'\nassert solution('3 3') == '-1'\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2\\n\"\n    \"1 2 3 4\\n\"\n    \"1 5 3 4\\n\"\n    ) == \"1\"\nassert solution(\n    \"2 3\\n\"\n    \"1 2 1 3 2 3\\n\"\n    ) == \"0\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_) == \"1\"\nassert solution(input_2) == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 2\n1 2 3 4\n1 5 3 4\n''') == '1'\nassert solution('''2 3\n1 2 4 5\n1 2 1 3 2 3\n''') == '0'\nassert solution('''2 4\n1 2 3 4\n1 5 6 4\n''') == '-1'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('12') == '12'\nassert solution('24') == '24'\nassert solution('99') == '99'\nassert solution('17:30') == '17:30'\nassert solution('99:99') == '99:99'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"12\\n\"\n    \"17:30\"\n) == \"17:30\"\nassert solution(\n    \"24\\n\"\n    \"17:30\"\n) == \"17:30\"\nassert solution(\n    \"12\\n\"\n    \"99:99\"\n) == \"09:09\"\nassert solution(\n    \"24\\n\"\n    \"99:99\"\n) == \"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('24') == '09:09'\nassert solution('12') == '07:09'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"00:00\"\nassert solution(\"99\") == \"09:00\"\nassert solution(\"12\") == \"12:00\"\nassert solution(\"24\") == \"00:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"17:30\"\nassert solution(\"24\") == \"07:00\""
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('12') == '12:00'\nassert solution('24') == '00:00'\nassert solution('99') == '11:00'\nassert solution('2') == '00:01'\nassert solution('24') == '00:00'\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"24\") == \"09:09\"\nassert solution(\"12\") == \"17:30\"\nassert solution(\"24\") == \"09:09\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"17:00\"\nassert solution(\"24\") == \"00:00\"\nassert solution(\"99:99\") == \"09:00\"\n"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '00:00'\nassert solution('24') == '00:00'\nassert solution('99') == '09:00'"
    },
    {
        "number": 3776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == '09:09'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '6'\n\"\"\"\n\nn, m = map(int, stdin.split())\nX = int(stdin)\nadj = [[] for _ in range(n)]\n\nfor _ in range(m):\n    u, v, w = map(int, stdin.split())\n    adj[u-1].append((v-1, w))\n    adj[v-1].append((u-1, w))\n\nvisited = set()\ncount = 0"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == '10\\n'\nassert solution('1') == '9\\n'\nassert solution('2') == '10\\n'\nassert solution('3') == '11\\n'\nassert solution('4') == '12\\n'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 2') == '6'\nassert solution('2 3') == '7'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3\\n2') == '6'\nassert solution('3 3\\n1 2 1\\n2 3 1\\n3 1 1') == '6'\nassert solution('7 1\\n1 2 3\\n4 2 1\\n3 1 1\\n2 2 1\\n3 1 2\\n1 3 1\\n2 1 1\\n3 2 1\\n') == '6'\nassert solution('1 1\\n1 1\\n1 1') == '1'\nassert solution('4 2\\n1 2 3\\n2 2 3\\n3 1 3\\n1 1 2\\n2 2 2\\n') == '1'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '6'\nassert solution('3 3') == '5'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n3\n3\n3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n4\n1 2 1\n2 3 1\n3 1 1\n3 1 2\n\"\"\") == \"4\""
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"2 3 1\") == \"4\"\nassert solution(\"3 1 1\") == \"2\"\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == '6'\nassert solution('1 2 1') == '2'\nassert solution('2 3 1') == '4'\nassert solution('3 1 1') == '5'\nassert solution('1 1 1') == '4'\n"
    },
    {
        "number": 3777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6\n2 0 3 0 1 1\n''') == '5'\n\nassert solution('''\n1\n0\n''') == '0'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"5 2 1\"\n\n\"\"\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n2 0 3 0 1 1\n\n''') == '5'\n\nassert solution('''\n6\n2 0 3 0 1 1\n\n''') == '-1'\n\nassert solution('''\n1\n0\n\n''') == '0'"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 2 2 1 1\") == \"5\\n3 1\"\nassert solution(\"6\\n3 2 2 2 1 1\") == \"-1\"\nassert solution(\"1\\n0\") == \"0\"\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 0 3 0 1\n2 0 3 0 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '-1'\n\nassert solution('''\n2\n2 0 3 0 1\n2 1 1 1 1\n''') == '5'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n2 0 3 0 1 1\n''') == '5'\nassert solution('''1\n0\n''') == '0'\nassert solution('''6\n3 2 2 2 1 1\n''') == '-1'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '-1'\nassert solution('3') == '5'\nassert solution('4') == '5'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''6\n2 0 3 0 1 1\n''') == '5'\nassert solution('''6\n3 2 2 2 1 1\n''') == '-1'\nassert solution('''6\n3 2 2 2 1 1\n''') == '-1'\nassert solution('''4\n2 1 3 4\n1 1 2 3\n1 2 1 3\n1 3 1 2\n''') == '5'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(None) == -1, 'Sample Test Failed'\nassert solution('1') == 0, 'Sample Test Failed'\nassert solution('6') == 5, 'Sample Test Failed'\nassert solution('7') == -1, 'Sample Test Failed'\nassert solution('2') == -1, 'Sample Test Failed'\n"
    },
    {
        "number": 3778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '5'\nassert solution('1') == '0'\nassert solution('6') == '-1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 8\\n12 20\\n\"\n    \"2\\n0 4\\n\"\n    \"2\\n0\\n\") == \"2\"\nassert solution(\n    \"3 10\\n10 20 30\\n\"\n    \"1\\n0\\n\"\n    \"2\\n0\\n\") == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 8\n12 20\n''') == '2'\nassert solution('''\n3 10\n10 20 30\n''') == '1'\nprint(solution('''\n4 10\n12 20 1 10\n'''))\nprint(solution('''\n5 10\n1 2 3 4 5\n'''))\nprint(solution('''\n6 10\n1 2 3 4 5\n'''))\nprint(solution('''\n7 10\n1 2 3 4 5\n'''))\nprint(solution('''\n8 10\n1 2 3 4 5\n'''))\nprint(solution('''\n9 10\n1 2 3 4 5\n'''))\nprint(solution('''\n10 10\n1 2 3 4 5\n'''))\nprint(solution('''\n11 10\n1 2 3 4 5\n'''))\nprint(solution('''\n12 10\n1 2 3 4 5\n'''))\nprint(solution('''\n13 10\n1 2 3 4 5\n'''))\nprint(solution('''\n14 10\n1 2 3 4 5\n'''))\nprint(solution('''\n15 10\n1 2 3 4 5\n'''))\nprint(solution('''\n16 10\n1 2 3 4 5\n'''))\nprint(solution('''\n17 10\n1 2 3 4 5\n'''))\nprint(solution('''\n18 10\n1 2 3 4 5\n'''))\nprint(solution('''\n19 10\n1 2 3 4 5\n'''))\nprint(solution('''\n20 10\n1 2 3 4 5\n'''))\nprint(solution('''\n21 10\n1 2 3 4 5\n'''))\nprint(solution('''\n22 10\n1 2 3 4 5\n'''))\nprint(solution('''\n23 10\n1 2 3 4 5\n'''))\nprint(solution('''\n24 10\n1 2 3 4 5\n'''))\nprint(solution('''\n25 10\n1 2 3 4 5\n'''))\nprint(solution('''\n26 10\n1 2 3 4 5\n'''))\nprint(solution('''\n27 10\n1 2 3 4 5\n'''))\nprint(solution('''\n28 10\n1 2 3 4 5\n'''))\nprint(solution('''\n29 10\n1 2 3 4 5\n'''))\nprint(solution('''\n30 10\n1 2 3 4 5\n'''))\nprint(solution('''\n31 10\n1 2 3 4 5\n'''))\nprint(solution('''\n32 10\n1 2 3 4 5\n'''))\nprint(solution('''\n33 10\n1 2 3 4 5\n'''))\nprint(solution('''\n34 10\n1 2 3 4 5\n'''))\nprint(solution('''\n35 10\n1 2 3 4 5\n'''))\nprint(solution('''\n36 10\n1 2 3 4 5\n'''))\nprint(solution('''\n37 10\n1 2 3 4 5\n'''))\nprint(solution('''\n38 10\n1 2 3 4 5\n'''))\nprint(solution('''\n39 10\n1 2 3 4 5\n'''))\nprint(solution('''\n40 10\n1 2 3 4 5\n'''))\nprint(solution('''\n41 10\n1 2 3 4 5\n'''))\nprint(solution('''\n42 10\n1 2 3 4 5\n'''))\nprint(solution('''\n43 10\n1 2 3 4 5\n'''))\nprint(solution('''\n44 10\n1 2 3 4 5\n'''))\nprint(solution('''\n45 10\n1 2 3 4 5\n'''))\nprint(solution('''\n46 10\n1 2 3 4 5\n'''))\nprint(solution('''\n47 10\n1 2 3 4 5\n'''))\nprint(solution('''\n48 10\n1 2 3 4 5\n'''))\nprint(solution('''\n49 10\n1 2 3 4 5\n'''))\nprint(solution('''\n50 10\n1 2 3 4 5\n'''))\nprint(solution('''\n51 10\n1 2 3 4 5\n'''))\nprint(solution('''\n52 10\n1 2 3 4 5\n'''))\nprint(solution('''\n53 10\n1 2 3 4 5\n'''))\nprint(solution('''\n54 10\n1 2 3 4 5\n'''))\nprint(solution('''\n55 10\n1 2 3 4 5\n'''))\nprint(solution('''\n56 10\n1 2 3 4 5\n'''))\nprint(solution('''\n57 10\n1 2 3 4 5\n'''))\nprint(solution('''\n58 10\n1 2 3 4 5\n'''))\nprint(solution('''\n59 10\n1 2 3 4 5\n'''))\nprint(solution('''\n60 10\n1 2 3 4 5\n'''))\nprint(solution('''\n61 10\n1 2 3 4 5\n'''))\nprint(solution('''\n62 10\n1 2 3 4 5\n'''))\nprint(solution('''\n63 10\n1 2 3 4 5\n'''))\nprint(solution('''\n64 10\n1 2 3 4 5\n'''))\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 8') == '2'\nassert solution('3 10') == '1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 8\n12 20\n''') == \"2\"\nassert solution('''\n3 10\n10 20 30\n''') == \"1\"\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 8\n12 20''') == '2'\nassert solution('''3 10\n10 20 30''') == '1'"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2 8\n12 20\n''') == '2'\n\nassert solution('''3 10\n10 20 30\n''') == '1'\n\nassert solution('''3 10\n10 20 30\n''') == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 8\") == \"2\"\nassert solution(\"3 10\") == \"1\"\nassert solution(\"2 9\") == \"0\""
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '''\n    1 5\n    17\n    '''\n    ) == '2'\n    assert solution(\n    '''\n    3 10\n    1010\n    '''\n    ) == '1'\n"
    },
    {
        "number": 3779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 10\") == \"1\"\nassert solution(\"3 10\") == \"1\"\nassert solution(\"5 10\") == \"0\"\nassert solution(\"8 10\") == \"1\"\nassert solution(\"2 9\") == \"1\"\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 5 5\n0 0\n-1 -1\n-1 0\n''') == '3.729935587093555327'\nassert solution('''\n1 1 0 0\n0 0\n-1 -1\n-1 0\n''') == '2.2360679774997897'\nassert solution('''\n1 1 0 0\n0 0\n-1 -1\n-1 0\n''') == '1.000000'\nassert solution('''\n1 1 0 0\n0 0\n-1 -1\n-1 0\n''') == '2.2360679774997897'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '13.3320720529868065'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('0 0 0 1000') == '11.547005383792516398'\nassert solution('1 5 1') == '4.0'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    0 0 0\n    0\n    0\n    \"\"\") == \"3.729935587093555327\"\nassert solution(\n    \"\"\"\n    0 0 0\n    10\n    10\n    \"\"\") == \"4.848958560397258447\""
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000 -50 0') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"0 0 0 1000\") == \"11.547005383792516398\""
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('100 1000') == '11.547005383792516398'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n0 0 5 5\n3 2\n-1 -1\n-1 0\n''') == '3.729935587093555327'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '3.729935587093555327'\nassert solution('0 0 5 5') == '3.729935587093555327'\nassert solution('3 2') == '2.9708152798131439'\nassert solution('-1 -1') == '2.9708152798131439'\n"
    },
    {
        "number": 3780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 5 5\") == \"3.729935587093555327\"\nassert solution(\"3 2\") == \"2.0\"\nassert solution(\"3 2\") == \"1.3\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'First'\nassert solution('''\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second'\nassert solution('''\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second'\n''')"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"First\"\nassert solution(\"1 1\") == \"Second\"\nassert solution(\"1 2\") == \"Second\"\nassert solution(\"1 3\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162''') == 'Second\\nFirst\\nSecond'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n\"\"\") == \"First\\nSecond\\nSecond\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'Second'\nassert solution('2') == 'First'\nassert solution('3') == 'Second'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == 'Second'\nassert solution('2') == 'Second'\nassert solution('3') == 'Second'\nassert solution('10') == 'First'\nassert solution('21') == 'First'\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Second\"\nassert solution(\"2\") == \"First\"\nassert solution(\"3\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Second\"\nassert solution(\"2\") == \"First\"\nassert solution(\"3\") == \"Second\"\n"
    },
    {
        "number": 3781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n''') == 'Second\\nFirst\\nSecond'\nassert solution('''\n1\n20\n3\n3 2\n10 1 7\n''') == 'Taro\\nSecond'\nassert solution('''\n3\n7\n8\n1 2 3 4 5 6 7 8\n''') == 'Taro\\nTaro'\n'''\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"1 2 3 4 5 6 7 8 9\"\"\") == \"0\"\nassert solution(\"\"\"1 1 3 4 5 5 5 5 5\"\"\") == \"1\"\nassert solution(\"\"\"5 3 3 2\"\"\") == \"1\""
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\") == \"0\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"6 7 8\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"0\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2\") == \"1\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3 2\\n4 3 1 5 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('5 3 2') == '1'\nassert solution('5 3 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('20 3 1') == '1'\nassert solution('5 1 2') == '1'\nassert solution('7 1 2') == '2'\nassert solution('10 1 2') == '1'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '1'\nassert solution('5 3 1 2') == '1'\nassert solution('1000000000 2 1') == '1000000000'\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"5 3 2\\n\"\n    \"4 3 1 5 2\"\n) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 3782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"1\"\nassert solution(\"5 3 2\") == \"1\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n2 2\n''') == '10'\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 1\n''') == '1'\nassert solution('''\n3 2\n''') == '24'\nassert solution('''\n1 2\n''') == '3'\n'''"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_1) == \"1\"\nassert solution(input_2) == \"24\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"24\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '24'"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n4 1\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 2\n\"\"\") == \"24\"\n\nassert solution(\"\"\"\n10 10\n\"\"\") == \"4095\"\n\nassert solution(\"\"\"\n1000 1001\n\"\"\") == \"0\""
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    1 1\n''') == '1'\nassert solution('''\n    3 2\n''') == '24'\n'''"
    },
    {
        "number": 3783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 1\n''') == '1'\nassert solution('''\n3 2\n''') == '24'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n6 4\n''') == '1196'\nassert solution('''\n7 3\n''') == '64921457'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 2\n1 4\n1 2''') == '3'\n\nassert solution('''4 4\n1 4\n1 5\n1 6''') == '2'\n\nassert solution('''7 3\n1 2 3\n2 1 3\n1 2 5\n2 1 5\n3 1 6\n2 3 5\n3 2 5\n3 1 6''') == '1196'"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1037'\nassert solution() == '3545'\nassert solution() == '11859'\nassert solution() == '41287'\nassert solution() == '2102'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"7 3\") == \"1196\"\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3 2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n4 4\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n7 3\n\"\"\") == \"1196\"\n\nassert solution(\"\"\"\n31 8\n\"\"\") == \"64921457\"\n\n\"\"\"\n------------------------------------------------------------------------------------------------------------------------\nWelcome to coding challenge #12 (N-Queens)\n\nGiven n = 2, find all possible solutions of the n-queens puzzle.\n\nNote: The user is not allowed to use the same queen as other queens in the same row, column or diagonal. The user is also allowed to place a queen at any position on the board.\n\nConsider the following board as an example.\n\"\"\""
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n4 4\n''') == '3'\n\nassert solution('''\n31 8\n''') == '64921457'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1196\""
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\n') == '6'\n\nassert solution('4 4\\n') == '3'\n\nassert solution('7 3\\n') == '1196'\n\nassert solution('31 8\\n') == '64921457'\n\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3, 2]) == 6\nassert solution([4, 4]) == 3\nassert solution([7, 3]) == 1196\nassert solution([31, 8]) == 64921457\nassert solution([32, 1]) == 8\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == '#.X#\\nX.#.\\n#...\\n#...'\nassert solution(\"5 4 5\") == '#.X#\\n#X#.\\n#..#\\n...#\\n#.#.'\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\") == \"###.X#\\nX###.\\n#.##\"\nassert solution(\"6 6 5\") == \"#X###.\\n#X##.\\n#.#..\\n#####\\n#.#.#\\n#####\"\nassert solution(\"10 10 10\") == \"#XXXX.\\n#X#XX.\\n#XX###\\n#XX##X\\n###XX#\\n#XX#XX\\n#XX##X\\n#X#XX#\\n#X##XX.\\n#X#X#X\\nXXXX##\"\nassert solution(\"7 7 6\") == \"#X#X#X\\n#####.\\n#X#XX#\\n#X#X#X\\n#X#X#X\\n#X#X#X\\n#X#X#X\\n#X#X#X\\n#X#X#X\\n######\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '#.X#\\nX.#.\\n#...\\n'\nassert solution('5 4 5') == '#X#.\\nX#.#\\nX...\\n...#\\n#.#X\\n'"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 4 5\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\\n#..#\\n..#.\\n#...\\n\") == \"X#.\\n#.#.\\n.#.#\"\nassert solution(\"5 4 5\\n#...\\n#.#.\\n.#..\\n...#\\n#.#.\\n\") == \"X#X\\n#.#X\\n#.#.#\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"#.X#\\nX.#.\\n#...\\n\"\nassert solution(\"5 4 5\") == \"X#.\\n#.X\\nX.#\\n...\\n#.#\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 4 2\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \".....#.\\n.#...#.\\n#.#..#.\\n....##.\"\n"
    },
    {
        "number": 3785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 4 5') == '#XXX'\nassert solution('3 4 2') == '#.X#'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"4\"\nassert solution(\"18\") == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 1\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n5\n1 2 2 2\n\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == \"5\"\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '3'\nassert solution('18') == '4'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n1 1\n1\n''') == '1'\nassert solution('''\n5\n1 2 2 2\n''') == '3'\nprint('\"Run\" is good. How is \"Check\"?')\nprint('''\nThe results are correct.\nLet's check them.\n''')\nassert solution('''\n3\n1 1 1\n''') == '1'\nprint('''\nOK! But there are still some things to fix.\n''')\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '3'"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''1 1\n1 2\n2 3\n3 4''') == \"4\"\nassert solution('''18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4''') == \"4\"\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 1 4 4 3 2 2 2 2 10 8 9 9 9 10 10 4') == '4'\nassert solution('18\\n1 1 1 4 4 3 2 2 2 2 10 8 9 9 9 10 10 4') == '3'\n"
    },
    {
        "number": 3786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('5') == '4'"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"5 3 -2\") == \"-1\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 2') == '2 4 1 3'\nassert solution('4 5 3 2') == '2 4 1 3'\nassert solution('4 5 3 2') == '2 4 1 3'\nassert solution('4 5 3 2') == '2 4 1 3'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\nassert solution('20 9 4 1') == '3 2 4 1 5 20'\nassert solution('50 1 2 3') == '1 2 3 4 5 50'\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([5,3,2]) == \"2 4 1 5 3\"\nprint(\"solution() finished successfully!\")\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"3 3 3\") == \"-1\"\nassert solution(\"10 10 10\") == \"10 10 10\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3'\n\n\"\"\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3 2') == '2 4 1 5 3', \"Should print the subsequence of this sequence that satisfies the above conditions.\"\nassert solution('5 4 3 2') == '2 4 1 3', \"Should print the subsequence of this sequence that satisfies the above conditions.\"\nassert solution('5 4 3 1 2') == '2 1 4 3', \"Should print the subsequence of this sequence that satisfies the above conditions.\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"10 2 4 5 3 1\") == \"10 2 1 5 3\"\n"
    },
    {
        "number": 3787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"2 4 1 5 3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"4 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n3 6 9 18 36 108\\n') == 'Yes'\nassert solution('2\\n7 17\\n') == 'No'\nassert solution('9\\n4 8 10 12 15 18 33 44 81\\n') == 'Yes'\n\n\n\"\"\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 6 9 18 36 108\\n\") == \"Yes\"\nassert solution(\"2\\n7 17\\n\") == \"No\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\\n\") == \"Yes\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n3 6 9 18 36 108\n\n2\n7 17\n\n9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\nassert solution('''10\n3 4 1 2 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\n7\n2 6 1 5 8 3 4 9 11 12 13 15\n\n1\n2\n\n2\n3 5 8\n\n4\n5\n6''') == 'No'"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 6 9 18 36 108\\n') == 'Yes\\n', \"3 6 9 18 36 108\"\nassert solution('2 7 17\\n') == 'No\\n', \"2 7 17\"\nassert solution('9 4 8 10 12 15 18 33 44 81\\n') == 'Yes\\n', \"9 4 8 10 12 15 18 33 44 81\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n6 9 18 36 108\n''') == 'Yes'\nassert solution('''2\n7 17\n''') == 'No'\nassert solution('''9\n4 8 10 12 15 18 33 44 81\n''') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''6\n3 6 9 18 36 108\n\n2\n7 17\n''') == 'Yes'\nassert solution('''9\n4 8 10 12 15 18 33 44 81\n\n2\n7 17\n''') == 'No'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n\n1\n1 1\n''') == 'Yes'\nassert solution('''13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n\n1\n3 2\n1 1\n''') == 'Yes'\nassert solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\n1\n3 2\n1 1\n1 2\n''') == 'Yes'\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6 9 18 36 108\") == \"Yes\"\nassert solution(\"2\\n7 17\") == \"No\"\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == \"Yes\"\nassert solution(\"6\\n3 6 9 18 36 108\") == \"No\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"Yes\"\n"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 6 9 18 36 108\") == 'Yes'\nassert solution(\"2\\n7 17\") == 'No'\nassert solution(\"9\\n4 8 10 12 15 18 33 44 81\") == 'Yes'\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 6 9 18 36 108\n\"\"\") == \"Yes\"\nassert solution(\"\"\"\n2\n7 17\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\n9\n4 8 10 12 15 18 33 44 81\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"\n1\n2\n3\n\"\"\") == \"No\"\n\nassert solution(\"\"\"\n10\n0 1 2 3 4 5 6 7 8 9\n\"\"\") == \"Yes\""
    },
    {
        "number": 3788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(open(0).read()) == \"Yes\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == \"12\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"12\"\nassert solution(\"1 2 -6 4 5 3\") == \"12\""
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"6\") == \"30\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('1 2 -6 4 5 3') == '12'\nassert solution('1 2 -6 -4 5 3') == '6'\nassert solution('1 2 -6 4 5 -3') == '0'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"4\"\n\n\"\"\"\n\n\"\"\"\nn = int(input())\ninputs = list(map(int, input().split()))\ninputs = inputs[:n]\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n1 2 -3\n2 4 -6''') == '3'\nassert solution('''7\n-1 -2 3 -4 -5\n3 6 -7 -8 -9''') == '13'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6\\n') == '12'\nassert solution('7\\n') == '18'\nassert solution('2\\n') == '0'\nassert solution('3\\n') == '5'\nassert solution('4\\n') == '3'\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n-2 -5 3\\n3\\n1\\n\") == \"12\"\n"
    },
    {
        "number": 3789,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"12\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n\") == \"5\"\nassert solution(\"10 4\\n\") == \"10\"\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == '5'\nassert solution('1 2 3 4 5') == '5'\nassert solution('1') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"5\"\nassert solution(\"4 3\") == \"4\""
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n3 1 4 2\n''') == '5'\nassert solution('''\n2 3\n2 1 4\n''') == '4'\nassert solution('''\n4 4\n3 1 4 2\n''') == '3'"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"4 3\\n\",\n    \"3 1 4 2\"\n) == \"5\""
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([3,1,4,2]) == 5\nassert solution([3,2,4,1]) == 4\nassert solution([2,1,4,3]) == 5\nassert solution([3,2,1,4]) == 4\nassert solution([1,1,1]) == 1\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3\n3 1 4 2\n\"\"\") == \"5\""
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5 3\n1 3 2 4 5\n''') == '5'\nassert solution('''\n5 5\n3 1 4 5 2 1 3 2 4 5 3\n''') == '5'\nassert solution('''\n4 3\n3 1 4 2\n''') == '5'\nassert solution('''\n3 5\n3 1 4 2 1 3 2 4 5 3\n''') == '5'\nassert solution('''\n4 4\n5 5 5 5\n''') == '4'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n3 1 4 2\n''') == '5'\nassert solution('''\n4 4\n1 1 1 1 1 1\n''') == '3'\nassert solution('''\n4 2\n3 1 4 2\n''') == '4'\nassert solution('''\n10 4\n4 1 8 1 5 2 7 6 2 8 5 3\n''') == '9'\nassert solution('''\n3 3\n3 1 4 2\n''') == '3'\n"
    },
    {
        "number": 3790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 3\nassert solution('5 3 4 2') == 5\nassert solution('1 2 3') == 1\nassert solution('1 1 1') == 1\nassert solution('2 2 2') == 2\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 0'\nassert solution('''3\n3 2 1\n''') == '0 1'\nassert solution('''3\n3 2 1\n''') == '1 2'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0 0\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '0 0'\nassert solution('3') == '0 1'\nassert solution('3') == '1 2'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_string) == \"0 1\"\nassert solution(input_string_2) == \"0 2\"\nassert solution(input_string_3) == \"2 1\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n''') == '0 0'\nassert solution('''3\n3 2 1\n''') == '0 1'\nassert solution('''3\n3 2 1\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0 1\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"10\") == \"2 7 6 5 4 3 1 0 8 1 2 9 5 6 7 8\"\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2 3\n''') == '0 0'\nassert solution('''\n3 2 1\n''') == '0 1'\nassert solution('''\n3 1 2\n''') == '2 1'\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2\\n2 3 1') == '0 0'\nassert solution('3\\n3 2 1') == '0 1'\nassert solution('3\\n1 2 3') == '2 1'\n\nstdin = \"\"\"3\n1 2 3\n\"\"\"\nret = solution(stdin)\nprint(ret)\n"
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"3\") == \"2 1\"\nassert solution(\"3\") == \"2 1\""
    },
    {
        "number": 3791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3 1') == '0 1'\n\nassert solution('3 2 1') == '0 1'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == str(6)"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4\\n' + 'aaa' * 3 + '\\n') == '6'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4\naa\nbb\n''') == '6'\nassert solution('''\n3 3\naba\nbba\n''') == '8'\nassert solution('''\n4 5\nabbb\nbaaa\n''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 4\naa\nbb''') == '6'\nassert solution('''3 3\naba\nbba''') == '8'\nassert solution('''4 5\nabbb\nbaaa''') == '8'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 4\naa\nbb\n\n''') == '6'\nassert solution('''\n3 3\naba\nbba\n\n''') == '8'\nassert solution('''\n4 5\nabbb\nbaaa\n\n''') == '8'\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 4') == '6'\nassert solution('3 3') == '8'\nassert solution('4 5') == '8'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == output_data\n"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 4\\naa\\nbb') == '6'\nassert solution('3 3\\naba\\nbba') == '8'"
    },
    {
        "number": 3792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 4\naa\nbb\n''') == '6'\nassert solution('''\n3 3\naba\nbba\n''') == '8'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"0 0 0\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 0 1\") == \"YES\"\nassert solution(\"0 1 1\") == \"YES\"\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1'\nassert solution('''\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"NO\""
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1') == 'YES'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0 0 0') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 0 1') == 'YES'\nassert solution('0 1 1') == 'YES'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n') == 'YES\\n0 0 0\\n0 0 1\\n0 1 0\\n1 0 0\\n0 1 1\\n1 0 1\\n1 1 0\\n1 1 1\\n'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 1 1\\n0 1 1\\n0 1 1\\n0 1 1\\n0 1 1\\n') == 'NO'\nassert solution('0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n') == 'NO'\n"
    },
    {
        "number": 3793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\\n0 0 1\\n0 0 1\\n0 0 1\\n0 1 1\\n0 1 1\\n0 1 1\\n1 1 1\\n\") == \"YES\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1\\n\") == \"NO\"\nassert solution(\"0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\\n\") == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4\n2 3 6 7\n''') == 'YES'\nassert solution('''5\n6 15 35 77 22\n''') == 'YES'\nassert solution('''5\n6 10 15 1000 75\n''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('7') == 'YES'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3 6 7\n''') == \"YES\"\nassert solution('''\n5 6 10 15 1000 75\n''') == \"NO\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"3\\n8 12 15 20 30\\n\") == \"YES\\n3 2 1 1\\n\"\nassert solution(\"7\\n6 10 15 1000 75\\n\") == \"NO\\n\"\nassert solution(\"4\\n2 3 6 7\\n\") == \"YES\\n2 2 1 1\\n\"\nassert solution(\"5\\n6 15 35 77 22\\n\") == \"YES\\n2 1 2 1 1\\n\"\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n4\n3 2 1''') == 'YES'\nassert solution('''5\n6 10 15 1000 75''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3 6 7') == 'YES'\nassert solution('5 6 10 15 1000 75') == 'NO'\nassert solution('1 1 1 1 1') == 'NO'\nassert solution('1 1 2 3 4 5') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 3 6 7\n''') == 'YES'\nassert solution('''\n5\n6 15 35 77 22\n''') == 'NO'\n"
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == \"YES\"\nassert solution('4') == \"YES\"\nassert solution('5') == \"NO\"\nassert solution('6') == \"YES\"\nassert solution('7') == \"NO\""
    },
    {
        "number": 3794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3 6 7\") == \"YES\", \"Example\"\nassert solution(\"5 6 15 35 77 22\") == \"YES\", \"Example\"\nassert solution(\"5 10 15 1000 75\") == \"NO\", \"Example\""
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '100\\n60\\n70') == '40'\nassert solution(\n    '410\\n55\\n70') == '5'\nassert solution(\n    '600\\n60\\n70') == '0'\n\n\n'''\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''100\n60\n70''') == '40'\n\nassert solution('''410\n55\n70''') == '5'\n\nassert solution('''600\n60\n70''') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n100\n60\n70\n''') == '40'\nassert solution('''\n410\n55\n70\n''') == '5'\nassert solution('''\n600\n60\n70\n''') == '0'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''100\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\nprint(\"Congratulations - all tests passed!\")"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('10\\n20\\n30') == '0'\nassert solution('100\\n60\\n70') == '40'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10\n60\n70''') == '40'\nassert solution('''410\n55\n70''') == '5'\nassert solution('''600\n60\n70''') == '0'\nassert solution('''100\n60\n70''') == '40'\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100\\n60\\n70') == '40'\nassert solution('410\\n55\\n70') == '5'\nassert solution('600\\n60\\n70') == '0'"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"0\\n60\\n70\") == \"40\"\nassert solution(\"40\\n60\\n70\") == \"5\"\nassert solution(\"0\\n310\\n100\") == \"0\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n100\n60\n70\n''') == '40'\nassert solution('''\n410\n55\n70\n''') == '5'\nassert solution('''\n600\n60\n70\n''') == '0'\nprint(\"Hurray! All test cases passed\")\n"
    },
    {
        "number": 3795,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"100\\n60\\n70\") == \"40\"\nassert solution(\"400\\n50\\n60\") == \"5\"\nassert solution(\"600\\n60\\n70\") == \"0\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n1 1 1 1\n2\n1 2''') == '2'\nassert solution('''4\n3 3 3 3\n4\n3 2 1 1\n3 4 5 2\n3 5 6''') == '4'\nassert solution('''4\n1 2 2 2\n2\n1 3\n2\n3\n3\n4\n4\n2''') == '3'\nassert solution('''5\n4 4 4 4 4\n4\n3 3 3 3\n3\n4 5\n3\n4\n4''') == '5'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '3 4'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '2'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('12') == '12'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '5\\n3 3\\n2 2\\n3 3\\n2 4\\n3 2'\nassert solution('2') == '2\\n2 2\\n'\n\n------------------------------------------------------------------------------------------------------------------------------\n\n9) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n10) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n11) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n12) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n13) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n14) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n15) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n16) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n17) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n18) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n19) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n20) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is a positive integer \u2014 the sum of the longest submatrix,\nlength is an integer \u2014 the length of the longest submatrix.\nIf the matrix is empty, your function should return (0, 0).\nInput: matrix = [[1, 4, 2],\n          [5, 6, 2],\n          [2, 4, 7]]\nOutput: (10, 3)\n\n------------------------------------------------------------------------------------------------------------------------------\n\n21) Write a function that receives a matrix. Your function should calculate the sum of the longest rectangular submatrix and return a tuple of the form (longest, length), where:\n\nlongest is"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('12') == '3 4'\nassert solution('5') == '1 2 3 5'\n"
    },
    {
        "number": 3796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\nassert solution('4\\n') == '4'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1\n1 3 3\n\n''') == '6', 'Wrong answer'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '6'"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"4 5\") == \"6\"\nassert solution(\"4 5\") == \"6\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"3 3\") == \"4\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '6'\nassert solution('3 1') == '6'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 3 3\\n\") == \"6\"\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '6', 'Sample Test Failed'\nassert solution('3 1') == '6', 'Sample Test Failed'\nassert solution('4 2') == '4', 'Sample Test Failed'\nassert solution('10 4') == '12', 'Sample Test Failed'\nassert solution('7 7') == '128', 'Sample Test Failed'\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"6\"\n\nTest 1:\n"
    },
    {
        "number": 3797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 1') == '6'\nassert solution('4 1') == '6'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"10\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"87654\") == \"10\""
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '2'\nassert solution('3') == '-1'\nassert solution('4') == '-1'\nassert solution('5') == '-1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == '-1'\nassert solution(\"1\") == '-1'\nassert solution(\"12345\") == '12345'\nassert solution(\"1234\") == '-1'\nassert solution(\"123\") == '1'\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nn\ns\n\"\"\") == \"10\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n33\") == \"10\"\nassert solution(\"100\\n33\") == \"10\"\nassert solution(\"1\\n33\") == \"10\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"2\\n1\") == \"1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '10'\nassert solution('30') == '10'\nassert solution('-1') == '-1'"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == \"10\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"87654\") == \"10\"\nassert solution(\"30\") == \"10\"\nassert solution(\"\") == \"-1\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''aba\n\n''') == 'Second'\nassert solution('''aaab\n\n''') == 'First'\nassert solution('''aabc\n\n''') == 'Second'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'First'\nassert solution('aba') == 'Second'\nassert solution('abca') == 'Second'\nassert solution('abaab') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aba') == 'Second'\nassert solution('abc') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"Second\"\n\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aba') == 'Second'\n\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"Second\"\nassert solution(\"abb\") == \"Second\"\nassert solution(\"acb\") == \"First\"\nassert solution(\"bba\") == \"Second\"\nassert solution(\"cba\") == \"First\"\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('aba') == 'Second'\n\"\"\"\nfrom itertools import combinations\n\ns = list(stdin())"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('aba') == 'Second'\nassert solution('baa') == 'First'\nassert solution('ab') == 'First'\n"
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aba') == 'Second'\nassert solution('abb') == 'First'\n\"\"\""
    },
    {
        "number": 3799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\naba\n\"\"\") == \"Second\"\nassert solution(\n\"\"\"\nab\n\"\"\") == \"First\"\nassert solution(\n\"\"\"\na\n\"\"\") == \"First\"\nassert solution(\n\"\"\"\naaaa\n\"\"\") == \"First\"\n\"\"\""
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n            8\n            4 1 2 3 6 5 4 2 3\n    \"\"\") == '10'\n\nassert solution(\"\"\"\n            1\n            2\n            3\n    \"\"\") == '3'\n\nassert solution(\"\"\"\n            2\n            2 1 2\n    \"\"\") == '2'\n\n\n\"\"\"\n1)  \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442 1 \u0434\u043e 5 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u044b\u0440\u043e\u0432\u043d\u044f \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043d\u0435\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n            \n2) \u041f\u0440\u0438\u043c\u0435\u0440\u044b: \n            \u0412\u0445\u043e\u0434:  3\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \u0412\u0445\u043e\u0434:  4\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  8\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  15\n            \u0412\u044b\u0432\u043e\u0434:  2\n            \n            \u0412\u0445\u043e\u0434:  10\n            \u0412\u044b\u0432\u043e\u0434:  4\n            \u0412\u0445\u043e\u0434:  200\n            \u0412\u044b\u0432\u043e\u0434:  4\n            \u0412\u0445\u043e\u0434:  20\n            \u0412\u044b\u0432\u043e\u0434:  2\n            \u0412\u0445\u043e\u0434:  30\n            \u0412\u044b\u0432\u043e\u0434:  4\n            \u0412\u0445\u043e\u0434:  50\n            \u0412\u044b\u0432\u043e\u0434:  4\n            \n            \u0412\u0445\u043e\u0434:  100\n            \u0412\u044b\u0432\u043e\u0434:  8\n            \u0412\u0445\u043e\u0434:  200\n            \u0412\u044b\u0432\u043e\u0434:  8\n            \n            \u0412\u0445\u043e\u0434:  11\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  123\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  20\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  19\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  12\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  23\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  45\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  46\n            \u0412\u044b\u0432\u043e\u0434:  2\n            \n            \u0412\u0445\u043e\u0434:  3\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \u0412\u0445\u043e\u0434:  2\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  10\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  60\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  61\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  20\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  62\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  63\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  65\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  66\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  99\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  100\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  101\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  102\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  103\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  104\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  105\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  106\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  106\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \u0412\u0445\u043e\u0434:  107\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  107\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  103\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  110\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  200\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  199\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  201\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  205\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  210\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  211\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  212\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  221\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  222\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  223\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  224\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  225\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  226\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  227\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  228\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  229\n            \u0412\u044b\u0432\u043e\u0434:  1\n            \n            \u0412\u0445\u043e\u0434:  230\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  231\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  235\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  236\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  238\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  239\n            \u0412\u044b\u0432\u043e\u0434:  0\n            \n            \u0412\u0445\u043e\u0434:  241\n            \u0412\u044b\u0432"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('10') == '6'\nassert solution('12345') == '6'\nassert solution('16') == '40'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('12') == '2'\nassert solution('123') == '3'\nassert solution('1234') == '4'\nassert solution('12345') == '5'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == '40'\nassert solution(input()) == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('10') == '6'\nassert solution('16') == '40'\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\n    \"1\\n12345\"\n) == \"6\"\nassert solution(\n    \"16\\n439873893693495623498263984765\"\n) == \"40\"\n"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    '10\\n'\n    '12345'\n) == '6'"
    },
    {
        "number": 3800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n12345') == '6'\nassert solution('16\\n439873893693495623498263984765') == '40'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == output_\n\n\n\"\"\"\n\nimport math\n\nn, m = (int(i) for i in stdin.split())\na = list(map(int, input().split()))\np = list(map(int, input().split()))\nw = list(map(int, input().split()))"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"2 1\n0 1\n2 1\"\"\") == \"332748119\"\n\nassert solution(\n\"\"\"1 2\n1\n1\"\"\") == \"3\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1\\n0 1\\n2 1') == '332748119'\nassert solution('1 2\\n1\\n1') == '3'\nassert solution('3 3\\n0 1 1\\n4 3 5') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 1\n0 1\n2 1\n\n3 3\n0 1 1\n4 3 5\n\n''') == '160955686'\nassert solution('''1 2\n1\n1\n\n3 3\n0 1 1\n4 3 5\n\n''') == '332748119'\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"332748119\"\nassert solution(\"\") == \"1\"\nassert solution(\"2 1\") == \"332748119\"\nassert solution(\"1 2\") == \"160955686\"\nassert solution(\"3 3\") == \"974061117\"\nprint(\"Congratulations, have fun while working with me!\")"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 2\n0 1\n2 1''') == '332748119'\nassert solution('''1 2\n1\n2 1''') == '160955686'\nassert solution('''2 3\n0 1 1\n4 3 5''') == '974061117'\nassert solution('''3 3\n0 1 1\n4 3 5''') == '332748119'\n\nassert solution('''2 1\n0 1\n2 1''') == '332748119'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '332748119'\nassert solution(test_input_2) == '185138929'\nassert solution(test_input_3) == '974061117'"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"332748119\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 2\") == \"1.3333333333\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"332748119\"\n"
    },
    {
        "number": 3801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '332748119'\n\nprint(solution('3 3'))\nprint(solution('1 2'))\nprint(solution('1'))"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"A\") == \"A\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"AAC\") == \"AAC\"\nassert solution(\"AACAA\") == \"AAC\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"ORZ\"\nassert solution(\"OZ\") == \"0\"\n\n\n'''\n\nimport math\n\ns1 = input()\ns2 = input()\nvirus = input()\n\ndp = [[0]*(len(s2)+1) for _ in range(len(s1)+1)]\n\nfor i in range(1,len(s1)+1):\n    for j in range(1,len(s2)+1):\n        if s1[i-1] == s2[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n\nprint(dp[-1][-1])"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"AA\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\nAB\nAE\nAG\nBC\n\n''') == 'AE'\nassert solution('''\nAB\nAE\nAG\nBC\n\n''') == 'AB'\nassert solution('''\nAB\nAE\nAG\nBC\n\n''') == 'AB'\nassert solution('''\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nABCDEFGHIJKLMNOP"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"AA\") == \"0\"\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"AJKEQSLOBSROFGZ\") == \"ORZ\"\nassert solution(\"OVGURWZLWVLUXTH\") == \"OZ\"\nassert solution(\"A\") == \"0\""
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(stdin) == 'ORZ'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\nassert solution('AB') == '0'\nassert solution('ABA') == '0'\n"
    },
    {
        "number": 3802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('AA') == '0'\nassert solution('AJKEQSLOBSROFGZ') == 'ORZ'\nassert solution('OVGURWZLWVLUXTH') == 'ORZ'\nassert solution('OZ') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '1 2 1\\n'\n    '1 100 1\\n'\n    '1 100 100'\n) == '99'\nassert solution(\n    '100 100 100\\n'\n    '1 1 1\\n'\n    '1 1 1'\n) == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"100 100 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\""
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1,2,1]) == '99'\nassert solution([1,100,1]) == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"100 100 100\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100\\n') == '99'\nassert solution('100 100 100\\n1 1 1\\n1 1 1\\n') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1\\n1 100 1\\n1 100 100') == '99'\nassert solution('3 3 3\\n1 1 1\\n1 1 1\\n1 100 100') == '0'\nassert solution('100 100 100\\n1 1 1\\n1 1 1\\n1 100 100') == '0'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1\") == \"99\"\nassert solution(\"1 100 1\") == \"0\"\nassert solution(\"100 100 100\") == \"0\"\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2 1\\n1 100 1\\n1 100 100\\n') == '99'\nassert solution('1 2 1\\n1 100 1\\n1 100 100\\n') == '0'\nassert solution('1 2 2\\n1 100 1\\n1 100 100\\n') == '1'\n"
    },
    {
        "number": 3803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\\n1 100 1\\n1 100 100\") == \"99\"\nassert solution(\"100 100 100\\n1 1 1\\n1 1 1\") == \"0\"\nassert solution(\"1 2 1\\n100 1 1\\n100 1 1\") == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"3 2\"\n) == \"1\"\nassert solution(\n    \"3 3\"\n) == \"0\"\nassert solution(\n    \"1000000000000 1048576\"\n) == \"118606527258\"\nassert solution(\n    \"100000000000000 1000\"\n) == \"10000000000001048576\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''3 2\n''') == '1'\nassert solution('''3 3\n''') == '0'\nassert solution('''1000000000000 1048576\n''') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"1\"\nassert solution() == \"1\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == '1'\nassert solution(input_) == '0'\n\n'''\n\nn, t = map(int, input().split())\nnums = list(range(n))\ncur_sum = 0\n\nfor i in range(n):\n    cur_sum += nums[i]\n    if cur_sum == t:\n        print(i+1)\n        break\n    if i == n - 1:\n        print(0)"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 5\n10 50\n15 100\n20 200\n25 250\n30 500''') == '1'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1000000000000 1048576\") == \"118606527258\"\nassert solution(\"-1 -2\") == \"0\""
    },
    {
        "number": 3804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('1000000000000 1048576') == '118606527258'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"+-\") == \"No\"\nassert solution(\n    \"++\") == \"Yes\"\nassert solution(\n    \"+-\") == \"Yes\"\nassert solution(\n    \"-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"-\") == \"No\"\nassert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"--\") == \"No\"\nassert solution(\"++-\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-++') == 'Yes'\nassert solution('+') == 'No'\nassert solution('-') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"-+\") == \"No\"\nassert solution(\"+--\") == \"No\"\nassert solution(\"-+-\") == \"Yes\"\n\nstdin = \"\"\"\n+-\n\"\"\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-++') == 'Yes'\nassert solution('--++') == 'Yes'\nassert solution('++--') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''+-''') == 'No'\nassert solution('''++''') == 'Yes'\nassert solution('''+--+''') == 'Yes'\nassert solution('''++++''') == 'No'\nassert solution('''+--+-''') == 'No'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+-\") == \"Yes\"\nassert solution(\"-++\") == \"Yes\"\nassert solution(\"--++\") == \"Yes\"\nassert solution(\"+-++\") == \"No\"\nassert solution(\"++--\") == \"No\"\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('+-') == 'No'\nassert solution('++') == 'Yes'\nassert solution('-++') == 'No'\n\n'''\n\n\nclass Wire:\n    def __init__(self, name):\n        self.name = name\n        self.next = None\n        self.is_end = False\n        self.check = False\n\n    def __repr__(self):\n        return f'Wire {self.name}'"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''+-''') == 'Yes'\nassert solution('''++''') == 'Yes'\nassert solution('''-''') == 'No'\nassert solution('''--''') == 'No'\nassert solution('''-+-''') == 'Yes'\n"
    },
    {
        "number": 3805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"No\"\nassert solution(\"++\") == \"Yes\"\nassert solution(\"+-\") == \"Yes\"\nassert solution(\"--\") == \"No\"\nassert solution(\"+-\") == \"Yes\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"12.566370614359172464\"\nassert solution(\"3 0 0\") == \"12.566370614359172464\"\nassert solution(\"3 0 0\") == \"12.566370614359172464\"\n\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n''') == '12.566370614359172464'\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\nassert solution('''\n3 2 1\n2 2\n1 0\n''') == '21.991148575128551812'\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n''') == '12.566370614359172464'\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 0 0\n0 1\n-1 2\n1 2''') == '12.566370614359172464'\n\nassert solution('''4 1 -1\n0 0\n1 2\n2 0\n1 1''') == '21.991148575128551812'\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n\n''') == '12.566370614359172464'\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n''') == '21.991148575128551812'\n\n--Challenge Input--\n\nSample Input 1\n2 4 1\n0 0\n1 2\n\nSample Output 1\n4.242640687119285267\n\nSample Input 2\n3 4 1\n0 0\n1 2\n2 0\n1 1\n\nSample Output 2\n6.5980001723404251\n\nSample Input 3\n4 5 1\n0 0\n1 2\n2 0\n1 1\n\nSample Output 3\n6.5980001723404251\n\nSample Input 4\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\nSample Output 4\n3.6967387875867394''') == '6.5980001723404251'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '12.566370614359172464'\nassert solution(stdin='3 0 0\\n0 1\\n-1 2\\n1 2\\n') == '12.566370614359172464'\nassert solution(stdin='4 1 -1\\n0 0\\n1 2\\n2 0\\n1 1\\n') == '21.991148575128551812'\n\"\"\"\n\nfrom math import pi, sqrt, atan2\nfrom collections import defaultdict"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 0 0') == '12.566370614359172464'\nassert solution('4 1 -1') == '21.991148575128551812'\nassert solution('2 2 4') == '1'"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 0 0\\n0 1\\n-1 2\\n1 2\\n\") == \"12.566370614359172464\"\n\nInput\n4 0 0\n0 0\n1 1\n0 0\n2 1\n\nOutput\n7.4641016151377544\n\"\"\""
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    3 0 0\n    0 1\n    -1 2\n    1 2\n    \"\"\"\n) == \"12.566370614359172464\"\nassert solution(\n    \"\"\"\n    4 1 -1\n    0 0\n    1 2\n    2 0\n    1 1\n    \n    \"\"\"\n) == \"21.991148575128551812\"\n"
    },
    {
        "number": 3806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 0 0\n0 1\n-1 2\n1 2\n''') == '12.566370614359172464'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n\nassert solution('''\n7 4 -8\n1 1\n0 1\n-1 2\n1 2\n0 -1\n1 -2\n2 2\n1 -2\n''') == '108.622634703878206'\n\nassert solution('''\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n''') == '21.991148575128551812'\n\nassert solution('''\n1 1\n1 1\n''') == '1.0'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''48''') == '9 42'\nassert solution('''6''') == '6 6'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('8') == '3 9'\nassert solution('6') == '6 6'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('48') == '9 42'\nassert solution('6') == '6 6'\n\n------\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '9 42'\nassert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n'''6'''\n) == '6 6'\nassert solution(\n'''8'''\n) == '9 42'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '6 6'\n"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '6 6'\nassert solution('48') == '9 42'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '3 4'\nassert solution('6') == '6 6'\nassert solution('4 8') == '8 8'\nassert solution('6 3') == '4 6'"
    },
    {
        "number": 3807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"48\") == \"9 42\"\nassert solution(\"6\") == \"6 6\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"No\"\nassert solution(\"()\") == \"Yes\"\nassert solution(\"(())\") == \"Yes\"\nassert solution(\")(\") == \"No\"\nassert solution(\"(()())\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n()') == 'Yes'\nassert solution('3\\n(()') == 'No'\nassert solution('10\\n)))') == 'No'\nassert solution('1\\n)') == 'No'\nassert solution('10\\n()()(())') == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'Yes'"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"No\"\nassert solution(\"10\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"Yes\"\nassert solution(\"\") == \"Yes\"\nassert solution(\"\") == \"Yes\"\nassert solution(\"\") == \"Yes\"\nassert solution(\"\") == \"Yes\"\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"2\n((\n\n\"\"\") == \"Yes\"\n\nassert solution(\"\"\"2\n)()\n\n\"\"\") == \"No\"\n\nassert solution(\"\"\"10\n))))((((\n\n\"\"\") == \"No\"\n\nassert solution(\"\"\"3\n))(\n\n\"\"\") == \"No\"\n\nassert solution(\"\"\"2\n()\n\n\"\"\") == \"Yes\""
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n)(\n\n''') == 'Yes'\nassert solution('''\n3\n(()\n\n''') == 'No'\nassert solution('''\n10\n)))))(((\n\n''') == 'No'\n"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n)\") == \"Yes\"\nassert solution(\"3\\n(()\") == \"Yes\"\nassert solution(\"10\\n)))))))))\") == \"No\"\nassert solution(\"8\\n(()(())()(()(()))(())\") == \"No\"\nassert solution(\"20\\nn    pass"
    },
    {
        "number": 3808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == 'Yes'\n\nassert solution() == 'No'"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 50\n50 50 100''') == '1'\nassert solution('''2 50\n50 50''') == '2'\nassert solution('''3 100\n50 50 100''') == '5'\nassert solution('''4 100\n50 50 100 50''') == '3'\nassert solution('''5 100\n50 50 100 50''') == '-1'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 50\\n50 50 100\") == \"1\"\nassert solution(\"2 50\\n50 50 100\") == \"2\"\nassert solution(\"2 50\\n50 100\") == \"2\"\nassert solution(\"1 100\\n100 50\\n50 50\") == \"1\"\nassert solution(\"2 100\\n100 50\\n50 50\") == \"1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 50\\n50 50\\n\") == \"1\"\nassert solution(\"2 50\\n50 50\\n\") == \"1\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"2\"\nassert solution(\"4 50\") == \"2\"\nassert solution(\"5 50\") == \"0\"\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 50') == '1'\nassert solution('3 100') == '5'\nassert solution('2 50') == '-1'\nassert solution('2 50') == '0'"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 50\n50 50 100\n''') == '5'\n\nassert solution('''\n2 50\n50 50\n''') == '2'\n\nassert solution('''\n3 100\n50 50 100\n''') == '5'\n"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 50\") == \"1\"\nassert solution(\"3 100\") == \"5\"\nassert solution(\"2 50\") == \"2\"\nassert solution(\"2 50\") == \"0\"\nassert solution(\"3 100\") == \"2\""
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 50\\n50 50\\n') == '1\\n1'\nassert solution('3 100\\n50 50 100\\n') == '5\\n2'\nassert solution('2 50\\n50 50\\n') == '-1'\nassert solution('100 100\\n50 50\\n') == '0'"
    },
    {
        "number": 3809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 50\\n50 50 100') == '1'\nassert solution('2 50\\n50 50') == '-1'\nassert solution('3 100\\n50 50 100') == '5'\nassert solution('3 50\\n50 50') == '2'"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3 4 9 12') == '2'\nassert solution('4\\n5 7 2 9') == '1'\nassert solution('3\\n2 6 8') == '2'\nassert solution('6\\n2 3 4 9 12') == '4'\nassert solution('4\\n5 7 2 9') == '0'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"4\") == \"1\"\n\n\n\n\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 6 8\") == \"2\"\nassert solution(\"5\\n2 3 4 9 12\") == \"4\"\nassert solution(\"4\\n5 7 2 9\") == \"1\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '1'\nassert solution('4') == '4'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 4 9 12\") == \"2\"\nassert solution(\"4\\n5 7 2 9\") == \"1\"\nassert solution(\"2\\n2 3 4 5\") == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('4') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 6 8\n\n''') == \"2\"\n\nassert solution('''\n5\n2 3 4 9 12\n\n''') == \"4\"\n\nassert solution('''\n4\n5 7 2 9\n\n''') == \"1\"\n\nassert solution('''\n2\n3 4 9 12\n\n''') == \"0\"\n"
    },
    {
        "number": 3810,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n2 6 8') == '2'\nassert solution('3\\n2 6 8') == '1'\nassert solution('4\\n5 7 2 9') == '4'\nassert solution('5\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n17 18\\n15 24\\n') == '6'\nassert solution('2\\n10 16\\n7 17\\n') == '5'\nassert solution('5\\n90 108\\n45 105\\n75 40\\n') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('2') == '-1'\nassert solution('3') == '6'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 6\nassert solution(\"4\") == -1\nassert solution(\"5\") == 5\nassert solution(\"3\") == 6\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([3, 17, 18, 15, 24, 12, 15, 24, 12, 15, 24]) == 6\nassert solution([2, 10, 16, 7, 17, 33, 30]) == 5\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6'\nassert solution('4') == '-1'\nassert solution('5') == '5'\nassert solution('6') == '5'"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n17 18\n15 24\n12 15\n''') == '6'\nassert solution('''\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n''') == '5'\nassert solution('''\n2\n10 16\n7 17\n''') == '-1'\n\n'''\n    import math\n    def solution(stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        _max = math.ceil(math.sqrt(n))\n        _divs = set()\n        for i in range(1, _max):\n            _divs.update({i*x for x in range(1, n+1) if i*x <= n})\n        for i in range(1, _max):\n            if i not in _divs:\n                return str(i)\n        return str(-1)\n\n'''\n\n'''\n\n<\uc2dc\uac04\ucd08\uacfc>\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"-1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"6\"\nassert solution() == \"-1\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n17 18\n15 24\n12 15\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n10 16\n7 17\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\"\"\") == \"5\"\n"
    },
    {
        "number": 3811,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\nassert solution() == '-1'\nassert solution() == '5'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bbbb\\naaa\\n') == '0'\nassert solution('bab\\nbb\\n') == '2'"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"2 0 1 3\"\nassert solution(\"bbbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abab\") == \"2 0 1 0\"\nassert solution(\"bbbb\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbbb\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('bab\\nbb') == '2 1 0'\nassert solution('bbbb\\naaa') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('bab\\nbb') == '1 0\\n1 3'\nassert solution('bbbb\\naa') == '0'\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bab\\nbb\") == \"0\"\nassert solution(\"bbbb\\naaa\") == \"0\""
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"bab\\nbb\") == \"0\"\n"
    },
    {
        "number": 3812,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"1 0\"\nassert solution(\"bbb\") == \"1 3\""
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == 'IMPOSSIBLE'\nassert solution('2') == 'POSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5\n1 1\n4 3 2\n3 4\n2 3\n1 4\n''') == 'POSSIBLE'\nassert solution('''\n5\n1 1\n4 3 2\n3 4\n2 3\n1 4\n''') == 'IMPOSSIBLE'\nassert solution('''\n3\n3 2\n4 1\n''') == 'IMPOSSIBLE'\n''')"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1\\n4 3 2\\n') == 'POSSIBLE'\nassert solution('3\\n1 1\\n2 2\\n') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"POSSIBLE\"\nassert solution(\"2\") == \"POSSIBLE\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1\\n4 3 2') == 'POSSIBLE'\nassert solution('3\\n1 1\\n1 2 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == 'POSSIBLE'\nassert solution('1 2') == 'POSSIBLE'\nassert solution('1 2 3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == 'POSSIBLE'\nassert solution('3') == 'POSSIBLE'\nassert solution('3') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'POSSIBLE'\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1\\n4 3 2\\n\") == \"POSSIBLE\"\n"
    },
    {
        "number": 3813,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'POSSIBLE'\nassert solution('2 2') == 'IMPOSSIBLE'\n\"\"\"\nimport sys"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"1000 3\") == \"1\"\nassert solution(\"1000 1000\") == \"0\"\n\"\"\"\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1000000007\\n') == '2'\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"3 9\") == \"6\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 1000000007') == '2'\n\"\"\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"2 1000000007\") == \"4\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1000000007\") == \"2\"\nassert solution(\"2 1000000007\") == \"2\"\n\n\"\"\"\n\nimport math\nimport timeit\nimport cProfile"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 5\") == \"2\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 1000000007\") == \"2\"\nassert solution(\"5 1000000007\") == \"1\"\nassert solution(\"10 1000000007\") == \"4\"\nassert solution(\"20 1000000007\") == \"3\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"1\"\nassert solution(\"2 1000000007\") == \"2\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 3814,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1000000007') == '2'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\n\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 2 3 3\n+-+''') == '7'\n\nassert solution('''4 1 5 1\n-''') == '999999228'\n\nassert solution('''3 2 4 1\n+--''') == '73226334'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output\n\n\n\nimport math\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n2 2 3 3\n+-+\n''') == '7'\nassert solution('''\n4 1 5 1\n-\n''') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 3\") == \"7\"\nassert solution(\"4 1 5 1\") == \"999999228\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\n"
    },
    {
        "number": 3815,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2 3 3') == '7'\nassert solution('4 1 5 1') == '999999228'\nassert solution('4 1 0 1') == '999999228'\nassert solution('4 0 1 1') == '999999228'\nassert solution('4 1 5 0') == '999999228'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 1 1 2''') == '4'\nassert solution('''1 2 3 1''') == '2'\nassert solution('''10 2 1 7''') == '0'\nassert solution('''10 2 1''') == '0'\nassert solution('''1 2 3 1''') == '2'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1 1 2') == 4\nassert solution('1 2 3 1') == 2\nassert solution('10 2 1 7') == 0"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 2\") == \"4\"\nassert solution(\"1 2 3 1\") == \"2\"\nassert solution(\"10 2 1 7\") == \"0\"\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([1, 1, 1, 2]) == 4\nassert solution([1, 2, 3, 1]) == 2\nassert solution([10, 2, 1, 7]) == 0\nassert solution([1, 2, 3, 1]) == 1\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'\nassert solution('5 5 5 5 5') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1 1 2\n''') == 4\nassert solution('''\n1 2 3 1\n''') == 2\nassert solution('''\n10 2 1 7\n''') == 0\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1 2') == '4'\nassert solution('1 2 3 1') == '2'\nassert solution('10 2 1 7') == '0'"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == '4'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1 1 2''') == '4'\nassert solution('''1 2 3 1''') == '2'\nassert solution('''10 2 1 7''') == '0'\n"
    },
    {
        "number": 3816,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1 1 1 2\n''') == '4'\nassert solution('''\n1 2 3 1\n''') == '2'\nassert solution('''\n10 2 1 7\n''') == '0'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 1') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"10 10\") == \"10\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 2\n3 2\n1 2\n3 3\n2 1\n1 3''') == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == '6'\nassert solution(\"2 2\") == '0'"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"6\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n''') == '6'\nprint(solution('''\n3 2\n'''))"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '6'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"6\""
    },
    {
        "number": 3817,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3 2\n''') == '6', 'wrong result'\nassert solution('''\n5 2\n''') == '22', 'wrong result'\nassert solution('''\n5 3\n''') == '27', 'wrong result'\n\n'''\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\nassert solution('2') == '0'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n1 2\\n1 3') == '0'\nassert solution('1\\n1\\n1\\n') == '0'\nassert solution('1\\n1\\n0\\n') == '1'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"1\\n1 2\") == \"1\"\nassert solution(\"2\\n1 2\\n3 4\") == \"2\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '2'\nassert solution('2 1 2') == '2'\nassert solution('2 1 3 3') == '2'\nassert solution('2 1 2 3 3') == '2'\nassert solution('2 1 2 3 4') == '2'"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"1\"\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input := '3\\n1 2\\n') == '2'\nassert solution(input := '3\\n1 2\\n') == '2'\n"
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"10\") == \"1\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 3818,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    2\n    1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n    4\n    1 2 3 4\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\n\nassert solution('''\n3\n0 2 0\n1 0 3\n''') == '4'\n\"\"\"\n\nfrom math import inf\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ncnt = 0\n\nwhile a:\n    cnt += 1\n    top = a.pop(0)\n    b.append(top)\n    if b < a:\n        a.append(b.pop(0))\n    else:\n        a.append(top)\n        a.sort()\n\nprint(cnt)\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"11\") == \"18\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n    3\n    0 2 0\n    3 0 1\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n    3\n    0 2 0\n    1 0 3\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n    11\n    0 0 0 5 0 0 0 4 0 0 11\n    9 2 6 0 8 1 7 0 3 0 10\n\"\"\") == \"18\"\n\nassert solution(\"\"\"\n    9\n    0 0 0 5 0 0 0 4 0 0 11\n    9 2 6 0 8 1 7 0 3 0 10\n\"\"\") == \"14\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\nassert solution('''\n3\n0 2 0\n3 0 1\n''') == '4'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n0 2 0\n3 0 1\n''') == '2'\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(open(\"input.txt\").read()) == \"18\"\n\n\"\"\""
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n0 2 0\n3 0 1\n''') == '2'\n\nassert solution('''\n10\n0 2 0\n1 0 3\n''') == '4'\n\nassert solution('''\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n''') == '18'\n\nassert solution('''\n12\n1 0 2 0\n0 0 1\n''') == '2'\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == '3'\n\"\"\"\n"
    },
    {
        "number": 3819,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('11') == '18'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == 'YES'\n\n'''\n\n\nn, m = (int(x) for x in input().split())\ns = input()\nt = input()"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6 10\\ncode*s\\ncodeforces\") == \"YES\"\nassert solution(\"6 5\\nvk*cup\\nvkcup\") == \"YES\"\nassert solution(\"1 1\\nv\\nk\") == \"NO\""
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 3\ncodeforces\ncodeforces\ncodeforces\ncodeforces\ncodeforces\ncodeforces''') == \"YES\", 'Easy case'\nassert solution('''10 1\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*''') == \"YES\", 'Another easy case'\nassert solution('''6 5\nvkcup\nvkcup\nvkcup\nvkcup\nvkcup\nvkcup''') == \"NO\", 'The last example'\nassert solution('''9 6\ngfgf*gfgf\ngfgfgf\ngfgfgf''') == \"YES\", 'Last example'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 5') == 'YES'\nassert solution('6 5') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('9 6') == 'NO'\nassert solution('4 6') == 'YES'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '''\n    6 5\n    vkcup\n    ''') == 'YES'\n\nassert solution(\n    '''\n    6 6\n    sdsds\n    dsdvds\n    ''') == 'YES'\n\nassert solution(\n    '''\n    1 1\n    v\n    ''') == 'NO'\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == \"YES\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input(\"\")) == \"NO\"\n"
    },
    {
        "number": 3820,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0.26'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '0.260000000000'\nassert solution('1') == '0.800000000000'\nassert solution('1 2') == '0.699999999999'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '0.800000000000'\nassert solution('2') == '0.260000000000'"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0.1 0.2 0.3') == '0.800000000000'\nassert solution('2\\n0.1 0.2') == '0.260000000000'\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"0.260000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n0.1 0.2 0.3\n\n1\n0.1\n\n2\n0.2\n\n1\n0.3\n''') == '0.260000000000'\nassert solution('''\n4\n0.1 0.2 0.3 0.8\n\n0.1\n0.2\n0.3\n0.8\n''') == '0.800000000000'\nassert solution('''\n5\n0.1 0.2 0.3 0.4 0.5\n\n0.1\n0.2\n0.3\n0.4\n0.5\n''') == '0.500000000000'\n\n'''\n20\n0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n1\n0.1\n\n2\n0.2\n\n3\n0.3\n\n4\n0.4\n\n5\n0.5\n\n6\n0.6\n\n7\n0.7\n\n8\n0.8\n\n9\n0.9\n\n'''\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"0.800000000000\"\nassert solution(\"2\") == \"0.260000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n0.1 0.2 0.3\n\"\"\") == \"0.260000000000\"\nassert solution(\"\"\"\n4\n0.1 0.2 0.3 0.8\n\"\"\") == \"0.800000000000\"\n"
    },
    {
        "number": 3821,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0.1 0.2 0.3 0.8\\n') == '0.800000000000'\nassert solution('2\\n0.1 0.2\\n') == '0.260000000000'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nassert solution(\"2 2 2 2 2\") == \"2.0000000000\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\""
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 10 1 2 5\\n\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\\n\") == \"4.7142857143\"\n\n\"\"\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\nassert solution('3 6 1 2 3') == '4.50000000'\nassert solution('3 6 1 2 4') == '4.50000000'\nassert solution('3 6 1 2 5') == '4.50000000'\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\nassert solution(\"5 10 1 2 3\") == \"6.7857142857\"\nassert solution(\"5 10 1 2 4\") == \"7.4285714286\"\nassert solution(\"5 10 1 2 5\") == \"8.2857142857\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 10 1 2 5\") == \"5.0000000000\"\nassert solution(\"3 6 1 2 1\") == \"4.7142857143\"\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 10 1 2 5\n''') == '5.0000000000'\nassert solution('''\n3 6 1 2 1\n''') == '4.7142857143'''\n"
    },
    {
        "number": 3822,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 10 1 2 5') == '5.0000000000'\nassert solution('3 6 1 2 1') == '4.7142857143'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'\nassert solution('''3\n8.888 0.0 0.0 9.9 2.0\n''') == '0.8'\nassert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.25'\nassert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.25'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == '0.25'\nassert solution(\"5\") == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n0.000 0.500 0.750 1.000 2.000 3.000\n''') == '0.250'\nassert solution('''3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n''') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'\nassert solution('3\\n5.000 5.000 5.000 5.000 5.000 5.000') == '5.000'\nassert solution('3\\n8.000 4.000 9.000 4.000 3.000 4.000') == '2.000'\nassert solution('3\\n1.000 2.000 3.000 4.000 5.000 6.000 7.000') == '0.000'\n\n\"\"\"\n\nn = int(input())\nnumbers = sorted(list(map(float, input().split())))\n\nsum_numbers = sum(numbers)\ndiff_numbers = sum_numbers - sum(numbers[::2])\n\nprint(round(diff_numbers, 3))"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"0.250\"\nassert solution(\"3\") == \"0.279\"\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'\nassert solution('3') == '0.279'\nassert solution('4') == '0.375'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'\nassert solution('3') == '0.279'"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '0.250'\nassert solution('3') == '0.279'\n"
    },
    {
        "number": 3823,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n0.000 0.500 0.750 1.000 2.000 3.000') == '0.250'\nassert solution('3\\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896') == '0.279'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 0''') == '18'\nassert solution('''0 1\n0 0''') == '8'\nassert solution('''1 1\n1 1''') == '2'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 5\\n5 2\\n') == '18'\nassert solution('0 1\\n0 0\\n') == '8'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1\\n5 2') == '18'\n"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 5\") == \"18\"\nassert solution(\"0 1\") == \"8\"\nassert solution(\"1 0\") == \"9\""
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 5') == '18'\nassert solution('0 1') == '8'"
    },
    {
        "number": 3824,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 5\\n5 2') == '18'\nassert solution('0 1\\n0 0') == '8'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n''') == '4'\nassert solution('''2\n''') == '10'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n    ''') == '3'\nassert solution('''4\n    ''') == '4'\nassert solution('''10\n    ''') == '244'"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\nassert solution('10') == '244'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n\n''') == '4'\nassert solution('''2\n\n''') == '10'\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"4\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdin.readline()[:-1]\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n''') == \"4\"\nassert solution('''\n10\n''') == \"244\"\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == \"4\"\nassert solution('2') == \"10\"\nassert solution('10') == \"244\"\n\n\n'''"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == 4\nassert solution('2') == 10\n"
    },
    {
        "number": 3825,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '10'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n1 4 1 4 9') == '2'\nassert solution('3\\n1 2 3') == '0'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '0'\nassert solution('4\\n1 1 2 2') == '2'\nassert solution('5\\n1 4 1 4 9') == '2'"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 3\") == \"0\"\nassert solution(\"4\\n1 4 1 4 9\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n\") == \"0\"\nassert solution(\"4 1 4 1 4 9\\n\") == \"2\"\nassert solution(\"5 1 4 1 4 9\\n\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_data) == \"0\""
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == 0\nassert solution('4') == 2\nassert solution('5') == 2"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 4 1 4 9\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\\n\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\\n\\n\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\\n\\n\\n\") == \"2\"\nassert solution(\"5\\n1 4 1 4 9\\n\\n\\n\\n\") == \"2\"\n"
    },
    {
        "number": 3826,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_) == \"0\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"aaabccc\") == \"YES\", \"YES\"\nassert solution(\"bbacc\") == \"NO\", \"NO\"\nassert solution(\"aabc\") == \"YES\", \"YES\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n\"\"\""
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('aabc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aaabccc') == 'YES'\nprint('all tests passed')\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('aaabccc') == 'YES', 'Test 1 failed'\nassert solution('bbacc') == 'NO', 'Test 2 failed'\nassert solution('aabc') == 'YES', 'Test 3 failed'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"aaabccc\") == \"YES\", \"aabc\"\nassert solution(\"bbacc\") == \"NO\", \"bbacc\"\nassert solution(\"aabc\") == \"YES\", \"aabc\"\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('aabc') == 'YES'\nassert solution('bbacc') == 'NO'\n"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('aaabccc') == 'YES'\nassert solution('bbacc') == 'NO'\nassert solution('aabc') == 'YES'"
    },
    {
        "number": 3827,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaabccc\") == \"YES\"\nassert solution(\"bbacc\") == \"NO\"\nassert solution(\"aabc\") == \"YES\"\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 1 2 5 3\n    \n    ''') == '2'\nassert solution('''4 1 2 5 3\n    \n    ''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n4 1 2 5 3\n\n''') == \"2\"\nassert solution('''4\n4 1 3 2\n\n''') == \"2\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 5 3\") == \"2\"\nassert solution(\"4 1 2 5 3\") == \"2\"\n\n\n\"\"\""
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n4 1 2 5 3') == '2'\nassert solution('10\\n1 2 5 3 4 6 7 8 9 10') == '1'\nassert solution('100\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1\\n10') == '10'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n4 1 2 5 3\\n') == '2'\nassert solution('4\\n4 1 3 2\\n') == '2'\nassert solution('4\\n4 1 3 2\\n') == '2'\nassert solution('4\\n5 1 3 2\\n') == '2'\nassert solution('5\\n5 1 3 2\\n') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\nassert solution('''5\n4 1 2 3 5\n''') == '3'"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n4 1 2 5 3\n''') == '2'\nassert solution('''4\n4 1 3 2\n''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n4 1 2 5 3\n''') == '2'\nassert solution('''\n4\n4 1 3 2\n''') == '2'\nassert solution('''\n5\n4 1 2 5 3\n''') == '2'\nassert solution('''\n5\n4 1 3 2\n''') == '2'\n"
    },
    {
        "number": 3828,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '2'\nassert solution('4') == '2'\nassert solution('3') == '1'\nassert solution('2') == '1'\nassert solution('1') == '0'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n\") == \"3.500000000000\"\nassert solution(\"6 3\\n\") == \"4.958333333333\"\nassert solution(\"2 2\\n\") == \"1.750000000000\"\n\"\"\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n\n'''\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"3.500000000000\"\nassert solution(\"4 3\") == \"4.958333333333\"\nassert solution(\"2 2\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6 1') == '3.500000000000'\nassert solution('6 3') == '4.958333333333'\nassert solution('2 2') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(__import__(\"sys\").stdin.read()) == '3.500000000000'\n\"\"\"\nimport math"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''6 1\n''') == '3.500000000000'\nassert solution('''6 3\n''') == '4.958333333333'\nassert solution('''2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n6 1\n''') == '3.500000000000'\nassert solution('''\n6 3\n''') == '4.958333333333'\nassert solution('''\n2 2\n''') == '1.750000000000'\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 1\\n\") == \"3.500000000000\"\nassert solution(\n    \"6 3\\n\") == \"4.958333333333\"\nassert solution(\n    \"2 2\\n\") == \"1.750000000000\"\n"
    },
    {
        "number": 3829,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '2.750000000000'\n\"\"\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n-><-\") == \"3\"\nassert solution(\"4\\n4\\n<->\") == \"0\"\nassert solution(\"4\\n5\\n<-\") == \"1\"\nassert solution(\"4\\n4\\n->-\") == \"2\"\nassert solution(\"4\\n5\\n--->\") == \"2\"\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '''\n    1\n    -><-\n    5\n    '''\n) == \"3\"\n\nassert solution(\n    '''\n    1\n    >->\n    5\n    '''\n) == \"5\"\n\nassert solution(\n    '''\n    1\n    >-<\n    5\n    '''\n) == \"3\"\n\nassert solution(\n    '''\n    1\n    <-<\n    5\n    '''\n) == \"5\"\n\nassert solution(\n    '''\n    1\n    <->\n    5\n    '''\n) == \"5\""
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n-><-\n5\n>>>>\n3\n<--\n2\n>>>>\n\n''') == '5'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n''') == '5'\nassert solution('''\n4\n-><-\n5\n>-<\n3\n<-\n2\n<>\n''') == '4'\nassert solution('''\n4\n-><-\n5\n<->\n3\n<-\n2\n<>\n''') == '0'\nassert solution('''\n4\n>->\n5\n>->\n3\n<->\n2\n<->\n''') == '3'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == '0'\nassert solution(\"1\") == '1'\nassert solution(\"2\") == '2'\nassert solution(\"3\") == '3'\nassert solution(\"4\") == '4'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == '3'\nassert solution('5') == '5'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n4\n-><-\n5\n>><\n3\n<--\n2\n<>\n''') == '3'\n\n'''\nTest case #1:\n\nThe first test case is as follows:\n\n    The snake enters room 0.\n    The snake enters room 1.\n    The snake enters room 2.\n    The snake enters room 3.\n    The snake enters room 4.\n    The snake exits room 4.\n    The snake exits room 3.\n    The snake exits room 2.\n    The snake exits room 1.\n    The snake exits room 0.\n\nThe snake cannot exit any room.\n'''\n\n'''\nTest case #2:\n\nThe second test case is as follows:\n\nThe snake enters room 0.\nThe snake enters room 1.\nThe snake enters room 2.\nThe snake enters room 3.\nThe snake enters room 4.\nThe snake enters room 5.\nThe snake exits room 5.\nThe snake exits room 4.\nThe snake exits room 3.\nThe snake exits room 2.\nThe snake exits room 1.\nThe snake exits room 0.\n\nThe snake can exit room 0.\nThe snake can exit room 1.\nThe snake can exit room 2.\nThe snake can exit room 3.\nThe snake can exit room 4.\nThe snake can exit room 5.\nThe snake can exit room 2.\nThe snake can exit room 3.\nThe snake can exit room 1.\nThe snake can exit room 0.\n'''\n\n'''\nTest case #3:\n\nThe third test case is as follows:\n\nThe snake enters room 0.\nThe snake enters room 1.\nThe snake enters room 2.\nThe snake enters room 3.\nThe snake enters room 4.\nThe snake enters room 5.\nThe snake enters room 6.\nThe snake exits room 6.\nThe snake exits room 5.\nThe snake exits room 4.\nThe snake exits room 3.\nThe snake exits room 2.\nThe snake exits room 1.\nThe snake exits room 0.\n\nThe snake cannot exit any room.\n'''\n\n'''\nTest case #4:\n\nThe fourth test case is as follows:\n\nThe snake enters room 0.\nThe snake enters room 1.\nThe snake enters room 2.\nThe snake enters room 3.\nThe snake enters room 4.\nThe snake enters room 5.\nThe snake enters room 6.\nThe snake enters room 7.\nThe snake exits room 7.\nThe snake exits room 6.\nThe snake exits room 5.\nThe snake exits room 4.\nThe snake exits room 3.\nThe snake exits room 2.\nThe snake exits room 1.\nThe snake exits room 0.\n\nThe snake can exit room 0.\nThe snake can exit room 1.\nThe snake can exit room 2.\nThe snake can exit room 3.\nThe snake can exit room 4.\nThe snake can exit room 5.\nThe snake can exit room 6.\nThe snake can exit room 7.\nThe snake can exit room 2.\nThe snake can exit room 3.\nThe snake can exit room 4.\nThe snake can exit room 5.\nThe snake can exit room 6.\nThe snake can exit room 7.\n\n'''\n\n'''\nTest case #5:\n\nThe fifth test case is as follows:\n\nThe snake enters room 0.\nThe snake enters room 1.\nThe snake enters room 2.\nThe snake enters room 3.\nThe snake enters room 4.\nThe snake enters room 5.\nThe snake enters room 6.\nThe snake enters room 7.\nThe snake enters room 8.\nThe snake exits room 8.\nThe snake exits room 7.\nThe snake exits room 6.\nThe snake exits room 5.\nThe snake exits room 4.\nThe snake exits room 3.\nThe snake exits room 2.\nThe snake exits room 1.\nThe snake exits room 0.\n\nThe snake cannot exit any room.\n'''\n\n'''\nTest case #6:\n\nThe sixth test case is as follows:\n\nThe snake enters room 0.\nThe snake enters room 1.\nThe snake enters room 2.\nThe snake enters room 3.\nThe snake enters room 4.\nThe snake enters room 5.\nThe snake enters room 6.\nThe snake enters room 7.\nThe snake enters room 8.\nThe snake enters room 9.\nThe snake exits room 9.\nThe snake exits room 8.\nThe snake exits room 7.\nThe snake exits room 6.\nThe snake exits room 5.\nThe snake exits room 4.\nThe snake exits room 3.\nThe snake exits room 2.\nThe snake exits room 1.\nThe snake exits room 0.\n\nThe snake can exit room 0.\nThe snake can exit room 1.\nThe snake can exit room 2.\nThe snake can exit room 3.\nThe snake can exit room 4.\nThe snake can exit room 5.\nThe snake can exit room 6.\nThe snake can exit room 7.\nThe snake can exit room 8.\nThe snake can exit room 9.\nThe snake can exit room 2.\nThe snake can exit room 3.\nThe snake can exit room 4.\nThe snake can exit room 5.\nThe snake can exit room 6.\nThe snake can exit room 7.\nThe snake can exit room 8.\nThe snake can exit room 9.\nThe snake cannot exit any room.\n'''\n\n'''\nTest case #7:\n\nThe seventh test case is as follows:\n\nThe snake enters room 0.\nThe snake enters room 1.\nThe snake enters room 2.\nThe snake enters room 3.\nThe snake enters room 4.\nThe snake enters room 5.\nThe snake enters room 6.\nThe snake enters room 7.\nThe snake enters room 8.\nThe snake enters room 9.\nThe snake enters room 10.\nThe snake exits room 10.\nThe snake exits room 9.\nThe snake exits room 8.\nThe snake exits room 7.\nThe snake exits room 6.\nThe snake exits room 5.\nThe snake exits room 4.\nThe snake exits room 3.\nThe snake exits room 2.\nThe snake exits room 1."
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == '5'\n\nassert solution('''4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\n''') == '3'"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n5\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '5'\nassert solution('''4\n5\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '0'\nassert solution('''4\n5\n-><-\n5\n>>>>>\n3\n<--\n2\n<>''') == '0'\n"
    },
    {
        "number": 3830,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '5'\nassert solution(input()) == '0'\n\"\"\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '16'\nassert solution('3') == '9 9 10'\nassert solution('4') == '202'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\nassert solution('3') == '202'\nassert solution('4') == '101 101 101 101'"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1\\n100 100') == '202'\nassert solution('3\\n4 5\\n4 5\\n4 10') == '9 9 10'\nassert solution('5\\n1 100\\n100 1\\n100 1\\n100 1') == '101 101 101 101'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n3\\n4\\n') == '4\\n3\\n4\\n', \"3rd example\"\nassert solution('5\\n10\\n1\\n10\\n1\\n') == '12\\n11\\n11\\n11\\n11\\n', \"5th example\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\n1\n1\n\"\"\") == \"202\"\nassert solution(\"\"\"\n3\n2 1\n1 2\n\"\"\") == \"9 9 10\"\nassert solution(\"\"\"\n2\n2 3\n3 2\n\"\"\") == \"101 101 101 101\"\nassert solution(\"\"\"\n2\n5 5\n2 5\n\"\"\") == \"-1\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"202\""
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5') == '16'\nassert solution('6') == '202'\nassert solution('3') == '101 101 101 101'\nassert solution('4') == '101 101 101 101'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\n4 5\n4 5\n4 10\n''') == '16', \"First\"\n\nassert solution('''\n3\n1 100\n100 1\n1 100\n100 1\n''') == '101 101 101 101', \"Second\"\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '16'\nassert solution('4') == '9 9 10'\n"
    },
    {
        "number": 3831,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2\n2 1\n2 1\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n3\n2 1\n100 100\n1 1\n\"\"\") == \"2 1\"\n\nassert solution(\"\"\"\n4\n4 1\n100 100\n1 1\n1 100\n\n\"\"\") == \"4 1\"\n\nassert solution(\"\"\"\n2\n3 3\n1 1\n1 1\n\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3\n3 3\n1 1\n1 1\n\n\"\"\") == \"3\""
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n1\n1\n1\n''') == '1 2 2'\n\nassert solution('''\n3\n1 2 3\n''') == '0 2'\n\nassert solution('''\n5\n1 2 3 2 2\n''') == '0 1 3'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 1 1 1\\n\") == \"1 2 2\"\nassert solution(\"3\\n1 2 3\\n\") == \"0 1 3\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n1 1 1 1 1\n''') == '1 2 2 \n\nassert solution('''3\n1 2 3\n''') == '0 2 \n\nassert solution('''5\n1 2 3 2 2\n''') == '0 1 3 \n\nassert solution('''5\n1 2 3 2 2\n''') == '1 2 3 \n\nassert solution('''5\n1 2 3 2 2\n''') == '1 2 3 \n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1 2 2'\nassert solution('3\\n1 2 3\\n') == '0 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 3 2 2\n''') == '0 2'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 3 2 2''') == '1 2 3'\nassert solution('''3\n1 2 3''') == '0 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n1 1 1 1 1\n''') == '1 2 2'\n\nassert solution('''5\n1 2 3 2 2\n''') == '0 1 3'\n\nassert solution('''8\n1 2 1 2 3 2 2\n''') == '0 2'\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1 2 3 2 2\"\nassert solution(\"3\") == \"0 2\"\nassert solution(\"5\") == \"0 1 3\"\n"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n1 1 1 1 1\\n') == '1 2 2'\nassert solution('3\\n1 2 3\\n') == '0 1 3'\nassert solution('5\\n1 2 3 2 2\\n') == '0 1 3'"
    },
    {
        "number": 3832,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1 2 3 2 2\"\nassert solution(\"3\") == \"0 1 3\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''101101''') == '110110'\nassert solution('''10010110''') == '01100011'\nassert solution('''10''') == '01'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"101101\"\n) == \"110110\"\nassert solution(\n    \"10010110\"\n) == \"01100011\"\nassert solution(\n    \"10\"\n) == \"01\"\nassert solution(\n    \"1\"\n) == \"0\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '110110'\nassert solution(input()) == '01'\nassert solution(input()) == '0'"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"10010110\") == \"01100011\"\nassert solution(\"100011\") == \"01\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"011110011\"\nassert solution(input()) == \"011000101\"\nassert solution(input()) == \"011000101\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10101\n110''') == '110110'\n\nassert solution('''10010110\n100011''') == '01100011'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(stdin) == \"110001\"\nassert solution(stdin) == \"01001\"\nassert solution(stdin) == \"1100110\"\n\n'''"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == '1'\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"11001\"\nassert solution(input()) == \"100011\"\nassert solution(input()) == \"01\"\n\n\"\"\"\n"
    },
    {
        "number": 3833,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"10010110\"\n    \"100011\"\n    ) == \"01\"\n\nassert solution(\n    \"10\"\n    \"11100\"\n    ) == \"01\"\n\nassert solution(\n    \"10\"\n    \"110\"\n    ) == \"11\"\n\"\"\"\n\nimport collections\n\nstdin = input()\n\nstdin = stdin.replace('0', '')\nstdin = stdin.replace('1', '')\n\nstdin = collections.deque(stdin)\n\ns = stdin.popleft()\n\nres = ''\n\nwhile True:\n    if s == '1':\n        if stdin[0] == '1':\n            stdin.popleft()\n            continue\n        else:\n            res += '0'\n            break\n    elif s == '0':\n        if stdin[0] == '0':\n            stdin.popleft()\n            continue\n        else:\n            res += '1'\n            break\n    else:\n        break\n\nprint(res)\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('2 2 0') == '-1'\nassert solution('0 0 2') == '2'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\nassert solution(\"5 5 5\") == \"-1\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '-1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('5 5 2') == '-1'\nassert solution('3 4 1') == '-1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5 2\") == \"1\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'\nassert solution('3 4 1') == '-1'\nassert solution('5 5 2') == '-1'"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(sys.stdin.read()) == '1'\n"
    },
    {
        "number": 3834,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 5 2') == '1'\nassert solution('3 4 1') == '0'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '9999 10000 9998'\nassert solution() == '1 2 3 4 5'\nassert solution() == '9999 10000 9998'\nassert solution() == '9999 1000 9998'\nassert solution() == '9999 1000 9998'"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2\"\nassert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3') == '2 2 3 1 2'\nassert solution('4') == '2 2 3 1 2'\nassert solution('5') == '2 2 3 1 2'\nassert solution('6') == '2 2 3 1 2'\nassert solution('7') == '2 2 3 1 2'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4') == '2 3 4'\nassert solution('2\\n2\\n4\\n3') == '3 4'\nassert solution('2\\n3\\n4\\n2') == '2 3 4'\nassert solution('2\\n4\\n3\\n2') == '2 4 3'\nassert solution('2\\n4\\n3\\n2') == '2 3 4'\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"2 2 3 1 2\"\nassert solution(\"3\") == \"2 2 3 1 2\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2'\nassert solution('''3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\nInput\n2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(s) == stdout_example\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n\"\"\") == \"2 2 3 1 2\"\nassert solution(\"\"\"\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n\"\"\") == \"9999 10000 9998\""
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2 \"\nassert solution('''3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == \"9999 10000 9998\"\nassert solution('''4\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == \"2 2 3 1 2 \"\nassert solution('''2\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == \"9999 10000 9998\"\n"
    },
    {
        "number": 3835,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n''') == '2 2 3 1 2 \n\nassert solution('''\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n''') == '9999 10000 9998'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"5\") == \"0\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(s) == str(22)\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n''') == \"22\"\nassert solution('''\n5\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n''') == \"105\"\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n''') == \"0\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\n''') == '22'\nassert solution('''\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n\n''') == '105'\nassert solution('''\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n\n''') == '105'\nassert solution('''\n3\n00 5000\n00 5000\n00 5000\n\n''') == '0'\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    '6\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n'\n    ) == '22'\n\nassert solution(\n    '5\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n'\n    ) == '105'\n\nassert solution(\n    '3\\n00 5000\\n00 5000\\n00 5000\\n'\n    ) == '0'"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"6\") == \"22\"\nassert solution(\"5\") == \"0\"\nassert solution(\"3\") == \"0\""
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '22'\nassert solution('5\\n11 6\\n10 4\\n01 3\\n00 3\\n00 7\\n00 9\\n') == '103'\nassert solution('6\\n11 19\\n10 22\\n00 18\\n00 29\\n11 29\\n10 28\\n') == '105'\n\n'''"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"22\"\n"
    },
    {
        "number": 3836,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '22'\nassert solution('5') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"NO\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 4 9\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"NO\"\n\n---\n\nIt is the time to start the interview with the best programming students of the world! The world is going to be a perfect place for coding interviews. You are the one who is going to be the lead developer for the entire program.\n\nNow, you're a good candidate to become a well-known programming student! You need to be a good judge of your programming skills, so you need to be good at coding!\n\nIn this task, you have to write the function solution(n, m, s), which should return the solution.\n\nThe function receives three arguments:\n\nThe first argument is the number of bugs in the system,\nThe second argument is the number of students,\nThe third argument is the maximum number of passes the university is ready to give the students.\nThe solution of the problem must be a string with the following format: \"YES\" (for a correct solution) or \"NO\" (for an incorrect solution).\n\nThe string \"YES\" means that the optimal solution is found and the function should return it.\n\nThe string \"NO\" means that the optimal solution isn't found, and the function should return the string \"NO\".\n\nIf there are multiple optimal solutions, you should return one of them.\n\nInput:\n\n2\n4\n9\n\nOutput:\n\nYES\n3 3 2 3\n\nInput:\n\n2\n4\n10\n\nOutput:\n\nNO\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4 9\n1 3 1 2\n2 1 3\n4 3 6''') == 'YES'\nassert solution('''3 4 10\n2 3 1 2\n2 1 3\n4 3 6''') == 'YES'\nassert solution('''3 4 9\n2 3 1 2\n2 1 3\n4 3 6''') == 'YES'\nassert solution('''3 4 10\n1 3 1 2\n2 1 3\n4 3 6''') == 'NO'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 9') == 'YES'\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 4 9') == 'YES'\nassert solution('3 4 10') == 'YES'\nassert solution('3 4 5') == 'NO'"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 4 9') == \"YES\"\nassert solution('3 4 10') == \"YES\"\nassert solution('3 4 9') == \"YES\"\nassert solution('3 4 10') == \"YES\"\nassert solution('3 4 10') == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9\") == \"YES\"\nassert solution(\"3 4 10\") == \"YES\"\nassert solution(\"3 4 9\") == \"YES\"\n"
    },
    {
        "number": 3837,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '3 4 9') == 'YES', \"Case 1\"\nassert solution(\n    '3 4 10') == 'YES', \"Case 2\"\nassert solution(\n    '3 4 9') == 'YES', \"Case 3\"\nassert solution(\n    '3 4 10') == 'YES', \"Case 4\"\nassert solution(\n    '3 4 9') == 'YES', \"Case 5\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n3 4 2 1\n''') == 'NO'\nassert solution('''4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3\n''') == 'YES'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 1') == 'NO'\nassert solution('4 1') == 'NO'\nassert solution('4 1') == 'YES'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\\n3 4 2 1\\n\") == \"YES\"\nassert solution(\"4 1\\n4 3 1 2\\n\") == \"YES\"\nassert solution(\"4 2\\n4 3 1 2\\n\") == \"NO\"\nassert solution(\"4 1\\n4 3 1 2\\n\") == \"YES\"\nassert solution(\"1 2 3 4\\n3 4 2 1\\n\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"4 1\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 1\n4 3 1 2\n3 4 2 1''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n\nInput\n4 1\n4 3 1 2\n3 4 2 1\n\nOutput\nYES\n\nInput\n4 1\n4 3 1 2\n2 1 4 3\n\nOutput\nNO''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n\nInput\n4 1\n4 3 1 2\n2 1 4 3\n\nOutput\nYES''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n\nInput\n4 1\n4 3 1 2\n2 1 4 3\n\nOutput\nNO''') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 1\") == 'YES'\nassert solution(\"4 1\") == 'NO'\nassert solution(\"4 3\") == 'YES'\nassert solution(\"4 3\") == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'YES'"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'YES'\nassert solution('''4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''4 1\n4 3 1 2\n2 1 4 3\n''') == 'NO'\nassert solution('''4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\n"
    },
    {
        "number": 3838,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 1\n2 3 4 1\n1 2 3 4\n''') == 'NO'\n\nassert solution('''\n4 1\n4 3 1 2\n3 4 2 1\n''') == 'YES'\n\nassert solution('''\n4 3\n4 3 1 2\n3 4 2 1\n''') == 'YES'\n\nassert solution('''\n4 2\n4 3 1 2\n2 1 4 3\n''') == 'NO'"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\nassert solution(\"7\") == \"2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\"\n\n'''"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n''') == '1 1\\n3 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 2\\n4 1\\n2 6\\n5 7\\n6 6\\n5 8\\n4 9\\n3 9\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 9\\n1 6\\n0 10\\n1 7\\n4 10\\n3 9\\n2 8\\n1 6\\n0 9\\n1 7\\n4 8\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1 7\\n0 10\\n1 8\\n4 9\\n3 10\\n2 8\\n1"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4\n3 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n''') == '2 1\\n3 1\\n4 1\\n5 2\\n6 6'\n\n'''\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4') == '1 1\\n3 1\\n1 5\\n4 4'\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n5\n1 2\n2 3\n3 4\"\"\") == \"\"\"1 1\n3 1\n4 1\n5 2\"\"\"[1:-1]\n\nassert solution(\"\"\"4\n7\n3 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n\"\"\") == \"\"\"2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n\n\"\"\"[1:-1]\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n\n''') == '1 1\\n3 1\\n1 5\\n4 4\\n'''"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '1 1'\nassert solution('7') == '2 1\\n1 2\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6'"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"1 1\\n3 1\\n1 5\\n4 4\"\n"
    },
    {
        "number": 3839,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7\n5\n4\n3\n2\n1\n0\n5\n4\n3\n2\n1\n0\n4\n3\n2\n1\n0\n5\n4\n3\n2\n1\n0\n4\n3\n2\n1\n0''') == '2 1\\n3 1\\n1 5\\n4 1\\n5 2\\n2 6\\n5 7\\n6 6\\n'''\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '3'\nassert solution('''\n3\n1 2 1\n''') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1\n1\n\n''') == '3'\nassert solution('''3\n1 2 3\n\n''') == '3'\nassert solution('''4\n1 2 3 4\n\n''') == '-1'\nassert solution('''1\n1\n\n''') == '3'\nassert solution('''3\n1 2 3\n\n''') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '-1'\nassert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n1\\n') == '-1'\nassert solution('2\\n1 3 2\\n') == '3'\nassert solution('3\\n1 2 3 4 5\\n') == '4'\nassert solution('4\\n1 2 3 4\\n') == '5'\nassert solution('5\\n1 2 3 4 5\\n') == '5'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n1\n''') == '-1'\nassert solution('''3\n1 2 3\n''') == '3'\nassert solution('''5\n1 2 3 4 5\n''') == '-1'\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\\n1\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"3\""
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"2\") == \"5\"\n"
    },
    {
        "number": 3840,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n') == '3'\nassert solution('3\\n1 2 3\\n') == '3'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"9 6 4\") == \"3\\n2 2 1\"\nassert solution(\"8 9 2\") == \"2\\n3 1\"\nassert solution(\"46 2\") == \"7\\n0 1 0 0 1 1 1\"\nassert solution(\"2018 214\") == \"3\\n92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '92 205 1'"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"1 2 0\"\nassert solution(\"8 5\") == \"1 -4 0 0 -6\"\nassert solution(\"10 5\") == \"5 -10 2 -11\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"100 200\") == \"6 0 0 1 1 1 1\"\nassert solution(\"1836 240\") == \"6 0 0 1 1 1 1 1\"\nassert solution(\"3845 134\") == \"4 0 1 1 1 1 1\"\nassert solution(\"36998 4\") == \"2 1 1 1 1 1\"\nassert solution(\"3 2\") == \"-1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('46 2') == '7'\nassert solution('2018 214') == '92 205 1'\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n3 0 1 0 1 1\") == \"0 1 0 0 1 1 1\\n3 1 2 3 4 4\"\nassert solution(\"46 2\\n\") == \"7\\n92 205 1\""
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"46 2\") == \"7\"\nassert solution(\"2018 214\") == \"92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"92 205 1\"\n"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"7\"\nassert solution(\"2018 214\") == \"92 205 1\"\n\"\"\"\n\nimport sys\nfrom itertools import combinations, product"
    },
    {
        "number": 3841,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n0 4\n\"\"\") == \"3\"\nassert solution(\"\"\"\n0 10\n\"\"\") == \"2\"\nassert solution(\"\"\"\n0 20\n\"\"\") == \"4\"\nassert solution(\"\"\"\n20 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n10 1\n\"\"\") == \"-1\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 20 20\") == \"5.000000000000000\"\nassert solution(\"3 20 20\") == \"6.000000000000000\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(t_test_input_1) == t_test_output_1\nassert solution(t_test_input_2) == t_test_output_2\nassert solution(t_test_input_3) == t_test_output_3\nassert solution(t_test_input_4) == t_test_output_4\nassert solution(t_test_input_5) == t_test_output_5\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n6 2') == '5.000000000000000'\nassert solution('3\\n6 2') == '3.000000000000000'\nassert solution('3\\n6 2') == '3.000000000000000'\n\n'''\n\nimport sys\nimport os\nfrom sys import setrecursionlimit\nsetrecursionlimit(11000)"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 20 20\n6 2\n1 3\n2 6\n''') == '5.000000000000000'\nassert solution('''\n4 1 1\n2 3\n3 2\n2 3\n3 2\n''') == '0.400000000000000'\n'''"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '5.000000000000000'\nassert solution('3 3 3') == '5.000000000000000'\nassert solution('5 4 3') == '2.500000000000001'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 20 20\") == \"5.000000000000000\"\n\nassert solution(\"4 1 1\") == \"0.400000000000000\"\n\"\"\"\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 20 20') == '5.000000000000000'\nassert solution('4 1 1') == '0.400000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '0.400000000000000'\nassert solution('2 2') == '0.400000000000000'\nassert solution('3 3') == '0.400000000000000'\nassert solution('4 4') == '0.400000000000000'\nassert solution('5 5') == '0.400000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.400000000000000'\nassert solution('2 1') == '0.400000000000000'\nassert solution('3 1') == '0.400000000000000'\nassert solution('4 1') == '0.400000000000000'\nassert solution('5 1') == '0.400000000000000'\n"
    },
    {
        "number": 3842,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 20 20\") == \"5.000000000000000\"\nassert solution(\"4 1 1\") == \"0.400000000000000\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2 3\n''') == '4'\nassert solution('''8 2\n''') == '5'\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == '4'\nassert solution(input) == '5'"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"8 2\") == \"5\"\n\n'''\n"
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == \"4\"\nassert solution('8 2') == \"5\""
    },
    {
        "number": 3843,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3') == '4'\nassert solution('8 2') == '5'\n\n\"\"\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'Conan'\nassert solution('2') == 'Agasa'\nassert solution('5') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n4 5 7\n\n2\n1 1''') == 'Agasa'\nassert solution('''2\n1 1\n\n2\n1''') == 'Conan'\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"Conan\"\nassert solution(\"3 2 1\") == \"Agasa\"\nassert solution(\"4 1 2 3\") == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2\\n4 5 7\\n') == \"Conan\"\nassert solution('3\\n1 2 3\\n') == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n4 5 7\\n') == 'Conan', 'Test #1'\nassert solution('2\\n1 1\\n') == 'Agasa', 'Test #2'"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n3\\n\") == \"Conan\"\nassert solution(\"2\\n1\\n3\\n\") == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 1\") == \"Agasa\"\nassert solution(\"3\\n4 5 7\") == \"Conan\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"Conan\"\nassert solution() == \"Agasa\"\n"
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 3 1 5') == \"Agasa\"\nassert solution('5\\n4 3 2 1') == \"Conan\""
    },
    {
        "number": 3844,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n4 5 7\\n\") == \"Conan\"\nassert solution(\"2\\n1 1\\n\") == \"Agasa\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n\") == \"1 2\\n\"\nassert solution(\"2 3\\n\") == \"2 3\\n\"\nassert solution(\"5 5\\n\") == \"5 5\\n\"\n\"\"\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2 3\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3\\n') == '3 3\\n'\nassert solution('1 1\\n') == '2 2\\n'\nassert solution('2 2\\n') == '2 2\\n'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3 3\"\n\nassert solution(\"10 3\") == \"11 12 13 14 15 16 17 18 19 20\"\n\n\n--------------------------------------------------------------------------------\n\n\n6) Create a function called sum_odds that takes a parameter called arr."
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == '##.\\n#..\\n.##'\nassert solution(\"1 2\") == '.#.'\nassert solution(\"1\") == '.#.'\nassert solution(\"3\") == '##.'\nassert solution(\"2\") == '..#'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n\"\n    \"#.#\\n\"\n    \"###\") == \"###\\n##.\\n#.#\\n\", \"First example\"\n\nassert solution(\n    \"2 2\\n\"\n    \"#.#\\n\"\n    \"#.#\") == \"#.\\n##\\n#.#\\n\", \"Second example\"\n\nassert solution(\n    \"4 4\\n\"\n    \"##.\\n##.\\n##.\\n##.\\n##.\\n##.\\n##.\\n##.\\n##.\\n##.\\n#.#\\n\", \"Third example\") == \"###\\n##.\\n#.#\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n#.#\\n\"\n\nassert solution(\n    \"5 5\\n\"\n    \"###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n###\\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3 3\"\nassert solution(\"5 1\") == \"5 1\"\nassert solution(\"4 2\") == \"2 2\"\nassert solution(\"5 2\") == \"4 2\"\nassert solution(\"3 3\") == \"3 3\"\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n\") == \"##.\\n..#\\n#.#\"\nassert solution(\"2 2\\n\") == \"##.\\n..#\\n#.#\"\n\n'''\n\nimport numpy as np"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '3 3'\n"
    },
    {
        "number": 3845,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2 3\n\n''') == '''\n3 3\n##.\n..#\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n+ 1\n- 2\n+ 2\n- 1\n''') == '1 3 5', 'First'\nassert solution('''5\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n''') == '4', 'Second'\nassert solution('''7\n+ 1\n- 2\n- 3\n+ 3\n+ 4\n- 4\n- 5\n+ 5\n- 6\n''') == '2 4 6', 'Third'\nassert solution('''5\n+ 1\n- 2\n- 3\n+ 3\n+ 4\n- 4\n- 5\n+ 5\n- 6\n''') == '4', 'Fourth'\nassert solution('''6\n+ 1\n- 2\n- 3\n+ 3\n+ 4\n- 4\n- 5\n+ 5\n- 6\n+ 7\n- 8\n''') == '5', 'Fifth'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"2 3 5\", 'Wrong answer'\nassert solution(\"5 4\") == \"4 1 3 5\", 'Wrong answer'\nassert solution(\"1 2\") == \"1 2\", 'Wrong answer'\nassert solution(\"3 2\") == \"3 2\", 'Wrong answer'\nassert solution(\"5 4\") == \"0\", 'Wrong answer'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n+ 1\\n- 2\\n- 1\\n\") == \"4\\n1 3 4 5\"\nassert solution(\"3 2\\n+ 1\\n- 2\\n\") == \"1\\n3\"\nassert solution(\"2 4\\n+ 1\\n- 2\\n+ 3\\n- 4\\n\") == \"0\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 4\n+ 1\n+ 2\n- 2\n- 1\n\nOutput\n4\n1 3 4 5 \n''') == '4'\nassert solution('''3 2\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n1\n3 \n''') == '1'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n2 3\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n3 5\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \n''') == '3'\nassert solution('''2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n4 2\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n3 2\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n1\n3 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n2 2\n+ 1\n+ 2\n\nOutput\n0\nInput\n5 3\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n3\n1 2 3 4 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n3 3\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n4 5\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n2 5\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n3 5\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n3 3\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\nInput\n5 2\n+ 1\n- 1\n+ 2\n- 2\n+ 3\n- 3\n+ 4\n- 4\n\nOutput\n0\n''') == '0'\nprint('done')\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"2 4\") == \"0\"\nassert solution(\"5 6\") == \"3\"\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '2 3'\nassert solution('2 4') == '0'\nassert solution('3 5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 4') == '4'\nassert solution('3 2') == '1 3'\n"
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"4\"\nassert solution(\"3 2\") == \"1 2\"\nassert solution(\"2 4\") == \"0\""
    },
    {
        "number": 3846,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n\") == \"4\\n\"\nassert solution(\"3 2\\n\") == \"1 3 5\"\nassert solution(\"2 4\\n\") == \"0\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '2'\nassert solution('3 3') == '4'\nassert solution('5 1') == '1'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"5 1\") == \"0\""
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 3\n1 2 3\n1 2 3\n9\n''') == '4'\nassert solution('''\n5 1\n5 4 2 4 5\n2\n5\n''') == '1'\nassert solution('''\n2\n2\n''') == '0'\nassert solution('''\n4\n1 2 3\n1 2 3\n9\n''') == '0'\nassert solution('''\n4\n1 2 3\n1 2 3\n10\n''') == '4'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"4\"\nassert solution(\"5 1\") == \"1\"\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4\n1 2 3\n1 2 3\n9\n''') == '1'\nassert solution('''5\n5 4 2 4 5\n2\n5\n''') == '1'\nassert solution('''5\n5 4 2 4 5\n2\n5\n''') == '4'\nassert solution('''5\n5 4 2 4 5\n3\n5\n''') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == '4'\nassert solution('5 1') == '1'\nassert solution('5 2') == '0'"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1') == '1'\nassert solution('5 2') == '0'\nassert solution('6 1') == '1'\nassert solution('6 2') == '0'\nassert solution('9') == '4'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 3\n1 2 3\n1 2 3\n9\n''') == '4'\nassert solution('''\n5 1\n5 4 2 4 5\n2\n5\n''') == '1'\nassert solution('''\n6 1\n6 4 2 5 3 7\n2\n4\n''') == '5'\n"
    },
    {
        "number": 3847,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([3,3], [1,2,3,4,5], 9) == '4'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3\\ncba') == 'cbd'\nassert solution('4 4\\nabcd') == 'abda'\nassert solution('7 7\\nabcdabcd') == 'abcd'\nassert solution('1000 1000\\nabcdabcd') == 'NO'\nassert solution('4 4\\nabcabc') == 'NO'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 3\ncba''') == 'NO'\nassert solution('''3 4\ncba''') == 'cbd'\nassert solution('''4 4\nabcd''') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3 3\ncba''') == 'NO'\nassert solution('''3 4\ncba''') == 'cbd'\nassert solution('''4 4\nabcd''') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 3\ncba''') == 'NO'\nassert solution('''3 4\ncba''') == 'abda'\nassert solution('''4 4\nabcd''') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\ncba\n\n2 2\nabc\n\n3 3\ncba\n\n4 4\nabcd\n\n4 4\nabcd\n\n3 3\ncba\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba''') == \"NO\"\nassert solution('''5 5\nabcde\n\n2 2\na\n\n4 4\ncd\n\n5 5\nabcd\n\n6 6\nabc\n\n4 4\ncd\n\n4 4\nabcd\n\n5 5\nabcd\n\n4 4\nabcd\n\n5 5\nabcde\n\n4 4\nabcd\n\n5 5\nabcd\n\n4 4\nabcd''') == \"NO\"\nassert solution('''3 3\ncba\n\n2 2\nabc\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n\n4 4\nabcd\n\n3 3\ncba\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'\nassert solution('8 10') == 'abcd'\nassert solution('4 1') == 'b'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 4') == 'cbd'\nassert solution('4 4') == 'abda'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('4 5 6 7') == '4 5 6 7'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('1 2 3') == 'NO'\nassert solution('2 1 3') == 'NO'\nassert solution('4 4') == 'abda'\n"
    },
    {
        "number": 3848,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 2') == 'NO'\nassert solution('3 3') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('5 5') == 'NO'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 2\\n0101') == 'tokitsukaze'\nassert solution('6 1\\n010101') == 'quailty'\nassert solution('4 1\\n0011') == 'once again'\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) in {'tokitsukaze', 'quailty', 'once again'}\nprint(solution(input))\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"tokitsukaze\"\nassert solution(\"6 1\") == \"once again\"\nassert solution(\"6 5\") == \"tokitsukaze\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == 'quailty'\nassert solution('6 1') == 'tokitsukaze'\nassert solution('6 5') == 'once again'\nassert solution('4 1') == 'once again'\n\n'''\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"tokitsukaze\"\nassert solution(\"6 1\") == \"tokitsukaze\"\nassert solution(\"6 5\") == \"quailty\"\nassert solution(\"4 1\") == \"once again\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"once again\"\nassert solution(input()) == \"tokitsukaze\"\nassert solution(input()) == \"quailty\"\n"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"quailty\"\nassert solution(\"6 1\") == \"once again\"\nassert solution(\"6 5\") == \"tokitsukaze\"\nassert solution(\"4 1\") == \"once again\"\n\n\nfrom collections import deque"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 1') == 'quailty'\nassert solution('4 1') == 'tokitsukaze'\nassert solution('6 5') == 'once again'"
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 1') == 'quailty'\nassert solution('4 1') == 'tokitsukaze'\nassert solution('6 5') == 'once again'\nassert solution('4 5') == 'once again'\nassert solution('4 1') == 'once again'\n\n\"\"\""
    },
    {
        "number": 3849,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2\\n0101') == 'tokitsukaze'\nassert solution('6 1\\n010101') == 'tokitsukaze'\nassert solution('4 1\\n0011') == 'once again'\n\n\"\"\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 4 50\n20 100\n60 10 40 80\n''') == '50'\nassert solution('''\n1 2 10\n11\n15 7\n''') == '7'\nassert solution('''\n3 3 10\n4 10 3\n20 10 5\n''') == '30'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n2 4 50\n20 100\n60 10 40 80\n\"\"\") == \"50\"\nassert solution(\"\"\"\n1 2 10\n11\n15 7\n\"\"\") == \"7\"\nassert solution(\"\"\"\n1 1000000000\n10000000 10000\n10000000 10000\n\"\"\") == \"10000000\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 4 50\\n20 100\\n60 10 40 80') == '50'\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10\\n11\\n15 7\") == \"7\"\nassert solution(\"1 2 10\\n20 100\\n60 10 40 80\") == \"50\""
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 4 50') == '50'\nassert solution('1 2 10') == '7'"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 4 50\") == \"50\"\nassert solution(\"1 2 10\") == \"7\"\n"
    },
    {
        "number": 3850,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 10') == '7'\nassert solution('1 2 10') == '7'\nassert solution('3 3 3') == '0'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"1 6\""
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '1 6'\nassert solution('3 2') == '1 3'\nassert solution('1 10') == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\""
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '1 6'\nassert solution('1 10\\n5 3') == '5 5'\nassert solution('1 10\\n0 0') == '1 6'\nassert solution('2 3\\n1 1') == '1 6'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == '1 6'\nassert solution(test_input_2) == '5 5'\nassert solution(test_input_3) == '5 5'"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n1 1\\n\") == \"1 6\"\n\nassert solution(\n    \"3 2\\n0 0\\n\") == \"1 3\"\n\nprint(solution(\n    \"1 10\\n5 3\\n\"))\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\n0 0\n\"\"\") == \"1 6\"\nassert solution(\"\"\"\n3 2\n1 2\n\"\"\") == \"1 3\"\nassert solution(\"\"\"\n1 10\n5 3\n\"\"\") == \"5 5\"\n\n\n\"\"\"\n--- Part Two ---\n\nNow, when you're ready to go, you need to go to the Golden Circle. As before, you have $n$ fast food restaurants on the circle and their distances are all the same, but they are stored in a different order.\n\nSergey always wants to travel to the nearest fast food restaurant as fast as possible. Fortunately, he can do so without having to wait for any time. His route has a special bonus for each fast food restaurant he visits, as noted in the second part of the description.\n\nThe special bonus of each fast food restaurant is equal to the distance to the nearest fast food restaurant, minus 1. If he visits the 1st fast food restaurant, he's off to the great distance, so the 1st fast food restaurant gets a bonus of $1$ more than the nearest fast food restaurant (and the nearest fast food restaurant gets a bonus of $0$).\n\nWhat is the total special bonus to each fast food restaurant?\n\n\"\"\"\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '1 6'\nassert solution(test_input_2) == '5 5'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\n1 1\n''') == '1 6'\n\nassert solution('''\n3 2\n0 0\n''') == '1 3'\n"
    },
    {
        "number": 3851,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1 6\"\nassert solution(\"3 2\") == \"1 3\"\nassert solution(\"1 10\") == \"5 5\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n-2 5 -1') == '2 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n-2 5 -1\\n') == '2 3'\nassert solution('5\\n-2 5 -1 3 4\\n') == '2 3 3 4 4'\nassert solution('10\\n-2 5 -1 3 4\\n') == '3 3 3 4 4'\nassert solution('50\\n-2 5 -1 3 4\\n') == '4 4 4 4 4'"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3\\n-2 5 -1') == '2 3'\n\"\"\""
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-2 5 -1\\n\") == \"2 3\"\nassert solution(\"4\\n-4 2 -4 -1\\n\") == \"2 3\"\nassert solution(\"5\\n-5 2 -5 -1\\n\") == \"2 3\"\nassert solution(\"6\\n-5 2 -5 -1\\n\") == \"2 3\"\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '2 4'\nassert solution('5') == '2 3 5'"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n-2 5 -1') == '2 3'\nassert solution('5\\n-2 5 3') == '2 3'\nassert solution('5\\n-2 5 3') == '2 3'\nassert solution('5\\n-2 5 3') == '2 3'\nassert solution('5\\n-2 5 3') == '2 3'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n-2 5 -1''') == '2'\nassert solution('''5\n-2 5 -1''') == '3'\nassert solution('''10\n-2 -2 -2 -2 -2 -2 -2 -2 -2 -2''') == '1'\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n    3\n    -2 5 -1\n    ''') == '2 3'\n\n''')\n"
    },
    {
        "number": 3852,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n0 3\n1 5\n2 9\n''') == \"3\"\nassert solution('''\n1\n0 4\n''') == \"1\"\nassert solution('''\n2\n1 10\n2 2\n''') == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2\\n0 3\\n1 5\\n') == '3'\nassert solution('1\\n0 4\\n') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n0 3\\n1 5\\n') == '3'\nassert solution('1\\n0 4\\n') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 1\\n1 10\") == \"3\"\nassert solution(\"1\\n0 4\\n1 2\") == \"1\"\nassert solution(\"2\\n1 10\\n2 2\") == \"3\""
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n0 3\\n1 5') == '3'\nassert solution('2\\n1 10\\n2 2') == '3'\nassert solution('2\\n1 10\\n2 2') == '3'\n'''\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([4, 4]) == '3'\nassert solution([5, 10]) == '1'\nassert solution([4, 5]) == '3'\nassert solution([5, 4]) == '1'\nassert solution([2, 3]) == '3'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 3\\n1 5\\n') == '3'\nassert solution('2\\n1 10\\n2 2\\n') == '3'\nassert solution('3\\n1 10\\n2 2\\n') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 4\n1 5\n''') == '3'\nassert solution('''\n2\n1 2\n2 1\n''') == '1'\n"
    },
    {
        "number": 3853,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3') == '6'\nassert solution('4\\n5\\n4\\n3') == '18'\nassert solution('8\\n4\\n5\\n4\\n3') == '0'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6 18\n5 6 1 10 12 2\n''') == '16'\nassert solution('''3 50\n25 25 50\n''') == '3'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('6 18') == '16'\nassert solution('3 50') == '3 0 25 50'"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''6 18\n5 6 1 10 12 2\n''') == '16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 '\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 6 1 10 12 2''') == '16'\nassert solution('''5 50\n25 25 50''') == '3'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 6 10') == '0 1 2 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999\n\n'''\n\nfrom collections import deque\nimport sys\nsys.stdin = open(\"input.txt\")\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())\nc = list(map(int, input().split()))\n\nc = deque(c)\n\nq = deque()\nq.append((c,"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6 18\\n5 6 1 10 12 2') == '16'\nassert solution('3 50\\n25 25 50') == '3'\nassert solution('10 10 10 10 10') == '0'\nassert solution('2 4 5 6 7 8 9 10') == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 50\") == \"0 25 50\"\n"
    },
    {
        "number": 3854,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 6 1 10 12 2\n''') == '16'\n\nassert solution('''\n6 18\n5 6 1 10 12 2\n''') == '0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \n\nassert solution('''\n3 50\n25 25 50\n''') == '3'\n\nassert solution('''\n5 100\n5 20 40 50\n''') == '16'\n\nassert solution('''\n3 50\n25 20 40\n''') == '0 1 2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"3\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\"\n\nclass Solution:\n    def solution(self, n):\n        if n <= 1:\n            return 1\n        res = 0\n        while n > 1:\n            n //= 5\n            res += n\n        return res\n\nassert Solution().solution(6) == 3\nassert Solution().solution(2) == 2\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3\"\nassert solution() == \"2\"\n\n'''\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\nassert solution('2') == '2'\n'''\nimport math\nn = int(input())\ncount = 0\nwhile True:\n    if n > 0 and n % 5 == 0:\n        n = n // 5\n        count += 1\n    elif n > 0 and n % 2 == 0:\n        n = n // 2\n        count += 1\n    elif n > 0 and n % 3 == 0:\n        n = n // 3\n        count += 1\n    else:\n        break\nprint(count)\n\n'''\n\nfor i in range(n, 1, -1):\n    if i % 5 == 0:\n        n = n // 5\n        count += 1\n    elif i % 2 == 0:\n        n = n // 2\n        count += 1\n    elif i % 3 == 0:\n        n = n // 3\n        count += 1\n    else:\n        break\n\nprint(count)\n\n'''\n\n'''"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\\n\") == \"3\\n\"\nassert solution(\"2\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3855,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == '180'\nassert solution('3') == '21'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"180\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"20\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5 1\n3 2\n4 3\n\"\"\") == \"180\"\n\nassert solution(\"\"\"\n2 2\n5 4\n\"\"\") == \"50\"\n\nassert solution(\"\"\"\n1\n10 1\n\"\"\") == \"10\"\n\nassert solution(\"\"\"\n1\n20 2\n\"\"\") == \"20\"\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1\n5 1\n6 2\n7 4\n8 3\n9 2''') == '180'\nassert solution('''1\n10 1\n20 2\n30 3\n''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3\n''') == '21'\nassert solution('''3\n1 1\n2 2\n3 4\n''') == '50'\nassert solution('''2\n5 10\n6 2\n7 4\n''') == '50'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3\n10 1\n20 2\n30 3\n\n''') == '180'\nassert solution('''3\n3 1\n2 2\n4 3\n\n''') == '21'\n"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"180\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n10 1\\n20 2\\n30 3\\n') == '180'\nassert solution('2\\n1 1\\n2 2\\n3 3\\n') == '21'\nassert solution('3\\n1 1\\n2 2\\n3 3\\n') == '50'\nassert solution('4\\n1 1\\n2 2\\n3 3\\n') == '100'"
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"180\""
    },
    {
        "number": 3856,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"180\"\nassert solution(\"2\") == \"21\"\nassert solution(\"3\") == \"180\"\nassert solution(\"1\") == \"50\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n0 1 2 3 4\") == \"4\"\nassert solution(\"9\\n0 1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == '2'\nassert solution(\"5\") == '4'\nassert solution(\"9\") == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('9') == '3'"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\nassert solution('5') == '4'\nassert solution('9') == '3'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\""
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0 1 2 3') == '1'\nassert solution('6\\n0 1 2 3 4 5') == '2'\nassert solution('8\\n0 0 0 0 0 0 0 0') == '4'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"3\"\nassert solution(\"0 0 10\") == \"2\"\nassert solution(\"0 1 2 3 4\") == \"1\"\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '1'\n"
    },
    {
        "number": 3857,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0 10\\n\") == \"2\"\nassert solution(\"5\\n0 1 2 3 4\\n\") == \"1\"\nassert solution(\"4\\n0 0 0 0\\n\") == \"4\"\nassert solution(\"9\\n0 1 0 2 0 1 1 2 10\\n\") == \"3\""
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '5'\nassert solution('3') == '1'\nassert solution('2') == '0'\n\ns = set()\nfor _ in range(int(input())):\n    x,y = list(map(int,input().split()))\n    s.add((x,y))"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\\n\") == \"5\""
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 0\\n0 1\\n1 0\\n1 1\") == \"5\"\nassert solution(\"5\\n0 0\\n0 1\\n1 0\\n1 1\") == \"9\"\nassert solution(\"5\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\") == \"4\""
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1\\n') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0\\n0 1\\n1 0') == \"5\"\nassert solution('3\\n0 0\\n0 1\\n1 0') == \"5\""
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\\n0 0\\n1 0\\n1 1\\n\") == '5'\nassert solution(\"3\\n0 0\\n0 0\\n0 0\\n\") == '2'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '4'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\n"
    },
    {
        "number": 3858,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n0 0\\n0 1\\n1 0\\n1 1') == '5'\nassert solution('8\\n0 0\\n0 1\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\\n0 1') == '9'\nassert solution('16\\n0 0\\n0 1\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\\n0 1\\n0 0\\n0 1\\n0 0\\n0 1\\n1 0\\n1 1\\n0 0\\n0 1') == '17'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2') == '4'\nassert solution('4\\nW 2\\nB 3\\nW 1\\nW 3\\nW 1') == '6'\nassert solution('10\\nW 1\\nB 2\\nW 3\\nW 2\\nB 2\\nW 1\\nB 2\\nW 2\\nB 1\\nW 3\\nW 2') == '8'\nassert solution('1\\nW 1\\nW 3\\nB 3\\nB 2\\nB 2\\nB 1\\nW 3\\nW 1\\nW 2\\nW 1') == '0'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2') == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '4'\n\"\"\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\") == \"4\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"4\"\nassert solution(\"3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n\") == \"5\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\nB 1\\nW 2\\nB 3\\nW 1\\nW 3\\nB 2\\n') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"1\") == \"1\", \"One\"\nassert solution(\"2\") == \"2\", \"Two\"\nassert solution(\"3\") == \"4\", \"Three\"\nassert solution(\"4\") == \"8\", \"Four\"\n"
    },
    {
        "number": 3859,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('4') == '5'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5\\n6\\n3\\n') == '4'\nassert solution('5\\n3\\n5\\n') == '4'\n\n\"\"\""
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(5,6,3) == 4\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n3\n''') == '4'\nassert solution('''4\n3\n5\n''') == '3'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n6\n3''') == '4'\nassert solution('''5\n3\n5''') == '4'\nassert solution('''5\n3\n6''') == '4'"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(5) == 4\nassert solution(5) == 4\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5\\n6\\n3\") == \"4\"\nassert solution(\"5\\n3\\n5\") == \"4\"\n"
    },
    {
        "number": 3860,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('5') == '4'\nassert solution('6') == '4'\nassert solution('6') == '4'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('8') == '32'\n\nstdin = input()\n\nfor _ in range(int(stdin)):\n    print(solution(stdin))"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '2') == '2', \"Wrong answer with input '2'\"\nassert solution(\n    '4') == '4', \"Wrong answer with input '4'\"\nassert solution(\n    '8') == '32', \"Wrong answer with input '8'\"\nassert solution(\n    '16') == '64', \"Wrong answer with input '16'\"\nassert solution(\n    '32') == '32', \"Wrong answer with input '32'\""
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 2') == '2'\nassert solution('8 1 2 4 8 16 32 64 576') == '32'"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"8 1 2 4 8 16 32 64 576\") == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2 4 8 16 32 64 576') == '32'\nassert solution('2 3 4 8') == '8'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution([2]) == 2\nassert solution([4, 2]) == 2\nassert solution([8, 1, 2, 4, 8, 16, 32, 64, 576]) == 32"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n4 2\n''') == '2'\nassert solution('''8\n1 2 4 8 16 32 64 576\n''') == '32'\nassert solution('''4\n2 2 2 2\n''') == '4'\nassert solution('''6\n3 7 9 11 13\n''') == '11'\nassert solution('''5\n-3 4 5\n''') == '-3'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('8\\n1 2 4 8 16 32 64 576') == '32'\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"4 2\") == \"4\"\nassert solution(\"8 2\") == \"32\"\n"
    },
    {
        "number": 3861,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"8\") == \"32\"\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven a list of non-negative integers, arrange them such that they form the largest number.\n\nExample 1:\n\nInput: [10, 2]\nOutput: \"210\"\n\nExample 2:\n\nInput: [3, 30, 34, 5, 9]\nOutput: \"9534330\"\n\nNote: The result may be very large, so you need to return a string instead of an integer.\n\n\"\"\"\n\n\nimport math\n\nfrom typing import List\n\n\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums.sort(key=lambda x: str(x), reverse=True)\n        return str(int(\"\".join(map(str, nums))))"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"50 2\") == \"3\"\nassert solution(\"50 50\") == \"3\"\nassert solution(\"10 5\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''400 4\n100 300 450 500\n''') == '2'\n\nassert solution('''50 2\n100 25\n''') == '3'\n\n\n'''\n\nimport math"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''400 4\n100 300 450 500''') == '2'\nassert solution('''50 2\n100 25''') == '3'\nassert solution('''300 4\n100 300 450 500''') == '4'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"2\"\nassert solution(\"100 2\") == \"3\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"100 100\") == \"4\"\nassert solution(\"100 400\") == \"3\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3\\n10 30 50 60\\n20 50') == '5'\nassert solution('5 3\\n100 300 450 500\\n100 25\\n20 50') == '3'"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''400 4\n100 300 450 500\n\n''') == '2'\n\nassert solution('''50 2\n100 25\n\n''') == '3'\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n100 250\\n50 25\") == \"2\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('4\\n3 4 5') == '3'\nprint('Tests passed')\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"10 3\") == \"5\"\nassert solution(\"1000 2\") == \"100\"\nassert solution(\"1000 4\") == \"1\"\n"
    },
    {
        "number": 3862,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''400 4\n100 300 450 500\n''') == '2'\n\nassert solution('''50 2\n100 25\n''') == '3'"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"4 2\"\n) == \"6\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"6\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"5 3\") == \"3\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == '6'\nassert solution('4 2') == '12'\n\"\"\"\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 2\n1 2 3 4 5''') == '1'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 2') == '6'\n\"\"\""
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 2') == '6'\nassert solution('4 2') == '10'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 2') == '6'\n"
    },
    {
        "number": 3863,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '6'"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"499122178\"\nassert solution(\"3\") == \"499122178\"\nassert solution(\"4\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3\n''') == '499122178'\nassert solution('''3\n''') == '499122178'\nassert solution('''2\n''') == '2991458903'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"4\") == \"499122178\"\nassert solution(\"6\") == \"499122178\"\n\n---"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"499122178\"\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '3/2'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"499122178\"\nassert solution(\"2\") == \"499122178\"\nassert solution(\"3\") == \"499122178\""
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '499122178'\nassert solution('3') == '499122178'\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == \"499122178\"\nassert solution('4') == \"499122178\"\nassert solution('5') == \"499122178\""
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '499122178'\n\n--\n"
    },
    {
        "number": 3864,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"499122178\"\nassert solution(\"2\") == \"499122178\"\nassert solution(\"1\") == \"499122178\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '-1'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '6'\nassert solution('8') == '6669'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"6669\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"3\") == \"6669\""
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"-1\"\nassert solution(\"10\") == \"6669\"\nassert solution(\"-1\") == \"6\"\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '6'\nassert solution('10') == '6669'\nassert solution('12') == '66'\nassert solution('17') == '-1'\nassert solution('20') == '-1'\n"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n''') == '6'\nassert solution('''\n3\n''') == '6669'\nassert solution('''\n10\n''') == -1"
    },
    {
        "number": 3865,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '6'\nassert solution('3') == '6669'\nassert solution('10') == '-1'\nassert solution('100') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '-1'\n\nassert solution('5') == '1 4 3 2 0'\n\nassert solution('0') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1 4 3 2 0'\nassert solution('2') == '-1'\nassert solution('10') == '-1'"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == \"1 4 3 2 0\"\nassert solution('2') == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '1 0 2 4 3'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '-1'\nprint(solution('2'))"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1 4 3 2 0\"\nassert solution(\"3\") == \"-1\""
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '1 4 3 2 0'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"-1\"\nassert solution(\"5\") == \"1 4 3 2 0\"\nassert solution(\"2\") == \"3 1 4 2 0\"\n"
    },
    {
        "number": 3866,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '-1'\nassert solution('5') == '1 4 3 2 0'"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\n\n\n'''\n\nimport sys"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4') == 'No'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 4 3') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == \"Yes\", \"First\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"No\", \"Second\"\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == \"Yes\", \"Third\"\n''')"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'No'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n1 2 3 4\n''') == 'Yes'\n''')\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"No\"\nassert solution(\"10\\n1 2\\n1 3\\n2 4\\n1 2 3 4 5 6\\n1 7 8 9 10\") == \"Yes\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n') == 'Yes'\nassert solution('4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\\n') == 'No'\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\"\n"
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n1 2\\n1 3\\n2 4\\n1 2 4 3\") == \"No\""
    },
    {
        "number": 3867,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n2\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'Yes'\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 3 4\n''') == 'No'\nassert solution('''\n4\n1 2\n1 3\n2 4\n1 2 4 3\n''') == 'No'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_) == \"24500\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\nassert solution(\"2 100000 5\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 6 5\\n1 1 0 5000\\n3 2 0 5500\\n2 2 0 6000\\n15 0 2 9000\\n9 0 1 7000\\n8 0 2 6500\") == \"24500\"\nassert solution(\"2 4 5\\n1 2 0 5000\\n2 1 0 4500\\n2 1 0 3000\\n8 0 1 6000\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 4 5') == '24500'\nassert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n''') == '24500'\nassert solution('''\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n''') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\"\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 6 5\") == \"24500\"\nassert solution(\"2 4 5\") == \"-1\""
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 6 5') == '24500'\nassert solution('2 4 5') == '-1'\n"
    },
    {
        "number": 3868,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    '2 6 5\\n'\n    '1 1 0 5000\\n'\n    '3 2 0 5500\\n'\n    '2 2 0 6000\\n'\n    '15 0 2 9000\\n'\n    '9 0 1 7000\\n'\n    '8 0 2 6500'\n) == '24500', solution(\"2 6 5\\n\"\n                          \"1 2 0 5000\\n\"\n                          \"2 1 0 4500\\n\"\n                          \"2 1 0 3000\\n\"\n                          \"8 0 1 6000\\n\")\nassert solution(\n    '2 4 5\\n'\n    '1 2 0 5000\\n'\n    '2 1 0 4500\\n'\n    '2 1 0 3000\\n'\n    '8 0 1 6000'\n) == '-1', solution(\"2 4 5\\n\"\n                      \"1 2 0 5000\\n\"\n                      \"2 1 0 4500\\n\"\n                      \"2 1 0 3000\\n\"\n                      \"8 0 1 6000\")\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n1 1 45\n\n\"\"\",\n    \"0.828427125\"\n) == \"0.828427125\"\n\nassert solution(\n    \"\"\"\n6 4 30\n\n\"\"\",\n    \"19.668384925\"\n) == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4 45\\n\") == \"0.828427125\"\nassert solution(\"6 4 30\\n\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6 4 30') == '19.668384925'\nassert solution('1 1 45') == '0.828427125'\nassert solution('2 4 6') == '0.5'\n\"\"\""
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 1 45') == '0.828427125'\nassert solution('6 4 30') == '19.668384925'"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 45\\n') == '0.828427125'\nassert solution('6 4 30\\n') == '19.668384925'\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == '0.828427125'\nassert solution(input_data2) == '19.668384925'\n\n'''\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1 45\") == \"0.828427125\"\nassert solution(\"6 4 30\") == \"19.668384925\"\n"
    },
    {
        "number": 3869,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1 45\") == '0.828427125'\nassert solution(\"6 4 30\") == '19.668384925'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n''') == '3000'\nassert solution('''2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"3 4\\nDEF 0\\nATK 0\\n0\\n0\\n1\\n1\\n\") == \"1\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n''') == '3000'\nassert solution('''\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n''') == '1'\nassert solution('''\n3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n''') == '992'\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '3000'\nassert solution('2 4') == '1'"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\n\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == \"993\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"3000\"\nassert solution([\n    \"ATK 10\",\n    \"ATK 100\",\n    \"ATK 1000\",\n    \"1\",\n    \"11\",\n    \"101\",\n    \"1001\",\n    \"1\",\n    \"11\",\n    \"101\",\n    \"1001\"\n]) == \"992\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"2 3\") == \"3000\"\nassert solution(\"2 4\") == \"992\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"3000\"\nassert solution(\"3 4\") == \"992\"\nassert solution(\"2 4\") == \"1\""
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\n\n3 4\nDEF 0\nATK 0\n0\n0\n1\n1\n\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '3000', \"First\"\nassert solution('''\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1', \"Second\"\nassert solution('''\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\n''') == '1', \"Third\"\n''') == '993', \"Third\"\n"
    },
    {
        "number": 3870,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"2 3\\nATK 2000\\nDEF 1700\\n2500\\n2500\\n2500\") == \"3000\"\nassert solution(\"2 4\\nDEF 0\\nATK 0\\n0\\n1\") == \"1\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_string) == \"6\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input) == \"6\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '6'\nassert solution('''2 2\n1 2\n0 0\n2 1 -100 -100\n''') == '2'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n''') == '62'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n''') == '8'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 4\\n4 3 2 1 1\\n0 2 6 7 4') == '6'\nassert solution('10 10\\n2 2\\n1 2\\n5 5\\n10 8\\n2 8\\n3 2\\n4 2\\n1 3\\n7 3\\n6 1\\n2 8\\n5 2\\n4 1\\n5 2\\n3 1\\n6 2\\n4 2\\n1 8\\n2 2\\n8 6\\n3 2\\n4 2\\n2 1\\n1 5\\n8 2\\n2 2\\n6 4\\n2 6\\n3 2\\n3 2\\n2 6\\n4 2\\n6 3\\n1 6\\n2 2\\n2 4\\n4 2\\n3 4\\n4 2\\n1 4\\n1 1\\n4 1\\n1 2\\n2 1\\n2 3\\n1 4\\n2 4\\n3 4\\n3 4\\n3 4\\n1 4\\n4 1\\n1 1\\n4 2\\n2 3\\n2 3\\n1 4\\n1 1\\n4 2\\n2 3\\n2 3\\n1 4\\n4 3\\n1 1\\n1 1\\n3 2\\n4 2\\n4 2\\n4 2\\n2 3\\n4 2\\n3 2\\n3 2\\n3 2\\n3 2\\n1 4\\n3 2\\n1 4\\n4 3\\n1 4\\n2 4\\n2 4\\n2 4\\n3 2\\n4 4\\n2 4\\n4 4\\n2 4\\n4 4\\n3 4\\n4 4\\n2 4\\n4 4\\n1 4\\n2 2\\n1 2\\n3 2\\n1 2\\n1 2\\n2 4\\n1 2\\n1 2\\n2 2\\n1 4\\n2 2\\n2 2\\n3 4\\n4 2\\n1 1\\n1 2\\n2 2\\n3 4\\n3 4\\n4 3\\n4 4\\n2 2\\n4 2\\n3 4\\n4 2\\n1 1\\n3 2\\n1 2\\n4 2\\n4 2\\n4 2\\n4 2\\n2 3\\n2 4\\n3 2\\n3 2\\n1 2\\n1 2\\n3 2\\n4 2\\n4 2\\n4 2\\n3 2\\n3 2\\n4 2\\n4 2\\n3 2\\n4 2\\n1 2\\n1 2\\n4 2\\n4 2\\n1 2\\n1 2\\n4 2\\n3 4\\n4 2\\n3 4\\n2 4\\n1 2\\n2 4\\n2 2\\n2 4\\n4 2\\n3 2\\n4 2\\n4 2\\n4 2\\n1 2\\n3 4\\n1 4\\n2 4\\n3 4\\n4 3\\n1 2\\n1 2\\n1 2\\n1 2\\n1 4\\n1 2\\n1 4\\n1 4\\n1 4\\n1 2\\n2 4\\n2 4\\n1 4\\n1 2\\n2 4\\n2 4\\n3 4\\n3 4\\n1 4\\n1 2\\n2 4\\n2 4\\n3 4\\n3 4\\n3 4\\n3 4\\n1 4\\n1 2\\n1 4\\n3 2\\n3 2\\n1 4\\n1 4\\n2 4\\n1 4\\n3 2\\n1 4\\n2 4\\n2 4\\n2 4\\n3 4\\n3 4\\n1 4\\n1 4\\n1 4\\n2 4\\n2 4\\n1 4\\n4 2\\n1 4\\n3 2\\n3 2\\n1 2\\n1 2\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n2 4\\n1 2\\n1 2\\n3 4\\n3 4\\n2 4\\n2 4\\n2 4\\n1 2\\n1 2\\n3 4\\n3 4\\n3 4\\n3 4\\n4 4\\n2 4\\n4 4\\n2"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 4\n4 3 2 1 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9''') == '6'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n\n2 2\n1 2''') == '2'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n\n3 2\n1 2''') == '2'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n\n5 2\n1 2''') == '2'\nassert solution('''5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n\n5 2\n2 2''') == '2'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"4\"\nassert solution(\"5 4\") == \"6\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 4\\n4 3 1 2 1') == '6'\nassert solution('2 2\\n1 2\\n0 0\\n2 1 -100 -100') == '2'\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"5 4\") == \"6\"\n"
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n4 3 1 2 1\\n1 2 1 2 1\\n1 2 3 4 5 6 7 8 9\") == \"6\"\nassert solution(\"2 2\\n1 2\\n0 0\\n2 1 -100 -100\") == \"2\""
    },
    {
        "number": 3871,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\n2 2\n1 2\n0 0\n2 1 -100 -100''') == '6'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abab\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\naaba\nabaa\n''') == 'YES'\nassert solution('''\naabb\nabab\n''') == 'NO'\nassert solution('''\naabb\nabab\n''') == 'YES'\nassert solution('''\naaba\nabab\n''') == 'NO'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('aabb') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\naaba\nabaa\n''') == 'YES'\nassert solution('''\naabb\nabab\n''') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('aaba') == 'YES'\nassert solution('abab') == 'NO'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"abaa\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\nassert solution(\"bbaa\") == \"NO\""
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\naaba\nabaa\n''') == 'YES'\n\nassert solution('''\naabb\nabab\n''') == 'NO'\n\nprint(solution('''\naaba\nabaa\n'''))\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''aaba\nabaa''') == 'YES'\nassert solution('''aabb\nabab''') == 'NO'"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\naaa\nbbbb''') == 'YES'\nassert solution('''\naaa\nbbbb\n''') == 'NO'\n"
    },
    {
        "number": 3872,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"aaba\") == \"YES\"\nassert solution(\"aabb\") == \"NO\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n3\n1 2\n''') == \"NO\"\nassert solution('''4\n4\n2 4\n''') == \"YES\"\nassert solution('''4\n4\n3 2\n''') == \"YES\"\nassert solution('''5\n5\n2 4\n1 3 5\n''') == \"NO\"\nassert solution('''5\n5\n3 4\n1 2 5\n''') == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'NO'\nassert solution('1') == 'YES'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n1\n''') == 'NO'\nassert solution('''\n2\n''') == 'YES'\nassert solution('''\n3\n''') == 'NO'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1\n\n2\n''') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"YES\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4') == \"NO\"\nassert solution('1') == \"YES\"\nassert solution('2') == \"NO\"\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 2\n2 3\n1 3\n2 4\n3 4\n''') == 'YES', '\"YES\"'\nassert solution('''\n3\n2 4\n4 1\n''') == 'NO', '\"NO\"'"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n2\n0 1\n\n\"\"\") == \"\"\"YES\n1 0\"\"\", \"\"\"NO\n0 1\"\"\", \"\"\"1 0\"\"\", \"\"\"1 1\"\"\", \"\"\"2 2\"\"\", \"\"\"NO\"\"\", \"\"\"NO\"\"\")\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''4\n1\n3\n5\n4''') == 'NO'\nassert solution('''5\n1\n5\n2\n3\n4''') == 'YES'\nassert solution('''5\n1\n5\n4\n3\n2''') == 'YES'\nassert solution('''5\n2\n4\n3\n5\n1''') == 'NO'\nassert solution('''5\n1\n5\n3\n4\n2''') == 'YES'\n"
    },
    {
        "number": 3873,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('10') == 'YES'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3\\nabc\\ndef\\nghi') == \"Yes\"\nassert solution('6 3\\nab\\nc\\nd\\ne\\nf') == \"No\"\nassert solution('5 3\\nab\\nc\\nd\\ne') == \"Yes\"\nassert solution('5 3\\nab\\nc\\nd') == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"6 3\") == \"No\"\nassert solution(\"3 2\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\nassert solution(\"5 3\") == \"Yes\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3 2\nab\nac\ncd\n1 2\n\n''') == 'Yes'\nassert solution('''\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\n''') == 'Yes'\n\nassert solution('''\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\n''') == 'No'\n\nassert solution('''\n9 3\ntest\ntezt\ntest.\n.est\ntes.\n1 2 3 4 5 6 7 8 9\n\n''') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"Yes\", \".\"\nassert solution(\"4 4\") == \"No\", \".\"\nassert solution(\"6 3\") == \"Yes\", \".\"\nassert solution(\"5 3\") == \"No\", \".\"\nassert solution(\"4 4\") == \"No\", \".\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"No\", \"Empty\"\nassert solution(\"a?ba?\\n\") == \"Yes\", \"Single\"\nassert solution(\"ab*\\n\") == \"Yes\", \"Multiple\"\nassert solution(\"a?b??c?\\n\") == \"Yes\", \"All\"\nassert solution(\"a?b??c?\\n\") == \"Yes\", \"All\"\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"Yes\""
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 3') == 'No'\nassert solution('3 2') == 'Yes'\nassert solution('8 5') == 'No'\nassert solution('4 4') == 'Yes'\nassert solution('6 3') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 2\nab\nac\ncd\n1 2\n\nOutput\nYes\na?\n\nInput\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\nOutput\nYes\n?es?\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nNo\n\nInput\n4 4\na\nb\nc\ndd\n1 2 3\n\nOutput\nNo\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nYes\n.???\n''') == 'Yes\\n.?es?\\n'\n\nassert solution('''5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\nOutput\nYes\n?es?\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nNo\n\nInput\n4 4\na\nb\nc\ndd\n1 2 3\n\nOutput\nNo\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nYes\n.???\n''') == 'Yes\\n.???\\n'\n\nassert solution('''8 2\nab\nab\nac\nac\nac\nad\nac\nad\n\nInput\n6 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\nOutput\nYes\na?\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nNo\n\nInput\n8 2\nab\nab\nac\nac\nac\nad\nac\nad\n\nInput\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\nOutput\nYes\n?es?\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nYes\n.???\n''') == 'Yes\\n?es?\\n'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 2') == 'Yes'\nassert solution('3 2') == 'a?'\nassert solution('4 4') == 'No'\nassert solution('5 3') == 'Yes'\nassert solution('6 3') == 'Yes'\n"
    },
    {
        "number": 3874,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '?', \"Incorrect result for Input: `1`\"\nassert solution('2') == '?', \"Incorrect result for Input: `2`\"\nassert solution('3') == 'No', \"Incorrect result for Input: `3`\"\nassert solution('4') == 'No', \"Incorrect result for Input: `4`\"\nassert solution('5') == 'Yes', \"Incorrect result for Input: `5`\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('5\\n1 2 3 4 5') == '2'\nassert solution('6\\n1 2 3 4 5') == '1'\nassert solution('8\\n1 2 3 4 5') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"2\\n1 2\") == \"1\"\nassert solution(\"6\\n1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''2\n1 2 3''') == '2'\nassert solution('''3\n1 2 3''') == '2'\nassert solution('''4\n1 2 3 4''') == '2'\nassert solution('''5\n1 2 3 4 5''') == '3'\nassert solution('''6\n1 2 3 4 5 6''') == '3'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('10') == '2'\nassert solution('100000000000000000') == '3'\nassert solution('2') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"3\""
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('5\\n1 2 2 3 3') == '4'\nassert solution('3\\n1 2 3') == '1'\nassert solution('4\\n4 1 1 1') == '0'\nassert solution('4\\n1 2 1') == '1'\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"1\"\nassert solution(\"4\\n3 2 1 1\") == \"1\"\nassert solution(\"4\\n2 3 1 1\") == \"1\"\n"
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\""
    },
    {
        "number": 3875,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '2'\nassert solution('1\\n1 2 3') == '3'\nassert solution('3\\n1 2 3') == '1'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n2 3\\n3 4') == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(__import__('sys').stdin.read()) == '2'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''\n5\n1 2\n2 3\n3 4\n4 5\n''') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n4\n1 2\n2 3\n3 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2\n2 3\n3 4\n4 5\n\"\"\") == \"3\"\nassert solution(\"\"\"\n10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4\n1 2\n2 3\n3 4\n''') == '2'\nassert solution('''5\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '1'\nassert solution('''6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '0'\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('100') == '4'\nassert solution('1000') == '8'\nassert solution('10000') == '16'\n\"\"\""
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2\\n2 3\\n3 4\\n') == '2'\n\n\"\"\"\n\nfrom math import floor, sqrt\nfrom itertools import combinations"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n') == '2'\nassert solution('6\\n1 3\\n2 4\\n3 5\\n4 6\\n') == '2'\nassert solution('7\\n1 3\\n2 5\\n4 6\\n5 7\\n6 8\\n7 9\\n') == '3'\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 3876,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([4]) == '2'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"4\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2 5\\n') == '4'\nassert solution('10 3 10\\n') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 2 5\\n') == '4\\n'\nassert solution('10 3 10\\n') == '5\\n'\nprint(\"all tests passed\")\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\"\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 2 5') == '4'\nassert solution('10 3 10') == '5'\n"
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3877,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"7 2 5\") == \"4\"\nassert solution(\"10 3 10\") == \"5\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"2\\n2 3\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\\n\"\nassert solution(\"4 4\") == \"1\\n1 \n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5 6\") == \"2\"\nassert solution(\"4 4\") == \"1\""
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2\n1 3\n1 4\n3 4\n''') == '2'\n\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '1'\n\nassert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n''') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n2 3\\n2 5\\n3 4\\n4 5\\n') == '1 2 3'\n\ninput = '3 4\\n1 2\\n2 3\\n1 3\\n2 3\\n'\ninput_arr = input.split('\\n')\nprint(solution(input_arr))"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5''') == '2'\nassert solution('''4 4\n1 2\n1 3\n1 4\n3 4''') == '1'\n'''\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 6') == '2'\nassert solution('4 4') == '1'"
    },
    {
        "number": 3878,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 6\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\n\n'''\n\n\nn = int(input())\na = list(map(int, input().split()))\ns = 0\ncount = 0\nfor i in a:\n    if i%3 == 0 or i%2 == 0:\n        count += 1\n    else:\n        count = 0\n        break\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n4\n75 150 75 50\n''') == 'Yes'\nassert solution('''\n3\n100 150 250\n''') == 'No'\nassert solution('''\n2\n10 5\n''') == 'No'"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\n75 150 75 50\n''') == 'Yes', 'First'\nassert solution('''3\n100 150 250\n''') == 'No', 'Second'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5\\n75 150 75 50\\n\") == \"Yes\"\nassert solution(\"4\\n100 150 250\\n\") == \"No\"\nassert solution(\"3\\n100 150 250\\n\") == \"No\"\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n75 150 75 50\n\n3\n100 150 250\n\n2\n125 80\n''') == 'Yes','solution'\nassert solution('''\n4\n85 150 75 50\n\n3\n100 150 250\n\n2\n125 80\n''') == 'No','solution'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1\n10\n100\n''') == 'Yes'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4\n75 150 75 50\n''') == 'Yes'\nassert solution('''3\n100 150 250\n''') == 'No'\nassert solution('''5\n1\n2\n3\n4\n5\n''') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4\n75 150 75 50\n\n3\n100 150 250\n\n''') == 'Yes'\nassert solution('''3\n100 150 250\n\n''') == 'No'\n"
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"Yes\"\nassert solution([100, 150, 250]) == \"No\""
    },
    {
        "number": 3879,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 150 250\") == \"No\"\n\nassert solution(\"4\\n75 150 75 50\") == \"Yes\"\n\nassert solution(\"4\\n99 149 239 259\") == \"No\"\n\nassert solution(\"4\\n100 150 250 500\") == \"Yes\""
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2\n50 50 50''') == '150'\nassert solution('''2\n-1 -100 -1''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\\n50 50 50\\n\") == \"150\"\nassert solution(\"2\\n-1 -100 -1\\n\") == \"100\"\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10\n-1 -100 -1''') == '100'\nassert solution('''\n100\n-1 -100 -1''') == '150'\nprint('Congratulations! Your solution: ', solution('''\n100\n-1 -100 -1'''))\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5\n-1 -2 -3 -4 5\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2\n50 50 50\n''') == '150'\nassert solution('''2\n-1 -100 -1\n''') == '100'\nassert solution('''3\n1 -1 -2\n''') == '1'\nassert solution('''3\n1 1 1\n''') == '0'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution([5, 4, 3, 2, 1]) == 100\nassert solution([-1, -100, -1]) == 100\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\nprint(solution('''\n2\n-1 -100 -1\n'''))\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n50 50 50\n''') == '150'\nassert solution('''\n2\n-1 -100 -1\n''') == '100'\n"
    },
    {
        "number": 3880,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2\\n50 50 50') == '150'\nassert solution('2\\n-1 -100 -1') == '100'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 5\nab a\ncc c\nca a\nee c\nff d\n''') == '4'\nassert solution('''\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n''') == '1'\nassert solution('''\n6 2\nbb a\nba a\n''') == '0'"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\n\nprint(solution(open(\"input.txt\").read()))\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 5\nab a\ncc c\nca a\nee c\nff d\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6 2\nbb a\nba a\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\") == \"4\"\nassert solution(\"2 8\") == \"1\"\nassert solution(\"6 2\") == \"0\"\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n''') == '4'\n\nassert solution('''6 2\nbb a\nba a\n''') == '0'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == 4\nassert solution(\"2 8\") == 1\nassert solution(\"6 2\") == 0\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 5\nab a\ncc c\nca a\nee c\nff d\n''') == '4'\nassert solution('''6 2\nbb a\nba a\n''') == '0'\nassert solution('''6 3\nbb a\nba a\nca b\ndc d\nff f\n''') == '2'\n"
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 5\nab a\ncc c\nca a\nee c\nff d\"\"\") == \"4\"\nassert solution(\"\"\"2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\"\"\") == \"1\"\nassert solution(\"\"\"6 2\nbb a\nba a\"\"\") == \"0\""
    },
    {
        "number": 3881,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 5') == '4'\nassert solution('2 8') == '1'\nassert solution('6 2') == '0'"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"10\"\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''1\n2\n3''') == '10'''"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n\n<img src=\"assets/binary_relation.png\">\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '10'\n"
    },
    {
        "number": 3882,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == '10'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'\n'''"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'\nassert solution('4 1') == '1.250000000000'"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 3\n\"\"\") == \"1.250000000000\"\nassert solution(\"\"\"\n3 1\n\"\"\") == \"-1\"\nassert solution(\"\"\"\n4 1\n\"\"\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"1.000000000000\"\nassert solution(\"1 3\") == \"-1\"\nassert solution(\"4 1\") == \"1.250000000000\"\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3 1\n\"\"\") == \"1.000000000000\"\nassert solution(\"\"\"\n1 3\n\"\"\") == \"1.250000000000\"\nassert solution(\"\"\"\n4 1\n\"\"\") == \"-1\"\n\"\"\""
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1.000000000000\"\nassert solution(\"4 1\") == \"1.250000000000\"\n\n'''\n\n\nimport math\n\na, b = map(int, input().split())\n\nx = math.ceil((math.sqrt(4 * a + 1)) / 2)"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n''') == '1.000000000000'\nassert solution('''\n1 3\n''') == '-1'\nassert solution('''\n4 1\n''') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 1''') == '1.000000000000'\nassert solution('''1 3''') == '-1'\nassert solution('''4 1''') == '1.250000000000'\n"
    },
    {
        "number": 3883,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 1') == '1.000000000000'\nassert solution('3 1') == '1.000000000000'\nassert solution('1 3') == '-1'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sys.stdin.read()) == '10.0000000000'"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1\n1 4 1\n2 5 3\n''') == '10.0000000000'\n\nassert solution('''3\n1\n1 4 1\n2 5 3\n''') == '-1'\n\nassert solution('''6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n''') == '85.4800000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"10.0000000000\"\nassert solution(\"3\") == \"-1\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '10.0000000000'\nprint(solution(input))\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '85.4800000000'\n\n\"\"\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '10.0000000000'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_string) == '10.0000000000'\nassert solution(input_string_2) == '-1'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == \"10.0000000000\"\nassert solution('3') == \"-1\"\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '10.0000000000'\nassert solution('2') == '-1'\n"
    },
    {
        "number": 3884,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '10.0000000000'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 0, \"Please fix me!\"\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 4\n\"\"\"\nimport math\nn=int(input())\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n''') == '0'\n\nassert solution('''10\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''2\n\n''') == '0'\nassert solution('''10\n\n''') == '4'\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"10\") == 4"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"10\") == 4\n"
    },
    {
        "number": 3885,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'\nassert solution('1') == '0'\nassert solution('10') == '4'"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2') == 'abdef'\nassert solution('3 1') == 'Wh'\nassert solution('5 0') == 'Areyoubusy'\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''1 1\n1 2\n1 111111111111''') == 'Wh'\nassert solution('''5 0\n0 69\n1 194\n1 139\n0 47\n1 66''') == 'abdef'\nassert solution('''10 4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474''') == 'Areyoubusy'\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\nassert solution(\"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\") == \"What are you doing while sending What are you doing at the end of the world? Are you busy? Will you save us?\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 111111111111') == 'Wh.'\nassert solution('5\\n0 69\\n1 194\\n1 139\\n0 47\\n1 66\\n') == 'abdef'\nassert solution('10\\n4 1825\\n3 75\\n3 530\\n4 1829\\n4 1651\\n3 187\\n4 584\\n4 255\\n4 774\\n2 474\\n') == 'Areyoubusy'\n\"\"\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '.'\nassert solution('1 1') == 'Wh'\nassert solution('1 2') == 'abdef'\nassert solution('1 111111111111') == 'Areyoubusy'\nassert solution('5 0') == 'abdef'\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Wh\"\nassert solution(\"1 2\") == \"abdef\"\nassert solution(\"1 111111111111\") == \"Areyoubusy\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1\n1 2\n1 111111111111\n\"\"\") == \"Wh.\"\nassert solution(\"\"\"\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\"\"\") == \"abdef\"\nassert solution(\"\"\"\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\"\"\") == \"Areyoubusy\"\nassert solution(\"\"\"\n8\n7 3\n1 2\n1 5\n1 6\n4 4\n1 3\n1 9\n3 5\n1 7\n2 8\n\n\"\"\") == \"Question\""
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(example_input_01) == \"Wh.\"\nassert solution(example_input_02) == \"abdef\"\nassert solution(example_input_03) == \"Areyoubusy\"\n\n'''\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == \"Wh.\\n\"\nassert solution('10') == \"Areyoubusy\\n\"\nassert solution('50') == \"Wh.\\n\"\nassert solution('1') == \"Wh.\\n\"\nassert solution('10') == \"Areyoubusy\\n\"\n"
    },
    {
        "number": 3886,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0 1') == 'Wh'\nassert solution('1 1') == 'Wh'\nassert solution('1 2') == '.'\nassert solution('1 111111111111') == '.'\nassert solution('2 3') == 'abdef'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(sample_input) == possible_answer\nassert solution(input) == result"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''? +? -? +? = 42\n''') == 'Possible'\nassert solution('''? -? = 1\n''') == 'Impossible'\nassert solution('''? = 1000000\n''') == 'Possible'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''? +? -? +? = 42\nPossible''') == '9 + 13 - 39 + 28 + 31 = 42'\nassert solution('''? -? = 1\nPossible''') == '1000000 = 1000000'\nprint(solution('''? +? -? +? = 42\nPossible'''))"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n? +? -? +? = 42\n''') == 'Possible'\nassert solution('''\n? -? = 1\n''') == 'Impossible'\nassert solution('''\n? = 1000000\n''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''? +? -? +? = 42\n? -? = 1''') == 'Possible'\nassert solution('''? +? -? +? +? = 42\n? -? = 1''') == 'Impossible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"? +? -? +? = n\") == \"Possible\"\nassert solution(\"? +? -? +? = n\") == \"Possible\"\nassert solution(\"? = 1\") == \"Impossible\"\nassert solution(\"? = 1000000\") == \"Possible\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == 'Possible'\nassert solution(input()) == 'Impossible'"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''? +? -? +? = 42\n\n? -? = 1\n''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n? +? -? +? = n\n''') == 'Possible'\nassert solution('''\n? = 1\n''') == 'Impossible'\nassert solution('''\n? +? -? +? = n\n''') == 'Possible'\n"
    },
    {
        "number": 3887,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"? +? -? +? =? +? +? -? -? =? +?\") == \"Possible\"\nassert solution(\"? -? = 1\") == \"Impossible\"\nprint(solution(input()))\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4') == '7 4 5'\nassert solution('3') == '7 4 5'\nassert solution('2') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0') == '7 4 5'"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '7 4 5'\n\"\"\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5') == '7 4 5'\nassert solution('10') == '7 4 5 6 3'\nassert solution('123456789') == '7 4 5 6 3 8 5 6 7 3 7 8 5 6 7 9 8 5 6 7 10 8 5 6 7 11 8 5 6 7 12 8 5 6 7 13 8 5 6 7 14 8 5 6 7'\nassert solution('0001111111') == '7 4 5 6 3 8 5 6 7 3 7 8 5 6 7 9 8 5 6 7 10 8 5 6 7 11 8 5 6 7 12 8 5 6 7 13 8 5 6 7 14 8 5 6 7 15 8 5 6 7'\nassert solution('0011111111') == '7 4 5 6 3 8 5 6 7 3 7 8 5 6 7 9 8 5 6 7 10 8 5 6 7 11 8 5 6 7 12 8 5 6 7 13 8 5 6 7 14 8 5 6 7 15 8 5 6 7 16 8 5 6 7 17 8 5 6 7 18 8 5 6 7 19 8 5 6 7 20 8 5 6 7 21 8 5 6 7 22 8 5 6 7 23 8 5 6 7 24 8 5 6 7 25 8 5 6 7 26 8 5 6 7 27 8 5 6 7'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"7 4 5\""
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(__import__('sys').stdin.read()) == __import__('sys').stdout.readline()\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 0 2\\n0\\n0\\n0\") == \"7 4 5\"\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '7 4 5'\n"
    },
    {
        "number": 3888,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 0 2\\n0\\n0\\n0') == '7 4 5'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3') == 'Yes'\nassert solution('2') == 'No'\nassert solution('1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n1\nabababc\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n2\nabcd\n\"\"\") == \"No\"\nassert solution(\n\"\"\"\n3\nabc\n\"\"\") == \"Yes\"\nassert solution(\n\"\"\"\n5\naabbbc\n\"\"\") == \"No\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"No\"\nassert solution(\"3\") == \"Yes\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == 'Yes'\nassert solution('3') == 'No'\nassert solution('3') == 'Yes'\n\"\"\""
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\naba\") == \"Yes\"\nassert solution(\"4\\nabcd\") == \"No\"\nassert solution(\"5\\nabababc\") == \"Yes\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\naaaaaa') == 'Yes'\nassert solution('6\\nabcd') == 'No'\nassert solution('3\\nabc') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == 'Yes'\nassert solution('6') == 'No'\nassert solution('3') == 'Yes'\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\\nacbbab\") == \"Yes\"\nassert solution(\"5\\nabcbca\") == \"No\"\nassert solution(\"5\\nabcbca\") == \"Yes\"\n"
    },
    {
        "number": 3889,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3') == 'Yes'\nassert solution('6') == 'Yes'\nassert solution('7') == 'No'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('10 5') == '73684210'\nprint(solution(input()))"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == \"54\"\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    '1 2\\n'\n    '3 4'\n) == '54'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 1\n\n''') == '0'\nassert solution('''\n2 2\n\n''') == '4'\nassert solution('''\n3 3\n\n''') == '13'\nassert solution('''\n6 3\n\n''') == '736'\nassert solution('''\n5 6\n\n''') == '2955'\n\nstdin = '''\n2 2\n\n'''"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 3\\n2 4\\n') == '1 3'\nassert solution('5 2\\n2 4\\n') == '54'\nassert solution('5 3\\n3 4\\n') == '1728'\nassert solution('5 4\\n4 3\\n') == '1 3'"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5 2\n''') == '54'\nassert solution('''\n7 4\n''') == '1728'\nprint(solution('''\n1 10\n'''))\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('10 3') == '1344'\nassert solution('20 2') == '864864'\nassert solution('20 3') == '13313'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 2') == '54'\nassert solution('7 4') == '1728'\nassert solution('6 5') == '0'\nassert solution('10 8') == '0'\nassert solution('11 5') == '0'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '12'\nassert solution('4 4') == '24'\nassert solution('5 4') == '50'\n"
    },
    {
        "number": 3890,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5 2\n''') == '54'\nassert solution('''\n7 4\n''') == '1728'\nassert solution('''\n1 2\n''') == '2'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '2 3'\nassert solution('5 6') == '2 4'\nassert solution('3 3') == '1 2'\nassert solution('2 2') == '1 1'\nassert solution('2') == '1 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"0 0\"\nassert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"5 7\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(None) == '2 1'\nassert solution(\"2 2\") == '0 1'\nassert solution(\"0 0\") == '0 0'\nassert solution(\"1 1\") == '0 0'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 6') == '2 4'\nassert solution('3 3') == '2 1'"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"2 4\"\nassert solution(\"3 3\") == \"2 1\"\n"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input) == \"2 1\""
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n''') == '2 4'\nassert solution('''\n3 3\nWWW\nBWW\nWWW\n''') == '2 1'\nassert solution('''\n6 6\nWBBBBBBB\nBBBBBBBB\nBBBBBBBB\nBBBBBBBB\nBBBBBBBB\nBBBBBBBB\n''') == '2 4'\nassert solution('''\n3 3\nWWW\nBWW\nWWW\n''') == '2 1'\nassert solution('''\n5 5\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBBB\nBB"
    },
    {
        "number": 3891,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 3') == '2 1'\nassert solution('5 6') == '2 4'\nassert solution('2 4') == '2 3'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9 \nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"2 3\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(stdin_01) == stdout_01\nassert solution(stdin_02) == stdout_02\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 7') == '10 9 10 10 9 \nassert solution('2 3') == '5 6'"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\nassert solution(\"2 4\") == \"5 6\"\nassert solution(\"5 1\") == \"10 9 10 10 9\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"10 9 10 10 9\"\nassert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\"\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 7\") == \"10 9 10 10 9\"\nassert solution(\"2 3\") == \"5 6\""
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 7') == '10 9 10 10 9'\nassert solution('2 3') == '5 6'\nassert solution('1 2') == '2 3'\nassert solution('1 2') == '1 2'\nassert solution('2 3') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n''') == '10 9 10 10 9'\nassert solution('''\n3 4\n1 2\n1 2\n1 2\n''') == '5 6'\n"
    },
    {
        "number": 3892,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"10 9 10 10 9\"\nassert solution(\"2 4\") == \"5 6\"\n\n\n\n'''\nimport sys\nfrom collections import deque\nfrom collections import defaultdict\nimport math"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3') == '2'\nassert solution('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 0 0\\n2\\n2\\n3\\n3 1 -3') == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 2\n0 1\n2\n0 1\n1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 -2\n0 1\n2\n0 1\n1 1\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1\n-1 -1\n1\n0 1 0\n1 0 0\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('2 -1') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1\\n-1 -1\\n2\\n0 1 0\\n1 0 0') == '2'\nassert solution('1 1\\n-1 -1\\n3\\n1 0 0\\n0 1 0\\n1 1 -3') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n''') == \"2\"\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n''') == \"2\"\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 0\n''') == \"2\"\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 0\n''') == \"2\"\nassert solution('''\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 0\n''') == \"2\"\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1\\n-1 -1\\n2') == '2'\nassert solution('1 1\\n-1 -1\\n3') == '2'"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2'\nassert solution('-1 -1') == '2'\nassert solution('2') == '0'\nassert solution('0 1') == '0'\nassert solution('1 0 0') == '0'\n"
    },
    {
        "number": 3893,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"-1 -1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"1 0 0\") == \"2\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Kevin\"\nassert solution(\"2 2\") == \"Nicky\"\nassert solution(\"3 3\") == \"Kevin\"\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1\\n3 4') == 'Kevin'\nassert solution('1 2\\n3') == 'Nicky'\nassert solution('2 2\\n3') == 'Nicky'\nassert solution('1 2\\n3') == 'Kevin'\nassert solution('2 1\\n3 4') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 2 3 4') == 'Kevin'\nassert solution('1 2') == 'Nicky'\nassert solution('1 2 3 4') == 'Nicky'\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        cows = []\n        for i in range(n):\n            cows.append(int(stdin.split()[i]))\n        while cows:\n            if cows[0] % 2:\n                cows.append(cows.pop(0))\n                k -= 1\n                if k == 0:\n                    return \"Kevin\"\n            else:\n                cows.pop(0)\n                k -= 2\n                if k == 0:\n                    return \"Nicky\"\n    \n    def solution2(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        cows = []\n        for i in range(n):\n            cows.append(int(stdin.split()[i]))\n        while cows:\n            if cows[0] % 2:\n                cows.append(cows.pop(0))\n                k -= 1\n                if k == 0:\n                    return \"Kevin\"\n            else:\n                cows.pop(0)\n                k -= 2\n                if k == 0:\n                    return \"Nicky\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 1') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == 'Kevin'\nassert solution('1 2') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1 2\n3\n''') == 'Kevin'\nassert solution('''\n2 2\n5\n''') == 'Nicky'\nassert solution('''\n1 1\n3\n''') == 'Kevin'\nassert solution('''\n1 2\n1\n''') == 'Nicky'\nassert solution('''\n2 2\n1\n''') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == 'Kevin'\nassert solution('1 2') == 'Nicky'\n\n\"\"\""
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Kevin'\nassert solution('2 1') == 'Nicky'\nassert solution('3 1') == 'Kevin'\nassert solution('4 1') == 'Nicky'\n"
    },
    {
        "number": 3894,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n3\\n\") == \"Nicky\"\nassert solution(\"1 1\\n3\\n\") == \"Kevin\"\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1\"\nassert solution(\"\") == -1\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 2 2\") == \"1 2 2\"\nassert solution(\"\") == -1\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1\n2\n3\n''') == '1'\nassert solution('''\n5\n3 2 5 7\n''') == '4'\nprint('Test passed')"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 1') == '1 1'\nassert solution('3') == '1 2 3'\nassert solution('3 2 3 2 1 3 1 1') == '1 2 3'\nassert solution('3 1 1 1') == '-1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"1\") == \"1 1 1\""
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 2 2') == '1'\nassert solution('2 1') == '2'\nassert solution('3') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '3'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 1') == '1 2 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 3\\n') == '3\\n1 2 3\\n1 2 3\\n'\nassert solution('2\\n2 2 2\\n') == '1'\nassert solution('3\\n1 2 3\\n') == '1\\n1 2 3\\n2\\n'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1 1 1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '-1'\nassert solution('10') == '1'\nassert solution('11') == '11'\nassert solution('10') == '1'\n"
    },
    {
        "number": 3895,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n1 2 3\n\n''') == '3 1 2 3'\nassert solution('''\n3\n2 2 2\n\n''') == '1 2 2'\nassert solution('''\n2\n2 1\n\n''') == '2'\nassert solution('''\n1\n1 1 1\n1 1 1\n1 1 1\n\n''') == '2'\nassert solution('''\n2\n2 2 2\n\n''') == '1'\n\n'''\n\n\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # Handle empty input\n        if len(stdin) == 0:\n            return -1\n        \n        # Get input and sort it\n        sorted_int = sorted([int(i) for i in stdin.split()])\n        \n        # Set the paremeter for the check\n        max_m = 10**6\n        min_m = 1\n        max_n = len(sorted_int)\n        min_n = 1\n        \n        # Define the function\n        def f(n):\n            return sorted_int.index(n)\n        \n        # Run the check\n        while(max_m - min_m > 1):\n            mid = (max_m + min_m) // 2\n            # Check if the check is possible\n            if sum([ f(i) for i in range(min_n, max_n)]) == mid:\n                return mid\n            \n            # Check if the left half is possible\n            if f(mid) >= min_m:\n                max_m = mid\n            \n            # Check if the right half is possible\n            else:\n                min_m = mid\n                \n        # Return the length\n        return min_n\n'''\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # Handle empty input\n        if len(stdin) == 0:\n            return -1\n        \n        # Get input and sort it\n        sorted_int = sorted([int(i) for i in stdin.split()])\n        \n        # Set the paremeter for the check\n        max_m = 10**6\n        min_m = 1\n        max_n = len(sorted_int)\n        min_n = 1\n        \n        # Define the function\n        def f(n):\n            return sorted_int.index(n)\n        \n        # Run the check\n        while(max_m - min_m > 1):\n            mid = (max_m + min_m) // 2\n            # Check if the check is possible\n            if sum([ f(i) for i in range(min_n, max_n)]) == mid:\n                return mid\n            \n            # Check if the left half is possible\n            if f(mid) >= min_m:\n                max_m = mid\n            \n            # Check if the right half is possible\n            else:\n                min_m = mid\n                \n        # Return the length\n        return min_n\n'''\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"11\\n\") == \"6\\n\"\nassert solution(\"01\\n\") == \"2\\n\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == '1'\nassert solution('0') == '1'\nassert solution('0') == '1'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n11\n\n''') == '6'\nassert solution('''\n01\n\n''') == '2'\nprint('\ud14c\uc2a4\ud2b8 \uc131\uacf5')\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"01\") == \"1\"\nassert solution(\"11\") == \"6\"\nassert solution(\"0\") == \"0\"\nassert solution(\"101\") == \"2\"\n"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"6\"\nassert solution(\"01\") == \"2\"\nassert solution(\"0\") == \"1\"\nprint(solution(input()))"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\nassert solution('1') == '1'"
    },
    {
        "number": 3896,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('11') == '6'\nassert solution('01') == '2'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('2') == '4'\nassert solution('5') == '5'\nassert solution('6') == '2'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '4'\nassert solution('6') == '5'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == 1\nassert solution('3') == 1\nassert solution('10') == 3\nassert solution('15') == 3\nassert solution('1 1 2') == 1\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 1\nassert solution('10') == 3\nassert solution('100') == 3\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n1\n15\n''') == '1'\nassert solution('''\n3\n1 1 2\n''') == '3'\nassert solution('''\n2\n5 7\n''') == '4'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '3'\nassert solution('2') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3897,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('15') == '1'\nassert solution('3') == '3'\nassert solution('2') == '4'\nassert solution('5 7') == '4'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''2\n0 1\n''') == 'NO'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n''') == 'NO'\nassert solution('''3\n1 0 2\n2 0 1\n''') == 'YES'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'YES'\nassert solution('1 0 2') == 'YES'\nassert solution('2 0 1') == 'YES'\nassert solution('4 1 2 3 0') == 'NO'"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 0 2\n2 0 1\n\n2\n0 1\n''') == 'YES'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n\n1\n0 1\n''') == 'YES'\nassert solution('''3\n1 0 2\n2 0 1\n\n2\n0 1\n''') == 'NO'\nassert solution('''4\n1 2 3 0\n0 3 2 1\n\n1\n0 1\n''') == 'NO'\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 0 2\\n2 0 1\\n\") == \"YES\"\nassert solution(\"4\\n1 2 3 0\\n0 3 2 1\\n\") == \"YES\"\nassert solution(\"3\\n2 1 0\\n0 3 2 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3\n1 0 2\n2 0 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n1 2 3 0\n0 3 2 1\n\"\"\") == \"NO\""
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 0 2\n2 0 1\n''') == 'YES'\nassert solution('''\n4\n1 2 3 0\n0 3 2 1\n''') == 'NO'"
    },
    {
        "number": 3898,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(__import__('sys').stdin.read()) == 'YES'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'\nassert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9040'\n\nstdin = \"\"\"4\n7 8 9 10\n1 1 1 1 1 1\n2 2 2 2 2 2\n3 3 3 3 3 3\n4 4 4 4 4 4\n\"\"\"\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''6\n8 10 9 9 8 10\n1 1 1 1 1 1''') == '9000'\nassert solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10''') == '1160'"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10''') == '1160'\nassert solution('''6\n8 10 9 9 8 10\n1 10 5 5 1 10\n\n2\n5 6 5 5 1\n1 1 1 1 1 1''') == '9000'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    '6\\n'\n    '8 10 9 9 8 10\\n'\n    '1 1 1 1 1 1\\n') == '9000'\nassert solution(\n    '6\\n'\n    '8 10 9 9 8 10\\n'\n    '1 10 5 5 1 10\\n') == '1160'\n\n'''\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1170'\nassert solution('''\n6\n1 2 3 4 5 6\n7 1 8 9 2 6\n2 8 3 7 4 9\n5 6 5 7 6 6\n''') == '7360'\nassert solution('''\n6\n1 2 3 4 5 6\n7 1 8 9 2 6\n2 8 3 7 4 9\n5 6 5 7 6 6\n''') == '7180'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '9000'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(solution.__doc__) == '9000'\nassert solution('6\\n'+'8 10 9 9 8 10\\n'+'1 1 1 1 1 1\\n') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\") == \"9000\"\nassert solution(\"6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\") == \"1160\"\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n8 9 9 8 10\n1 1 1 1 1\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\nassert solution('''\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n''') == '1160'\n"
    },
    {
        "number": 3899,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6\\n8 10 9 9 8 10\\n1 1 1 1 1 1\\n') == '9000'\nassert solution('6\\n8 10 9 9 8 10\\n1 10 5 5 1 10\\n') == '1160'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"1\"\nassert solution(\"\"\"\n4 2\n2 3\n1 4\n1 4\n2 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n\"\"\") == \"1\""
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n2 3\n1 4\n1 4\n2 1\n''') == '6'\n\nassert solution('''\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\n''') == '1'\n\nassert solution('''\n4 3\n2 1\n4 5\n1 2\n''') == '1'\n\nassert solution('''\n2 4\n2 1\n1 3\n1 4\n''') == '4'\n\nassert solution('''\n3 4\n1 1\n2 1\n1 2\n''') == '4'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 2\"\n    \"2 3\"\n    \"1 4\"\n    \"1 4\"\n    \"2 1\"\n    ) == \"6\"\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nassert solution('''8 9\n7 9\n7 8\n7 5\n6 2\n2 1\n5 3\n1 3\n1 4\n''') == '9'\nassert solution('''10 6\n4 5\n5 7\n4 3\n7 3\n5 7\n4 7\n7 7\n5 5\n6 2\n2 1\n7 2\n1 3\n1 4\n''') == '10'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input) == '1'"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(sys.stdin.read()) == '1'\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6'\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1'\nprint(solution(''''''))"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input_data) == \"6\"\nprint(solution(input_data))\n"
    },
    {
        "number": 3900,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 2\n2 3\n1 4\n1 4\n2 1''') == '6', 'First example'\n\nassert solution('''8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4''') == '1', 'Second example'\n\nassert solution('''5 9\n2 7\n3 9\n5 7\n2 6\n2 7\n1 2\n2 4\n2 6\n1 3\n1 5''') == '10', 'Third example'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '-1'\n\nimport unittest"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"3\") == \"4\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([\n  3,\n  2,\n  4,\n  1,\n  6,\n]) == 5, \"Wrong\"\n\nassert solution([\n  2,\n  2,\n  3,\n  4,\n  6,\n]) == -1, \"Wrong\"\n\nassert solution([\n  4,\n  4,\n  3,\n  2,\n  1,\n]) == 4, \"Wrong\"\n\nassert solution([\n  2,\n  2,\n  3,\n  1,\n  1,\n]) == 4, \"Wrong\"\n\nassert solution([\n  2,\n  2,\n  3,\n  3,\n  2,\n]) == -1, \"Wrong\"\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n2 4 6''') == '5'\nassert solution('''4\n2 4 6 8''') == '-1'\nassert solution('''5\n2 2 3 4 6''') == '5'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '-1'"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '-1'\nassert solution('4') == '4'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"3\") == \"4\"\n\"\"\""
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n10\n2 6 9\n\n''') == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '4'\nassert solution('4') == '-1'\nassert solution('3') == '-1'\n"
    },
    {
        "number": 3901,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4') == '-1'\nassert solution('5') == '4'\nassert solution('3') == '4'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    abacabaca\n    '''\n    ) == '3'\n\n\nassert solution(\n    '''\n    abaca\n    '''\n    ) == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\""
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('abacabaca') == '3'\n\nassert solution('abaca') == '0'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('abacabaca') == '3\\naca\\nba\\nca'\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input(\"Sample 1\\n\")) == \"3\"\nassert solution(input(\"Sample 2\\n\")) == \"0\""
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"abacabaca\") == \"3\"\nassert solution(\"abaca\") == \"0\"\n"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'\nassert solution('abacabac') == '3'\nassert solution('abacaba') == '0'"
    },
    {
        "number": 3902,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('abacabaca') == '3'\nassert solution('abaca') == '0'"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\".#.\\n#.#\\n###\") == 2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 5\n11.2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333') == '2'\nassert solution('1 10\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1.1.1\\n1.1"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '2'\nassert solution(\"1 2 3\\n1 2\\n\") == '0'\nassert solution(\"3 3\\n2 3\\n3 2\\n\") == '1'\nassert solution(\"3 3\\n1 2\\n2 3\\n\") == '-1'\nassert solution(\"3 3\\n1 2\\n1 2\\n\") == '2'\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''4 5\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n1\n1#2#3\n\n\"\"\") == \"2\"\nassert solution(\n\"\"\"\n4\n11..2\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n11..2\\n#..22\\n#.323\\n.#333\") == \"2\"\nassert solution(\"3 3\\n##.##\\n#...#\\n##...\\n###.\\n\") == \"1\"\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 5\n1#2#3\n"
    },
    {
        "number": 3903,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3\\n') == '-1', \"Wrong\"\nassert solution('4 5\\n11..2\\n#..22\\n#.323\\n.#333\\n') == '2', \"Wrong\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''8\n))((())(\n\n''') == '6'\nassert solution('''3\n(()\n\n''') == '-1'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''5\n))((()))\n''') == '6'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"6\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"-1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('8') == '6'\nassert solution('3') == '-1'"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''8\n))((())(\n''') == '6'\nassert solution('''3\n(()\n''') == '-1'\nassert solution('''4\n(())()()\n''') == '2'\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"-1\"\nassert solution(\"12\") == \"12\"\nassert solution(\"1\") == \"0\"\nassert solution(\"100\") == \"100\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"-1\"\n"
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n3\n(()\n\nOutput\n-1\n\n5\n))(\n\nOutput\n6\n\nInput\n4\n)()\n\nOutput\n4\n\nInput\n6\n)()()()\n\nOutput\n-1\n\nInput\n8\n))((())(\n\nOutput\n6\n\"\"\"\n) == \"\"\"6\"\"\""
    },
    {
        "number": 3904,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2\n)())''') == \"6\", \"First\"\nassert solution('''3\n(()\n\n''') == \"3\", \"Second\"\nassert solution('''4\n((())\n\n''') == \"6\", \"Third\"\nassert solution('''5\n())(((()\n\n''') == \"6\", \"Fourth\"\nassert solution('''6\n)()()())\n\n''') == \"6\", \"Fifth\"\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3 5\n4 4 0\n1 3\n3 2\n3 1\n\n''') == '1'\nassert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\n''') == '4'\nassert solution('''5 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\n''') == '4'\nassert solution('''6 5 5\n4 1 1 1 1\n1 2\n3 3\n3 2\n1 2\n1 4\n1 3\n\n''') == '5'\nassert solution('''8 5 5\n1 3\n3 1\n3 2\n3 4\n2 2\n4 3\n4 4\n5 5\n\n''') == '4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('2 2 2') == '1'\n\n'''\nfrom datetime import datetime\nfrom itertools import product\nfrom typing import Dict, List, Set, Tuple\nfrom bisect import bisect_left"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 5 4\\n2 1 0 3\\n4 3\\n3 2\\n1 2') == '1 2 3 4'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 5 3\n0 1 4\n2 3\n1 2\n1 1\n''') == \"1\"\nassert solution('''\n4 4 3\n1 2\n2 2\n2 1\n''') == \"4\"\nassert solution('''\n5 4 4\n0 2\n1 3\n1 1\n1 4\n3 2\n''') == \"5\"\n\n'''\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('2 2 4') == '2'\nassert solution('3 3 4') == '4'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 5\n4 4 0\n1 3\n3 2\n3 1\n''') == '1'\n\nassert solution('''4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n''') == '4'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '3'\nassert solution('5 5 5') == '2'\nassert solution('10 10 10') == '2'\nassert solution('12 3 3') == '2'\n"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 5') == '1'\nassert solution('4 5 4') == '4'\nassert solution('5 5 4') == '3'"
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3 5\") == \"1\"\nassert solution(\"4 5 4\") == \"4\"\nassert solution(\"5 5 4\") == \"1 2 3 4\""
    },
    {
        "number": 3905,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''4 5 4\n2 1 0 3\n4 3''') == '4'\nassert solution('''4 5 4\n2 1 0 3\n4 3''') == '2'\nassert solution('''5 5 5\n2 1 0 3\n3 2''') == '3'\nassert solution('''4 5 4\n2 1 0 3\n4 3''') == '2'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"8\""
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3') == 8\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"8\"\nassert solution(\"5 5\") == \"18\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == 8\n\n\n\n'''"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"8\"\nassert solution(\"4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3\\n') == '8'\nassert solution('3 3\\n') == '0'\nassert solution('9 9\\n') == '23'\nassert solution('10 10\\n') == '33'\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1', 'First'\nassert solution('2 3') == '8', 'Second'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 2\n3\n4\n5\n6\n7\n8\n9\n''') == 8\n\nassert solution('''\n2 3\n1 1\n3 3\n3 2\n''') == 9\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3') == 8\n"
    },
    {
        "number": 3906,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 3\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 2\\n1 2\\n2 3\\n') == '5\\n'\nassert solution('5 3\\n1 2\\n2 3\\n') == '4\\n'\nassert solution('100 3\\n1 2\\n2 1\\n3 1\\n') == '100\\n'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '5'\nassert solution('10 3') == '10'\nassert solution('100 3') == '100'\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n''') == '5'\nassert solution('''\n1 2\n2 1\n3 1\n''') == '4'\nassert solution('''\n1 2\n1 1\n2 100\n''') == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n''') == '5'\n\nassert solution('''\n100 3\n1 2\n2 1\n3 1\n''') == '100'\n\nassert solution('''\n1 2\n1 1\n2 100\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\n1 2\n2 3\n\n''') == '5'\nassert solution('''\n100 3\n1 2\n2 1\n3 1\n\n''') == '100'\nassert solution('''\n1 2\n1 1\n2 100\n\n''') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(sys.stdin.read()) == '100'"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '5'\nassert solution('100 3') == '100'\n"
    },
    {
        "number": 3907,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input( )) == \"100\"\n'''"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(INP) == OUT\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('aaabb') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\nassert solution('la') == '2'"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('aaa') == '6'\nassert solution('usaco') == '1'\nassert solution('lol') == '2'\nassert solution('aaaa') == '2'\nassert solution('ab') == '2'\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"usaco\") == \"1\"\nassert solution(\"aaabb\") == \"6\"\nassert solution(\"lol\") == \"2\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"usaco\") == \"1\"\nassert solution(\"lol\") == \"2\"\nassert solution(\"aab\") == \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"aaabb\") == 6, solution(\"aaabb\")\nassert solution(\"usaco\") == 1, solution(\"usaco\")\nassert solution(\"lol\") == 2, solution(\"lol\")\n\n\"\"\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('bbbbb') == '2'\nassert solution('aaaaa') == '1'\nassert solution('bbbbb') == '2'\nassert solution('tttt') == '3'\n\n'''\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"usaco\") == \"1\"\nassert solution(\"lol\") == \"2\"\nassert solution(\"aaabb\") == \"6\"\nassert solution(\"aaab\") == \"1\"\n"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '6'\n\n\n'''"
    },
    {
        "number": 3908,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '6'\n\n\"\"\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n4\n3\n7\n2\n''') == '2'\nassert solution('''2\n2\n''') == '1'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4''') == '2'\nassert solution('''1''') == '1'\nassert solution('''2''') == '0'\nassert solution('''3''') == '2'\nassert solution('''4''') == '2'\n\n'''\n\n\n\nn = int(input())\nm = 0\nfor i in range(1,n+1):\n    m = i\n    if (i%3==0):\n        m = m//3\n    if (i%9==0):\n        m = m//9\n    if (i%27==0):\n        m = m//27\n    if (i%27==0):\n        m = m//27\n    if (i%9==0):\n        m = m//9\n    if (i%3==0):\n        m = m//3\n    if (i%27==0):\n        m = m//27\n    if (i%9==0):\n        m = m//9\n    if (i%27==0):\n        m = m//27\n    if (i%9==0):\n        m = m//9\n    if (i%27==0):\n        m = m//27\nprint(m)\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2\n10\n''') == '1'\nassert solution('''4\n3\n11\n''') == '2'\nassert solution('''5\n1\n10\n''') == '1'\nassert solution('''1\n1\n10\n''') == '1'\nassert solution('''8\n1\n11\n''') == '1'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3909,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n\n''') == '1'\nassert solution('''4\n\n''') == '2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n4\n3 1\n4 2\n3 2\n''') == '1 2'\nassert solution('''\n4\n1 3\n2 4\n3 2\n''') == '2 1'\nassert solution('''\n3\n2 2\n1 1\n''') == '1 1'\nassert solution('''\n10\n1 7\n5 2\n3 4\n5 1\n4 7\n2 6\n7 8\n6 1\n5 7\n4 3\n3 8\n2 4\n1 1\n''') == '3 2 1'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n\nassert solution(\"9\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution([1, 4, 2, 5, 3, 6]) == '1 2'"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\n1 4\\n2 5\\n3 6\\n') == '1 2'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1 1'\nassert solution('2') == '1 2'\nassert solution('2') == '2 1'\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"1 2\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"1 2\"\n\n\n'''\n\n'''\n\nx,y = 0,0\nfor i in range(int(input())):\n    a,b = map(int,input().split())\n    x = x ^ a\n    y = y ^ b"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"1 2\"\nassert solution(\"2\\n3\\n1\\n\") == \"1 2\"\nassert solution(\"3\\n1\\n2\\n\") == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == \"2 1\"\nassert solution('2') == \"2 1\"\nassert solution('3') == \"1 2\""
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2 1\"\nassert solution(\"5\") == \"1 1\"\nassert solution(\"6\") == \"2 1\"\n"
    },
    {
        "number": 3910,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n1\\n\") == \"1 2\"\nassert solution(\"2\\n2\\n2\\n\") == \"-1\"\nassert solution(\"3\\n1\\n2\\n\") == \"-1\"\nassert solution(\"5\\n1\\n4\\n1\\n\") == \"1 2\"\nassert solution(\"1\\n5\\n1\\n1\\n\") == \"1 2\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2 1'\nassert solution('8') == '4'\nassert solution('3') == '2 1'\n\n\"\"\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n1''') == '2 1'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2 1\"\nassert solution(\"3\") == \"2 1 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '2 1'\nassert solution('8\\n') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2 1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '1 1'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2 1'\nassert solution('3') == '2 1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3911,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''1\n\nOutput\n\n1''') == '1'\nassert solution('''2\n\nOutput\n\n2 1''') == '2 1'\nassert solution('''3\n\nOutput\n\n2 1''') == '2 1'\nassert solution('''8\n\nOutput\n\n4''') == '4'\n\ninput()\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('Input') == 'Input'\nassert solution('Output') == 'Output'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '2\\n02 TrrT 20'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\nee\n5\nabbbbaaab''') == '3 abbbaaab'\nprint(solution('''3\nee\n5\nabbbbaaab'''))\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('8') == '1'\nassert solution('2') == '2'\nassert solution('0rTrT022') == '2'\nassert solution('aA') == 'a A'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == \"1\"\nassert solution(\"0rTrT022\") == \"2\"\nassert solution(\"aA\") == \"2\"\nassert solution(\"rTrT022\") == \"1\"\nassert solution(\"aA\") == \"2\""
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '1'\nassert solution('2') == '2'\nassert solution('aA') == '2'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '2'\nassert solution('8') == '2'\nassert solution('0rTrT022') == '2'\nassert solution('aA') == '2'"
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2\"\nassert solution(input) == \"2\""
    },
    {
        "number": 3912,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '1'\nassert solution('') == '2'\nassert solution('a') == '1'\nassert solution('A') == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"2\"\nassert solution('''\n4\na**d\n2\nabcd\nacbd\n\n''') == \"0\"\nassert solution('''\n3\na*a\n2\naaa\naba\n\n''') == \"1\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n\n2\na*a\n2\naaa\naba\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4\na**d\n2\nabcd\nacbd\n\n''') == '2'\nassert solution('''5\nlo*er\n2\nlover\nloser\n\n''') == '0'\nassert solution('''3\na*a\n2\naaa\naba\n\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3\\nabcd\\nacbd\\n') == '1'\nassert solution('4\\na**d\\n2\\nabcd\\nacbd\\n') == '0'\nassert solution('5\\nlover\\n2\\naaa\\naba\\n') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\nlo*er\n2\naaa\naba\n\n''') == '2'\nassert solution('''\n4\na**d\n2\nabcd\nacbd\n\n''') == '0'\nassert solution('''\n3\na*a\n2\naaa\naba\n\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\"\n        \"a**d\"\n        \"2\"\n        \"abcd\") == \"2\"\n\nassert solution(\"5\\n\"\n        \"lo*er\"\n        \"2\"\n        \"lover\"\n        \"loser\") == \"0\"\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4\na**d\n2\nabcd\nacbd\n''') == '2'\n\nassert solution('''\n5\nlo*er\n2\nlover\nloser\n''') == '0'\n\nassert solution('''\n3\na*a\n2\naaa\naba\n''') == '1'\n\nassert solution('''\n4\nabcda\n2\nabcd\nacbd\n''') == '0'\n\nassert solution('''\n5\nlo**er\n2\nlover\nloser\n''') == '1'"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\na**d\n2\nabcd\nacbd\n''') == '2'\nassert solution('''\n3\na*a\n2\naaa\naba\n''') == '1'\n"
    },
    {
        "number": 3913,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5\n*a*b*c*d*e*\na**d\nb*c\nabcd\naaa\naba''') == \"1\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n5 1 1\n1 0 0 0 4\n''') == '1'\n\nassert solution('''\n6 1 2\n3 8 0 1 0 0\n''') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 1 2\") == \"2\"\nassert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"3\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"5 1 1\") == \"1\"\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0') == '2'\n"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('6 1 2') == '2'\nassert solution('5 1 1') == '1'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 1 1') == '1'\nassert solution('6 1 2') == '2'\n\n'''"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 1 1\\n1 0 0 0 4') == '1'\nassert solution('6 1 2\\n3 8 0 1 0 0') == '2'"
    },
    {
        "number": 3914,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 1 1\") == \"1\"\nassert solution(\"6 1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'\nassert solution('1 1') == '40'\nassert solution('1 42') == '1'\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\nassert solution(\"22 47\") == \"1\""
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1') == '40'\nassert solution('1 42') == '1'\nassert solution('6 4') == '172'"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"5 1\n10 2\n\n7 4\n1 2\n\n2 4\n1 2\n\n\"\"\") == \"Palindromic tree is better than splay tree\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''1 1''') == \"40\"\nassert solution('''1 42''') == \"1\"\nassert solution('''6 4''') == \"172\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\nassert solution(\"6 4\") == \"172\"\n\nstdin = \"\"\"2 2\n3 4\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"1 1\n1 42\n6 4\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"1 1\n10 9\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\n"
    },
    {
        "number": 3915,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"40\"\nassert solution(\"1 42\") == \"1\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"4\") == \"6\"\n\nprint(solution(input()))\n\n\"Everything has been planned out. No more hidden conflicts. The condition of Cytus is perfect.\\n\"\n\nThe time right now...... 00:01:12......\n\nIt's time.\"\n\nThe emotion samples are now sufficient. After almost 3 years, it's time for Ivy to awake her bonded sister, Vanessa.\n\nThe system inside A.R.C.'s Library core can be considered as an undirected graph with infinite number of processing nodes, numbered with all positive integers ($1, 2, 3, \\ldots$). The node with a number $x$ ($x > 1$), is directly connected with a node with number $\\frac{x}{f(x)}$, with $f(x)$ being the lowest prime divisor of $x$.\n\nVanessa's mind is divided into $n$ fragments. Due to more than 500 years of coma, the fragments have been scattered: the $i$-th fragment is now located at the node with a number $k_i!$ (a factorial of $k_i$).\n\nTo maximize the chance of successful awakening, Ivy decides to place the samples in a node $P$, so that the total length of paths from each fragment to $P$ is smallest possible. If there are multiple fragments located at the same node, the path from that node to $P$ needs to be counted multiple times.\n\nIn the world of zeros and ones, such a requirement is very simple for Ivy. Not longer than a second later, she has already figured out such a node.\n\nBut for a mere human like you, is this still possible?\n\nFor simplicity, please answer the minimal sum of paths' lengths from every fragment to the node $P$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 number of fragments of Vanessa's mind.\n\nThe second line contains $n$ integers: $k_1, k_2, \\ldots, k_n$ ($0 \\le k_i \\le 5000$), denoting the nodes where fragments of Vanessa's mind are located: the $i$-th fragment is at the node with a number $k_i!$.\n\n\n-----Output-----\n\nPrint a single integer, denoting the minimal sum of path from every fragment to the node $P$ (a.k.a. node $P$).\n\nAs a reminder, if there are multiple fragments at the same node, the distance from that node to $P$ needs to be counted multiple times as well.\n\n\n-----Examples-----\nInput\n3\n2 1 4\n\nOutput\n5\n\nInput\n4\n3 1 4 4\n\nOutput\n6\n\nInput\n5\n3 1 4 1 5\n\nOutput\n6\n\nInput\n5\n3 1 4 1 5\n\nOutput\n11\n\n\n\n-----Note-----\n\nConsidering the first $24$ nodes of the system, the node network will look as follows (the nodes $1!$, $2!$, $3!$, $4!$ are drawn bold):\n\n[Image]\n\nFor the first example, Ivy will place the emotion samples at the node $1$. From here:\n\n  The distance from Vanessa's first fragment to the node $1$ is $1$.  The distance from Vanessa's second fragment to the node $1$ is $0$.  The distance from Vanessa's third fragment to the node $1$ is $4$. \n\nThe total length is $5$.\n\nFor the second example, the assembly node will be $6$. From here:\n\n  The distance from Vanessa's first fragment to the node $6$ is $0$.  The distance from Vanessa's second fragment to the node $6$ is $2$.  The distance from Vanessa's third fragment to the node $6$ is $2$.  The distance from Vanessa's fourth fragment to the node $6$ is again $2$. \n\nThe total path length is $6$.\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''2\n2 1 4\n''') == '5'\nassert solution('''4\n3 1 4 1\n''') == '11'\nassert solution('''5\n3 1 4 1 5\n''') == '15'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 1 4\") == \"5\"\nassert solution(\"3 1 4 4\") == \"6\"\nassert solution(\"4\") == \"11\""
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(sys.stdin.read()) == \"11\"\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n2 1 4\n''') == '5'\nassert solution('''4\n3 1 4 1\n''') == '11'\nassert solution('''5\n3 1 4 1 5\n''') == '16'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"11\"\nassert solution(\"\") == \"5\"\nassert solution(\"2\") == \"6\"\nassert solution(\"5\") == \"11\"\n\nimport os, sys, atexit\nfrom signal import SIGTERM\n\nclass TimeoutError(Exception):\n    pass\n\nclass Timeout:\n    def __init__(self, seconds=1, error_message='Timeout'):\n        self.seconds = seconds\n        self.error_message = error_message\n\n    def handle_timeout(self, signum, frame):\n        raise TimeoutError(self.error_message)\n\n    def __enter__(self):\n        signal.signal(signal.SIGALRM, self.handle_timeout)\n        signal.alarm(self.seconds)\n\n    def __exit__(self, type, value, traceback):\n        signal.alarm(0)"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2 1 4\n''') == '5'\nassert solution('''\n4\n3 1 4 1\n''') == '6'\nassert solution('''\n5\n3 1 4 1 5\n''') == '11'"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '5'\nassert solution('4') == '6'\nassert solution('5') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n2 1 4\n\n4\n3 1 4 1\n\n5\n3 1 4 1 5\n\n6\n3 1 4 1 5 6\n''') == '11'\nassert solution('''\n4\n3 1 4 1\n\n5\n3 1 4 1 5\n\n6\n3 1 4 1 5 6\n''') == '11'\nassert solution('''\n4\n3 1 4 1 5\n\n5\n3 1 4 1 5 6\n''') == '11'\nassert solution('''\n5\n3 1 4 1 5 6\n\n6\n3 1 4 1 5 6 6\n''') == '11'\n"
    },
    {
        "number": 3916,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2 1 4\") == \"5\"\n\nfrom typing import List"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 0 0 -1\") == \"1\"\nassert solution(\"2 -1\") == \"2\""
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 0 0 -1') == '1'\nassert solution('2\\n1 -1') == '2'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1 0 0 -1\"\"\") == \"1\"\nassert solution(\"\"\"2 1 -1\"\"\") == \"2\"\nassert solution(\"\"\"5 -4 -2 0 -2 -1\"\"\") == \"4\"\nassert solution(\"\"\"4 -2 1 0 -1\"\"\") == \"3\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n1 0 0 -1\n''') == '1'\n\nassert solution('''\n3\n-4 -2 2\n''') == '1'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''1 0 0 -1\n2 -1''') == '1'\nassert solution('''1 0 0 -1\n2 0''') == '1'\nprint(solution(input()))"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 0 0 -1''') == '1'\nassert solution('''1 -1''') == '2'\nassert solution('''10 -20''') == '30'\nassert solution('''1 -2''') == '3'\nassert solution('''10 -20''') == '40'\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3\\n-1 0 1') == '2'\nassert solution('5\\n-1 0 2 3 4') == '3'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '0'\nassert solution('-1') == '0'"
    },
    {
        "number": 3917,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 0 0 -1\n2 1 1 1\n4 1 1 1\n4 2 2 2\n''') == '1'\nassert solution('''3\n1 0 0 -1\n2 1 1 1\n4 1 1 1\n4 2 2 2\n''') == '2'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 0 0\n1 2\n2 3\n''') == '0'\n\nassert solution('''\n2 1 0\n1 2\n2 2\n''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 0 0\") == \"2\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 5 7\") == \"1\"\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"2 0 0\\n1 2\\n2 3\\n\") == \"2\"\nassert solution(\n    \"2 1 0\\n1 2\\n2 2\\n\") == \"0\"\nassert solution(\n    \"2 5 7\\n3 4\\n14 4\\n\") == \"1\""
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 0 0\n1 2\n2 3\n\n''') == '2'\nassert solution('''2 1 0\n1 2\n2 2\n\n''') == '0'\nassert solution('''2 5 7\n3 4\n14 4\n\n''') == '1'\nassert solution('''8 5 8\n4 4\n7 5\n\n''') == '2'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2 0 0\n1 2\n2 3\n\nOutput\n2''') == '2'\nassert solution('''2 1 0\n1 2\n2 2\n\nOutput\n0''') == '1'\nassert solution('''2 5 7\n3 4\n14 4\n\nOutput\n1''') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'\n"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('1 2') == '1'\nassert solution('2 1 0') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '1'\nassert solution('2 5 7') == '1'"
    },
    {
        "number": 3918,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 0 0') == '2'\nassert solution('2 1 0') == '0'\nassert solution('2 5 7') == '1'\nassert solution('4 4') == '0'\nassert solution('1 2') == '1'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 5\") == \"18\""
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5 2') == '6'\nassert solution('5 2') == '6'\nassert solution('5 3') == '8'\nassert solution('5 4') == '8'\nassert solution('5 5') == '8'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == '6'"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"4 3\") == \"6\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '4'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"5 3\") == \"5\"\nassert solution(\"8 8\") == \"1\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '6'\nassert solution('''5 2\n00100\n2 4\n3 5\n''') == '7'\nassert solution('''5 2\n00100\n2 4\n3 5\n''') == '7'\nassert solution('''5 2\n01001\n2 4\n3 5\n''') == '7'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"6\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"4 2\") == \"4\"\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5 2\n01001\n2 4''') == '6'\nassert solution('''5 2\n00100\n2 4''') == '6'\nassert solution('''5 2\n01010\n2 4''') == '7'\nassert solution('''5 2\n01001\n2 4''') == '6'\nassert solution('''5 2\n00100\n2 4''') == '6'\n"
    },
    {
        "number": 3919,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5 2') == '6'\nassert solution('10 10') == '11'\nassert solution('100 200') == '104'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\n\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1 1 1 1 1') == '6'\nassert solution('1 2 1 2 1 2') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_string) == \"13\"\nprint(solution(input_string))\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"6\"\n\"\"\""
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == \"6\"\nassert solution(\"\"\"\n1 2 1 2 1 2\n\"\"\") == \"13\"\nassert solution(\"\"\"\n1 1 1 1 1 1\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1 1 1 1\n''') == '6'\nassert solution('''\n1 2 1 2 1 2\n''') == '13'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('1 1 1 1 1 1\\n') == '6'\nassert solution('1 2 1 2 1 2\\n') == '13'\nassert solution('1 1 1 2 1 2\\n') == '12'\nassert solution('1 1 1 2 1 2\\n') == '12'\nassert solution('1 1 1 2 1 1\\n') == '6'\n"
    },
    {
        "number": 3920,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input(\"\")) == \"13\""
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 3 4 6 9\\n\") == \"4\"\nassert solution(\"9\\n1 2 3 5 6 7 8 9 10\\n\") == \"4\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n2 3 4 6 9\\n') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10\\n') == '4'\n\"\"\"\nimport math\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n2 3 4 6 9\n''') == '4'\nassert solution('''9\n1 2 3 5 6 7 8 9 10\n''') == '4'"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1\\n2 3 4 5 6 7 8 9 10') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'\nassert solution('5\\n2 3 4 5 6 7 8 9 10') == '4'\nassert solution('11\\n2 3 4 5 6 7 8 9 10') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '4'\nassert solution('5') == '4'\nassert solution('10') == '4'\nassert solution('9') == '3'\nassert solution('5 7 9') == '4'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"9\") == \"4\"\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5\\n2 3 4 6 9') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10') == '4'\n\"\"\"\n\na, n = [int(x) for x in stdin.split()]\na.sort()\ncount = 0\nans = 0\nfor i in range(n):\n    if i == 0 or i == 1:\n        count += 2\n        if count < a[i]:\n            ans = count\n        else:\n            ans = count\n    else:\n        count = 1\n        if a[i] == a[i-1] + 1:\n            count += 2\n            if count < a[i]:\n                ans = count\n            else:\n                ans = count\n        else:\n            count = 1\nprint(ans)"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_string) == str(4)"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''5\n2 3 4 6 9\n''') == '4'\nassert solution('''9\n1 2 3 5 6 7 8 9 10\n''') == '4'\nassert solution('''5\n7 8 9 10 11 12 13 14 15\n''') == '5'\n"
    },
    {
        "number": 3921,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 3 4 6 9\\n') == '4'\nassert solution('9\\n1 2 3 5 6 7 8 9 10\\n') == '4'\nassert solution('10\\n1 2 3 5 6 7 8 9 10\\n') == '5'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\") == \"SURGERY COMPLETE\"\nassert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\") == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == 'SURGERY COMPLETE'\nassert solution('1') == 'SURGERY FAILED'"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY COMPLETE\"\nassert solution(\"3\\n5\\n1 2 3 5 6\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY FAILED\"\nassert solution(\"3\\n4\\n1 2 3 4 5\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY FAILED\"\nassert solution(\"3\\n1\\n1 2 3 4 5\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY FAILED\"\nassert solution(\"2\\n3\\n1 2 3 5 6\\n8 9 10 4 11 12 13\\n11\\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\\n\") == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'SURGERY COMPLETE'\nassert solution('2') == 'SURGERY FAILED'\nassert solution('4') == 'SURGERY FAILED'\nassert solution('1') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE'\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == \"SURGERY FAILED\"\nassert solution('3') == \"SURGERY COMPLETE\"\nassert solution('1') == \"SURGERY COMPLETE\"\nassert solution('10') == \"SURGERY COMPLETE\"\nassert solution('5') == \"SURGERY FAILED\"\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input()) == \"SURGERY COMPLETE\"\n\n\n\"\"\"\n\nimport sys\nimport io\nimport time\nimport math"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3 5 6 E 7\\n8 9 10 4 11 12 13\\n11') == 'SURGERY COMPLETE'\nassert solution('4\\n7 8 9 10 4 11 12 13\\n11') == 'SURGERY FAILED'\n\nprint(solution(input()))\n"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE\\n'\n\nassert solution('''\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED\\n'\n\nassert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED\\n'\n\nassert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY COMPLETE\\n'\n\nassert solution('''\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n''') == 'SURGERY FAILED\\n'"
    },
    {
        "number": 3922,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"SURGERY COMPLETE\"\nassert solution(input(\"\")) == \"SURGERY FAILED\""
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 2 1\\n') == '1 2 3'\n\nassert solution('9 2 5\\n') == '6 5 8 3 4 1 9 2 7'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\"\nassert solution(\"9 2 5\") == \"6 5 8 3 4 1 9 2 7\"\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''\n3 2 1\n''') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3 2 1\n''') == '1 2 3'\nassert solution('''9 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nprint('You passed all the tests! Congrats!')\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([9,2,5]) == '6 5 8 3 4 1 9 2 7', \"Wrong solution\"\nassert solution([3,2,1]) == '1 2 3', \"Wrong solution\"\nassert solution([3,2,1]) == '1 2 3', \"Wrong solution\""
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2 1\n''') == '1 2 3'\nassert solution('''\n3 2 1\n''') == '1 2 3'\nassert solution('''\n3 2 1\n''') == '1 2 3'\nassert solution('''\n4 5 3 2 1\n''') == '1 2 3 4 5'\nassert solution('''\n4 5 3 2 1\n''') == '1 2 3 4 5'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 2 5\n''') == '6 5 8 3 4 1 9 2 7'\nassert solution('''3 2 1\n''') == '1 2 3'\n\nassert solution('''7 5 4 6 2 3 9 1 8\n''') == '5 4 6 2 3 9 1 8 7'\n\nassert solution('''2 1\n''') == '1 2'\n\nassert solution('''3 1\n''') == '1 2 3'"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'\nassert solution('3 2 1') == '1 2 3'\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 2 1\") == \"1 2 3\", solution(\"3 2 1\")\nassert solution(\"3 2 5\") == \"1 2 3 4 5 6 7 8\", solution(\"3 2 5\")\nassert solution(\"6 5 2 1\") == \"1 2 3 4 5 6 7 8 9 10 11 12\", solution(\"6 5 2 1\")\n"
    },
    {
        "number": 3923,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('9 2 5') == '6 5 8 3 4 1 9 2 7'\n\n\n\"\"\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n3 2 1\n''') == '3'\nassert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nassert solution('''\n3 2\n1 0 1\n''') == '2'\nassert solution('''\n4 4\n2 8 4 1\n''') == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 1') == \"4\"\nassert solution('3 2') == \"3\"\nassert solution('3 2') == \"3\""
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n3 2 1\n''') == '3'\nassert solution('''\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\nassert solution('''\n3 2\n1 0 1\n''') == '2'\nprint('\"Run\" is good. Great job!')\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"5 1\") == \"4\"\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '4'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '3'\nassert solution('5 1') == '5'\nassert solution('3 2') == '3'\n"
    },
    {
        "number": 3924,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n3 2 1\n''') == '3'\nassert solution('''5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n''') == '5000000000'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n\n\"\"\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\nassert solution(\"bwwwwwwwwwwwwwwbwwww\") == \"4\"\nassert solution(\"bwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '5'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n\"\"\"\n\n\"\"\"\nA few hints:\n\nUse a stack\n\"\"\"\nfrom collections import deque\nfrom typing import Deque"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"bwwwbwwbw\") == \"5\"\nassert solution(\"bwwbwwb\") == \"3\"\n"
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == \"5\""
    },
    {
        "number": 3925,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('bwwwbwwbw') == '5'\nassert solution('bwwbwwb') == '3'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"10\"\nassert solution(\"4 4\") == \"7\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 1\") == \"1\""
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 5\\n3 2\\n1 2\\n') == '10'\nassert solution('4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....\\n') == '7'\nassert solution('1 1\\n') == '1'\nassert solution('1 1\\n+') == '1'\nassert solution('1 1\\n*') == '0'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n''') == \"10\"\nassert solution('''\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n''') == \"7\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 4\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '10'\nassert solution('''4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '7'"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2\\n.....\\n.***.\\n...**\\n*....\\n\") == \"10\"\nassert solution(\"4 4\\n2 2\\n0 1\\n....\\n..*.\\n....\\n....\\n\") == \"7\"\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"10\"\n\nprint(solution())"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == '10'\nassert solution() == '7'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '10'\nassert solution('''\n4 5\n2 2\n0 1\n....\n..*.\n....\n....\n\n''') == '7'\n'''\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\n'''\n4 4\n2 2\n0 1\n....\n..*.\n\n''') == '10'\n"
    },
    {
        "number": 3926,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\n''') == '10'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 4 2 2\") == \"2\"\nassert solution(\"6\") == \"2\""
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n1 4 2 2\n''') == '2'\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n1 4 2 2\\n') == '2'\nassert solution('6\\n1 2 4 4 4 9\\n') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n4\n1 4 2 2\n''') == '2'\n\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1 4 2 2\n1 2 4 4 4 9''') == '2'\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 2 2\") == \"2\"\nassert solution(\"6\\n1 2 4 4 4 9\") == \"2\"\n"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INPUT_S) == OUTPUT_S\n\n\n\"\"\"\n\n\nfrom typing import List\nimport sys\nimport collections"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2\n1 2\n''') == '2'\n\nassert solution('''\n3\n2 1 2\n''') == '3'\n\nassert solution('''\n4\n2 4 2 2\n''') == '2'\n\nassert solution('''\n6\n1 2 4 4 4 9\n''') == '2'\n\nassert solution('''\n6\n1 2 3 5 6\n''') == '3'"
    },
    {
        "number": 3927,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 4 2 2\") == \"2\"\nassert solution(\"6\") == \"2\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3 1') == '7'\nassert solution('4 1 1') == '4'\nassert solution('4 10 1') == '12'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1\\naba\") == \"7\"\nassert solution(\"4 1 1\\nabcd\") == \"4\"\nassert solution(\"4 10 1\\naaaa\") == \"12\""
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1\") == '7'\nassert solution(\"4 1 1\") == '4'\nassert solution(\"4 10 1\") == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 3 1\naba\n''') == '7'\nassert solution('''4 1 1\naaaa\n''') == '12'\nassert solution('''4 10 1\naaaa\n''') == '12'\nassert solution('''4 20 1\naaaaa\n''') == '22'"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3 1\naba''') == '7'\n\nassert solution('''4 1 1\naaaa''') == '12'\n\nassert solution('''4 10 1\naaaa''') == '12'\n\n\nassert solution('''3 3 1\naba\n\n3 3 1\naaa\n\n3 3 1\naab\n\n4 1 1\naaaa\n\n4 10 1\naaaaa\n\n4 10 1\naaaaa''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('5 5 1\\nabcd') == '12'\nassert solution('4 10 1\\nabcd') == '12'\nassert solution('4 10 2\\nabcd') == '12'\nassert solution('4 100 2\\nabcd') == '12'\nassert solution('4 10000 2\\nabcd') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4 1 1\\naba') == '7'\nassert solution('4 10 1\\naba') == '12'\nassert solution('4 10 1\\naaaa') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3 3 1\naba\n''') == '7'\nassert solution('''4 1 1\naaaa\n''') == '4'\nassert solution('''4 10 1\naaaa\n''') == '12'\n"
    },
    {
        "number": 3928,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1\") == \"7\"\nassert solution(\"4 1 1\") == \"4\"\nassert solution(\"4 10 1\") == \"12\""
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\nfrom math import ceil\n\nn, k = map(int, stdin.split())\nans = 0"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(sys.stdin.read()) == '1'"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 5\") == \"1\"\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\n\n\"\"\"\n\nn, k = map(int, stdin.split())\nnums = range(1, n+1)\ndeq = []\n\nfor _ in range(k):\n    deq.append(nums.pop(0))\n    nums.append(deq.pop())\n\nprint(len(deq))"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''2 1\n1 2\n''') == '1'\n"
    },
    {
        "number": 3929,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 1') == '8', \"Wrong\"\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n\n'''"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''4 2\n2 2 2 2\n''') == '8'\nassert solution('''4 -3\n3 -6 -3 12\n''') == '3'"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 2 2 2') == '8'\nassert solution('4 -3\\n3 -6 -3 12') == '3'\nprint(solution('5 7\\n1 2 2 2 3 4\\n5 5 5 5 5 5'))"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''4 2\n2 2 2 2''') == '8'\nassert solution('''4 -3\n3 -6 -3 12''') == '3'\nassert solution('''3 -6 -3 12\n3 -6 -3 12''') == '2'\nassert solution('''3 -6 -3 12\n3 -6 -3 12''') == '1'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == \"8\""
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4 2') == '8'\nassert solution('4 -3') == '3'\n"
    },
    {
        "number": 3930,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 2 2 2\\n\") == \"8\"\nassert solution(\"4 -3\\n3 -6 -3 12\\n\") == \"3\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''5 5 3 1 8''') == '11'\nassert solution('''4 2 1 300 1000''') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''3 5 3 1 8\n    a A\n    A aa\n    aa AA\n    AA a\n''') == \"11\"\n\nassert solution(\n'''4 2 1 300 1000\n    a A\n    A aa\n    aa AA\n    AA a\n''') == \"5\"\n\n'''"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3, 1, 5, 3, 1, 2]) == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 5 3 1 8\") == \"11\"\nassert solution(\"4 2 1 300 1000\") == \"5\"\nprint(solution(input()))\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 5 3 1 8') == '11'\nassert solution('4 2 1 300 1000') == '5'\n"
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == \"11\""
    },
    {
        "number": 3931,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 2 3 5') == '5'\nassert solution('1 2 3 5 4') == '6'\nassert solution('1 2 3 5 5') == '10'\nassert solution('1 2 3 5 5 3') == '10'\nassert solution('2 3 4 5') == '0'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(__import__('sys').stdin.read()) == \"YES\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n1 1 1 4\\n') == 'YES'\nassert solution('5\\n1 1 5 2 1\\n') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"5\\n1 1 5 2 1\") == \"YES\"\n\n\n'''\nfrom math import ceil\nimport heapq\n\nclass Tree:\n    def __init__(self, node_id, c = 0):\n        self.id = node_id\n        self.c = c\n        self.left = None\n        self.right = None\n        self.parent = None\n        self.right_size = 0\n        self.is_left = True\n    \n    def get_size(self):\n        return self.right_size + 1\n    \n    def get_depth(self):\n        if self.left is None:\n            return 0\n        return self.left.get_depth() + 1\n    \n    def has_left(self):\n        return self.left is not None\n    \n    def has_right(self):\n        return self.right is not None\n    \n    def has_parent(self):\n        return self.parent is not None"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2') == 'NO'\nassert solution('1') == 'YES'\nassert solution('5') == 'NO'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1 4') == 'YES'\nassert solution('5 1 5 2 1') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4\\n') == 'YES'\nassert solution('5\\n1 1 5 2 1\\n') == 'NO'\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 4') == 'YES'\nassert solution('5\\n1 1 5 2 1') == 'NO'\nassert solution('4\\n1 2 1 4') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 4\") == \"YES\"\nassert solution(\"5 1 5 2 1\") == \"NO\""
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 1 1 4\\n\") == \"YES\"\nassert solution(\"4\\n1 1 1 4\\n\") == \"NO\"\nassert solution(\"6\\n1 1 1 2 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 3932,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nprint(solution())\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n5\n10 5 0 -5 -10\n\n''') == '-15'\n\nassert solution('''\n4\n1 1 1 1\n\n''') == '1'\n\nassert solution('''\n2\n900 1000\n\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1\\n3\\n1 1 1 1') == '-15'\nassert solution('3\\n10 5 0 -5 -10') == '-15'\nassert solution('3\\n1 1 1 1') == '1'\nassert solution('4\\n1 1 1 1') == '1'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_string) == output_string\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''5\n10 5 0 -5 -10''') == '-15'\n\nassert solution('''4\n1 1 1 1''') == '1'\n\nassert solution('''2\n900 1000''') == '1100'"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\n\nassert solution('''4\n1 1 1 1\n''') == '1'\n\nassert solution('''2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 5 0 -5 -10\\n\") == \"-15\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"1\"\nassert solution(\"2\\n900 1000\\n\") == \"1100\"\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\n10 5 0 -5 -10\n''') == '-15'\nassert solution('''3\n5 1 -5\n''') == '-5'\nassert solution('''4\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"-15\"\nassert solution(\"4\") == \"1\"\nassert solution(\"2\") == \"1100\"\nassert solution(\"3\") == \"-5\"\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n5\n10 5 0 -5 -10\n''') == '-15'\n\nassert solution('''\n4\n1 1 1 1\n''') == '1'\n\nassert solution('''\n2\n900 1000\n''') == '1100'\n"
    },
    {
        "number": 3933,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n2 3 4\n''') == '8'\nassert solution('''4\n1 2 3 -1\n''') == '3'\nassert solution('''5\n5 -2 4 1 0\n''') == '6'\n\nstdin = \"\"\"\n2\n2 2\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'YES'\nassert solution('''\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO'\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2') == 'NO'\nassert solution('6\\n1 2') == 'YES'\n\nassert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == 'YES'\nassert solution('6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n3 8') == 'NO'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'NO', 'Invalid output'\n\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n''') == 'YES', 'Invalid output'"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 2\n\n''') == \"YES\", \"1\"\nassert solution('''\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n\n''') == \"NO\", \"2\"\nassert solution('''\n5\n1 2\n1 3\n1 4\n2 5\n2 6\n\n''') == \"YES\", \"3\"\n\nassert solution('''\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n\n''') == \"NO\", \"4\"\n\n\n'''\n\n###################################################\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n    3\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n    ''') == \"YES\"\n\nassert solution('''\n    5\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n    ''') == \"YES\"\n\nassert solution('''\n    6\n    1 2\n    1 3\n    1 4\n    2 5\n    2 6\n    ''') == \"NO\"\n\nassert solution('''\n    4\n    1 2\n    1 3\n    1 4\n    2 5\n    ''') == \"NO\"\n\nassert solution('''\n    10\n    1 2\n    1 3\n    1 4\n    1 5\n    2 6\n    2 7\n    2 8\n    2 9\n    3 10\n    ''') == \"NO\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n1 2\n\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n1 2\n\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n3\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\"\"\") == \"NO\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n1 3\\n1 4\") == \"YES\"\nassert solution(\"5\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"YES\"\nassert solution(\"6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\") == \"NO\""
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n1 3\n1 4\n2 5\n2 6''') == 'YES'\nassert solution('''5\n1 2\n1 3\n1 4\n2 5\n2 6''') == 'NO'\n\nassert solution('''6\n1 2\n1 3\n1 4\n2 5\n2 6''') == 'NO'\n"
    },
    {
        "number": 3934,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"NO\", \"Two simple paths\"\nassert solution(\"1 2\") == \"YES\", \"One simple path\"\nassert solution(\"1 2 1 2\") == \"NO\", \"Non-simple paths\"\nassert solution(\"2 1 2 3 1\") == \"NO\", \"Non-simple paths\"\nassert solution(\"4 5 3 2 1\") == \"YES\", \"Non-simple paths\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1\\n2 3\\n') == '1\\n2'\nassert solution('2\\n2 6\\n') == '0\\n'\nassert solution('3\\n1 2 3\\n') == '0\\n'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n3\n1 2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n2\n2 6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n4\n4 1 4 5\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3\n3 5 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n2 6\n\"\"\") == \"0\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 2 3\\n') == '1'\nassert solution('2 6\\n') == '0'\nassert solution('5 2 3\\n') == '2'\nassert solution('3 2 5\\n') == '0'\nassert solution('7 2 7\\n') == '3'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2\n3\n2 5\n3 4\n4 6''') == '0'\nassert solution('''3\n3\n1 5\n2 6\n4 5''') == '1'\nassert solution('''2\n2\n1 2\n3''') == '2'\nassert solution('''2\n2\n2 2\n3''') == '1'\nassert solution('''3\n3\n1 5\n2 6\n4 5''') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"2 7\") == \"0\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"2 5\") == \"0\"\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('2') == '0'"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2 3\\n') == '1'\nassert solution('2 6\\n') == '0'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '1'\n\nassert solution(input()) == '2 4'\n"
    },
    {
        "number": 3935,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '0'\nassert solution('1 2 3\\n') == '1'\nassert solution('2 6\\n') == '0'"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"12\"\nassert solution(\"5\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('7') == '9'\nassert solution('14') == '61'\nassert solution('20') == '60'\nassert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"12\"\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\"\n    ) == \"6\"\n\"\"\"\n\nfrom itertools import product\nimport sys\nsys.setrecursionlimit(100000)\n\nN = int(input())\nS1 = input()\nS2 = input()"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '1'\nassert solution('aab') == '2'\nassert solution('ccb') == '3'\n\"\"\""
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('7') == '1'\nassert solution('18') == '1'\n"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.read()) == \"6\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"4\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 3936,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('a') == '0'\nassert solution('aab') == '1'\nassert solution('ccb') == '1'\nassert solution('aaab') == '2'\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"100 100 5\") == \"YES\"\nassert solution(\"100 8 5\") == \"NO\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input(str())) == 'NO'\n\n\n\nstdin = '''\n100 100 5\n5 2 1 2 1\n'''\nstdout = '''\nYES\n'''\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 100 5') == 'YES'\nassert solution('10 100 8') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"100 100 5\\n5 2 1 2 1\") == \"YES\"\nassert solution(\"100 8 5\\n1 2 3 4 5 6 7\") == \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('100 8 5\\n5 2 1 2 1') == 'NO'\n\n\n'''\n"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('100 100 5\\n5 2 1 2 1') == 'YES'\nassert solution('100 8 5\\n1 2 3 4 5 6 7') == 'NO'"
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('100 100 5') == 'YES'\nassert solution('100 8 5') == 'NO'\n\n\"\"\""
    },
    {
        "number": 3937,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7\") == \"YES\"\nassert solution(\"100 100 7\") == \"NO\""
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10 2\\n4 1 5 10') == '4'\nassert solution('7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2') == '3'\nassert solution('100 500\\n800 100\\n150 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n500 100\\n100 100\\n150 100\\n400 100\\n100 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n400 100\\n100 100\\n100 100\\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == 3, \"Wrong answer!\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n''') == 4\n\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == 3\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n10 2\n4 1 5 10\n1 4 10 5\n\n''') == '4', 'Not 4!'\nassert solution('''\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\n''') == '3', 'Not 3!'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n8 7\n1 4 5 1\n1 4 5 1\n1 4 5 1\n1 4 5 1\n2 5 5 5\n1 6 5 1\n1 6 5 1\n1 6 5 1\n1 6 5 1\n''') == '6'\nassert solution('''\n9 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n''') == '6'\nassert solution('''\n7 3\n3 5 2 6 1\n6 7 2 8 1\n2 5 3 4 1\n1 6 6 1 8\n1 7 5 1 6\n3 1 5 2 6\n6 8 5 1 2\n2 4 3 1 7\n''') == '20'\nassert solution('''\n10 3\n6 2 5 5\n3 6 6 5\n8 4 6 5\n7 4 3 5\n7 6 5 3\n8 2 1 5\n1 4 7 7\n2 7 3 3\n1 7 5 7\n2 5 4 4\n''') == '20'\nassert solution('''\n100000 8\n10 100000 2\n1 10 10 1\n1 10 10 1\n1 10 10 1\n1 10 10 1\n1 10 10 1\n1 10 10 1\n1 10 10 1\n1 10 10 1\n''') == '2147483648'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 3, \"1st example\"\nassert solution() == 4, \"2nd example\"\nassert solution() == 1, \"3rd example\"\nassert solution() == 2, \"4th example\"\nassert solution() == 3, \"5th example\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10 2\\n4 1 5 10\\n1 4 10 5\\n\") == \"4\"\nassert solution(\"7 6\\n2 1 2 1\\n4 2 4 3\\n2 5 2 5\\n2 3 5 3\\n1 2 1 2\\n3 2 5 3\\n\") == \"3\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 1 1\n1 1 1\n1 1 1\n''') == '5'\nassert solution('''4 4\n1 1 2 1\n2 2 2 2\n1 2 3 2\n3 3 3 3\n''') == '3'\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"3\"\nassert solution_slow() == \"4\"\n\"\"\"\n"
    },
    {
        "number": 3938,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''10 2\n4 1 5 10\n1 4 10 5\n''') == \"4\"\n\nassert solution('''7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n''') == \"3\"\n\nassert solution('''3 3\n1 1 2 1\n2 2 2 2\n1 1 2 1\n''') == \"4\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'no\\no\\no\\no\\no'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 5 2 6 1\") == \"yes\"\nassert solution(\"5 3\\n1 6\") == \"no\"\nassert solution(\"5 3\\n1 6\\n6\") == \"no\"\nassert solution(\"5 3\\n6\") == \"yes\"\nassert solution(\"5 3\\n1 6\\n3 2\") == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"yes\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 'yes'\nassert solution() == 'no'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == 'no'\nassert solution('''\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n''') == 'yes'"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"yes\\nno\\nno\\nno\\nno\"\n\"\"\"\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'no'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\nassert solution('''5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10''') == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == 'no'\nassert solution(\"\"\"\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == 'yes'\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 5 2 6 1') == 'no'\nassert solution('5 3\\n1 6 2 6 1') == 'yes'\nassert solution('5 3\\n6 2 2 2 2 1') == 'yes'\n\n'''\nimport sys\n"
    },
    {
        "number": 3939,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input) == \"no\\nyes\\nno\\nno\\nyes\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\""
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3\n1 3\n2 5\n4 5\n''') == '2'\nassert solution('''4 2\n1 4\n2 4\n''') == '3'\nassert solution('''5 2\n1 4\n2 4\n''') == '1 2'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 3\n2 5\n4 5\n''') == '2'\nassert solution('''4 2\n1 4\n2 4\n''') == '3'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 3') == '2'\nassert solution('4 2') == '3'\nassert solution('10 5') == '10 5 0 0 1 0 2 2 1 0 1 1'"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 4') == '2'\nassert solution('4 2\\n1 4') == '3'\nassert solution('4 2\\n1 3') == '3'\nassert solution('5 2\\n1 4') == '2'\nassert solution('5 2\\n2 5') == '4'\n"
    },
    {
        "number": 3940,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"2\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 0 1\\n2 1 3\\n2 1 2\\n2 2 3\") == \"NO\"\nassert solution(\"3 3\\n1 0 1\\n3 1 2 3\\n2 1 2\\n1 3\") == \"YES\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == 'NO'\n\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n'''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n'''\n) == 'NO'\nassert solution(\n'''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n'''\n) == 'YES'\nassert solution(\n'''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n'''\n) == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('3 3') == 'NO'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == 'YES'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 0 1\") == \"NO\"\nassert solution(\"1 0 1\") == \"NO\"\n"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\n''') == 'NO', 'First Example'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'YES', 'Second Example'\nassert solution('''3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\n''') == 'NO', 'Third Example'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input) == 'YES'"
    },
    {
        "number": 3941,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n    \"()((#((#(#(#)\") == \"2\"\nassert solution(\n    \"((#)((#)\") == \"1\"\nassert solution(\n    \"()((#((#(#(#)\") == \"2\"\nassert solution(\n    \"(((#)\") == \"-1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"((((#)(((#))\" ) == \"2\"\nassert solution(\"(((#)((#)\") == \"2\"\nassert solution(\"()((#((#))\") == \"2\"\nassert solution(\"#)\") == -1\nassert solution(\"((#(#)))\") == -1\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('(((#)((#)') == '1'\n\nassert solution('()((#((#(#()') == '2'\n\nassert solution('(((#)))((#)') == '2'\n\nassert solution
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '2'\nassert solution(input) == '2'\nassert solution(input) == '-1'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"()((#((#(#()\") == \"2\"\nassert solution(\"#\") == \"-1\"\nassert solution(\"(((#)((#)\") == \"2\"\nassert solution(\"(#)\") == \"-1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"()((#(#(#(#()\") == \"1\"\nassert solution(\"(#(#(#(#)\") == \"1\"\nassert solution(\"(#)\") == \"0\"\nassert solution(\"()\") == \"0\"\nassert solution(\"#)\") == \"0\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''(((#)((#)''') == '1'\nassert solution('''()((#((#(#()''') == '2'\nassert solution('''(((#)''') == '-1'\nassert solution('''(#)''') == '-1'\nassert solution('''()''') == '0'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"(()(#(#))\") == \"1\"\nassert solution(\")(()(#(#))\") == \"2\"\nassert solution(\"(((#)((#)\") == \"1\"\nassert solution(\"(()((#(#))\") == \"2\"\nassert solution(\"((((#(#))\") == \"1\"\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('(((#)((#)') == '1'\nassert solution('()((#((#(#()') == '2'\nassert solution('#') == '-1'\nassert solution('#') == '-1'\nassert solution('()(())') == '2'\n"
    },
    {
        "number": 3942,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"-1\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '-16'\nassert solution('0 4') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"-1\"\nassert solution(\"3 0\") == \"-1\"\nassert solution(\"10 10\") == \"42\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'\nassert solution('0 4') == '-16'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '-16'\nassert solution('0 4') == '-16'\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"0 4\") == \"16\"\nprint(solution(input()))\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 3') == '-1'\nassert solution('4 0') == '16'"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 3\n''') == '-1'\nassert solution('''\n0 4\n''') == '-16'\nprint(solution('''\n10 1\n'''))\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"-16\"\nassert solution(\"5 0\") == \"-25\"\nassert solution(\"10 5\") == \"xxxxxxxxx\"\n"
    },
    {
        "number": 3943,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"-1\"\nassert solution(\"4 0\") == \"16\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1 1 1\n''') == '17'\nassert solution('''\n2 2 2\n''') == '0'\nassert solution('''\n3 3 3\n''') == '0'\nassert solution('''\n4 4 4\n''') == '0'\nassert solution('''\n5 5 5\n''') == '0'"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\\n\") == \"17\"\nassert solution(\"1 1 1\\n\") == \"17\"\nassert solution(\"1 1 1\\n\") == \"17\"\nassert solution(\"1 1 1\\n\") == \"17\"\nassert solution(\"1 1 1\\n\") == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\\n\") == '17'\nassert solution(\"1 2 1\\n\") == '17'\nassert solution(\"2 1 2\\n\") == '16'\nassert solution(\"2 2 2\\n\") == '16'\nassert solution(\"2 3 2\\n\") == '16'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1\") == \"17\"\nassert solution(\"3 2 3\") == \"34\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\\n\") == \"17\"\nassert solution(\"1 1 2\\n\") == \"17\"\nassert solution(\"1 2 3\\n\") == \"17\"\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1 1 1') == '17'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 1 2') == '7'\nassert solution('2 1 1') == '16'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1 1 1\n''') == '17'\nassert solution('''\n3 4 4\n''') == '13'\nassert solution('''\n1 2 3\n''') == '4'\n"
    },
    {
        "number": 3944,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1 1') == '17'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3 2\n1 2\n2 1\n''') == '2 2 2'\n\nassert solution('''\n2 2\n1 2\n2 1\n''') == '2 3'\n\nprint(solution(input()))"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '2 2 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '2 2 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 1\\n2 1 2\") == \"2 2 2\"\nassert solution(\"2 2\\n1 2\\n3 4\") == \"2 3\"\n\n\n\"\"\"\n\nfrom typing import List\n\nimport pytest\n\n\n@pytest.mark.parametrize(\"in_str,expected\",\n                         [\n                             (\"2 3\", \"2 2 2\"),\n                             (\"2 2\", \"2 2 2\"),\n                         ])\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution([2, 3]) == '2 2 2'\nassert solution([2, 2]) == '2 2 2'\nassert solution([3, 3]) == '3 3 3'\nassert solution([3, 2]) == '3 3 3'\nassert solution([1, 1]) == '1 1 1'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2 3') == '2 2 2'\nassert solution('2 2') == '2 2 2'\nassert solution('3 4') == '3 2 3'"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '3 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"2 2 2\"\nassert solution(\"2 2\") == \"2 2 2\"\nassert solution(\"1 2\") == \"2 2\"\nassert solution(\"3 4\") == \"3 2\""
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 2 1\n2 1 2\n3 4\n''') == '2 2 2'\nassert solution('''\n3 3\n1 2 1\n2 1 2\n3 4\n''') == '2 3 2'\nassert solution('''\n3 2\n1 2\n3 4\n''') == '3 2 2'\nassert solution('''\n2 2\n1 2\n3 4\n''') == '3 2 2'\nassert solution('''\n2 1\n1 2\n3 4\n''') == '2 1 2'\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"2 2 2\"\nassert solution(\"2 2\") == \"2 2 2\"\nassert solution(\"2 2\") == \"2 2 2\"\nassert solution(\"5 5\") == \"5 5 5\"\nassert solution(\"3 3\") == \"3 3 3\"\n"
    },
    {
        "number": 3945,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 3\n1 2 1\n2 1 2\n''') == '2 2 2'\nassert solution('''2 2\n1 2\n3 4\n''') == '2 3'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\nassert solution('''\n3 5\n0 1 1 1 1\n4 3 5\n''') == '974061117'\nassert solution('''\n2 1\n1\n1\n''') == '1.3333333333'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 2') == '332748119'\nassert solution('1 1') == '3'\nassert solution('2 1') == '3'\nassert solution('1') == '1'\nassert solution('1 1 1 1 1') == '1'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''1 2\n1\n1\n''') == '3'\nassert solution('''3 3\n0 1 1\n4 3 5\n''') == '160955686'"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution() == '332748119'\nassert solution(stdin_up=True) == '185138929'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 1') == '332748119'\nassert solution('1 2') == '332748119'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3 3') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(input_) == output_\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 1\n0 1\n2 1\n''') == '332748119'\nassert solution('''\n1 2\n1\n1\n''') == '3'\nassert solution('''\n3 3\n0 1 1\n4 3 5\n''') == '160955686'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(ex_0) == '332748119'\nassert solution(ex_1) == '160955686'\nassert solution(ex_2) == '974061117'\n"
    },
    {
        "number": 3946,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''2 1\n0 1\n2 1\n''') == '332748119'\n\nassert solution('''1 2\n1\n1\n''') == '3'\n\nassert solution('''1 2\n1\n1\n''') == '160955686'"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"3 1 5 2 6\") == \"11\"\nassert solution(\"5\") == \"6\"\nassert solution(\"5\") == \"6\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"6\"\nassert solution(f\"{sys.stdin.read()}\\n\") == \"11\"\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5') == '11'\nassert solution('4') == '6'\nassert solution('3') == '3'\nassert solution('2') == '2'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n3 1 5 2 6') == '11'\nassert solution('5\\n1 2 3 4 5') == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '1'\nassert solution('2') == '1'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5\n3 1 5 2 6\n''') == '11'\nassert solution('''5\n1 2 3 4 5\n''') == '6'\nassert solution('''5\n1 100 101 100 1\n''') == '102'\nprint('All tests passed!')"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '5'\nassert solution('10') == '10'\nassert solution('5') == '5'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5') == '11'\nassert solution('2') == '5'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3947,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"11\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"Yes\"\nassert solution(\"3 1\") == \"No\"\nassert solution(\"10 5\") == \"Yes\"\n\n\"\"\"\n\n\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2 2\n1 4\n2 4\n''') == 'Yes'\nassert solution('''\n1 1\n1 3\n''') == 'No'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('14 2') == 'Yes'\nassert solution('3 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n7 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == 'No'\nassert solution('''\n5 2\n1 4\n2 4\n3 4\n4 5\n5 6\n6 7\n''') == 'Yes'\n'''\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''2 1\n1 3\n2 3\n''') == 'No'\nassert solution('''3 1\n1 3\n2 3\n''') == 'No'\nassert solution('''7 1\n1 3\n2 3\n3 4\n4 6\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n21 23\n21 24\n20 25\n19 26\n18 27\n17 28\n16 29\n15 30\n14 31\n13 32\n12 33\n11 34\n10 35\n9 36\n8 37\n7 38\n6 39\n5 40\n5 41\n4 42\n4 43\n3 44\n3 45\n3 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2 85\n2 86\n2 87\n2 88\n2 89\n2 90\n2 91\n2 92\n2 93\n2 94\n2 95\n2 96\n2 97\n2 98\n2 99\n2 100\n2 101\n2 102\n2 103\n2 104\n2 105\n2 106\n2 107\n2 108\n2 109\n2 110\n2 111\n2 112\n2 113\n2 114\n2 115\n2 116\n2 117\n2 118\n2 119\n2 120\n2 121\n2 122\n2 123\n2 124\n2 125\n2 126\n2 127\n2 128\n2 129\n2 130\n2 131\n2 132\n2 133\n2 134\n2 135\n2 136\n2 137\n2 138\n2 139\n2 140\n2 141\n2 142\n2 143\n2 144\n2 145\n2 146\n2 147\n2 148\n2 149\n2 150\n2 151\n2 152\n2 153\n2 154\n2 155\n2 156\n2 157\n2 158\n2 159\n2 160\n2 161\n2 162\n2 163\n2 164\n2 165\n2 166\n2 167\n2 168\n2 169\n2 170\n2 171\n2 172\n2 173\n2 174\n2 175\n2 176\n2 177\n2 178\n2 179\n2 180\n2 181\n2 182\n2 183\n2 184\n2 185\n2 186\n2 187\n2 188\n2 189\n2 190\n2 191\n2 192\n2 193\n2 194\n2 195\n2 196\n2 197\n2 198\n2 199\n2 200\n2 201\n2 202\n2 203\n2 204\n2 205\n2 206\n2 207\n2 208\n2 209\n2 210\n2 211\n2 212\n2 213\n2 214\n2 215\n2 216\n2 217\n2 218\n2 219\n2 220\n2 221\n2 222\n2 223\n2 224\n2 225\n2 226\n2 227\n2 228\n2 229\n2 230\n2 231\n2 232\n2 233\n2 234\n2 235\n2 236\n2 237\n2 238\n2 239\n2 240\n2 241\n2 242\n2 243\n2 244\n2 245\n2 246\n2 247\n2 248\n2 249\n2 250\n2 251\n2 252\n2 253\n2 254\n2 255\n2 256\n2 257\n2 258\n2 259\n2 260\n2 261\n2 262\n2 263\n2 264\n2 265\n2 266\n2 267\n2 268\n2 269\n2 270\n2 271\n2 272\n2 273\n2 274\n2 275\n2 276\n2 277\n2 278\n2 279\n2 280\n2 281\n2 282\n2 283\n2 284\n2 285\n2 286\n2 287\n2 288\n2 289\n2 290\n2 291\n2 292\n2 293\n2 294\n2 295\n2 296\n2 297\n2 298\n2 299\n2 300\n2 301\n2 302\n2 303\n2 304\n2 305\n2 306\n2 307\n2 308\n2 309\n2 310\n2 311\n2 312\n2 313\n2 314\n2 315\n2 316\n2 317\n2 318\n2 319\n2 320\n2 321\n2 322\n2 323\n2 324\n2 325\n2 326\n2 327\n2 328\n2 329\n2 330\n2 331\n2 332\n2 333\n2 334\n2 335\n2 336\n2 337\n2 338\n2 339\n2 340\n2 341\n2 342\n2 343\n2 344\n2 345\n2 346\n2 347\n2 348\n2 349\n2 350\n2 351\n2 352\n2 353\n2 354\n2 355\n2 356\n2 357\n2 358\n2 359\n2 360\n2 361\n2 362\n2 363\n2 364\n2 365\n2 366\n2 367\n2 368\n2 369\n2 370\n2 371\n2 372\n2 373\n2 374\n2 375\n2 376\n2 377\n2 378\n2 379\n2 380\n2 381\n2 382\n2 383\n2 384\n2 385\n2 386\n2 387\n2 388\n2 389\n2 390\n2 391\n2 392\n2 393\n2 394\n2 395\n2 396\n2 397\n2 398\n2 399\n2 400\n2 401\n2 402\n2 403\n2 404\n2 405\n2 406\n2 407\n2 408\n2 409\n2 410\n2 411\n2 412\n2 413\n2 414\n2 415\n2 416\n2 417\n2 418\n2 419\n2 420\n2 421\n2 422\n2 423\n2 424\n2 425\n2 426\n2 427\n2 428\n2 429\n2 430\n2 431\n2 432\n2 433\n2 434\n2 435\n2 436\n2 437\n2 438\n2 439\n2 440\n2 441\n2 442\n2 443\n2 444\n2 445\n2 446\n2 447\n2"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 3\\n\") == \"No\"\nassert solution(\"2 1\\n1 2\\n\") == \"Yes\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'No'\nassert solution('2 1') == 'Yes'\nassert solution('3 1') == 'Yes'\n"
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"3 1\") == \"No\""
    },
    {
        "number": 3948,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('14 2') == 'Yes', \"You are not very smart...\"\nassert solution('3 1') == 'No', \"Who is this dude?\""
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('5 5') == '2'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5 3') == '1'\nassert solution('5 4') == '0'\nassert solution('7 4') == '-1'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 1') == '1'\nassert solution('3 3') == '1'\nassert solution('2 2') == '0'\nassert solution('3 5') == '0'\nassert solution('4 5') == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3\\n.#.\\n###\\n##.') == '1'\nassert solution('4 2\\n##\\n.#\\n###\\n') == '-1'\nassert solution('3 5\\n....\\n....\\n....\\n') == '0'"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 2') == '-1'\nassert solution('3 5') == '0'\nassert solution('2 1') == '-1'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3\n.\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n.#.\n###\n##.\n''') == '1'\nassert solution('''\n4 2\n##\n.#\n''') == '-1'\nassert solution('''\n4 5\n....#\n####.\n.###.\n.#...\n''') == '2'\nassert solution('''\n3 5\n.....\n.....\n.....\n''') == '0'\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 2\n"
    },
    {
        "number": 3949,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"2 1\") == \"-1\"\nassert solution(\"3 5\") == \"0\"\nassert solution(\"4 5\") == \"0\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == 'YES\\n5 4 2'\nassert solution() == 'YES\\n3 2 1'\nassert solution() == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 3') == 'YES'\nassert solution('1 0 2 3') == 'YES'\nassert solution('1 0 2 3') == 'YES'\nassert solution('5 6') == 'YES'\nassert solution('5 6') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input_) == \"YES\""
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 3\n1 0 2 3\n''') == 'YES'\n\nassert solution('''3 5\n0 0 0\n''') == 'YES'\n\nassert solution('''5 6\n6 5 6 2 2\n''') == 'NO'\n\nassert solution('''3 5\n1 0 2 3\n''') == 'YES'\n\nassert solution('''5 5\n0 0 0\n''') == 'YES'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3\n1 0 2 3\n\n''') == 'YES'\n\nassert solution('''\n3 5\n0 0 0\n\n''') == 'YES'\n\nassert solution('''\n5 6\n6 5 6 2 2\n\n''') == 'NO'"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''3 3\n1 0 2 3\n\n''') == 'YES'\nassert solution('''3 5\n0 0 0\n\n''') == 'YES'\nassert solution('''5 6\n6 5 6 2 2\n\n''') == 'NO'\nassert solution('''3 5\n0 0 0\n\n''') == 'YES'\nassert solution('''5 6\n6 5 6 2 2\n\n''') == 'NO'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(example_input_1) == example_output_1\nassert solution(example_input_2) == example_output_2\nassert solution(example_input_3) == example_output_3\nassert solution(example_input_4) == example_output_4\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n3 3\n1 0 2 3\n''') == 'YES'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\nassert solution('''\n5 6\n6 5 6 2 2\n''') == 'NO'\nassert solution('''\n3 5\n0 0 0\n''') == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == 'YES'\n\nassert solution() == 'YES'\n"
    },
    {
        "number": 3950,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5\\n\",\n    \"10 10 10\",\n) == \"YES\\n\"\nassert solution(\n    \"3 10\\n\",\n    \"10 10 10\",\n) == \"YES\\n\"\nassert solution(\n    \"10 10 10\\n\",\n    \"10 10 10\",\n) == \"YES\\n\"\nassert solution(\n    \"3 5\\n\",\n    \"10 10 10\",\n) == \"NO\\n\"\nassert solution(\n    \"3 10\\n\",\n    \"10 10 10\",\n) == \"NO\\n\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''1\n42\n''') == '1 42'\n\nassert solution('''2\n1 1 1 1\n''') == '1 1'\n\nassert solution('''3\n1 1 1 1\n''') == '1 1'\n\nassert solution('''4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n''') == '4 3 6 2'\n\nassert solution('''5\n2 1 2 1 3 2\n''') == '1 3 2'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\\n') == '4 3 6 2'\nassert solution('1\\n42\\n') == '42'\nassert solution('2\\n1 1 1 1\\n') == '1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"4 3 6 2\"\n\n\"\"\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1 1'\nassert solution('4') == '1 1 1 1'\nassert solution('5') == '1 1 1 1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n''') == '4 3 6 2'\nassert solution('''\n1\n42\n''') == '42'\nprint(solution('''\n5\n5 1 1 1 1\n'''))\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 2\n\n3\n2 1 1\n\n4\n1 2 2 3\n\n5\n1 3 1 4 2\n\n6\n1 2 3 4 1 2\n\n7\n1 2 3 4 1 2 3\n\n8\n1 2 3 4 1 2 3 4\n\n9\n1 2 3 4 1 2 3 4 5\n''') == \"1 2 3 4 1 2 3 4 5\"\nassert solution('''\n3\n1 2 3\n\n4\n1 2 3 4\n\n5\n1 2 3 4 5\n''') == \"1 2 3 4 5\"\nassert solution('''\n1\n1\n\n3\n''') == \"1 1 1\"\n\n'''\nOutput\n\n4 3 6 2\nInput\n5\n1 2 3 4 5\n\nOutput\n\n1 2 3 4 5\nInput\n7\n1 2 3 4 5 1 2 3\n\nOutput\n\n1 2 3 4 5\nInput\n2\n1 1 1 1\n\nOutput\n\n1 1\nInput\n1\n4\n\nOutput\n\n4 3 6 2\nInput\n2\n1 2 3\n\nOutput\n\n1 2 3\nInput\n3\n1 2 3 4\n\nOutput\n\n1 2 3 4\nInput\n3\n1 2 3 4 1 2 3\n\nOutput\n\n1 2 3 4 1 2 3 4\nInput\n4\n1 2 3 4 1 2 3 4\n\nOutput\n\n1 2 3 4 1 2 3 4 5\nInput\n5\n1 2 3 4 5\n\nOutput\n\n1 2 3 4 5\nInput\n7\n1 2 3 4 5 1 2 3\n\nOutput\n\n1 2 3 4 5\nInput\n2\n1 1 1 1\n\nOutput\n\n1 1 1 1\nInput\n1\n42\n\nOutput\n\n42 \nInput\n1\n42\n\nOutput\n\n42 \n'''\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2') == '4 3 6 2'\nassert solution('1') == '1'\nassert solution('2') == '1 1'\nassert solution('3') == '1 1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\n1 2 1 2 3 2 6 1 1 2 2 1 2 3 2\"\"\") == \"\"\"4 3 6 2\"\"\"\nassert solution(\"\"\"1\n42\"\"\") == \"\"\"42\"\"\"\nassert solution(\"\"\"1\n5\n2 1 2 3 4 3\"\"\") == \"\"\"1 3 4\"\"\"\nassert solution(\"\"\"3\n1 2 1 2 3 2\"\"\") == \"\"\"1 3 6\"\"\"\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n''') == '4 3 6 2'\nassert solution('''\n2\n1 1 1 1\n''') == '1 1'\nassert solution('''\n3\n1 1 1\n''') == '1 1 1'\nassert solution('''\n2\n1 1 1\n''') == '1 1 1'\nassert solution('''\n3\n1 1 1\n''') == '1 1 1'\n"
    },
    {
        "number": 3951,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('Input\\n4\\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\\n') == '4 3 6 2', 'Wrong output'\nassert solution('Input\\n1\\n42\\n') == '42', 'Wrong output'\nassert solution('Input\\n2\\n1 1 1 1\\n') == '1 1', 'Wrong output'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"6\"\nprint(solution())\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n1 2\\n1 3\\n') == '3'\nassert solution('4\\n2 1\\n2 2\\n3 1\\n3 2\\n') == '6'\nassert solution('5\\n1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3''') == '3'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\nassert solution('''3\n1 1\n2 1\n3 1\n''') == '3'\n\n'''\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'\n\n'''\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '3'\nassert solution('4') == '6'\n"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 1\n1 2\n1 3\n''') == '3'\nassert solution('''\n4\n2 1\n2 2\n3 1\n3 2\n''') == '6'"
    },
    {
        "number": 3952,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '6'\nassert solution('3\\n1 1\\n1 2\\n1 3\\n') == '3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == '3 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1 1\\n2 2\\n3 3\\n\"\nassert solution(\"5\") == \"3 3\\n1 3\\n2 2\\n4 4\\n5 3\\n\"\nassert solution(\"6\") == \"1 1\\n2 2\\n3 3\\n4 4\\n5 3\\n\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == '3 3'\nassert solution('''\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n''') == '-1'\n'''"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3\\nEE.EE\\nE.EE.\\nE...E') == '4 4'\nassert solution('5\\nEE.EE.\\nE...E') == '3 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5') == '3 3'\nassert solution('3') == '1 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\\nEE.EE\") == \"1 1\"\nassert solution(\"3\\nEE.EE\") == \"1 3\"\nassert solution(\"5\\nEE.EE\") == \"4 4\"\n\"\"\"\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE''') == '3 3'\n\nassert solution('''6\nEEE\nE..\nE.E\nE...\nE.E\nEE.E\nEEE''') == '-1'\n\nassert solution('''4\n.E.\n.E.\n.E.\n.E.\n.E.\n.E.''') == '1 1'"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1 1\"\nassert solution(\"5\") == \"3 3\"\nassert solution(\"3\") == \"1 3\"\n\nhttps://judge.softuni.bg/Contests/Practice/Index/110\n\"\"\""
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3\\nEEE\\nE..\\nE.E\\n') == '3 3'\nassert solution('5\\nEE.EE\\nE.EE.\\nE...E\\n.EE.E\\nEE.EE') == '1 3'\n"
    },
    {
        "number": 3953,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '3 2'\nassert solution('6') == '-1'\nassert solution('7') == '-1'\n\nclass Solution:\n    def solution(self, n):\n        if n == 1:\n            return (1,1)\n        \n        # diagonal + up + left\n        l = n * (n-1) + n - 1\n        # diagonal + up + right\n        r = n * (n-1) + n - 1\n        \n        # vertical\n        v = n * n\n        \n        # up + left\n        ul = (n-1) * n + 1\n        \n        # up + right\n        ur = (n-1) * n + 1\n        \n        # left\n        lm = n * (n-1) + 1\n        \n        # right\n        rm = n * (n-1) + 1\n        \n        # up\n        um = n * n\n        \n        l = min(l, r, v, ul, ur, lm, rm, um)\n        \n        return (l//2, l//2)\n\n\n-----Examples-----\nInput\n3\n.E.\nE.E\n.E.\n\nOutput\n1 1\n2 2\n3 3\n\nInput\n5\nEEE\nE..\nE.E\n\nOutput\n3 3\n1 3\n2 2\n4 4\n5 3\n\nInput\n6\nEEEEEE\nEEE.E\nEEE.E\nEEE.E\nE.E.E\nE.E.E\n\nOutput\n4 4\n1 3\n2 2\n3 3\n4 4\n5 3\n\nInput\n7\nEEEEEEEEE\nEEE.E.E\nEEE.E.E\nEEE.E.E\nE.E.E.E\nE.E.E.E\nE.E.E.E\n\nOutput\n5 5\n1 4\n2 2\n3 3\n4 4\n5 3\n\n\"\"\""
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n10 2\n10 -1 2 2 2 2 2 2 -1 10\n''') == '32'\nassert solution('''\n5 10\n-1 -1 -1 -1 -1\n''') == '-1'\nprint('All test cases passed')\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 10\n-1 -1 -1 -1 -1''') == '-1'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10 2\") == \"32\"\nassert solution(\"10 -1 2 2 2 2 2 2 -1 10\") == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n-1 2 3 4 5\") == \"32\"\nassert solution(\"3 6\\n-1 2 3 4 5\\n-1 -1 1 2 3 4 5\") == \"0\"\nassert solution(\"3 7\\n-1 -1 -1 1 2 3 4 5\") == \"32\"\nassert solution(\"10 3\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\") == \"0\"\nassert solution(\"10 6\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\") == \"0\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '32'\nassert solution('''\n10 2\n10 -1 2 2 2 2 2 2 -1 10''') == '32'\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"32\"\nassert solution(\"5 10\") == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5 10\\n-1 -1 -1 -1 -1\\n') == '32'\nassert solution('10 2\\n10 -1 2 2 2 2 2 2 -1 10\\n') == '32'\nprint('Done')\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n10 2\n10 -1 2 2 2 2 2 2 -1 10\n\"\"\") == \"32\"\n"
    },
    {
        "number": 3954,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 10\n-1 -1 -1 -1 -1''') == '-1'\nassert solution('''10 2\n10 -1 2 2 2 2 2 2 -1 10''') == '32'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''3 1 2\n1 1 1''') == '3'\nassert solution('''4 2 3\n1 2 4 8''') == '79'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\\n1 1 1\\n\") == \"3\"\nassert solution(\"4 2 3\\n1 2 4 8\\n\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3 1 2\n1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n4 2 3\n1 2 4 8\n\"\"\") == \"79\"\nassert solution(\"\"\"\n100 200 400\n1000000 1000000 1000000 1\n\"\"\") == \"15\"\nassert solution(\"\"\"\n100 100 500\n100000000 1000000 1000000 1\n\"\"\") == \"100000\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\nassert solution(\"6 3 5\") == \"11\"\nassert solution(\"10 10 10\") == \"1010\"\nassert solution(\"2 2 3\") == \"6\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\nassert solution('2 4 3') == '6'\nassert solution('6 5 4') == '11'\nassert solution('5 7 8') == '17'\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\"\n"
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"3\"\nassert solution(\"4 2 3\") == \"79\""
    },
    {
        "number": 3955,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 1 2') == '3'\nassert solution('4 2 3') == '79'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 3') == '7'\nassert solution('3 3') == '7'\nassert solution('2 2') == '4'\nassert solution('3 1') == '7'\nassert solution('2 3') == '4'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 3') == '7'\nassert solution('4 5') == '4'\nassert solution('6 6') == '4'\nassert solution('10 10') == '7'"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"7\\n7\\n4\\n7\\n7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n    3 3\n    ''') == '7 7 7'\nassert solution('''\n    4 1\n    ''') == '1 1 1 1'\nassert solution('''\n    4 2\n    ''') == '7 7 7'\nassert solution('''\n    4 3\n    ''') == '7 7 7'\nassert solution('''\n    1 1\n    ''') == '1 1 1'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"4 4\") == \"4\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 1\") == \"7\"\nassert solution(\"2 2\") == \"4\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"7\"\nassert solution(\"1 2\") == \"7\"\nassert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"2 3\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3') == '7'\nassert solution('7 7') == '7'\nassert solution('5 5') == '4'\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"7\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"4 3\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"2 3\") == \"7\"\n"
    },
    {
        "number": 3956,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"7\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"1 1\") == \"7\"\nassert solution(\"2 2\") == \"7\""
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\nassert solution('12 5') == '9'\nassert solution('30 8') == '30'\nassert solution('40 12') == '40'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 5 6 2') == '6', 'First'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9', 'Second'"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\n\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 5 6 2\\n1 3\\n3 2\\n4 5\\n3 7\\n4 3\\n4 6') == '6'\nassert solution('9 3\\n3 2 1 6 5 9\\n8 9\\n3 2\\n2 7\\n3 4\\n7 6\\n4 5\\n2 1\\n2 8') == '9'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('7 2') == '6'\nassert solution('9 3') == '9'\nassert solution('8 9') == '14'\n"
    },
    {
        "number": 3957,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\n''') == '6'\nassert solution('''9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\n''') == '9'\nassert solution('''0 3\n1 2\n2 3\n3 4\n5 6\n''') == '3'\n\n\n\n\n'''"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"0010100\") == \"3 1 3 4\"\nassert solution(\"111\") == \"-1\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1001') == '3 1 3 4'\nassert solution('101010') == '3 2 5 6'\nassert solution('11111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"1111\") == \"3 2 5 6 1 7\"\nassert solution(\"000\") == \"1 1 1 1 1 1\""
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n01000\n''') == '1 2 5 6'\nassert solution('''\n01010\n''') == '1 3 5 6'\nassert solution('''\n01110\n''') == '1 2 6'\nassert solution('''\n01111\n''') == '1 3 5 6'\nassert solution('''\n01100\n''') == '1 2 5 6'\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'\nprint(solution(input()))\n"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3958,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('0010100') == '3 1 3 4'\nassert solution('111') == '-1'"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 3\n2 1 2\n2 2 3\n''') == '1'\nassert solution('''1 3\n3 1 2 3\n''') == '2'\nassert solution('''2 4\n2 1 2\n3 2 3 4\n''') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n2 3\n2 1 2\n2 2 3\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n1 3\n3 1 2 3\n\n\"\"\") == \"1\"\n\nassert solution(\"\"\"\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n\n\"\"\") == \"24\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2 3') == '1'\nassert solution('1 3') == '6'\nassert solution('2 2') == '1'\n\nassert solution('3 7') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\""
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 3\\n2 1 2\\n2 2 3') == '1'\nassert solution('1 3\\n3 1 2 3') == '6'\nassert solution('3 7\\n2 1 2\\n2 3 4\\n3 5 6 7') == '24'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2 3\n2 1 2\n2 2 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1 3\n3 1 2 3\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n2 1 2\\n2 2 3\\n\") == \"1\"\nassert solution(\"1 3\\n3 1 2 3\\n\") == \"6\"\nassert solution(\"2 4\\n2 1 2\\n3 2 3 4\\n\") == \"24\"\nassert solution(\"3 7\\n2 1 2\\n2 3 4\\n3 5 6 7\\n\") == \"24\""
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2 3') == '1'\nassert solution('2 4') == '2'\nassert solution('3 7') == '24'\nassert solution('1 3') == '1'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 3959,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"1 3\") == \"6\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n\nInput\n5\n1 4 2 3 1\n\nOutput\n3\nInput\n4\n1 5 4 7\n\nOutput\n6\n''') == '3'\nassert solution('''\n\nInput\n2\n1 5 7\n\nOutput\n6\nInput\n2\n1 5 4\n\nOutput\n5\n''') == '5'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 4 2 3 1') == '3'\nassert solution('4 1 5 4 7') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 4 2 3 1\\n\") == \"3\"\nassert solution(\"4\\n1 5 4 7\\n\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5\\n'\n    '1 4 2 3 1\\n'\n) == '3'\nassert solution(\n    '4\\n'\n    '1 5 4 7\\n'\n) == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('5\\n1 4 2 3 1\\n') == '3'\nassert solution('4\\n1 5 4 7\\n') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5\\n1 4 2 3 1') == '3'\nassert solution('4\\n1 5 4 7') == '6'\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5\n1 4 2 3 1\n''') == '3'\nassert solution('''\n4\n1 5 4 7\n''') == '6'"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"6\"\nassert solution(\"7\") == \"10\"\nassert solution(\"8\") == \"15\"\nassert solution(\"9\") == \"20\"\n"
    },
    {
        "number": 3960,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n5\n1 4 2 3 1\n''') == '3'\nassert solution('''\n4\n1 5 4 7\n''') == '6'\nassert solution('''\n1\n1\n''') == '1'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n1\n1\n1\n1\n''') == '4'\nassert solution('''\n4\n2 3 1\n''') == '10'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '20'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 2\n''') == '4'\nassert solution('''\n4\n1 1 1 1\n''') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n1 2\n\n\"\"\") == \"4\"\nassert solution(\"\"\"\n3\n1 1 1\n\n\"\"\") == \"6\"\nassert solution(\"\"\"\n5\n1 1 1 1 1\n\n\"\"\") == \"62\"\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n4\n1 1 2 3\n''') == '4'\nassert solution('''\n5\n1 1 1 1 1\n''') == '62'\nassert solution('''\n10\n1 2 3 4 5 6 7 8 9 10\n''') == '41'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2\n1 2\n\"\"\") == \"4\"\nassert solution(\n\"\"\"\n5\n1 1 1 1 1\n\"\"\") == \"62\"\nassert solution(\n\"\"\"\n7\n1 1 2 2 2 2 2\n\"\"\") == \"14\"\nassert solution(\n\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"106\"\nassert solution(\n\"\"\"\n13\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == \"233\"\n\n\"\"\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '4'\nassert solution('3') == '6'\nassert solution('4') == '20'\nassert solution('5') == '62'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 2\n''') == '4'\nassert solution('''\n4\n1 1 1 1\n''') == '20'\n"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('2') == '4'\nassert solution('4') == '20'\nassert solution('5') == '62'"
    },
    {
        "number": 3961,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '62'\nassert solution('4') == '20'\nassert solution('3') == '8'\n\nprint(solution(input()))\n\n------SOLUTION BY M2IR-----\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1\\n1 1\\n1 1\\n') == '6'\nassert solution('4\\n1 2\\n2 1\\n3 5\\n5 3\\n') == '15'\nassert solution('1\\n5 6\\n') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n''') == '6'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''\n1\n5 6\n''') == '7'"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1\n1 1\n1 1\n''') == '6'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"3\") == \"15\"\nassert solution(\"1\") == \"7\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution([1, 1]) == \"6\"\nassert solution([4, 5, 3, 5, 2]) == \"7\"\nassert solution([3, 1, 1, 1]) == \"4\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"1\") == \"7\"\nassert solution(\"3\") == \"15\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"7\"\nassert solution(\"1\") == \"5\""
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n1 1\n1 1\n1 1\n''') == '6'\nassert solution('''\n1\n5 6\n''') == '7'\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 3962,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3\n1 1\n1 1\n1 1\n''') == '6'\nassert solution('''\n4\n1 2\n2 1\n3 5\n5 3\n''') == '15'\nassert solution('''\n1\n5 6\n''') == '7'\nassert solution('''\n3\n1 2\n2 1\n3 5\n5 3\n''') == '6'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\n\"\"\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"6\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''1\n3\n1 2\n2\n1 2\n''') == '6'\nassert solution('''3\n1\n1 2\n2\n1 2\n''') == '3'\nassert solution('''1\n1\n1 2\n2\n1 2\n''') == '1'\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '9'\nassert solution('5') == '18'\n\n\"\"\""
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(input_) == output"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n2\n\n4 4\n2\n\n''') == '3'\n\nassert solution('''\n4\n1\n4 4\n2\n\n''') == '3'\n\nassert solution('''\n4\n1\n4 4\n2\n\n''') == '6'\n\nprint('TAKEAWAY')\n"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n''') == '6'\nassert solution('''\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n''') == '3'\n\n'''"
    },
    {
        "number": 3963,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n\n4\n2\n\n''') == '1'\nassert solution('''\n\n3\n3 3\n10 10 10\n17\n\n''') == '6'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n'''3 3 3 100\n1 1 1\n\nOutput\n10''') == '0'\nassert solution(\n'''3 6 5 1000000007\n1 2 1\n\nOutput\n0''') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1 3 2') == '10'\nassert solution('1 5 2') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 100\") == \"10\"\nassert solution(\"3 6 5 1000000007\") == \"0\""
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n1 3 3 100\n1 2 1\n\"\"\") == \"10\"\n\nassert solution(\n\"\"\"\n3 5 6 11\n1 2 1\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n3 1 1\n1 1\n\"\"\") == \"0\"\n\nassert solution(\n\"\"\"\n3 2 3 100\n1 2 1\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n3 2 4 100\n1 2 1\n\"\"\") == \"1\""
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3 3 3 100\n1 1 1\n''') == '10'\nassert solution('''\n3 5 6 11\n1 2 1\n''') == '0'\nprint(solution(*tuple(map(int, input().split()))))"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 3 3 100\n1 1 1''') == '10'\nassert solution('''3 5 6 11\n1 2 1''') == '0'"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 3 3 100') == '10'\nassert solution('3 6 5 1000000007') == '0'\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n5 3 3 100\n1 1 1\n\"\"\") == \"10\"\nassert solution(\"\"\"\n3 5 6 11\n1 2 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n7 4 7 10000000009\n10 11 1\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3964,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 3 3 100\n1 1 1\n''') == '10'\nassert solution('''3 5 6 11\n1 2 1\n''') == '0'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('5') == 'YES'\nassert solution('6') == 'NO'\n\nThe last example doesn't have any syllables in the first three lines and there are at least 3 vowels in the last one. So the result is 'NO'.\n\ninput    output\n3\n2 2 3\nintel\ncode\nch allenge\n\n5\n2 3 4 1\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\n6\n2 3 4 1\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\n7\n2 3 4 1\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\n5\n3 4 3 4\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\n3\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefghi\n\n2\n1 2 1\na\nbcdefgh"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n2\n2 2 3\nintel\ncode\nch allenge\n''') == 'YES'\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\\n1 2 3\\n2 2 3\\n3 4 5 6 7\\n8 9 10 11 12 13 14 15 16 17 18 19 20\\n
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'NO'"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2 2 3\nintel\ncode\nch allenge\n''') == 'YES'\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'YES'\n\nassert solution('''\n3\n2 2 3\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n''') == 'NO'\n\nassert solution('''\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n''') == 'NO'"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 3\\nintel\\ncode\") == \"YES\"\nassert solution(\"4\\n1 2 3 1\\na\\nbcdefghi\\njklmnopqrstu\\nvwxyz\\n\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n2 2 3\nintel\ncode\nch allenge\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\"\"\") == \"NO\"\nassert solution(\"\"\"\n4\n13 11 15 15\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\"\"\") == \"YES\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n        text = stdin.split()[1]\n        syllables = 0\n        for i in range(1, n+1):\n            word = stdin.split()[i]\n            if any(char.lower() in vowels for char in word):\n                syllables += 1\n        if text.count(\"\") == len(text.split()):\n            return \"NO\"\n        if syllables == n:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\nassert Solution().solution(\"\"\"\n3\n2 2 3\nintel\ncode\nch allenge\n\"\"\") == \"YES\"\nassert Solution().solution(\"\"\"\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3\\nintel\\ncode') == 'YES'\n\nassert solution('4\\n1 2 3 1\\na\\nb\\nc\\nd\\ne') == 'NO'"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n2 2 3\nintel\ncode\nch allenge\n\n''') == 'YES'\nassert solution('''4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n''') == 'NO'\n"
    },
    {
        "number": 3965,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n    2\n    2 3\n    intel\n\"\"\") == \"YES\"\n\nassert solution(\"\"\"\n    3\n    2 2 3\n    intel\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n    4\n    1 2 3 1\n    a\n    bcdefghi\n    jklmnopqrstu\n    vwxyz\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''\n3\n1 5\n''') == '26'\nassert solution('''\n2\n1 2\n''') == '3'\nassert solution('''\n5\n4 9 9 9 9\n''') == '24'\nassert solution('''\n4\n1 2 3 4\n''') == '7'\nassert solution('''\n4\n9 8 5 1\n''') == '18'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1') == '10'\nassert solution('3') == '26'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n3 1 5\n''') == '26'\nassert solution('''1\n10\n''') == '10'"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\"\nassert solution(\"10\") == \"10\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '26'\nassert solution('1') == '10'\nassert solution('10') == '10'\n"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_) == output_"
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"26\"\nassert solution(\"1\") == \"10\""
    },
    {
        "number": 3966,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '26'\nassert solution('1') == '26'\nassert solution('3') == '26'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 3 5') == '3'\nassert solution('3 40\\n10 30 50') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input) == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == ''\nassert solution(\"3 4\") == '3'\nassert solution(\"3 40\") == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 40\") == \"32\"\nassert solution(\"3 40\") == \"32\"\nassert solution(\"3 40\") == \"32\"\nassert solution(\"3 40\") == \"32\"\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'\nassert solution('''3 10\n3 9 7 3 5\n''') == '6'\n\n'''"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n1 3 5\n''') == '3'\nassert solution('''3 40\n10 30 50\n''') == '32'"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 40') == '32'\n\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 3967,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3 4\n1 3 5\n\"\"\") == \"3\"\n\nassert solution(\"\"\"\n3 40\n10 30 50\n\"\"\") == \"32\""
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 1\\n3 3\\n3 3\") == \"1 2 4\"\nassert solution(\"5 1\\n1 1\\n3 3\\n3 3\\n4 4\\n4 4\\n5 5\\n\") == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n7 2\n3\n6\n9\n1 2\n5\n5\n\"\"\") == \"1 4 5 6 7 8 9\"\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('1 1') == '1 4'\nassert solution('5 1') == '1 2 4 5 6 7 8 9'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n\"\"\") == \"1 2 4\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4''') == '1 2 4'\nassert solution('''5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\nSample Output 3:\n1 2\n''') == '1 2'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5 1') == '1 4'\nassert solution('10 1') == '1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n8 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n5 5\n10 10\n\"\"\") == \"1 2 3 4 5 6 7 8 9\"\nassert solution(\"\"\"\n8 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n5 5\n10 10\n\"\"\") == \"1 2 3 4 5 6 7 8 9\"\n\nassert solution(\"\"\"\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\n5 5\n10 10\n\"\"\") == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('5 1') == '1'\nassert solution('5 1') == '1'\nassert solution('1 1') == '1'"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''3\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11''') == '1 4 5 6 7 8 9'\n"
    },
    {
        "number": 3968,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\n''') == '1 4 5 6 7 8 9'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\nassert solution('''\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\n''') == '1 2 4'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input_data) == output_data\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"6 3\") == \"2\"\nassert solution(\"1000 2\") == \"9001\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n''') == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1\n1 2.0\n1 3.100\n\n''') == '1'\nassert solution('''3 3\n1 5.0\n2 5.5\n3 6.0\n\n''') == '0'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3 2\n2 1\n1 2.0\n1 3.100\n''') == '1'\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n2 1\n1 2.0\n1 3.100\n\n\"\"\") == \"1\"\nassert solution(\"\"\"\n3 3\n1 5.0\n2 5.5\n3 6.0\n\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n2 1\\n1 2.0\\n1 3.100\\n\") == \"1\"\nassert solution(\"3 3\\n1 5.0\\n2 5.5\\n3 6.0\\n\") == \"0\"\nassert solution(\"6 3\\n1 14.284235\\n2 17.921382\\n1 20.328172\\n3 20.842331\\n1 25.790145\\n1 27.204125\\n\") == \"2\"\n"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'"
    },
    {
        "number": 3969,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3 2') == '1'\nassert solution('3 3') == '0'\nassert solution('6 3') == '2'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"1 5\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2 2') == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n2 3 6 5 4 10\") == \"3\"\nassert solution(\"6 3\\n2 6 3 8 9 10 11 12 13 14 15 16\") == \"3\"\nassert solution(\"6 4\\n2 6 3 8 9 10 11 12 13 14 15 16\") == \"2\"\nassert solution(\"6 5\\n2 3 6 8 9 10 11 12 13 14 15 16\") == \"1\"\nassert solution(\"6 6\\n2 3 6 8 9 10 11 12 13 14 15 16\") == \"2\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2 3 6 5 4 10\\n\") == \"3\""
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n5 2\n2 3 4 5 6\n''') == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 3\\n2 4 5\\n6 7 8') == '3'\nassert solution('4 2\\n3 4\\n7 4') == '2'\nassert solution('5 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == '1'\n\n\"\"\""
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n6 2\n2 3 6 5 4 10\n''') == '3'\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6 2\n2 3 6 5 4 10\n\"\"\") == \"3\"\n"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('6 2\\n2 3 6 5 4 10') == '3'"
    },
    {
        "number": 3970,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''3 2\n2 3 6 5 4 10''') == \"3\"\nassert solution('''1\n2\n3''') == \"0\"\nassert solution('''5\n3 4 1 2''') == \"2\"\nassert solution('''1\n2\n3''') == \"0\"\nassert solution('''5\n2 3 1 4''') == \"4\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 1 3\") == \"4\"\nassert solution(\"9\\n1 2 1 3 2 2 2 2 3\") == \"10\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution() == 4\nassert solution([1, 2, 1, 3, 2, 2, 2, 2, 3]) == 10\nassert solution([1, 2, 1, 3, 2, 2, 2, 2, 3]) == 6\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1 2\n''') == '2'\nassert solution('''3\n1 2 1\n''') == '4'\nassert solution('''9\n1 2 1 3 2 2 2 2 3\n''') == '10'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"3\n1 2 1\n\"\"\") == \"4\"\nassert solution(\"\"\"9\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"10\"\nassert solution(\"\"\"10\n1 2 1 3 2 2 2 2 3\n\"\"\") == \"13\""
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 1 3\n''') == '4'\nassert solution('''\n9\n1 2 1 3 2 2 2 2 3\n''') == '10'\nassert solution('''\n10\n1 2 1 3 2 2 2 2 3\n''') == '11'\nassert solution('''\n5\n1 2 1 2 2\n''') == '6'\nassert solution('''\n8\n1 2 1 2 2 2\n''') == '7'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(input_data) == output_data"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''1 2\n2 1''') == '2'\nassert solution('''3\n1 2\n3 4\n2 1''') == '4'\n"
    },
    {
        "number": 3971,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('9') == '10'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"4\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '3'\nassert solution('4') == '1'\nassert solution('5') == '0'"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('2') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '4'\nassert solution('2') == '4'\nassert solution('3') == '3'\nassert solution('4') == '2'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"4\""
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2') == '4'\n"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(__import__('sys').stdin.read()) == '4'\n'''\nfrom sys import stdin\nfrom collections import deque\n\nn = int(stdin.readline())\n\ncnt = 0\nfor _ in range(n):\n    cnt += len(set(map(lambda x: x[0], deque(map(lambda x: int(x) - 1, stdin.readline().split())))))\nprint(cnt % 1000000007)\n\n'''\n---"
    },
    {
        "number": 3972,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n') == '4'\nassert solution('4\\n1\\n1\\n1\\n1\\n') == '4'\nassert solution('2\\n') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"4 6\") == \"5\"\nassert solution(\"10 5\") == \"4\"\nassert solution(\"100 2\") == \"999\"\nassert solution(\"10 7\") == \"4\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"4 6\") == \"5\"\n\n'''"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\nassert solution('''4 6\n1 5 1 4\n2 3 4\n''') == '4'\nassert solution('''4 6\n1 5 1 4\n2 3 4\n5 6 7\n''') == '4'\nassert solution('''4 6\n1 5 1 4\n2 3 4\n5 6 7\n6 7 8\n''') == '4'\nassert solution('''4 6\n1 5 1 4\n2 3 4\n5 6 7\n6 7 8\n9 10 11\n''') == '5'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''4 6\n1 5 1 4\n''') == '5'\nassert solution('''3 2\n1 2 1 2\n''') == '2'\nassert solution('''5 2\n5 5 5 5\n''') == '3'\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == \"5\""
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"4 6\") == \"5\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('2 6\\n1 2 3 4 5\\n') == '5'"
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 6\") == \"5\""
    },
    {
        "number": 3973,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == \"5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-++-') == '3'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''\n+-+--+\n-++-++\n''') == '1'\nassert solution('''\n-++-++\n+-+--+\n''') == '2'\nassert solution('''\n+-+--+\n-++-++\n+-+--+\n''') == '3'\nassert solution('''\n+-+--+\n+-+--+\n''') == '2'\nassert solution('''\n+--+\n+--+\n''') == '1'\n''')\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''+-+-+\n    ''') == '1'\nassert solution('''+-+-+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +--+\n    +"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-+-+-') == '2'\nassert solution('+-+-+-+') == '3'"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-++-') == '3'\nassert solution('+-+-+-') == '2'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"-+-+\") == \"1\"\nassert solution(\"+-+-++\") == \"3\"\nassert solution(\"++-+-+-\") == \"3\"\nassert solution(\"+-+-+++\") == \"4\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"+-+-+-\") == \"2\"\nassert solution(\"+-+-++-\") == \"3\"\nassert solution(\"+-+-++-++\") == \"3\"\nassert solution(\"+-+-+-+-+-\") == \"5\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"+-+-+\") == \"1\"\nassert solution(\"+-++\") == \"3\"\nassert solution(\"-++-\") == \"2\"\nassert solution(\"++++++\") == \"4\"\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('+-+-+') == '1'\nassert solution('+-+-+-') == '2'\nassert solution('+-+-+-+-') == '3'\nassert solution('+-+-+-+-+-') == '4'\nassert solution('+-+-++-+-++') == '5'\n"
    },
    {
        "number": 3974,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\n'''+-+\n    +-+-+\n    -+-'''\n    ) == '1'\n\nassert solution(\n'''+-+\n    +-+\n    -+-'''\n    ) == '2'\n\nassert solution(\n'''+-+\n    +-'''\n    ) == '0'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\n\"\"\"\n\nfrom collections import defaultdict\n\nn = int(input())\n\ngraph = defaultdict(list)\n\nfor _ in range(n-1):\n    a, b, c = input().split()\n    graph[a].append([b, c])\n    graph[b].append([a, c])\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10') == '1010'\nassert solution('10 2') == '1001'\nassert solution('10 1') == '1001'\nassert solution('10 0') == '1010'\nassert solution('10 1 2 3 4') == '10111'"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\nAND 4 2\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n') == '10110'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n\"\"\") == \"10110\"\nassert solution(\"\"\"\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n\"\"\") == \"01100\"\nassert solution(\"\"\"\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n\"\"\") == \"10010\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\nassert solution('''\nAND 4 6\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10110'\nassert solution('''\nAND 4 6\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '10010'\nassert solution('''\nAND 4 6\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '00110'\nassert solution('''\nAND 4 6\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n''') == '00000'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\n\"\"\"\n\nn = int(input())\n\ngraph = {}\n\nfor _ in range(n):\n    u, v, w = input().split()\n    w = int(w)\n    graph[u] = (v, w)\n\norder = []\n\nfor i in graph:\n    order.append(i)\n\norder.sort(key=lambda x: graph[x][1])"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('10') == '1010'\nassert solution('12') == '10'\nassert solution('30') == '10'\nassert solution('13') == '01'\nassert solution('20') == '0'\n"
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8') == '10110'\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n-----Idea-----\nFor each input, determine what the output will be if Natasha changes this input.\n\"\"\""
    },
    {
        "number": 3975,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\nassert solution(\"10\\nAND 9 4\\nIN 1\\nIN 1\\nXOR 6 5\\nAND 3 7\\nIN 0\\nNOT 10\\nIN 1\\nIN 1\\nAND 2 8\\n\") == '10110'\n\"\"\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5 3 1\\n1 2 3 2 1\\n1 2 3\\n\") == \"2\\n1 3\\n\"\nassert solution(\"6 3 2\\n1 3 2 2 3 1\\n1 2 3\\n\") == \"2\\n1 2\""
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3''') == '2'\nassert solution('''6 3 2\n1 3 2 2 3 1\n1 2 3''') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3 1\") == \"2\"\nassert solution(\"6 3 2\") == \"2\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"6 6 2\") == \"2\"\nassert solution(\"7 7 3\") == \"2\"\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''6 3 2\n1 3 2 2 3 1\n1 2 3\n''') == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n5 3 1\n1 2 3 2 1\n1 2 3\n''') == '2'\nassert solution('''\n6 3 2\n1 3 2 2 3 1\n1 2 3\n''') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '2'"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 3 1') == '2'\nassert solution('6 3 2') == '2'\n"
    },
    {
        "number": 3976,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''5 3 1\n1 2 3 2 1\n1 2 3''') == '2'\nassert solution('''6 3 2\n1 3 2 2 3 1\n1 2 3''') == '2'\nassert solution('''6 3 2\n1 3 2 2 3 1\n1 2 3''') == '1 2'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 1 2\\n'\n    '1 3\\n'\n    '1 2\\n'\n) == '2'\nassert solution(\n    '4 1 2\\n'\n    '1 3\\n'\n    '1 2\\n'\n    '1 3\\n'\n) == '0'\nassert solution(\n    '2 0\\n'\n    '0\\n'\n) == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n5 1 2\n1 3\n1 2\n\n\"\"\"\n    ) == \"2\"\nassert solution(\n    \"\"\"\n3 3 1\n2\n1 2\n1 3\n2 3\n\n\"\"\"\n    ) == \"0\"\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\nassert solution('1000000000 10000000 20') == '10000000'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1 2\\n1 2') == '2'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 3 1') == '2'\nassert solution('4 1 2') == '2'\nassert solution('3 3 1') == '0'"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution([5,6,1,2,4]) == '2'\nassert solution([5,6,1,2,4,4]) == '1'\nassert solution
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution([4, 1, 2]) == '2'\nassert solution([3, 3, 1]) == '0'\n"
    },
    {
        "number": 3977,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\\n1 3\\n1 2\\n\") == \"2\"\nassert solution(\"3 3 1\\n2\\n1 2\\n1 3\\n2 3\\n\") == \"0\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == '3'\nassert solution('4') == '1'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n6\n10 2 3 5 4 2\n''') == '3'\n\nassert solution('''\n4\n100 100 100 100\n''') == '1'\n\nassert solution('''\n8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input_1) == '3'\nassert solution(input_2) == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n6\n10 2 3 5 4 2\n\"\"\"\n) == \"3\"\n\nassert solution(\n\"\"\"\n4\n100 100 100 100\n\"\"\"\n) == \"1\"\n\nassert solution(\n\"\"\"\n8\n7 6 5 4 3 2 2 3\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('6') == '3'\nassert solution('4') == '1'\nassert solution('8') == '4'"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"3\"\nassert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"4\"\n\nsolution(\"10 2 3 5 4 2\")\nsolution(\"100 100 100 100\")\n\nsolution(\"1\")\n\nstdin = \"\"\"4\n1 2 3 4\n\n4\n1 2 3 4\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3978,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''8\n100 100 100 100\n''') == '4'\nassert solution('''6\n10 2 3 5 4 2\n''') == '3'\nassert solution('''4\n100 100 100 100\n''') == '1'\nassert solution('''8\n7 6 5 4 3 2 2 3\n''') == '4'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n''') == 'Yes'\nassert solution('''6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 3 1\n''') == 'No'\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('4 3') == \"Yes\"\nassert solution('6 5') == \"No\"\nassert solution('4 3') == \"Yes\"\nassert solution('6 5') == \"0\"\nassert solution('4 3') == \"Yes\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2') == \"Yes\"\nassert solution('6 5\\n4 3 2 2 1') == \"No\"\nassert solution('4 3\\n4 3 2 2 1') == \"Yes\"\nassert solution('4 3\\n4 3 2 2 2 1') == \"Yes\"\nassert solution('4 3\\n4 3 2 2 2 1') == \"Yes\""
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'\nassert solution('4 3') == 'Yes'\n\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)\nc = 0\nd = []\n\nfor i in range(a):\n    d.append(input())\n    c = 0\n\nfor i in range(len(d)):\n    for j in range(len(d[i])):\n        if j == 0:\n            if int(d[i][j]) >= b:\n                c = 1\n        elif j > 0:\n            if int(d[i][j]) >= int(d[i][j-1]):\n                c = 1\n    if c == 1:\n        print('No')\n        exit()\n    c = 0\n\nfor i in range(len(d)):\n    for j in range(len(d[i])):\n        if j == 0:\n            if int(d[i][j]) <= a:\n                c = 1\n        elif j > 0:\n            if int(d[i][j]) <= int(d[i][j-1]):\n                c = 1\n    if c == 1:\n        print('No')\n        exit()\n    c = 0\n\nprint('Yes')\nprint(int(b), end='')\n\nfor i in range(len(d)):\n    print(*d[i])"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(input_value) == 'Yes'\nprint(solution(input_value))\n\n\n\"\"\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"4 5\") == \"No\"\nassert solution(\"5 5\") == \"Yes\"\nassert solution(\"6 6\") == \"Yes\"\nassert solution(\"7 7\") == \"Yes\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 3') == 'Yes'\nassert solution('6 5') == 'No'\nprint(solution('4 3'))\nprint(solution('6 5'))\nprint(solution('2 5 4'))\nprint(solution('2 5 5'))\n\n---\n\nInput:\n5 5\n2 1 1\n2 1 1\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n\nOutput:\nYes\n2\n2 5 3 4 1 1\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'Yes'\nassert solution() == '0'\nassert solution() == 'No'"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"6 5\") == \"No\"\n"
    },
    {
        "number": 3979,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0 2 1 4 3\"\n\nInput\n5\n\nOutput\n27\n0 1 2 3 4\n\"\"\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0 1 2 3\"\nassert solution(\"2\") == \"0 1 2 3\"\nassert solution(\"3\") == \"0 1 2 3\"\nassert solution(\"4\") == \"0 1 2 3\"\nassert solution(\"5\") == \"0 1 2 3\""
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''3\n0 1 2\n0 2 1\n1 0 2''') == '0 2 1 4 3'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0 2 1\"\nassert solution(\"4\") == \"0 2 1 4 3\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('1') == '0 2 1 4 3'\nassert solution('2') == '0 1 2 3 4'\nassert solution('3') == '0 1 2 3 4'\nassert solution('4') == '0 1 2 3 4'\nassert solution('5') == '0 1 2 3 4'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2') == '0 1'\nassert solution('5') == '0 1 2 3 4'\nassert solution('10') == '0 1 2 3 4 5 6 7 8 9'\n\n\n\n##***\n\n### Your Solution\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(None) == '0 2 1 4 3'\n\n\nstdin = \"\"\"8\n\"\"\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('4') == '0 2 1 4 3'\nassert solution('5') == '1 2 3 4 5'\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == \"2 2 1 3 0 1 4 0 1 3 0\"\n"
    },
    {
        "number": 3980,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n3\n\nOutput\n1 2 3\n''') == \"1 2 3\"\n\nassert solution('''\n1\n\nOutput\n0 1\n''') == \"0 1\"\n\nassert solution('''\n2\n\nOutput\n0 1\n''') == \"0 1\"\n\nassert solution('''\n5\n\nOutput\n20\n0 2 1 4 3\n''') == \"20 0 2 1 4 3\"\n\nassert solution('''\n8\n\nOutput\n18\n1 2 3 4 5 6 7 8\n''') == \"18 1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\n\"\"\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"YES\", \"YES\"\nassert solution(\"3 4\") == \"NO\", \"NO\"\n\"\"\"\n\nfrom math import pi, cos, sin, sqrt, atan\n\nn, m = [int(i) for i in stdin.split()]"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'YES', 'Sample #1'\nassert solution('2 4') == 'NO', 'Sample #2'\nassert solution('1 1') == 'NO', 'Sample #3'\nassert solution('0 0') == 'YES', 'Sample #4'\nassert solution('2 2') == 'YES', 'Sample #5'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('0 0') == 'YES'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('3 4') == 'YES'\nassert solution('3 4') == 'YES'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n5 2\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n5 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'YES'\nassert solution('''3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n''') == 'NO'\nassert solution('''5 6\n1 3\n1 0\n0 2\n0 -1\n2 2\n3 -3\n''') == 'YES'\n"
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\""
    },
    {
        "number": 3981,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('2 1') == 'NO'\nassert solution('3 3') == 'YES'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\nassert solution(\"111\") == \"111\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"11\"\nassert solution(\"1\") == \"111\"\nassert solution(\"1\") == \"11\"\nassert solution(\"1\") == \"11\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n5\n1\n1\n0\n0\n1\n\n''') == '1'\nassert solution('''\n6\n1\n0\n0\n0\n1\n\n''') == '3'\nassert solution('''\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n''') == '1'\nassert solution('''\n10\n1\n0\n0\n0\n1\n\n''') == '4'\nassert solution('''\n13\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n''') == '1'\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('1') == '011'\nassert solution('0') == '000'\nassert solution('1') == '011'\n\n'''\nimport math"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('3') == '1\\n3\\n7'\nassert solution('5') == '1\\n4\\n10\\n22\\n43'\nassert solution('9') == '1\\n3\\n10\\n24\\n51\\n109\\n213\\n421\\n833'\n\n\"\"\""
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''1\n0\n1\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"T\"\nassert solution(\"11\") == \"T\"\nassert solution(\"111\") == \"T\"\nassert solution(\"1\") == \"TT\"\nassert solution(\"11\") == \"TT\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"11\") == \"11\"\n"
    },
    {
        "number": 3982,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n1\n1\n1\n''') == \"3\"\nassert solution('''\n5\n1\n0\n1\n0\n1\n1\n0\n1\n\n''') == \"7\"\nassert solution('''\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\n''') == \"10\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('3 0') == 'First'\nassert solution('3 1') == 'Second'\nassert solution('3 2') == 'First'\nassert solution('15 10') == 'First'\nassert solution('12 14') == 'Second'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\"\nassert solution(\"3 3\") == \"First\"\nassert solution(\"3 4\") == \"Second\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n2 0\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\"\"\") == \"First\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('3 0') == 'First\\nSecond\\nFirst'\nassert solution('3 0') == 'First\\nSecond\\nFirst'\nassert solution('3 0') == 'First\\nSecond\\nFirst'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 0\\n6 2\\n1 2\\n2 3\") == \"First\\nSecond\\nFirst\"\nassert solution(\"3 1\\n10 3\\n9 4\") == \"Second\\nSecond\\nSecond\"\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 0') == 'First\\nSecond\\nFirst\\n'\nassert solution('5 1') == 'First\\nSecond\\nSecond\\nSecond\\nSecond\\nFirst\\n'\nassert solution('2 0') == 'First\\nFirst\\n'\nassert solution('10 1') == 'First\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\nSecond\\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3 0') == 'First\\nSecond\\nFirst'\nassert solution('3 1') == 'Second\\nFirst\\nSecond'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3 0') == 'First\\nSecond\\nFirst'\n\nassert solution('3 1') == 'Second\\nSecond\\nSecond'\n\nassert solution('3 2') == 'First\\nSecond\\nSecond'\n\nassert solution('3 3') == 'First\\nSecond\\nFirst'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3 0') == 'First\\nSecond\\nFirst\\n'\nassert solution('6 2') == 'First\\nSecond\\nSecond\\n'\nassert solution('1 2') == 'First\\nSecond\\nSecond\\nFirst\\n'\nassert solution('2 3') == 'First\\nSecond\\nSecond\\nFirst\\n'\nassert solution('15 10') == 'First\\nSecond\\nSecond\\nFirst\\n'\n"
    },
    {
        "number": 3983,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3 0\") == \"First\"\nassert solution(\"3 1\") == \"Second\"\nassert solution(\"3 2\") == \"First\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\nassert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Ann\"\nassert solution(\"mikajakc\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('') == 'Mike'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    'abba') == 'Mike'\nassert solution(\n    'cba') == 'Mike'\nassert solution(\n    'aaa') == 'Mike'\nassert solution(\n    'zab') == 'Ann'\nassert solution(\n    'abcd') == 'Ann'\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\n    \"abba\"\n    ) == \"Mike\"\nassert solution(\n    \"cba\"\n    ) == \"Ann\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('abba') == 'Mike'\nassert solution('cba') == 'Mike'\n\n\n\"\"\"\n\ns = stdin()\na = s.split(\" \")\na = a[0]"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\"\n"
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == \"Mike\"\nassert solution(\"cba\") == \"Mike\""
    },
    {
        "number": 3984,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input_string) == 'Mike'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"0\"\nassert solution('''\n8 3 8\n1 2\n2 3\n''') == \"2\"\nassert solution('''\n5 6 9\n2 5\n1 6\n3 7\n4 8\n5 9\n''') == \"1\"\nassert solution('''\n5 6 9\n2 5\n1 6\n3 7\n4 8\n5 9\n''') == \"2\"\nassert solution('''\n5 6 9\n3 5\n1 6\n2 7\n4 8\n5 9\n''') == \"3\"\n''') == \"0\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\n    '3 2\\n'\n    '8 3 8\\n'\n    '1 2\\n'\n    '2 3\\n') == '0'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution() == \"2\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\nassert solution('''\n3 2\n8 12 8\n1 2\n2 3\n''') == '2'\nassert solution('''\n3 3\n1 2 2\n2 3 2\n3 4 4\n''') == '3'\nassert solution('''\n3 3\n1 2 2\n2 3 2\n3 4 4\n''') == '3'\nassert solution('''\n3 5\n1 2 3 3 4\n1 2 4 4 3\n1 3 5 3 2\n1 4 5 2 3\n1 5 2 3 4\n''') == '3'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"0\""
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3 2') == '0'\nassert solution('3 2') == '2'\nassert solution('3 2') == '2'"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n3 2\n8 3 8\n1 2\n2 3\n''') == '0'\nassert solution('''\n4 3\n1 3\n5 3\n5 4\n''') == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n3 2\n8 3 8\n1 2\n2 3\n\"\"\") == \"0\"\nassert solution(\"\"\"\n3 2\n8 4 12\n1 2\n2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == \"6\"\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\n"
    },
    {
        "number": 3985,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n4 2\n1 2 1 2\n2 3\n1 3\n\n\"\"\") == \"1\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''2 2\na a\n1\n''') == '-1'\nassert solution('''2 2\na a\n1\n''') == 'ab'\nassert solution('''3 3\nab cd\n10\n''') == '-1'\nassert solution('''3 3\nab cd\n5\n''') == 'abcd'\nassert solution('''4 4\nab ca\n1\n''') == 'ab'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution() == \"ababacd\""
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4 7') == 'ababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1\n1\"\"\") == \"1\"\nassert solution(\"\"\"2\n1\"\"\") == \"-1\"\nassert solution(\"\"\"3\n1\"\"\") == \"1\"\nassert solution(\"\"\"3\n2\"\"\") == \"2\"\nassert solution(\"\"\"4\n1\"\"\") == \"1\"\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('7 4') == \"ababacd\"\nassert solution('4 7') == \"-1\""
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == 'ababacd', solution.__name__\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('4 7') == 'ababacd'\nassert solution('3 5') == 'ababacd'\nassert solution('7 5') == 'ababacd'\nassert solution('5 5') == 'ababacd'\nassert solution('7 7') == 'ababacd'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == 'ababacd'\nassert solution() == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution() == '-1'\n"
    },
    {
        "number": 3986,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('8 7') == 'ababacd'\n\nstdin = \"\"\"\n6 4\n\"\"\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"4\n1 2 1 2\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"10\n1 1 2 2 2 1 1 2 2 1\n\"\"\"\n) == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4\n1 2 1 2''') == '4'\nassert solution('''10\n1 1 2 2 2 1 1 2 2 1''') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '9'"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('4\\n') == '4'\nassert solution('10\\n') == '9'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 1 2\\n\") == \"4\"\nassert solution(\"10\\n1 1 2 2 2 1 1 2 2 1\\n\") == \"9\"\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n1 2 1 2\n''') == 4\nassert solution('''\n10\n1 1 2 2 2 1 1 2 2 1\n''') == 9"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n1 2 1 2\n''') == '4'\nassert solution('''\n10\n1 1 2 2 2 1 1 2 2 1\n''') == '9'\nassert solution('''\n5\n1 1 1 1 1\n''') == '5'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"9\""
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('4') == '4'\nassert solution('10') == '9'\nassert solution('6') == '4'\nassert solution('9') == '8'\nassert solution('22') == '21'\n"
    },
    {
        "number": 3987,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 2\") == 4\nassert solution(\"10\") == 9\nassert solution(\"1 1 2 2 2 1 1 2 2 1\") == 5\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('2 2 1\\n1 1 2\\n2 2 1') == '2'\nassert solution('6 6 3\\n2 4 5\\n1 4 1\\n1 3 1\\n2 2 3\\n') == '6'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_) == stdout_\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(None) == ''\nassert solution('2 2 1') == '2'\nassert solution('1 4 5') == '+'\nassert solution('2 3 4') == '+'\nassert solution('1 3 1') == '-'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''5 5 4\n1 2 3\n1 3 4\n2 4 5\n3 4 2\n3 5 1\n4 1 2''') == '4'\nassert solution('''10 8 7\n1 2 3\n1 3 2\n1 5 2\n1 4 3\n1 5 1\n2 4 3\n3 2 2\n3 5 2\n4 2 3\n5 2 1\n5 4 1\n2 5 2\n4 5 3\n4 5 2''') == '0'\nassert solution('''2 6 3\n1 3 2\n1 2 1\n2 1 1\n3 4 1\n2 4 2\n3 3 2''') == '3'\nassert solution('''5 5 4\n1 2 3\n1 4 2\n1 3 2\n2 4 1\n2 3 2\n3 2 1\n3 4 1\n4 3 1\n4 2 2\n4 5 1\n4 1 2''') == '3'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\nassert solution('''\n1\n2\n3\n''') == '0'\nassert solution('''\n2\n2\n2\n''') == '+'\nassert solution('''\n2\n2\n2\n''') == '-'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('2 2 1') == '2'\nassert solution('1 4 5') == '+-'\nassert solution('2 3 4') == '+-'\nassert solution('1 4 1') == '+'\nassert solution('1 3 1') == '+-'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('2 2 1') == '2'\nassert solution('1 4 1') == '-1'\nassert solution('6 6 3') == '++-'\nassert solution('2 4 5') == '2+'\nassert solution('1 4 1') == '2'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\nassert solution('''\n4 5 3\n1 1 2\n2 3 3\n2 3 2\n3 3 1\n''') == '3'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '2'\nassert solution('''\n6 6 3\n1 2 6\n2 3 5\n3 4 5\n4 1 2\n4 5 2\n5 4 5\n5 4 1\n''') == '2'\n"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n2 2 1\n1 1 2\n2 2 1\n''') == '2'\n\nassert solution('''\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n''') == '6'"
    },
    {
        "number": 3988,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution() == '2'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input()) == \"1869\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('1689') == '1869'\nassert solution('18906') == '18690'\n\n\n'''"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(input()) == \"1869\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"18690\""
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('1234') == '12340'\nassert solution('12345') == '123451'\nassert solution('412345') == '402345'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1234') == '1431'\nassert solution('0123456789') == '987654321'\nprint(solution(input()))"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('17') == '1'\nassert solution('66469') == '69'\nassert solution('1869') == '1869'\nassert solution('18906') == '18690'\nassert solution('1') == '1'\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"1, 6, 8, 9\") == \"189\"\nassert solution(\"1, 6, 8, 9\") == \"189\"\nassert solution(\"12345678901234567890\") == \"18906\"\nassert solution(\"-12345678901234567890\") == \"18690\"\n"
    },
    {
        "number": 3989,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"1689\") == \"1869\"\nassert solution(\"18906\") == \"18690\"\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"3\"\n\nassert solution(\"5 5\") == \"3\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 3\n3 4\n''') == '2'\n\nassert solution('''5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n''') == '3'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''\n4 2\n1 3\n3 4\n''') == '2'\n\nassert solution('''\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"3\"\nassert solution(\"5 5\") == \"4\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 3\\n3 4\\n') == '2'\nassert solution('5 5\\n4 2\\n3 5\\n4 5\\n5 1\\n1 2\\n') == '-1'\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution() == '2'\nassert solution('5 6') == '3'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(INPUT) == OUTPUT\n"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"4 6\") == \"-1\"\nassert solution(\"5 5\") == \"3\""
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5 2') == '3'\nassert solution('4 6') == '-1'\nassert solution('5 5') == '3'"
    },
    {
        "number": 3990,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('4 2') == 2\nassert solution('4 6') == -1\nassert solution('5 5') == 3\nassert solution('10 20') == 9"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"0\""
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(input_data) == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2\\n4 7\\n') == '3'\nassert solution('3\\n4 3 1\\n') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n3\n4 7\n''') == '3'\nassert solution('''\n3\n4 3 1\n''') == '9'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"12\"\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '3'\nassert solution('3') == '6'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\nassert solution('4') == '3'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '3'\n"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '3'\nassert solution('2') == '1'\n\nassert solution('4') == '1'"
    },
    {
        "number": 3991,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('2') == '3'\nassert solution('3') == '9'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"0\"\nassert solution(\"1\") == \"-1\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('3\\n4 8 5\\n') == '9\\n'\nassert solution('5\\n3 10 2 1 5\\n') == '2\\n'\nassert solution('4\\n0 5 15 10\\n') == '0\\n'\nassert solution('1\\n1\\n') == '-1\\n'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('2') == '-1'\nassert solution('3') == '9'\nassert solution('4') == '2'\nassert solution('5') == '0'\nassert solution('6') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"-1\"\nassert solution(\"5\") == \"1\""
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == '9'\nassert solution(\"4\") == '2'\nassert solution(\"5\") == '0'\nassert solution(\"6\") == '-1'\nassert solution(\"7\") == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('5') == '0'\nassert solution('4') == '-1'\nassert solution('3') == '9'\nassert solution('2') == '2'\nassert solution('1') == '-1'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('''\n4\n8 5\n''') == '9'\nassert solution('''\n5\n3 10 2 1 5\n''') == '2'\nassert solution('''\n4\n0 5 15 10\n''') == '0'\nassert solution('''\n1\n1\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('1') == '-1'\nassert solution('2') == '0'\nassert solution('3') == '9'\nassert solution('4') == '2'\nassert solution('5') == '0'\n"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('''\n3\n4 8 5\n''') == '9'\n\nassert solution('''\n1\n1\n''') == '-1'\n\nassert solution('''\n5\n3 10 2 1 5\n''') == '2'\n\nassert solution('''\n4\n0 5 15 10\n''') == '0'\n\nassert solution('''\n1\n1\n''') == '-1'"
    },
    {
        "number": 3992,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"2\") == '-1'\nassert solution(\"5\") == '0'\nassert solution(\"1\") == '-1'\nassert solution(\"4\") == '0'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(input) == str(3)\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\n    \"10 4 5\\n\" +\n    \"3 5 7 10\\n\"\n) == \"3\"\n\nassert solution(\n    \"13 4 5\\n\" +\n    \"7 8 9 10\\n\"\n) == \"1\"\n\nassert solution(\n    \"16 4 5\\n\" +\n    \"11 12 13 14 15 16 17 18 19\\n\" +\n    \"20 21 22 23 24 25 26 27 28 29\\n\" +\n    \"31 32 33 34 35 36 37 38 39\\n\" +\n    \"41 42 43 44 45 46 47 48 49\\n\" +\n    \"51 52 53 54 55 56 57 58 59\\n\" +\n    \"61 62 63 64 65 66 67 68 69\\n\" +\n    \"71 72 73 74 75 76 77 78 79\\n\" +\n    \"81 82 83 84 85 86 87 88 89\\n\" +\n    \"91 92 93 94 95 96 97 98 99\\n\" +\n    \"101 102 103 104 105 106 107 108 109\\n\" +\n    \"111 112 113 114 115 116 117 118 119\\n\" +\n    \"121 122 123 124 125 126 127 128 129\\n\" +\n    \"131 132 133 134 135 136 137 138 139\\n\" +\n    \"141 142 143 144 145 146 147 148 149\\n\" +\n    \"151 152 153 154 155 156 157 158 159\\n\" +\n    \"161 162 163 164 165 166 167 168 169\\n\" +\n    \"171 172 173 174 175 176 177 178 179\\n\" +\n    \"181 182 183 184 185 186 187 188 189\\n\" +\n    \"191 192 193 194 195 196 197 198 199\\n\" +\n    \"201 202 203 204 205 206 207 208 209\\n\" +\n    \"211 212 213 214 215 216 217 218 219\\n\" +\n    \"221 222 223 224 225 226 227 228 229\\n\" +\n    \"231 232 233 234 235 236 237 238 239\\n\" +\n    \"241 242 243 244 245 246 247 248 249\\n\" +\n    \"251 252 253 254 255 256 257 258 259\\n\" +\n    \"261 262 263 264 265 266 267 268 269\\n\" +\n    \"271 272 273 274 275 276 277 278 279\\n\" +\n    \"281 282 283 284 285 286 287 288 289\\n\" +\n    \"291 292 293 294 295 296 297 298 299\\n\" +\n    \"301 302 303304 305306 307308 3093091\\n\" +\n    \"311 312 313141516171819\\n\" +\n    \"321 322 323242526272829\\n\" +\n    \"331 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536373839\\n\" +\n    \"341 332 333343536"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(s) == \"1\"\n\ns = input().split(\" \")\nn, m, k = int(s[0]), int(s[1]), int(s[2])\np = [int(s) for s in input().split(\" \")]"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3\") == \"3\"\nassert solution(\"5 4 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''10 4 5\n3 5 7 10''') == '3'\nassert solution('''13 4 5\n7 8 9 10''') == '1'\nassert solution('''11 4 5\n1 2 3 4''') == '0'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5 4 5\") == \"3\"\nassert solution(\"10 4 5\") == \"1\"\nassert solution(\"13 4 5\") == \"1\"\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''10 4 5\n3 5 7 10\n''') == '1'\nassert solution('''13 4 5\n7 8 9 10\n''') == '1'\nassert solution('''10 4 5\n7 8 9 10\n''') == '2'\nassert solution('''13 4 5\n3 5 7 10\n''') == '3'\n"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('10 4 5') == '3'\nassert solution('13 4 5') == '1'\nassert solution('5 5 5') == '0'\nassert solution('5 5 5') == '0'"
    },
    {
        "number": 3993,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('''\n10 4 5\n3 5 7 10\n\n''') == '3'\n\nassert solution('''\n10 4 5\n7 8 9 10\n\n''') == '1'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''3\n101\n3 3\n3 2\n3 1\n''') == '2'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2\n''') == '4'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n''') == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '4'\nassert solution('6') == '6'"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"6\"\n\nassert solution(\"6\") == \"6\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''3\n101\n3 3\n3 2''') == '2'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2''') == '4'\nassert solution('''6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5''') == '6'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution('''2\n1111\n3 4''') == '4'\nassert solution('''4\n1111\n3 4\n5 2\n3 1\n3 2''') == '6'\nassert solution('''5\n11111\n3 4\n5 2\n3 1\n3 2''') == '6'\n\n'''(31 ms, 10.9 MB)'''"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"1\\n01\\n1 2\") == \"2\"\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('5\\n1101') == '2'\nassert solution('6\\n01110') == '6'\nassert solution('1\\n1111') == '1'\nassert solution('2\\n01110') == '1'\nassert solution('3\\n11100') == '1'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 3994,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"6\") == \"6\"\nassert solution(\"10\") == \"9\"\nassert solution(\"11\") == \"10\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('''4 4''') == '1111'\nassert solution('''5 3''') == '01010'\nassert solution('''7 3''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('''4 4\n\n''') == '1111'\nassert solution('''5 3\n\n''') == '01010'\nassert solution('''7 3\n\n''') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('3 3') == '111'\nassert solution('4 4') == '1111'\nassert solution('5 3') == '01010'\nassert solution('7 3') == '1011011'\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(input()) == '1111'\nassert solution(input()) == '01010'\nassert solution(input()) == '1011011'"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\nassert solution(\"12 0\") == \"110000\"\nprint(\"You are a smart guy, who passed all tests!\")"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"010\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(INP) == OUTP\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"1111\"\nassert solution(\"5 3\") == \"01010\"\nassert solution(\"7 3\") == \"1011011\"\n"
    },
    {
        "number": 3995,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution(input()) == '1111'\nassert solution(input()) == '01010'\nassert solution(input()) == '1011011'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution('1') == '0/1'\nassert solution('2') == '1/2'\nassert solution('3') == '0/1'"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution([5]) == \"1/5\"\nassert solution([5, 5, 5]) == \"1/5\"\nassert solution([3, 4, 5]) == \"1/2\"\nassert solution([2, 1, 2]) == \"0/1\"\nassert solution([3, 4, 5, 2]) == \"1/3\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1/2\"\nassert solution(\"3\") == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('''\n2\n1 1\n''') == '0/1'\nassert solution('''\n1\n2\n''') == '1/2'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"0/1\"\nassert solution(\"2\") == \"0/1\"\nassert solution(\"1 2\") == \"1/2\"\nassert solution(\"1 1 1\") == \"1/2\"\nassert solution(\"1 1 1 1\") == \"1/2\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n2\n1 1\n''') == '1/2'\nassert solution('''\n3\n1 1 1\n''') == '0/1'\nassert solution('''\n2\n1 2\n''') == '1/2'\nassert solution('''\n3\n1 2 1\n''') == '1/3'\nassert solution('''\n3\n1 2 1\n''') == '0/1'\n''')"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('1') == \"1/2\"\nassert solution('2') == \"0/1\"\nassert solution('3') == \"0/1\"\nassert solution('4') == \"0/1\"\nassert solution('5') == \"0/1\"\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''\n5\n1 2 2 3 1\n''') == '0/3'\nassert solution('''\n4\n4 2 3 1\n''') == '1/4'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2\n1 1\n\"\"\") == '0/1'\nassert solution(\"\"\"\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1\n\"\"\") == '1/1'\n"
    },
    {
        "number": 3996,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution([1]) == '1/1'\nassert solution([2]) == '1/1'\nassert solution([3]) == '0/1'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution() == \"1 0 1 0 0\"\nassert solution(\"3 3\") == \"2 2 2 1 1\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"1 0 1 0 0\"\nassert solution(\"8\") == \"3 3 2 1 0\"\nassert solution(\"6\") == \"3 3 2 1 0\"\nassert solution(\"15\") == \"4 4 3 3 2 1 0 0 0 0 1 1 2 3\"\nassert solution(\"100\") == \"2 2 1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n\n\n'''\n\n\nimport collections\nimport heapq\nfrom math import inf\n\nN = int(input())\na = list(map(int, input().split()))\n\ntree = [[] for _ in range(N)]\nfor i in range(0, N-1, 2):\n    tree[a[i]].append(a[i+1])\n    tree[a[i+1]].append(a[i])\n\nvisited = {key: False for key in range(1, N+1)}"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == \"1 0 1 0 0\"\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\") == \"4 3 2 1 0\""
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6\") == \"1 0 1 0 0\"\n\nassert solution(\"5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1\\n\") == \"4 3 2 1 0\"\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution('''5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n''') == '1 0 1 0 0'\nassert solution('''5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n''') == '4 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7') == '1 0 1 0 0'\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\nassert solution('5\\n1 1\\n2 1\\n3 1\\n4 1') == '3 3 2 1 0'\n"
    },
    {
        "number": 3997,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5\\n2 5 1 4 6\\n1 7\\n1 1\\n3 5\\n3 6') == '1 0 1 0 0'\n\nassert solution('5\\n9 7 8 6 5\\n1 1\\n2 1\\n3 1\\n4 1') == '4 3 2 1 0'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"8\"\nassert solution(\"1 2\") == \"0\""
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution('5') == '1'\nassert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '11'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''5\n4 5 1 7 4\n''') == '1'\nassert solution('''2\n1 2\n''') == '0'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution(\n    '5'\n) == '1'\nassert solution(\n    '4 5 1 7 4'\n) == '8'\nassert solution(\n    '2'\n) == '2'\nassert solution(\n    '3'\n) == '11'"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n3\n5 3 1 7 4\n''') == '1\n\nassert solution('''\n3\n2 1 1\n''') == '8\n\nassert solution('''\n2\n1 1\n''') == '1\n\nassert solution('''\n2\n3 1\n''') == '0\n'''"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution() == \"1\"\nassert solution(\"\") == \"0\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution() == '1'\nassert solution() == '11'\nassert solution() == '0011'\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '0'\nassert solution('3') == '11'\nprint(solution(input()))\n"
    },
    {
        "number": 3998,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('5') == '1'\nassert solution('2') == '0'\nassert solution('3') == '11'"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"1\", \"Should be 1\"\nassert solution(\"1 2 3\") == \"3\", \"Should be 3\"\n\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert solution('''6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5''') == '1'\n\"\"\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert solution('6') == '1'\nassert solution('5') == '1'\nassert solution('8') == '2'\n'''\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n\") == \"1\"\nassert solution(\"6\\n1 4 2 3\\n0 5 6 7\\n2 5 3 6\\n5 2 1 3\\n0 6 7 4\\n3 7 4 5\\n6 7 5 2\\n0 4 1 6\\n5 4 7 2\\n2 5 6 3\\n4 1 3 7\\n\") == \"10\"\nassert solution(\"9\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\\n\") == \"7\"\nassert solution(\"16\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n\") == \"27\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1\\n\") == \"9\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert solution('''\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n''') == '1'\nassert solution('''\n8\n1 4 4 7\n4 7 7 7\n4 5 6 7\n7 2 7 2\n5 4 4 6\n3 3 3 3\n5 7 7 3\n3 1 4 5\n''') == '4'\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert solution('3') == '1'\nassert solution('5') == '2'\nassert solution('6') == '2'"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 2 3\\n0 4 6 1\\n1 6 7 2\\n2 7 5 3\\n6 4 5 7\\n4 0 3 5\") == \"1\"\n"
    },
    {
        "number": 3999,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert solution('6') == '1'"
    }
]